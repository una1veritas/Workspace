
stm32f4-i2c.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000188:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800018c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000190:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000194:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000198:	60d8      	str	r0, [r3, #12]
}
 800019a:	4770      	bx	lr

0800019c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800019c:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800019e:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001a0:	b97b      	cbnz	r3, 80001c2 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001a2:	7802      	ldrb	r2, [r0, #0]
 80001a4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80001a8:	0951      	lsrs	r1, r2, #5
 80001aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ae:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001b2:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001b4:	2001      	movs	r0, #1
 80001b6:	fa10 f202 	lsls.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001be:	bc30      	pop	{r4, r5}
 80001c0:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001c2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80001c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001ca:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001cc:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001ce:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001d0:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001d2:	43d2      	mvns	r2, r2
 80001d4:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 80001d8:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001dc:	b2c9      	uxtb	r1, r1
 80001de:	fa15 f101 	lsls.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 80001e2:	250f      	movs	r5, #15
 80001e4:	fa55 f202 	asrs.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001e8:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001ea:	4022      	ands	r2, r4
 80001ec:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001ee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80001f2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 80001f6:	0112      	lsls	r2, r2, #4
 80001f8:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001fa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001fe:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000200:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000204:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000206:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800020a:	f002 021f 	and.w	r2, r2, #31
 800020e:	2001      	movs	r0, #1
 8000210:	fa10 f202 	lsls.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000214:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8000218:	e7d1      	b.n	80001be <NVIC_Init+0x22>
 800021a:	bf00      	nop

0800021c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800021c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000220:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000224:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000228:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800022c:	4301      	orrs	r1, r0
 800022e:	6099      	str	r1, [r3, #8]
}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop

08000234 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000234:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000238:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800023c:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800023e:	b919      	cbnz	r1, 8000248 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000240:	ea22 0000 	bic.w	r0, r2, r0
 8000244:	6118      	str	r0, [r3, #16]
 8000246:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000248:	4310      	orrs	r0, r2
 800024a:	6118      	str	r0, [r3, #16]
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000250:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000254:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000258:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	bf0c      	ite	eq
 800025e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000262:	f022 0204 	bicne.w	r2, r2, #4
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop

0800026c <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 800026c:	b508      	push	{r3, lr}
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 800026e:	2101      	movs	r1, #1
 8000270:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000274:	f003 feb2 	bl	8003fdc <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000278:	f44f 7080 	mov.w	r0, #256	; 0x100
 800027c:	2100      	movs	r1, #0
}
 800027e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000282:	f003 beab 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
 8000286:	bf00      	nop

08000288 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000288:	f8d0 c004 	ldr.w	ip, [r0, #4]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800028c:	680b      	ldr	r3, [r1, #0]
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800028e:	794a      	ldrb	r2, [r1, #5]
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000290:	f02c 7c40 	bic.w	ip, ip, #50331648	; 0x3000000
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000294:	b4f0      	push	{r4, r5, r6, r7}
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000296:	f42c 7c80 	bic.w	ip, ip, #256	; 0x100
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800029a:	790d      	ldrb	r5, [r1, #4]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800029c:	68cf      	ldr	r7, [r1, #12]
 800029e:	690c      	ldr	r4, [r1, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002a0:	688e      	ldr	r6, [r1, #8]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002a2:	ea4c 0303 	orr.w	r3, ip, r3
 80002a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002aa:	6043      	str	r3, [r0, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002ac:	6885      	ldr	r5, [r0, #8]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002ae:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002b2:	433c      	orrs	r4, r7
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002b4:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002b8:	4334      	orrs	r4, r6
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002ba:	402b      	ands	r3, r5
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002bc:	4323      	orrs	r3, r4
 80002be:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80002c2:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80002c4:	7d0b      	ldrb	r3, [r1, #20]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80002c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80002c8:	3b01      	subs	r3, #1
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80002ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80002d4:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop

080002dc <ADC_StructInit>:
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80002dc:	2300      	movs	r3, #0
 80002de:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80002e0:	7103      	strb	r3, [r0, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80002e2:	7143      	strb	r3, [r0, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80002e4:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80002e6:	60c3      	str	r3, [r0, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80002e8:	6103      	str	r3, [r0, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80002ea:	2301      	movs	r3, #1
 80002ec:	7503      	strb	r3, [r0, #20]
}
 80002ee:	4770      	bx	lr

080002f0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80002f0:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80002f2:	f44f 520c 	mov.w	r2, #8960	; 0x2300
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80002f6:	e890 0042 	ldmia.w	r0, {r1, r6}
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80002fa:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80002fe:	6885      	ldr	r5, [r0, #8]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000300:	6854      	ldr	r4, [r2, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000302:	68c0      	ldr	r0, [r0, #12]
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000304:	f243 03e0 	movw	r3, #12512	; 0x30e0
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000308:	4331      	orrs	r1, r6
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800030a:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800030e:	4329      	orrs	r1, r5
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000310:	4023      	ands	r3, r4
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000312:	4301      	orrs	r1, r0
 8000314:	430b      	orrs	r3, r1
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000316:	6053      	str	r3, [r2, #4]
}
 8000318:	bc70      	pop	{r4, r5, r6}
 800031a:	4770      	bx	lr

0800031c <ADC_CommonStructInit>:
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 800031c:	2300      	movs	r3, #0
 800031e:	6003      	str	r3, [r0, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000320:	6043      	str	r3, [r0, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000322:	6083      	str	r3, [r0, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000324:	60c3      	str	r3, [r0, #12]
}
 8000326:	4770      	bx	lr

08000328 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000328:	6883      	ldr	r3, [r0, #8]
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800032a:	b919      	cbnz	r1, 8000334 <ADC_Cmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800032c:	f023 0301 	bic.w	r3, r3, #1
 8000330:	6083      	str	r3, [r0, #8]
 8000332:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6083      	str	r3, [r0, #8]
 800033a:	4770      	bx	lr

0800033c <ADC_AnalogWatchdogCmd>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800033c:	6843      	ldr	r3, [r0, #4]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 800033e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000342:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8000346:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000348:	6043      	str	r3, [r0, #4]
}
 800034a:	4770      	bx	lr

0800034c <ADC_AnalogWatchdogThresholdsConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 800034c:	6241      	str	r1, [r0, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800034e:	6282      	str	r2, [r0, #40]	; 0x28
}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop

08000354 <ADC_AnalogWatchdogSingleChannelConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000354:	6843      	ldr	r3, [r0, #4]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8000356:	f023 031f 	bic.w	r3, r3, #31
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800035a:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 800035c:	6043      	str	r3, [r0, #4]
}
 800035e:	4770      	bx	lr

08000360 <ADC_TempSensorVrefintCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8000360:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000364:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000368:	685a      	ldr	r2, [r3, #4]
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800036a:	b918      	cbnz	r0, 8000374 <ADC_TempSensorVrefintCmd+0x14>
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 800036c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8000374:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	4770      	bx	lr

0800037c <ADC_VBATCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 800037c:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000380:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000384:	685a      	ldr	r2, [r3, #4]
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000386:	b918      	cbnz	r0, 8000390 <ADC_VBATCmd+0x14>
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8000388:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8000390:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	4770      	bx	lr

08000398 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000398:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800039a:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800039c:	d91e      	bls.n	80003dc <ADC_RegularChannelConfig+0x44>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800039e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80003a2:	3c1e      	subs	r4, #30
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80003a4:	68c6      	ldr	r6, [r0, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80003a6:	2507      	movs	r5, #7
 80003a8:	40a5      	lsls	r5, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80003aa:	ea26 0505 	bic.w	r5, r6, r5
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80003ae:	fa13 f404 	lsls.w	r4, r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003b2:	ea45 0304 	orr.w	r3, r5, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80003b6:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80003b8:	60c3      	str	r3, [r0, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80003ba:	d91d      	bls.n	80003f8 <ADC_RegularChannelConfig+0x60>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80003bc:	2a0c      	cmp	r2, #12
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80003be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80003c2:	d926      	bls.n	8000412 <ADC_RegularChannelConfig+0x7a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80003c4:	3a41      	subs	r2, #65	; 0x41
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 80003c6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 80003c8:	231f      	movs	r3, #31
 80003ca:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80003cc:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80003d0:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80003d2:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80003d6:	62c2      	str	r2, [r0, #44]	; 0x2c
  }
}
 80003d8:	bc70      	pop	{r4, r5, r6}
 80003da:	4770      	bx	lr
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80003dc:	6906      	ldr	r6, [r0, #16]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80003de:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80003e2:	2507      	movs	r5, #7
 80003e4:	40a5      	lsls	r5, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80003e6:	ea26 0505 	bic.w	r5, r6, r5
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80003ea:	fa13 f404 	lsls.w	r4, r3, r4
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003ee:	ea45 0304 	orr.w	r3, r5, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80003f2:	2a06      	cmp	r2, #6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80003f4:	6103      	str	r3, [r0, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80003f6:	d8e1      	bhi.n	80003bc <ADC_RegularChannelConfig+0x24>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80003f8:	3a01      	subs	r2, #1
 80003fa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80003fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000400:	231f      	movs	r3, #31
 8000402:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000404:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000408:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800040a:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800040e:	6342      	str	r2, [r0, #52]	; 0x34
 8000410:	e7e2      	b.n	80003d8 <ADC_RegularChannelConfig+0x40>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000412:	3a23      	subs	r2, #35	; 0x23
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000414:	6b04      	ldr	r4, [r0, #48]	; 0x30
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000416:	231f      	movs	r3, #31
 8000418:	4093      	lsls	r3, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800041a:	ea24 0303 	bic.w	r3, r4, r3
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800041e:	4091      	lsls	r1, r2
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000420:	ea43 0201 	orr.w	r2, r3, r1
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000424:	6302      	str	r2, [r0, #48]	; 0x30
 8000426:	e7d7      	b.n	80003d8 <ADC_RegularChannelConfig+0x40>

08000428 <ADC_SoftwareStartConv>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000428:	6883      	ldr	r3, [r0, #8]
 800042a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800042e:	6083      	str	r3, [r0, #8]
}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop

08000434 <ADC_GetSoftwareStartConvStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000434:	6880      	ldr	r0, [r0, #8]
    bitstatus = RESET;
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
}
 8000436:	f3c0 5080 	ubfx	r0, r0, #22, #1
 800043a:	4770      	bx	lr

0800043c <ADC_EOCOnEachRegularChannelCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 800043c:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800043e:	b919      	cbnz	r1, 8000448 <ADC_EOCOnEachRegularChannelCmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8000440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000444:	6083      	str	r3, [r0, #8]
 8000446:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8000448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800044c:	6083      	str	r3, [r0, #8]
 800044e:	4770      	bx	lr

08000450 <ADC_ContinuousModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8000450:	6883      	ldr	r3, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000452:	b919      	cbnz	r1, 800045c <ADC_ContinuousModeCmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8000454:	f023 0302 	bic.w	r3, r3, #2
 8000458:	6083      	str	r3, [r0, #8]
 800045a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 800045c:	f043 0302 	orr.w	r3, r3, #2
 8000460:	6083      	str	r3, [r0, #8]
 8000462:	4770      	bx	lr

08000464 <ADC_DiscModeChannelCountConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8000464:	6843      	ldr	r3, [r0, #4]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8000466:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8000468:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
  tmpreg1 |= tmpreg2 << 13;
 800046c:	ea43 3141 	orr.w	r1, r3, r1, lsl #13
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8000470:	6041      	str	r1, [r0, #4]
}
 8000472:	4770      	bx	lr

08000474 <ADC_DiscModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000474:	6843      	ldr	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000476:	b919      	cbnz	r1, 8000480 <ADC_DiscModeCmd+0xc>
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8000478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800047c:	6043      	str	r3, [r0, #4]
 800047e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000480:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000484:	6043      	str	r3, [r0, #4]
 8000486:	4770      	bx	lr

08000488 <ADC_GetConversionValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000488:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
 800048a:	b280      	uxth	r0, r0
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <ADC_GetMultiModeConversionValue>:
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8000490:	f242 3308 	movw	r3, #8968	; 0x2308
 8000494:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000498:	6818      	ldr	r0, [r3, #0]
}
 800049a:	4770      	bx	lr

0800049c <ADC_DMACmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 800049c:	6883      	ldr	r3, [r0, #8]
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800049e:	b919      	cbnz	r1, 80004a8 <ADC_DMACmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 80004a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004a4:	6083      	str	r3, [r0, #8]
 80004a6:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 80004a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ac:	6083      	str	r3, [r0, #8]
 80004ae:	4770      	bx	lr

080004b0 <ADC_DMARequestAfterLastTransferCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80004b0:	6883      	ldr	r3, [r0, #8]
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004b2:	b919      	cbnz	r1, 80004bc <ADC_DMARequestAfterLastTransferCmd+0xc>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 80004b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004b8:	6083      	str	r3, [r0, #8]
 80004ba:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 80004bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004c0:	6083      	str	r3, [r0, #8]
 80004c2:	4770      	bx	lr

080004c4 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80004c4:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80004c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80004cc:	685a      	ldr	r2, [r3, #4]
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004ce:	b918      	cbnz	r0, 80004d8 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x14>
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80004d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 80004d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	4770      	bx	lr

080004e0 <ADC_InjectedChannelConfig>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80004e0:	2909      	cmp	r1, #9
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80004e2:	b470      	push	{r4, r5, r6}
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80004e4:	d81c      	bhi.n	8000520 <ADC_InjectedChannelConfig+0x40>
    ADCx->SMPR1 = tmpreg1;
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80004e6:	6906      	ldr	r6, [r0, #16]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80004e8:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80004ec:	2507      	movs	r5, #7
 80004ee:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004f0:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80004f4:	fa13 f404 	lsls.w	r4, r3, r4
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004f8:	ea45 0304 	orr.w	r3, r5, r4
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80004fc:	6103      	str	r3, [r0, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80004fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8000500:	f3c3 5401 	ubfx	r4, r3, #20, #2
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000504:	1b12      	subs	r2, r2, r4
 8000506:	3202      	adds	r2, #2
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800050e:	241f      	movs	r4, #31
 8000510:	4094      	lsls	r4, r2
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8000512:	ea23 0304 	bic.w	r3, r3, r4
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000516:	4091      	lsls	r1, r2
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000518:	430b      	orrs	r3, r1
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800051a:	6383      	str	r3, [r0, #56]	; 0x38
}
 800051c:	bc70      	pop	{r4, r5, r6}
 800051e:	4770      	bx	lr
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8000520:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000524:	68c6      	ldr	r6, [r0, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8000526:	3c1e      	subs	r4, #30
 8000528:	2507      	movs	r5, #7
 800052a:	40a5      	lsls	r5, r4
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800052c:	ea26 0505 	bic.w	r5, r6, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8000530:	fa13 f404 	lsls.w	r4, r3, r4
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000534:	ea45 0304 	orr.w	r3, r5, r4
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000538:	60c3      	str	r3, [r0, #12]
 800053a:	e7e0      	b.n	80004fe <ADC_InjectedChannelConfig+0x1e>

0800053c <ADC_InjectedSequencerLengthConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800053c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 800053e:	3901      	subs	r1, #1
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8000540:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
  tmpreg1 |= tmpreg2 << 20;
 8000544:	ea43 5101 	orr.w	r1, r3, r1, lsl #20
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000548:	6381      	str	r1, [r0, #56]	; 0x38
}
 800054a:	4770      	bx	lr

0800054c <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 800054c:	b082      	sub	sp, #8
    __IO uint32_t tmp = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8000552:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel;
 8000554:	9b01      	ldr	r3, [sp, #4]
 8000556:	18cb      	adds	r3, r1, r3
 8000558:	9301      	str	r3, [sp, #4]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 800055a:	9b01      	ldr	r3, [sp, #4]
 800055c:	601a      	str	r2, [r3, #0]
}
 800055e:	b002      	add	sp, #8
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <ADC_ExternalTrigInjectedConvConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8000564:	6883      	ldr	r3, [r0, #8]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8000566:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 800056a:	430b      	orrs	r3, r1
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 800056c:	6083      	str	r3, [r0, #8]
}
 800056e:	4770      	bx	lr

08000570 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8000570:	6883      	ldr	r3, [r0, #8]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8000572:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8000576:	430b      	orrs	r3, r1
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8000578:	6083      	str	r3, [r0, #8]
}
 800057a:	4770      	bx	lr

0800057c <ADC_SoftwareStartInjectedConv>:
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 800057c:	6883      	ldr	r3, [r0, #8]
 800057e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000582:	6083      	str	r3, [r0, #8]
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000588:	6880      	ldr	r0, [r0, #8]
    /* JSWSTART bit is reset */
    bitstatus = RESET;
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
}
 800058a:	f3c0 5080 	ubfx	r0, r0, #22, #1
 800058e:	4770      	bx	lr

08000590 <ADC_AutoInjectedConvCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8000590:	6843      	ldr	r3, [r0, #4]
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000592:	b919      	cbnz	r1, 800059c <ADC_AutoInjectedConvCmd+0xc>
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8000594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000598:	6043      	str	r3, [r0, #4]
 800059a:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 800059c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a0:	6043      	str	r3, [r0, #4]
 80005a2:	4770      	bx	lr

080005a4 <ADC_InjectedDiscModeCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 80005a4:	6843      	ldr	r3, [r0, #4]
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005a6:	b919      	cbnz	r1, 80005b0 <ADC_InjectedDiscModeCmd+0xc>
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 80005a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80005ac:	6043      	str	r3, [r0, #4]
 80005ae:	4770      	bx	lr
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 80005b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005b4:	6043      	str	r3, [r0, #4]
 80005b6:	4770      	bx	lr

080005b8 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 80005b8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 80005be:	9001      	str	r0, [sp, #4]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 80005c0:	9b01      	ldr	r3, [sp, #4]
 80005c2:	3328      	adds	r3, #40	; 0x28
 80005c4:	185b      	adds	r3, r3, r1
 80005c6:	9301      	str	r3, [sp, #4]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 80005c8:	9b01      	ldr	r3, [sp, #4]
 80005ca:	6818      	ldr	r0, [r3, #0]
}
 80005cc:	b280      	uxth	r0, r0
 80005ce:	b002      	add	sp, #8
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <ADC_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    
 80005d4:	2301      	movs	r3, #1
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80005d6:	b2c9      	uxtb	r1, r1
  itmask = (uint32_t)0x01 << itmask;    
 80005d8:	fa13 f101 	lsls.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80005dc:	6843      	ldr	r3, [r0, #4]

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
 80005de:	b91a      	cbnz	r2, 80005e8 <ADC_ITConfig+0x14>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 80005e0:	ea23 0101 	bic.w	r1, r3, r1
 80005e4:	6041      	str	r1, [r0, #4]
 80005e6:	4770      	bx	lr
  itmask = (uint32_t)0x01 << itmask;    

  if (NewState != DISABLE)
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80005e8:	4319      	orrs	r1, r3
 80005ea:	6041      	str	r1, [r0, #4]
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80005f0:	6803      	ldr	r3, [r0, #0]
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80005f2:	4219      	tst	r1, r3
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 80005f4:	bf0c      	ite	eq
 80005f6:	2000      	moveq	r0, #0
 80005f8:	2001      	movne	r0, #1
 80005fa:	4770      	bx	lr

080005fc <ADC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 80005fc:	43c9      	mvns	r1, r1
 80005fe:	6001      	str	r1, [r0, #0]
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <ADC_GetITStatus>:

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8000604:	6843      	ldr	r3, [r0, #4]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8000606:	6800      	ldr	r0, [r0, #0]
 8000608:	ea10 2011 	ands.w	r0, r0, r1, lsr #8
 800060c:	d007      	beq.n	800061e <ADC_GetITStatus+0x1a>

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 800060e:	2201      	movs	r2, #1
 8000610:	b2c9      	uxtb	r1, r1
 8000612:	fa12 f101 	lsls.w	r1, r2, r1
  *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
 8000616:	4219      	tst	r1, r3

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8000618:	bf0c      	ite	eq
 800061a:	2000      	moveq	r0, #0
 800061c:	2001      	movne	r0, #1
    /* ADC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_IT status */
  return  bitstatus;
}
 800061e:	4770      	bx	lr

08000620 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8000620:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8000624:	6001      	str	r1, [r0, #0]
}                    
 8000626:	4770      	bx	lr

08000628 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8000628:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 800062a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800062e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000632:	4298      	cmp	r0, r3
 8000634:	d00b      	beq.n	800064e <CAN_DeInit+0x26>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8000636:	2101      	movs	r1, #1
 8000638:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800063c:	f003 fcc0 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000640:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000644:	2100      	movs	r1, #0
  }
}
 8000646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 800064a:	f003 bcb9 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 800064e:	2101      	movs	r1, #1
 8000650:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000654:	f003 fcb4 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8000658:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800065c:	2100      	movs	r1, #0
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
 800065e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (CANx == CAN1)
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8000662:	f003 bcad 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
 8000666:	bf00      	nop

08000668 <CAN_Init>:
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000668:	6803      	ldr	r3, [r0, #0]
 800066a:	f023 0302 	bic.w	r3, r3, #2
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 800066e:	b470      	push	{r4, r5, r6}
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000670:	6003      	str	r3, [r0, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000672:	6803      	ldr	r3, [r0, #0]
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6003      	str	r3, [r0, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800067a:	6843      	ldr	r3, [r0, #4]
 800067c:	07db      	lsls	r3, r3, #31
 800067e:	d407      	bmi.n	8000690 <CAN_Init+0x28>
 8000680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000684:	e001      	b.n	800068a <CAN_Init+0x22>
 8000686:	3b01      	subs	r3, #1
 8000688:	d002      	beq.n	8000690 <CAN_Init+0x28>
 800068a:	6842      	ldr	r2, [r0, #4]
 800068c:	07d2      	lsls	r2, r2, #31
 800068e:	d5fa      	bpl.n	8000686 <CAN_Init+0x1e>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000690:	6843      	ldr	r3, [r0, #4]
 8000692:	f013 0301 	ands.w	r3, r3, #1
  {
    InitStatus = CAN_InitStatus_Failed;
 8000696:	bf08      	it	eq
 8000698:	4618      	moveq	r0, r3
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800069a:	d059      	beq.n	8000750 <CAN_Init+0xe8>
    InitStatus = CAN_InitStatus_Failed;
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800069c:	798b      	ldrb	r3, [r1, #6]
 800069e:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TTCM;
 80006a0:	6803      	ldr	r3, [r0, #0]
 80006a2:	bf0c      	ite	eq
 80006a4:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80006a8:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 80006ac:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 80006ae:	79cb      	ldrb	r3, [r1, #7]
 80006b0:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_ABOM;
 80006b2:	6803      	ldr	r3, [r0, #0]
 80006b4:	bf0c      	ite	eq
 80006b6:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80006ba:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 80006be:	6003      	str	r3, [r0, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 80006c0:	7a0b      	ldrb	r3, [r1, #8]
 80006c2:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_AWUM;
 80006c4:	6803      	ldr	r3, [r0, #0]
 80006c6:	bf0c      	ite	eq
 80006c8:	f043 0320 	orreq.w	r3, r3, #32
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80006cc:	f023 0320 	bicne.w	r3, r3, #32
 80006d0:	6003      	str	r3, [r0, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 80006d2:	7a4b      	ldrb	r3, [r1, #9]
 80006d4:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_NART;
 80006d6:	6803      	ldr	r3, [r0, #0]
 80006d8:	bf0c      	ite	eq
 80006da:	f043 0310 	orreq.w	r3, r3, #16
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 80006de:	f023 0310 	bicne.w	r3, r3, #16
 80006e2:	6003      	str	r3, [r0, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80006e4:	7a8b      	ldrb	r3, [r1, #10]
 80006e6:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80006e8:	6803      	ldr	r3, [r0, #0]
 80006ea:	bf0c      	ite	eq
 80006ec:	f043 0308 	orreq.w	r3, r3, #8
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80006f0:	f023 0308 	bicne.w	r3, r3, #8
 80006f4:	6003      	str	r3, [r0, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 80006f6:	7acb      	ldrb	r3, [r1, #11]
 80006f8:	2b01      	cmp	r3, #1
    {
      CANx->MCR |= CAN_MCR_TXFP;
 80006fa:	6803      	ldr	r3, [r0, #0]
 80006fc:	bf0c      	ite	eq
 80006fe:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000702:	f023 0304 	bicne.w	r3, r3, #4
 8000706:	6003      	str	r3, [r0, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000708:	788a      	ldrb	r2, [r1, #2]
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800070a:	78ce      	ldrb	r6, [r1, #3]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800070c:	790d      	ldrb	r5, [r1, #4]
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800070e:	794c      	ldrb	r4, [r1, #5]
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000710:	880b      	ldrh	r3, [r1, #0]
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000712:	0792      	lsls	r2, r2, #30
 8000714:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000718:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 800071c:	3b01      	subs	r3, #1
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 800071e:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000722:	4313      	orrs	r3, r2
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000724:	61c3      	str	r3, [r0, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000726:	6803      	ldr	r3, [r0, #0]
 8000728:	f023 0301 	bic.w	r3, r3, #1
 800072c:	6003      	str	r3, [r0, #0]

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800072e:	6843      	ldr	r3, [r0, #4]
 8000730:	07d9      	lsls	r1, r3, #31
 8000732:	d507      	bpl.n	8000744 <CAN_Init+0xdc>
 8000734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000738:	e001      	b.n	800073e <CAN_Init+0xd6>
 800073a:	3b01      	subs	r3, #1
 800073c:	d002      	beq.n	8000744 <CAN_Init+0xdc>
 800073e:	6842      	ldr	r2, [r0, #4]
 8000740:	07d2      	lsls	r2, r2, #31
 8000742:	d4fa      	bmi.n	800073a <CAN_Init+0xd2>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000744:	6843      	ldr	r3, [r0, #4]
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
  {
    InitStatus = CAN_InitStatus_Failed;
 8000746:	f013 0f01 	tst.w	r3, #1
 800074a:	bf14      	ite	ne
 800074c:	2000      	movne	r0, #0
 800074e:	2001      	moveq	r0, #1
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
}
 8000750:	bc70      	pop	{r4, r5, r6}
 8000752:	4770      	bx	lr

08000754 <CAN_FilterInit>:
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000754:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000758:	f2c4 0300 	movt	r3, #16384	; 0x4000
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 800075c:	7a82      	ldrb	r2, [r0, #10]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800075e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8000762:	f041 0101 	orr.w	r1, r1, #1
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000766:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000768:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 800076c:	2401      	movs	r4, #1

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 800076e:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000772:	4094      	lsls	r4, r2

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000774:	43e2      	mvns	r2, r4
 8000776:	4011      	ands	r1, r2
 8000778:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 800077c:	7b01      	ldrb	r1, [r0, #12]
 800077e:	b9d1      	cbnz	r1, 80007b6 <CAN_FilterInit+0x62>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000780:	f8d3 620c 	ldr.w	r6, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000784:	f8b0 c006 	ldrh.w	ip, [r0, #6]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000788:	8847      	ldrh	r7, [r0, #2]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800078a:	8885      	ldrh	r5, [r0, #4]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 800078c:	8801      	ldrh	r1, [r0, #0]

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 800078e:	4016      	ands	r6, r2
 8000790:	f8c3 620c 	str.w	r6, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000794:	7a86      	ldrb	r6, [r0, #10]
 8000796:	3648      	adds	r6, #72	; 0x48
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000798:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800079c:	f843 7036 	str.w	r7, [r3, r6, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80007a0:	7a86      	ldrb	r6, [r0, #10]
 80007a2:	f246 6340 	movw	r3, #26176	; 0x6640
 80007a6:	00f6      	lsls	r6, r6, #3
 80007a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007ac:	18f3      	adds	r3, r6, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80007ae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80007b2:	6059      	str	r1, [r3, #4]
 80007b4:	7b01      	ldrb	r1, [r0, #12]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 80007b6:	2901      	cmp	r1, #1
 80007b8:	d049      	beq.n	800084e <CAN_FilterInit+0xfa>
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 80007ba:	7ac3      	ldrb	r3, [r0, #11]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d12d      	bne.n	800081c <CAN_FilterInit+0xc8>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 80007c0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80007c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007c8:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 80007cc:	4011      	ands	r1, r2
 80007ce:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 80007d2:	8903      	ldrh	r3, [r0, #8]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d12d      	bne.n	8000834 <CAN_FilterInit+0xe0>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 80007d8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80007dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80007e0:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80007e4:	400a      	ands	r2, r1
 80007e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 80007ea:	7b43      	ldrb	r3, [r0, #13]
 80007ec:	2b01      	cmp	r3, #1
  {
    CAN1->FA1R |= filter_number_bit_pos;
 80007ee:	bf01      	itttt	eq
 80007f0:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 80007f4:	f2c4 0300 	movteq	r3, #16384	; 0x4000
 80007f8:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 80007fc:	4314      	orreq	r4, r2
 80007fe:	bf08      	it	eq
 8000800:	f8c3 421c 	streq.w	r4, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000804:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000808:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800080c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000810:	f022 0201 	bic.w	r2, r2, #1
 8000814:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8000818:	bcf0      	pop	{r4, r5, r6, r7}
 800081a:	4770      	bx	lr
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 800081c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000820:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000824:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8000828:	4321      	orrs	r1, r4
 800082a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 800082e:	8903      	ldrh	r3, [r0, #8]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0d1      	beq.n	80007d8 <CAN_FilterInit+0x84>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8000834:	2b01      	cmp	r3, #1
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8000836:	bf01      	itttt	eq
 8000838:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 800083c:	f2c4 0300 	movteq	r3, #16384	; 0x4000
 8000840:	f8d3 2214 	ldreq.w	r2, [r3, #532]	; 0x214
 8000844:	4322      	orreq	r2, r4
 8000846:	bf08      	it	eq
 8000848:	f8c3 2214 	streq.w	r2, [r3, #532]	; 0x214
 800084c:	e7cd      	b.n	80007ea <CAN_FilterInit+0x96>
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800084e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8000852:	f2c4 0300 	movt	r3, #16384	; 0x4000
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000856:	f8b0 c000 	ldrh.w	ip, [r0]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 800085a:	f8d3 620c 	ldr.w	r6, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 800085e:	8847      	ldrh	r7, [r0, #2]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000860:	8885      	ldrh	r5, [r0, #4]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8000862:	88c1      	ldrh	r1, [r0, #6]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000864:	4326      	orrs	r6, r4
 8000866:	f8c3 620c 	str.w	r6, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800086a:	7a86      	ldrb	r6, [r0, #10]
 800086c:	3648      	adds	r6, #72	; 0x48
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800086e:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000872:	f843 7036 	str.w	r7, [r3, r6, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000876:	7a86      	ldrb	r6, [r0, #10]
 8000878:	f246 6340 	movw	r3, #26176	; 0x6640
 800087c:	00f6      	lsls	r6, r6, #3
 800087e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000882:	18f3      	adds	r3, r6, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000884:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000888:	6059      	str	r1, [r3, #4]
 800088a:	e796      	b.n	80007ba <CAN_FilterInit+0x66>

0800088c <CAN_StructInit>:
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	7183      	strb	r3, [r0, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8000890:	71c3      	strb	r3, [r0, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8000892:	7203      	strb	r3, [r0, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8000894:	7243      	strb	r3, [r0, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8000896:	7283      	strb	r3, [r0, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8000898:	72c3      	strb	r3, [r0, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 800089a:	7083      	strb	r3, [r0, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 800089c:	70c3      	strb	r3, [r0, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 800089e:	2303      	movs	r3, #3
 80008a0:	7103      	strb	r3, [r0, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80008a2:	2302      	movs	r3, #2
 80008a4:	7143      	strb	r3, [r0, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	8003      	strh	r3, [r0, #0]
}
 80008aa:	4770      	bx	lr

080008ac <CAN_SlaveStartBank>:
{
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80008ac:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80008b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80008b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008b8:	f042 0201 	orr.w	r2, r2, #1
 80008bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 80008c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008c4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80008c8:	f022 020e 	bic.w	r2, r2, #14
 80008cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 80008d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80008d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 80008dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008e0:	f022 0201 	bic.w	r2, r2, #1
 80008e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <CAN_DBGFreeze>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 80008ec:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008ee:	b919      	cbnz	r1, 80008f8 <CAN_DBGFreeze+0xc>
    CANx->MCR |= MCR_DBF;
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 80008f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008f4:	6003      	str	r3, [r0, #0]
 80008f6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 80008f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008fc:	6003      	str	r3, [r0, #0]
 80008fe:	4770      	bx	lr

08000900 <CAN_TTComModeCmd>:
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000900:	6803      	ldr	r3, [r0, #0]
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000902:	b9a9      	cbnz	r1, 8000930 <CAN_TTComModeCmd+0x30>
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8000904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000908:	6003      	str	r3, [r0, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 800090a:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 800090e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000912:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8000916:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 800091a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800091e:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8000922:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800092a:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 800092e:	4770      	bx	lr
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6003      	str	r3, [r0, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8000936:	f8d0 3184 	ldr.w	r3, [r0, #388]	; 0x184
 800093a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093e:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8000942:	f8d0 3194 	ldr.w	r3, [r0, #404]	; 0x194
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	f8c0 3194 	str.w	r3, [r0, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 800094e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	f8c0 31a4 	str.w	r3, [r0, #420]	; 0x1a4
 800095a:	4770      	bx	lr

0800095c <CAN_Transmit>:
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800095c:	6882      	ldr	r2, [r0, #8]
 800095e:	0152      	lsls	r2, r2, #5
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000960:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8000964:	4603      	mov	r3, r0
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000966:	d405      	bmi.n	8000974 <CAN_Transmit+0x18>
  {
    transmit_mailbox = 0;
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000968:	6882      	ldr	r2, [r0, #8]
 800096a:	0110      	lsls	r0, r2, #4
 800096c:	d554      	bpl.n	8000a18 <CAN_Transmit+0xbc>
 800096e:	2501      	movs	r5, #1
  {
    transmit_mailbox = 1;
 8000970:	4628      	mov	r0, r5
 8000972:	e001      	b.n	8000978 <CAN_Transmit+0x1c>
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000974:	2500      	movs	r5, #0
  {
    transmit_mailbox = 0;
 8000976:	4628      	mov	r0, r5
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8000978:	f105 0418 	add.w	r4, r5, #24
 800097c:	0122      	lsls	r2, r4, #4
 800097e:	589e      	ldr	r6, [r3, r2]
 8000980:	f006 0601 	and.w	r6, r6, #1
 8000984:	509e      	str	r6, [r3, r2]
    if (TxMessage->IDE == CAN_Id_Standard)
 8000986:	7a0e      	ldrb	r6, [r1, #8]
 8000988:	2e00      	cmp	r6, #0
 800098a:	d03c      	beq.n	8000a06 <CAN_Transmit+0xaa>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800098c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8000990:	f853 c002 	ldr.w	ip, [r3, r2]
                                                  TxMessage->IDE | \
 8000994:	7a4f      	ldrb	r7, [r1, #9]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000996:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
                                                  TxMessage->IDE | \
 800099a:	ea46 060c 	orr.w	r6, r6, ip
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800099e:	433e      	orrs	r6, r7
 80009a0:	509e      	str	r6, [r3, r2]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80009a2:	7a8e      	ldrb	r6, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80009a4:	0124      	lsls	r4, r4, #4
 80009a6:	191a      	adds	r2, r3, r4
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 80009a8:	f006 060f 	and.w	r6, r6, #15
 80009ac:	728e      	strb	r6, [r1, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80009ae:	6856      	ldr	r6, [r2, #4]
 80009b0:	f026 060f 	bic.w	r6, r6, #15
 80009b4:	6056      	str	r6, [r2, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80009b6:	6856      	ldr	r6, [r2, #4]
 80009b8:	7a8f      	ldrb	r7, [r1, #10]
 80009ba:	433e      	orrs	r6, r7
 80009bc:	6056      	str	r6, [r2, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80009be:	7b4a      	ldrb	r2, [r1, #13]
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80009c0:	f891 c00e 	ldrb.w	ip, [r1, #14]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 80009c4:	7acf      	ldrb	r7, [r1, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80009c6:	7b0e      	ldrb	r6, [r1, #12]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80009c8:	0412      	lsls	r2, r2, #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80009ca:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 80009ce:	eb03 1505 	add.w	r5, r3, r5, lsl #4
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80009d2:	433a      	orrs	r2, r7
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80009d4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80009d8:	f8c5 2188 	str.w	r2, [r5, #392]	; 0x188
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80009dc:	7c4a      	ldrb	r2, [r1, #17]
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80009de:	7c8f      	ldrb	r7, [r1, #18]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 80009e0:	7bce      	ldrb	r6, [r1, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80009e2:	7c09      	ldrb	r1, [r1, #16]
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80009e4:	0412      	lsls	r2, r2, #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80009e6:	ea42 6207 	orr.w	r2, r2, r7, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80009ea:	4332      	orrs	r2, r6
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80009ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80009f0:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 80009f4:	591a      	ldr	r2, [r3, r4]
 80009f6:	f042 0201 	orr.w	r2, r2, #1
 80009fa:	511a      	str	r2, [r3, r4]
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80009fc:	f505 75c4 	add.w	r5, r5, #392	; 0x188
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
  }
  return transmit_mailbox;
}
 8000a00:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8000a04:	4770      	bx	lr
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000a06:	f8d1 c000 	ldr.w	ip, [r1]
 8000a0a:	7a4e      	ldrb	r6, [r1, #9]
 8000a0c:	589f      	ldr	r7, [r3, r2]
 8000a0e:	ea46 564c 	orr.w	r6, r6, ip, lsl #21
 8000a12:	433e      	orrs	r6, r7
 8000a14:	509e      	str	r6, [r3, r2]
 8000a16:	e7c4      	b.n	80009a2 <CAN_Transmit+0x46>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
  {
    transmit_mailbox = 1;
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	00d2      	lsls	r2, r2, #3
 8000a1c:	d502      	bpl.n	8000a24 <CAN_Transmit+0xc8>
 8000a1e:	2502      	movs	r5, #2
  {
    transmit_mailbox = 2;
 8000a20:	4628      	mov	r0, r5
 8000a22:	e7a9      	b.n	8000978 <CAN_Transmit+0x1c>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8000a24:	2004      	movs	r0, #4
 8000a26:	e7eb      	b.n	8000a00 <CAN_Transmit+0xa4>

08000a28 <CAN_TransmitStatus>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8000a28:	2901      	cmp	r1, #1
 8000a2a:	d02a      	beq.n	8000a82 <CAN_TransmitStatus+0x5a>
 8000a2c:	d310      	bcc.n	8000a50 <CAN_TransmitStatus+0x28>
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
      break;
    default:
      state = CAN_TxStatus_Failed;
 8000a2e:	2300      	movs	r3, #0

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8000a30:	2902      	cmp	r1, #2
 8000a32:	d104      	bne.n	8000a3e <CAN_TransmitStatus+0x16>
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
      break;
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8000a34:	6882      	ldr	r2, [r0, #8]
 8000a36:	2300      	movs	r3, #0
 8000a38:	f2c1 0303 	movt	r3, #4099	; 0x1003
 8000a3c:	4013      	ands	r3, r2
      break;
    default:
      state = CAN_TxStatus_Failed;
      break;
  }
  switch (state)
 8000a3e:	2203      	movs	r2, #3
 8000a40:	f2c0 4200 	movt	r2, #1024	; 0x400
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d00d      	beq.n	8000a64 <CAN_TransmitStatus+0x3c>
 8000a48:	d80e      	bhi.n	8000a68 <CAN_TransmitStatus+0x40>
 8000a4a:	b9c3      	cbnz	r3, 8000a7e <CAN_TransmitStatus+0x56>
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	4770      	bx	lr
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8000a50:	6882      	ldr	r2, [r0, #8]
 8000a52:	2303      	movs	r3, #3
 8000a54:	f2c0 4300 	movt	r3, #1024	; 0x400
 8000a58:	4013      	ands	r3, r2
      break;
    default:
      state = CAN_TxStatus_Failed;
      break;
  }
  switch (state)
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	f2c0 4200 	movt	r2, #1024	; 0x400
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d1f1      	bne.n	8000a48 <CAN_TransmitStatus+0x20>
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
      break;
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
      break;
 8000a64:	2001      	movs	r0, #1
 8000a66:	4770      	bx	lr
      break;
    default:
      state = CAN_TxStatus_Failed;
      break;
  }
  switch (state)
 8000a68:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a6c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d0f7      	beq.n	8000a64 <CAN_TransmitStatus+0x3c>
 8000a74:	2200      	movs	r2, #0
 8000a76:	f2c1 0203 	movt	r2, #4099	; 0x1003
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d0f2      	beq.n	8000a64 <CAN_TransmitStatus+0x3c>
 8000a7e:	2000      	movs	r0, #0
      break;
    default: state = CAN_TxStatus_Failed;
      break;
  }
  return (uint8_t) state;
}
 8000a80:	4770      	bx	lr
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
      break;
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8000a82:	6882      	ldr	r2, [r0, #8]
 8000a84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a88:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000a8c:	4013      	ands	r3, r2
      break;
 8000a8e:	e7d6      	b.n	8000a3e <CAN_TransmitStatus+0x16>

08000a90 <CAN_CancelTransmit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8000a90:	2901      	cmp	r1, #1
 8000a92:	d00c      	beq.n	8000aae <CAN_CancelTransmit+0x1e>
 8000a94:	d306      	bcc.n	8000aa4 <CAN_CancelTransmit+0x14>
 8000a96:	2902      	cmp	r1, #2
 8000a98:	d103      	bne.n	8000aa2 <CAN_CancelTransmit+0x12>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
      break;
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8000a9a:	6883      	ldr	r3, [r0, #8]
 8000a9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000aa0:	6083      	str	r3, [r0, #8]
 8000aa2:	4770      	bx	lr
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8000aa4:	6883      	ldr	r3, [r0, #8]
 8000aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aaa:	6083      	str	r3, [r0, #8]
      break;
 8000aac:	4770      	bx	lr
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8000aae:	6883      	ldr	r3, [r0, #8]
 8000ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ab4:	6083      	str	r3, [r0, #8]
      break;
 8000ab6:	4770      	bx	lr

08000ab8 <CAN_Receive>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000ab8:	f101 031b 	add.w	r3, r1, #27
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000abc:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000abe:	011c      	lsls	r4, r3, #4
 8000ac0:	5905      	ldr	r5, [r0, r4]
 8000ac2:	f005 0504 	and.w	r5, r5, #4
 8000ac6:	b2ed      	uxtb	r5, r5
 8000ac8:	7215      	strb	r5, [r2, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000aca:	5904      	ldr	r4, [r0, r4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
  if (RxMessage->IDE == CAN_Id_Standard)
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d136      	bne.n	8000b3e <CAN_Receive+0x86>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000ad0:	0d64      	lsrs	r4, r4, #21
 8000ad2:	6014      	str	r4, [r2, #0]
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	18c4      	adds	r4, r0, r3
 8000ad8:	58c3      	ldr	r3, [r0, r3]
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	7253      	strb	r3, [r2, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000ae0:	6863      	ldr	r3, [r4, #4]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	7293      	strb	r3, [r2, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000ae8:	6864      	ldr	r4, [r4, #4]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000aea:	eb00 1301 	add.w	r3, r0, r1, lsl #4
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000aee:	0a24      	lsrs	r4, r4, #8
 8000af0:	74d4      	strb	r4, [r2, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000af2:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000af6:	72d4      	strb	r4, [r2, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000af8:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000afc:	0a24      	lsrs	r4, r4, #8
 8000afe:	7314      	strb	r4, [r2, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000b00:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000b04:	0c24      	lsrs	r4, r4, #16
 8000b06:	7354      	strb	r4, [r2, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000b08:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
 8000b0c:	0e24      	lsrs	r4, r4, #24
 8000b0e:	7394      	strb	r4, [r2, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000b10:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000b14:	73d4      	strb	r4, [r2, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000b16:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
 8000b1a:	0a24      	lsrs	r4, r4, #8
 8000b1c:	7414      	strb	r4, [r2, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000b1e:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000b22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000b26:	0c24      	lsrs	r4, r4, #16
 8000b28:	7454      	strb	r4, [r2, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	0e1b      	lsrs	r3, r3, #24
 8000b2e:	7493      	strb	r3, [r2, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000b30:	b141      	cbz	r1, 8000b44 <CAN_Receive+0x8c>
    CANx->RF0R |= CAN_RF0R_RFOM0;
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000b32:	6903      	ldr	r3, [r0, #16]
 8000b34:	f043 0320 	orr.w	r3, r3, #32
 8000b38:	6103      	str	r3, [r0, #16]
  }
}
 8000b3a:	bc30      	pop	{r4, r5}
 8000b3c:	4770      	bx	lr
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000b3e:	08e4      	lsrs	r4, r4, #3
 8000b40:	6054      	str	r4, [r2, #4]
 8000b42:	e7c7      	b.n	8000ad4 <CAN_Receive+0x1c>
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000b44:	68c3      	ldr	r3, [r0, #12]
 8000b46:	f043 0320 	orr.w	r3, r3, #32
 8000b4a:	60c3      	str	r3, [r0, #12]
 8000b4c:	e7f5      	b.n	8000b3a <CAN_Receive+0x82>
 8000b4e:	bf00      	nop

08000b50 <CAN_FIFORelease>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000b50:	b121      	cbz	r1, 8000b5c <CAN_FIFORelease+0xc>
    CANx->RF0R |= CAN_RF0R_RFOM0;
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000b52:	6903      	ldr	r3, [r0, #16]
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6103      	str	r3, [r0, #16]
 8000b5a:	4770      	bx	lr
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000b5c:	68c3      	ldr	r3, [r0, #12]
 8000b5e:	f043 0320 	orr.w	r3, r3, #32
 8000b62:	60c3      	str	r3, [r0, #12]
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <CAN_MessagePending>:
{
  uint8_t message_pending=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8000b68:	b131      	cbz	r1, 8000b78 <CAN_MessagePending+0x10>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
  }
  else if (FIFONumber == CAN_FIFO1)
 8000b6a:	2901      	cmp	r1, #1
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8000b6c:	bf06      	itte	eq
 8000b6e:	6900      	ldreq	r0, [r0, #16]
 8000b70:	f000 0003 	andeq.w	r0, r0, #3
  }
  else
  {
    message_pending = 0;
 8000b74:	2000      	movne	r0, #0
  }
  return message_pending;
}
 8000b76:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8000b78:	68c0      	ldr	r0, [r0, #12]
 8000b7a:	f000 0003 	and.w	r0, r0, #3
 8000b7e:	4770      	bx	lr

08000b80 <CAN_OperatingModeRequest>:

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8000b80:	b9f1      	cbnz	r1, 8000bc0 <CAN_OperatingModeRequest+0x40>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8000b82:	6803      	ldr	r3, [r0, #0]
 8000b84:	f023 0303 	bic.w	r3, r3, #3
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8000b8e:	6843      	ldr	r3, [r0, #4]
 8000b90:	f003 0303 	and.w	r3, r3, #3
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d009      	beq.n	8000bac <CAN_OperatingModeRequest+0x2c>
 8000b98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9c:	e001      	b.n	8000ba2 <CAN_OperatingModeRequest+0x22>
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	d004      	beq.n	8000bac <CAN_OperatingModeRequest+0x2c>
 8000ba2:	6842      	ldr	r2, [r0, #4]
 8000ba4:	f002 0203 	and.w	r2, r2, #3
 8000ba8:	2a01      	cmp	r2, #1
 8000baa:	d1f8      	bne.n	8000b9e <CAN_OperatingModeRequest+0x1e>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8000bac:	6840      	ldr	r0, [r0, #4]
 8000bae:	f000 0003 	and.w	r0, r0, #3
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000bb2:	f1a0 0c01 	sub.w	ip, r0, #1
 8000bb6:	f1dc 0000 	rsbs	r0, ip, #0
 8000bba:	eb40 000c 	adc.w	r0, r0, ip
 8000bbe:	4770      	bx	lr
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8000bc0:	2901      	cmp	r1, #1
 8000bc2:	d003      	beq.n	8000bcc <CAN_OperatingModeRequest+0x4c>
    else
    {
      status = CAN_ModeStatus_Success;
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8000bc4:	2902      	cmp	r1, #2
 8000bc6:	d017      	beq.n	8000bf8 <CAN_OperatingModeRequest+0x78>
      status = CAN_ModeStatus_Success;
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8000bc8:	2000      	movs	r0, #0
  }

  return  (uint8_t) status;
}
 8000bca:	4770      	bx	lr
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8000bcc:	6803      	ldr	r3, [r0, #0]
 8000bce:	f023 0303 	bic.w	r3, r3, #3
 8000bd2:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8000bd4:	6843      	ldr	r3, [r0, #4]
 8000bd6:	0799      	lsls	r1, r3, #30
 8000bd8:	d007      	beq.n	8000bea <CAN_OperatingModeRequest+0x6a>
 8000bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bde:	e001      	b.n	8000be4 <CAN_OperatingModeRequest+0x64>
 8000be0:	3b01      	subs	r3, #1
 8000be2:	d002      	beq.n	8000bea <CAN_OperatingModeRequest+0x6a>
 8000be4:	6842      	ldr	r2, [r0, #4]
 8000be6:	0792      	lsls	r2, r2, #30
 8000be8:	d1fa      	bne.n	8000be0 <CAN_OperatingModeRequest+0x60>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8000bea:	6843      	ldr	r3, [r0, #4]
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000bec:	f013 0f03 	tst.w	r3, #3
 8000bf0:	bf14      	ite	ne
 8000bf2:	2000      	movne	r0, #0
 8000bf4:	2001      	moveq	r0, #1
 8000bf6:	4770      	bx	lr
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8000bf8:	6803      	ldr	r3, [r0, #0]
 8000bfa:	f023 0303 	bic.w	r3, r3, #3
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	6003      	str	r3, [r0, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8000c04:	6843      	ldr	r3, [r0, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d009      	beq.n	8000c22 <CAN_OperatingModeRequest+0xa2>
 8000c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c12:	e001      	b.n	8000c18 <CAN_OperatingModeRequest+0x98>
 8000c14:	3b01      	subs	r3, #1
 8000c16:	d004      	beq.n	8000c22 <CAN_OperatingModeRequest+0xa2>
 8000c18:	6842      	ldr	r2, [r0, #4]
 8000c1a:	f002 0203 	and.w	r2, r2, #3
 8000c1e:	2a02      	cmp	r2, #2
 8000c20:	d1f8      	bne.n	8000c14 <CAN_OperatingModeRequest+0x94>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8000c22:	6840      	ldr	r0, [r0, #4]
 8000c24:	f000 0003 	and.w	r0, r0, #3
    {
      status = CAN_ModeStatus_Failed;
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8000c28:	f1a0 0102 	sub.w	r1, r0, #2
 8000c2c:	4248      	negs	r0, r1
 8000c2e:	eb40 0001 	adc.w	r0, r0, r1
 8000c32:	4770      	bx	lr

08000c34 <CAN_Sleep>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8000c34:	6803      	ldr	r3, [r0, #0]
 8000c36:	f023 0303 	bic.w	r3, r3, #3
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	6003      	str	r3, [r0, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8000c40:	6840      	ldr	r0, [r0, #4]
 8000c42:	f000 0003 	and.w	r0, r0, #3
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
}
 8000c46:	f1a0 0302 	sub.w	r3, r0, #2
 8000c4a:	4258      	negs	r0, r3
 8000c4c:	eb40 0003 	adc.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop

08000c54 <CAN_WakeUp>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8000c54:	6803      	ldr	r3, [r0, #0]
 8000c56:	f023 0302 	bic.w	r3, r3, #2
 8000c5a:	6003      	str	r3, [r0, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8000c5c:	6843      	ldr	r3, [r0, #4]
 8000c5e:	0799      	lsls	r1, r3, #30
 8000c60:	d507      	bpl.n	8000c72 <CAN_WakeUp+0x1e>
 8000c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c66:	e001      	b.n	8000c6c <CAN_WakeUp+0x18>
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	d002      	beq.n	8000c72 <CAN_WakeUp+0x1e>
 8000c6c:	6842      	ldr	r2, [r0, #4]
 8000c6e:	0792      	lsls	r2, r2, #30
 8000c70:	d4fa      	bmi.n	8000c68 <CAN_WakeUp+0x14>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8000c72:	6843      	ldr	r3, [r0, #4]
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
  uint32_t wait_slak = SLAK_TIMEOUT;
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8000c74:	f013 0f02 	tst.w	r3, #2
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
}
 8000c78:	bf14      	ite	ne
 8000c7a:	2000      	movne	r0, #0
 8000c7c:	2001      	moveq	r0, #1
 8000c7e:	4770      	bx	lr

08000c80 <CAN_GetLastErrorCode>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8000c80:	6980      	ldr	r0, [r0, #24]
  
  /* Return the error code*/
  return errorcode;
}
 8000c82:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000c86:	4770      	bx	lr

08000c88 <CAN_GetReceiveErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8000c88:	6980      	ldr	r0, [r0, #24]
  
  /* Return the Receive Error Counter*/
  return counter;
}
 8000c8a:	0e00      	lsrs	r0, r0, #24
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <CAN_GetLSBTransmitErrorCounter>:
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8000c90:	6980      	ldr	r0, [r0, #24]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
}
 8000c92:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000c96:	4770      	bx	lr

08000c98 <CAN_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8000c98:	6943      	ldr	r3, [r0, #20]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c9a:	b91a      	cbnz	r2, 8000ca4 <CAN_ITConfig+0xc>
    CANx->IER |= CAN_IT;
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 8000c9c:	ea23 0101 	bic.w	r1, r3, r1
 8000ca0:	6141      	str	r1, [r0, #20]
 8000ca2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	6141      	str	r1, [r0, #20]
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <CAN_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8000cac:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8000cb0:	d009      	beq.n	8000cc6 <CAN_GetFlagStatus+0x1a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000cb2:	6983      	ldr	r3, [r0, #24]
 8000cb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000cbc:	420b      	tst	r3, r1
 8000cbe:	bf0c      	ite	eq
 8000cc0:	2000      	moveq	r0, #0
 8000cc2:	2001      	movne	r0, #1
 8000cc4:	4770      	bx	lr
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8000cc6:	01cb      	lsls	r3, r1, #7
 8000cc8:	d509      	bpl.n	8000cde <CAN_GetFlagStatus+0x32>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000cca:	6843      	ldr	r3, [r0, #4]
 8000ccc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cd0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000cd4:	420b      	tst	r3, r1
 8000cd6:	bf0c      	ite	eq
 8000cd8:	2000      	moveq	r0, #0
 8000cda:	2001      	movne	r0, #1
 8000cdc:	4770      	bx	lr
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8000cde:	010a      	lsls	r2, r1, #4
 8000ce0:	d40b      	bmi.n	8000cfa <CAN_GetFlagStatus+0x4e>
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8000ce2:	018b      	lsls	r3, r1, #6
 8000ce4:	d513      	bpl.n	8000d0e <CAN_GetFlagStatus+0x62>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000ce6:	68c3      	ldr	r3, [r0, #12]
 8000ce8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000cec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000cf0:	420b      	tst	r3, r1
 8000cf2:	bf0c      	ite	eq
 8000cf4:	2000      	moveq	r0, #0
 8000cf6:	2001      	movne	r0, #1
 8000cf8:	4770      	bx	lr
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000cfa:	6883      	ldr	r3, [r0, #8]
 8000cfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000d04:	420b      	tst	r3, r1
 8000d06:	bf0c      	ite	eq
 8000d08:	2000      	moveq	r0, #0
 8000d0a:	2001      	movne	r0, #1
 8000d0c:	4770      	bx	lr
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8000d0e:	6903      	ldr	r3, [r0, #16]
 8000d10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000d14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
      bitstatus = SET;
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8000d18:	420b      	tst	r3, r1
 8000d1a:	bf0c      	ite	eq
 8000d1c:	2000      	moveq	r0, #0
 8000d1e:	2001      	movne	r0, #1
      bitstatus = RESET;
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <CAN_ClearFlag>:
  uint32_t flagtmp=0;
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8000d24:	2370      	movs	r3, #112	; 0x70
 8000d26:	f2c3 03f0 	movt	r3, #12528	; 0x30f0
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	d00e      	beq.n	8000d4c <CAN_ClearFlag+0x28>
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8000d2e:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8000d32:	018a      	lsls	r2, r1, #6
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8000d34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8000d38:	d406      	bmi.n	8000d48 <CAN_ClearFlag+0x24>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8000d3a:	014a      	lsls	r2, r1, #5
 8000d3c:	d409      	bmi.n	8000d52 <CAN_ClearFlag+0x2e>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8000d3e:	010a      	lsls	r2, r1, #4
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8000d40:	bf4c      	ite	mi
 8000d42:	6083      	strmi	r3, [r0, #8]
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8000d44:	6043      	strpl	r3, [r0, #4]
 8000d46:	4770      	bx	lr
    flagtmp = CAN_FLAG & 0x000FFFFF;

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8000d48:	60c3      	str	r3, [r0, #12]
 8000d4a:	4770      	bx	lr
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	6183      	str	r3, [r0, #24]
 8000d50:	4770      	bx	lr
      CANx->RF0R = (uint32_t)(flagtmp);
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8000d52:	6103      	str	r3, [r0, #16]
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <CAN_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8000d58:	6943      	ldr	r3, [r0, #20]
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	d00b      	beq.n	8000d76 <CAN_GetITStatus+0x1e>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8000d5e:	2940      	cmp	r1, #64	; 0x40
 8000d60:	d033      	beq.n	8000dca <CAN_GetITStatus+0x72>
 8000d62:	d80a      	bhi.n	8000d7a <CAN_GetITStatus+0x22>
 8000d64:	2904      	cmp	r1, #4
 8000d66:	d03b      	beq.n	8000de0 <CAN_GetITStatus+0x88>
 8000d68:	d825      	bhi.n	8000db6 <CAN_GetITStatus+0x5e>
 8000d6a:	2901      	cmp	r1, #1
 8000d6c:	d04e      	beq.n	8000e0c <CAN_GetITStatus+0xb4>
 8000d6e:	2902      	cmp	r1, #2
 8000d70:	d042      	beq.n	8000df8 <CAN_GetITStatus+0xa0>
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
        break;
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8000d72:	2000      	movs	r0, #0
    itstatus  = RESET;
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
}
 8000d74:	4770      	bx	lr
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8000d76:	4618      	mov	r0, r3
 8000d78:	4770      	bx	lr
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8000d7a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8000d7e:	d028      	beq.n	8000dd2 <CAN_GetITStatus+0x7a>
 8000d80:	d80c      	bhi.n	8000d9c <CAN_GetITStatus+0x44>
 8000d82:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000d86:	d04e      	beq.n	8000e26 <CAN_GetITStatus+0xce>
 8000d88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8000d8c:	d030      	beq.n	8000df0 <CAN_GetITStatus+0x98>
 8000d8e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000d92:	d1ee      	bne.n	8000d72 <CAN_GetITStatus+0x1a>
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
        break;
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8000d94:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000d96:	f000 0001 	and.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8000d9c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000da0:	d03d      	beq.n	8000e1e <CAN_GetITStatus+0xc6>
 8000da2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000da6:	d02d      	beq.n	8000e04 <CAN_GetITStatus+0xac>
 8000da8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8000dac:	d1e1      	bne.n	8000d72 <CAN_GetITStatus+0x1a>
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
        break;
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8000dae:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000db0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000db4:	4770      	bx	lr
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8000db6:	2910      	cmp	r1, #16
 8000db8:	d039      	beq.n	8000e2e <CAN_GetITStatus+0xd6>
 8000dba:	2920      	cmp	r1, #32
 8000dbc:	d014      	beq.n	8000de8 <CAN_GetITStatus+0x90>
 8000dbe:	2908      	cmp	r1, #8
 8000dc0:	d1d7      	bne.n	8000d72 <CAN_GetITStatus+0x1a>
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
        break;
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8000dc2:	68c0      	ldr	r0, [r0, #12]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000dc4:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8000dc8:	4770      	bx	lr
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
        break;
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8000dca:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000dcc:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8000dd0:	4770      	bx	lr
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
        break;
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8000dd2:	6983      	ldr	r3, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000dd4:	f013 0f70 	tst.w	r3, #112	; 0x70
 8000dd8:	bf0c      	ite	eq
 8000dda:	2000      	moveq	r0, #0
 8000ddc:	2001      	movne	r0, #1
 8000dde:	4770      	bx	lr
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
        break;
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8000de0:	68c0      	ldr	r0, [r0, #12]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000de2:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8000de6:	4770      	bx	lr
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
        break;
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8000de8:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000dea:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8000dee:	4770      	bx	lr
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
        break;
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8000df0:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000df2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8000df6:	4770      	bx	lr
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
        break;
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8000df8:	68c0      	ldr	r0, [r0, #12]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000dfa:	f010 0003 	ands.w	r0, r0, #3
 8000dfe:	bf18      	it	ne
 8000e00:	2001      	movne	r0, #1
 8000e02:	4770      	bx	lr
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
        break;
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8000e04:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000e06:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8000e0a:	4770      	bx	lr
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8000e0c:	6880      	ldr	r0, [r0, #8]
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
  ITStatus pendingbitstatus = RESET;
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8000e0e:	f000 3001 	and.w	r0, r0, #16843009	; 0x1010101
 8000e12:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8000e16:	3000      	adds	r0, #0
 8000e18:	bf18      	it	ne
 8000e1a:	2001      	movne	r0, #1
 8000e1c:	4770      	bx	lr
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
        break;
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8000e1e:	6840      	ldr	r0, [r0, #4]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000e20:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8000e24:	4770      	bx	lr
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
        break;
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8000e26:	6980      	ldr	r0, [r0, #24]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000e28:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8000e2c:	4770      	bx	lr
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
        break;
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8000e2e:	6900      	ldr	r0, [r0, #16]
    pendingbitstatus = SET;
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000e30:	f010 0003 	ands.w	r0, r0, #3
 8000e34:	bf18      	it	ne
 8000e36:	2001      	movne	r0, #1
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <CAN_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8000e3c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000e40:	d01e      	beq.n	8000e80 <CAN_ClearITPendingBit+0x44>
 8000e42:	d911      	bls.n	8000e68 <CAN_ClearITPendingBit+0x2c>
 8000e44:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8000e48:	d018      	beq.n	8000e7c <CAN_ClearITPendingBit+0x40>
 8000e4a:	d91c      	bls.n	8000e86 <CAN_ClearITPendingBit+0x4a>
 8000e4c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8000e50:	d036      	beq.n	8000ec0 <CAN_ClearITPendingBit+0x84>
 8000e52:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8000e56:	d030      	beq.n	8000eba <CAN_ClearITPendingBit+0x7e>
 8000e58:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8000e5c:	d119      	bne.n	8000e92 <CAN_ClearITPendingBit+0x56>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
      break;
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8000e5e:	2300      	movs	r3, #0
 8000e60:	6183      	str	r3, [r0, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8000e62:	2304      	movs	r3, #4
 8000e64:	6043      	str	r3, [r0, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8000e66:	e014      	b.n	8000e92 <CAN_ClearITPendingBit+0x56>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8000e68:	2908      	cmp	r1, #8
 8000e6a:	d01d      	beq.n	8000ea8 <CAN_ClearITPendingBit+0x6c>
 8000e6c:	d912      	bls.n	8000e94 <CAN_ClearITPendingBit+0x58>
 8000e6e:	2920      	cmp	r1, #32
 8000e70:	d017      	beq.n	8000ea2 <CAN_ClearITPendingBit+0x66>
 8000e72:	2940      	cmp	r1, #64	; 0x40
 8000e74:	d10d      	bne.n	8000e92 <CAN_ClearITPendingBit+0x56>
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
      break;
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8000e76:	2310      	movs	r3, #16
 8000e78:	6103      	str	r3, [r0, #16]
      break;
 8000e7a:	4770      	bx	lr
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	6183      	str	r3, [r0, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8000e80:	2304      	movs	r3, #4
 8000e82:	6043      	str	r3, [r0, #4]
      break;
 8000e84:	4770      	bx	lr
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8000e86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000e8a:	d0f9      	beq.n	8000e80 <CAN_ClearITPendingBit+0x44>
 8000e8c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8000e90:	d0f6      	beq.n	8000e80 <CAN_ClearITPendingBit+0x44>
 8000e92:	4770      	bx	lr
 8000e94:	2901      	cmp	r1, #1
 8000e96:	d00a      	beq.n	8000eae <CAN_ClearITPendingBit+0x72>
 8000e98:	2904      	cmp	r1, #4
 8000e9a:	d1fa      	bne.n	8000e92 <CAN_ClearITPendingBit+0x56>
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
      break;
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	60c3      	str	r3, [r0, #12]
      break;
 8000ea0:	4770      	bx	lr
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
      break;
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8000ea2:	2308      	movs	r3, #8
 8000ea4:	6103      	str	r3, [r0, #16]
      break;
 8000ea6:	4770      	bx	lr
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
      break;
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	60c3      	str	r3, [r0, #12]
      break;
 8000eac:	4770      	bx	lr

  switch (CAN_IT)
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8000eae:	f240 1301 	movw	r3, #257	; 0x101
 8000eb2:	f361 431f 	bfi	r3, r1, #16, #16
 8000eb6:	6083      	str	r3, [r0, #8]
      break;
 8000eb8:	4770      	bx	lr
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
      break;
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8000eba:	2310      	movs	r3, #16
 8000ebc:	6043      	str	r3, [r0, #4]
      break;
 8000ebe:	4770      	bx	lr
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
      break;
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 8000ec0:	2308      	movs	r3, #8
 8000ec2:	6043      	str	r3, [r0, #4]
      break;
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <CRC_ResetDR>:
  * @retval None
  */
void CRC_ResetDR(void)
{
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8000ec8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ecc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	609a      	str	r2, [r3, #8]
}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <CRC_CalcCRC>:
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
  CRC->DR = Data;
 8000ed8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000edc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ee0:	6018      	str	r0, [r3, #0]
  
  return (CRC->DR);
 8000ee2:	6818      	ldr	r0, [r3, #0]
}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8000ee8:	b410      	push	{r4}
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000eea:	b159      	cbz	r1, 8000f04 <CRC_CalcBlockCRC+0x1c>
  {
    CRC->DR = pBuffer[index];
 8000eec:	f44f 5440 	mov.w	r4, #12288	; 0x3000
  * @brief  Computes the 32-bit CRC of a given buffer of data word(32-bit).
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
 8000ef0:	3804      	subs	r0, #4
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000ef2:	2300      	movs	r3, #0
  {
    CRC->DR = pBuffer[index];
 8000ef4:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000ef8:	f850 2f04 	ldr.w	r2, [r0, #4]!
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000efc:	3301      	adds	r3, #1
 8000efe:	428b      	cmp	r3, r1
  {
    CRC->DR = pBuffer[index];
 8000f00:	6022      	str	r2, [r4, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8000f02:	d1f9      	bne.n	8000ef8 <CRC_CalcBlockCRC+0x10>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8000f04:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f0c:	6818      	ldr	r0, [r3, #0]
}
 8000f0e:	bc10      	pop	{r4}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <CRC_GetCRC>:
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
  return (CRC->DR);
 8000f14:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f1c:	6818      	ldr	r0, [r3, #0]
}
 8000f1e:	4770      	bx	lr

08000f20 <CRC_SetIDRegister>:
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
  CRC->IDR = IDValue;
 8000f20:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f28:	7118      	strb	r0, [r3, #4]
}
 8000f2a:	4770      	bx	lr

08000f2c <CRC_GetIDRegister>:
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
  return (CRC->IDR);
 8000f2c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000f34:	7918      	ldrb	r0, [r3, #4]
}
 8000f36:	4770      	bx	lr

08000f38 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8000f38:	b508      	push	{r3, lr}
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8000f3a:	2010      	movs	r0, #16
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	f003 f823 	bl	8003f88 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8000f42:	2010      	movs	r0, #16
 8000f44:	2100      	movs	r1, #0
}
 8000f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8000f4a:	f003 b81d 	b.w	8003f88 <RCC_AHB2PeriphResetCmd>
 8000f4e:	bf00      	nop

08000f50 <CRYP_Init>:
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f2c5 0306 	movt	r3, #20486	; 0x5006
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8000f56:	8842      	ldrh	r2, [r0, #2]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8000f58:	6819      	ldr	r1, [r3, #0]
 8000f5a:	f021 0138 	bic.w	r1, r1, #56	; 0x38
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8000f5e:	b410      	push	{r4}
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8000f60:	8884      	ldrh	r4, [r0, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8000f62:	6019      	str	r1, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	4311      	orrs	r1, r2
 8000f68:	6019      	str	r1, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8000f6a:	6819      	ldr	r1, [r3, #0]
 8000f6c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000f70:	6019      	str	r1, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8000f72:	6819      	ldr	r1, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8000f74:	2a20      	cmp	r2, #32
 8000f76:	bf18      	it	ne
 8000f78:	2a28      	cmpne	r2, #40	; 0x28
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8000f7a:	ea44 0101 	orr.w	r1, r4, r1
 8000f7e:	6019      	str	r1, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8000f80:	d003      	beq.n	8000f8a <CRYP_Init+0x3a>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8000f82:	2a30      	cmp	r2, #48	; 0x30
 8000f84:	d001      	beq.n	8000f8a <CRYP_Init+0x3a>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8000f86:	2a38      	cmp	r2, #56	; 0x38
 8000f88:	d10a      	bne.n	8000fa0 <CRYP_Init+0x50>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f2c5 0306 	movt	r3, #20486	; 0x5006
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8000f90:	88c1      	ldrh	r1, [r0, #6]
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f98:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f2c5 0306 	movt	r3, #20486	; 0x5006
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8000fa6:	8801      	ldrh	r1, [r0, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	f022 0204 	bic.w	r2, r2, #4
 8000fae:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]
}
 8000fb6:	bc10      	pop	{r4}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <CRYP_StructInit>:
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	8003      	strh	r3, [r0, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8000fc0:	8043      	strh	r3, [r0, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8000fc2:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8000fc4:	80c3      	strh	r3, [r0, #6]
}
 8000fc6:	4770      	bx	lr

08000fc8 <CRYP_KeyInit>:
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	6802      	ldr	r2, [r0, #0]
 8000fcc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8000fd0:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8000fd2:	6842      	ldr	r2, [r0, #4]
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8000fd6:	6882      	ldr	r2, [r0, #8]
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8000fda:	68c2      	ldr	r2, [r0, #12]
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8000fde:	6902      	ldr	r2, [r0, #16]
 8000fe0:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8000fe2:	6942      	ldr	r2, [r0, #20]
 8000fe4:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8000fe6:	6982      	ldr	r2, [r0, #24]
 8000fe8:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8000fea:	69c2      	ldr	r2, [r0, #28]
 8000fec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000fee:	4770      	bx	lr

08000ff0 <CRYP_KeyStructInit>:
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	6003      	str	r3, [r0, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8000ff4:	6043      	str	r3, [r0, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8000ff6:	6083      	str	r3, [r0, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8000ff8:	60c3      	str	r3, [r0, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8000ffa:	6103      	str	r3, [r0, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8000ffc:	6143      	str	r3, [r0, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8000ffe:	6183      	str	r3, [r0, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8001000:	61c3      	str	r3, [r0, #28]
}
 8001002:	4770      	bx	lr

08001004 <CRYP_IVInit>:
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8001004:	2300      	movs	r3, #0
 8001006:	6802      	ldr	r2, [r0, #0]
 8001008:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 800100e:	6842      	ldr	r2, [r0, #4]
 8001010:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8001012:	6882      	ldr	r2, [r0, #8]
 8001014:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8001016:	68c2      	ldr	r2, [r0, #12]
 8001018:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800101a:	4770      	bx	lr

0800101c <CRYP_IVStructInit>:
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	6003      	str	r3, [r0, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8001020:	6043      	str	r3, [r0, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8001022:	6083      	str	r3, [r0, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8001024:	60c3      	str	r3, [r0, #12]
}
 8001026:	4770      	bx	lr

08001028 <CRYP_FIFOFlush>:
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8001028:	2300      	movs	r3, #0
 800102a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	4770      	bx	lr

08001038 <CRYP_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8001038:	2300      	movs	r3, #0
 800103a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800103e:	681a      	ldr	r2, [r3, #0]
void CRYP_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001040:	b918      	cbnz	r0, 800104a <CRYP_Cmd+0x12>
    CRYP->CR |= CRYP_CR_CRYPEN;
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8001042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 800104a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <CRYP_DataIn>:
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
  CRYP->DR = Data;
 8001054:	2300      	movs	r3, #0
 8001056:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800105a:	6098      	str	r0, [r3, #8]
}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <CRYP_DataOut>:
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
  return CRYP->DOUT;
 8001060:	2300      	movs	r3, #0
 8001062:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8001066:	68d8      	ldr	r0, [r3, #12]
}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 800106c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  __IO uint32_t timeout = 0;
  uint32_t ckeckmask = 0, bitstatus;    
  ErrorStatus status = ERROR;

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8001070:	2300      	movs	r3, #0
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8001072:	b083      	sub	sp, #12
  __IO uint32_t timeout = 0;
  uint32_t ckeckmask = 0, bitstatus;    
  ErrorStatus status = ERROR;

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8001074:	f2c5 0306 	movt	r3, #20486	; 0x5006
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
  __IO uint32_t timeout = 0;
 8001078:	2200      	movs	r2, #0
 800107a:	9201      	str	r2, [sp, #4]
  uint32_t ckeckmask = 0, bitstatus;    
  ErrorStatus status = ERROR;

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	f022 0201 	bic.w	r2, r2, #1
 8001082:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8001084:	681a      	ldr	r2, [r3, #0]
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8001086:	f012 0f08 	tst.w	r2, #8
 800108a:	bf0c      	ite	eq
 800108c:	2515      	moveq	r5, #21
 800108e:	2511      	movne	r5, #17
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
    timeout++;
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8001090:	f64f 76ff 	movw	r6, #65535	; 0xffff
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8001094:	685c      	ldr	r4, [r3, #4]
    timeout++;
 8001096:	9a01      	ldr	r2, [sp, #4]
 8001098:	3201      	adds	r2, #1
 800109a:	9201      	str	r2, [sp, #4]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 800109c:	9a01      	ldr	r2, [sp, #4]
 800109e:	42b2      	cmp	r2, r6
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 80010a0:	ea05 0404 	and.w	r4, r5, r4
    timeout++;
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 80010a4:	d001      	beq.n	80010aa <CRYP_SaveContext+0x3e>
 80010a6:	2c01      	cmp	r4, #1
 80010a8:	d1f4      	bne.n	8001094 <CRYP_SaveContext+0x28>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 80010aa:	2300      	movs	r3, #0
 80010ac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	4015      	ands	r5, r2
 80010b4:	2d01      	cmp	r5, #1
 80010b6:	d004      	beq.n	80010c2 <CRYP_SaveContext+0x56>
  {
    status = ERROR;
 80010b8:	2000      	movs	r0, #0
     
    status = SUCCESS;
  }

   return status;
}
 80010ba:	b003      	add	sp, #12
 80010bc:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80010c0:	4770      	bx	lr
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	f022 0202 	bic.w	r2, r2, #2
 80010c8:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010d0:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 80010d2:	f8d3 a000 	ldr.w	sl, [r3]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 80010d6:	f8d1 9000 	ldr.w	r9, [r1]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 80010da:	f8d1 8004 	ldr.w	r8, [r1, #4]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 80010de:	f8d1 c008 	ldr.w	ip, [r1, #8]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 80010e2:	68cf      	ldr	r7, [r1, #12]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 80010e4:	690e      	ldr	r6, [r1, #16]
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 80010e6:	694c      	ldr	r4, [r1, #20]
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 80010e8:	698a      	ldr	r2, [r1, #24]
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 80010ea:	69c9      	ldr	r1, [r1, #28]

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 80010ec:	f40a 7a7f 	and.w	sl, sl, #1020	; 0x3fc
 80010f0:	f8c0 a000 	str.w	sl, [r0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 80010f4:	f8d3 a040 	ldr.w	sl, [r3, #64]	; 0x40
 80010f8:	f8c0 a004 	str.w	sl, [r0, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 80010fc:	f8d3 a044 	ldr.w	sl, [r3, #68]	; 0x44
 8001100:	f8c0 a008 	str.w	sl, [r0, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8001104:	f8d3 a048 	ldr.w	sl, [r3, #72]	; 0x48
 8001108:	f8c0 a00c 	str.w	sl, [r0, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 800110e:	f8c0 9014 	str.w	r9, [r0, #20]

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8001112:	6103      	str	r3, [r0, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8001114:	f8c0 8018 	str.w	r8, [r0, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8001118:	f8c0 c01c 	str.w	ip, [r0, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 800111c:	6207      	str	r7, [r0, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 800111e:	6246      	str	r6, [r0, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8001120:	6284      	str	r4, [r0, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8001122:	62c2      	str	r2, [r0, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8001124:	6301      	str	r1, [r0, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8001126:	4628      	mov	r0, r5
 8001128:	e7c7      	b.n	80010ba <CRYP_SaveContext+0x4e>
 800112a:	bf00      	nop

0800112c <CRYP_RestoreContext>:
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 800112c:	2300      	movs	r3, #0
 800112e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8001132:	6802      	ldr	r2, [r0, #0]
 8001134:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 8001136:	6942      	ldr	r2, [r0, #20]
 8001138:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 800113a:	6982      	ldr	r2, [r0, #24]
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 800113e:	69c2      	ldr	r2, [r0, #28]
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8001142:	6a02      	ldr	r2, [r0, #32]
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8001146:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 800114a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800114c:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 800114e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 8001152:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 8001156:	6842      	ldr	r2, [r0, #4]
 8001158:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 800115a:	6882      	ldr	r2, [r0, #8]
 800115c:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 800115e:	68c2      	ldr	r2, [r0, #12]
 8001160:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 8001162:	6902      	ldr	r2, [r0, #16]
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800116c:	601a      	str	r2, [r3, #0]
}
 800116e:	4770      	bx	lr

08001170 <CRYP_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8001170:	2300      	movs	r3, #0
 8001172:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8001176:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001178:	b929      	cbnz	r1, 8001186 <CRYP_DMACmd+0x16>
    CRYP->DMACR |= CRYP_DMAReq;
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 800117a:	ea22 0000 	bic.w	r0, r2, r0
 800117e:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 8001182:	6118      	str	r0, [r3, #16]
 8001184:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8001186:	4310      	orrs	r0, r2
 8001188:	6118      	str	r0, [r3, #16]
 800118a:	4770      	bx	lr

0800118c <CRYP_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 800118c:	2300      	movs	r3, #0
 800118e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8001192:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001194:	b929      	cbnz	r1, 80011a2 <CRYP_ITConfig+0x16>
    CRYP->IMSCR |= CRYP_IT;
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 8001196:	ea22 0000 	bic.w	r0, r2, r0
 800119a:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 800119e:	6158      	str	r0, [r3, #20]
 80011a0:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 80011a2:	4310      	orrs	r0, r2
 80011a4:	6158      	str	r0, [r3, #20]
 80011a6:	4770      	bx	lr

080011a8 <CRYP_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 80011a8:	2300      	movs	r3, #0
 80011aa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80011ae:	69db      	ldr	r3, [r3, #28]
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 80011b0:	4218      	tst	r0, r3
    /* CRYP_IT is reset */
    bitstatus = RESET;
  }
  /* Return the CRYP_IT status */
  return bitstatus;
}
 80011b2:	bf0c      	ite	eq
 80011b4:	2000      	moveq	r0, #0
 80011b6:	2001      	movne	r0, #1
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <CRYP_GetFlagStatus>:
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
  {
    tempreg = CRYP->RISR;
 80011bc:	2300      	movs	r3, #0
 80011be:	f2c5 0306 	movt	r3, #20486	; 0x5006

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 80011c2:	0682      	lsls	r2, r0, #26
  {
    tempreg = CRYP->RISR;
 80011c4:	bf4c      	ite	mi
 80011c6:	699b      	ldrmi	r3, [r3, #24]
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 80011c8:	685b      	ldrpl	r3, [r3, #4]

  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 80011ca:	4203      	tst	r3, r0
    bitstatus = RESET;
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
}
 80011cc:	bf0c      	ite	eq
 80011ce:	2000      	moveq	r0, #0
 80011d0:	2001      	movne	r0, #1
 80011d2:	4770      	bx	lr

080011d4 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 80011d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011d8:	b08d      	sub	sp, #52	; 0x34
 80011da:	4615      	mov	r5, r2
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80011dc:	2600      	movs	r6, #0
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 80011de:	4604      	mov	r4, r0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80011e0:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 80011e2:	460f      	mov	r7, r1
 80011e4:	4698      	mov	r8, r3
 80011e6:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80011ea:	960b      	str	r6, [sp, #44]	; 0x2c
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80011ec:	f7ff ff00 	bl	8000ff0 <CRYP_KeyStructInit>

  switch(Keysize)
 80011f0:	2dc0      	cmp	r5, #192	; 0xc0
 80011f2:	f000 80c4 	beq.w	800137e <CRYP_AES_ECB+0x1aa>
 80011f6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80011fa:	f000 80a3 	beq.w	8001344 <CRYP_AES_ECB+0x170>
 80011fe:	2d80      	cmp	r5, #128	; 0x80
 8001200:	f000 8091 	beq.w	8001326 <CRYP_AES_ECB+0x152>
    default:
    break;
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8001204:	bba4      	cbnz	r4, 8001270 <CRYP_AES_ECB+0x9c>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8001206:	f7ff ff0f 	bl	8001028 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
    CRYP_Init(&AES_CRYP_InitStructure);
 800120a:	ad09      	add	r5, sp, #36	; 0x24
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800120c:	2304      	movs	r3, #4
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
    CRYP_Init(&AES_CRYP_InitStructure);
 800120e:	4628      	mov	r0, r5
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8001210:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8001214:	2338      	movs	r3, #56	; 0x38
 8001216:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 800121a:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
    CRYP_Init(&AES_CRYP_InitStructure);
 800121e:	f7ff fe97 	bl	8000f50 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001222:	a801      	add	r0, sp, #4
 8001224:	f7ff fed0 	bl	8000fc8 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff ff05 	bl	8001038 <CRYP_Cmd>
 800122e:	e002      	b.n	8001236 <CRYP_AES_ECB+0x62>
    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8001230:	2800      	cmp	r0, #0
 8001232:	f000 80bb 	beq.w	80013ac <CRYP_AES_ECB+0x1d8>
    CRYP_Cmd(ENABLE);

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001236:	2010      	movs	r0, #16
 8001238:	f7ff ffc0 	bl	80011bc <CRYP_GetFlagStatus>
      counter++;
 800123c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800123e:	3301      	adds	r3, #1
 8001240:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8001242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001248:	d1f2      	bne.n	8001230 <CRYP_AES_ECB+0x5c>

    if (busystatus != RESET)
 800124a:	2800      	cmp	r0, #0
 800124c:	f000 80ae 	beq.w	80013ac <CRYP_AES_ECB+0x1d8>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8001250:	2320      	movs	r3, #32
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 8001252:	4628      	mov	r0, r5

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8001254:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  CRYP_Init(&AES_CRYP_InitStructure);
 800125e:	f7ff fe77 	bl	8000f50 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8001262:	f7ff fee1 	bl	8001028 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff fee6 	bl	8001038 <CRYP_Cmd>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 800126c:	2400      	movs	r4, #0
 800126e:	e03b      	b.n	80012e8 <CRYP_AES_ECB+0x114>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001270:	a801      	add	r0, sp, #4

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8001272:	ad0c      	add	r5, sp, #48	; 0x30
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001274:	f7ff fea8 	bl	8000fc8 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8001278:	2300      	movs	r3, #0
 800127a:	f825 3d0c 	strh.w	r3, [r5, #-12]!
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 800127e:	2320      	movs	r3, #32
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 8001280:	4628      	mov	r0, r5

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8001282:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  CRYP_Init(&AES_CRYP_InitStructure);
 800128c:	f7ff fe60 	bl	8000f50 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8001290:	f7ff feca 	bl	8001028 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff fecf 	bl	8001038 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800129a:	f1b9 0f00 	cmp.w	r9, #0
 800129e:	d040      	beq.n	8001322 <CRYP_AES_ECB+0x14e>
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 80012a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80012a2:	f108 0410 	add.w	r4, r8, #16
 80012a6:	3510      	adds	r5, #16
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80012a8:	2600      	movs	r6, #0

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80012aa:	f854 0c10 	ldr.w	r0, [r4, #-16]
 80012ae:	f7ff fed1 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80012b2:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 80012b6:	f7ff fecd 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80012ba:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80012be:	f7ff fec9 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80012c2:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80012c6:	f7ff fec5 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80012ca:	960b      	str	r6, [sp, #44]	; 0x2c
 80012cc:	e000      	b.n	80012d0 <CRYP_AES_ECB+0xfc>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80012ce:	b190      	cbz	r0, 80012f6 <CRYP_AES_ECB+0x122>

    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80012d0:	2010      	movs	r0, #16
 80012d2:	f7ff ff73 	bl	80011bc <CRYP_GetFlagStatus>
      counter++;
 80012d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80012d8:	3301      	adds	r3, #1
 80012da:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80012dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80012de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e2:	d1f4      	bne.n	80012ce <CRYP_AES_ECB+0xfa>

    if (busystatus != RESET)
 80012e4:	b138      	cbz	r0, 80012f6 <CRYP_AES_ECB+0x122>
   {
       status = ERROR;
 80012e6:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fea5 	bl	8001038 <CRYP_Cmd>

  return status; 
}
 80012ee:	4620      	mov	r0, r4
 80012f0:	b00d      	add	sp, #52	; 0x34
 80012f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80012f6:	f7ff feb3 	bl	8001060 <CRYP_DataOut>
 80012fa:	f845 0c10 	str.w	r0, [r5, #-16]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80012fe:	f7ff feaf 	bl	8001060 <CRYP_DataOut>
 8001302:	f845 0c0c 	str.w	r0, [r5, #-12]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001306:	f7ff feab 	bl	8001060 <CRYP_DataOut>
 800130a:	f845 0c08 	str.w	r0, [r5, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 800130e:	f7ff fea7 	bl	8001060 <CRYP_DataOut>
 8001312:	ebc8 0304 	rsb	r3, r8, r4
 8001316:	f845 0c04 	str.w	r0, [r5, #-4]
 800131a:	3410      	adds	r4, #16
 800131c:	3510      	adds	r5, #16
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800131e:	454b      	cmp	r3, r9
 8001320:	d3c3      	bcc.n	80012aa <CRYP_AES_ECB+0xd6>
 8001322:	2401      	movs	r4, #1
 8001324:	e7e0      	b.n	80012e8 <CRYP_AES_ECB+0x114>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8001326:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800132e:	9305      	str	r3, [sp, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001334:	9306      	str	r3, [sp, #24]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800133a:	9307      	str	r3, [sp, #28]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001340:	9308      	str	r3, [sp, #32]
    break;
 8001342:	e75f      	b.n	8001204 <CRYP_AES_ECB+0x30>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8001344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001348:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800135c:	9303      	str	r3, [sp, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001362:	9304      	str	r3, [sp, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001368:	9305      	str	r3, [sp, #20]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800136e:	9306      	str	r3, [sp, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001374:	9307      	str	r3, [sp, #28]
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800137a:	9308      	str	r3, [sp, #32]
    break;
 800137c:	e742      	b.n	8001204 <CRYP_AES_ECB+0x30>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800137e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001382:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800138a:	9303      	str	r3, [sp, #12]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001390:	9304      	str	r3, [sp, #16]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001396:	9305      	str	r3, [sp, #20]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800139c:	9306      	str	r3, [sp, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80013a2:	9307      	str	r3, [sp, #28]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80013a8:	9308      	str	r3, [sp, #32]
    break;
 80013aa:	e72b      	b.n	8001204 <CRYP_AES_ECB+0x30>
       status = ERROR;
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80013ac:	2304      	movs	r3, #4
 80013ae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80013b2:	e764      	b.n	800127e <CRYP_AES_ECB+0xaa>

080013b4 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80013b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013b8:	b090      	sub	sp, #64	; 0x40
 80013ba:	461d      	mov	r5, r3
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80013bc:	2600      	movs	r6, #0
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80013be:	4604      	mov	r4, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80013c0:	a801      	add	r0, sp, #4
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80013c2:	460f      	mov	r7, r1
 80013c4:	4690      	mov	r8, r2
 80013c6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80013ca:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80013ce:	960f      	str	r6, [sp, #60]	; 0x3c
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80013d0:	f7ff fe0e 	bl	8000ff0 <CRYP_KeyStructInit>

  switch(Keysize)
 80013d4:	2dc0      	cmp	r5, #192	; 0xc0
 80013d6:	f000 80e3 	beq.w	80015a0 <CRYP_AES_CBC+0x1ec>
 80013da:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80013de:	f000 80ba 	beq.w	8001556 <CRYP_AES_CBC+0x1a2>
 80013e2:	2d80      	cmp	r5, #128	; 0x80
 80013e4:	f000 80a4 	beq.w	8001530 <CRYP_AES_CBC+0x17c>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	ba1b      	rev	r3, r3
    default:
    break;
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80013ec:	9309      	str	r3, [sp, #36]	; 0x24
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80013f2:	930a      	str	r3, [sp, #40]	; 0x28
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 80013f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 80013fe:	930c      	str	r3, [sp, #48]	; 0x30


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8001400:	2c00      	cmp	r4, #0
 8001402:	d137      	bne.n	8001474 <CRYP_AES_CBC+0xc0>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8001404:	f7ff fe10 	bl	8001028 <CRYP_FIFOFlush>
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;

    CRYP_Init(&AES_CRYP_InitStructure);
 8001408:	ad0d      	add	r5, sp, #52	; 0x34
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800140a:	2304      	movs	r3, #4
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;

    CRYP_Init(&AES_CRYP_InitStructure);
 800140c:	4628      	mov	r0, r5
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800140e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8001412:	2338      	movs	r3, #56	; 0x38
 8001414:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8001418:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38

    CRYP_Init(&AES_CRYP_InitStructure);
 800141c:	f7ff fd98 	bl	8000f50 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001420:	a801      	add	r0, sp, #4
 8001422:	f7ff fdd1 	bl	8000fc8 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8001426:	2001      	movs	r0, #1
 8001428:	f7ff fe06 	bl	8001038 <CRYP_Cmd>
 800142c:	e002      	b.n	8001434 <CRYP_AES_CBC+0x80>
    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800142e:	2800      	cmp	r0, #0
 8001430:	f000 80d3 	beq.w	80015da <CRYP_AES_CBC+0x226>
    CRYP_Cmd(ENABLE);

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001434:	2010      	movs	r0, #16
 8001436:	f7ff fec1 	bl	80011bc <CRYP_GetFlagStatus>
      counter++;
 800143a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800143c:	3301      	adds	r3, #1
 800143e:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8001440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001446:	d1f2      	bne.n	800142e <CRYP_AES_CBC+0x7a>

    if (busystatus != RESET)
 8001448:	2800      	cmp	r0, #0
 800144a:	f000 80c6 	beq.w	80015da <CRYP_AES_CBC+0x226>
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 800144e:	2328      	movs	r3, #40	; 0x28
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 8001450:	4628      	mov	r0, r5
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8001452:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  CRYP_Init(&AES_CRYP_InitStructure);
 800145c:	f7ff fd78 	bl	8000f50 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8001460:	a809      	add	r0, sp, #36	; 0x24
 8001462:	f7ff fdcf 	bl	8001004 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8001466:	f7ff fddf 	bl	8001028 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff fde4 	bl	8001038 <CRYP_Cmd>
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));

    if (busystatus != RESET)
   {
       status = ERROR;
 8001470:	2400      	movs	r4, #0
 8001472:	e03e      	b.n	80014f2 <CRYP_AES_CBC+0x13e>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001474:	a801      	add	r0, sp, #4

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8001476:	ad10      	add	r5, sp, #64	; 0x40
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001478:	f7ff fda6 	bl	8000fc8 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800147c:	2300      	movs	r3, #0
 800147e:	f825 3d0c 	strh.w	r3, [r5, #-12]!
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8001482:	2328      	movs	r3, #40	; 0x28
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 8001484:	4628      	mov	r0, r5
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8001486:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  CRYP_Init(&AES_CRYP_InitStructure);
 8001490:	f7ff fd5e 	bl	8000f50 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8001494:	a809      	add	r0, sp, #36	; 0x24
 8001496:	f7ff fdb5 	bl	8001004 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 800149a:	f7ff fdc5 	bl	8001028 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff fdca 	bl	8001038 <CRYP_Cmd>


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80014a4:	f1ba 0f00 	cmp.w	sl, #0
 80014a8:	d040      	beq.n	800152c <CRYP_AES_CBC+0x178>
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 80014aa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80014ac:	f109 0410 	add.w	r4, r9, #16
 80014b0:	3510      	adds	r5, #16
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 80014b2:	2600      	movs	r6, #0

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80014b4:	f854 0c10 	ldr.w	r0, [r4, #-16]
 80014b8:	f7ff fdcc 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80014bc:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 80014c0:	f7ff fdc8 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80014c4:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80014c8:	f7ff fdc4 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80014cc:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80014d0:	f7ff fdc0 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 80014d4:	960f      	str	r6, [sp, #60]	; 0x3c
 80014d6:	e000      	b.n	80014da <CRYP_AES_CBC+0x126>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80014d8:	b190      	cbz	r0, 8001500 <CRYP_AES_CBC+0x14c>
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80014da:	2010      	movs	r0, #16
 80014dc:	f7ff fe6e 	bl	80011bc <CRYP_GetFlagStatus>
      counter++;
 80014e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80014e2:	3301      	adds	r3, #1
 80014e4:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80014e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d1f4      	bne.n	80014d8 <CRYP_AES_CBC+0x124>

    if (busystatus != RESET)
 80014ee:	b138      	cbz	r0, 8001500 <CRYP_AES_CBC+0x14c>
   {
       status = ERROR;
 80014f0:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff fda0 	bl	8001038 <CRYP_Cmd>

  return status;
}
 80014f8:	4620      	mov	r0, r4
 80014fa:	b010      	add	sp, #64	; 0x40
 80014fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001500:	f7ff fdae 	bl	8001060 <CRYP_DataOut>
 8001504:	f845 0c10 	str.w	r0, [r5, #-16]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001508:	f7ff fdaa 	bl	8001060 <CRYP_DataOut>
 800150c:	f845 0c0c 	str.w	r0, [r5, #-12]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001510:	f7ff fda6 	bl	8001060 <CRYP_DataOut>
 8001514:	f845 0c08 	str.w	r0, [r5, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001518:	f7ff fda2 	bl	8001060 <CRYP_DataOut>
 800151c:	ebc9 0304 	rsb	r3, r9, r4
 8001520:	f845 0c04 	str.w	r0, [r5, #-4]
 8001524:	3410      	adds	r4, #16
 8001526:	3510      	adds	r5, #16

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8001528:	4553      	cmp	r3, sl
 800152a:	d3c3      	bcc.n	80014b4 <CRYP_AES_CBC+0x100>
 800152c:	2401      	movs	r4, #1
 800152e:	e7e0      	b.n	80014f2 <CRYP_AES_CBC+0x13e>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8001530:	f8ad 603a 	strh.w	r6, [sp, #58]	; 0x3a
 8001534:	f8d8 3000 	ldr.w	r3, [r8]
 8001538:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800153a:	9305      	str	r3, [sp, #20]
 800153c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001540:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001542:	9306      	str	r3, [sp, #24]
 8001544:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001548:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800154a:	9307      	str	r3, [sp, #28]
 800154c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001550:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001552:	9308      	str	r3, [sp, #32]
    break;
 8001554:	e748      	b.n	80013e8 <CRYP_AES_CBC+0x34>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8001556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800155e:	f8d8 3000 	ldr.w	r3, [r8]
 8001562:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800156a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001572:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001574:	9303      	str	r3, [sp, #12]
 8001576:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800157a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800157c:	9304      	str	r3, [sp, #16]
 800157e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001582:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001584:	9305      	str	r3, [sp, #20]
 8001586:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800158a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800158c:	9306      	str	r3, [sp, #24]
 800158e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8001592:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001594:	9307      	str	r3, [sp, #28]
 8001596:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800159a:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800159c:	9308      	str	r3, [sp, #32]
    break;
 800159e:	e723      	b.n	80013e8 <CRYP_AES_CBC+0x34>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80015a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80015a8:	f8d8 3000 	ldr.w	r3, [r8]
 80015ac:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80015ae:	9303      	str	r3, [sp, #12]
 80015b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80015b4:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80015b6:	9304      	str	r3, [sp, #16]
 80015b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80015bc:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80015be:	9305      	str	r3, [sp, #20]
 80015c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80015c4:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80015c6:	9306      	str	r3, [sp, #24]
 80015c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80015cc:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80015ce:	9307      	str	r3, [sp, #28]
 80015d0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80015d4:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80015d6:	9308      	str	r3, [sp, #32]
    break;
 80015d8:	e706      	b.n	80013e8 <CRYP_AES_CBC+0x34>
       status = ERROR;
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80015da:	2304      	movs	r3, #4
 80015dc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80015e0:	e74f      	b.n	8001482 <CRYP_AES_CBC+0xce>
 80015e2:	bf00      	nop

080015e4 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80015e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e8:	b090      	sub	sp, #64	; 0x40
 80015ea:	461d      	mov	r5, r3
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80015ec:	2600      	movs	r6, #0
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80015ee:	4604      	mov	r4, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80015f0:	a801      	add	r0, sp, #4
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80015f2:	460f      	mov	r7, r1
 80015f4:	4690      	mov	r8, r2
 80015f6:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 80015fa:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80015fe:	960f      	str	r6, [sp, #60]	; 0x3c
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8001600:	f7ff fcf6 	bl	8000ff0 <CRYP_KeyStructInit>

  switch(Keysize)
 8001604:	2dc0      	cmp	r5, #192	; 0xc0
 8001606:	f000 80ad 	beq.w	8001764 <CRYP_AES_CTR+0x180>
 800160a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800160e:	f000 8084 	beq.w	800171a <CRYP_AES_CTR+0x136>
 8001612:	2d80      	cmp	r5, #128	; 0x80
 8001614:	d06e      	beq.n	80016f4 <CRYP_AES_CTR+0x110>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	ba1b      	rev	r3, r3
    break;
    default:
    break;
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 800161a:	9309      	str	r3, [sp, #36]	; 0x24
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8001620:	930a      	str	r3, [sp, #40]	; 0x28
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8001626:	930b      	str	r3, [sp, #44]	; 0x2c
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	ba1b      	rev	r3, r3
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800162c:	a801      	add	r0, sp, #4
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 800162e:	930c      	str	r3, [sp, #48]	; 0x30

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8001630:	f7ff fcca 	bl	8000fc8 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8001634:	2c00      	cmp	r4, #0
 8001636:	d159      	bne.n	80016ec <CRYP_AES_CTR+0x108>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8001638:	2304      	movs	r3, #4
 800163a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 800163e:	2330      	movs	r3, #48	; 0x30
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&AES_CRYP_InitStructure);
 8001640:	a80d      	add	r0, sp, #52	; 0x34
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8001642:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001646:	2380      	movs	r3, #128	; 0x80
 8001648:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  CRYP_Init(&AES_CRYP_InitStructure);
 800164c:	f7ff fc80 	bl	8000f50 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8001650:	a809      	add	r0, sp, #36	; 0x24
 8001652:	f7ff fcd7 	bl	8001004 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8001656:	f7ff fce7 	bl	8001028 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800165a:	2001      	movs	r0, #1
 800165c:	f7ff fcec 	bl	8001038 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8001660:	f1b9 0f00 	cmp.w	r9, #0
 8001664:	d040      	beq.n	80016e8 <CRYP_AES_CTR+0x104>
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
 8001666:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8001668:	f10a 0410 	add.w	r4, sl, #16
 800166c:	3510      	adds	r5, #16
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 800166e:	2600      	movs	r6, #0

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001670:	f854 0c10 	ldr.w	r0, [r4, #-16]
 8001674:	f7ff fcee 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001678:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 800167c:	f7ff fcea 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001680:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8001684:	f7ff fce6 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001688:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800168c:	f7ff fce2 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
 8001690:	960f      	str	r6, [sp, #60]	; 0x3c
 8001692:	e000      	b.n	8001696 <CRYP_AES_CTR+0xb2>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8001694:	b190      	cbz	r0, 80016bc <CRYP_AES_CTR+0xd8>
    inputaddr+=4;
    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001696:	2010      	movs	r0, #16
 8001698:	f7ff fd90 	bl	80011bc <CRYP_GetFlagStatus>
      counter++;
 800169c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800169e:	3301      	adds	r3, #1
 80016a0:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80016a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a8:	d1f4      	bne.n	8001694 <CRYP_AES_CTR+0xb0>

    if (busystatus != RESET)
 80016aa:	b138      	cbz	r0, 80016bc <CRYP_AES_CTR+0xd8>
   {
       status = ERROR;
 80016ac:	2400      	movs	r4, #0
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff fcc2 	bl	8001038 <CRYP_Cmd>

  return status;
}
 80016b4:	4620      	mov	r0, r4
 80016b6:	b010      	add	sp, #64	; 0x40
 80016b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80016bc:	f7ff fcd0 	bl	8001060 <CRYP_DataOut>
 80016c0:	f845 0c10 	str.w	r0, [r5, #-16]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80016c4:	f7ff fccc 	bl	8001060 <CRYP_DataOut>
 80016c8:	f845 0c0c 	str.w	r0, [r5, #-12]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80016cc:	f7ff fcc8 	bl	8001060 <CRYP_DataOut>
 80016d0:	f845 0c08 	str.w	r0, [r5, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80016d4:	f7ff fcc4 	bl	8001060 <CRYP_DataOut>
 80016d8:	ebca 0304 	rsb	r3, sl, r4
 80016dc:	f845 0c04 	str.w	r0, [r5, #-4]
 80016e0:	3410      	adds	r4, #16
 80016e2:	3510      	adds	r5, #16
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80016e4:	4599      	cmp	r9, r3
 80016e6:	d8c3      	bhi.n	8001670 <CRYP_AES_CTR+0x8c>
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80016e8:	2401      	movs	r4, #1
 80016ea:	e7e0      	b.n	80016ae <CRYP_AES_CTR+0xca>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80016f2:	e7a4      	b.n	800163e <CRYP_AES_CTR+0x5a>
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);

  switch(Keysize)
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80016f4:	f8ad 603a 	strh.w	r6, [sp, #58]	; 0x3a
 80016f8:	f8d8 3000 	ldr.w	r3, [r8]
 80016fc:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80016fe:	9305      	str	r3, [sp, #20]
 8001700:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001704:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001706:	9306      	str	r3, [sp, #24]
 8001708:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800170c:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800170e:	9307      	str	r3, [sp, #28]
 8001710:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001714:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001716:	9308      	str	r3, [sp, #32]
    break;
 8001718:	e77d      	b.n	8001616 <CRYP_AES_CTR+0x32>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800171a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800171e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8001722:	f8d8 3000 	ldr.w	r3, [r8]
 8001726:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800172e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001736:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001738:	9303      	str	r3, [sp, #12]
 800173a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800173e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001740:	9304      	str	r3, [sp, #16]
 8001742:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001746:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001748:	9305      	str	r3, [sp, #20]
 800174a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800174e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001750:	9306      	str	r3, [sp, #24]
 8001752:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8001756:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001758:	9307      	str	r3, [sp, #28]
 800175a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800175e:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001760:	9308      	str	r3, [sp, #32]
    break;
 8001762:	e758      	b.n	8001616 <CRYP_AES_CTR+0x32>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8001764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001768:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800176c:	f8d8 3000 	ldr.w	r3, [r8]
 8001770:	ba1b      	rev	r3, r3
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001772:	9303      	str	r3, [sp, #12]
 8001774:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001778:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800177a:	9304      	str	r3, [sp, #16]
 800177c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001780:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001782:	9305      	str	r3, [sp, #20]
 8001784:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8001788:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800178a:	9306      	str	r3, [sp, #24]
 800178c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001790:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001792:	9307      	str	r3, [sp, #28]
 8001794:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001798:	ba1b      	rev	r3, r3
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800179a:	9308      	str	r3, [sp, #32]
    break;
 800179c:	e73b      	b.n	8001616 <CRYP_AES_CTR+0x32>
 800179e:	bf00      	nop

080017a0 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80017a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017a4:	b08c      	sub	sp, #48	; 0x30
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80017a6:	2400      	movs	r4, #0
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80017a8:	4605      	mov	r5, r0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80017aa:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80017ac:	460e      	mov	r6, r1
 80017ae:	4617      	mov	r7, r2
 80017b0:	4698      	mov	r8, r3
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80017b2:	940b      	str	r4, [sp, #44]	; 0x2c
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80017b4:	f7ff fc1c 	bl	8000ff0 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 80017b8:	2d01      	cmp	r5, #1
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80017ba:	bf08      	it	eq
 80017bc:	f8ad 4024 	strheq.w	r4, [sp, #36]	; 0x24

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 80017c0:	d002      	beq.n	80017c8 <CRYP_DES_ECB+0x28>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 80017c2:	2304      	movs	r3, #4
 80017c4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 80017c8:	2310      	movs	r3, #16
 80017ca:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&DES_CRYP_InitStructure);
 80017ce:	a809      	add	r0, sp, #36	; 0x24
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  CRYP_Init(&DES_CRYP_InitStructure);
 80017d6:	f7ff fbbb 	bl	8000f50 <CRYP_Init>
 80017da:	6833      	ldr	r3, [r6, #0]
 80017dc:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80017de:	9303      	str	r3, [sp, #12]
 80017e0:	6873      	ldr	r3, [r6, #4]
 80017e2:	ba1b      	rev	r3, r3
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80017e4:	a801      	add	r0, sp, #4
  CRYP_Init(&DES_CRYP_InitStructure);

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80017e6:	9304      	str	r3, [sp, #16]
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80017e8:	f7ff fbee 	bl	8000fc8 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80017ec:	f7ff fc1c 	bl	8001028 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fc21 	bl	8001038 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80017f6:	f1b8 0f00 	cmp.w	r8, #0
 80017fa:	d02f      	beq.n	800185c <CRYP_DES_ECB+0xbc>
 80017fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80017fe:	2600      	movs	r6, #0
 8001800:	3708      	adds	r7, #8
 8001802:	3408      	adds	r4, #8
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

/* Wait until the complete message has been processed */
    counter = 0;
 8001804:	4635      	mov	r5, r6

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001806:	f857 0c08 	ldr.w	r0, [r7, #-8]
 800180a:	f7ff fc23 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800180e:	f857 0c04 	ldr.w	r0, [r7, #-4]
 8001812:	f7ff fc1f 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;

/* Wait until the complete message has been processed */
    counter = 0;
 8001816:	950b      	str	r5, [sp, #44]	; 0x2c
 8001818:	e000      	b.n	800181c <CRYP_DES_ECB+0x7c>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 800181a:	b190      	cbz	r0, 8001842 <CRYP_DES_ECB+0xa2>

/* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800181c:	2010      	movs	r0, #16
 800181e:	f7ff fccd 	bl	80011bc <CRYP_GetFlagStatus>
      counter++;
 8001822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001824:	3301      	adds	r3, #1
 8001826:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8001828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800182a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182e:	d1f4      	bne.n	800181a <CRYP_DES_ECB+0x7a>

    if (busystatus != RESET)
 8001830:	b138      	cbz	r0, 8001842 <CRYP_DES_ECB+0xa2>
   {
       status = ERROR;
 8001832:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fbff 	bl	8001038 <CRYP_Cmd>

  return status; 
}
 800183a:	4620      	mov	r0, r4
 800183c:	b00c      	add	sp, #48	; 0x30
 800183e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001842:	f7ff fc0d 	bl	8001060 <CRYP_DataOut>
 8001846:	f844 0c08 	str.w	r0, [r4, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800184a:	f7ff fc09 	bl	8001060 <CRYP_DataOut>
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800184e:	3608      	adds	r6, #8
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001850:	f844 0c04 	str.w	r0, [r4, #-4]
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001854:	3708      	adds	r7, #8
 8001856:	3408      	adds	r4, #8
 8001858:	45b0      	cmp	r8, r6
 800185a:	d8d4      	bhi.n	8001806 <CRYP_DES_ECB+0x66>
{
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 800185c:	2401      	movs	r4, #1
 800185e:	e7e9      	b.n	8001834 <CRYP_DES_ECB+0x94>

08001860 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8001860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001864:	b091      	sub	sp, #68	; 0x44
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8001866:	2400      	movs	r4, #0
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8001868:	4605      	mov	r5, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800186a:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 800186c:	460e      	mov	r6, r1
 800186e:	4617      	mov	r7, r2
 8001870:	4699      	mov	r9, r3
 8001872:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8001876:	940f      	str	r4, [sp, #60]	; 0x3c
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8001878:	f7ff fbba 	bl	8000ff0 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 800187c:	2d01      	cmp	r5, #1
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800187e:	bf08      	it	eq
 8001880:	f8ad 4034 	strheq.w	r4, [sp, #52]	; 0x34

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 8001884:	d002      	beq.n	800188c <CRYP_DES_CBC+0x2c>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8001886:	2304      	movs	r3, #4
 8001888:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 800188c:	2318      	movs	r3, #24
 800188e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&DES_CRYP_InitStructure);
 8001892:	a80d      	add	r0, sp, #52	; 0x34
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  CRYP_Init(&DES_CRYP_InitStructure);
 800189a:	f7ff fb59 	bl	8000f50 <CRYP_Init>
 800189e:	6833      	ldr	r3, [r6, #0]
 80018a0:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80018a2:	9303      	str	r3, [sp, #12]
 80018a4:	6873      	ldr	r3, [r6, #4]
 80018a6:	ba1b      	rev	r3, r3
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80018a8:	a801      	add	r0, sp, #4
  CRYP_Init(&DES_CRYP_InitStructure);

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80018aa:	9304      	str	r3, [sp, #16]
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80018ac:	f7ff fb8c 	bl	8000fc8 <CRYP_KeyInit>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	ba1b      	rev	r3, r3

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80018b4:	9309      	str	r3, [sp, #36]	; 0x24
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	ba1b      	rev	r3, r3
  ivaddr+=4;
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 80018ba:	a809      	add	r0, sp, #36	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80018bc:	930a      	str	r3, [sp, #40]	; 0x28
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 80018be:	f7ff fba1 	bl	8001004 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80018c2:	f7ff fbb1 	bl	8001028 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f7ff fbb6 	bl	8001038 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80018cc:	f1b8 0f00 	cmp.w	r8, #0
 80018d0:	d030      	beq.n	8001934 <CRYP_DES_CBC+0xd4>
 80018d2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80018d4:	2700      	movs	r7, #0
 80018d6:	f109 0408 	add.w	r4, r9, #8
 80018da:	3508      	adds	r5, #8
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80018dc:	463e      	mov	r6, r7
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80018de:	f854 0c08 	ldr.w	r0, [r4, #-8]
 80018e2:	f7ff fbb7 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80018e6:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80018ea:	f7ff fbb3 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80018ee:	960f      	str	r6, [sp, #60]	; 0x3c
 80018f0:	e000      	b.n	80018f4 <CRYP_DES_CBC+0x94>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80018f2:	b190      	cbz	r0, 800191a <CRYP_DES_CBC+0xba>

    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80018f4:	2010      	movs	r0, #16
 80018f6:	f7ff fc61 	bl	80011bc <CRYP_GetFlagStatus>
      counter++;
 80018fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80018fc:	3301      	adds	r3, #1
 80018fe:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8001900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001906:	d1f4      	bne.n	80018f2 <CRYP_DES_CBC+0x92>

    if (busystatus != RESET)
 8001908:	b138      	cbz	r0, 800191a <CRYP_DES_CBC+0xba>
   {
       status = ERROR;
 800190a:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff fb93 	bl	8001038 <CRYP_Cmd>

  return status; 
}
 8001912:	4620      	mov	r0, r4
 8001914:	b011      	add	sp, #68	; 0x44
 8001916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       status = ERROR;
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800191a:	f7ff fba1 	bl	8001060 <CRYP_DataOut>
 800191e:	f845 0c08 	str.w	r0, [r5, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001922:	f7ff fb9d 	bl	8001060 <CRYP_DataOut>
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001926:	3708      	adds	r7, #8
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001928:	f845 0c04 	str.w	r0, [r5, #-4]
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800192c:	3408      	adds	r4, #8
 800192e:	3508      	adds	r5, #8
 8001930:	45b8      	cmp	r8, r7
 8001932:	d8d4      	bhi.n	80018de <CRYP_DES_CBC+0x7e>
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8001934:	2401      	movs	r4, #1
 8001936:	e7e9      	b.n	800190c <CRYP_DES_CBC+0xac>

08001938 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8001938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800193c:	b08c      	sub	sp, #48	; 0x30
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800193e:	2400      	movs	r4, #0
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8001940:	4605      	mov	r5, r0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8001942:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8001944:	460e      	mov	r6, r1
 8001946:	4617      	mov	r7, r2
 8001948:	4698      	mov	r8, r3
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800194a:	940b      	str	r4, [sp, #44]	; 0x2c
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800194c:	f7ff fb50 	bl	8000ff0 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8001950:	2d01      	cmp	r5, #1
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8001952:	bf08      	it	eq
 8001954:	f8ad 4024 	strheq.w	r4, [sp, #36]	; 0x24

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8001958:	d002      	beq.n	8001960 <CRYP_TDES_ECB+0x28>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800195a:	2304      	movs	r3, #4
 800195c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001960:	2380      	movs	r3, #128	; 0x80
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8001962:	2400      	movs	r4, #0
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&TDES_CRYP_InitStructure);
 8001964:	a809      	add	r0, sp, #36	; 0x24
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001966:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 800196a:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  CRYP_Init(&TDES_CRYP_InitStructure);
 800196e:	f7ff faef 	bl	8000f50 <CRYP_Init>
 8001972:	6833      	ldr	r3, [r6, #0]
 8001974:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001976:	9303      	str	r3, [sp, #12]
 8001978:	6873      	ldr	r3, [r6, #4]
 800197a:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800197c:	9304      	str	r3, [sp, #16]
 800197e:	68b3      	ldr	r3, [r6, #8]
 8001980:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001982:	9305      	str	r3, [sp, #20]
 8001984:	68f3      	ldr	r3, [r6, #12]
 8001986:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001988:	9306      	str	r3, [sp, #24]
 800198a:	6933      	ldr	r3, [r6, #16]
 800198c:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800198e:	9307      	str	r3, [sp, #28]
 8001990:	6973      	ldr	r3, [r6, #20]
 8001992:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8001994:	a801      	add	r0, sp, #4
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001996:	9308      	str	r3, [sp, #32]
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8001998:	f7ff fb16 	bl	8000fc8 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800199c:	f7ff fb44 	bl	8001028 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff fb49 	bl	8001038 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80019a6:	f1b8 0f00 	cmp.w	r8, #0
 80019aa:	d02f      	beq.n	8001a0c <CRYP_TDES_ECB+0xd4>
 80019ac:	4626      	mov	r6, r4
 80019ae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80019b0:	3708      	adds	r7, #8
 80019b2:	3408      	adds	r4, #8
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80019b4:	4635      	mov	r5, r6
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80019b6:	f857 0c08 	ldr.w	r0, [r7, #-8]
 80019ba:	f7ff fb4b 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80019be:	f857 0c04 	ldr.w	r0, [r7, #-4]
 80019c2:	f7ff fb47 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 80019c6:	950b      	str	r5, [sp, #44]	; 0x2c
 80019c8:	e000      	b.n	80019cc <CRYP_TDES_ECB+0x94>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 80019ca:	b190      	cbz	r0, 80019f2 <CRYP_TDES_ECB+0xba>

    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80019cc:	2010      	movs	r0, #16
 80019ce:	f7ff fbf5 	bl	80011bc <CRYP_GetFlagStatus>
      counter++;
 80019d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019d4:	3301      	adds	r3, #1
 80019d6:	930b      	str	r3, [sp, #44]	; 0x2c
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 80019d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80019da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019de:	d1f4      	bne.n	80019ca <CRYP_TDES_ECB+0x92>

    if (busystatus != RESET)
 80019e0:	b138      	cbz	r0, 80019f2 <CRYP_TDES_ECB+0xba>
    {
       status = ERROR;
 80019e2:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fb27 	bl	8001038 <CRYP_Cmd>

  return status; 
}
 80019ea:	4620      	mov	r0, r4
 80019ec:	b00c      	add	sp, #48	; 0x30
 80019ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80019f2:	f7ff fb35 	bl	8001060 <CRYP_DataOut>
 80019f6:	f844 0c08 	str.w	r0, [r4, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80019fa:	f7ff fb31 	bl	8001060 <CRYP_DataOut>
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80019fe:	3608      	adds	r6, #8
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001a00:	f844 0c04 	str.w	r0, [r4, #-4]
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001a04:	3708      	adds	r7, #8
 8001a06:	3408      	adds	r4, #8
 8001a08:	45b0      	cmp	r8, r6
 8001a0a:	d8d4      	bhi.n	80019b6 <CRYP_TDES_ECB+0x7e>
{
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8001a0c:	2401      	movs	r4, #1
 8001a0e:	e7e9      	b.n	80019e4 <CRYP_TDES_ECB+0xac>

08001a10 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8001a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a14:	b091      	sub	sp, #68	; 0x44
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8001a16:	2400      	movs	r4, #0
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8001a18:	4605      	mov	r5, r0
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8001a1a:	a801      	add	r0, sp, #4
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8001a1c:	460e      	mov	r6, r1
 8001a1e:	4617      	mov	r7, r2
 8001a20:	4699      	mov	r9, r3
 8001a22:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8001a26:	940f      	str	r4, [sp, #60]	; 0x3c
  uint32_t outputaddr = (uint32_t)Output;
  uint32_t ivaddr     = (uint32_t)InitVectors;
  uint32_t i = 0;

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8001a28:	f7ff fae2 	bl	8000ff0 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8001a2c:	2d01      	cmp	r5, #1
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8001a2e:	bf08      	it	eq
 8001a30:	f8ad 4034 	strheq.w	r4, [sp, #52]	; 0x34

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8001a34:	d002      	beq.n	8001a3c <CRYP_TDES_CBC+0x2c>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8001a36:	2304      	movs	r3, #4
 8001a38:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;

  CRYP_Init(&TDES_CRYP_InitStructure);
 8001a42:	a80d      	add	r0, sp, #52	; 0x34
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38

  CRYP_Init(&TDES_CRYP_InitStructure);
 8001a4a:	f7ff fa81 	bl	8000f50 <CRYP_Init>
 8001a4e:	6833      	ldr	r3, [r6, #0]
 8001a50:	ba1b      	rev	r3, r3

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8001a52:	9303      	str	r3, [sp, #12]
 8001a54:	6873      	ldr	r3, [r6, #4]
 8001a56:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8001a58:	9304      	str	r3, [sp, #16]
 8001a5a:	68b3      	ldr	r3, [r6, #8]
 8001a5c:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8001a5e:	9305      	str	r3, [sp, #20]
 8001a60:	68f3      	ldr	r3, [r6, #12]
 8001a62:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8001a64:	9306      	str	r3, [sp, #24]
 8001a66:	6933      	ldr	r3, [r6, #16]
 8001a68:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8001a6a:	9307      	str	r3, [sp, #28]
 8001a6c:	6973      	ldr	r3, [r6, #20]
 8001a6e:	ba1b      	rev	r3, r3
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8001a70:	a801      	add	r0, sp, #4
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4;
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8001a72:	9308      	str	r3, [sp, #32]
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8001a74:	f7ff faa8 	bl	8000fc8 <CRYP_KeyInit>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	ba1b      	rev	r3, r3

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8001a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	ba1b      	rev	r3, r3
  ivaddr+=4;
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8001a82:	a809      	add	r0, sp, #36	; 0x24
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
  ivaddr+=4;
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8001a84:	930a      	str	r3, [sp, #40]	; 0x28
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8001a86:	f7ff fabd 	bl	8001004 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8001a8a:	f7ff facd 	bl	8001028 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f7ff fad2 	bl	8001038 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001a94:	f1b8 0f00 	cmp.w	r8, #0
 8001a98:	d030      	beq.n	8001afc <CRYP_TDES_CBC+0xec>
 8001a9a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8001a9c:	2700      	movs	r7, #0
 8001a9e:	f109 0408 	add.w	r4, r9, #8
 8001aa2:	3508      	adds	r5, #8
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 8001aa4:	463e      	mov	r6, r7
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001aa6:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8001aaa:	f7ff fad3 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8001aae:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8001ab2:	f7ff facf 	bl	8001054 <CRYP_DataIn>
    inputaddr+=4;

    /* Wait until the complete message has been processed */
    counter = 0;
 8001ab6:	960f      	str	r6, [sp, #60]	; 0x3c
 8001ab8:	e000      	b.n	8001abc <CRYP_TDES_CBC+0xac>
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
      counter++;
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8001aba:	b190      	cbz	r0, 8001ae2 <CRYP_TDES_CBC+0xd2>

    /* Wait until the complete message has been processed */
    counter = 0;
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8001abc:	2010      	movs	r0, #16
 8001abe:	f7ff fb7d 	bl	80011bc <CRYP_GetFlagStatus>
      counter++;
 8001ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	930f      	str	r3, [sp, #60]	; 0x3c
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8001ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ace:	d1f4      	bne.n	8001aba <CRYP_TDES_CBC+0xaa>

    if (busystatus != RESET)
 8001ad0:	b138      	cbz	r0, 8001ae2 <CRYP_TDES_CBC+0xd2>
   {
       status = ERROR;
 8001ad2:	2400      	movs	r4, #0
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff faaf 	bl	8001038 <CRYP_Cmd>

  return status; 
}
 8001ada:	4620      	mov	r0, r4
 8001adc:	b011      	add	sp, #68	; 0x44
 8001ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001ae2:	f7ff fabd 	bl	8001060 <CRYP_DataOut>
 8001ae6:	f845 0c08 	str.w	r0, [r5, #-8]
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001aea:	f7ff fab9 	bl	8001060 <CRYP_DataOut>
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001aee:	3708      	adds	r7, #8
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8001af0:	f845 0c04 	str.w	r0, [r5, #-4]
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8001af4:	3408      	adds	r4, #8
 8001af6:	3508      	adds	r5, #8
 8001af8:	45b8      	cmp	r8, r7
 8001afa:	d8d4      	bhi.n	8001aa6 <CRYP_TDES_CBC+0x96>
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8001afc:	2401      	movs	r4, #1
 8001afe:	e7e9      	b.n	8001ad4 <CRYP_TDES_CBC+0xc4>

08001b00 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8001b00:	b508      	push	{r3, lr}
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8001b02:	2101      	movs	r1, #1
 8001b04:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001b08:	f002 fa5a 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8001b0c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001b10:	2100      	movs	r1, #0
}
 8001b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void DAC_DeInit(void)
{
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8001b16:	f002 ba53 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
 8001b1a:	bf00      	nop

08001b1c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8001b1c:	b470      	push	{r4, r5, r6}
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001b1e:	e891 0060 	ldmia.w	r1, {r5, r6}
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8001b22:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001b26:	688c      	ldr	r4, [r1, #8]
 8001b28:	68ca      	ldr	r2, [r1, #12]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8001b2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001b2e:	ea46 0105 	orr.w	r1, r6, r5
 8001b32:	430c      	orrs	r4, r1
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8001b34:	681e      	ldr	r6, [r3, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001b36:	f640 75fe 	movw	r5, #4094	; 0xffe
 8001b3a:	4085      	lsls	r5, r0
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8001b3c:	4322      	orrs	r2, r4

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001b3e:	ea26 0505 	bic.w	r5, r6, r5
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8001b42:	fa12 f000 	lsls.w	r0, r2, r0
 8001b46:	4328      	orrs	r0, r5
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8001b48:	6018      	str	r0, [r3, #0]
}
 8001b4a:	bc70      	pop	{r4, r5, r6}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8001b50:	2300      	movs	r3, #0
 8001b52:	6003      	str	r3, [r0, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001b54:	6043      	str	r3, [r0, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8001b56:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8001b58:	60c3      	str	r3, [r0, #12]
}
 8001b5a:	4770      	bx	lr

08001b5c <DAC_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001b5c:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001b60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b64:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b66:	b931      	cbnz	r1, 8001b76 <DAC_Cmd+0x1a>
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa11 f000 	lsls.w	r0, r1, r0
 8001b6e:	ea22 0000 	bic.w	r0, r2, r0
 8001b72:	6018      	str	r0, [r3, #0]
 8001b74:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001b76:	2101      	movs	r1, #1
 8001b78:	fa11 f000 	lsls.w	r0, r1, r0
 8001b7c:	4310      	orrs	r0, r2
 8001b7e:	6018      	str	r0, [r3, #0]
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop

08001b84 <DAC_SoftwareTriggerCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8001b84:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001b88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b8c:	0900      	lsrs	r0, r0, #4
 8001b8e:	685a      	ldr	r2, [r3, #4]
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001b90:	b931      	cbnz	r1, 8001ba0 <DAC_SoftwareTriggerCmd+0x1c>
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa11 f000 	lsls.w	r0, r1, r0
 8001b98:	ea22 0000 	bic.w	r0, r2, r0
 8001b9c:	6058      	str	r0, [r3, #4]
 8001b9e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa11 f000 	lsls.w	r0, r1, r0
 8001ba6:	4310      	orrs	r0, r2
 8001ba8:	6058      	str	r0, [r3, #4]
 8001baa:	4770      	bx	lr

08001bac <DAC_DualSoftwareTriggerCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8001bac:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001bb0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001bb4:	685a      	ldr	r2, [r3, #4]
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001bb6:	b918      	cbnz	r0, 8001bc0 <DAC_DualSoftwareTriggerCmd+0x14>
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8001bb8:	f022 0203 	bic.w	r2, r2, #3
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8001bc0:	f042 0203 	orr.w	r2, r2, #3
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	4770      	bx	lr

08001bc8 <DAC_WaveGenerationCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8001bc8:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001bcc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001bd0:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001bd2:	b922      	cbnz	r2, 8001bde <DAC_WaveGenerationCmd+0x16>
    DAC->CR |= DAC_Wave << DAC_Channel;
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	ea22 0101 	bic.w	r1, r2, r1
 8001bda:	6019      	str	r1, [r3, #0]
 8001bdc:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4311      	orrs	r1, r2
 8001be2:	6019      	str	r1, [r3, #0]
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop

08001be8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8001be8:	b082      	sub	sp, #8
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001bea:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001bee:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
  __IO uint32_t tmp = 0;
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	9201      	str	r2, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8001bf6:	9301      	str	r3, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001bf8:	9b01      	ldr	r3, [sp, #4]
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	181b      	adds	r3, r3, r0
 8001bfe:	9301      	str	r3, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c00:	9b01      	ldr	r3, [sp, #4]
 8001c02:	6019      	str	r1, [r3, #0]
}
 8001c04:	b002      	add	sp, #8
 8001c06:	4770      	bx	lr

08001c08 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8001c08:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8001c0a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001c0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
  __IO uint32_t tmp = 0;
 8001c12:	2200      	movs	r2, #0
 8001c14:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8001c16:	9301      	str	r3, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8001c18:	9b01      	ldr	r3, [sp, #4]
 8001c1a:	3314      	adds	r3, #20
 8001c1c:	181b      	adds	r3, r3, r0
 8001c1e:	9301      	str	r3, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8001c20:	9b01      	ldr	r3, [sp, #4]
 8001c22:	6019      	str	r1, [r3, #0]
}
 8001c24:	b002      	add	sp, #8
 8001c26:	4770      	bx	lr

08001c28 <DAC_SetDualChannelData>:
  {
    data = ((uint32_t)Data2 << 16) | Data1;
  }
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;
 8001c28:	f247 4320 	movw	r3, #29728	; 0x7420
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8001c2c:	2808      	cmp	r0, #8
  {
    data = ((uint32_t)Data2 << 16) | Data1;
  }
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;
 8001c2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8001c32:	bf0c      	ite	eq
 8001c34:	ea42 2101 	orreq.w	r1, r2, r1, lsl #8
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8001c38:	ea42 4101 	orrne.w	r1, r2, r1, lsl #16
  
  tmp = (uint32_t)DAC_BASE;
  tmp += DHR12RD_OFFSET + DAC_Align;

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8001c3c:	50c1      	str	r1, [r0, r3]
}
 8001c3e:	4770      	bx	lr

08001c40 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8001c40:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8001c42:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001c46:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
  __IO uint32_t tmp = 0;
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	9201      	str	r2, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8001c4e:	9301      	str	r3, [sp, #4]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8001c50:	9b01      	ldr	r3, [sp, #4]
 8001c52:	332c      	adds	r3, #44	; 0x2c
 8001c54:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8001c58:	9301      	str	r3, [sp, #4]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8001c5a:	9b01      	ldr	r3, [sp, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
}
 8001c5e:	b280      	uxth	r0, r0
 8001c60:	b002      	add	sp, #8
 8001c62:	4770      	bx	lr

08001c64 <DAC_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8001c64:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001c68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001c6c:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001c6e:	b939      	cbnz	r1, 8001c80 <DAC_DMACmd+0x1c>
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8001c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c74:	fa11 f000 	lsls.w	r0, r1, r0
 8001c78:	ea22 0000 	bic.w	r0, r2, r0
 8001c7c:	6018      	str	r0, [r3, #0]
 8001c7e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8001c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c84:	fa11 f000 	lsls.w	r0, r1, r0
 8001c88:	4310      	orrs	r0, r2
 8001c8a:	6018      	str	r0, [r3, #0]
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop

08001c90 <DAC_ITConfig>:
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8001c90:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001c94:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001c98:	4081      	lsls	r1, r0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8001c9a:	b922      	cbnz	r2, 8001ca6 <DAC_ITConfig+0x16>
    DAC->CR |=  (DAC_IT << DAC_Channel);
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	ea22 0101 	bic.w	r1, r2, r1
 8001ca2:	6019      	str	r1, [r3, #0]
 8001ca4:	4770      	bx	lr
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4311      	orrs	r1, r2
 8001caa:	6019      	str	r1, [r3, #0]
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop

08001cb0 <DAC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8001cb0:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001cb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001cb8:	4081      	lsls	r1, r0
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8001cbc:	4219      	tst	r1, r3
    /* DAC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
}
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2000      	moveq	r0, #0
 8001cc2:	2001      	movne	r0, #1
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop

08001cc8 <DAC_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8001cc8:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001ccc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001cd0:	4081      	lsls	r1, r0
 8001cd2:	6359      	str	r1, [r3, #52]	; 0x34
}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop

08001cd8 <DAC_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8001cd8:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001cdc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001ce0:	4081      	lsls	r1, r0
 8001ce2:	681a      	ldr	r2, [r3, #0]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8001ce4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001ce6:	4008      	ands	r0, r1
 8001ce8:	d003      	beq.n	8001cf2 <DAC_GetITStatus+0x1a>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8001cea:	4211      	tst	r1, r2
 8001cec:	bf0c      	ite	eq
 8001cee:	2000      	moveq	r0, #0
 8001cf0:	2001      	movne	r0, #1
    /* DAC_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DAC_IT status */
  return  bitstatus;
}
 8001cf2:	4770      	bx	lr

08001cf4 <DAC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8001cf4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001cf8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001cfc:	4081      	lsls	r1, r0
 8001cfe:	6359      	str	r1, [r3, #52]	; 0x34
}
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <DBGMCU_GetREVID>:
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
   return(DBGMCU->IDCODE >> 16);
 8001d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d08:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8001d0c:	6818      	ldr	r0, [r3, #0]
}
 8001d0e:	0c00      	lsrs	r0, r0, #16
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop

08001d14 <DBGMCU_GetDEVID>:
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8001d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d18:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8001d1c:	6818      	ldr	r0, [r3, #0]
}
 8001d1e:	0500      	lsls	r0, r0, #20
 8001d20:	0d00      	lsrs	r0, r0, #20
 8001d22:	4770      	bx	lr

08001d24 <DBGMCU_Config>:
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8001d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d28:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8001d2c:	685a      	ldr	r2, [r3, #4]
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d2e:	b919      	cbnz	r1, 8001d38 <DBGMCU_Config+0x14>
  {
    DBGMCU->CR |= DBGMCU_Periph;
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8001d30:	ea22 0000 	bic.w	r0, r2, r0
 8001d34:	6058      	str	r0, [r3, #4]
 8001d36:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8001d38:	4310      	orrs	r0, r2
 8001d3a:	6058      	str	r0, [r3, #4]
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <DBGMCU_APB1PeriphConfig>:
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8001d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d44:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8001d48:	689a      	ldr	r2, [r3, #8]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d4a:	b919      	cbnz	r1, 8001d54 <DBGMCU_APB1PeriphConfig+0x14>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 8001d4c:	ea22 0000 	bic.w	r0, r2, r0
 8001d50:	6098      	str	r0, [r3, #8]
 8001d52:	4770      	bx	lr
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8001d54:	4310      	orrs	r0, r2
 8001d56:	6098      	str	r0, [r3, #8]
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop

08001d5c <DBGMCU_APB2PeriphConfig>:
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8001d5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d60:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8001d64:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d66:	b919      	cbnz	r1, 8001d70 <DBGMCU_APB2PeriphConfig+0x14>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8001d68:	ea22 0000 	bic.w	r0, r2, r0
 8001d6c:	60d8      	str	r0, [r3, #12]
 8001d6e:	4770      	bx	lr
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8001d70:	4310      	orrs	r0, r2
 8001d72:	60d8      	str	r0, [r3, #12]
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop

08001d78 <DCMI_DeInit>:
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
  DCMI->CR = 0x0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001d7e:	2200      	movs	r2, #0
  DCMI->IER = 0x0;
  DCMI->ICR = 0x1F;
 8001d80:	211f      	movs	r1, #31
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
  DCMI->CR = 0x0;
 8001d82:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 8001d84:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8001d86:	6159      	str	r1, [r3, #20]
  DCMI->ESCR = 0x0;
 8001d88:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8001d8a:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8001d8c:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop

08001d94 <DCMI_Init>:
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8001d94:	2300      	movs	r3, #0
 8001d96:	f2c5 0305 	movt	r3, #20485	; 0x5005
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8001d9a:	b4f0      	push	{r4, r5, r6, r7}
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001d9c:	f8b0 c002 	ldrh.w	ip, [r0, #2]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8001da0:	681e      	ldr	r6, [r3, #0]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001da2:	8802      	ldrh	r2, [r0, #0]
 8001da4:	8887      	ldrh	r7, [r0, #4]
 8001da6:	88c1      	ldrh	r1, [r0, #6]
 8001da8:	8905      	ldrh	r5, [r0, #8]
 8001daa:	8944      	ldrh	r4, [r0, #10]
 8001dac:	8980      	ldrh	r0, [r0, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8001dae:	f426 4680 	bic.w	r6, r6, #16384	; 0x4000
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001db2:	ea4c 0202 	orr.w	r2, ip, r2
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8001db6:	f026 0601 	bic.w	r6, r6, #1
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001dba:	433a      	orrs	r2, r7
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8001dbc:	601e      	str	r6, [r3, #0]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	432a      	orrs	r2, r5
  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8001dc2:	6819      	ldr	r1, [r3, #0]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001dc4:	4322      	orrs	r2, r4
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8001dc6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001dca:	4302      	orrs	r2, r0
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8001dcc:	f021 0102 	bic.w	r1, r1, #2
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8001dd0:	b292      	uxth	r2, r2
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8001dd2:	430a      	orrs	r2, r1
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 8001dd4:	601a      	str	r2, [r3, #0]
}
 8001dd6:	bcf0      	pop	{r4, r5, r6, r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <DCMI_StructInit>:
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	8003      	strh	r3, [r0, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 8001de0:	8043      	strh	r3, [r0, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 8001de2:	8083      	strh	r3, [r0, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 8001de4:	80c3      	strh	r3, [r0, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8001de6:	8103      	strh	r3, [r0, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 8001de8:	8143      	strh	r3, [r0, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 8001dea:	8183      	strh	r3, [r0, #12]
}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 8001df0:	b430      	push	{r4, r5}
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8001df2:	8841      	ldrh	r1, [r0, #2]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 8001df4:	8805      	ldrh	r5, [r0, #0]

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8001df6:	8884      	ldrh	r4, [r0, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8001df8:	88c2      	ldrh	r2, [r0, #6]
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001e00:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8001e04:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8001e08:	6219      	str	r1, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 8001e0c:	bc30      	pop	{r4, r5}
 8001e0e:	4770      	bx	lr

08001e10 <DCMI_CROPCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001e16:	681a      	ldr	r2, [r3, #0]
void DCMI_CROPCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001e18:	b918      	cbnz	r0, 8001e22 <DCMI_CROPCmd+0x12>
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8001e1a:	f022 0204 	bic.w	r2, r2, #4
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8001e22:	f042 0204 	orr.w	r2, r2, #4
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <DCMI_SetEmbeddedSynchroCodes>:
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8001e2c:	7882      	ldrb	r2, [r0, #2]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 8001e2e:	78c1      	ldrb	r1, [r0, #3]
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 8001e30:	b430      	push	{r4, r5}
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8001e32:	7845      	ldrb	r5, [r0, #1]
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8001e34:	7804      	ldrb	r4, [r0, #0]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8001e36:	0412      	lsls	r2, r2, #16
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8001e38:	2300      	movs	r3, #0
 8001e3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8001e3e:	4322      	orrs	r2, r4
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8001e40:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001e44:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001e48:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 8001e4a:	bc30      	pop	{r4, r5}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop

08001e50 <DCMI_JPEGCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001e56:	681a      	ldr	r2, [r3, #0]
void DCMI_JPEGCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 8001e58:	b918      	cbnz	r0, 8001e62 <DCMI_JPEGCmd+0x12>
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 8001e5a:	f022 0208 	bic.w	r2, r2, #8
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8001e62:	f042 0208 	orr.w	r2, r2, #8
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop

08001e6c <DCMI_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001e72:	681a      	ldr	r2, [r3, #0]
void DCMI_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e74:	b918      	cbnz	r0, 8001e7e <DCMI_Cmd+0x12>
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8001e76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8001e7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop

08001e88 <DCMI_CaptureCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001e8e:	681a      	ldr	r2, [r3, #0]
void DCMI_CaptureCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8001e90:	b918      	cbnz	r0, 8001e9a <DCMI_CaptureCmd+0x12>
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop

08001ea4 <DCMI_ReadData>:
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
  return DCMI->DR;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001eaa:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <DCMI_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f2c5 0305 	movt	r3, #20485	; 0x5005
{
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001eb6:	b929      	cbnz	r1, 8001ec4 <DCMI_ITConfig+0x14>
    DCMI->IER |= DCMI_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	43c0      	mvns	r0, r0
 8001ebc:	b280      	uxth	r0, r0
 8001ebe:	4010      	ands	r0, r2
 8001ec0:	60d8      	str	r0, [r3, #12]
 8001ec2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	4310      	orrs	r0, r2
 8001ec8:	60d8      	str	r0, [r3, #12]
 8001eca:	4770      	bx	lr

08001ecc <DCMI_GetFlagStatus>:
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 8001ecc:	0b03      	lsrs	r3, r0, #12
 8001ece:	d108      	bne.n	8001ee2 <DCMI_GetFlagStatus+0x16>
  {
    tempreg= DCMI->RISR;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001ed6:	689b      	ldr	r3, [r3, #8]
    tempreg = DCMI->MISR;
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
  {
    bitstatus = SET;
 8001ed8:	4203      	tst	r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
}
 8001eda:	bf0c      	ite	eq
 8001edc:	2000      	moveq	r0, #0
 8001ede:	2001      	movne	r0, #1
 8001ee0:	4770      	bx	lr
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
  {
    tempreg= DCMI->RISR;
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8001ee2:	2b02      	cmp	r3, #2
  {
    tempreg = DCMI->SR;
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001eec:	bf0c      	ite	eq
 8001eee:	685b      	ldreq	r3, [r3, #4]
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8001ef0:	691b      	ldrne	r3, [r3, #16]
 8001ef2:	e7f1      	b.n	8001ed8 <DCMI_GetFlagStatus+0xc>

08001ef4 <DCMI_ClearFlag>:
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001efa:	6158      	str	r0, [r3, #20]
}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop

08001f00 <DCMI_GetITStatus>:
  uint32_t itstatus = 0;
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8001f00:	2300      	movs	r3, #0
 8001f02:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001f06:	691b      	ldr	r3, [r3, #16]
  
  if ((itstatus != (uint16_t)RESET))
  {
    bitstatus = SET;
 8001f08:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2000      	moveq	r0, #0
 8001f0e:	2001      	movne	r0, #1
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <DCMI_ClearITPendingBit>:
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8001f1a:	6158      	str	r0, [r3, #20]
}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001f20:	6801      	ldr	r1, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001f22:	f246 0210 	movw	r2, #24592	; 0x6010

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8001f26:	2300      	movs	r3, #0
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001f28:	f021 0101 	bic.w	r1, r1, #1

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001f2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001f30:	6001      	str	r1, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8001f32:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8001f34:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8001f36:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8001f38:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8001f3a:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8001f3c:	2321      	movs	r3, #33	; 0x21

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001f3e:	4290      	cmp	r0, r2

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8001f40:	6143      	str	r3, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001f42:	d06b      	beq.n	800201c <DMA_DeInit+0xfc>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8001f44:	f246 0328 	movw	r3, #24616	; 0x6028
 8001f48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f4c:	4298      	cmp	r0, r3
 8001f4e:	d06c      	beq.n	800202a <DMA_DeInit+0x10a>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8001f50:	f246 0340 	movw	r3, #24640	; 0x6040
 8001f54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f58:	4298      	cmp	r0, r3
 8001f5a:	d06e      	beq.n	800203a <DMA_DeInit+0x11a>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8001f5c:	f246 0358 	movw	r3, #24664	; 0x6058
 8001f60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f64:	4298      	cmp	r0, r3
 8001f66:	d070      	beq.n	800204a <DMA_DeInit+0x12a>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8001f68:	f246 0370 	movw	r3, #24688	; 0x6070
 8001f6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f70:	4298      	cmp	r0, r3
 8001f72:	d072      	beq.n	800205a <DMA_DeInit+0x13a>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8001f74:	f246 0388 	movw	r3, #24712	; 0x6088
 8001f78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f7c:	4298      	cmp	r0, r3
 8001f7e:	d075      	beq.n	800206c <DMA_DeInit+0x14c>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8001f80:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8001f84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f88:	4298      	cmp	r0, r3
 8001f8a:	d03e      	beq.n	800200a <DMA_DeInit+0xea>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8001f8c:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8001f90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f94:	4298      	cmp	r0, r3
 8001f96:	d073      	beq.n	8002080 <DMA_DeInit+0x160>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8001f98:	f246 4310 	movw	r3, #25616	; 0x6410
 8001f9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fa0:	4298      	cmp	r0, r3
 8001fa2:	d075      	beq.n	8002090 <DMA_DeInit+0x170>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8001fa4:	f246 4328 	movw	r3, #25640	; 0x6428
 8001fa8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fac:	4298      	cmp	r0, r3
 8001fae:	d076      	beq.n	800209e <DMA_DeInit+0x17e>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8001fb0:	f246 4340 	movw	r3, #25664	; 0x6440
 8001fb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fb8:	4298      	cmp	r0, r3
 8001fba:	d078      	beq.n	80020ae <DMA_DeInit+0x18e>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8001fbc:	f246 4358 	movw	r3, #25688	; 0x6458
 8001fc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fc4:	4298      	cmp	r0, r3
 8001fc6:	d07a      	beq.n	80020be <DMA_DeInit+0x19e>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8001fc8:	f246 4370 	movw	r3, #25712	; 0x6470
 8001fcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fd0:	4298      	cmp	r0, r3
 8001fd2:	d07c      	beq.n	80020ce <DMA_DeInit+0x1ae>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8001fd4:	f246 4388 	movw	r3, #25736	; 0x6488
 8001fd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fdc:	4298      	cmp	r0, r3
 8001fde:	d07f      	beq.n	80020e0 <DMA_DeInit+0x1c0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8001fe0:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8001fe4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fe8:	4298      	cmp	r0, r3
 8001fea:	f000 8083 	beq.w	80020f4 <DMA_DeInit+0x1d4>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8001fee:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8001ff2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ff6:	4298      	cmp	r0, r3
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8001ff8:	bf01      	itttt	eq
 8001ffa:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
 8001ffe:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 8002002:	f04f 523d 	moveq.w	r2, #792723456	; 0x2f400000
 8002006:	60da      	streq	r2, [r3, #12]
 8002008:	4770      	bx	lr
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800200a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800200e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002012:	2200      	movs	r2, #0
 8002014:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	4770      	bx	lr

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800201c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002020:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002024:	223d      	movs	r2, #61	; 0x3d
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA1_Stream1)
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800202a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800202e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002032:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA1_Stream2)
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800203a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800203e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002042:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA1_Stream3)
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800204a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800204e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002052:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA1_Stream4)
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800205a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800205e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002062:	223d      	movs	r2, #61	; 0x3d
 8002064:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA1_Stream5)
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800206c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002070:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002074:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002078:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	4770      	bx	lr
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8002080:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002084:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002088:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8002090:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002094:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002098:	223d      	movs	r2, #61	; 0x3d
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800209e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80020a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020a6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80020ae:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80020b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020b6:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80020be:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80020c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020c6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80020ce:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80020d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020d6:	223d      	movs	r2, #61	; 0x3d
 80020d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80020e0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80020e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020e8:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80020ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	4770      	bx	lr
  }
  else if (DMAy_Streamx == DMA2_Stream6)
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80020f4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80020f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020fc:	2200      	movs	r2, #0
 80020fe:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002108:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800210c:	f8d1 a00c 	ldr.w	sl, [r1, #12]
 8002110:	f8d1 9000 	ldr.w	r9, [r1]
 8002114:	f8d1 8014 	ldr.w	r8, [r1, #20]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002118:	f8d1 c018 	ldr.w	ip, [r1, #24]
 800211c:	69cf      	ldr	r7, [r1, #28]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800211e:	6803      	ldr	r3, [r0, #0]
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002120:	6a0e      	ldr	r6, [r1, #32]
 8002122:	6a4d      	ldr	r5, [r1, #36]	; 0x24
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002124:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8002126:	6b4a      	ldr	r2, [r1, #52]	; 0x34
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002128:	f8d1 b038 	ldr.w	fp, [r1, #56]	; 0x38
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800212c:	ea4a 0909 	orr.w	r9, sl, r9
 8002130:	ea49 0908 	orr.w	r9, r9, r8
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002134:	b086      	sub	sp, #24
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002136:	ea49 090c 	orr.w	r9, r9, ip
 800213a:	ea49 0907 	orr.w	r9, r9, r7
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800213e:	9301      	str	r3, [sp, #4]
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002140:	ea49 0906 	orr.w	r9, r9, r6
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002144:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002146:	ea49 0505 	orr.w	r5, r9, r5
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800214a:	432c      	orrs	r4, r5
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800214c:	9304      	str	r3, [sp, #16]
 800214e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002150:	9d04      	ldr	r5, [sp, #16]
 8002152:	9305      	str	r3, [sp, #20]
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002154:	4322      	orrs	r2, r4
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002156:	f248 083f 	movw	r8, #32831	; 0x803f
 800215a:	9c01      	ldr	r4, [sp, #4]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800215c:	690b      	ldr	r3, [r1, #16]
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800215e:	f2cf 081c 	movt	r8, #61468	; 0xf01c
 8002162:	ea04 0808 	and.w	r8, r4, r8
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002166:	ea42 020b 	orr.w	r2, r2, fp
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800216a:	9302      	str	r3, [sp, #8]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800216c:	ea42 0208 	orr.w	r2, r2, r8
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002170:	684b      	ldr	r3, [r1, #4]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002172:	6889      	ldr	r1, [r1, #8]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002174:	6002      	str	r2, [r0, #0]
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002176:	9303      	str	r3, [sp, #12]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002178:	9c05      	ldr	r4, [sp, #20]
  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800217a:	6943      	ldr	r3, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800217c:	ea45 0204 	orr.w	r2, r5, r4
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002180:	f023 0307 	bic.w	r3, r3, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002184:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002186:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002188:	9d02      	ldr	r5, [sp, #8]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800218a:	9b03      	ldr	r3, [sp, #12]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800218c:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800218e:	6083      	str	r3, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002190:	60c1      	str	r1, [r0, #12]
}
 8002192:	b006      	add	sp, #24
 8002194:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	6003      	str	r3, [r0, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80021a0:	6043      	str	r3, [r0, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 80021a2:	6083      	str	r3, [r0, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 80021a4:	60c3      	str	r3, [r0, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80021a6:	6103      	str	r3, [r0, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80021a8:	6143      	str	r3, [r0, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80021aa:	6183      	str	r3, [r0, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80021ac:	61c3      	str	r3, [r0, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80021ae:	6203      	str	r3, [r0, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80021b0:	6243      	str	r3, [r0, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80021b2:	6283      	str	r3, [r0, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 80021b4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 80021b6:	6303      	str	r3, [r0, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80021b8:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80021ba:	6383      	str	r3, [r0, #56]	; 0x38
}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop

080021c0 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80021c0:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80021c2:	b919      	cbnz	r1, 80021cc <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80021c4:	f023 0301 	bic.w	r3, r3, #1
 80021c8:	6003      	str	r3, [r0, #0]
 80021ca:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	4770      	bx	lr

080021d4 <DMA_PeriphIncOffsetSizeConfig>:

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 80021d4:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 80021d6:	b919      	cbnz	r1, 80021e0 <DMA_PeriphIncOffsetSizeConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 80021d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021dc:	6003      	str	r3, [r0, #0]
 80021de:	4770      	bx	lr

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 80021e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e4:	6003      	str	r3, [r0, #0]
 80021e6:	4770      	bx	lr

080021e8 <DMA_FlowControllerConfig>:

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 80021e8:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 80021ea:	b919      	cbnz	r1, 80021f4 <DMA_FlowControllerConfig+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 80021ec:	f023 0320 	bic.w	r3, r3, #32
 80021f0:	6003      	str	r3, [r0, #0]
 80021f2:	4770      	bx	lr

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 80021f4:	f043 0320 	orr.w	r3, r3, #32
 80021f8:	6003      	str	r3, [r0, #0]
 80021fa:	4770      	bx	lr

080021fc <DMA_SetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 80021fc:	6041      	str	r1, [r0, #4]
}
 80021fe:	4770      	bx	lr

08002200 <DMA_GetCurrDataCounter>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8002200:	6840      	ldr	r0, [r0, #4]
}
 8002202:	b280      	uxth	r0, r0
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop

08002208 <DMA_DoubleBufferModeConfig>:
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8002208:	6803      	ldr	r3, [r0, #0]
{  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 800220a:	b922      	cbnz	r2, 8002216 <DMA_DoubleBufferModeConfig+0xe>
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 800220c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002210:	6003      	str	r3, [r0, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8002212:	6101      	str	r1, [r0, #16]
}
 8002214:	4770      	bx	lr
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8002216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800221a:	6003      	str	r3, [r0, #0]
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 800221c:	6101      	str	r1, [r0, #16]
}
 800221e:	4770      	bx	lr

08002220 <DMA_DoubleBufferModeCmd>:

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 8002220:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8002222:	b919      	cbnz	r1, 800222c <DMA_DoubleBufferModeCmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 8002224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002228:	6003      	str	r3, [r0, #0]
 800222a:	4770      	bx	lr

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6003      	str	r3, [r0, #0]
 8002232:	4770      	bx	lr

08002234 <DMA_MemoryTargetConfig>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8002234:	b90a      	cbnz	r2, 800223a <DMA_MemoryTargetConfig+0x6>
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8002236:	60c1      	str	r1, [r0, #12]
 8002238:	4770      	bx	lr
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 800223a:	6101      	str	r1, [r0, #16]
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop

08002240 <DMA_GetCurrentMemoryTarget>:
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8002240:	6800      	ldr	r0, [r0, #0]
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
  }
  return tmp;
}
 8002242:	f3c0 40c0 	ubfx	r0, r0, #19, #1
 8002246:	4770      	bx	lr

08002248 <DMA_GetCmdStatus>:
  FunctionalState state = DISABLE;

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002248:	6800      	ldr	r0, [r0, #0]
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
  }
  return state;
}
 800224a:	f000 0001 	and.w	r0, r0, #1
 800224e:	4770      	bx	lr

08002250 <DMA_GetFIFOStatus>:
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8002250:	6940      	ldr	r0, [r0, #20]
  
  return tmpreg;
}
 8002252:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002256:	4770      	bx	lr

08002258 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002258:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800225a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800225e:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002262:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002266:	f2c4 0202 	movt	r2, #16386	; 0x4002
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800226a:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800226e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002272:	42a0      	cmp	r0, r4
 8002274:	bf88      	it	hi
 8002276:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002278:	008a      	lsls	r2, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800227a:	bf4c      	ite	mi
 800227c:	685b      	ldrmi	r3, [r3, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800227e:	681b      	ldrpl	r3, [r3, #0]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002280:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8002284:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002288:	4219      	tst	r1, r3
    bitstatus = RESET;
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 800228a:	bf0c      	ite	eq
 800228c:	2000      	moveq	r0, #0
 800228e:	2001      	movne	r0, #1
 8002290:	bc10      	pop	{r4}
 8002292:	4770      	bx	lr

08002294 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002294:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002296:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800229a:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800229e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80022a2:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80022a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80022aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022ae:	42a0      	cmp	r0, r4
 80022b0:	bf88      	it	hi
 80022b2:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80022b4:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80022b8:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 80022bc:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 80022c0:	bf14      	ite	ne
 80022c2:	60d9      	strne	r1, [r3, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80022c4:	6099      	streq	r1, [r3, #8]
  }    
}
 80022c6:	bc10      	pop	{r4}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop

080022cc <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80022cc:	060b      	lsls	r3, r1, #24
 80022ce:	d504      	bpl.n	80022da <DMA_ITConfig+0xe>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80022d0:	6943      	ldr	r3, [r0, #20]
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
  {
    if (NewState != DISABLE)
 80022d2:	b17a      	cbz	r2, 80022f4 <DMA_ITConfig+0x28>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80022d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d8:	6143      	str	r3, [r0, #20]
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80022da:	2980      	cmp	r1, #128	; 0x80
 80022dc:	d006      	beq.n	80022ec <DMA_ITConfig+0x20>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80022de:	6803      	ldr	r3, [r0, #0]
 80022e0:	f001 011e 	and.w	r1, r1, #30
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
  {
    if (NewState != DISABLE)
 80022e4:	b91a      	cbnz	r2, 80022ee <DMA_ITConfig+0x22>
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80022e6:	ea23 0101 	bic.w	r1, r3, r1
 80022ea:	6001      	str	r1, [r0, #0]
 80022ec:	4770      	bx	lr
  if (DMA_IT != DMA_IT_FE)
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80022ee:	4319      	orrs	r1, r3
 80022f0:	6001      	str	r1, [r0, #0]
 80022f2:	4770      	bx	lr
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80022f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022f8:	6143      	str	r3, [r0, #20]
 80022fa:	e7ee      	b.n	80022da <DMA_ITConfig+0xe>

080022fc <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80022fc:	b470      	push	{r4, r5, r6}
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80022fe:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002302:	f246 450f 	movw	r5, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002306:	f44f 44c8 	mov.w	r4, #25600	; 0x6400
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800230a:	f021 23f0 	bic.w	r3, r1, #4026593280	; 0xf000f000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800230e:	f2c4 0502 	movt	r5, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002312:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8002316:	f2c4 0202 	movt	r2, #16386	; 0x4002
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800231a:	f023 16c3 	bic.w	r6, r3, #12779715	; 0xc300c3
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800231e:	42a8      	cmp	r0, r5
 8002320:	bf88      	it	hi
 8002322:	4622      	movhi	r2, r4
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8002324:	b1ae      	cbz	r6, 8002352 <DMA_GetITStatus+0x56>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8002326:	6800      	ldr	r0, [r0, #0]

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8002328:	f000 001e 	and.w	r0, r0, #30
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800232c:	ea00 20d1 	and.w	r0, r0, r1, lsr #11
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002330:	0089      	lsls	r1, r1, #2
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8002332:	bf4c      	ite	mi
 8002334:	6852      	ldrmi	r2, [r2, #4]
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8002336:	6812      	ldrpl	r2, [r2, #0]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002338:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800233c:	4213      	tst	r3, r2
 800233e:	bf0c      	ite	eq
 8002340:	2300      	moveq	r3, #0
 8002342:	2301      	movne	r3, #1
    bitstatus = RESET;
  }

  /* Return the DMA_IT status */
  return  bitstatus;
}
 8002344:	2800      	cmp	r0, #0
 8002346:	bf0c      	ite	eq
 8002348:	2000      	moveq	r0, #0
 800234a:	f003 0001 	andne.w	r0, r3, #1
 800234e:	bc70      	pop	{r4, r5, r6}
 8002350:	4770      	bx	lr
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8002352:	6940      	ldr	r0, [r0, #20]
 8002354:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002358:	e7ea      	b.n	8002330 <DMA_GetITStatus+0x34>
 800235a:	bf00      	nop

0800235c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800235c:	b410      	push	{r4}

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800235e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002362:	f246 440f 	movw	r4, #25615	; 0x640f
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002366:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800236a:	f2c4 0402 	movt	r4, #16386	; 0x4002
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800236e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002372:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002376:	42a0      	cmp	r0, r4
 8002378:	bf88      	it	hi
 800237a:	4613      	movhi	r3, r2
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800237c:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8002380:	f021 21f0 	bic.w	r1, r1, #4026593280	; 0xf000f000
 8002384:	f021 1182 	bic.w	r1, r1, #8519810	; 0x820082
 8002388:	bf14      	ite	ne
 800238a:	60d9      	strne	r1, [r3, #12]
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800238c:	6099      	streq	r1, [r3, #8]
  }   
}
 800238e:	bc10      	pop	{r4}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop

08002394 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8002394:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002398:	f2c4 0301 	movt	r3, #16385	; 0x4001
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 800239c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 80023a0:	2200      	movs	r2, #0
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 80023a2:	f2c0 017f 	movt	r1, #127	; 0x7f
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 80023a6:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 80023a8:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 80023aa:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 80023ac:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 80023ae:	6159      	str	r1, [r3, #20]
}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop

080023b4 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80023b4:	7983      	ldrb	r3, [r0, #6]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80023b6:	b470      	push	{r4, r5, r6}
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80023b8:	b33b      	cbz	r3, 800240a <EXTI_Init+0x56>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80023ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80023be:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80023c2:	6801      	ldr	r1, [r0, #0]
 80023c4:	681e      	ldr	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80023c6:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80023c8:	7945      	ldrb	r5, [r0, #5]
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80023ca:	43cc      	mvns	r4, r1
 80023cc:	4026      	ands	r6, r4
 80023ce:	601e      	str	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80023d0:	685e      	ldr	r6, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80023d2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80023d6:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80023da:	4034      	ands	r4, r6
 80023dc:	605c      	str	r4, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80023de:	6814      	ldr	r4, [r2, #0]
 80023e0:	4321      	orrs	r1, r4
 80023e2:	6011      	str	r1, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80023e4:	6802      	ldr	r2, [r0, #0]
 80023e6:	6898      	ldr	r0, [r3, #8]
 80023e8:	43d1      	mvns	r1, r2
 80023ea:	4008      	ands	r0, r1
 80023ec:	6098      	str	r0, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80023ee:	68d8      	ldr	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80023f0:	2d10      	cmp	r5, #16

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80023f2:	ea01 0100 	and.w	r1, r1, r0
 80023f6:	60d9      	str	r1, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80023f8:	d013      	beq.n	8002422 <EXTI_Init+0x6e>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80023fa:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80023fe:	f505 359e 	add.w	r5, r5, #80896	; 0x13c00

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8002402:	682b      	ldr	r3, [r5, #0]
 8002404:	431a      	orrs	r2, r3
 8002406:	602a      	str	r2, [r5, #0]
 8002408:	e009      	b.n	800241e <EXTI_Init+0x6a>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800240a:	7903      	ldrb	r3, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800240c:	6801      	ldr	r1, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800240e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002412:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	ea22 0201 	bic.w	r2, r2, r1
 800241c:	601a      	str	r2, [r3, #0]
  }
}
 800241e:	bc70      	pop	{r4, r5, r6}
 8002420:	4770      	bx	lr
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	4311      	orrs	r1, r2
 8002426:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8002428:	68d9      	ldr	r1, [r3, #12]
 800242a:	430a      	orrs	r2, r1
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	e7f6      	b.n	800241e <EXTI_Init+0x6a>

08002430 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8002430:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8002432:	220c      	movs	r2, #12
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8002434:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8002436:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8002438:	7142      	strb	r2, [r0, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800243a:	7183      	strb	r3, [r0, #6]
}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop

08002440 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8002440:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002444:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	4302      	orrs	r2, r0
 800244c:	611a      	str	r2, [r3, #16]
}
 800244e:	4770      	bx	lr

08002450 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8002450:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002454:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002458:	695b      	ldr	r3, [r3, #20]
  {
    bitstatus = SET;
 800245a:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800245c:	bf0c      	ite	eq
 800245e:	2000      	moveq	r0, #0
 8002460:	2001      	movne	r0, #1
 8002462:	4770      	bx	lr

08002464 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002464:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002468:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800246c:	6158      	str	r0, [r3, #20]
}
 800246e:	4770      	bx	lr

08002470 <EXTI_GetITStatus>:
  ITStatus bitstatus = RESET;
  uint32_t enablestatus = 0;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8002470:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002474:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002478:	681a      	ldr	r2, [r3, #0]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	4003      	ands	r3, r0
 800247e:	d004      	beq.n	800248a <EXTI_GetITStatus+0x1a>
  {
    bitstatus = SET;
 8002480:	4210      	tst	r0, r2
 8002482:	bf0c      	ite	eq
 8002484:	2000      	moveq	r0, #0
 8002486:	2001      	movne	r0, #1
 8002488:	4770      	bx	lr
  }
  else
  {
    bitstatus = RESET;
 800248a:	4618      	mov	r0, r3
  }
  return bitstatus;
}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop

08002490 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8002490:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002494:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002498:	6158      	str	r0, [r3, #20]
}
 800249a:	4770      	bx	lr

0800249c <FLASH_SetLatency>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 800249c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80024a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024a4:	b2c0      	uxtb	r0, r0
 80024a6:	7018      	strb	r0, [r3, #0]
}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop

080024ac <FLASH_PrefetchBufferCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80024ac:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80024b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024b4:	681a      	ldr	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 80024b6:	b918      	cbnz	r0, 80024c0 <FLASH_PrefetchBufferCmd+0x14>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 80024b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 80024c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	4770      	bx	lr

080024c8 <FLASH_InstructionCacheCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 80024c8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80024cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024d0:	681a      	ldr	r2, [r3, #0]
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 80024d2:	b918      	cbnz	r0, 80024dc <FLASH_InstructionCacheCmd+0x14>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 80024d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	4770      	bx	lr

080024e4 <FLASH_DataCacheCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80024e4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80024e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024ec:	681a      	ldr	r2, [r3, #0]
void FLASH_DataCacheCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 80024ee:	b918      	cbnz	r0, 80024f8 <FLASH_DataCacheCmd+0x14>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80024f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	4770      	bx	lr

08002500 <FLASH_InstructionCacheReset>:
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
  FLASH->ACR |= FLASH_ACR_ICRST;
 8002500:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002504:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250e:	601a      	str	r2, [r3, #0]
}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop

08002514 <FLASH_DataCacheReset>:
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
  FLASH->ACR |= FLASH_ACR_DCRST;
 8002514:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002518:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop

08002528 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8002528:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800252c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	2a00      	cmp	r2, #0
 8002534:	da09      	bge.n	800254a <FLASH_Unlock+0x22>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8002536:	f240 1123 	movw	r1, #291	; 0x123
    FLASH->KEYR = FLASH_KEY2;
 800253a:	f648 12ab 	movw	r2, #35243	; 0x89ab
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800253e:	f2c4 5167 	movt	r1, #17767	; 0x4567
    FLASH->KEYR = FLASH_KEY2;
 8002542:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8002546:	6059      	str	r1, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	4770      	bx	lr

0800254c <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800254c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002550:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800255a:	611a      	str	r2, [r3, #16]
}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop

08002560 <FLASH_OB_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8002560:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002564:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	07d2      	lsls	r2, r2, #31
 800256c:	d509      	bpl.n	8002582 <FLASH_OB_Unlock+0x22>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800256e:	f642 213b 	movw	r1, #10811	; 0x2a3b
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8002572:	f646 627f 	movw	r2, #28287	; 0x6e7f
void FLASH_OB_Unlock(void)
{
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8002576:	f6c0 0119 	movt	r1, #2073	; 0x819
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800257a:	f6c4 425d 	movt	r2, #19549	; 0x4c5d
void FLASH_OB_Unlock(void)
{
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800257e:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	4770      	bx	lr

08002584 <FLASH_OB_Lock>:
  * @retval None
  */
void FLASH_OB_Lock(void)
{
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002584:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002588:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	615a      	str	r2, [r3, #20]
}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop

08002598 <FLASH_OB_BORConfig>:
{
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002598:	f643 4314 	movw	r3, #15380	; 0x3c14
 800259c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	f002 02f3 	and.w	r2, r2, #243	; 0xf3
 80025a6:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	4302      	orrs	r2, r0
 80025ac:	701a      	strb	r2, [r3, #0]

}
 80025ae:	4770      	bx	lr

080025b0 <FLASH_OB_GetUser>:
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 80025b0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80025b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025b8:	6958      	ldr	r0, [r3, #20]
}
 80025ba:	f3c0 1047 	ubfx	r0, r0, #5, #8
 80025be:	4770      	bx	lr

080025c0 <FLASH_OB_GetWRP>:
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80025c0:	f643 4316 	movw	r3, #15382	; 0x3c16
 80025c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025c8:	8818      	ldrh	r0, [r3, #0]
}
 80025ca:	b280      	uxth	r0, r0
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop

080025d0 <FLASH_OB_GetRDP>:
  */
FlagStatus FLASH_OB_GetRDP(void)
{
  FlagStatus readstatus = RESET;

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 80025d0:	f643 4315 	movw	r3, #15381	; 0x3c15
 80025d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025d8:	7818      	ldrb	r0, [r3, #0]
  else
  {
    readstatus = RESET;
  }
  return readstatus;
}
 80025da:	38aa      	subs	r0, #170	; 0xaa
 80025dc:	bf18      	it	ne
 80025de:	2001      	movne	r0, #1
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <FLASH_OB_GetBOR>:
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80025e4:	f643 4314 	movw	r3, #15380	; 0x3c14
 80025e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025ec:	7818      	ldrb	r0, [r3, #0]
}
 80025ee:	f000 000c 	and.w	r0, r0, #12
 80025f2:	4770      	bx	lr

080025f4 <FLASH_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 80025f4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80025f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80025fc:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 80025fe:	b919      	cbnz	r1, 8002608 <FLASH_ITConfig+0x14>
    FLASH->CR |= FLASH_IT;
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8002600:	ea22 0000 	bic.w	r0, r2, r0
 8002604:	6118      	str	r0, [r3, #16]
 8002606:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8002608:	4310      	orrs	r0, r2
 800260a:	6118      	str	r0, [r3, #16]
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <FLASH_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8002610:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002614:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002618:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 800261a:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
}
 800261c:	bf0c      	ite	eq
 800261e:	2000      	moveq	r0, #0
 8002620:	2001      	movne	r0, #1
 8002622:	4770      	bx	lr

08002624 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8002624:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002628:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800262c:	60d8      	str	r0, [r3, #12]
}
 800262e:	4770      	bx	lr

08002630 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8002630:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002634:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	03d0      	lsls	r0, r2, #15
 800263c:	d40a      	bmi.n	8002654 <FLASH_GetStatus+0x24>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	06d1      	lsls	r1, r2, #27
 8002642:	d501      	bpl.n	8002648 <FLASH_GetStatus+0x18>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8002644:	2005      	movs	r0, #5
 8002646:	4770      	bx	lr
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	f012 0fef 	tst.w	r2, #239	; 0xef
 800264e:	d003      	beq.n	8002658 <FLASH_GetStatus+0x28>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8002650:	2006      	movs	r0, #6
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 8002652:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 8002654:	2001      	movs	r0, #1
 8002656:	4770      	bx	lr
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f013 0f02 	tst.w	r3, #2
        {
          flashstatus = FLASH_ERROR_OPERATION;
 800265e:	bf0c      	ite	eq
 8002660:	2008      	moveq	r0, #8
 8002662:	2007      	movne	r0, #7
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8002668:	b500      	push	{lr}
 800266a:	b083      	sub	sp, #12
  __IO FLASH_Status status = FLASH_COMPLETE;
 800266c:	2308      	movs	r3, #8
 800266e:	f88d 3007 	strb.w	r3, [sp, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8002672:	f7ff ffdd 	bl	8002630 <FLASH_GetStatus>
 8002676:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800267a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d0f7      	beq.n	8002672 <FLASH_WaitForLastOperation+0xa>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8002682:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002686:	b003      	add	sp, #12
 8002688:	bd00      	pop	{pc}
 800268a:	bf00      	nop

0800268c <FLASH_OB_Launch>:
FLASH_Status FLASH_OB_Launch(void)
{
  FLASH_Status status = FLASH_COMPLETE;

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800268c:	f643 4314 	movw	r3, #15380	; 0x3c14
 8002690:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	f042 0202 	orr.w	r2, r2, #2
 800269a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800269c:	e7e4      	b.n	8002668 <FLASH_WaitForLastOperation>
 800269e:	bf00      	nop

080026a0 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	4604      	mov	r4, r0
 80026a4:	460d      	mov	r5, r1
 80026a6:	4616      	mov	r6, r2
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80026a8:	f7ff ffde 	bl	8002668 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80026ac:	2808      	cmp	r0, #8
 80026ae:	d10a      	bne.n	80026c6 <FLASH_OB_UserConfig+0x26>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 80026b0:	f643 4314 	movw	r3, #15380	; 0x3c14
 80026b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	f002 020f 	and.w	r2, r2, #15

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 80026be:	4314      	orrs	r4, r2
 80026c0:	4325      	orrs	r5, r4
 80026c2:	432e      	orrs	r6, r5
 80026c4:	701e      	strb	r6, [r3, #0]
 80026c6:	bd70      	pop	{r4, r5, r6, pc}

080026c8 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 80026c8:	b510      	push	{r4, lr}
 80026ca:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 80026cc:	f7ff ffcc 	bl	8002668 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80026d0:	2808      	cmp	r0, #8
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 80026d2:	bf02      	ittt	eq
 80026d4:	f643 4315 	movweq	r3, #15381	; 0x3c15
 80026d8:	f2c4 0302 	movteq	r3, #16386	; 0x4002
 80026dc:	701c      	strbeq	r4, [r3, #0]
 80026de:	bd10      	pop	{r4, pc}

080026e0 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 80026e0:	b538      	push	{r3, r4, r5, lr}
 80026e2:	4604      	mov	r4, r0
 80026e4:	460d      	mov	r5, r1
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 80026e6:	f7ff ffbf 	bl	8002668 <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80026ea:	2808      	cmp	r0, #8
 80026ec:	d000      	beq.n	80026f0 <FLASH_OB_WRPConfig+0x10>
 80026ee:	bd38      	pop	{r3, r4, r5, pc}
  { 
    if(NewState != DISABLE)
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 80026f0:	f643 4316 	movw	r3, #15382	; 0x3c16
 80026f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026f8:	881a      	ldrh	r2, [r3, #0]
    
  status = FLASH_WaitForLastOperation();

  if(status == FLASH_COMPLETE)
  { 
    if(NewState != DISABLE)
 80026fa:	b91d      	cbnz	r5, 8002704 <FLASH_OB_WRPConfig+0x24>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 80026fc:	4314      	orrs	r4, r2
 80026fe:	b2a4      	uxth	r4, r4
 8002700:	801c      	strh	r4, [r3, #0]
 8002702:	bd38      	pop	{r3, r4, r5, pc}

  if(status == FLASH_COMPLETE)
  { 
    if(NewState != DISABLE)
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8002704:	b292      	uxth	r2, r2
 8002706:	ea22 0404 	bic.w	r4, r2, r4
 800270a:	801c      	strh	r4, [r3, #0]
 800270c:	bd38      	pop	{r3, r4, r5, pc}
 800270e:	bf00      	nop

08002710 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	4604      	mov	r4, r0
 8002714:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002716:	f7ff ffa7 	bl	8002668 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800271a:	2808      	cmp	r0, #8
 800271c:	d000      	beq.n	8002720 <FLASH_ProgramByte+0x10>
    FLASH->CR &= (~FLASH_CR_PG);
  } 

  /* Return the Program Status */
  return status;
}
 800271e:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8002720:	f44f 5570 	mov.w	r5, #15360	; 0x3c00
 8002724:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8002728:	692b      	ldr	r3, [r5, #16]
 800272a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272e:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8002730:	692b      	ldr	r3, [r5, #16]
 8002732:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 8002734:	692b      	ldr	r3, [r5, #16]
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	612b      	str	r3, [r5, #16]
  
    *(__IO uint8_t*)Address = Data;
 800273c:	7026      	strb	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800273e:	f7ff ff93 	bl	8002668 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002742:	692b      	ldr	r3, [r5, #16]
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	612b      	str	r3, [r5, #16]
  } 

  /* Return the Program Status */
  return status;
}
 800274a:	bd70      	pop	{r4, r5, r6, pc}

0800274c <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	4604      	mov	r4, r0
 8002750:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002752:	f7ff ff89 	bl	8002668 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8002756:	2808      	cmp	r0, #8
 8002758:	d000      	beq.n	800275c <FLASH_ProgramHalfWord+0x10>
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
  } 
  /* Return the Program Status */
  return status;
}
 800275a:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800275c:	f44f 5570 	mov.w	r5, #15360	; 0x3c00
 8002760:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8002764:	692b      	ldr	r3, [r5, #16]
 8002766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800276a:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800276c:	692b      	ldr	r3, [r5, #16]
 800276e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002772:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 8002774:	692b      	ldr	r3, [r5, #16]
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	612b      	str	r3, [r5, #16]
  
    *(__IO uint16_t*)Address = Data;
 800277c:	8026      	strh	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800277e:	f7ff ff73 	bl	8002668 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002782:	692b      	ldr	r3, [r5, #16]
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	612b      	str	r3, [r5, #16]
  } 
  /* Return the Program Status */
  return status;
}
 800278a:	bd70      	pop	{r4, r5, r6, pc}

0800278c <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	4604      	mov	r4, r0
 8002790:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002792:	f7ff ff69 	bl	8002668 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8002796:	2808      	cmp	r0, #8
 8002798:	d000      	beq.n	800279c <FLASH_ProgramWord+0x10>
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
  } 
  /* Return the Program Status */
  return status;
}
 800279a:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800279c:	f44f 5570 	mov.w	r5, #15360	; 0x3c00
 80027a0:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80027a4:	692b      	ldr	r3, [r5, #16]
 80027a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027aa:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 80027ac:	692b      	ldr	r3, [r5, #16]
 80027ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b2:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_PG;
 80027b4:	692b      	ldr	r3, [r5, #16]
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	612b      	str	r3, [r5, #16]
  
    *(__IO uint32_t*)Address = Data;
 80027bc:	6026      	str	r6, [r4, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80027be:	f7ff ff53 	bl	8002668 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80027c2:	692b      	ldr	r3, [r5, #16]
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	612b      	str	r3, [r5, #16]
  } 
  /* Return the Program Status */
  return status;
}
 80027ca:	bd70      	pop	{r4, r5, r6, pc}

080027cc <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ce:	4606      	mov	r6, r0
 80027d0:	4614      	mov	r4, r2
 80027d2:	461d      	mov	r5, r3

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80027d4:	f7ff ff48 	bl	8002668 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 80027d8:	2808      	cmp	r0, #8
 80027da:	d000      	beq.n	80027de <FLASH_ProgramDoubleWord+0x12>
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
  } 
  /* Return the Program Status */
  return status;
}
 80027dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80027de:	f44f 5770 	mov.w	r7, #15360	; 0x3c00
 80027e2:	f2c4 0702 	movt	r7, #16386	; 0x4002
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ec:	613b      	str	r3, [r7, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80027f4:	613b      	str	r3, [r7, #16]
    FLASH->CR |= FLASH_CR_PG;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	613b      	str	r3, [r7, #16]
  
    *(__IO uint64_t*)Address = Data;
 80027fe:	e9c6 4500 	strd	r4, r5, [r6]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8002802:	f7ff ff31 	bl	8002668 <FLASH_WaitForLastOperation>

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	613b      	str	r3, [r7, #16]
  } 
  /* Return the Program Status */
  return status;
}
 800280e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002810 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	4604      	mov	r4, r0
  uint32_t tmp_psize = 0x0;
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002814:	f7ff ff28 	bl	8002668 <FLASH_WaitForLastOperation>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8002818:	b154      	cbz	r4, 8002830 <FLASH_EraseAllSectors+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 800281a:	2c01      	cmp	r4, #1
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800281c:	bf08      	it	eq
 800281e:	f44f 7480 	moveq.w	r4, #256	; 0x100
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 8002822:	d005      	beq.n	8002830 <FLASH_EraseAllSectors+0x20>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002824:	2c02      	cmp	r4, #2
 8002826:	bf14      	ite	ne
 8002828:	f44f 7440 	movne.w	r4, #768	; 0x300
 800282c:	f44f 7400 	moveq.w	r4, #512	; 0x200
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }  
  if(status == FLASH_COMPLETE)
 8002830:	2808      	cmp	r0, #8
 8002832:	d000      	beq.n	8002836 <FLASH_EraseAllSectors+0x26>
    FLASH->CR &= (~FLASH_CR_MER);

  }   
  /* Return the Erase Status */
  return status;
}
 8002834:	bd38      	pop	{r3, r4, r5, pc}
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 8002836:	f44f 5570 	mov.w	r5, #15360	; 0x3c00
 800283a:	f2c4 0502 	movt	r5, #16386	; 0x4002
 800283e:	692b      	ldr	r3, [r5, #16]
 8002840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002844:	612b      	str	r3, [r5, #16]
     FLASH->CR |= tmp_psize;
 8002846:	692b      	ldr	r3, [r5, #16]
 8002848:	431c      	orrs	r4, r3
 800284a:	612c      	str	r4, [r5, #16]
     FLASH->CR |= FLASH_CR_MER;
 800284c:	692b      	ldr	r3, [r5, #16]
 800284e:	f043 0304 	orr.w	r3, r3, #4
 8002852:	612b      	str	r3, [r5, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8002854:	692b      	ldr	r3, [r5, #16]
 8002856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285a:	612b      	str	r3, [r5, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800285c:	f7ff ff04 	bl	8002668 <FLASH_WaitForLastOperation>

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 8002860:	692b      	ldr	r3, [r5, #16]
 8002862:	f023 0304 	bic.w	r3, r3, #4
 8002866:	612b      	str	r3, [r5, #16]

  }   
  /* Return the Erase Status */
  return status;
}
 8002868:	bd38      	pop	{r3, r4, r5, pc}
 800286a:	bf00      	nop

0800286c <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	4605      	mov	r5, r0
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002870:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8002872:	b149      	cbz	r1, 8002888 <FLASH_EraseSector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == VoltageRange_3)
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002874:	2902      	cmp	r1, #2
 8002876:	bf14      	ite	ne
 8002878:	f44f 7640 	movne.w	r6, #768	; 0x300
 800287c:	f44f 7600 	moveq.w	r6, #512	; 0x200
  
  if(VoltageRange == VoltageRange_1)
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == VoltageRange_2)
 8002880:	2901      	cmp	r1, #1
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002882:	bf08      	it	eq
 8002884:	f44f 7680 	moveq.w	r6, #256	; 0x100
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8002888:	f7ff feee 	bl	8002668 <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800288c:	2808      	cmp	r0, #8
 800288e:	d000      	beq.n	8002892 <FLASH_EraseSector+0x26>
    FLASH->CR &= (~FLASH_CR_SER);
    FLASH->CR &= SECTOR_MASK; 
  }
  /* Return the Erase Status */
  return status;
}
 8002890:	bd70      	pop	{r4, r5, r6, pc}
  status = FLASH_WaitForLastOperation();
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8002892:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 8002896:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800289a:	6923      	ldr	r3, [r4, #16]
 800289c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a0:	6123      	str	r3, [r4, #16]
    FLASH->CR |= tmp_psize;
 80028a2:	6923      	ldr	r3, [r4, #16]
 80028a4:	431e      	orrs	r6, r3
 80028a6:	6126      	str	r6, [r4, #16]
    FLASH->CR &= SECTOR_MASK;
 80028a8:	6923      	ldr	r3, [r4, #16]
 80028aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028ae:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 80028b0:	6923      	ldr	r3, [r4, #16]
 80028b2:	f043 0302 	orr.w	r3, r3, #2
 80028b6:	431d      	orrs	r5, r3
 80028b8:	6125      	str	r5, [r4, #16]
    FLASH->CR |= FLASH_CR_STRT;
 80028ba:	6923      	ldr	r3, [r4, #16]
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80028c2:	f7ff fed1 	bl	8002668 <FLASH_WaitForLastOperation>
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 80028c6:	6923      	ldr	r3, [r4, #16]
 80028c8:	f023 0302 	bic.w	r3, r3, #2
 80028cc:	6123      	str	r3, [r4, #16]
    FLASH->CR &= SECTOR_MASK; 
 80028ce:	6923      	ldr	r3, [r4, #16]
 80028d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028d4:	6123      	str	r3, [r4, #16]
  }
  /* Return the Erase Status */
  return status;
}
 80028d6:	bd70      	pop	{r4, r5, r6, pc}

080028d8 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 80028d8:	b410      	push	{r4}
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 80028da:	b1a0      	cbz	r0, 8002906 <FSMC_NORSRAMDeInit+0x2e>
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 80028dc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80028e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80028e4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 80028e8:	f44f 7382 	mov.w	r3, #260	; 0x104
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 80028ec:	1c44      	adds	r4, r0, #1
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 80028ee:	f2ca 0300 	movt	r3, #40960	; 0xa000
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 80028f2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80028f6:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80028fa:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 80028fe:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8002902:	bc10      	pop	{r4}
 8002904:	4770      	bx	lr
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 8002906:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800290a:	f243 02db 	movw	r2, #12507	; 0x30db
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e7ea      	b.n	80028e8 <FSMC_NORSRAMDeInit+0x10>
 8002912:	bf00      	nop

08002914 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8002914:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8002918:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 800291a:	f8d0 a004 	ldr.w	sl, [r0, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800291e:	f8d0 900c 	ldr.w	r9, [r0, #12]
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8002922:	f8d0 8010 	ldr.w	r8, [r0, #16]
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8002926:	f8d0 c014 	ldr.w	ip, [r0, #20]
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 800292a:	6987      	ldr	r7, [r0, #24]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800292c:	69c6      	ldr	r6, [r0, #28]
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800292e:	6a05      	ldr	r5, [r0, #32]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8002930:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8002934:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8002936:	6803      	ldr	r3, [r0, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8002938:	ea41 0a0a 	orr.w	sl, r1, sl
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800293c:	ea4a 0909 	orr.w	r9, sl, r9
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8002940:	ea49 0908 	orr.w	r9, r9, r8
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8002944:	ea49 090c 	orr.w	r9, r9, ip
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8002948:	ea49 0707 	orr.w	r7, r9, r7
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800294c:	433e      	orrs	r6, r7
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800294e:	4335      	orrs	r5, r6
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8002950:	6a86      	ldr	r6, [r0, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8002952:	ea45 050b 	orr.w	r5, r5, fp
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8002956:	4335      	orrs	r5, r6
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8002958:	6b06      	ldr	r6, [r0, #48]	; 0x30
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800295a:	f04f 4420 	mov.w	r4, #2684354560	; 0xa0000000
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 800295e:	4315      	orrs	r5, r2
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8002960:	4335      	orrs	r5, r6
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8002962:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8002966:	2908      	cmp	r1, #8
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8002968:	bf02      	ittt	eq
 800296a:	f854 1023 	ldreq.w	r1, [r4, r3, lsl #2]
 800296e:	f041 0140 	orreq.w	r1, r1, #64	; 0x40
 8002972:	f844 1023 	streq.w	r1, [r4, r3, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8002976:	6b41      	ldr	r1, [r0, #52]	; 0x34
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8002978:	e891 1020 	ldmia.w	r1, {r5, ip}
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 800297c:	f8d1 8018 	ldr.w	r8, [r1, #24]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8002980:	688f      	ldr	r7, [r1, #8]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8002982:	68cc      	ldr	r4, [r1, #12]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8002984:	690e      	ldr	r6, [r1, #16]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8002986:	6949      	ldr	r1, [r1, #20]
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8002988:	ea48 0505 	orr.w	r5, r8, r5
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 800298c:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8002990:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8002994:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8002998:	ea45 5506 	orr.w	r5, r5, r6, lsl #20
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 800299c:	1c5c      	adds	r4, r3, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800299e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80029a2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 80029a6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80029aa:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 80029ae:	d00a      	beq.n	80029c6 <FSMC_NORSRAMInit+0xb2>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 80029b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029b4:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80029b8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80029bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
}
 80029c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029c4:	4770      	bx	lr
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 80029c6:	6b82      	ldr	r2, [r0, #56]	; 0x38
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 80029c8:	e892 0042 	ldmia.w	r2, {r1, r6}
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 80029cc:	6997      	ldr	r7, [r2, #24]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 80029ce:	6895      	ldr	r5, [r2, #8]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 80029d0:	6914      	ldr	r4, [r2, #16]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 80029d2:	6950      	ldr	r0, [r2, #20]
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 80029d4:	4339      	orrs	r1, r7
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 80029d6:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 80029da:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80029de:	f44f 7282 	mov.w	r2, #260	; 0x104
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 80029e2:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80029e6:	f2ca 0200 	movt	r2, #40960	; 0xa000
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 80029ea:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80029ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80029f2:	e7e5      	b.n	80029c0 <FSMC_NORSRAMInit+0xac>

080029f4 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 80029f4:	b470      	push	{r4, r5, r6}
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 80029f6:	2602      	movs	r6, #2
 80029f8:	6046      	str	r6, [r0, #4]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 80029fa:	6b44      	ldr	r4, [r0, #52]	; 0x34
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 80029fc:	6b81      	ldr	r1, [r0, #56]	; 0x38
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 80029fe:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8002a02:	6246      	str	r6, [r0, #36]	; 0x24
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8002a04:	2300      	movs	r3, #0
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8002a06:	220f      	movs	r2, #15
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8002a08:	25ff      	movs	r5, #255	; 0xff
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8002a0a:	f44f 5600 	mov.w	r6, #8192	; 0x2000
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8002a0e:	6003      	str	r3, [r0, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8002a10:	6083      	str	r3, [r0, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8002a12:	60c3      	str	r3, [r0, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8002a14:	6103      	str	r3, [r0, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8002a16:	6143      	str	r3, [r0, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8002a18:	6183      	str	r3, [r0, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8002a1a:	61c3      	str	r3, [r0, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8002a1c:	6203      	str	r3, [r0, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8002a1e:	6286      	str	r6, [r0, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8002a20:	62c3      	str	r3, [r0, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8002a22:	6303      	str	r3, [r0, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8002a24:	6022      	str	r2, [r4, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8002a26:	6062      	str	r2, [r4, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8002a28:	60a5      	str	r5, [r4, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8002a2a:	60e2      	str	r2, [r4, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8002a2c:	6122      	str	r2, [r4, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8002a2e:	6162      	str	r2, [r4, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 8002a30:	61a3      	str	r3, [r4, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8002a32:	600a      	str	r2, [r1, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8002a34:	604a      	str	r2, [r1, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8002a36:	608d      	str	r5, [r1, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8002a38:	60ca      	str	r2, [r1, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 8002a3a:	610a      	str	r2, [r1, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 8002a3c:	614a      	str	r2, [r1, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8002a3e:	618b      	str	r3, [r1, #24]
}
 8002a40:	bc70      	pop	{r4, r5, r6}
 8002a42:	4770      	bx	lr

08002a44 <FSMC_NORSRAMCmd>:
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002a44:	b959      	cbnz	r1, 8002a5e <FSMC_NORSRAMCmd+0x1a>
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8002a46:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002a4a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002a4e:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8002a52:	f2c0 030f 	movt	r3, #15
 8002a56:	400b      	ands	r3, r1
 8002a58:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002a5c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 8002a5e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002a62:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8002a6e:	4770      	bx	lr

08002a70 <FSMC_NANDDeInit>:
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8002a70:	2360      	movs	r3, #96	; 0x60
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002a72:	2810      	cmp	r0, #16
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 8002a74:	bf18      	it	ne
 8002a76:	2380      	movne	r3, #128	; 0x80
 8002a78:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002a7c:	2118      	movs	r1, #24
 8002a7e:	6019      	str	r1, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8002a80:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
    FSMC_Bank3->SR3 = 0x00000040;
 8002a84:	2140      	movs	r1, #64	; 0x40
 8002a86:	6059      	str	r1, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8002a88:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop

08002a90 <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 8002a90:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002a94:	6a03      	ldr	r3, [r0, #32]
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8002a96:	6941      	ldr	r1, [r0, #20]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8002a98:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8002a9c:	f8d0 9008 	ldr.w	r9, [r0, #8]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002aa0:	689f      	ldr	r7, [r3, #8]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002aa2:	685c      	ldr	r4, [r3, #4]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8002aa4:	f8d0 800c 	ldr.w	r8, [r0, #12]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8002aa8:	69c2      	ldr	r2, [r0, #28]
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8002aaa:	6906      	ldr	r6, [r0, #16]
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002aac:	f8d2 c008 	ldr.w	ip, [r2, #8]
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002ab0:	6855      	ldr	r5, [r2, #4]
 8002ab2:	f8d2 b000 	ldr.w	fp, [r2]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8002ab6:	68d2      	ldr	r2, [r2, #12]
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 8002ab8:	b084      	sub	sp, #16
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8002aba:	ea4a 0909 	orr.w	r9, sl, r9
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8002abe:	9101      	str	r1, [sp, #4]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002ac0:	6819      	ldr	r1, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 8002ac2:	68db      	ldr	r3, [r3, #12]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002ac4:	9103      	str	r1, [sp, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002ac6:	043f      	lsls	r7, r7, #16
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8002ac8:	f049 0908 	orr.w	r9, r9, #8
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8002acc:	6981      	ldr	r1, [r0, #24]
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8002ace:	6800      	ldr	r0, [r0, #0]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8002ad0:	9102      	str	r1, [sp, #8]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002ad2:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8002ad6:	ea49 0808 	orr.w	r8, r9, r8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8002ada:	9c01      	ldr	r4, [sp, #4]
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8002adc:	ea48 0806 	orr.w	r8, r8, r6
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8002ae0:	ea48 2144 	orr.w	r1, r8, r4, lsl #9
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002ae4:	9c03      	ldr	r4, [sp, #12]
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002ae6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002aea:	4327      	orrs	r7, r4
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8002aec:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8002af0:	9c02      	ldr	r4, [sp, #8]
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002af2:	ea4c 0b0b 	orr.w	fp, ip, fp
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8002af6:	2810      	cmp	r0, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8002af8:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8002afc:	ea4b 6202 	orr.w	r2, fp, r2, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002b00:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8002b04:	d009      	beq.n	8002b1a <FSMC_NANDInit+0x8a>
    FSMC_Bank2->PATT2 = tmppatt;
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8002b06:	2080      	movs	r0, #128	; 0x80
 8002b08:	f2ca 0000 	movt	r0, #40960	; 0xa000
 8002b0c:	6001      	str	r1, [r0, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8002b0e:	6082      	str	r2, [r0, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8002b10:	60c7      	str	r7, [r0, #12]
  }
}
 8002b12:	b004      	add	sp, #16
 8002b14:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b18:	4770      	bx	lr
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8002b1a:	2360      	movs	r3, #96	; 0x60
 8002b1c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002b20:	6019      	str	r1, [r3, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 8002b22:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 8002b24:	60df      	str	r7, [r3, #12]
 8002b26:	e7f4      	b.n	8002b12 <FSMC_NANDInit+0x82>

08002b28 <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 8002b28:	b430      	push	{r4, r5}
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002b2a:	6a01      	ldr	r1, [r0, #32]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002b2c:	69c4      	ldr	r4, [r0, #28]
 8002b2e:	23fc      	movs	r3, #252	; 0xfc
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8002b30:	2200      	movs	r2, #0
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8002b32:	2510      	movs	r5, #16
 8002b34:	6005      	str	r5, [r0, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8002b36:	6042      	str	r2, [r0, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8002b38:	6082      	str	r2, [r0, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8002b3a:	60c2      	str	r2, [r0, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8002b3c:	6102      	str	r2, [r0, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8002b3e:	6142      	str	r2, [r0, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8002b40:	6182      	str	r2, [r0, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002b42:	6023      	str	r3, [r4, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002b44:	6063      	str	r3, [r4, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002b46:	60a3      	str	r3, [r4, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8002b48:	60e3      	str	r3, [r4, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002b4a:	600b      	str	r3, [r1, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002b4c:	604b      	str	r3, [r1, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002b4e:	608b      	str	r3, [r1, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8002b50:	60cb      	str	r3, [r1, #12]
}
 8002b52:	bc30      	pop	{r4, r5}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop

08002b58 <FSMC_NANDCmd>:
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b58:	b149      	cbz	r1, 8002b6e <FSMC_NANDCmd+0x16>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002b5a:	2810      	cmp	r0, #16
 8002b5c:	d015      	beq.n	8002b8a <FSMC_NANDCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	f042 0204 	orr.w	r2, r2, #4
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	4770      	bx	lr
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8002b6e:	2260      	movs	r2, #96	; 0x60
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002b70:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8002b72:	bf18      	it	ne
 8002b74:	2280      	movne	r2, #128	; 0x80
 8002b76:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8002b7a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8002b7e:	6811      	ldr	r1, [r2, #0]
 8002b80:	f2c0 030f 	movt	r3, #15
 8002b84:	400b      	ands	r3, r1
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4770      	bx	lr
  if (NewState != DISABLE)
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8002b8a:	2360      	movs	r3, #96	; 0x60
 8002b8c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	f042 0204 	orr.w	r2, r2, #4
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop

08002b9c <FSMC_NANDECCCmd>:
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b9c:	b149      	cbz	r1, 8002bb2 <FSMC_NANDECCCmd+0x16>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002b9e:	2810      	cmp	r0, #16
 8002ba0:	d015      	beq.n	8002bce <FSMC_NANDECCCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	4770      	bx	lr
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8002bb2:	2260      	movs	r2, #96	; 0x60
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002bb4:	2810      	cmp	r0, #16
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8002bb6:	bf18      	it	ne
 8002bb8:	2280      	movne	r2, #128	; 0x80
 8002bba:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8002bbe:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8002bc2:	6811      	ldr	r1, [r2, #0]
 8002bc4:	f2c0 030f 	movt	r3, #15
 8002bc8:	400b      	ands	r3, r1
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4770      	bx	lr
  if (NewState != DISABLE)
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8002bce:	2360      	movs	r3, #96	; 0x60
 8002bd0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop

08002be0 <FSMC_GetECC>:
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
  uint32_t eccval = 0x00000000;
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002be0:	2810      	cmp	r0, #16
 8002be2:	d004      	beq.n	8002bee <FSMC_GetECC+0xe>
    eccval = FSMC_Bank2->ECCR2;
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002bea:	6958      	ldr	r0, [r3, #20]
  }
  /* Return the error correction code value */
  return(eccval);
}
 8002bec:	4770      	bx	lr
  uint32_t eccval = 0x00000000;
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8002bee:	2360      	movs	r3, #96	; 0x60
 8002bf0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002bf4:	6958      	ldr	r0, [r3, #20]
 8002bf6:	4770      	bx	lr

08002bf8 <FSMC_PCCARDDeInit>:
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8002bf8:	23a0      	movs	r3, #160	; 0xa0
 8002bfa:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002bfe:	2118      	movs	r1, #24
 8002c00:	6019      	str	r1, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8002c02:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
  */
void FSMC_PCCARDDeInit(void)
{
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
  FSMC_Bank4->SR4 = 0x00000000;	
 8002c06:	2100      	movs	r1, #0
 8002c08:	6059      	str	r1, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8002c0a:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8002c0c:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 8002c0e:	611a      	str	r2, [r3, #16]
}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop

08002c14 <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8002c14:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 8002c16:	6807      	ldr	r7, [r0, #0]
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8002c18:	6846      	ldr	r6, [r0, #4]
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8002c1a:	68c4      	ldr	r4, [r0, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002c1c:	6901      	ldr	r1, [r0, #16]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8002c1e:	6942      	ldr	r2, [r0, #20]
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 8002c20:	6885      	ldr	r5, [r0, #8]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8002c22:	23a0      	movs	r3, #160	; 0xa0
                     FSMC_MemoryDataWidth_16b |  
 8002c24:	f047 0010 	orr.w	r0, r7, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8002c28:	f2ca 0300 	movt	r3, #40960	; 0xa000
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8002c2c:	ea40 2046 	orr.w	r0, r0, r6, lsl #9
 8002c30:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8002c34:	6018      	str	r0, [r3, #0]
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002c36:	e894 0060 	ldmia.w	r4, {r5, r6}
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002c3a:	68a0      	ldr	r0, [r4, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8002c3c:	68e4      	ldr	r4, [r4, #12]
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002c3e:	0400      	lsls	r0, r0, #16
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8002c40:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002c44:	4328      	orrs	r0, r5
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002c46:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8002c4a:	6098      	str	r0, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002c4c:	e891 0070 	ldmia.w	r1, {r4, r5, r6}
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 8002c50:	68c8      	ldr	r0, [r1, #12]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002c52:	0431      	lsls	r1, r6, #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002c54:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002c58:	4321      	orrs	r1, r4
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002c5a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8002c5e:	60d9      	str	r1, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002c60:	e892 0031 	ldmia.w	r2, {r0, r4, r5}
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 8002c64:	68d1      	ldr	r1, [r2, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002c66:	042a      	lsls	r2, r5, #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8002c68:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8002c6c:	4302      	orrs	r2, r0
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8002c6e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8002c72:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 8002c74:	bcf0      	pop	{r4, r5, r6, r7}
 8002c76:	4770      	bx	lr

08002c78 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8002c78:	b430      	push	{r4, r5}
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002c7a:	6901      	ldr	r1, [r0, #16]
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002c7c:	68c4      	ldr	r4, [r0, #12]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002c7e:	6942      	ldr	r2, [r0, #20]
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002c80:	23fc      	movs	r3, #252	; 0xfc
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8002c82:	2500      	movs	r5, #0
 8002c84:	6005      	str	r5, [r0, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8002c86:	6045      	str	r5, [r0, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 8002c88:	6085      	str	r5, [r0, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002c8a:	6023      	str	r3, [r4, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002c8c:	6063      	str	r3, [r4, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002c8e:	60a3      	str	r3, [r4, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8002c90:	60e3      	str	r3, [r4, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002c92:	600b      	str	r3, [r1, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002c94:	604b      	str	r3, [r1, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002c96:	608b      	str	r3, [r1, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8002c98:	60cb      	str	r3, [r1, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8002c9a:	6013      	str	r3, [r2, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8002c9c:	6053      	str	r3, [r2, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8002c9e:	6093      	str	r3, [r2, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8002ca0:	60d3      	str	r3, [r2, #12]
}
 8002ca2:	bc30      	pop	{r4, r5}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop

08002ca8 <FSMC_PCCARDCmd>:
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002ca8:	b950      	cbnz	r0, 8002cc0 <FSMC_PCCARDCmd+0x18>
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8002caa:	22a0      	movs	r2, #160	; 0xa0
 8002cac:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8002cb0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8002cb4:	6811      	ldr	r1, [r2, #0]
 8002cb6:	f2c0 030f 	movt	r3, #15
 8002cba:	400b      	ands	r3, r1
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8002cc0:	23a0      	movs	r3, #160	; 0xa0
 8002cc2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	f042 0204 	orr.w	r2, r2, #4
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	4770      	bx	lr

08002cd0 <FSMC_ITConfig>:
{
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002cd0:	b15a      	cbz	r2, 8002cea <FSMC_ITConfig+0x1a>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002cd2:	2810      	cmp	r0, #16
 8002cd4:	d01e      	beq.n	8002d14 <FSMC_ITConfig+0x44>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8002cd6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002cda:	d022      	beq.n	8002d22 <FSMC_ITConfig+0x52>
      FSMC_Bank3->SR3 |= FSMC_IT;
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 8002cdc:	23a0      	movs	r3, #160	; 0xa0
 8002cde:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	4311      	orrs	r1, r2
 8002ce6:	6059      	str	r1, [r3, #4]
 8002ce8:	4770      	bx	lr
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8002cea:	2810      	cmp	r0, #16
 8002cec:	d00a      	beq.n	8002d04 <FSMC_ITConfig+0x34>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8002cee:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002cf2:	d01d      	beq.n	8002d30 <FSMC_ITConfig+0x60>
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8002cf4:	23a0      	movs	r3, #160	; 0xa0
 8002cf6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	ea22 0101 	bic.w	r1, r2, r1
 8002d00:	6059      	str	r1, [r3, #4]
 8002d02:	4770      	bx	lr
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 8002d04:	2360      	movs	r3, #96	; 0x60
 8002d06:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	ea22 0101 	bic.w	r1, r2, r1
 8002d10:	6059      	str	r1, [r3, #4]
 8002d12:	4770      	bx	lr
  if (NewState != DISABLE)
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 8002d14:	2360      	movs	r3, #96	; 0x60
 8002d16:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	4311      	orrs	r1, r2
 8002d1e:	6059      	str	r1, [r3, #4]
 8002d20:	4770      	bx	lr
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	4311      	orrs	r1, r2
 8002d2c:	6059      	str	r1, [r3, #4]
 8002d2e:	4770      	bx	lr
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	ea22 0101 	bic.w	r1, r2, r1
 8002d3c:	6059      	str	r1, [r3, #4]
 8002d3e:	4770      	bx	lr

08002d40 <FSMC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002d40:	2810      	cmp	r0, #16
 8002d42:	d00b      	beq.n	8002d5c <FSMC_GetFlagStatus+0x1c>
  {
    tmpsr = FSMC_Bank2->SR2;
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002d44:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002d48:	d00d      	beq.n	8002d66 <FSMC_GetFlagStatus+0x26>
    tmpsr = FSMC_Bank3->SR3;
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8002d4a:	23a0      	movs	r3, #160	; 0xa0
 8002d4c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d50:	685b      	ldr	r3, [r3, #4]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
  {
    bitstatus = SET;
 8002d52:	420b      	tst	r3, r1
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8002d54:	bf0c      	ite	eq
 8002d56:	2000      	moveq	r0, #0
 8002d58:	2001      	movne	r0, #1
 8002d5a:	4770      	bx	lr
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    tmpsr = FSMC_Bank2->SR2;
 8002d5c:	2360      	movs	r3, #96	; 0x60
 8002d5e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	e7f5      	b.n	8002d52 <FSMC_GetFlagStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
  {
    tmpsr = FSMC_Bank3->SR3;
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	e7f0      	b.n	8002d52 <FSMC_GetFlagStatus+0x12>

08002d70 <FSMC_ClearFlag>:
{
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002d70:	2810      	cmp	r0, #16
 8002d72:	d00a      	beq.n	8002d8a <FSMC_ClearFlag+0x1a>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002d74:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002d78:	d00f      	beq.n	8002d9a <FSMC_ClearFlag+0x2a>
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8002d7a:	23a0      	movs	r3, #160	; 0xa0
 8002d7c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	ea22 0101 	bic.w	r1, r2, r1
 8002d86:	6059      	str	r1, [r3, #4]
 8002d88:	4770      	bx	lr
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 8002d8a:	2360      	movs	r3, #96	; 0x60
 8002d8c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	ea22 0101 	bic.w	r1, r2, r1
 8002d96:	6059      	str	r1, [r3, #4]
 8002d98:	4770      	bx	lr
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	ea22 0101 	bic.w	r1, r2, r1
 8002da6:	6059      	str	r1, [r3, #4]
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop

08002dac <FSMC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002dac:	2810      	cmp	r0, #16
 8002dae:	d011      	beq.n	8002dd4 <FSMC_GetITStatus+0x28>
  {
    tmpsr = FSMC_Bank2->SR2;
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002db0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002db4:	d013      	beq.n	8002dde <FSMC_GetITStatus+0x32>
    tmpsr = FSMC_Bank3->SR3;
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8002db6:	23a0      	movs	r3, #160	; 0xa0
 8002db8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002dbc:	685b      	ldr	r3, [r3, #4]
  } 
  
  itstatus = tmpsr & FSMC_IT;
  
  itenable = tmpsr & (FSMC_IT >> 3);
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8002dbe:	ea13 02d1 	ands.w	r2, r3, r1, lsr #3
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2000      	moveq	r0, #0
 8002dc6:	2001      	movne	r0, #1
 8002dc8:	420b      	tst	r3, r1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus; 
}
 8002dca:	bf0c      	ite	eq
 8002dcc:	2000      	moveq	r0, #0
 8002dce:	f000 0001 	andne.w	r0, r0, #1
 8002dd2:	4770      	bx	lr
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    tmpsr = FSMC_Bank2->SR2;
 8002dd4:	2360      	movs	r3, #96	; 0x60
 8002dd6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	e7ef      	b.n	8002dbe <FSMC_GetITStatus+0x12>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
  {
    tmpsr = FSMC_Bank3->SR3;
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	e7ea      	b.n	8002dbe <FSMC_GetITStatus+0x12>

08002de8 <FSMC_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8002de8:	2810      	cmp	r0, #16
 8002dea:	d00a      	beq.n	8002e02 <FSMC_ClearITPendingBit+0x1a>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8002dec:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002df0:	d00f      	beq.n	8002e12 <FSMC_ClearITPendingBit+0x2a>
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8002df2:	23a0      	movs	r3, #160	; 0xa0
 8002df4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 8002dfe:	6059      	str	r1, [r3, #4]
 8002e00:	4770      	bx	lr
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 8002e02:	2360      	movs	r3, #96	; 0x60
 8002e04:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 8002e0e:	6059      	str	r1, [r3, #4]
 8002e10:	4770      	bx	lr
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	ea22 01d1 	bic.w	r1, r2, r1, lsr #3
 8002e1e:	6059      	str	r1, [r3, #4]
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop

08002e24 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8002e24:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8002e26:	2300      	movs	r3, #0
 8002e28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e2c:	4298      	cmp	r0, r3
 8002e2e:	d03c      	beq.n	8002eaa <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8002e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e38:	4298      	cmp	r0, r3
 8002e3a:	d040      	beq.n	8002ebe <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8002e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e44:	4298      	cmp	r0, r3
 8002e46:	d044      	beq.n	8002ed2 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8002e48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e50:	4298      	cmp	r0, r3
 8002e52:	d048      	beq.n	8002ee6 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8002e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e5c:	4298      	cmp	r0, r3
 8002e5e:	d04c      	beq.n	8002efa <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8002e60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e68:	4298      	cmp	r0, r3
 8002e6a:	d050      	beq.n	8002f0e <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8002e6c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e74:	4298      	cmp	r0, r3
 8002e76:	d054      	beq.n	8002f22 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8002e78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e80:	4298      	cmp	r0, r3
 8002e82:	d058      	beq.n	8002f36 <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 8002e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002e8c:	4298      	cmp	r0, r3
 8002e8e:	d000      	beq.n	8002e92 <GPIO_DeInit+0x6e>
 8002e90:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8002e92:	2101      	movs	r1, #1
 8002e94:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e98:	f001 f868 	bl	8003f6c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8002e9c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ea0:	2100      	movs	r1, #0
    }
  }
}
 8002ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8002ea6:	f001 b861 	b.w	8003f6c <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002eaa:	2001      	movs	r0, #1
 8002eac:	4601      	mov	r1, r0
 8002eae:	f001 f85d 	bl	8003f6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8002eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8002eba:	f001 b857 	b.w	8003f6c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002ebe:	2002      	movs	r0, #2
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	f001 f853 	bl	8003f6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8002ec6:	2002      	movs	r0, #2
 8002ec8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8002eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8002ece:	f001 b84d 	b.w	8003f6c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002ed2:	2004      	movs	r0, #4
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	f001 f849 	bl	8003f6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8002eda:	2004      	movs	r0, #4
 8002edc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8002ede:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8002ee2:	f001 b843 	b.w	8003f6c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002ee6:	2008      	movs	r0, #8
 8002ee8:	2101      	movs	r1, #1
 8002eea:	f001 f83f 	bl	8003f6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8002eee:	2008      	movs	r0, #8
 8002ef0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8002ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8002ef6:	f001 b839 	b.w	8003f6c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002efa:	2010      	movs	r0, #16
 8002efc:	2101      	movs	r1, #1
 8002efe:	f001 f835 	bl	8003f6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8002f02:	2010      	movs	r0, #16
 8002f04:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8002f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8002f0a:	f001 b82f 	b.w	8003f6c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8002f0e:	2020      	movs	r0, #32
 8002f10:	2101      	movs	r1, #1
 8002f12:	f001 f82b 	bl	8003f6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8002f16:	2020      	movs	r0, #32
 8002f18:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8002f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8002f1e:	f001 b825 	b.w	8003f6c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8002f22:	2040      	movs	r0, #64	; 0x40
 8002f24:	2101      	movs	r1, #1
 8002f26:	f001 f821 	bl	8003f6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8002f2a:	2040      	movs	r0, #64	; 0x40
 8002f2c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8002f2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8002f32:	f001 b81b 	b.w	8003f6c <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8002f36:	2080      	movs	r0, #128	; 0x80
 8002f38:	2101      	movs	r1, #1
 8002f3a:	f001 f817 	bl	8003f6c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8002f3e:	2080      	movs	r0, #128	; 0x80
 8002f40:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8002f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8002f46:	f001 b811 	b.w	8003f6c <RCC_AHB1PeriphResetCmd>
 8002f4a:	bf00      	nop

08002f4c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002f52:	680a      	ldr	r2, [r1, #0]
 8002f54:	461c      	mov	r4, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002f56:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002f58:	f04f 0803 	mov.w	r8, #3
 8002f5c:	e003      	b.n	8002f66 <GPIO_Init+0x1a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002f5e:	3401      	adds	r4, #1
 8002f60:	3302      	adds	r3, #2
 8002f62:	2c10      	cmp	r4, #16
 8002f64:	d02b      	beq.n	8002fbe <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002f66:	fa17 f504 	lsls.w	r5, r7, r4
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002f6a:	ea05 0602 	and.w	r6, r5, r2

    if (currentpin == pos)
 8002f6e:	42ae      	cmp	r6, r5
 8002f70:	d1f5      	bne.n	8002f5e <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002f72:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002f76:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002f7a:	fa08 f503 	lsl.w	r5, r8, r3
 8002f7e:	43ed      	mvns	r5, r5
 8002f80:	ea05 0909 	and.w	r9, r5, r9
 8002f84:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002f88:	f8d0 9000 	ldr.w	r9, [r0]
 8002f8c:	fa0c fa03 	lsl.w	sl, ip, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002f90:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002f94:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002f98:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002f9c:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002fa0:	d910      	bls.n	8002fc4 <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002fa2:	68c6      	ldr	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002fa4:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002fa8:	4035      	ands	r5, r6
 8002faa:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002fac:	68c6      	ldr	r6, [r0, #12]
 8002fae:	fa0c f503 	lsl.w	r5, ip, r3
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002fb2:	3401      	adds	r4, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002fb4:	4335      	orrs	r5, r6
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002fb6:	3302      	adds	r3, #2
 8002fb8:	2c10      	cmp	r4, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002fba:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002fbc:	d1d3      	bne.n	8002f66 <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8002fbe:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8002fc2:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002fc4:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002fc8:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002fcc:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002fd0:	ea05 0a0a 	and.w	sl, r5, sl
 8002fd4:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002fd8:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002fdc:	fa09 f903 	lsl.w	r9, r9, r3
 8002fe0:	ea49 090a 	orr.w	r9, r9, sl
 8002fe4:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002fe8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8002fec:	ea29 0606 	bic.w	r6, r9, r6
 8002ff0:	6046      	str	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002ff2:	6846      	ldr	r6, [r0, #4]
 8002ff4:	fa0c fc04 	lsl.w	ip, ip, r4
 8002ff8:	fa1f fc8c 	uxth.w	ip, ip
 8002ffc:	ea4c 0606 	orr.w	r6, ip, r6
 8003000:	6046      	str	r6, [r0, #4]
 8003002:	e7ce      	b.n	8002fa2 <GPIO_Init+0x56>

08003004 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8003004:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8003006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800300a:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800300c:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800300e:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8003010:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003012:	71c3      	strb	r3, [r0, #7]
}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop

08003018 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003018:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800301a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8003020:	9b01      	ldr	r3, [sp, #4]
 8003022:	430b      	orrs	r3, r1
 8003024:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8003026:	9b01      	ldr	r3, [sp, #4]
 8003028:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800302a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800302c:	9b01      	ldr	r3, [sp, #4]
 800302e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003030:	69c3      	ldr	r3, [r0, #28]
 8003032:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8003034:	69c3      	ldr	r3, [r0, #28]
 8003036:	9301      	str	r3, [sp, #4]
}
 8003038:	b002      	add	sp, #8
 800303a:	4770      	bx	lr

0800303c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800303c:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 800303e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8003040:	bf0c      	ite	eq
 8003042:	2000      	moveq	r0, #0
 8003044:	2001      	movne	r0, #1
 8003046:	4770      	bx	lr

08003048 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8003048:	6900      	ldr	r0, [r0, #16]
}
 800304a:	b280      	uxth	r0, r0
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop

08003050 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8003050:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 8003052:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8003054:	bf0c      	ite	eq
 8003056:	2000      	moveq	r0, #0
 8003058:	2001      	movne	r0, #1
 800305a:	4770      	bx	lr

0800305c <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800305c:	6940      	ldr	r0, [r0, #20]
}
 800305e:	b280      	uxth	r0, r0
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop

08003064 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8003064:	8301      	strh	r1, [r0, #24]
}
 8003066:	4770      	bx	lr

08003068 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8003068:	8341      	strh	r1, [r0, #26]
}
 800306a:	4770      	bx	lr

0800306c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800306c:	b90a      	cbnz	r2, 8003072 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800306e:	8341      	strh	r1, [r0, #26]
 8003070:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8003072:	8301      	strh	r1, [r0, #24]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop

08003078 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8003078:	6141      	str	r1, [r0, #20]
}
 800307a:	4770      	bx	lr

0800307c <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800307c:	6943      	ldr	r3, [r0, #20]
 800307e:	404b      	eors	r3, r1
 8003080:	6143      	str	r3, [r0, #20]
}
 8003082:	4770      	bx	lr

08003084 <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003084:	08cb      	lsrs	r3, r1, #3
 8003086:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003088:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800308c:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800308e:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003090:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8003094:	240f      	movs	r4, #15
 8003096:	408c      	lsls	r4, r1
 8003098:	ea25 0404 	bic.w	r4, r5, r4
 800309c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80030a0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80030a4:	fa12 f101 	lsls.w	r1, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80030a8:	430c      	orrs	r4, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80030aa:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 80030ae:	bc30      	pop	{r4, r5}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop

080030b4 <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 80030b4:	b508      	push	{r3, lr}
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 80030b6:	2020      	movs	r0, #32
 80030b8:	2101      	movs	r1, #1
 80030ba:	f000 ff65 	bl	8003f88 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 80030be:	2020      	movs	r0, #32
 80030c0:	2100      	movs	r1, #0
}
 80030c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void HASH_DeInit(void)
{
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 80030c6:	f000 bf5f 	b.w	8003f88 <RCC_AHB2PeriphResetCmd>
 80030ca:	bf00      	nop

080030cc <HASH_Init>:
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 80030cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d0:	f2c5 0306 	movt	r3, #20486	; 0x5006
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 80030d4:	b430      	push	{r4, r5}
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030dc:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 80030de:	e890 0016 	ldmia.w	r0, {r1, r2, r4}
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 80030e2:	681d      	ldr	r5, [r3, #0]
 80030e4:	4329      	orrs	r1, r5
               HASH_InitStruct->HASH_DataType | \
 80030e6:	4321      	orrs	r1, r4
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 80030e8:	4311      	orrs	r1, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 80030ea:	2a40      	cmp	r2, #64	; 0x40
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 80030ec:	6019      	str	r1, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 80030ee:	d107      	bne.n	8003100 <HASH_Init+0x34>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030f6:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	68c2      	ldr	r2, [r0, #12]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8003100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003104:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f042 0204 	orr.w	r2, r2, #4
 800310e:	601a      	str	r2, [r3, #0]
}
 8003110:	bc30      	pop	{r4, r5}
 8003112:	4770      	bx	lr

08003114 <HASH_StructInit>:
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8003114:	2300      	movs	r3, #0
 8003116:	6003      	str	r3, [r0, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 8003118:	6043      	str	r3, [r0, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 800311a:	6083      	str	r3, [r0, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800311c:	60c3      	str	r3, [r0, #12]
}
 800311e:	4770      	bx	lr

08003120 <HASH_Reset>:
  * @retval None
  */
void HASH_Reset(void)
{
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 8003120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003124:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	f042 0204 	orr.w	r2, r2, #4
 800312e:	601a      	str	r2, [r3, #0]
}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <HASH_SetLastWordValidBitsNbr>:
{
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 8003134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003138:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	f022 021f 	bic.w	r2, r2, #31
 8003142:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	4302      	orrs	r2, r0
 8003148:	609a      	str	r2, [r3, #8]
}
 800314a:	4770      	bx	lr

0800314c <HASH_DataIn>:
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 800314c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003150:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003154:	6058      	str	r0, [r3, #4]
}
 8003156:	4770      	bx	lr

08003158 <HASH_GetInFIFOWordsNbr>:
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 8003158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800315c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003160:	6818      	ldr	r0, [r3, #0]
}
 8003162:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8003166:	4770      	bx	lr

08003168 <HASH_GetDigest>:
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8003168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800316c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	6002      	str	r2, [r0, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	6042      	str	r2, [r0, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	6082      	str	r2, [r0, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	60c2      	str	r2, [r0, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	6103      	str	r3, [r0, #16]
}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop

08003188 <HASH_StartDigest>:
  * @retval None
  */
void HASH_StartDigest(void)
{
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 8003188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800318c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop

0800319c <HASH_SaveContext>:
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
  uint8_t i = 0;
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 800319c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	6002      	str	r2, [r0, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	6042      	str	r2, [r0, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	f840 1f08 	str.w	r1, [r0, #8]!
  *         full and no processing is ongoing).   
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
 80031b2:	2200      	movs	r2, #0
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 80031b4:	f102 013e 	add.w	r1, r2, #62	; 0x3e
 80031b8:	3201      	adds	r2, #1
 80031ba:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 80031be:	2a33      	cmp	r2, #51	; 0x33
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 80031c0:	f840 1f04 	str.w	r1, [r0, #4]!
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 80031c4:	d1f6      	bne.n	80031b4 <HASH_SaveContext+0x18>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 80031c6:	4770      	bx	lr

080031c8 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 80031c8:	b410      	push	{r4}
  uint8_t i = 0;
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 80031ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80031ce:	6803      	ldr	r3, [r0, #0]
 80031d0:	f2c5 0406 	movt	r4, #20486	; 0x5006
 80031d4:	6223      	str	r3, [r4, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 80031d6:	6843      	ldr	r3, [r0, #4]
 80031d8:	60a3      	str	r3, [r4, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 80031da:	f850 3f08 	ldr.w	r3, [r0, #8]!
 80031de:	6023      	str	r3, [r4, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	f043 0304 	orr.w	r3, r3, #4
 80031e6:	6023      	str	r3, [r4, #0]
  *         point where it has been interrupted.  
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
 80031e8:	2300      	movs	r3, #0
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 80031ea:	f103 023e 	add.w	r2, r3, #62	; 0x3e
 80031ee:	f850 1f04 	ldr.w	r1, [r0, #4]!
 80031f2:	3301      	adds	r3, #1
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 80031f4:	2b33      	cmp	r3, #51	; 0x33
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 80031f6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 80031fa:	d1f6      	bne.n	80031ea <HASH_RestoreContext+0x22>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 80031fc:	bc10      	pop	{r4}
 80031fe:	4770      	bx	lr

08003200 <HASH_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8003200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003204:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003208:	681a      	ldr	r2, [r3, #0]
void HASH_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800320a:	b918      	cbnz	r0, 8003214 <HASH_DMACmd+0x14>
    HASH->CR |= HASH_CR_DMAE;
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 800320c:	f022 0208 	bic.w	r2, r2, #8
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8003214:	f042 0208 	orr.w	r2, r2, #8
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	4770      	bx	lr

0800321c <HASH_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 800321c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003220:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003224:	6a1a      	ldr	r2, [r3, #32]
{
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003226:	b929      	cbnz	r1, 8003234 <HASH_ITConfig+0x18>
    HASH->IMR |= HASH_IT;
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 8003228:	ea22 0000 	bic.w	r0, r2, r0
 800322c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 8003230:	6218      	str	r0, [r3, #32]
 8003232:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8003234:	4310      	orrs	r0, r2
 8003236:	6218      	str	r0, [r3, #32]
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <HASH_GetFlagStatus>:
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
  {
    tempreg = HASH->CR;
 800323c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003240:	f2c5 0306 	movt	r3, #20486	; 0x5006

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 8003244:	04c2      	lsls	r2, r0, #19
  {
    tempreg = HASH->CR;
 8003246:	bf4c      	ite	mi
 8003248:	681b      	ldrmi	r3, [r3, #0]
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 800324a:	6a5b      	ldrpl	r3, [r3, #36]	; 0x24

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
  {
    /* HASH is set */
    bitstatus = SET;
 800324c:	4203      	tst	r3, r0
    bitstatus = RESET;
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
}
 800324e:	bf0c      	ite	eq
 8003250:	2000      	moveq	r0, #0
 8003252:	2001      	movne	r0, #1
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop

08003258 <HASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 8003258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800325c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003260:	43c0      	mvns	r0, r0
 8003262:	6258      	str	r0, [r3, #36]	; 0x24
}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop

08003268 <HASH_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 8003268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800326c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003270:	6a5a      	ldr	r2, [r3, #36]	; 0x24

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	4013      	ands	r3, r2
  {
    /* HASH_IT is set */
    bitstatus = SET;
 8003276:	4203      	tst	r3, r0
    /* HASH_IT is reset */
    bitstatus = RESET;
  }
  /* Return the HASH_IT status */
  return bitstatus;
}
 8003278:	bf0c      	ite	eq
 800327a:	2000      	moveq	r0, #0
 800327c:	2001      	movne	r0, #1
 800327e:	4770      	bx	lr

08003280 <HASH_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 8003280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003284:	43c0      	mvns	r0, r0
 8003286:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800328a:	b2c0      	uxtb	r0, r0
 800328c:	6258      	str	r0, [r3, #36]	; 0x24
}
 800328e:	4770      	bx	lr

08003290 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8003290:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8003292:	f001 0303 	and.w	r3, r1, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8003296:	b08d      	sub	sp, #52	; 0x34
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8003298:	2600      	movs	r6, #0
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800329a:	00db      	lsls	r3, r3, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 800329c:	460c      	mov	r4, r1
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800329e:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 80032a2:	4605      	mov	r5, r0
 80032a4:	4617      	mov	r7, r2
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 80032a6:	960a      	str	r6, [sp, #40]	; 0x28
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80032a8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

  /* HASH peripheral initialization */
  HASH_DeInit();
 80032ac:	f7ff ff02 	bl	80030b4 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 80032b0:	2380      	movs	r3, #128	; 0x80
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  HASH_Init(&MD5_HASH_InitStructure);
 80032b2:	a806      	add	r0, sp, #24

  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 80032b4:	9306      	str	r3, [sp, #24]
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80032b6:	2320      	movs	r3, #32
  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 80032b8:	9607      	str	r6, [sp, #28]
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 80032ba:	9308      	str	r3, [sp, #32]
  HASH_Init(&MD5_HASH_InitStructure);
 80032bc:	f7ff ff06 	bl	80030cc <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80032c0:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80032c4:	b280      	uxth	r0, r0
 80032c6:	f7ff ff35 	bl	8003134 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80032ca:	b12c      	cbz	r4, 80032d8 <HASH_MD5+0x48>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80032cc:	59a8      	ldr	r0, [r5, r6]

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80032ce:	3604      	adds	r6, #4
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80032d0:	f7ff ff3c 	bl	800314c <HASH_DataIn>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80032d4:	42b4      	cmp	r4, r6
 80032d6:	d8f9      	bhi.n	80032cc <HASH_MD5+0x3c>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 80032d8:	f7ff ff56 	bl	8003188 <HASH_StartDigest>
 80032dc:	e000      	b.n	80032e0 <HASH_MD5+0x50>
  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
    counter++;
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80032de:	b168      	cbz	r0, 80032fc <HASH_MD5+0x6c>
  HASH_StartDigest();

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80032e0:	2008      	movs	r0, #8
 80032e2:	f7ff ffab 	bl	800323c <HASH_GetFlagStatus>
    counter++;
 80032e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032e8:	3301      	adds	r3, #1
 80032ea:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80032ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f2:	d1f4      	bne.n	80032de <HASH_MD5+0x4e>

  if (busystatus != RESET)
 80032f4:	b110      	cbz	r0, 80032fc <HASH_MD5+0x6c>
  {
     status = ERROR;
 80032f6:	2000      	movs	r0, #0
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
  }
  return status; 
}
 80032f8:	b00d      	add	sp, #52	; 0x34
 80032fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     status = ERROR;
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 80032fc:	a801      	add	r0, sp, #4
 80032fe:	f7ff ff33 	bl	8003168 <HASH_GetDigest>
 8003302:	9b01      	ldr	r3, [sp, #4]
 8003304:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	9b02      	ldr	r3, [sp, #8]
 800330a:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	9b03      	ldr	r3, [sp, #12]
 8003310:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8003312:	60bb      	str	r3, [r7, #8]
 8003314:	9b04      	ldr	r3, [sp, #16]
 8003316:	ba1b      	rev	r3, r3
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8003318:	2001      	movs	r0, #1
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e7ec      	b.n	80032f8 <HASH_MD5+0x68>
 800331e:	bf00      	nop

08003320 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8003320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003324:	460c      	mov	r4, r1
 8003326:	b08d      	sub	sp, #52	; 0x34
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8003328:	f003 0103 	and.w	r1, r3, #3
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800332c:	461e      	mov	r6, r3

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800332e:	f004 0303 	and.w	r3, r4, #3
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8003332:	2700      	movs	r7, #0

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8003334:	00db      	lsls	r3, r3, #3
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8003336:	00c9      	lsls	r1, r1, #3
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8003338:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800333c:	4605      	mov	r5, r0
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
 800333e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8003342:	4690      	mov	r8, r2
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8003344:	970a      	str	r7, [sp, #40]	; 0x28
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8003346:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800334a:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800334e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 8003352:	f7ff feaf 	bl	80030b4 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	9306      	str	r3, [sp, #24]
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800335a:	2340      	movs	r3, #64	; 0x40
 800335c:	9307      	str	r3, [sp, #28]
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800335e:	2320      	movs	r3, #32
  if(Keylen > 64)
 8003360:	2c40      	cmp	r4, #64	; 0x40
  HASH_DeInit();

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8003362:	9308      	str	r3, [sp, #32]
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8003364:	a806      	add	r0, sp, #24

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
 8003366:	d923      	bls.n	80033b0 <HMAC_MD5+0x90>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8003368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800336c:	9309      	str	r3, [sp, #36]	; 0x24
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&MD5_HASH_InitStructure);
 800336e:	f7ff fead 	bl	80030cc <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8003372:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8003376:	b280      	uxth	r0, r0
 8003378:	f7ff fedc 	bl	8003134 <HASH_SetLastWordValidBitsNbr>
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800337c:	2700      	movs	r7, #0
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800337e:	59e8      	ldr	r0, [r5, r7]

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8003380:	3704      	adds	r7, #4
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8003382:	f7ff fee3 	bl	800314c <HASH_DataIn>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8003386:	42bc      	cmp	r4, r7
 8003388:	d8f9      	bhi.n	800337e <HMAC_MD5+0x5e>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 800338a:	f7ff fefd 	bl	8003188 <HASH_StartDigest>
 800338e:	e000      	b.n	8003392 <HMAC_MD5+0x72>
  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
    counter++;
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8003390:	b1c8      	cbz	r0, 80033c6 <HMAC_MD5+0xa6>
  HASH_StartDigest();

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8003392:	2008      	movs	r0, #8
 8003394:	f7ff ff52 	bl	800323c <HASH_GetFlagStatus>
    counter++;
 8003398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800339a:	3301      	adds	r3, #1
 800339c:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800339e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d1f4      	bne.n	8003390 <HMAC_MD5+0x70>

  if (busystatus != RESET)
 80033a6:	b170      	cbz	r0, 80033c6 <HMAC_MD5+0xa6>
          counter++;
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));

      if (busystatus != RESET)
      {
         status = ERROR;
 80033a8:	2000      	movs	r0, #0
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
      }
    }
  }
  return status;  
}
 80033aa:	b00d      	add	sp, #52	; 0x34
 80033ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 80033b0:	9709      	str	r7, [sp, #36]	; 0x24
  }
  HASH_Init(&MD5_HASH_InitStructure);
 80033b2:	f7ff fe8b 	bl	80030cc <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80033b6:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80033ba:	b280      	uxth	r0, r0
 80033bc:	f7ff feba 	bl	8003134 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80033c0:	2c00      	cmp	r4, #0
 80033c2:	d1db      	bne.n	800337c <HMAC_MD5+0x5c>
 80033c4:	e7e1      	b.n	800338a <HMAC_MD5+0x6a>
     status = ERROR;
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80033c6:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 80033ca:	b280      	uxth	r0, r0
 80033cc:	f7ff feb2 	bl	8003134 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80033d0:	b13e      	cbz	r6, 80033e2 <HMAC_MD5+0xc2>
 80033d2:	2700      	movs	r7, #0
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 80033d4:	f858 0007 	ldr.w	r0, [r8, r7]
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80033d8:	3704      	adds	r7, #4
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 80033da:	f7ff feb7 	bl	800314c <HASH_DataIn>
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80033de:	42be      	cmp	r6, r7
 80033e0:	d8f8      	bhi.n	80033d4 <HMAC_MD5+0xb4>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 80033e2:	f7ff fed1 	bl	8003188 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	930a      	str	r3, [sp, #40]	; 0x28
 80033ea:	e000      	b.n	80033ee <HMAC_MD5+0xce>
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
       counter++;
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80033ec:	b158      	cbz	r0, 8003406 <HMAC_MD5+0xe6>

    /* wait until the Busy flag is RESET */
    counter =0;
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80033ee:	2008      	movs	r0, #8
 80033f0:	f7ff ff24 	bl	800323c <HASH_GetFlagStatus>
       counter++;
 80033f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033f6:	3301      	adds	r3, #1
 80033f8:	930a      	str	r3, [sp, #40]	; 0x28
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 80033fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d1f4      	bne.n	80033ec <HMAC_MD5+0xcc>

    if (busystatus != RESET)
 8003402:	2800      	cmp	r0, #0
 8003404:	d1d0      	bne.n	80033a8 <HMAC_MD5+0x88>
      status = ERROR;
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8003406:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800340a:	b280      	uxth	r0, r0
 800340c:	f7ff fe92 	bl	8003134 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8003410:	b134      	cbz	r4, 8003420 <HMAC_MD5+0x100>
 8003412:	2600      	movs	r6, #0
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8003414:	59a8      	ldr	r0, [r5, r6]
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8003416:	3604      	adds	r6, #4
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8003418:	f7ff fe98 	bl	800314c <HASH_DataIn>
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800341c:	42b4      	cmp	r4, r6
 800341e:	d8f9      	bhi.n	8003414 <HMAC_MD5+0xf4>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 8003420:	f7ff feb2 	bl	8003188 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 8003424:	2300      	movs	r3, #0
 8003426:	930a      	str	r3, [sp, #40]	; 0x28
 8003428:	e000      	b.n	800342c <HMAC_MD5+0x10c>
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
          counter++;
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800342a:	b158      	cbz	r0, 8003444 <HMAC_MD5+0x124>

       /* wait until the Busy flag is RESET */
       counter =0;
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800342c:	2008      	movs	r0, #8
 800342e:	f7ff ff05 	bl	800323c <HASH_GetFlagStatus>
          counter++;
 8003432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003434:	3301      	adds	r3, #1
 8003436:	930a      	str	r3, [sp, #40]	; 0x28
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8003438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343e:	d1f4      	bne.n	800342a <HMAC_MD5+0x10a>

      if (busystatus != RESET)
 8003440:	2800      	cmp	r0, #0
 8003442:	d1b1      	bne.n	80033a8 <HMAC_MD5+0x88>
         status = ERROR;
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 8003444:	a801      	add	r0, sp, #4
 8003446:	f7ff fe8f 	bl	8003168 <HASH_GetDigest>
 800344a:	9b01      	ldr	r3, [sp, #4]
 800344c:	ba1b      	rev	r3, r3
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800344e:	f8c9 3000 	str.w	r3, [r9]
 8003452:	9b02      	ldr	r3, [sp, #8]
 8003454:	ba1b      	rev	r3, r3
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8003456:	f8c9 3004 	str.w	r3, [r9, #4]
 800345a:	9b03      	ldr	r3, [sp, #12]
 800345c:	ba1b      	rev	r3, r3
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800345e:	f8c9 3008 	str.w	r3, [r9, #8]
 8003462:	9b04      	ldr	r3, [sp, #16]
 8003464:	ba1b      	rev	r3, r3
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8003466:	2001      	movs	r0, #1
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
         outputaddr+=4;
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8003468:	f8c9 300c 	str.w	r3, [r9, #12]
 800346c:	e79d      	b.n	80033aa <HMAC_MD5+0x8a>
 800346e:	bf00      	nop

08003470 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8003472:	f001 0303 	and.w	r3, r1, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8003476:	b08d      	sub	sp, #52	; 0x34
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8003478:	2600      	movs	r6, #0
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800347a:	00db      	lsls	r3, r3, #3
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 800347c:	460c      	mov	r4, r1
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800347e:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8003482:	4605      	mov	r5, r0
 8003484:	4617      	mov	r7, r2
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8003486:	960a      	str	r6, [sp, #40]	; 0x28
  ErrorStatus status = SUCCESS;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8003488:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

  /* HASH peripheral initialization */
  HASH_DeInit();
 800348c:	f7ff fe12 	bl	80030b4 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  HASH_Init(&SHA1_HASH_InitStructure);
 8003490:	a806      	add	r0, sp, #24
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8003492:	2320      	movs	r3, #32

  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8003494:	9606      	str	r6, [sp, #24]
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8003496:	9607      	str	r6, [sp, #28]
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8003498:	9308      	str	r3, [sp, #32]
  HASH_Init(&SHA1_HASH_InitStructure);
 800349a:	f7ff fe17 	bl	80030cc <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800349e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80034a2:	b280      	uxth	r0, r0
 80034a4:	f7ff fe46 	bl	8003134 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80034a8:	b12c      	cbz	r4, 80034b6 <HASH_SHA1+0x46>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80034aa:	59a8      	ldr	r0, [r5, r6]

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80034ac:	3604      	adds	r6, #4
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80034ae:	f7ff fe4d 	bl	800314c <HASH_DataIn>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80034b2:	42b4      	cmp	r4, r6
 80034b4:	d8f9      	bhi.n	80034aa <HASH_SHA1+0x3a>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 80034b6:	f7ff fe67 	bl	8003188 <HASH_StartDigest>
 80034ba:	e000      	b.n	80034be <HASH_SHA1+0x4e>
  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
    counter++;
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80034bc:	b168      	cbz	r0, 80034da <HASH_SHA1+0x6a>
  HASH_StartDigest();

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80034be:	2008      	movs	r0, #8
 80034c0:	f7ff febc 	bl	800323c <HASH_GetFlagStatus>
    counter++;
 80034c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034c6:	3301      	adds	r3, #1
 80034c8:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80034ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d1f4      	bne.n	80034bc <HASH_SHA1+0x4c>

  if (busystatus != RESET)
 80034d2:	b110      	cbz	r0, 80034da <HASH_SHA1+0x6a>
  {
     status = ERROR;
 80034d4:	2000      	movs	r0, #0
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
  }
  return status;
}
 80034d6:	b00d      	add	sp, #52	; 0x34
 80034d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     status = ERROR;
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 80034da:	a801      	add	r0, sp, #4
 80034dc:	f7ff fe44 	bl	8003168 <HASH_GetDigest>
 80034e0:	9b01      	ldr	r3, [sp, #4]
 80034e2:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	9b02      	ldr	r3, [sp, #8]
 80034e8:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	9b03      	ldr	r3, [sp, #12]
 80034ee:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	9b04      	ldr	r3, [sp, #16]
 80034f4:	ba1b      	rev	r3, r3
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	9b05      	ldr	r3, [sp, #20]
 80034fa:	ba1b      	rev	r3, r3
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 80034fc:	2001      	movs	r0, #1
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
    outputaddr+=4;
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	e7e9      	b.n	80034d6 <HASH_SHA1+0x66>
 8003502:	bf00      	nop

08003504 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8003504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003508:	460c      	mov	r4, r1
 800350a:	b08d      	sub	sp, #52	; 0x34
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800350c:	f003 0103 	and.w	r1, r3, #3
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8003510:	461e      	mov	r6, r3

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8003512:	f004 0303 	and.w	r3, r4, #3
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8003516:	2700      	movs	r7, #0

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8003518:	00db      	lsls	r3, r3, #3
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800351a:	00c9      	lsls	r1, r1, #3
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800351c:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8003520:	4605      	mov	r5, r0
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
 8003522:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 8003526:	4690      	mov	r8, r2
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
 8003528:	970a      	str	r7, [sp, #40]	; 0x28
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800352a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t keyaddr    = (uint32_t)Key;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800352e:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8003532:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e

  /* HASH peripheral initialization */
  HASH_DeInit();
 8003536:	f7ff fdbd 	bl	80030b4 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800353a:	2340      	movs	r3, #64	; 0x40
 800353c:	9307      	str	r3, [sp, #28]
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800353e:	2320      	movs	r3, #32
  if(Keylen > 64)
 8003540:	2c40      	cmp	r4, #64	; 0x40

  /* HASH peripheral initialization */
  HASH_DeInit();

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8003542:	9706      	str	r7, [sp, #24]
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8003544:	9308      	str	r3, [sp, #32]
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8003546:	a806      	add	r0, sp, #24

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  if(Keylen > 64)
 8003548:	d923      	bls.n	8003592 <HMAC_SHA1+0x8e>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800354a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800354e:	9309      	str	r3, [sp, #36]	; 0x24
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8003550:	f7ff fdbc 	bl	80030cc <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8003554:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8003558:	b280      	uxth	r0, r0
 800355a:	f7ff fdeb 	bl	8003134 <HASH_SetLastWordValidBitsNbr>
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800355e:	2700      	movs	r7, #0
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8003560:	59e8      	ldr	r0, [r5, r7]

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8003562:	3704      	adds	r7, #4
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8003564:	f7ff fdf2 	bl	800314c <HASH_DataIn>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8003568:	42bc      	cmp	r4, r7
 800356a:	d8f9      	bhi.n	8003560 <HMAC_SHA1+0x5c>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800356c:	f7ff fe0c 	bl	8003188 <HASH_StartDigest>
 8003570:	e000      	b.n	8003574 <HMAC_SHA1+0x70>
  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
    counter++;
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8003572:	b1c8      	cbz	r0, 80035a8 <HMAC_SHA1+0xa4>
  HASH_StartDigest();

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8003574:	2008      	movs	r0, #8
 8003576:	f7ff fe61 	bl	800323c <HASH_GetFlagStatus>
    counter++;
 800357a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800357c:	3301      	adds	r3, #1
 800357e:	930a      	str	r3, [sp, #40]	; 0x28
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8003580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003586:	d1f4      	bne.n	8003572 <HMAC_SHA1+0x6e>

  if (busystatus != RESET)
 8003588:	b170      	cbz	r0, 80035a8 <HMAC_SHA1+0xa4>
        counter++;
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));

      if (busystatus != RESET)
      {
        status = ERROR;
 800358a:	2000      	movs	r0, #0
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
      }
    }  
  }
  return status;  
}
 800358c:	b00d      	add	sp, #52	; 0x34
 800358e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8003592:	9709      	str	r7, [sp, #36]	; 0x24
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8003594:	f7ff fd9a 	bl	80030cc <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8003598:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 800359c:	b280      	uxth	r0, r0
 800359e:	f7ff fdc9 	bl	8003134 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 80035a2:	2c00      	cmp	r4, #0
 80035a4:	d1db      	bne.n	800355e <HMAC_SHA1+0x5a>
 80035a6:	e7e1      	b.n	800356c <HMAC_SHA1+0x68>
     status = ERROR;
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80035a8:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 80035ac:	b280      	uxth	r0, r0
 80035ae:	f7ff fdc1 	bl	8003134 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80035b2:	b13e      	cbz	r6, 80035c4 <HMAC_SHA1+0xc0>
 80035b4:	2700      	movs	r7, #0
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 80035b6:	f858 0007 	ldr.w	r0, [r8, r7]
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80035ba:	3704      	adds	r7, #4
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 80035bc:	f7ff fdc6 	bl	800314c <HASH_DataIn>
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80035c0:	42be      	cmp	r6, r7
 80035c2:	d8f8      	bhi.n	80035b6 <HMAC_SHA1+0xb2>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 80035c4:	f7ff fde0 	bl	8003188 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	930a      	str	r3, [sp, #40]	; 0x28
 80035cc:	e000      	b.n	80035d0 <HMAC_SHA1+0xcc>
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
      counter++;
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80035ce:	b158      	cbz	r0, 80035e8 <HMAC_SHA1+0xe4>

    /* wait until the Busy flag is RESET */
    counter =0;
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80035d0:	2008      	movs	r0, #8
 80035d2:	f7ff fe33 	bl	800323c <HASH_GetFlagStatus>
      counter++;
 80035d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035d8:	3301      	adds	r3, #1
 80035da:	930a      	str	r3, [sp, #40]	; 0x28
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80035dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e2:	d1f4      	bne.n	80035ce <HMAC_SHA1+0xca>

    if (busystatus != RESET)
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d1d0      	bne.n	800358a <HMAC_SHA1+0x86>
      status = ERROR;
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 80035e8:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 80035ec:	b280      	uxth	r0, r0
 80035ee:	f7ff fda1 	bl	8003134 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 80035f2:	b134      	cbz	r4, 8003602 <HMAC_SHA1+0xfe>
 80035f4:	2600      	movs	r6, #0
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 80035f6:	59a8      	ldr	r0, [r5, r6]
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 80035f8:	3604      	adds	r6, #4
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 80035fa:	f7ff fda7 	bl	800314c <HASH_DataIn>
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 80035fe:	42b4      	cmp	r4, r6
 8003600:	d8f9      	bhi.n	80035f6 <HMAC_SHA1+0xf2>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 8003602:	f7ff fdc1 	bl	8003188 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 8003606:	2300      	movs	r3, #0
 8003608:	930a      	str	r3, [sp, #40]	; 0x28
 800360a:	e000      	b.n	800360e <HMAC_SHA1+0x10a>
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
        counter++;
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800360c:	b158      	cbz	r0, 8003626 <HMAC_SHA1+0x122>

      /* wait until the Busy flag is RESET */
      counter =0;
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800360e:	2008      	movs	r0, #8
 8003610:	f7ff fe14 	bl	800323c <HASH_GetFlagStatus>
        counter++;
 8003614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003616:	3301      	adds	r3, #1
 8003618:	930a      	str	r3, [sp, #40]	; 0x28
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800361a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003620:	d1f4      	bne.n	800360c <HMAC_SHA1+0x108>

      if (busystatus != RESET)
 8003622:	2800      	cmp	r0, #0
 8003624:	d1b1      	bne.n	800358a <HMAC_SHA1+0x86>
        status = ERROR;
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 8003626:	a801      	add	r0, sp, #4
 8003628:	f7ff fd9e 	bl	8003168 <HASH_GetDigest>
 800362c:	9b01      	ldr	r3, [sp, #4]
 800362e:	ba1b      	rev	r3, r3
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8003630:	f8c9 3000 	str.w	r3, [r9]
 8003634:	9b02      	ldr	r3, [sp, #8]
 8003636:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 8003638:	f8c9 3004 	str.w	r3, [r9, #4]
 800363c:	9b03      	ldr	r3, [sp, #12]
 800363e:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8003640:	f8c9 3008 	str.w	r3, [r9, #8]
 8003644:	9b04      	ldr	r3, [sp, #16]
 8003646:	ba1b      	rev	r3, r3
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 8003648:	f8c9 300c 	str.w	r3, [r9, #12]
 800364c:	9b05      	ldr	r3, [sp, #20]
 800364e:	ba1b      	rev	r3, r3
  __IO uint16_t nbvalidbitsdata = 0;
  __IO uint16_t nbvalidbitskey = 0;
  uint32_t i = 0;
  __IO uint32_t counter = 0;
  uint32_t busystatus = 0;
  ErrorStatus status = SUCCESS;
 8003650:	2001      	movs	r0, #1
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
        outputaddr+=4;
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8003652:	f8c9 3010 	str.w	r3, [r9, #16]
 8003656:	e799      	b.n	800358c <HMAC_SHA1+0x88>

08003658 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8003658:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800365a:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800365e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003662:	4298      	cmp	r0, r3
 8003664:	d018      	beq.n	8003698 <I2C_DeInit+0x40>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 8003666:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800366a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800366e:	4298      	cmp	r0, r3
 8003670:	d01e      	beq.n	80036b0 <I2C_DeInit+0x58>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8003672:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8003676:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800367a:	4298      	cmp	r0, r3
 800367c:	d000      	beq.n	8003680 <I2C_DeInit+0x28>
 800367e:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8003680:	2101      	movs	r1, #1
 8003682:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003686:	f000 fc9b 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800368a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800368e:	2100      	movs	r1, #0
    }
  }
}
 8003690:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8003694:	f000 bc94 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8003698:	2101      	movs	r1, #1
 800369a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800369e:	f000 fc8f 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80036a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80036a6:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80036a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80036ac:	f000 bc88 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80036b0:	2101      	movs	r1, #1
 80036b2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80036b6:	f000 fc83 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80036ba:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80036be:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 80036c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80036c4:	f000 bc7c 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>

080036c8 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	4604      	mov	r4, r0
 80036cc:	b084      	sub	sp, #16
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80036ce:	4668      	mov	r0, sp
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80036d0:	88a6      	ldrh	r6, [r4, #4]
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80036d2:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80036d4:	f000 fb80 	bl	8003dd8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80036d8:	9802      	ldr	r0, [sp, #8]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80036da:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80036dc:	f64d 6183 	movw	r1, #56963	; 0xde83

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80036e0:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80036e4:	f2c4 311b 	movt	r1, #17179	; 0x431b

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80036e8:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80036ea:	fba1 3100 	umull	r3, r1, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80036ee:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80036f0:	0c89      	lsrs	r1, r1, #18
  tmpreg |= freqrange;
 80036f2:	430e      	orrs	r6, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80036f4:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80036f6:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80036f8:	f248 66a0 	movw	r6, #34464	; 0x86a0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	041b      	lsls	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003702:	f2c0 0601 	movt	r6, #1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8003706:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8003708:	42b2      	cmp	r2, r6
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800370a:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800370c:	d822      	bhi.n	8003754 <I2C_Init+0x8c>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800370e:	0052      	lsls	r2, r2, #1
 8003710:	fbb0 f0f2 	udiv	r0, r0, r2
 8003714:	b280      	uxth	r0, r0
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8003716:	3101      	adds	r1, #1
 8003718:	8421      	strh	r1, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800371a:	2803      	cmp	r0, #3
 800371c:	bf98      	it	ls
 800371e:	2004      	movls	r0, #4
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8003720:	83a0      	strh	r0, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8003722:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003724:	896e      	ldrh	r6, [r5, #10]
 8003726:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003728:	8929      	ldrh	r1, [r5, #8]
 800372a:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800372c:	b29b      	uxth	r3, r3
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8003734:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8003736:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800373a:	f023 0302 	bic.w	r3, r3, #2
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003742:	4330      	orrs	r0, r6
 8003744:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8003746:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8003748:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800374a:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800374c:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800374e:	8122      	strh	r2, [r4, #8]
}
 8003750:	b004      	add	sp, #16
 8003752:	bd70      	pop	{r4, r5, r6, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8003754:	88ee      	ldrh	r6, [r5, #6]
 8003756:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800375a:	429e      	cmp	r6, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800375c:	bf1d      	ittte	ne
 800375e:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 8003762:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 8003766:	fbb0 f0f2 	udivne	r0, r0, r2
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800376a:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
 800376e:	bf0b      	itete	eq
 8003770:	fbb0 f0f2 	udiveq	r0, r0, r2
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8003774:	b280      	uxthne	r0, r0
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8003776:	b280      	uxtheq	r0, r0
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8003778:	f440 4080 	orrne.w	r0, r0, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800377c:	0503      	lsls	r3, r0, #20
 800377e:	0d1b      	lsrs	r3, r3, #20
 8003780:	b90b      	cbnz	r3, 8003786 <I2C_Init+0xbe>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8003782:	f040 0001 	orr.w	r0, r0, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8003786:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800378a:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800378e:	fb02 f101 	mul.w	r1, r2, r1
 8003792:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8003796:	fb83 2301 	smull	r2, r3, r3, r1
 800379a:	099b      	lsrs	r3, r3, #6
 800379c:	3301      	adds	r3, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800379e:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80037a2:	8423      	strh	r3, [r4, #32]
 80037a4:	e7bc      	b.n	8003720 <I2C_Init+0x58>
 80037a6:	bf00      	nop

080037a8 <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80037a8:	2300      	movs	r3, #0
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	6002      	str	r2, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80037b0:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80037b2:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80037b6:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80037b8:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80037ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80037be:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80037c0:	8183      	strh	r3, [r0, #12]
}
 80037c2:	4770      	bx	lr

080037c4 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80037c4:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037c6:	b929      	cbnz	r1, 80037d4 <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	041b      	lsls	r3, r3, #16
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	8003      	strh	r3, [r0, #0]
 80037d2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	8003      	strh	r3, [r0, #0]
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80037e0:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037e2:	b929      	cbnz	r1, 80037f0 <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80037e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	0c1b      	lsrs	r3, r3, #16
 80037ec:	8003      	strh	r3, [r0, #0]
 80037ee:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f6:	8003      	strh	r3, [r0, #0]
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop

080037fc <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80037fc:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037fe:	b929      	cbnz	r1, 800380c <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8003800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003804:	041b      	lsls	r3, r3, #16
 8003806:	0c1b      	lsrs	r3, r3, #16
 8003808:	8003      	strh	r3, [r0, #0]
 800380a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800380c:	b29b      	uxth	r3, r3
 800380e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003812:	8003      	strh	r3, [r0, #0]
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop

08003818 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8003818:	b91a      	cbnz	r2, 8003822 <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800381a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 800381e:	8201      	strh	r1, [r0, #16]
}
 8003820:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8003822:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 8003826:	8201      	strh	r1, [r0, #16]
}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800382c:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800382e:	b929      	cbnz	r1, 800383c <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8003830:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	0c1b      	lsrs	r3, r3, #16
 8003838:	8003      	strh	r3, [r0, #0]
 800383a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800383c:	b29b      	uxth	r3, r3
 800383e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003842:	8003      	strh	r3, [r0, #0]
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop

08003848 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8003848:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800384a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800384e:	041b      	lsls	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8003850:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8003854:	0c1b      	lsrs	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8003856:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8003858:	8183      	strh	r3, [r0, #12]
}
 800385a:	4770      	bx	lr

0800385c <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800385c:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800385e:	b929      	cbnz	r1, 800386c <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	041b      	lsls	r3, r3, #16
 8003866:	0c1b      	lsrs	r3, r3, #16
 8003868:	8183      	strh	r3, [r0, #12]
 800386a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800386c:	b29b      	uxth	r3, r3
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	8183      	strh	r3, [r0, #12]
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop

08003878 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8003878:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800387a:	b929      	cbnz	r1, 8003888 <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800387c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	0c1b      	lsrs	r3, r3, #16
 8003884:	8003      	strh	r3, [r0, #0]
 8003886:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8003888:	b29b      	uxth	r3, r3
 800388a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800388e:	8003      	strh	r3, [r0, #0]
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop

08003894 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8003894:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003896:	b919      	cbnz	r1, 80038a0 <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 8003898:	045b      	lsls	r3, r3, #17
 800389a:	0c5b      	lsrs	r3, r3, #17
 800389c:	8003      	strh	r3, [r0, #0]
 800389e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 80038a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8003      	strh	r3, [r0, #0]
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop

080038b0 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80038b0:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80038b2:	b129      	cbz	r1, 80038c0 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80038b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	0c1b      	lsrs	r3, r3, #16
 80038bc:	8003      	strh	r3, [r0, #0]
 80038be:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c6:	8003      	strh	r3, [r0, #0]
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop

080038cc <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80038cc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80038d0:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80038d2:	d005      	beq.n	80038e0 <I2C_FastModeDutyCycleConfig+0x14>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80038d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	0c1b      	lsrs	r3, r3, #16
 80038dc:	8383      	strh	r3, [r0, #28]
 80038de:	4770      	bx	lr
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e6:	8383      	strh	r3, [r0, #28]
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop

080038ec <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80038ec:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80038f0:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80038f2:	d005      	beq.n	8003900 <I2C_NACKPositionConfig+0x14>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80038f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	0c1b      	lsrs	r3, r3, #16
 80038fc:	8003      	strh	r3, [r0, #0]
 80038fe:	4770      	bx	lr
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8003900:	b29b      	uxth	r3, r3
 8003902:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003906:	8003      	strh	r3, [r0, #0]
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop

0800390c <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800390c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8003910:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8003912:	d005      	beq.n	8003920 <I2C_SMBusAlertConfig+0x14>
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8003914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	0c1b      	lsrs	r3, r3, #16
 800391c:	8003      	strh	r3, [r0, #0]
 800391e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8003920:	b29b      	uxth	r3, r3
 8003922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003926:	8003      	strh	r3, [r0, #0]
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop

0800392c <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800392c:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800392e:	b929      	cbnz	r1, 800393c <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 8003930:	f023 0310 	bic.w	r3, r3, #16
 8003934:	041b      	lsls	r3, r3, #16
 8003936:	0c1b      	lsrs	r3, r3, #16
 8003938:	8003      	strh	r3, [r0, #0]
 800393a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800393c:	b29b      	uxth	r3, r3
 800393e:	f043 0310 	orr.w	r3, r3, #16
 8003942:	8003      	strh	r3, [r0, #0]
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop

08003948 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8003948:	8201      	strh	r1, [r0, #16]
}
 800394a:	4770      	bx	lr

0800394c <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800394c:	8a00      	ldrh	r0, [r0, #16]
}
 800394e:	b2c0      	uxtb	r0, r0
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop

08003954 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8003954:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003956:	b929      	cbnz	r1, 8003964 <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8003958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800395c:	041b      	lsls	r3, r3, #16
 800395e:	0c1b      	lsrs	r3, r3, #16
 8003960:	8003      	strh	r3, [r0, #0]
 8003962:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8003964:	b29b      	uxth	r3, r3
 8003966:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800396a:	8003      	strh	r3, [r0, #0]
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop

08003970 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8003970:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8003974:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8003976:	d005      	beq.n	8003984 <I2C_PECPositionConfig+0x14>
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8003978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	0c1b      	lsrs	r3, r3, #16
 8003980:	8003      	strh	r3, [r0, #0]
 8003982:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8003984:	b29b      	uxth	r3, r3
 8003986:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800398a:	8003      	strh	r3, [r0, #0]
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop

08003990 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8003990:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003992:	b929      	cbnz	r1, 80039a0 <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8003994:	f023 0320 	bic.w	r3, r3, #32
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	0c1b      	lsrs	r3, r3, #16
 800399c:	8003      	strh	r3, [r0, #0]
 800399e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f043 0320 	orr.w	r3, r3, #32
 80039a6:	8003      	strh	r3, [r0, #0]
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop

080039ac <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 80039ac:	8b00      	ldrh	r0, [r0, #24]
}
 80039ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80039b2:	4770      	bx	lr

080039b4 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80039b4:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039b6:	b929      	cbnz	r1, 80039c4 <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 80039b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	8083      	strh	r3, [r0, #4]
 80039c2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ca:	8083      	strh	r3, [r0, #4]
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop

080039d0 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80039d0:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80039d2:	b929      	cbnz	r1, 80039e0 <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80039d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039d8:	041b      	lsls	r3, r3, #16
 80039da:	0c1b      	lsrs	r3, r3, #16
 80039dc:	8083      	strh	r3, [r0, #4]
 80039de:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039e6:	8083      	strh	r3, [r0, #4]
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop

080039ec <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80039ec:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80039f2:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80039f4:	9b01      	ldr	r3, [sp, #4]
 80039f6:	18cb      	adds	r3, r1, r3
 80039f8:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80039fa:	9b01      	ldr	r3, [sp, #4]
 80039fc:	8818      	ldrh	r0, [r3, #0]
}
 80039fe:	b280      	uxth	r0, r0
 8003a00:	b002      	add	sp, #8
 8003a02:	4770      	bx	lr

08003a04 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8003a04:	8883      	ldrh	r3, [r0, #4]
 8003a06:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8003a08:	b91a      	cbnz	r2, 8003a12 <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8003a0a:	ea23 0101 	bic.w	r1, r3, r1
 8003a0e:	8081      	strh	r1, [r0, #4]
 8003a10:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8003a12:	4319      	orrs	r1, r3
 8003a14:	8081      	strh	r1, [r0, #4]
 8003a16:	4770      	bx	lr

08003a18 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003a18:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8003a1a:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003a1c:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8003a22:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8003a24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8003a28:	1a0b      	subs	r3, r1, r0
 8003a2a:	4258      	negs	r0, r3
 8003a2c:	eb40 0003 	adc.w	r0, r0, r3
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop

08003a34 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003a34:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 8003a36:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8003a38:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8003a3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 8003a3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003a42:	4770      	bx	lr

08003a44 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8003a44:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8003a46:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003a48:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8003a4e:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8003a50:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8003a52:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8003a54:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8003a58:	b153      	cbz	r3, 8003a70 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8003a5a:	9b01      	ldr	r3, [sp, #4]
 8003a5c:	3314      	adds	r3, #20
 8003a5e:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8003a60:	9b01      	ldr	r3, [sp, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8003a64:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8003a66:	bf0c      	ite	eq
 8003a68:	2000      	moveq	r0, #0
 8003a6a:	2001      	movne	r0, #1
 8003a6c:	b002      	add	sp, #8
 8003a6e:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8003a70:	9b01      	ldr	r3, [sp, #4]
 8003a72:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8003a74:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	e7f2      	b.n	8003a60 <I2C_GetFlagStatus+0x1c>
 8003a7a:	bf00      	nop

08003a7c <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8003a7c:	43c9      	mvns	r1, r1
 8003a7e:	b289      	uxth	r1, r1
 8003a80:	8281      	strh	r1, [r0, #20]
}
 8003a82:	4770      	bx	lr

08003a84 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8003a84:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8003a86:	8a80      	ldrh	r0, [r0, #20]
 8003a88:	b280      	uxth	r0, r0
 8003a8a:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8003a8c:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8003a8e:	d006      	beq.n	8003a9e <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8003a90:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8003a94:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8003a98:	bf0c      	ite	eq
 8003a9a:	2000      	moveq	r0, #0
 8003a9c:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8003a9e:	4770      	bx	lr

08003aa0 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8003aa0:	43c9      	mvns	r1, r1
 8003aa2:	b289      	uxth	r1, r1
 8003aa4:	8281      	strh	r1, [r0, #20]
}
 8003aa6:	4770      	bx	lr

08003aa8 <IWDG_WriteAccessCmd>:
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8003aa8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003aac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ab0:	6018      	str	r0, [r3, #0]
}
 8003ab2:	4770      	bx	lr

08003ab4 <IWDG_SetPrescaler>:
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8003ab4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ab8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003abc:	6058      	str	r0, [r3, #4]
}
 8003abe:	4770      	bx	lr

08003ac0 <IWDG_SetReload>:
  */
void IWDG_SetReload(uint16_t Reload)
{
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8003ac0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ac4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ac8:	6098      	str	r0, [r3, #8]
}
 8003aca:	4770      	bx	lr

08003acc <IWDG_ReloadCounter>:
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
  IWDG->KR = KR_KEY_RELOAD;
 8003acc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ad0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ad4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003ad8:	601a      	str	r2, [r3, #0]
}
 8003ada:	4770      	bx	lr

08003adc <IWDG_Enable>:
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
  IWDG->KR = KR_KEY_ENABLE;
 8003adc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ae0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ae4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	4770      	bx	lr

08003aec <IWDG_GetFlagStatus>:
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 8003aec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003af0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003af4:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8003af6:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003af8:	bf0c      	ite	eq
 8003afa:	2000      	moveq	r0, #0
 8003afc:	2001      	movne	r0, #1
 8003afe:	4770      	bx	lr

08003b00 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8003b00:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8003b02:	2101      	movs	r1, #1
 8003b04:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b08:	f000 fa5a 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8003b0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003b10:	2100      	movs	r1, #0
}
 8003b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void PWR_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8003b16:	f000 ba53 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
 8003b1a:	bf00      	nop

08003b1c <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8003b22:	6018      	str	r0, [r3, #0]
}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop

08003b28 <PWR_PVDLevelConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8003b28:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003b2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b30:	681a      	ldr	r2, [r3, #0]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8003b32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8003b36:	4302      	orrs	r2, r0
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	4770      	bx	lr

08003b3c <PWR_PVDCmd>:
void PWR_PVDCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8003b42:	6018      	str	r0, [r3, #0]
}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop

08003b48 <PWR_WakeUpPinCmd>:
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8003b48:	23a0      	movs	r3, #160	; 0xa0
 8003b4a:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8003b4e:	6018      	str	r0, [r3, #0]
}
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop

08003b54 <PWR_BackupRegulatorCmd>:
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 8003b54:	23a4      	movs	r3, #164	; 0xa4
 8003b56:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8003b5a:	6018      	str	r0, [r3, #0]
}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop

08003b60 <PWR_MainRegulatorModeConfig>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 8003b60:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003b64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b68:	681a      	ldr	r2, [r3, #0]
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 8003b6a:	b118      	cbz	r0, 8003b74 <PWR_MainRegulatorModeConfig+0x14>
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
  }
  else
  {    
    PWR->CR |= PWR_Regulator_Voltage_Scale1;
 8003b6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 8003b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	4770      	bx	lr

08003b7c <PWR_FlashPowerDownCmd>:
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 8003b7c:	2324      	movs	r3, #36	; 0x24
 8003b7e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8003b82:	6018      	str	r0, [r3, #0]
}
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop

08003b88 <PWR_EnterSTOPMode>:
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003b88:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8003b8c:	f2c4 0200 	movt	r2, #16384	; 0x4000
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 8003b90:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003b92:	6814      	ldr	r4, [r2, #0]
  
  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003b94:	f44f 436d 	mov.w	r3, #60672	; 0xed00
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 8003b98:	f024 0403 	bic.w	r4, r4, #3
  
  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003b9c:	f2ce 0300 	movt	r3, #57344	; 0xe000
  tmpreg = PWR->CR;
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8003ba0:	4320      	orrs	r0, r4
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8003ba2:	6010      	str	r0, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003ba4:	691a      	ldr	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8003ba6:	2901      	cmp	r1, #1
  
  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003ba8:	f042 0204 	orr.w	r2, r2, #4
 8003bac:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 8003bae:	d00a      	beq.n	8003bc6 <PWR_EnterSTOPMode+0x3e>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8003bb0:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 8003bb2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003bb6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	f022 0204 	bic.w	r2, r2, #4
 8003bc0:	611a      	str	r2, [r3, #16]
}
 8003bc2:	bc10      	pop	{r4}
 8003bc4:	4770      	bx	lr
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8003bc6:	bf30      	wfi
 8003bc8:	e7f3      	b.n	8003bb2 <PWR_EnterSTOPMode+0x2a>
 8003bca:	bf00      	nop

08003bcc <PWR_EnterSTANDBYMode>:
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 8003bcc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003bd0:	f2c4 0300 	movt	r3, #16384	; 0x4000
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003bd4:	f44f 426d 	mov.w	r2, #60672	; 0xed00
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 8003bd8:	6819      	ldr	r1, [r3, #0]
 8003bda:	f041 0104 	orr.w	r1, r1, #4
 8003bde:	6019      	str	r1, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8003be0:	6819      	ldr	r1, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003be2:	f2ce 0200 	movt	r2, #57344	; 0xe000
{
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 8003be6:	f041 0102 	orr.w	r1, r1, #2
 8003bea:	6019      	str	r1, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8003bec:	6913      	ldr	r3, [r2, #16]
 8003bee:	f043 0304 	orr.w	r3, r3, #4
 8003bf2:	6113      	str	r3, [r2, #16]
 8003bf4:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 8003bf6:	4770      	bx	lr

08003bf8 <PWR_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 8003bf8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003bfc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c00:	685b      	ldr	r3, [r3, #4]
  {
    bitstatus = SET;
 8003c02:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003c04:	bf0c      	ite	eq
 8003c06:	2000      	moveq	r0, #0
 8003c08:	2001      	movne	r0, #1
 8003c0a:	4770      	bx	lr

08003c0c <PWR_ClearFlag>:
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8003c0c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003c10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
 8003c1a:	601a      	str	r2, [r3, #0]
}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop

08003c20 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003c20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003c24:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c28:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003c2a:	6819      	ldr	r1, [r3, #0]
 8003c2c:	f041 0101 	orr.w	r1, r1, #1
 8003c30:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c32:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c34:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c36:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c3a:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c3e:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c42:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003c46:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c48:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c4a:	6819      	ldr	r1, [r3, #0]
 8003c4c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003c50:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c52:	60da      	str	r2, [r3, #12]
}
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop

08003c58 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8003c58:	f643 0302 	movw	r3, #14338	; 0x3802
 8003c5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8003c64:	7018      	strb	r0, [r3, #0]
}
 8003c66:	4770      	bx	lr

08003c68 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8003c68:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8003c6a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8003c72:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8003c76:	680a      	ldr	r2, [r1, #0]
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 8003c78:	9b01      	ldr	r3, [sp, #4]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8003c7e:	9b01      	ldr	r3, [sp, #4]
 8003c80:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003c84:	d001      	beq.n	8003c8a <RCC_WaitForHSEStartUp+0x22>
 8003c86:	0393      	lsls	r3, r2, #14
 8003c88:	d5f5      	bpl.n	8003c76 <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8003c8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003c8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c92:	6818      	ldr	r0, [r3, #0]
  else
  {
    status = ERROR;
  }
  return (status);
}
 8003c94:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8003c98:	b002      	add	sp, #8
 8003c9a:	4770      	bx	lr

08003c9c <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 8003c9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ca0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ca4:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 8003ca6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8003caa:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 8003cae:	601a      	str	r2, [r3, #0]
}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop

08003cb4 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003cba:	6018      	str	r0, [r3, #0]
}
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop

08003cc0 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003cc0:	f643 0370 	movw	r3, #14448	; 0x3870
 8003cc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cc8:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8003cca:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003ccc:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8003cce:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8003cd0:	d004      	beq.n	8003cdc <RCC_LSEConfig+0x1c>
 8003cd2:	2804      	cmp	r0, #4
 8003cd4:	d101      	bne.n	8003cda <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8003cd6:	2205      	movs	r2, #5
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8003cdc:	7018      	strb	r0, [r3, #0]
      break;
 8003cde:	4770      	bx	lr

08003ce0 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8003ce0:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8003ce4:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003ce8:	6018      	str	r0, [r3, #0]
}
 8003cea:	4770      	bx	lr

08003cec <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8003cec:	4301      	orrs	r1, r0
 8003cee:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8003cf2:	9900      	ldr	r1, [sp, #0]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8003cfa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8003d04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003d08:	6042      	str	r2, [r0, #4]
                 (PLLQ << 24);
}
 8003d0a:	4770      	bx	lr

08003d0c <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8003d0c:	2360      	movs	r3, #96	; 0x60
 8003d0e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003d12:	6018      	str	r0, [r3, #0]
}
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop

08003d18 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8003d18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d1c:	0180      	lsls	r0, r0, #6
 8003d1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d22:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8003d26:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8003d2a:	4770      	bx	lr

08003d2c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8003d2c:	2368      	movs	r3, #104	; 0x68
 8003d2e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003d32:	6018      	str	r0, [r3, #0]
}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop

08003d38 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8003d38:	234c      	movs	r3, #76	; 0x4c
 8003d3a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003d3e:	6018      	str	r0, [r3, #0]
}
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop

08003d44 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8003d44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d4c:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8003d4e:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8003d52:	4302      	orrs	r2, r0
 8003d54:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop

08003d5c <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8003d5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d64:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8003d66:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8003d6a:	4302      	orrs	r2, r0
 8003d6c:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8003d6e:	609a      	str	r2, [r3, #8]
}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop

08003d74 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8003d74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d7c:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8003d7e:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8003d82:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003d84:	609a      	str	r2, [r3, #8]
}
 8003d86:	4770      	bx	lr

08003d88 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8003d88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d90:	6898      	ldr	r0, [r3, #8]
}
 8003d92:	f000 000c 	and.w	r0, r0, #12
 8003d96:	4770      	bx	lr

08003d98 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8003d98:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003da0:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8003da2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8003da6:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003da8:	609a      	str	r2, [r3, #8]
}
 8003daa:	4770      	bx	lr

08003dac <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8003dac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003db0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003db4:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8003db6:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8003dba:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003dbc:	609a      	str	r2, [r3, #8]
}
 8003dbe:	4770      	bx	lr

08003dc0 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8003dc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003dc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003dc8:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8003dca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8003dce:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8003dd2:	609a      	str	r2, [r3, #8]
}
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop

08003dd8 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003dd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ddc:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003de0:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8003de8:	2a04      	cmp	r2, #4
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003dea:	bf02      	ittt	eq
 8003dec:	f44f 5290 	moveq.w	r2, #4608	; 0x1200
 8003df0:	f2c0 027a 	movteq	r2, #122	; 0x7a
 8003df4:	6002      	streq	r2, [r0, #0]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8003df6:	d006      	beq.n	8003e06 <RCC_GetClocksFreq+0x2e>
 8003df8:	2a08      	cmp	r2, #8
 8003dfa:	d01e      	beq.n	8003e3a <RCC_GetClocksFreq+0x62>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003dfc:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8003e00:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8003e04:	6002      	str	r2, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003e06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8003e0e:	491c      	ldr	r1, [pc, #112]	; (8003e80 <RCC_GetClocksFreq+0xa8>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003e10:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 4;
 8003e12:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8003e16:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003e18:	40e2      	lsrs	r2, r4
 8003e1a:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8003e1c:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 10;
 8003e1e:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8003e22:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003e24:	fa32 f404 	lsrs.w	r4, r2, r4
 8003e28:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003e2a:	689b      	ldr	r3, [r3, #8]
  tmp = tmp >> 13;
 8003e2c:	f3c3 3342 	ubfx	r3, r3, #13, #3
  presc = APBAHBPrescTable[tmp];
 8003e30:	5ccb      	ldrb	r3, [r1, r3]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003e32:	40da      	lsrs	r2, r3
 8003e34:	60c2      	str	r2, [r0, #12]
}
 8003e36:	bc10      	pop	{r4}
 8003e38:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003e3a:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e3c:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
 8003e3e:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003e42:	685c      	ldr	r4, [r3, #4]
 8003e44:	bf15      	itete	ne
 8003e46:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003e4a:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003e4e:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003e52:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e56:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003e5a:	fbb3 f2f1 	udiv	r2, r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003e5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e62:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003e66:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003e70:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003e72:	fb02 f204 	mul.w	r2, r2, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003e76:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8003e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7c:	6002      	str	r2, [r0, #0]
      break;
 8003e7e:	e7c2      	b.n	8003e06 <RCC_GetClocksFreq+0x2e>
 8003e80:	20000000 	.word	0x20000000

08003e84 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8003e84:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8003e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e8c:	d10c      	bne.n	8003ea8 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8003e8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e92:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003e96:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8003e9a:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003e9c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8003ea0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003ea4:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8003ea6:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8003ea8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003eac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003eb0:	0500      	lsls	r0, r0, #20
 8003eb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb4:	0d00      	lsrs	r0, r0, #20
 8003eb6:	4310      	orrs	r0, r2
 8003eb8:	6718      	str	r0, [r3, #112]	; 0x70
}
 8003eba:	4770      	bx	lr

08003ebc <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8003ebc:	f640 633c 	movw	r3, #3644	; 0xe3c
 8003ec0:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003ec4:	6018      	str	r0, [r3, #0]
}
 8003ec6:	4770      	bx	lr

08003ec8 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8003ec8:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8003ecc:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003ed0:	6018      	str	r0, [r3, #0]
}
 8003ed2:	4770      	bx	lr

08003ed4 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8003ed4:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8003ed8:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003edc:	6018      	str	r0, [r3, #0]
}
 8003ede:	4770      	bx	lr

08003ee0 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003ee0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ee4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003eea:	b919      	cbnz	r1, 8003ef4 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003eec:	ea22 0000 	bic.w	r0, r2, r0
 8003ef0:	6318      	str	r0, [r3, #48]	; 0x30
 8003ef2:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003ef4:	4310      	orrs	r0, r2
 8003ef6:	6318      	str	r0, [r3, #48]	; 0x30
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop

08003efc <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003efc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003f06:	b919      	cbnz	r1, 8003f10 <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8003f08:	ea22 0000 	bic.w	r0, r2, r0
 8003f0c:	6358      	str	r0, [r3, #52]	; 0x34
 8003f0e:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8003f10:	4310      	orrs	r0, r2
 8003f12:	6358      	str	r0, [r3, #52]	; 0x34
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop

08003f18 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8003f18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003f22:	b919      	cbnz	r1, 8003f2c <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8003f24:	ea22 0000 	bic.w	r0, r2, r0
 8003f28:	6398      	str	r0, [r3, #56]	; 0x38
 8003f2a:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8003f2c:	4310      	orrs	r0, r2
 8003f2e:	6398      	str	r0, [r3, #56]	; 0x38
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop

08003f34 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003f34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003f3e:	b919      	cbnz	r1, 8003f48 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003f40:	ea22 0000 	bic.w	r0, r2, r0
 8003f44:	6418      	str	r0, [r3, #64]	; 0x40
 8003f46:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003f48:	4310      	orrs	r0, r2
 8003f4a:	6418      	str	r0, [r3, #64]	; 0x40
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop

08003f50 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003f50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003f5a:	b919      	cbnz	r1, 8003f64 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003f5c:	ea22 0000 	bic.w	r0, r2, r0
 8003f60:	6458      	str	r0, [r3, #68]	; 0x44
 8003f62:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003f64:	4310      	orrs	r0, r2
 8003f66:	6458      	str	r0, [r3, #68]	; 0x44
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop

08003f6c <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8003f6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f74:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003f76:	b919      	cbnz	r1, 8003f80 <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8003f78:	ea22 0000 	bic.w	r0, r2, r0
 8003f7c:	6118      	str	r0, [r3, #16]
 8003f7e:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8003f80:	4310      	orrs	r0, r2
 8003f82:	6118      	str	r0, [r3, #16]
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop

08003f88 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8003f88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f90:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003f92:	b919      	cbnz	r1, 8003f9c <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8003f94:	ea22 0000 	bic.w	r0, r2, r0
 8003f98:	6158      	str	r0, [r3, #20]
 8003f9a:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8003f9c:	4310      	orrs	r0, r2
 8003f9e:	6158      	str	r0, [r3, #20]
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop

08003fa4 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8003fa4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fa8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003fac:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003fae:	b919      	cbnz	r1, 8003fb8 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8003fb0:	ea22 0000 	bic.w	r0, r2, r0
 8003fb4:	6198      	str	r0, [r3, #24]
 8003fb6:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8003fb8:	4310      	orrs	r0, r2
 8003fba:	6198      	str	r0, [r3, #24]
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop

08003fc0 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003fc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003fc8:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003fca:	b919      	cbnz	r1, 8003fd4 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8003fcc:	ea22 0000 	bic.w	r0, r2, r0
 8003fd0:	6218      	str	r0, [r3, #32]
 8003fd2:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8003fd4:	4310      	orrs	r0, r2
 8003fd6:	6218      	str	r0, [r3, #32]
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop

08003fdc <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003fdc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fe0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003fe6:	b919      	cbnz	r1, 8003ff0 <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8003fe8:	ea22 0000 	bic.w	r0, r2, r0
 8003fec:	6258      	str	r0, [r3, #36]	; 0x24
 8003fee:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8003ff0:	4310      	orrs	r0, r2
 8003ff2:	6258      	str	r0, [r3, #36]	; 0x24
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop

08003ff8 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8003ff8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003ffc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004002:	b919      	cbnz	r1, 800400c <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8004004:	ea22 0000 	bic.w	r0, r2, r0
 8004008:	6518      	str	r0, [r3, #80]	; 0x50
 800400a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800400c:	4310      	orrs	r0, r2
 800400e:	6518      	str	r0, [r3, #80]	; 0x50
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop

08004014 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8004014:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004018:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800401c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800401e:	b919      	cbnz	r1, 8004028 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8004020:	ea22 0000 	bic.w	r0, r2, r0
 8004024:	6558      	str	r0, [r3, #84]	; 0x54
 8004026:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8004028:	4310      	orrs	r0, r2
 800402a:	6558      	str	r0, [r3, #84]	; 0x54
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop

08004030 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8004030:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004038:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800403a:	b919      	cbnz	r1, 8004044 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800403c:	ea22 0000 	bic.w	r0, r2, r0
 8004040:	6598      	str	r0, [r3, #88]	; 0x58
 8004042:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8004044:	4310      	orrs	r0, r2
 8004046:	6598      	str	r0, [r3, #88]	; 0x58
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop

0800404c <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800404c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004050:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004054:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004056:	b919      	cbnz	r1, 8004060 <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8004058:	ea22 0000 	bic.w	r0, r2, r0
 800405c:	6618      	str	r0, [r3, #96]	; 0x60
 800405e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8004060:	4310      	orrs	r0, r2
 8004062:	6618      	str	r0, [r3, #96]	; 0x60
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop

08004068 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8004068:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800406c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004070:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004072:	b919      	cbnz	r1, 800407c <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8004074:	ea22 0000 	bic.w	r0, r2, r0
 8004078:	6658      	str	r0, [r3, #100]	; 0x64
 800407a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800407c:	4310      	orrs	r0, r2
 800407e:	6658      	str	r0, [r3, #100]	; 0x64
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop

08004084 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004084:	f643 030d 	movw	r3, #14349	; 0x380d
 8004088:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800408c:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800408e:	b919      	cbnz	r1, 8004098 <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8004090:	ea22 0000 	bic.w	r0, r2, r0
 8004094:	7018      	strb	r0, [r3, #0]
 8004096:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004098:	4310      	orrs	r0, r2
 800409a:	7018      	strb	r0, [r3, #0]
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop

080040a0 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80040a0:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d00e      	beq.n	80040c4 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80040a6:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80040a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80040ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80040b0:	bf0c      	ite	eq
 80040b2:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80040b4:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80040b6:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80040ba:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80040be:	f000 0001 	and.w	r0, r0, #1
 80040c2:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80040c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80040c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	e7f2      	b.n	80040b6 <RCC_GetFlagStatus+0x16>

080040d0 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 80040d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80040d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80040d8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80040da:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80040de:	675a      	str	r2, [r3, #116]	; 0x74
}
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop

080040e4 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 80040e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80040e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80040ec:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 80040ee:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 80040f0:	bf0c      	ite	eq
 80040f2:	2000      	moveq	r0, #0
 80040f4:	2001      	movne	r0, #1
 80040f6:	4770      	bx	lr

080040f8 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 80040f8:	f643 030e 	movw	r3, #14350	; 0x380e
 80040fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004100:	7018      	strb	r0, [r3, #0]
}
 8004102:	4770      	bx	lr

08004104 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8004104:	b508      	push	{r3, lr}
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 8004106:	2040      	movs	r0, #64	; 0x40
 8004108:	2101      	movs	r1, #1
 800410a:	f7ff ff3d 	bl	8003f88 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800410e:	2040      	movs	r0, #64	; 0x40
 8004110:	2100      	movs	r1, #0
}
 8004112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8004116:	f7ff bf37 	b.w	8003f88 <RCC_AHB2PeriphResetCmd>
 800411a:	bf00      	nop

0800411c <RNG_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800411c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004120:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004124:	681a      	ldr	r2, [r3, #0]
void RNG_Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004126:	b918      	cbnz	r0, 8004130 <RNG_Cmd+0x14>
    RNG->CR |= RNG_CR_RNGEN;
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8004128:	f022 0204 	bic.w	r2, r2, #4
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8004130:	f042 0204 	orr.w	r2, r2, #4
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	4770      	bx	lr

08004138 <RNG_GetRandomNumber>:
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8004138:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800413c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004140:	6898      	ldr	r0, [r3, #8]
}
 8004142:	4770      	bx	lr

08004144 <RNG_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8004144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004148:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800414c:	681a      	ldr	r2, [r3, #0]
void RNG_ITConfig(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800414e:	b918      	cbnz	r0, 8004158 <RNG_ITConfig+0x14>
    RNG->CR |= RNG_CR_IE;
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8004150:	f022 0208 	bic.w	r2, r2, #8
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8004158:	f042 0208 	orr.w	r2, r2, #8
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	4770      	bx	lr

08004160 <RNG_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8004160:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004164:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004168:	685b      	ldr	r3, [r3, #4]
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 800416a:	4218      	tst	r0, r3
    /* RNG_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
}
 800416c:	bf0c      	ite	eq
 800416e:	2000      	moveq	r0, #0
 8004170:	2001      	movne	r0, #1
 8004172:	4770      	bx	lr

08004174 <RNG_ClearFlag>:
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 8004174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004178:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800417c:	ea6f 1000 	mvn.w	r0, r0, lsl #4
 8004180:	6058      	str	r0, [r3, #4]
}
 8004182:	4770      	bx	lr

08004184 <RNG_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 8004184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004188:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800418c:	685b      	ldr	r3, [r3, #4]
  {
    /* RNG_IT is set */
    bitstatus = SET;
 800418e:	4218      	tst	r0, r3
    /* RNG_IT is reset */
    bitstatus = RESET;
  }
  /* Return the RNG_IT status */
  return bitstatus;
}
 8004190:	bf0c      	ite	eq
 8004192:	2000      	moveq	r0, #0
 8004194:	2001      	movne	r0, #1
 8004196:	4770      	bx	lr

08004198 <RNG_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 8004198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800419c:	43c0      	mvns	r0, r0
 800419e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80041a2:	b2c0      	uxtb	r0, r0
 80041a4:	6058      	str	r0, [r3, #4]
}
 80041a6:	4770      	bx	lr

080041a8 <RTC_StructInit>:
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 80041a8:	2100      	movs	r1, #0
 80041aa:	227f      	movs	r2, #127	; 0x7f
 80041ac:	23ff      	movs	r3, #255	; 0xff
 80041ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
}
 80041b2:	4770      	bx	lr

080041b4 <RTC_WriteProtectionCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 80041b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80041b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80041bc:	b920      	cbnz	r0, 80041c8 <RTC_WriteProtectionCmd+0x14>
    RTC->WPR = 0xFF;   
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 80041be:	22ca      	movs	r2, #202	; 0xca
 80041c0:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 80041c2:	2253      	movs	r2, #83	; 0x53
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
 80041c6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 80041c8:	22ff      	movs	r2, #255	; 0xff
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop

080041d0 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 80041d0:	b082      	sub	sp, #8
  __IO uint32_t initcounter = 0x00;
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80041d2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
  __IO uint32_t initcounter = 0x00;
 80041d6:	2300      	movs	r3, #0
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80041d8:	f2c4 0100 	movt	r1, #16384	; 0x4000
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
  __IO uint32_t initcounter = 0x00;
 80041dc:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80041de:	68cb      	ldr	r3, [r1, #12]
 80041e0:	065b      	lsls	r3, r3, #25
 80041e2:	d416      	bmi.n	8004212 <RTC_EnterInitMode+0x42>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 80041e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041e8:	60cb      	str	r3, [r1, #12]
 80041ea:	e001      	b.n	80041f0 <RTC_EnterInitMode+0x20>
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
      initcounter++;  
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 80041ec:	0650      	lsls	r0, r2, #25
 80041ee:	d407      	bmi.n	8004200 <RTC_EnterInitMode+0x30>
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 80041f0:	68ca      	ldr	r2, [r1, #12]
      initcounter++;  
 80041f2:	9b01      	ldr	r3, [sp, #4]
 80041f4:	3301      	adds	r3, #1
 80041f6:	9301      	str	r3, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 80041f8:	9b01      	ldr	r3, [sp, #4]
 80041fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fe:	d1f5      	bne.n	80041ec <RTC_EnterInitMode+0x1c>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8004200:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004204:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004208:	68d8      	ldr	r0, [r3, #12]
    {
      status = SUCCESS;
 800420a:	f3c0 1080 	ubfx	r0, r0, #6, #1
  {
    status = SUCCESS;  
  } 
    
  return (status);  
}
 800420e:	b002      	add	sp, #8
 8004210:	4770      	bx	lr
      status = ERROR;
    }        
  }
  else
  {
    status = SUCCESS;  
 8004212:	2001      	movs	r0, #1
 8004214:	e7fb      	b.n	800420e <RTC_EnterInitMode+0x3e>
 8004216:	bf00      	nop

08004218 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8004218:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800421a:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 800421e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004222:	23ca      	movs	r3, #202	; 0xca
 8004224:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8004226:	2353      	movs	r3, #83	; 0x53
 8004228:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800422a:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800422c:	f7ff ffd0 	bl	80041d0 <RTC_EnterInitMode>
 8004230:	b198      	cbz	r0, 800425a <RTC_Init+0x42>
    status = ERROR;
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8004232:	68a3      	ldr	r3, [r4, #8]
 8004234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004238:	60a3      	str	r3, [r4, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 800423a:	68a2      	ldr	r2, [r4, #8]
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	60a3      	str	r3, [r4, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8004242:	68ab      	ldr	r3, [r5, #8]
 8004244:	6123      	str	r3, [r4, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8004246:	6923      	ldr	r3, [r4, #16]
 8004248:	686a      	ldr	r2, [r5, #4]
 800424a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800424e:	6123      	str	r3, [r4, #16]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004250:	68e3      	ldr	r3, [r4, #12]
 8004252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004256:	60e3      	str	r3, [r4, #12]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);

    /* Exit Initialization mode */
    RTC_ExitInitMode();

    status = SUCCESS;    
 8004258:	2001      	movs	r0, #1
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800425a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800425e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004262:	22ff      	movs	r2, #255	; 0xff
 8004264:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8004266:	bd38      	pop	{r3, r4, r5, pc}

08004268 <RTC_ExitInitMode>:
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004268:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800426c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004276:	60da      	str	r2, [r3, #12]
}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop

0800427c <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800427c:	b082      	sub	sp, #8
  __IO uint32_t synchrocounter = 0;
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800427e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8004282:	f2c4 0100 	movt	r1, #16384	; 0x4000
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
  __IO uint32_t synchrocounter = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800428a:	23ca      	movs	r3, #202	; 0xca
 800428c:	624b      	str	r3, [r1, #36]	; 0x24
  RTC->WPR = 0x53;
 800428e:	2353      	movs	r3, #83	; 0x53
 8004290:	624b      	str	r3, [r1, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8004292:	68cb      	ldr	r3, [r1, #12]
 8004294:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004298:	60cb      	str	r3, [r1, #12]
 800429a:	e001      	b.n	80042a0 <RTC_WaitForSynchro+0x24>
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
    synchrocounter++;  
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800429c:	0692      	lsls	r2, r2, #26
 800429e:	d407      	bmi.n	80042b0 <RTC_WaitForSynchro+0x34>
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 80042a0:	68ca      	ldr	r2, [r1, #12]
    synchrocounter++;  
 80042a2:	9b01      	ldr	r3, [sp, #4]
 80042a4:	3301      	adds	r3, #1
 80042a6:	9301      	str	r3, [sp, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 80042a8:	9b01      	ldr	r3, [sp, #4]
 80042aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042ae:	d1f5      	bne.n	800429c <RTC_WaitForSynchro+0x20>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 80042b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80042b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80042b8:	22ff      	movs	r2, #255	; 0xff
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
    synchrocounter++;  
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 80042ba:	68d8      	ldr	r0, [r3, #12]
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
}
 80042be:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80042c2:	b002      	add	sp, #8
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 80042c8:	b530      	push	{r4, r5, lr}
  __IO uint32_t wutcounter = 0x00;
  uint32_t wutwfstatus = 0x00;
  ErrorStatus status = ERROR;
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80042ca:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 80042ce:	f2c4 0400 	movt	r4, #16384	; 0x4000
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 80042d2:	b083      	sub	sp, #12
  __IO uint32_t wutcounter = 0x00;
  uint32_t wutwfstatus = 0x00;
  ErrorStatus status = ERROR;
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80042d4:	23ca      	movs	r3, #202	; 0xca
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
  __IO uint32_t wutcounter = 0x00;
 80042d6:	2500      	movs	r5, #0
 80042d8:	9501      	str	r5, [sp, #4]
  uint32_t wutwfstatus = 0x00;
  ErrorStatus status = ERROR;
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80042da:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 80042dc:	2353      	movs	r3, #83	; 0x53
 80042de:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80042e0:	f7ff ff76 	bl	80041d0 <RTC_EnterInitMode>
 80042e4:	b1d0      	cbz	r0, 800431c <RTC_DeInit+0x54>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
    RTC->DR = (uint32_t)0x00002101;
 80042e6:	f242 1301 	movw	r3, #8449	; 0x2101
    status = ERROR;
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 80042ea:	6025      	str	r5, [r4, #0]
    RTC->DR = (uint32_t)0x00002101;
 80042ec:	6063      	str	r3, [r4, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 80042ee:	68a3      	ldr	r3, [r4, #8]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	60a3      	str	r3, [r4, #8]
 80042f6:	e001      	b.n	80042fc <RTC_DeInit+0x34>
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
      wutcounter++;  
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 80042f8:	0751      	lsls	r1, r2, #29
 80042fa:	d407      	bmi.n	800430c <RTC_DeInit+0x44>
    RTC->CR &= (uint32_t)0x00000007;
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 80042fc:	68e2      	ldr	r2, [r4, #12]
      wutcounter++;  
 80042fe:	9b01      	ldr	r3, [sp, #4]
 8004300:	3301      	adds	r3, #1
 8004302:	9301      	str	r3, [sp, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8004304:	9b01      	ldr	r3, [sp, #4]
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430a:	d1f5      	bne.n	80042f8 <RTC_DeInit+0x30>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800430c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004310:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004314:	68d8      	ldr	r0, [r3, #12]
 8004316:	f010 0004 	ands.w	r0, r0, #4
 800431a:	d107      	bne.n	800432c <RTC_DeInit+0x64>
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800431c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004320:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004324:	22ff      	movs	r2, #255	; 0xff
 8004326:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8004328:	b003      	add	sp, #12
 800432a:	bd30      	pop	{r4, r5, pc}
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
      RTC->WUTR = (uint32_t)0x0000FFFF;
      RTC->PRER = (uint32_t)0x007F00FF;
 800432c:	21ff      	movs	r1, #255	; 0xff
      status = ERROR;
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800432e:	6898      	ldr	r0, [r3, #8]
 8004330:	2200      	movs	r2, #0
      RTC->WUTR = (uint32_t)0x0000FFFF;
      RTC->PRER = (uint32_t)0x007F00FF;
 8004332:	f2c0 017f 	movt	r1, #127	; 0x7f
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
      RTC->WUTR = (uint32_t)0x0000FFFF;
 8004336:	f64f 70ff 	movw	r0, #65535	; 0xffff
      status = ERROR;
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800433a:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800433c:	6158      	str	r0, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800433e:	6119      	str	r1, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 8004340:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 8004342:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 8004344:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 8004348:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 800434a:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 800434c:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800434e:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 8004352:	f7ff ff93 	bl	800427c <RTC_WaitForSynchro>
      {
        status = ERROR;
 8004356:	3000      	adds	r0, #0
 8004358:	bf18      	it	ne
 800435a:	2001      	movne	r0, #1
 800435c:	e7de      	b.n	800431c <RTC_DeInit+0x54>
 800435e:	bf00      	nop

08004360 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8004360:	b538      	push	{r3, r4, r5, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004362:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 8004366:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800436a:	23ca      	movs	r3, #202	; 0xca
 800436c:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 800436e:	2353      	movs	r3, #83	; 0x53
 8004370:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 8004372:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8004374:	f7ff ff2c 	bl	80041d0 <RTC_EnterInitMode>
 8004378:	b168      	cbz	r0, 8004396 <RTC_RefClockCmd+0x36>
  else
  {  
    if (NewState != DISABLE)
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 800437a:	68a3      	ldr	r3, [r4, #8]
  {
    status = ERROR;
  } 
  else
  {  
    if (NewState != DISABLE)
 800437c:	b995      	cbnz	r5, 80043a4 <RTC_RefClockCmd+0x44>
      RTC->CR |= RTC_CR_REFCKON;   
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 800437e:	f023 0310 	bic.w	r3, r3, #16
 8004382:	60a3      	str	r3, [r4, #8]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004384:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004388:	f2c4 0300 	movt	r3, #16384	; 0x4000
      RTC->CR &= ~RTC_CR_REFCKON;    
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
    
    status = SUCCESS;
 800438c:	2001      	movs	r0, #1
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004394:	60da      	str	r2, [r3, #12]
    
    status = SUCCESS;
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 8004396:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800439a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800439e:	22ff      	movs	r2, #255	; 0xff
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
}
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
  else
  {  
    if (NewState != DISABLE)
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 80043a4:	f043 0310 	orr.w	r3, r3, #16
 80043a8:	60a3      	str	r3, [r4, #8]
 80043aa:	e7eb      	b.n	8004384 <RTC_RefClockCmd+0x24>

080043ac <RTC_BypassShadowCmd>:
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80043ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80043b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80043b4:	22ca      	movs	r2, #202	; 0xca
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80043b8:	2253      	movs	r2, #83	; 0x53
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80043bc:	689a      	ldr	r2, [r3, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
 80043be:	b948      	cbnz	r0, 80043d4 <RTC_BypassShadowCmd+0x28>
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 80043c0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80043c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80043c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80043ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80043ce:	22ff      	movs	r2, #255	; 0xff
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80043d2:	4770      	bx	lr
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80043d4:	f042 0220 	orr.w	r2, r2, #32
 80043d8:	609a      	str	r2, [r3, #8]
 80043da:	e7f4      	b.n	80043c6 <RTC_BypassShadowCmd+0x1a>

080043dc <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 80043dc:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80043de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80043e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
  ErrorStatus status = ERROR;
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d135      	bne.n	8004456 <RTC_SetTime+0x7a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f013 0440 	ands.w	r4, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 80043f0:	bf08      	it	eq
 80043f2:	70cc      	strbeq	r4, [r1, #3]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80043f4:	d001      	beq.n	80043fa <RTC_SetTime+0x1e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 80043f6:	78cc      	ldrb	r4, [r1, #3]
 80043f8:	0424      	lsls	r4, r4, #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 80043fa:	780b      	ldrb	r3, [r1, #0]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80043fc:	2500      	movs	r5, #0
 80043fe:	2b09      	cmp	r3, #9
 8004400:	d908      	bls.n	8004414 <RTC_SetTime+0x38>
 8004402:	2200      	movs	r2, #0
  {
    bcdhigh++;
    Value -= 10;
 8004404:	3b0a      	subs	r3, #10
 8004406:	b2db      	uxtb	r3, r3
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8004408:	3201      	adds	r2, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800440a:	2b09      	cmp	r3, #9
  {
    bcdhigh++;
 800440c:	b2d2      	uxtb	r2, r2
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800440e:	d8f9      	bhi.n	8004404 <RTC_SetTime+0x28>
 8004410:	0115      	lsls	r5, r2, #4
 8004412:	b2ed      	uxtb	r5, r5
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8004414:	784a      	ldrb	r2, [r1, #1]
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8004416:	431d      	orrs	r5, r3
 8004418:	042d      	lsls	r5, r5, #16
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800441a:	2000      	movs	r0, #0
 800441c:	2a09      	cmp	r2, #9
 800441e:	d907      	bls.n	8004430 <RTC_SetTime+0x54>
  {
    bcdhigh++;
    Value -= 10;
 8004420:	3a0a      	subs	r2, #10
 8004422:	b2d2      	uxtb	r2, r2
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8004424:	3001      	adds	r0, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8004426:	2a09      	cmp	r2, #9
  {
    bcdhigh++;
 8004428:	b2c0      	uxtb	r0, r0
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800442a:	d8f9      	bhi.n	8004420 <RTC_SetTime+0x44>
 800442c:	0100      	lsls	r0, r0, #4
 800442e:	b2c0      	uxtb	r0, r0
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8004430:	788b      	ldrb	r3, [r1, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8004432:	4302      	orrs	r2, r0
 8004434:	0212      	lsls	r2, r2, #8
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8004436:	2100      	movs	r1, #0
 8004438:	2b09      	cmp	r3, #9
 800443a:	d907      	bls.n	800444c <RTC_SetTime+0x70>
  {
    bcdhigh++;
    Value -= 10;
 800443c:	3b0a      	subs	r3, #10
 800443e:	b2db      	uxtb	r3, r3
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8004440:	3101      	adds	r1, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8004442:	2b09      	cmp	r3, #9
  {
    bcdhigh++;
 8004444:	b2c9      	uxtb	r1, r1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8004446:	d8f9      	bhi.n	800443c <RTC_SetTime+0x60>
 8004448:	0109      	lsls	r1, r1, #4
 800444a:	b2c9      	uxtb	r1, r1
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800444c:	4325      	orrs	r5, r4
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800444e:	4315      	orrs	r5, r2
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8004450:	430b      	orrs	r3, r1
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8004452:	431d      	orrs	r5, r3
 8004454:	e00d      	b.n	8004472 <RTC_SetTime+0x96>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004456:	689d      	ldr	r5, [r3, #8]
 8004458:	f015 0540 	ands.w	r5, r5, #64	; 0x40
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800445c:	bf08      	it	eq
 800445e:	70cd      	strbeq	r5, [r1, #3]
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004460:	d126      	bne.n	80044b0 <RTC_SetTime+0xd4>
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8004462:	784b      	ldrb	r3, [r1, #1]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8004464:	7808      	ldrb	r0, [r1, #0]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8004466:	788a      	ldrb	r2, [r1, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8004468:	021b      	lsls	r3, r3, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800446a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800446e:	4313      	orrs	r3, r2
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8004470:	431d      	orrs	r5, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004472:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 8004476:	f2c4 0400 	movt	r4, #16384	; 0x4000
 800447a:	23ca      	movs	r3, #202	; 0xca
 800447c:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 800447e:	2353      	movs	r3, #83	; 0x53
 8004480:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8004482:	f7ff fea5 	bl	80041d0 <RTC_EnterInitMode>
 8004486:	b160      	cbz	r0, 80044a2 <RTC_SetTime+0xc6>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004488:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 800448c:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8004490:	6025      	str	r5, [r4, #0]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004492:	68e3      	ldr	r3, [r4, #12]
 8004494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004498:	60e3      	str	r3, [r4, #12]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 800449a:	68a3      	ldr	r3, [r4, #8]
 800449c:	0698      	lsls	r0, r3, #26
 800449e:	d50a      	bpl.n	80044b6 <RTC_SetTime+0xda>
        status = SUCCESS;
      }
    }
    else
    {
      status = SUCCESS;
 80044a0:	2001      	movs	r0, #1
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80044a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80044a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80044aa:	22ff      	movs	r2, #255	; 0xff
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
}
 80044ae:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
    
  return status;
 80044b0:	78cd      	ldrb	r5, [r1, #3]
 80044b2:	042d      	lsls	r5, r5, #16
 80044b4:	e7d5      	b.n	8004462 <RTC_SetTime+0x86>
    RTC_ExitInitMode(); 

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
    {
      if (RTC_WaitForSynchro() == ERROR)
 80044b6:	f7ff fee1 	bl	800427c <RTC_WaitForSynchro>
      {
        status = ERROR;
 80044ba:	3000      	adds	r0, #0
 80044bc:	bf18      	it	ne
 80044be:	2001      	movne	r0, #1
 80044c0:	e7ef      	b.n	80044a2 <RTC_SetTime+0xc6>
 80044c2:	bf00      	nop

080044c4 <RTC_TimeStructInit>:
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 80044c4:	2300      	movs	r3, #0
 80044c6:	70c3      	strb	r3, [r0, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 80044c8:	7003      	strb	r3, [r0, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 80044ca:	7043      	strb	r3, [r0, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 80044cc:	7083      	strb	r3, [r0, #2]
}
 80044ce:	4770      	bx	lr

080044d0 <RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 80044d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80044d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 80044d8:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 80044da:	681b      	ldr	r3, [r3, #0]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 80044dc:	f403 0580 	and.w	r5, r3, #4194304	; 0x400000

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80044e0:	f3c3 4405 	ubfx	r4, r3, #16, #6
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80044e4:	f3c3 2206 	ubfx	r2, r3, #8, #7
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 80044e8:	0c2d      	lsrs	r5, r5, #16
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80044ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80044ee:	700c      	strb	r4, [r1, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80044f0:	704a      	strb	r2, [r1, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80044f2:	708b      	strb	r3, [r1, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 80044f4:	70cd      	strb	r5, [r1, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 80044f6:	b9b8      	cbnz	r0, 8004528 <RTC_GetTime+0x58>
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80044f8:	0926      	lsrs	r6, r4, #4
 80044fa:	0915      	lsrs	r5, r2, #4
 80044fc:	0918      	lsrs	r0, r3, #4
 80044fe:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004502:	f004 040f 	and.w	r4, r4, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004506:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800450a:	f002 020f 	and.w	r2, r2, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800450e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	eb04 0646 	add.w	r6, r4, r6, lsl #1
 800451a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 800451e:	eb03 0340 	add.w	r3, r3, r0, lsl #1

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8004522:	700e      	strb	r6, [r1, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8004524:	704d      	strb	r5, [r1, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8004526:	708b      	strb	r3, [r1, #2]
  }
}
 8004528:	bc70      	pop	{r4, r5, r6}
 800452a:	4770      	bx	lr

0800452c <RTC_GetSubSecond>:
uint32_t RTC_GetSubSecond(void)
{
  uint32_t tmpreg = 0;
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 800452c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004530:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004534:	6a98      	ldr	r0, [r3, #40]	; 0x28
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 8004536:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop

0800453c <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800453c:	b538      	push	{r3, r4, r5, lr}
  ErrorStatus status = ERROR;
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 800453e:	2800      	cmp	r0, #0
 8004540:	d154      	bne.n	80045ec <RTC_SetDate+0xb0>
 8004542:	784b      	ldrb	r3, [r1, #1]
 8004544:	06da      	lsls	r2, r3, #27
 8004546:	d504      	bpl.n	8004552 <RTC_SetDate+0x16>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8004548:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800454c:	330a      	adds	r3, #10
 800454e:	b2db      	uxtb	r3, r3
 8004550:	704b      	strb	r3, [r1, #1]
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8004552:	78ca      	ldrb	r2, [r1, #3]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8004554:	2000      	movs	r0, #0
 8004556:	2a09      	cmp	r2, #9
 8004558:	d907      	bls.n	800456a <RTC_SetDate+0x2e>
  {
    bcdhigh++;
    Value -= 10;
 800455a:	3a0a      	subs	r2, #10
 800455c:	b2d2      	uxtb	r2, r2
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 800455e:	3001      	adds	r0, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8004560:	2a09      	cmp	r2, #9
  {
    bcdhigh++;
 8004562:	b2c0      	uxtb	r0, r0
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8004564:	d8f9      	bhi.n	800455a <RTC_SetDate+0x1e>
 8004566:	0100      	lsls	r0, r0, #4
 8004568:	b2c0      	uxtb	r0, r0
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800456a:	4302      	orrs	r2, r0
 800456c:	0412      	lsls	r2, r2, #16
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800456e:	2500      	movs	r5, #0
 8004570:	2b09      	cmp	r3, #9
 8004572:	d908      	bls.n	8004586 <RTC_SetDate+0x4a>
 8004574:	2000      	movs	r0, #0
  {
    bcdhigh++;
    Value -= 10;
 8004576:	3b0a      	subs	r3, #10
 8004578:	b2db      	uxtb	r3, r3
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 800457a:	3001      	adds	r0, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800457c:	2b09      	cmp	r3, #9
  {
    bcdhigh++;
 800457e:	b2c0      	uxtb	r0, r0
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8004580:	d8f9      	bhi.n	8004576 <RTC_SetDate+0x3a>
 8004582:	0100      	lsls	r0, r0, #4
 8004584:	b2c5      	uxtb	r5, r0
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 8004586:	7888      	ldrb	r0, [r1, #2]
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8004588:	432b      	orrs	r3, r5
 800458a:	021b      	lsls	r3, r3, #8
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800458c:	2400      	movs	r4, #0
 800458e:	2809      	cmp	r0, #9
 8004590:	d907      	bls.n	80045a2 <RTC_SetDate+0x66>
  {
    bcdhigh++;
    Value -= 10;
 8004592:	380a      	subs	r0, #10
 8004594:	b2c0      	uxtb	r0, r0
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 8004596:	3401      	adds	r4, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8004598:	2809      	cmp	r0, #9
  {
    bcdhigh++;
 800459a:	b2e4      	uxtb	r4, r4
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800459c:	d8f9      	bhi.n	8004592 <RTC_SetDate+0x56>
 800459e:	0124      	lsls	r4, r4, #4
 80045a0:	b2e4      	uxtb	r4, r4
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 80045a2:	780d      	ldrb	r5, [r1, #0]
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80045a4:	ea42 3545 	orr.w	r5, r2, r5, lsl #13
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 80045a8:	431d      	orrs	r5, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 80045aa:	4320      	orrs	r0, r4
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 80045ac:	4305      	orrs	r5, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80045ae:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 80045b2:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80045b6:	23ca      	movs	r3, #202	; 0xca
 80045b8:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 80045ba:	2353      	movs	r3, #83	; 0x53
 80045bc:	6263      	str	r3, [r4, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80045be:	f7ff fe07 	bl	80041d0 <RTC_EnterInitMode>
 80045c2:	b160      	cbz	r0, 80045de <RTC_SetDate+0xa2>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 80045c4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80045c8:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80045cc:	6065      	str	r5, [r4, #4]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 80045ce:	68e3      	ldr	r3, [r4, #12]
 80045d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d4:	60e3      	str	r3, [r4, #12]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 80045d6:	68a3      	ldr	r3, [r4, #8]
 80045d8:	069b      	lsls	r3, r3, #26
 80045da:	d512      	bpl.n	8004602 <RTC_SetDate+0xc6>
        status = SUCCESS;
      }
    }
    else
    {
      status = SUCCESS;
 80045dc:	2001      	movs	r0, #1
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 80045de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80045e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80045e6:	22ff      	movs	r2, #255	; 0xff
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 80045ea:	bd38      	pop	{r3, r4, r5, pc}

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80045ec:	784d      	ldrb	r5, [r1, #1]
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80045ee:	78c8      	ldrb	r0, [r1, #3]
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 80045f0:	788a      	ldrb	r2, [r1, #2]
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 80045f2:	780b      	ldrb	r3, [r1, #0]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80045f4:	022d      	lsls	r5, r5, #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80045f6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 80045fa:	4315      	orrs	r5, r2
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 80045fc:	ea45 3543 	orr.w	r5, r5, r3, lsl #13
 8004600:	e7d5      	b.n	80045ae <RTC_SetDate+0x72>
    RTC_ExitInitMode(); 

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
    {
      if (RTC_WaitForSynchro() == ERROR)
 8004602:	f7ff fe3b 	bl	800427c <RTC_WaitForSynchro>
      {
        status = ERROR;
 8004606:	3000      	adds	r0, #0
 8004608:	bf18      	it	ne
 800460a:	2001      	movne	r0, #1
 800460c:	e7e7      	b.n	80045de <RTC_SetDate+0xa2>
 800460e:	bf00      	nop

08004610 <RTC_DateStructInit>:
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 8004610:	2301      	movs	r3, #1
 8004612:	7003      	strb	r3, [r0, #0]
  RTC_DateStruct->RTC_Date = 1;
 8004614:	7083      	strb	r3, [r0, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 8004616:	7043      	strb	r3, [r0, #1]
  RTC_DateStruct->RTC_Year = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	70c3      	strb	r3, [r0, #3]
}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop

08004620 <RTC_GetDate>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 8004620:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004624:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8004628:	b4f0      	push	{r4, r5, r6, r7}

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800462a:	685b      	ldr	r3, [r3, #4]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800462c:	f3c3 4507 	ubfx	r5, r3, #16, #8
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8004630:	f3c3 2404 	ubfx	r4, r3, #8, #5
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004634:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 8004638:	f3c3 3342 	ubfx	r3, r3, #13, #3
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800463c:	70cd      	strb	r5, [r1, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800463e:	704c      	strb	r4, [r1, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004640:	708a      	strb	r2, [r1, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 8004642:	700b      	strb	r3, [r1, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8004644:	b9b8      	cbnz	r0, 8004676 <RTC_GetDate+0x56>
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004646:	0920      	lsrs	r0, r4, #4
 8004648:	092e      	lsrs	r6, r5, #4
 800464a:	0913      	lsrs	r3, r2, #4
 800464c:	0087      	lsls	r7, r0, #2
 800464e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004652:	f005 050f 	and.w	r5, r5, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004656:	1838      	adds	r0, r7, r0
  return (tmp + (Value & (uint8_t)0x0F));
 8004658:	f004 040f 	and.w	r4, r4, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800465c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004660:	f002 020f 	and.w	r2, r2, #15
 8004664:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 8004668:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 800466c:	eb02 0343 	add.w	r3, r2, r3, lsl #1

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 8004670:	70ce      	strb	r6, [r1, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8004672:	7048      	strb	r0, [r1, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 8004674:	708b      	strb	r3, [r1, #2]
  }
}
 8004676:	bcf0      	pop	{r4, r5, r6, r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop

0800467c <RTC_SetAlarm>:
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800467c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 8004680:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004682:	f2c4 0300 	movt	r3, #16384	; 0x4000
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 8004686:	2800      	cmp	r0, #0
 8004688:	d14a      	bne.n	8004720 <RTC_SetAlarm+0xa4>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800468a:	689d      	ldr	r5, [r3, #8]
 800468c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8004690:	bf08      	it	eq
 8004692:	70d5      	strbeq	r5, [r2, #3]
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004694:	d001      	beq.n	800469a <RTC_SetAlarm+0x1e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8004696:	78d5      	ldrb	r5, [r2, #3]
 8004698:	042d      	lsls	r5, r5, #16
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800469a:	7810      	ldrb	r0, [r2, #0]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800469c:	2600      	movs	r6, #0
 800469e:	2809      	cmp	r0, #9
 80046a0:	d908      	bls.n	80046b4 <RTC_SetAlarm+0x38>
 80046a2:	2300      	movs	r3, #0
  {
    bcdhigh++;
    Value -= 10;
 80046a4:	380a      	subs	r0, #10
 80046a6:	b2c0      	uxtb	r0, r0
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 80046a8:	3301      	adds	r3, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80046aa:	2809      	cmp	r0, #9
  {
    bcdhigh++;
 80046ac:	b2db      	uxtb	r3, r3
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80046ae:	d8f9      	bhi.n	80046a4 <RTC_SetAlarm+0x28>
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	b2de      	uxtb	r6, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 80046b4:	7853      	ldrb	r3, [r2, #1]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80046b6:	4330      	orrs	r0, r6
 80046b8:	0406      	lsls	r6, r0, #16
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80046ba:	2400      	movs	r4, #0
 80046bc:	2b09      	cmp	r3, #9
 80046be:	d907      	bls.n	80046d0 <RTC_SetAlarm+0x54>
  {
    bcdhigh++;
    Value -= 10;
 80046c0:	3b0a      	subs	r3, #10
 80046c2:	b2db      	uxtb	r3, r3
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 80046c4:	3401      	adds	r4, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80046c6:	2b09      	cmp	r3, #9
  {
    bcdhigh++;
 80046c8:	b2e4      	uxtb	r4, r4
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80046ca:	d8f9      	bhi.n	80046c0 <RTC_SetAlarm+0x44>
 80046cc:	0124      	lsls	r4, r4, #4
 80046ce:	b2e4      	uxtb	r4, r4
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 80046d0:	7890      	ldrb	r0, [r2, #2]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 80046d2:	4323      	orrs	r3, r4
 80046d4:	021f      	lsls	r7, r3, #8
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80046d6:	2400      	movs	r4, #0
 80046d8:	2809      	cmp	r0, #9
 80046da:	d907      	bls.n	80046ec <RTC_SetAlarm+0x70>
  {
    bcdhigh++;
    Value -= 10;
 80046dc:	380a      	subs	r0, #10
 80046de:	b2c0      	uxtb	r0, r0
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 80046e0:	3401      	adds	r4, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80046e2:	2809      	cmp	r0, #9
  {
    bcdhigh++;
 80046e4:	b2e4      	uxtb	r4, r4
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80046e6:	d8f9      	bhi.n	80046dc <RTC_SetAlarm+0x60>
 80046e8:	0124      	lsls	r4, r4, #4
 80046ea:	b2e4      	uxtb	r4, r4
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 80046ec:	7b13      	ldrb	r3, [r2, #12]
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 80046ee:	4320      	orrs	r0, r4
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80046f0:	2400      	movs	r4, #0
 80046f2:	2b09      	cmp	r3, #9
 80046f4:	d907      	bls.n	8004706 <RTC_SetAlarm+0x8a>
  {
    bcdhigh++;
    Value -= 10;
 80046f6:	3b0a      	subs	r3, #10
 80046f8:	b2db      	uxtb	r3, r3
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
  {
    bcdhigh++;
 80046fa:	3401      	adds	r4, #1
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 80046fc:	2b09      	cmp	r3, #9
  {
    bcdhigh++;
 80046fe:	b2e4      	uxtb	r4, r4
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8004700:	d8f9      	bhi.n	80046f6 <RTC_SetAlarm+0x7a>
 8004702:	0124      	lsls	r4, r4, #4
 8004704:	b2e4      	uxtb	r4, r4
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8004706:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800470a:	6892      	ldr	r2, [r2, #8]
 800470c:	ea4c 0202 	orr.w	r2, ip, r2
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8004710:	4315      	orrs	r5, r2
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8004712:	432e      	orrs	r6, r5
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8004714:	4337      	orrs	r7, r6
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8004716:	4338      	orrs	r0, r7
 8004718:	4323      	orrs	r3, r4
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800471a:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
 800471e:	e016      	b.n	800474e <RTC_SetAlarm+0xd2>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 8004726:	bf08      	it	eq
 8004728:	70d3      	strbeq	r3, [r2, #3]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800472a:	d125      	bne.n	8004778 <RTC_SetAlarm+0xfc>
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800472c:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8004730:	6897      	ldr	r7, [r2, #8]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8004732:	7896      	ldrb	r6, [r2, #2]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8004734:	7815      	ldrb	r5, [r2, #0]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8004736:	7854      	ldrb	r4, [r2, #1]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8004738:	7b10      	ldrb	r0, [r2, #12]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800473a:	ea4c 0207 	orr.w	r2, ip, r7
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800473e:	4332      	orrs	r2, r6
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 8004740:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8004744:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8004748:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800474c:	4313      	orrs	r3, r2
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800474e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004752:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004756:	24ca      	movs	r4, #202	; 0xca
 8004758:	6254      	str	r4, [r2, #36]	; 0x24
  RTC->WPR = 0x53;
 800475a:	2453      	movs	r4, #83	; 0x53

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800475c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 8004760:	6254      	str	r4, [r2, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 8004762:	bf0c      	ite	eq
 8004764:	61d3      	streq	r3, [r2, #28]
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 8004766:	6213      	strne	r3, [r2, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8004768:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800476c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004770:	22ff      	movs	r2, #255	; 0xff
 8004772:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004774:	bcf0      	pop	{r4, r5, r6, r7}
 8004776:	4770      	bx	lr
 8004778:	78d3      	ldrb	r3, [r2, #3]
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	e7d6      	b.n	800472c <RTC_SetAlarm+0xb0>
 800477e:	bf00      	nop

08004780 <RTC_AlarmStructInit>:
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 8004780:	2300      	movs	r3, #0
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 8004782:	2201      	movs	r2, #1
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 8004784:	70c3      	strb	r3, [r0, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 8004786:	7003      	strb	r3, [r0, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 8004788:	7043      	strb	r3, [r0, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800478a:	7083      	strb	r3, [r0, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800478c:	6083      	str	r3, [r0, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800478e:	7302      	strb	r2, [r0, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 8004790:	6043      	str	r3, [r0, #4]
}
 8004792:	4770      	bx	lr

08004794 <RTC_GetAlarm>:
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 8004794:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004798:	f2c4 0300 	movt	r3, #16384	; 0x4000
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800479c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 80047a0:	bf0c      	ite	eq
 80047a2:	69db      	ldreq	r3, [r3, #28]
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 80047a4:	6a1b      	ldrne	r3, [r3, #32]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 80047a6:	f403 0c80 	and.w	ip, r3, #4194304	; 0x400000
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80047aa:	b4f0      	push	{r4, r5, r6, r7}
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 80047ac:	f3c3 6105 	ubfx	r1, r3, #24, #6
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 80047b0:	f3c3 4605 	ubfx	r6, r3, #16, #6
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 80047b4:	f3c3 2506 	ubfx	r5, r3, #8, #7
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 80047b8:	f003 047f 	and.w	r4, r3, #127	; 0x7f
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80047bc:	f003 4780 	and.w	r7, r3, #1073741824	; 0x40000000
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 80047c0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 80047c4:	f003 3380 	and.w	r3, r3, #2155905152	; 0x80808080
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 80047c8:	7016      	strb	r6, [r2, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 80047ca:	7055      	strb	r5, [r2, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 80047cc:	7094      	strb	r4, [r2, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 80047ce:	f882 c003 	strb.w	ip, [r2, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 80047d2:	7311      	strb	r1, [r2, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80047d4:	6097      	str	r7, [r2, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 80047d6:	6053      	str	r3, [r2, #4]

  if (RTC_Format == RTC_Format_BIN)
 80047d8:	bb08      	cbnz	r0, 800481e <RTC_GetAlarm+0x8a>
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80047da:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 80047de:	092f      	lsrs	r7, r5, #4
 80047e0:	0920      	lsrs	r0, r4, #4
 80047e2:	090b      	lsrs	r3, r1, #4
 80047e4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80047e8:	f006 060f 	and.w	r6, r6, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80047ec:	eb07 0787 	add.w	r7, r7, r7, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80047f0:	f005 050f 	and.w	r5, r5, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80047f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 80047f8:	f004 040f 	and.w	r4, r4, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80047fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004800:	f001 010f 	and.w	r1, r1, #15
 8004804:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 8004808:	eb05 0747 	add.w	r7, r5, r7, lsl #1
 800480c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8004810:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);

  if (RTC_Format == RTC_Format_BIN)
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8004814:	f882 c000 	strb.w	ip, [r2]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 8004818:	7057      	strb	r7, [r2, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800481a:	7090      	strb	r0, [r2, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800481c:	7313      	strb	r3, [r2, #12]
  }  
}
 800481e:	bcf0      	pop	{r4, r5, r6, r7}
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop

08004824 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8004824:	b082      	sub	sp, #8
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004826:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800482a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
  __IO uint32_t alarmcounter = 0x00;
 800482e:	2200      	movs	r2, #0
 8004830:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004832:	22ca      	movs	r2, #202	; 0xca
 8004834:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004836:	2253      	movs	r2, #83	; 0x53
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800483a:	689a      	ldr	r2, [r3, #8]
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800483c:	b9f1      	cbnz	r1, 800487c <RTC_AlarmCmd+0x58>
    status = SUCCESS;    
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800483e:	ea22 0200 	bic.w	r2, r2, r0
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	0a00      	lsrs	r0, r0, #8
 8004846:	e001      	b.n	800484c <RTC_AlarmCmd+0x28>
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
      alarmcounter++;  
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8004848:	4208      	tst	r0, r1
 800484a:	d107      	bne.n	800485c <RTC_AlarmCmd+0x38>
    RTC->CR &= (uint32_t)~RTC_Alarm;
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800484c:	68d9      	ldr	r1, [r3, #12]
      alarmcounter++;  
 800484e:	9a01      	ldr	r2, [sp, #4]
 8004850:	3201      	adds	r2, #1
 8004852:	9201      	str	r2, [sp, #4]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 8004854:	9a01      	ldr	r2, [sp, #4]
 8004856:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800485a:	d1f5      	bne.n	8004848 <RTC_AlarmCmd+0x24>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800485c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004860:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004864:	68db      	ldr	r3, [r3, #12]
    {
      status = ERROR;
    } 
    else
    {
      status = SUCCESS;
 8004866:	4018      	ands	r0, r3
 8004868:	bf18      	it	ne
 800486a:	2001      	movne	r0, #1
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800486c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004870:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004874:	22ff      	movs	r2, #255	; 0xff
 8004876:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8004878:	b002      	add	sp, #8
 800487a:	4770      	bx	lr
  RTC->WPR = 0x53;

  /* Configure the Alarm state */
  if (NewState != DISABLE)
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800487c:	4310      	orrs	r0, r2
 800487e:	6098      	str	r0, [r3, #8]

    status = SUCCESS;    
 8004880:	2001      	movs	r0, #1
 8004882:	e7f3      	b.n	800486c <RTC_AlarmCmd+0x48>

08004884 <RTC_AlarmSubSecondConfig>:
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004884:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004888:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 800488c:	b410      	push	{r4}
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800488e:	24ca      	movs	r4, #202	; 0xca
 8004890:	625c      	str	r4, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 8004892:	430a      	orrs	r2, r1
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 8004894:	2453      	movs	r4, #83	; 0x53
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
  
  if (RTC_Alarm == RTC_Alarm_A)
 8004896:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
 800489a:	625c      	str	r4, [r3, #36]	; 0x24
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
  
  if (RTC_Alarm == RTC_Alarm_A)
  {
    /* Configure the AlarmA SubSecond register */
    RTC->ALRMASSR = tmpreg;
 800489c:	bf0c      	ite	eq
 800489e:	645a      	streq	r2, [r3, #68]	; 0x44
  }
  else
  {
    /* Configure the Alarm B SubSecond register */
    RTC->ALRMBSSR = tmpreg;
 80048a0:	649a      	strne	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80048a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80048a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048aa:	22ff      	movs	r2, #255	; 0xff
 80048ac:	625a      	str	r2, [r3, #36]	; 0x24

}
 80048ae:	bc10      	pop	{r4}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <RTC_GetAlarmSubSecond>:
  uint32_t tmpreg = 0;
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 80048b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
  uint32_t tmpreg = 0;
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 80048b8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 80048bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
  uint32_t tmpreg = 0;
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 80048c0:	d003      	beq.n	80048ca <RTC_GetAlarmSubSecond+0x16>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80048c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80048c4:	0440      	lsls	r0, r0, #17
 80048c6:	0c40      	lsrs	r0, r0, #17
  } 
  
  return (tmpreg);
}
 80048c8:	4770      	bx	lr
  uint32_t tmpreg = 0;
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 80048ca:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80048cc:	0440      	lsls	r0, r0, #17
 80048ce:	0c40      	lsrs	r0, r0, #17
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop

080048d4 <RTC_WakeUpClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80048d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80048d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048dc:	22ca      	movs	r2, #202	; 0xca
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80048e0:	2253      	movs	r2, #83	; 0x53
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	f022 0207 	bic.w	r2, r2, #7
 80048ea:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	4302      	orrs	r2, r0
 80048f0:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80048f2:	22ff      	movs	r2, #255	; 0xff
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80048f6:	4770      	bx	lr

080048f8 <RTC_SetWakeUpCounter>:
{
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80048f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80048fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004900:	22ca      	movs	r2, #202	; 0xca
 8004902:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004904:	2253      	movs	r2, #83	; 0x53
 8004906:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004908:	22ff      	movs	r2, #255	; 0xff
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800490a:	6158      	str	r0, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800490c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800490e:	4770      	bx	lr

08004910 <RTC_GetWakeUpCounter>:
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 8004910:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004914:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004918:	6958      	ldr	r0, [r3, #20]
}
 800491a:	b280      	uxth	r0, r0
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop

08004920 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 8004920:	b082      	sub	sp, #8
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004922:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004926:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
  __IO uint32_t wutcounter = 0x00;
 800492a:	2200      	movs	r2, #0
 800492c:	9201      	str	r2, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800492e:	22ca      	movs	r2, #202	; 0xca
 8004930:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004932:	2253      	movs	r2, #83	; 0x53
 8004934:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8004936:	689a      	ldr	r2, [r3, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  if (NewState != DISABLE)
 8004938:	b9e0      	cbnz	r0, 8004974 <RTC_WakeUpCmd+0x54>
    status = SUCCESS;    
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800493a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	e001      	b.n	8004946 <RTC_WakeUpCmd+0x26>
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
      wutcounter++;  
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 8004942:	0749      	lsls	r1, r1, #29
 8004944:	d407      	bmi.n	8004956 <RTC_WakeUpCmd+0x36>
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 8004946:	68d9      	ldr	r1, [r3, #12]
      wutcounter++;  
 8004948:	9a01      	ldr	r2, [sp, #4]
 800494a:	3201      	adds	r2, #1
 800494c:	9201      	str	r2, [sp, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800494e:	9a01      	ldr	r2, [sp, #4]
 8004950:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004954:	d1f5      	bne.n	8004942 <RTC_WakeUpCmd+0x22>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8004956:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800495a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800495e:	68d8      	ldr	r0, [r3, #12]
    {
      status = ERROR;
 8004960:	f3c0 0080 	ubfx	r0, r0, #2, #1
      status = SUCCESS;
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004964:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004968:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800496c:	22ff      	movs	r2, #255	; 0xff
 800496e:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8004970:	b002      	add	sp, #8
 8004972:	4770      	bx	lr
  RTC->WPR = 0x53;

  if (NewState != DISABLE)
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 8004974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004978:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 800497a:	2001      	movs	r0, #1
 800497c:	e7f2      	b.n	8004964 <RTC_WakeUpCmd+0x44>
 800497e:	bf00      	nop

08004980 <RTC_DayLightSavingConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004980:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004984:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004988:	22ca      	movs	r2, #202	; 0xca
 800498a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800498c:	2253      	movs	r2, #83	; 0x53
 800498e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 8004990:	689a      	ldr	r2, [r3, #8]
 8004992:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004996:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	4302      	orrs	r2, r0
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80049a0:	22ff      	movs	r2, #255	; 0xff
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop

080049a8 <RTC_GetStoreOperation>:
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
  return (RTC->CR & RTC_CR_BCK);
 80049a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80049ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80049b0:	6898      	ldr	r0, [r3, #8]
}
 80049b2:	f400 2080 	and.w	r0, r0, #262144	; 0x40000
 80049b6:	4770      	bx	lr

080049b8 <RTC_OutputConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80049b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80049bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80049c0:	22ca      	movs	r2, #202	; 0xca
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80049c4:	2253      	movs	r2, #83	; 0x53
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80049ce:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	4302      	orrs	r2, r0
 80049d4:	430a      	orrs	r2, r1
 80049d6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80049d8:	22ff      	movs	r2, #255	; 0xff
 80049da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop

080049e0 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 80049e0:	b570      	push	{r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80049e2:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 80049e6:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80049ea:	23ca      	movs	r3, #202	; 0xca
 80049ec:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 80049ee:	2353      	movs	r3, #83	; 0x53
 80049f0:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 80049f2:	4605      	mov	r5, r0
 80049f4:	460e      	mov	r6, r1
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 80049f6:	f7ff fbeb 	bl	80041d0 <RTC_EnterInitMode>
 80049fa:	b130      	cbz	r0, 8004a0a <RTC_CoarseCalibConfig+0x2a>
    status = ERROR;
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 80049fc:	4335      	orrs	r5, r6
 80049fe:	61a5      	str	r5, [r4, #24]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004a00:	68e3      	ldr	r3, [r4, #12]
 8004a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a06:	60e3      	str	r3, [r4, #12]
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
    /* Exit Initialization mode */
    RTC_ExitInitMode();
    
    status = SUCCESS;
 8004a08:	2001      	movs	r0, #1
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004a0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004a0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a12:	22ff      	movs	r2, #255	; 0xff
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8004a16:	bd70      	pop	{r4, r5, r6, pc}

08004a18 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8004a18:	b538      	push	{r3, r4, r5, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004a1a:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 8004a1e:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8004a22:	23ca      	movs	r3, #202	; 0xca
 8004a24:	6263      	str	r3, [r4, #36]	; 0x24
  RTC->WPR = 0x53;
 8004a26:	2353      	movs	r3, #83	; 0x53
 8004a28:	6263      	str	r3, [r4, #36]	; 0x24
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8004a2a:	4605      	mov	r5, r0
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8004a2c:	f7ff fbd0 	bl	80041d0 <RTC_EnterInitMode>
 8004a30:	b168      	cbz	r0, 8004a4e <RTC_CoarseCalibCmd+0x36>
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8004a32:	68a3      	ldr	r3, [r4, #8]
  {
    status =  ERROR;
  }
  else
  {
    if (NewState != DISABLE)
 8004a34:	b995      	cbnz	r5, 8004a5c <RTC_CoarseCalibCmd+0x44>
      RTC->CR |= (uint32_t)RTC_CR_DCE;
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 8004a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a3a:	60a3      	str	r3, [r4, #8]
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004a3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004a40:	f2c4 0300 	movt	r3, #16384	; 0x4000
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
    
    status = SUCCESS;
 8004a44:	2001      	movs	r0, #1
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a4c:	60da      	str	r2, [r3, #12]
    
    status = SUCCESS;
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004a4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004a52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a56:	22ff      	movs	r2, #255	; 0xff
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8004a5a:	bd38      	pop	{r3, r4, r5, pc}
  else
  {
    if (NewState != DISABLE)
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8004a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a60:	60a3      	str	r3, [r4, #8]
 8004a62:	e7eb      	b.n	8004a3c <RTC_CoarseCalibCmd+0x24>

08004a64 <RTC_CalibOutputCmd>:
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004a64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004a68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a6c:	22ca      	movs	r2, #202	; 0xca
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004a70:	2253      	movs	r2, #83	; 0x53
 8004a72:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 8004a74:	689a      	ldr	r2, [r3, #8]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
 8004a76:	b948      	cbnz	r0, 8004a8c <RTC_CalibOutputCmd+0x28>
    RTC->CR |= (uint32_t)RTC_CR_COE;
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 8004a78:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004a7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004a7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004a82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a86:	22ff      	movs	r2, #255	; 0xff
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004a8a:	4770      	bx	lr
  RTC->WPR = 0x53;
  
  if (NewState != DISABLE)
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 8004a8c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	e7f4      	b.n	8004a7e <RTC_CalibOutputCmd+0x1a>

08004a94 <RTC_CalibOutputConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004a94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004a98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a9c:	22ca      	movs	r2, #202	; 0xca
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004aa0:	2253      	movs	r2, #83	; 0x53
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8004aaa:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	4302      	orrs	r2, r0
 8004ab0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004ab2:	22ff      	movs	r2, #255	; 0xff
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004ab6:	4770      	bx	lr

08004ab8 <RTC_SmoothCalibConfig>:
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004ab8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004abc:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8004ac0:	b430      	push	{r4, r5}
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004ac2:	24ca      	movs	r4, #202	; 0xca
 8004ac4:	625c      	str	r4, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004ac6:	2453      	movs	r4, #83	; 0x53
 8004ac8:	625c      	str	r4, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8004aca:	68dc      	ldr	r4, [r3, #12]
 8004acc:	03e4      	lsls	r4, r4, #15
 8004ace:	d50b      	bpl.n	8004ae8 <RTC_SmoothCalibConfig+0x30>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8004ad0:	68dc      	ldr	r4, [r3, #12]
 8004ad2:	03e4      	lsls	r4, r4, #15
 8004ad4:	d508      	bpl.n	8004ae8 <RTC_SmoothCalibConfig+0x30>
 8004ad6:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8004ada:	e001      	b.n	8004ae0 <RTC_SmoothCalibConfig+0x28>
 8004adc:	3c01      	subs	r4, #1
 8004ade:	d003      	beq.n	8004ae8 <RTC_SmoothCalibConfig+0x30>
 8004ae0:	68dd      	ldr	r5, [r3, #12]
 8004ae2:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8004ae6:	d1f9      	bne.n	8004adc <RTC_SmoothCalibConfig+0x24>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 8004ae8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004aec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004af0:	68dc      	ldr	r4, [r3, #12]
 8004af2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8004af6:	d10b      	bne.n	8004b10 <RTC_SmoothCalibConfig+0x58>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8004af8:	4308      	orrs	r0, r1
 8004afa:	4302      	orrs	r2, r0
 8004afc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 8004afe:	2001      	movs	r0, #1
  {
    status = ERROR;
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004b00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004b04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b08:	22ff      	movs	r2, #255	; 0xff
 8004b0a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
}
 8004b0c:	bc30      	pop	{r4, r5}
 8004b0e:	4770      	bx	lr

    status = SUCCESS;
  }
  else
  {
    status = ERROR;
 8004b10:	2000      	movs	r0, #0
 8004b12:	e7f5      	b.n	8004b00 <RTC_SmoothCalibConfig+0x48>

08004b14 <RTC_TimeStampCmd>:
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8004b14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004b18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b22:	f023 0308 	bic.w	r3, r3, #8

  /* Get the new configuration */
  if (NewState != DISABLE)
 8004b26:	b961      	cbnz	r1, 8004b42 <RTC_TimeStampCmd+0x2e>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 8004b28:	4318      	orrs	r0, r3
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004b2a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004b2e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004b32:	23ca      	movs	r3, #202	; 0xca
 8004b34:	6253      	str	r3, [r2, #36]	; 0x24
  RTC->WPR = 0x53;
 8004b36:	2353      	movs	r3, #83	; 0x53
 8004b38:	6253      	str	r3, [r2, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004b3a:	23ff      	movs	r3, #255	; 0xff
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 8004b3c:	6090      	str	r0, [r2, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004b3e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004b40:	4770      	bx	lr
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));

  /* Get the new configuration */
  if (NewState != DISABLE)
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 8004b42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b46:	4318      	orrs	r0, r3
 8004b48:	e7ef      	b.n	8004b2a <RTC_TimeStampCmd+0x16>
 8004b4a:	bf00      	nop

08004b4c <RTC_GetTimeStamp>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8004b4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004b50:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8004b54:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8004b58:	6b1c      	ldr	r4, [r3, #48]	; 0x30
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8004b5c:	f404 0780 	and.w	r7, r4, #4194304	; 0x400000
  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8004b60:	f3c4 4805 	ubfx	r8, r4, #16, #6
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8004b64:	f3c4 2c06 	ubfx	ip, r4, #8, #7
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8004b68:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8004b6c:	708c      	strb	r4, [r1, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8004b6e:	f3c3 2604 	ubfx	r6, r3, #8, #5
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8004b72:	f003 053f 	and.w	r5, r3, #63	; 0x3f

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8004b76:	0c3f      	lsrs	r7, r7, #16

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8004b78:	f3c3 3342 	ubfx	r3, r3, #13, #3
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8004b7c:	2400      	movs	r4, #0
  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8004b7e:	f881 8000 	strb.w	r8, [r1]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8004b82:	f881 c001 	strb.w	ip, [r1, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8004b86:	70cf      	strb	r7, [r1, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8004b88:	70d4      	strb	r4, [r2, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8004b8a:	7056      	strb	r6, [r2, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8004b8c:	7095      	strb	r5, [r2, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8004b8e:	7013      	strb	r3, [r2, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d135      	bne.n	8004c00 <RTC_GetTimeStamp+0xb4>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8004b94:	780e      	ldrb	r6, [r1, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 8004b96:	784c      	ldrb	r4, [r1, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8004b98:	788b      	ldrb	r3, [r1, #2]
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004b9a:	0937      	lsrs	r7, r6, #4
 8004b9c:	0925      	lsrs	r5, r4, #4
 8004b9e:	0918      	lsrs	r0, r3, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8004ba0:	f006 060f 	and.w	r6, r6, #15
 8004ba4:	f004 040f 	and.w	r4, r4, #15
 8004ba8:	f003 030f 	and.w	r3, r3, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004bac:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004bb0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8004bb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004bb8:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8004bbc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004bc0:	eb06 0747 	add.w	r7, r6, r7, lsl #1

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8004bc4:	700f      	strb	r7, [r1, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 8004bc6:	704d      	strb	r5, [r1, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8004bc8:	7088      	strb	r0, [r1, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 8004bca:	7855      	ldrb	r5, [r2, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8004bcc:	7890      	ldrb	r0, [r2, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 8004bce:	7813      	ldrb	r3, [r2, #0]
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004bd0:	092e      	lsrs	r6, r5, #4
 8004bd2:	0904      	lsrs	r4, r0, #4
 8004bd4:	0919      	lsrs	r1, r3, #4
 8004bd6:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004bda:	f005 050f 	and.w	r5, r5, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004bde:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004be2:	f000 000f 	and.w	r0, r0, #15
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004be6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	eb05 0646 	add.w	r6, r5, r6, lsl #1
 8004bf2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8004bf6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 8004bfa:	7056      	strb	r6, [r2, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8004bfc:	7094      	strb	r4, [r2, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 8004bfe:	7011      	strb	r1, [r2, #0]
  }
}
 8004c00:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop

08004c08 <RTC_GetTimeStampSubSecond>:
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 8004c08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c10:	6b98      	ldr	r0, [r3, #56]	; 0x38
}
 8004c12:	4770      	bx	lr

08004c14 <RTC_TamperTriggerConfig>:
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8004c14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 8004c1e:	b119      	cbz	r1, 8004c28 <RTC_TamperTriggerConfig+0x14>
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8004c20:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 8004c24:	6418      	str	r0, [r3, #64]	; 0x40
 8004c26:	4770      	bx	lr
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8004c28:	ea22 0040 	bic.w	r0, r2, r0, lsl #1
 8004c2c:	6418      	str	r0, [r3, #64]	; 0x40
 8004c2e:	4770      	bx	lr

08004c30 <RTC_TamperCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8004c30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004c3a:	b919      	cbnz	r1, 8004c44 <RTC_TamperCmd+0x14>
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 8004c3c:	ea22 0000 	bic.w	r0, r2, r0
 8004c40:	6418      	str	r0, [r3, #64]	; 0x40
 8004c42:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8004c44:	4310      	orrs	r0, r2
 8004c46:	6418      	str	r0, [r3, #64]	; 0x40
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop

08004c4c <RTC_TamperFilterConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 8004c4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c50:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c56:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 8004c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c5e:	4302      	orrs	r2, r0
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c62:	4770      	bx	lr

08004c64 <RTC_TamperSamplingFreqConfig>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 8004c64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 8004c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c76:	4302      	orrs	r2, r0
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c7a:	4770      	bx	lr

08004c7c <RTC_TamperPinsPrechargeDuration>:
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 8004c7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c86:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8004c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c8e:	4302      	orrs	r2, r0
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c92:	4770      	bx	lr

08004c94 <RTC_TimeStampOnTamperDetectionCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8004c94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004c98:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 8004c9e:	b918      	cbnz	r0, 8004ca8 <RTC_TimeStampOnTamperDetectionCmd+0x14>
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 8004ca0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ca6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8004ca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
 8004cae:	4770      	bx	lr

08004cb0 <RTC_TamperPullUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 8004cb0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004cb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 8004cba:	b918      	cbnz	r0, 8004cc4 <RTC_TamperPullUpCmd+0x14>
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 8004cbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40
 8004cc2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 8004cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8004cca:	4770      	bx	lr

08004ccc <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 8004ccc:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8004cce:	f642 0350 	movw	r3, #10320	; 0x2850
 8004cd2:	f2c4 0300 	movt	r3, #16384	; 0x4000
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
  __IO uint32_t tmp = 0;
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	9201      	str	r2, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8004cda:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 8004cdc:	9b01      	ldr	r3, [sp, #4]
 8004cde:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004ce2:	9301      	str	r3, [sp, #4]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004ce4:	9b01      	ldr	r3, [sp, #4]
 8004ce6:	6019      	str	r1, [r3, #0]
}
 8004ce8:	b002      	add	sp, #8
 8004cea:	4770      	bx	lr

08004cec <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 8004cec:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8004cee:	f642 0350 	movw	r3, #10320	; 0x2850
 8004cf2:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
  __IO uint32_t tmp = 0;
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	9201      	str	r2, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8004cfa:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 8004cfc:	9b01      	ldr	r3, [sp, #4]
 8004cfe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004d02:	9301      	str	r3, [sp, #4]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004d04:	9b01      	ldr	r3, [sp, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
}
 8004d08:	b002      	add	sp, #8
 8004d0a:	4770      	bx	lr

08004d0c <RTC_TamperPinSelection>:
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 8004d0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 8004d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1e:	4302      	orrs	r2, r0
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004d22:	4770      	bx	lr

08004d24 <RTC_TimeStampPinSelection>:
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 8004d24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 8004d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d36:	4302      	orrs	r2, r0
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004d3a:	4770      	bx	lr

08004d3c <RTC_OutputTypeConfig>:
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 8004d3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d4a:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 8004d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d4e:	4302      	orrs	r2, r0
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004d52:	4770      	bx	lr

08004d54 <RTC_SynchroShiftConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004d54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004d5c:	22ca      	movs	r2, #202	; 0xca
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 8004d5e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004d62:	2253      	movs	r2, #83	; 0x53
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	0712      	lsls	r2, r2, #28
 8004d6a:	d50b      	bpl.n	8004d84 <RTC_SynchroShiftConfig+0x30>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	0712      	lsls	r2, r2, #28
 8004d70:	d508      	bpl.n	8004d84 <RTC_SynchroShiftConfig+0x30>
 8004d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d76:	e001      	b.n	8004d7c <RTC_SynchroShiftConfig+0x28>
 8004d78:	3a01      	subs	r2, #1
 8004d7a:	d003      	beq.n	8004d84 <RTC_SynchroShiftConfig+0x30>
 8004d7c:	68dc      	ldr	r4, [r3, #12]
 8004d7e:	f014 0f08 	tst.w	r4, #8
 8004d82:	d1f9      	bne.n	8004d78 <RTC_SynchroShiftConfig+0x24>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 8004d84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004d88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	f012 0208 	ands.w	r2, r2, #8
 8004d92:	d114      	bne.n	8004dbe <RTC_SynchroShiftConfig+0x6a>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 8004d94:	689c      	ldr	r4, [r3, #8]
 8004d96:	f014 0f10 	tst.w	r4, #16
        status = SUCCESS;
      }
    }
    else
    {
      status = ERROR;
 8004d9a:	bf18      	it	ne
 8004d9c:	4610      	movne	r0, r2

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 8004d9e:	d006      	beq.n	8004dae <RTC_SynchroShiftConfig+0x5a>
  {
    status = ERROR;
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8004da0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004da4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004da8:	21ff      	movs	r1, #255	; 0xff
 8004daa:	6259      	str	r1, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
}
 8004dac:	bd10      	pop	{r4, pc}
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 8004dae:	4301      	orrs	r1, r0
 8004db0:	62d9      	str	r1, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 8004db2:	f7ff fa63 	bl	800427c <RTC_WaitForSynchro>
      {
        status = ERROR;
 8004db6:	3000      	adds	r0, #0
 8004db8:	bf18      	it	ne
 8004dba:	2001      	movne	r0, #1
 8004dbc:	e7f0      	b.n	8004da0 <RTC_SynchroShiftConfig+0x4c>
      status = ERROR;
    }
  }
  else
  {
    status = ERROR;
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e7ee      	b.n	8004da0 <RTC_SynchroShiftConfig+0x4c>
 8004dc2:	bf00      	nop

08004dc4 <RTC_ITConfig>:
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8004dc4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004dc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004dcc:	22ca      	movs	r2, #202	; 0xca
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004dd0:	2253      	movs	r2, #83	; 0x53
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8004dd4:	689a      	ldr	r2, [r3, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
  RTC->WPR = 0x53;

  if (NewState != DISABLE)
 8004dd6:	b989      	cbnz	r1, 8004dfc <RTC_ITConfig+0x38>
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 8004dd8:	f020 0104 	bic.w	r1, r0, #4
 8004ddc:	ea22 0201 	bic.w	r2, r2, r1
 8004de0:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 8004de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de4:	f000 0004 	and.w	r0, r0, #4
 8004de8:	ea22 0000 	bic.w	r0, r2, r0
 8004dec:	6418      	str	r0, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8004dee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004df2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004df6:	22ff      	movs	r2, #255	; 0xff
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004dfa:	4770      	bx	lr
  RTC->WPR = 0x53;

  if (NewState != DISABLE)
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8004dfc:	f020 0104 	bic.w	r1, r0, #4
 8004e00:	430a      	orrs	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 8004e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e06:	f000 0004 	and.w	r0, r0, #4
 8004e0a:	4310      	orrs	r0, r2
 8004e0c:	6418      	str	r0, [r3, #64]	; 0x40
 8004e0e:	e7ee      	b.n	8004dee <RTC_ITConfig+0x2a>

08004e10 <RTC_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 8004e10:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004e14:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004e18:	f643 737f 	movw	r3, #16255	; 0x3f7f
 8004e1c:	68d2      	ldr	r2, [r2, #12]
 8004e1e:	f2c0 0301 	movt	r3, #1
 8004e22:	4013      	ands	r3, r2
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
  {
    bitstatus = SET;
 8004e24:	4203      	tst	r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004e26:	bf0c      	ite	eq
 8004e28:	2000      	moveq	r0, #0
 8004e2a:	2001      	movne	r0, #1
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop

08004e30 <RTC_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 8004e30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004e38:	b282      	uxth	r2, r0
 8004e3a:	68d9      	ldr	r1, [r3, #12]
 8004e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e40:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004e44:	ea61 0202 	orn	r2, r1, r2
 8004e48:	60da      	str	r2, [r3, #12]
}
 8004e4a:	4770      	bx	lr

08004e4c <RTC_GetITStatus>:
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8004e4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e50:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8004e54:	b410      	push	{r4}
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8004e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8004e58:	6899      	ldr	r1, [r3, #8]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8004e5a:	68dc      	ldr	r4, [r3, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8004e5c:	f002 0204 	and.w	r2, r2, #4
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8004e60:	ea02 32d0 	and.w	r2, r2, r0, lsr #15
 8004e64:	ea00 0301 	and.w	r3, r0, r1
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8004e68:	4313      	orrs	r3, r2
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8004e6a:	bf08      	it	eq
 8004e6c:	4618      	moveq	r0, r3
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 8004e6e:	d005      	beq.n	8004e7c <RTC_GetITStatus+0x30>
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 8004e70:	b2a4      	uxth	r4, r4
  *            @arg RTC_IT_ALRB: Alarm B interrupt 
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
 8004e72:	ea14 1410 	ands.w	r4, r4, r0, lsr #4
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
  {
    bitstatus = SET;
 8004e76:	bf0c      	ite	eq
 8004e78:	2000      	moveq	r0, #0
 8004e7a:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8004e7c:	bc10      	pop	{r4}
 8004e7e:	4770      	bx	lr

08004e80 <RTC_ClearITPendingBit>:

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 8004e80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004e84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004e88:	f3c0 120f 	ubfx	r2, r0, #4, #16
 8004e8c:	68d9      	ldr	r1, [r3, #12]
 8004e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e92:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004e96:	ea61 0202 	orn	r2, r1, r2
 8004e9a:	60da      	str	r2, [r3, #12]
}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop

08004ea0 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 8004ea0:	b508      	push	{r3, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ea8:	f7ff f898 	bl	8003fdc <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8004eac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004eb0:	2100      	movs	r1, #0
}
 8004eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SDIO_DeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 8004eb6:	f7ff b891 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
 8004eba:	bf00      	nop

08004ebc <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8004ebc:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8004ebe:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8004ec2:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8004ec6:	6882      	ldr	r2, [r0, #8]
 8004ec8:	68c7      	ldr	r7, [r0, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8004eca:	6806      	ldr	r6, [r0, #0]
 8004ecc:	6904      	ldr	r4, [r0, #16]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8004ece:	7d01      	ldrb	r1, [r0, #20]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8004ed0:	f2c4 0301 	movt	r3, #16385	; 0x4001
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8004ed4:	ea4c 0202 	orr.w	r2, ip, r2
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 8004ed8:	685d      	ldr	r5, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8004eda:	433a      	orrs	r2, r7
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8004edc:	4332      	orrs	r2, r6
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8004ede:	f425 40fd 	bic.w	r0, r5, #32384	; 0x7e80
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 8004ee2:	4322      	orrs	r2, r4
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 8004ee4:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 8004ee8:	4302      	orrs	r2, r0
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 8004eea:	430a      	orrs	r2, r1
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 8004eec:	605a      	str	r2, [r3, #4]
}
 8004eee:	bcf0      	pop	{r4, r5, r6, r7}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop

08004ef4 <SDIO_StructInit>:
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	7503      	strb	r3, [r0, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8004ef8:	6003      	str	r3, [r0, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8004efa:	6043      	str	r3, [r0, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8004efc:	6083      	str	r3, [r0, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8004efe:	60c3      	str	r3, [r0, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8004f00:	6103      	str	r3, [r0, #16]
}
 8004f02:	4770      	bx	lr

08004f04 <SDIO_ClockCmd>:
void SDIO_ClockCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8004f04:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8004f08:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8004f0c:	6018      	str	r0, [r3, #0]
}
 8004f0e:	4770      	bx	lr

08004f10 <SDIO_SetPowerState>:
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 8004f10:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004f14:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f18:	6018      	str	r0, [r3, #0]
}
 8004f1a:	4770      	bx	lr

08004f1c <SDIO_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8004f1c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004f20:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f24:	6818      	ldr	r0, [r3, #0]
}
 8004f26:	f000 0003 	and.w	r0, r0, #3
 8004f2a:	4770      	bx	lr

08004f2c <SDIO_SendCommand>:
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8004f2c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004f30:	6802      	ldr	r2, [r0, #0]
 8004f32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8004f36:	b430      	push	{r4, r5}
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 8004f38:	609a      	str	r2, [r3, #8]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8004f3a:	6885      	ldr	r5, [r0, #8]
 8004f3c:	6842      	ldr	r2, [r0, #4]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8004f3e:	68c4      	ldr	r4, [r0, #12]
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8004f40:	68d9      	ldr	r1, [r3, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8004f42:	6900      	ldr	r0, [r0, #16]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8004f44:	432a      	orrs	r2, r5
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8004f46:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8004f4a:	4322      	orrs	r2, r4
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8004f4c:	f021 0107 	bic.w	r1, r1, #7
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8004f50:	4302      	orrs	r2, r0
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8004f52:	430a      	orrs	r2, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 8004f54:	60da      	str	r2, [r3, #12]
}
 8004f56:	bc30      	pop	{r4, r5}
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop

08004f5c <SDIO_CmdStructInit>:
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8004f60:	6043      	str	r3, [r0, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8004f62:	6083      	str	r3, [r0, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 8004f64:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8004f66:	6103      	str	r3, [r0, #16]
}
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <SDIO_GetCommandResponse>:
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
  return (uint8_t)(SDIO->RESPCMD);
 8004f6c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004f70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f74:	6918      	ldr	r0, [r3, #16]
}
 8004f76:	b2c0      	uxtb	r0, r0
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <SDIO_GetResponse>:
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8004f7c:	f642 4314 	movw	r3, #11284	; 0x2c14
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8004f80:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8004f82:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004f86:	18c3      	adds	r3, r0, r3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
  __IO uint32_t tmp = 0;
 8004f88:	2200      	movs	r2, #0
 8004f8a:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 8004f8c:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp); 
 8004f8e:	9b01      	ldr	r3, [sp, #4]
 8004f90:	6818      	ldr	r0, [r3, #0]
}
 8004f92:	b002      	add	sp, #8
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop

08004f98 <SDIO_DataConfig>:
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8004f98:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004f9c:	6802      	ldr	r2, [r0, #0]
 8004f9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8004fa2:	b430      	push	{r4, r5}
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 8004fa6:	6842      	ldr	r2, [r0, #4]
 8004fa8:	629a      	str	r2, [r3, #40]	; 0x28
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004faa:	68c5      	ldr	r5, [r0, #12]
 8004fac:	6882      	ldr	r2, [r0, #8]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8004fae:	6904      	ldr	r4, [r0, #16]
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8004fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8004fb2:	6940      	ldr	r0, [r0, #20]
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004fb4:	432a      	orrs	r2, r5
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8004fb6:	4322      	orrs	r2, r4

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 8004fb8:	f021 01f7 	bic.w	r1, r1, #247	; 0xf7
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 8004fbc:	4302      	orrs	r2, r0
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8004fbe:	430a      	orrs	r2, r1
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 8004fc0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004fc2:	bc30      	pop	{r4, r5}
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop

08004fc8 <SDIO_DataStructInit>:
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8004fc8:	2300      	movs	r3, #0
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 8004fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 8004fce:	e880 000c 	stmia.w	r0, {r2, r3}
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8004fd2:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8004fd4:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 8004fd6:	6103      	str	r3, [r0, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8004fd8:	6143      	str	r3, [r0, #20]
}
 8004fda:	4770      	bx	lr

08004fdc <SDIO_GetDataCounter>:
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
  return SDIO->DCOUNT;
 8004fdc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004fe0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004fe4:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8004fe6:	4770      	bx	lr

08004fe8 <SDIO_ReadData>:
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
  return SDIO->FIFO;
 8004fe8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004ff0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop

08004ff8 <SDIO_WriteData>:
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
  SDIO->FIFO = Data;
 8004ff8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004ffc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005000:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop

08005008 <SDIO_GetFIFOCount>:
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
  return SDIO->FIFOCNT;
 8005008:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800500c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005010:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
 8005012:	4770      	bx	lr

08005014 <SDIO_StartSDIOReadWait>:
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 8005014:	f248 53a0 	movw	r3, #34208	; 0x85a0
 8005018:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800501c:	6018      	str	r0, [r3, #0]
}
 800501e:	4770      	bx	lr

08005020 <SDIO_StopSDIOReadWait>:
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8005020:	f248 53a4 	movw	r3, #34212	; 0x85a4
 8005024:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005028:	6018      	str	r0, [r3, #0]
}
 800502a:	4770      	bx	lr

0800502c <SDIO_SetSDIOReadWaitMode>:
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800502c:	f248 53a8 	movw	r3, #34216	; 0x85a8
 8005030:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005034:	6018      	str	r0, [r3, #0]
}
 8005036:	4770      	bx	lr

08005038 <SDIO_SetSDIOOperation>:
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8005038:	f248 53ac 	movw	r3, #34220	; 0x85ac
 800503c:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005040:	6018      	str	r0, [r3, #0]
}
 8005042:	4770      	bx	lr

08005044 <SDIO_SendSDIOSuspendCmd>:
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 8005044:	f248 13ac 	movw	r3, #33196	; 0x81ac
 8005048:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800504c:	6018      	str	r0, [r3, #0]
}
 800504e:	4770      	bx	lr

08005050 <SDIO_CommandCompletionCmd>:
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 8005050:	f248 13b0 	movw	r3, #33200	; 0x81b0
 8005054:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005058:	6018      	str	r0, [r3, #0]
}
 800505a:	4770      	bx	lr

0800505c <SDIO_CEATAITCmd>:
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800505c:	f248 13b4 	movw	r3, #33204	; 0x81b4
 8005060:	f000 0001 	and.w	r0, r0, #1
 8005064:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005068:	f080 0001 	eor.w	r0, r0, #1
 800506c:	6018      	str	r0, [r3, #0]
}
 800506e:	4770      	bx	lr

08005070 <SDIO_SendCEATACmd>:
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 8005070:	f248 13b8 	movw	r3, #33208	; 0x81b8
 8005074:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005078:	6018      	str	r0, [r3, #0]
}
 800507a:	4770      	bx	lr

0800507c <SDIO_DMACmd>:
void SDIO_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800507c:	f248 538c 	movw	r3, #34188	; 0x858c
 8005080:	f2c4 2325 	movt	r3, #16933	; 0x4225
 8005084:	6018      	str	r0, [r3, #0]
}
 8005086:	4770      	bx	lr

08005088 <SDIO_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8005088:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800508c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
{
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005092:	b919      	cbnz	r1, 800509c <SDIO_ITConfig+0x14>
    SDIO->MASK |= SDIO_IT;
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 8005094:	ea22 0000 	bic.w	r0, r2, r0
 8005098:	63d8      	str	r0, [r3, #60]	; 0x3c
 800509a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800509c:	4310      	orrs	r0, r2
 800509e:	63d8      	str	r0, [r3, #60]	; 0x3c
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop

080050a4 <SDIO_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 80050a4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80050a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    bitstatus = SET;
 80050ae:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80050b0:	bf0c      	ite	eq
 80050b2:	2000      	moveq	r0, #0
 80050b4:	2001      	movne	r0, #1
 80050b6:	4770      	bx	lr

080050b8 <SDIO_ClearFlag>:
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 80050b8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80050bc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050c0:	6398      	str	r0, [r3, #56]	; 0x38
}
 80050c2:	4770      	bx	lr

080050c4 <SDIO_GetITStatus>:
{ 
  ITStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 80050c4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80050c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    bitstatus = SET;
 80050ce:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80050d0:	bf0c      	ite	eq
 80050d2:	2000      	moveq	r0, #0
 80050d4:	2001      	movne	r0, #1
 80050d6:	4770      	bx	lr

080050d8 <SDIO_ClearITPendingBit>:
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 80050d8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80050dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050e0:	6398      	str	r0, [r3, #56]	; 0x38
}
 80050e2:	4770      	bx	lr

080050e4 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80050e4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80050e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80050ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80050ee:	4298      	cmp	r0, r3
 80050f0:	d018      	beq.n	8005124 <SPI_I2S_DeInit+0x40>
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  }
  else if (SPIx == SPI2)
 80050f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80050f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80050fa:	4298      	cmp	r0, r3
 80050fc:	d01e      	beq.n	800513c <SPI_I2S_DeInit+0x58>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    }
  else
  {
    if (SPIx == SPI3)
 80050fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005102:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005106:	4298      	cmp	r0, r3
 8005108:	d000      	beq.n	800510c <SPI_I2S_DeInit+0x28>
 800510a:	bd08      	pop	{r3, pc}
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800510c:	2101      	movs	r1, #1
 800510e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005112:	f7fe ff55 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8005116:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800511a:	2100      	movs	r1, #0
    }
  }
}
 800511c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8005120:	f7fe bf4e 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8005124:	2101      	movs	r1, #1
 8005126:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800512a:	f7fe ff57 	bl	8003fdc <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800512e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005132:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8005134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8005138:	f7fe bf50 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800513c:	2101      	movs	r1, #1
 800513e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005142:	f7fe ff3d 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8005146:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800514a:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 800514c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (SPIx == SPI2)
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8005150:	f7fe bf36 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>

08005154 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8005154:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005158:	880b      	ldrh	r3, [r1, #0]
 800515a:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 800515e:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8005162:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8005166:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800516a:	894f      	ldrh	r7, [r1, #10]
 800516c:	898e      	ldrh	r6, [r1, #12]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800516e:	8805      	ldrh	r5, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005170:	89cc      	ldrh	r4, [r1, #14]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005172:	8a0a      	ldrh	r2, [r1, #16]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005174:	ea4a 0303 	orr.w	r3, sl, r3
 8005178:	ea43 0309 	orr.w	r3, r3, r9
 800517c:	ea43 0308 	orr.w	r3, r3, r8
 8005180:	ea43 030c 	orr.w	r3, r3, ip
 8005184:	433b      	orrs	r3, r7
 8005186:	4333      	orrs	r3, r6

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8005188:	f405 5141 	and.w	r1, r5, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800518c:	4323      	orrs	r3, r4
 800518e:	430b      	orrs	r3, r1
 8005190:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005192:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8005194:	8b83      	ldrh	r3, [r0, #28]
 8005196:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80051a0:	8202      	strh	r2, [r0, #16]
}
 80051a2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80051a6:	4770      	bx	lr

080051a8 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80051a8:	8b83      	ldrh	r3, [r0, #28]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80051aa:	688a      	ldr	r2, [r1, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 80051ac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80051b0:	f023 030f 	bic.w	r3, r3, #15
 80051b4:	041b      	lsls	r3, r3, #16
 80051b6:	0c1b      	lsrs	r3, r3, #16
 80051b8:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 80051ba:	2302      	movs	r3, #2
 80051bc:	8403      	strh	r3, [r0, #32]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 80051be:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80051c2:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80051c4:	429a      	cmp	r2, r3
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80051c6:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80051c8:	d05d      	beq.n	8005286 <I2S_Init+0xde>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80051ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80051ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80051d2:	888c      	ldrh	r4, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80051d4:	689d      	ldr	r5, [r3, #8]
      packetlength = 1;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 80051d6:	2c00      	cmp	r4, #0
 80051d8:	bf0c      	ite	eq
 80051da:	f04f 0c01 	moveq.w	ip, #1
 80051de:	f04f 0c02 	movne.w	ip, #2
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 80051e2:	022d      	lsls	r5, r5, #8
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 80051e4:	bf42      	ittt	mi
 80051e6:	689d      	ldrmi	r5, [r3, #8]
 80051e8:	f425 0500 	bicmi.w	r5, r5, #8388608	; 0x800000
 80051ec:	609d      	strmi	r5, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80051ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80051f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 80051f6:	f44f 5590 	mov.w	r5, #4608	; 0x1200
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 80051fa:	f8d3 8084 	ldr.w	r8, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 80051fe:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8005202:	f8d3 9004 	ldr.w	r9, [r3, #4]
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8005206:	88cb      	ldrh	r3, [r1, #6]
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8005208:	f009 093f 	and.w	r9, r9, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800520c:	f2c0 057a 	movt	r5, #122	; 0x7a
 8005210:	fbb5 f5f9 	udiv	r5, r5, r9
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8005214:	f3c8 1888 	ubfx	r8, r8, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8005218:	fb08 f505 	mul.w	r5, r8, r5
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800521c:	f3c7 7702 	ubfx	r7, r7, #28, #3
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8005220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8005224:	fbb5 f5f7 	udiv	r5, r5, r7
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8005228:	d030      	beq.n	800528c <I2S_Init+0xe4>
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800522a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 800522e:	fbb5 f5fc 	udiv	r5, r5, ip
 8005232:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005236:	006d      	lsls	r5, r5, #1
 8005238:	fbb5 f2f2 	udiv	r2, r5, r2
 800523c:	3205      	adds	r2, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800523e:	f64c 45cd 	movw	r5, #52429	; 0xcccd
 8005242:	f6cc 45cc 	movt	r5, #52428	; 0xcccc
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8005246:	b292      	uxth	r2, r2
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8005248:	fba5 7202 	umull	r7, r2, r5, r2
 800524c:	08d2      	lsrs	r2, r2, #3
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800524e:	0855      	lsrs	r5, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8005250:	1eaf      	subs	r7, r5, #2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8005252:	f002 0201 	and.w	r2, r2, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8005256:	2ffd      	cmp	r7, #253	; 0xfd
 8005258:	bf94      	ite	ls
 800525a:	ea45 2202 	orrls.w	r2, r5, r2, lsl #8
 800525e:	2202      	movhi	r2, #2
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8005260:	f8b1 c000 	ldrh.w	ip, [r1]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8005264:	884f      	ldrh	r7, [r1, #2]
 8005266:	898d      	ldrh	r5, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8005268:	ea46 010c 	orr.w	r1, r6, ip
 800526c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8005270:	4339      	orrs	r1, r7
 8005272:	4329      	orrs	r1, r5
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8005274:	4313      	orrs	r3, r2
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8005276:	b289      	uxth	r1, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8005278:	b29b      	uxth	r3, r3
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800527a:	430c      	orrs	r4, r1
    i2sdiv = 2;
    i2sodd = 0;
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800527c:	8403      	strh	r3, [r0, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800527e:	8384      	strh	r4, [r0, #28]
}
 8005280:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8005284:	4770      	bx	lr
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8005286:	888c      	ldrh	r4, [r1, #4]
 8005288:	88cb      	ldrh	r3, [r1, #6]
 800528a:	e7e9      	b.n	8005260 <I2S_Init+0xb8>
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800528c:	0a2d      	lsrs	r5, r5, #8
 800528e:	e7d0      	b.n	8005232 <I2S_Init+0x8a>

08005290 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8005290:	2300      	movs	r3, #0
 8005292:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8005294:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8005296:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8005298:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800529a:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800529c:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800529e:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80052a0:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80052a2:	2307      	movs	r3, #7
 80052a4:	8203      	strh	r3, [r0, #16]
}
 80052a6:	4770      	bx	lr

080052a8 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80052a8:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80052aa:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80052ac:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80052ae:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80052b0:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80052b2:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80052b4:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80052b6:	8183      	strh	r3, [r0, #12]
}
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop

080052bc <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80052bc:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80052be:	b929      	cbnz	r1, 80052cc <SPI_Cmd+0x10>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80052c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c4:	041b      	lsls	r3, r3, #16
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	8003      	strh	r3, [r0, #0]
 80052ca:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052d2:	8003      	strh	r3, [r0, #0]
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop

080052d8 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80052d8:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80052da:	b929      	cbnz	r1, 80052e8 <I2S_Cmd+0x10>
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 80052dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052e0:	041b      	lsls	r3, r3, #16
 80052e2:	0c1b      	lsrs	r3, r3, #16
 80052e4:	8383      	strh	r3, [r0, #28]
 80052e6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052ee:	8383      	strh	r3, [r0, #28]
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop

080052f4 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 80052f4:	8803      	ldrh	r3, [r0, #0]
 80052f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052fa:	041b      	lsls	r3, r3, #16
 80052fc:	0c1b      	lsrs	r3, r3, #16
 80052fe:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8005300:	8803      	ldrh	r3, [r0, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	430b      	orrs	r3, r1
 8005306:	8003      	strh	r3, [r0, #0]
}
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop

0800530c <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800530c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8005310:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8005312:	d005      	beq.n	8005320 <SPI_BiDirectionalLineConfig+0x14>
    SPIx->CR1 |= SPI_Direction_Tx;
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8005314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005318:	041b      	lsls	r3, r3, #16
 800531a:	0c1b      	lsrs	r3, r3, #16
 800531c:	8003      	strh	r3, [r0, #0]
 800531e:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8005320:	b29b      	uxth	r3, r3
 8005322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005326:	8003      	strh	r3, [r0, #0]
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop

0800532c <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800532c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8005330:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8005332:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8005334:	d004      	beq.n	8005340 <SPI_NSSInternalSoftwareConfig+0x14>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8005336:	b29b      	uxth	r3, r3
 8005338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800533c:	8003      	strh	r3, [r0, #0]
 800533e:	4770      	bx	lr
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8005340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005344:	041b      	lsls	r3, r3, #16
 8005346:	0c1b      	lsrs	r3, r3, #16
 8005348:	8003      	strh	r3, [r0, #0]
 800534a:	4770      	bx	lr

0800534c <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800534c:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800534e:	b929      	cbnz	r1, 800535c <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8005350:	f023 0304 	bic.w	r3, r3, #4
 8005354:	041b      	lsls	r3, r3, #16
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	8083      	strh	r3, [r0, #4]
 800535a:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800535c:	b29b      	uxth	r3, r3
 800535e:	f043 0304 	orr.w	r3, r3, #4
 8005362:	8083      	strh	r3, [r0, #4]
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop

08005368 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8005368:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800536a:	b929      	cbnz	r1, 8005378 <SPI_TIModeCmd+0x10>
    SPIx->CR2 |= SPI_CR2_FRF;
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800536c:	f023 0310 	bic.w	r3, r3, #16
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	0c1b      	lsrs	r3, r3, #16
 8005374:	8083      	strh	r3, [r0, #4]
 8005376:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8005378:	b29b      	uxth	r3, r3
 800537a:	f043 0310 	orr.w	r3, r3, #16
 800537e:	8083      	strh	r3, [r0, #4]
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop

08005384 <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8005384:	8b83      	ldrh	r3, [r0, #28]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005386:	898a      	ldrh	r2, [r1, #12]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8005388:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800538c:	f023 030f 	bic.w	r3, r3, #15
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	0c1b      	lsrs	r3, r3, #16
 8005394:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8005396:	2302      	movs	r3, #2
 8005398:	8403      	strh	r3, [r0, #32]
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800539a:	b470      	push	{r4, r5, r6}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800539c:	8b86      	ldrh	r6, [r0, #28]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800539e:	884d      	ldrh	r5, [r1, #2]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80053a0:	880b      	ldrh	r3, [r1, #0]
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80053a2:	888c      	ldrh	r4, [r1, #4]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 80053a4:	b2b1      	uxth	r1, r6
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 80053a6:	4329      	orrs	r1, r5
 80053a8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80053ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b0:	bf18      	it	ne
 80053b2:	2b00      	cmpne	r3, #0
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80053b4:	ea41 0104 	orr.w	r1, r1, r4
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 80053b8:	bf14      	ite	ne
 80053ba:	2300      	movne	r3, #0
 80053bc:	2301      	moveq	r3, #1
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80053be:	ea41 0102 	orr.w	r1, r1, r2
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
  {
    tmp = I2S_Mode_SlaveRx;
 80053c2:	bf14      	ite	ne
 80053c4:	461a      	movne	r2, r3
 80053c6:	f44f 7280 	moveq.w	r2, #256	; 0x100
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80053ca:	b28b      	uxth	r3, r1
 80053cc:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 80053ce:	8383      	strh	r3, [r0, #28]
}
 80053d0:	bc70      	pop	{r4, r5, r6}
 80053d2:	4770      	bx	lr

080053d4 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80053d4:	8980      	ldrh	r0, [r0, #12]
}
 80053d6:	b280      	uxth	r0, r0
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop

080053dc <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80053dc:	8181      	strh	r1, [r0, #12]
}
 80053de:	4770      	bx	lr

080053e0 <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80053e0:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80053e2:	b929      	cbnz	r1, 80053f0 <SPI_CalculateCRC+0x10>
    SPIx->CR1 |= SPI_CR1_CRCEN;
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 80053e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e8:	041b      	lsls	r3, r3, #16
 80053ea:	0c1b      	lsrs	r3, r3, #16
 80053ec:	8003      	strh	r3, [r0, #0]
 80053ee:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053f6:	8003      	strh	r3, [r0, #0]
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop

080053fc <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 80053fc:	8803      	ldrh	r3, [r0, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005404:	8003      	strh	r3, [r0, #0]
}
 8005406:	4770      	bx	lr

08005408 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8005408:	2901      	cmp	r1, #1
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800540a:	bf15      	itete	ne
 800540c:	8b00      	ldrhne	r0, [r0, #24]
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800540e:	8a80      	ldrheq	r0, [r0, #20]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8005410:	b280      	uxthne	r0, r0
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8005412:	b280      	uxtheq	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop

08005418 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8005418:	8a00      	ldrh	r0, [r0, #16]
}
 800541a:	b280      	uxth	r0, r0
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop

08005420 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8005420:	8883      	ldrh	r3, [r0, #4]
 8005422:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8005424:	b91a      	cbnz	r2, 800542e <SPI_I2S_DMACmd+0xe>
    SPIx->CR2 |= SPI_I2S_DMAReq;
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8005426:	ea23 0101 	bic.w	r1, r3, r1
 800542a:	8081      	strh	r1, [r0, #4]
 800542c:	4770      	bx	lr
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800542e:	4319      	orrs	r1, r3
 8005430:	8081      	strh	r1, [r0, #4]
 8005432:	4770      	bx	lr

08005434 <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8005434:	2301      	movs	r3, #1
 8005436:	0909      	lsrs	r1, r1, #4
 8005438:	fa13 f101 	lsls.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800543c:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800543e:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8005440:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8005442:	b91a      	cbnz	r2, 800544c <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8005444:	ea23 0101 	bic.w	r1, r3, r1
 8005448:	8081      	strh	r1, [r0, #4]
 800544a:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800544c:	4319      	orrs	r1, r3
 800544e:	8081      	strh	r1, [r0, #4]
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop

08005454 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8005454:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8005456:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8005458:	bf0c      	ite	eq
 800545a:	2000      	moveq	r0, #0
 800545c:	2001      	movne	r0, #1
 800545e:	4770      	bx	lr

08005460 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8005460:	43c9      	mvns	r1, r1
 8005462:	b289      	uxth	r1, r1
 8005464:	8101      	strh	r1, [r0, #8]
}
 8005466:	4770      	bx	lr

08005468 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8005468:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800546a:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800546c:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800546e:	2201      	movs	r2, #1
 8005470:	f001 030f 	and.w	r3, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8005474:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8005476:	fa12 f303 	lsls.w	r3, r2, r3

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800547a:	4018      	ands	r0, r3

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800547c:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800547e:	d005      	beq.n	800548c <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8005480:	0909      	lsrs	r1, r1, #4
 8005482:	408a      	lsls	r2, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 8005484:	4214      	tst	r4, r2

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8005486:	bf0c      	ite	eq
 8005488:	2000      	moveq	r0, #0
 800548a:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 800548c:	bc10      	pop	{r4}
 800548e:	4770      	bx	lr

08005490 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8005490:	f001 010f 	and.w	r1, r1, #15
 8005494:	2301      	movs	r3, #1
 8005496:	fa13 f101 	lsls.w	r1, r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800549a:	43c9      	mvns	r1, r1
 800549c:	b289      	uxth	r1, r1
 800549e:	8101      	strh	r1, [r0, #8]
}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop

080054a4 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 80054a4:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80054a6:	2101      	movs	r1, #1
 80054a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80054ac:	f7fe fd96 	bl	8003fdc <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80054b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80054b4:	2100      	movs	r1, #0
}
 80054b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 80054ba:	f7fe bd8f 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
 80054be:	bf00      	nop

080054c0 <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 80054c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80054c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80054c8:	6018      	str	r0, [r3, #0]
}
 80054ca:	4770      	bx	lr

080054cc <SYSCFG_EXTILineConfig>:
  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80054cc:	088a      	lsrs	r2, r1, #2
 80054ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80054d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80054d6:	3202      	adds	r2, #2

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80054d8:	f001 0103 	and.w	r1, r1, #3
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 80054dc:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80054de:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80054e0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80054e4:	240f      	movs	r4, #15
 80054e6:	408c      	lsls	r4, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80054e8:	ea25 0404 	bic.w	r4, r5, r4
 80054ec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80054f0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80054f4:	fa10 f101 	lsls.w	r1, r0, r1
 80054f8:	430c      	orrs	r4, r1
 80054fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
}
 80054fe:	bc30      	pop	{r4, r5}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop

08005504 <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8005504:	23dc      	movs	r3, #220	; 0xdc
 8005506:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800550a:	6018      	str	r0, [r3, #0]
}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop

08005510 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8005510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005514:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8005518:	6018      	str	r0, [r3, #0]
}
 800551a:	4770      	bx	lr

0800551c <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800551c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005520:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005524:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8005526:	f3c0 2000 	ubfx	r0, r0, #8, #1
 800552a:	4770      	bx	lr

0800552c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800552c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800552e:	2300      	movs	r3, #0
 8005530:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005534:	4298      	cmp	r0, r3
 8005536:	d05b      	beq.n	80055f0 <TIM_DeInit+0xc4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8005538:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800553c:	d062      	beq.n	8005604 <TIM_DeInit+0xd8>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 800553e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005542:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005546:	4298      	cmp	r0, r3
 8005548:	d066      	beq.n	8005618 <TIM_DeInit+0xec>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 800554a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800554e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005552:	4298      	cmp	r0, r3
 8005554:	d06a      	beq.n	800562c <TIM_DeInit+0x100>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 8005556:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800555a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800555e:	4298      	cmp	r0, r3
 8005560:	d06e      	beq.n	8005640 <TIM_DeInit+0x114>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8005562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005566:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800556a:	4298      	cmp	r0, r3
 800556c:	d072      	beq.n	8005654 <TIM_DeInit+0x128>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 800556e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005572:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8005576:	4298      	cmp	r0, r3
 8005578:	d076      	beq.n	8005668 <TIM_DeInit+0x13c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 800557a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800557e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005582:	4298      	cmp	r0, r3
 8005584:	d07a      	beq.n	800567c <TIM_DeInit+0x150>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8005586:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800558a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800558e:	4298      	cmp	r0, r3
 8005590:	d07e      	beq.n	8005690 <TIM_DeInit+0x164>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8005592:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8005596:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800559a:	4298      	cmp	r0, r3
 800559c:	f000 8084 	beq.w	80056a8 <TIM_DeInit+0x17c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 80055a0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80055a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80055a8:	4298      	cmp	r0, r3
 80055aa:	f000 8089 	beq.w	80056c0 <TIM_DeInit+0x194>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 80055ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80055b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80055b6:	4298      	cmp	r0, r3
 80055b8:	f000 808e 	beq.w	80056d8 <TIM_DeInit+0x1ac>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 80055bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80055c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80055c4:	4298      	cmp	r0, r3
 80055c6:	f000 8091 	beq.w	80056ec <TIM_DeInit+0x1c0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 80055ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80055d2:	4298      	cmp	r0, r3
 80055d4:	d000      	beq.n	80055d8 <TIM_DeInit+0xac>
 80055d6:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80055d8:	2101      	movs	r1, #1
 80055da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80055de:	f7fe fcef 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80055e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80055e6:	2100      	movs	r1, #0
    }   
  }
}
 80055e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80055ec:	f7fe bce8 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80055f0:	2001      	movs	r0, #1
 80055f2:	4601      	mov	r1, r0
 80055f4:	f7fe fcf2 	bl	8003fdc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 80055f8:	2001      	movs	r0, #1
 80055fa:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80055fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8005600:	f7fe bcec 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8005604:	2001      	movs	r0, #1
 8005606:	4601      	mov	r1, r0
 8005608:	f7fe fcda 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800560c:	2001      	movs	r0, #1
 800560e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8005614:	f7fe bcd4 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8005618:	2002      	movs	r0, #2
 800561a:	2101      	movs	r1, #1
 800561c:	f7fe fcd0 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8005620:	2002      	movs	r0, #2
 8005622:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8005628:	f7fe bcca 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800562c:	2004      	movs	r0, #4
 800562e:	2101      	movs	r1, #1
 8005630:	f7fe fcc6 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8005634:	2004      	movs	r0, #4
 8005636:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005638:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800563c:	f7fe bcc0 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8005640:	2008      	movs	r0, #8
 8005642:	2101      	movs	r1, #1
 8005644:	f7fe fcbc 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8005648:	2008      	movs	r0, #8
 800564a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 800564c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8005650:	f7fe bcb6 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8005654:	2010      	movs	r0, #16
 8005656:	2101      	movs	r1, #1
 8005658:	f7fe fcb2 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800565c:	2010      	movs	r0, #16
 800565e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8005664:	f7fe bcac 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8005668:	2020      	movs	r0, #32
 800566a:	2101      	movs	r1, #1
 800566c:	f7fe fca8 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8005670:	2020      	movs	r0, #32
 8005672:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8005678:	f7fe bca2 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800567c:	2002      	movs	r0, #2
 800567e:	2101      	movs	r1, #1
 8005680:	f7fe fcac 	bl	8003fdc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8005684:	2002      	movs	r0, #2
 8005686:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8005688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800568c:	f7fe bca6 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8005690:	2101      	movs	r1, #1
 8005692:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005696:	f7fe fca1 	bl	8003fdc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800569a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800569e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80056a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80056a4:	f7fe bc9a 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80056a8:	2101      	movs	r1, #1
 80056aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80056ae:	f7fe fc95 	bl	8003fdc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80056b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80056b6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80056b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80056bc:	f7fe bc8e 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80056c0:	2101      	movs	r1, #1
 80056c2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80056c6:	f7fe fc89 	bl	8003fdc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80056ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80056ce:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80056d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80056d4:	f7fe bc82 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80056d8:	2040      	movs	r0, #64	; 0x40
 80056da:	2101      	movs	r1, #1
 80056dc:	f7fe fc70 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80056e0:	2040      	movs	r0, #64	; 0x40
 80056e2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80056e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80056e8:	f7fe bc6a 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80056ec:	2080      	movs	r0, #128	; 0x80
 80056ee:	2101      	movs	r1, #1
 80056f0:	f7fe fc66 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80056f4:	2080      	movs	r0, #128	; 0x80
 80056f6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 80056f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80056fc:	f7fe bc60 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>

08005700 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8005700:	2300      	movs	r3, #0
 8005702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005706:	f2c4 0301 	movt	r3, #16385	; 0x4001
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800570a:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800570c:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8005710:	8804      	ldrh	r4, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8005712:	4298      	cmp	r0, r3
 8005714:	bf18      	it	ne
 8005716:	4290      	cmpne	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8005718:	b2a4      	uxth	r4, r4

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800571a:	bf14      	ite	ne
 800571c:	2300      	movne	r3, #0
 800571e:	2301      	moveq	r3, #1
 8005720:	d008      	beq.n	8005734 <TIM_TimeBaseInit+0x34>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8005722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005726:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800572a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800572e:	bf18      	it	ne
 8005730:	4290      	cmpne	r0, r2
 8005732:	d123      	bne.n	800577c <TIM_TimeBaseInit+0x7c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8005734:	f64f 758f 	movw	r5, #65423	; 0xff8f
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8005738:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800573a:	4025      	ands	r5, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800573c:	ea45 0402 	orr.w	r4, r5, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8005740:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 8005744:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8005748:	f2c4 0500 	movt	r5, #16384	; 0x4000
 800574c:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8005750:	42b0      	cmp	r0, r6
 8005752:	bf18      	it	ne
 8005754:	42a8      	cmpne	r0, r5
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8005756:	bf1f      	itttt	ne
 8005758:	890d      	ldrhne	r5, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800575a:	f64f 42ff 	movwne	r2, #64767	; 0xfcff
 800575e:	4022      	andne	r2, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8005760:	ea42 0405 	orrne.w	r4, r2, r5
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8005764:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8005766:	880a      	ldrh	r2, [r1, #0]
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8005768:	8004      	strh	r4, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800576a:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800576c:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800576e:	b10b      	cbz	r3, 8005774 <TIM_TimeBaseInit+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8005770:	7a8b      	ldrb	r3, [r1, #10]
 8005772:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8005774:	2301      	movs	r3, #1
 8005776:	8283      	strh	r3, [r0, #20]
}
 8005778:	bc70      	pop	{r4, r5, r6}
 800577a:	4770      	bx	lr

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800577c:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 8005780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005784:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8005788:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800578c:	4290      	cmp	r0, r2
 800578e:	bf18      	it	ne
 8005790:	42a8      	cmpne	r0, r5
 8005792:	d1d5      	bne.n	8005740 <TIM_TimeBaseInit+0x40>
 8005794:	e7ce      	b.n	8005734 <TIM_TimeBaseInit+0x34>
 8005796:	bf00      	nop

08005798 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8005798:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800579a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800579e:	6041      	str	r1, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80057a0:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80057a2:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80057a4:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80057a6:	7283      	strb	r3, [r0, #10]
}
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop

080057ac <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80057ac:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80057ae:	8282      	strh	r2, [r0, #20]
}
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop

080057b4 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80057b4:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80057be:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80057c0:	8003      	strh	r3, [r0, #0]
}
 80057c2:	4770      	bx	lr

080057c4 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80057c4:	6241      	str	r1, [r0, #36]	; 0x24
}
 80057c6:	4770      	bx	lr

080057c8 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80057c8:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 80057ca:	4770      	bx	lr

080057cc <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80057cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 80057ce:	4770      	bx	lr

080057d0 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80057d0:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 80057d2:	b280      	uxth	r0, r0
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop

080057d8 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80057d8:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80057da:	b929      	cbnz	r1, 80057e8 <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 80057dc:	f023 0302 	bic.w	r3, r3, #2
 80057e0:	041b      	lsls	r3, r3, #16
 80057e2:	0c1b      	lsrs	r3, r3, #16
 80057e4:	8003      	strh	r3, [r0, #0]
 80057e6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f043 0302 	orr.w	r3, r3, #2
 80057ee:	8003      	strh	r3, [r0, #0]
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop

080057f4 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80057f4:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 80057f6:	b929      	cbnz	r1, 8005804 <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80057f8:	f023 0304 	bic.w	r3, r3, #4
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	0c1b      	lsrs	r3, r3, #16
 8005800:	8003      	strh	r3, [r0, #0]
 8005802:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8005804:	b29b      	uxth	r3, r3
 8005806:	f043 0304 	orr.w	r3, r3, #4
 800580a:	8003      	strh	r3, [r0, #0]
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop

08005810 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8005810:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005812:	b929      	cbnz	r1, 8005820 <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8005814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	0c1b      	lsrs	r3, r3, #16
 800581c:	8003      	strh	r3, [r0, #0]
 800581e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8005820:	b29b      	uxth	r3, r3
 8005822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005826:	8003      	strh	r3, [r0, #0]
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop

0800582c <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800582c:	8803      	ldrh	r3, [r0, #0]
 800582e:	f023 0308 	bic.w	r3, r3, #8
 8005832:	041b      	lsls	r3, r3, #16
 8005834:	0c1b      	lsrs	r3, r3, #16
 8005836:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8005838:	8803      	ldrh	r3, [r0, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	430b      	orrs	r3, r1
 800583e:	8003      	strh	r3, [r0, #0]
}
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop

08005844 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8005844:	8803      	ldrh	r3, [r0, #0]
 8005846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	0c1b      	lsrs	r3, r3, #16
 800584e:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8005850:	8803      	ldrh	r3, [r0, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	430b      	orrs	r3, r1
 8005856:	8003      	strh	r3, [r0, #0]
}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop

0800585c <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800585c:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800585e:	b929      	cbnz	r1, 800586c <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	041b      	lsls	r3, r3, #16
 8005866:	0c1b      	lsrs	r3, r3, #16
 8005868:	8003      	strh	r3, [r0, #0]
 800586a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800586c:	b29b      	uxth	r3, r3
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	8003      	strh	r3, [r0, #0]
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop

08005878 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005878:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800587c:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800587e:	898d      	ldrh	r5, [r1, #12]
 8005880:	884f      	ldrh	r7, [r1, #2]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8005882:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8005886:	f024 0401 	bic.w	r4, r4, #1
 800588a:	0424      	lsls	r4, r4, #16
 800588c:	0c24      	lsrs	r4, r4, #16
 800588e:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005890:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005892:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005894:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8005896:	432f      	orrs	r7, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8005898:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800589c:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800589e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80058a2:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80058a6:	0412      	lsls	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80058a8:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80058aa:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80058ae:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80058b2:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80058b4:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80058b6:	b2bf      	uxth	r7, r7
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80058b8:	42a8      	cmp	r0, r5
 80058ba:	bf18      	it	ne
 80058bc:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058be:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80058c0:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80058c4:	ea47 0303 	orr.w	r3, r7, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80058c8:	d116      	bne.n	80058f8 <TIM_OC1Init+0x80>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80058ca:	f64f 75f7 	movw	r5, #65527	; 0xfff7
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80058ce:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80058d2:	f8b1 8012 	ldrh.w	r8, [r1, #18]
 80058d6:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80058d8:	888e      	ldrh	r6, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80058da:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80058dc:	ea45 0c0c 	orr.w	ip, r5, ip
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80058e0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80058e4:	f64f 45ff 	movw	r5, #64767	; 0xfcff
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80058e8:	ea48 0707 	orr.w	r7, r8, r7
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80058ec:	4025      	ands	r5, r4
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80058ee:	ea0c 0303 	and.w	r3, ip, r3
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80058f2:	b2bc      	uxth	r4, r7
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80058f4:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80058f6:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80058f8:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fa:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058fc:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80058fe:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005900:	8403      	strh	r3, [r0, #32]
}
 8005902:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005906:	4770      	bx	lr

08005908 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005908:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800590c:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800590e:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005910:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8005914:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8005916:	f024 0410 	bic.w	r4, r4, #16
 800591a:	0424      	lsls	r4, r4, #16
 800591c:	0c24      	lsrs	r4, r4, #16
 800591e:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8005920:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005922:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005924:	8b03      	ldrh	r3, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8005926:	f022 0220 	bic.w	r2, r2, #32
 800592a:	0412      	lsls	r2, r2, #16
 800592c:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800592e:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8005932:	041b      	lsls	r3, r3, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8005934:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005938:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800593c:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800593e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005940:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8005944:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005948:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800594c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005950:	42a8      	cmp	r0, r5
 8005952:	bf18      	it	ne
 8005954:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005956:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005958:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800595a:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800595c:	d119      	bne.n	8005992 <TIM_OC2Init+0x8a>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800595e:	f64f 767f 	movw	r6, #65407	; 0xff7f
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005962:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8005966:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800596a:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800596e:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8005970:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8005972:	f24f 35ff 	movw	r5, #62463	; 0xf3ff
 8005976:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8005978:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800597c:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8005980:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8005982:	ea45 0488 	orr.w	r4, r5, r8, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8005986:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800598a:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800598e:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8005990:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005992:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005994:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005996:	8303      	strh	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8005998:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599a:	8402      	strh	r2, [r0, #32]
}
 800599c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop

080059a4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80059a4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80059a8:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80059aa:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80059ac:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80059b0:	880f      	ldrh	r7, [r1, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80059b2:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80059b6:	0424      	lsls	r4, r4, #16
 80059b8:	0c24      	lsrs	r4, r4, #16
 80059ba:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059bc:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059be:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c0:	8b83      	ldrh	r3, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80059c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059c6:	0412      	lsls	r2, r2, #16
 80059c8:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80059ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80059ce:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80059d2:	2500      	movs	r5, #0
 80059d4:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80059d8:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80059da:	f2c4 0601 	movt	r6, #16385	; 0x4001
 80059de:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80059e2:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80059e4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80059e8:	42a8      	cmp	r0, r5
 80059ea:	bf18      	it	ne
 80059ec:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ee:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80059f0:	ea43 0307 	orr.w	r3, r3, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80059f4:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80059f6:	d119      	bne.n	8005a2c <TIM_OC3Init+0x88>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80059f8:	f24f 76ff 	movw	r6, #63487	; 0xf7ff
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80059fc:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005a00:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005a04:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005a08:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8005a0a:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8005a0c:	f64c 75ff 	movw	r5, #53247	; 0xcfff
 8005a10:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8005a12:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8005a16:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8005a1a:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8005a1c:	ea45 1408 	orr.w	r4, r5, r8, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005a20:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005a24:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8005a28:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8005a2a:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8005a2c:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2e:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a30:	8383      	strh	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8005a32:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a34:	8402      	strh	r2, [r0, #32]
}
 8005a36:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8005a3a:	4770      	bx	lr

08005a3c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8005a3c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8005a3e:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005a40:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005a42:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005a46:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8005a48:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8005a4c:	0424      	lsls	r4, r4, #16
 8005a4e:	0c24      	lsrs	r4, r4, #16
 8005a50:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a56:	8b83      	ldrh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8005a58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5c:	0412      	lsls	r2, r2, #16
 8005a5e:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8005a60:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8005a64:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005a68:	2500      	movs	r5, #0
 8005a6a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8005a6e:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8005a72:	f2c4 0601 	movt	r6, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8005a7a:	42a8      	cmp	r0, r5
 8005a7c:	bf18      	it	ne
 8005a7e:	42b0      	cmpne	r0, r6
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005a80:	bf08      	it	eq
 8005a82:	8a0e      	ldrheq	r6, [r1, #16]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005a84:	6889      	ldr	r1, [r1, #8]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a86:	b2a4      	uxth	r4, r4
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8005a88:	bf02      	ittt	eq
 8005a8a:	f64b 75ff 	movweq	r5, #49151	; 0xbfff
 8005a8e:	4025      	andeq	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005a90:	ea45 1486 	orreq.w	r4, r5, r6, lsl #6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005a94:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005a98:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8005a9c:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8005a9e:	b292      	uxth	r2, r2
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8005aa0:	bf08      	it	eq
 8005aa2:	b2a4      	uxtheq	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8005aa6:	8383      	strh	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8005aa8:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aaa:	8402      	strh	r2, [r0, #32]
}
 8005aac:	bcf0      	pop	{r4, r5, r6, r7}
 8005aae:	4770      	bx	lr

08005ab0 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8005ab4:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8005ab6:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8005ab8:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8005aba:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8005abc:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8005abe:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8005ac0:	8243      	strh	r3, [r0, #18]
}
 8005ac2:	4770      	bx	lr

08005ac4 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8005ac4:	b410      	push	{r4}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8005ac6:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	408b      	lsls	r3, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8005acc:	b2a4      	uxth	r4, r4
 8005ace:	ea24 0303 	bic.w	r3, r4, r3
 8005ad2:	8403      	strh	r3, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8005ad4:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	bf18      	it	ne
 8005ada:	2908      	cmpne	r1, #8
 8005adc:	d00e      	beq.n	8005afc <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8005ade:	3904      	subs	r1, #4
 8005ae0:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8005ae4:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8005ae8:	580c      	ldr	r4, [r1, r0]
 8005aea:	4023      	ands	r3, r4
 8005aec:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8005aee:	0212      	lsls	r2, r2, #8
 8005af0:	580b      	ldr	r3, [r1, r0]
 8005af2:	b292      	uxth	r2, r2
 8005af4:	431a      	orrs	r2, r3
 8005af6:	500a      	str	r2, [r1, r0]
  }
}
 8005af8:	bc10      	pop	{r4}
 8005afa:	4770      	bx	lr
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 8005afc:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 8005afe:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8005b02:	580c      	ldr	r4, [r1, r0]
 8005b04:	4023      	ands	r3, r4
 8005b06:	500b      	str	r3, [r1, r0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8005b08:	580b      	ldr	r3, [r1, r0]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	500a      	str	r2, [r1, r0]
 8005b0e:	e7f3      	b.n	8005af8 <TIM_SelectOCxM+0x34>

08005b10 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8005b10:	6341      	str	r1, [r0, #52]	; 0x34
}
 8005b12:	4770      	bx	lr

08005b14 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8005b14:	6381      	str	r1, [r0, #56]	; 0x38
}
 8005b16:	4770      	bx	lr

08005b18 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8005b18:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8005b1a:	4770      	bx	lr

08005b1c <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8005b1c:	6401      	str	r1, [r0, #64]	; 0x40
}
 8005b1e:	4770      	bx	lr

08005b20 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8005b20:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8005b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b26:	041b      	lsls	r3, r3, #16
 8005b28:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8005b2a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005b2c:	8303      	strh	r3, [r0, #24]
}
 8005b2e:	4770      	bx	lr

08005b30 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8005b30:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8005b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8005b3a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b3e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005b40:	8303      	strh	r3, [r0, #24]
}
 8005b42:	4770      	bx	lr

08005b44 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8005b44:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8005b4e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005b50:	8383      	strh	r3, [r0, #28]
}
 8005b52:	4770      	bx	lr

08005b54 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8005b54:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8005b5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b62:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005b64:	8383      	strh	r3, [r0, #28]
}
 8005b66:	4770      	bx	lr

08005b68 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005b68:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8005b6a:	f023 0308 	bic.w	r3, r3, #8
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8005b72:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005b74:	8303      	strh	r3, [r0, #24]
}
 8005b76:	4770      	bx	lr

08005b78 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8005b78:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8005b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b7e:	041b      	lsls	r3, r3, #16
 8005b80:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8005b82:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b86:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005b88:	8303      	strh	r3, [r0, #24]
}
 8005b8a:	4770      	bx	lr

08005b8c <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005b8c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8005b8e:	f023 0308 	bic.w	r3, r3, #8
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8005b96:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005b98:	8383      	strh	r3, [r0, #28]
}
 8005b9a:	4770      	bx	lr

08005b9c <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8005b9c:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8005b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8005ba6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005baa:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005bac:	8383      	strh	r3, [r0, #28]
}
 8005bae:	4770      	bx	lr

08005bb0 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005bb0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8005bb2:	f023 0304 	bic.w	r3, r3, #4
 8005bb6:	041b      	lsls	r3, r3, #16
 8005bb8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8005bba:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005bbc:	8303      	strh	r3, [r0, #24]
}
 8005bbe:	4770      	bx	lr

08005bc0 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8005bc0:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8005bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bc6:	041b      	lsls	r3, r3, #16
 8005bc8:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8005bca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005bce:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8005bd0:	8303      	strh	r3, [r0, #24]
}
 8005bd2:	4770      	bx	lr

08005bd4 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8005bd4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8005bd6:	f023 0304 	bic.w	r3, r3, #4
 8005bda:	041b      	lsls	r3, r3, #16
 8005bdc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8005bde:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8005be0:	8383      	strh	r3, [r0, #28]
}
 8005be2:	4770      	bx	lr

08005be4 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8005be4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8005be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bea:	041b      	lsls	r3, r3, #16
 8005bec:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8005bee:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005bf2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8005bf4:	8383      	strh	r3, [r0, #28]
}
 8005bf6:	4770      	bx	lr

08005bf8 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8005bf8:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8005bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8005c02:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005c04:	8303      	strh	r3, [r0, #24]
}
 8005c06:	4770      	bx	lr

08005c08 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8005c08:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8005c0a:	045b      	lsls	r3, r3, #17
 8005c0c:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8005c0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c12:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8005c14:	8303      	strh	r3, [r0, #24]
}
 8005c16:	4770      	bx	lr

08005c18 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8005c18:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8005c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8005c22:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005c24:	8383      	strh	r3, [r0, #28]
}
 8005c26:	4770      	bx	lr

08005c28 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8005c28:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8005c2a:	045b      	lsls	r3, r3, #17
 8005c2c:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8005c2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c32:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8005c34:	8383      	strh	r3, [r0, #28]
}
 8005c36:	4770      	bx	lr

08005c38 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005c38:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8005c3a:	f023 0302 	bic.w	r3, r3, #2
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8005c42:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005c44:	8403      	strh	r3, [r0, #32]
}
 8005c46:	4770      	bx	lr

08005c48 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8005c48:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8005c4a:	f023 0308 	bic.w	r3, r3, #8
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8005c52:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005c54:	8403      	strh	r3, [r0, #32]
}
 8005c56:	4770      	bx	lr

08005c58 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005c58:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8005c5a:	f023 0320 	bic.w	r3, r3, #32
 8005c5e:	041b      	lsls	r3, r3, #16
 8005c60:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8005c62:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005c66:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005c68:	8403      	strh	r3, [r0, #32]
}
 8005c6a:	4770      	bx	lr

08005c6c <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8005c6c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c72:	041b      	lsls	r3, r3, #16
 8005c74:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8005c76:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8005c7a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005c7c:	8403      	strh	r3, [r0, #32]
}
 8005c7e:	4770      	bx	lr

08005c80 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005c80:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8005c82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8005c8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005c8e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005c90:	8403      	strh	r3, [r0, #32]
}
 8005c92:	4770      	bx	lr

08005c94 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8005c94:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8005c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9a:	041b      	lsls	r3, r3, #16
 8005c9c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8005c9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005ca2:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005ca4:	8403      	strh	r3, [r0, #32]
}
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8005ca8:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8005caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8005cb2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005cb6:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8005cb8:	8403      	strh	r3, [r0, #32]
}
 8005cba:	4770      	bx	lr

08005cbc <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8005cbc:	b410      	push	{r4}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8005cbe:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8005cc4:	b2a4      	uxth	r4, r4
 8005cc6:	ea24 0303 	bic.w	r3, r4, r3
 8005cca:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8005ccc:	8c03      	ldrh	r3, [r0, #32]
 8005cce:	fa12 f101 	lsls.w	r1, r2, r1
 8005cd2:	430b      	orrs	r3, r1
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	8403      	strh	r3, [r0, #32]
}
 8005cd8:	bc10      	pop	{r4}
 8005cda:	4770      	bx	lr

08005cdc <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8005cdc:	b410      	push	{r4}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8005cde:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8005ce4:	b2a4      	uxth	r4, r4
 8005ce6:	ea24 0303 	bic.w	r3, r4, r3
 8005cea:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8005cec:	8c03      	ldrh	r3, [r0, #32]
 8005cee:	fa12 f101 	lsls.w	r1, r2, r1
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	8403      	strh	r3, [r0, #32]
}
 8005cf8:	bc10      	pop	{r4}
 8005cfa:	4770      	bx	lr

08005cfc <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005cfc:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005cfe:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d032      	beq.n	8005d6a <TIM_ICInit+0x6e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d058      	beq.n	8005dba <TIM_ICInit+0xbe>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8005d08:	2b08      	cmp	r3, #8
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8005d0a:	884e      	ldrh	r6, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8005d0c:	8c03      	ldrh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8005d0e:	f000 8082 	beq.w	8005e16 <TIM_ICInit+0x11a>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005d12:	888f      	ldrh	r7, [r1, #4]
 8005d14:	890d      	ldrh	r5, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005d16:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8005d18:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d1c:	0409      	lsls	r1, r1, #16
 8005d1e:	0c09      	lsrs	r1, r1, #16
 8005d20:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d22:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8005d24:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8005d26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8005d2e:	0512      	lsls	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d30:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8005d32:	0d12      	lsrs	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d34:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8005d36:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8005d3a:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8005d3e:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8005d48:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d4a:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8005d4c:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8005d4e:	8b83      	ldrh	r3, [r0, #28]
 8005d50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	0c1b      	lsrs	r3, r3, #16
 8005d58:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8005d5a:	8b83      	ldrh	r3, [r0, #28]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005d66:	bcf0      	pop	{r4, r5, r6, r7}
 8005d68:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8005d6a:	8c03      	ldrh	r3, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005d6c:	884e      	ldrh	r6, [r1, #2]
 8005d6e:	888d      	ldrh	r5, [r1, #4]
 8005d70:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005d72:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8005d74:	f023 0101 	bic.w	r1, r3, #1
 8005d78:	0409      	lsls	r1, r1, #16
 8005d7a:	0c09      	lsrs	r1, r1, #16
 8005d7c:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d7e:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005d80:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8005d82:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8005d86:	0412      	lsls	r2, r2, #16
 8005d88:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8a:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005d8e:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d92:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005d94:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d96:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8005d98:	f046 0101 	orr.w	r1, r6, #1
 8005d9c:	430b      	orrs	r3, r1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005d9e:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005da0:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005da2:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8005da4:	8b03      	ldrh	r3, [r0, #24]
 8005da6:	f023 030c 	bic.w	r3, r3, #12
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8005db0:	8b03      	ldrh	r3, [r0, #24]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	4323      	orrs	r3, r4
 8005db6:	8303      	strh	r3, [r0, #24]
 8005db8:	e7d5      	b.n	8005d66 <TIM_ICInit+0x6a>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8005dba:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8005dbc:	884e      	ldrh	r6, [r1, #2]
 8005dbe:	888d      	ldrh	r5, [r1, #4]
 8005dc0:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005dc2:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8005dc4:	f023 0110 	bic.w	r1, r3, #16
 8005dc8:	0409      	lsls	r1, r1, #16
 8005dca:	0c09      	lsrs	r1, r1, #16
 8005dcc:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dce:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005dd0:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8005dd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005dd6:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8005ddc:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dde:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8005de0:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de4:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8005de6:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8005de8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8005dec:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8005df6:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df8:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005dfa:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8005dfc:	8b03      	ldrh	r3, [r0, #24]
 8005dfe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e02:	041b      	lsls	r3, r3, #16
 8005e04:	0c1b      	lsrs	r3, r3, #16
 8005e06:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8005e08:	8b03      	ldrh	r3, [r0, #24]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	8303      	strh	r3, [r0, #24]
 8005e14:	e7a7      	b.n	8005d66 <TIM_ICInit+0x6a>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8005e16:	888d      	ldrh	r5, [r1, #4]
 8005e18:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005e1a:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8005e1c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005e20:	0409      	lsls	r1, r1, #16
 8005e22:	0c09      	lsrs	r1, r1, #16
 8005e24:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e26:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 8005e28:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8005e2a:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e2e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8005e32:	0412      	lsls	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e34:	041b      	lsls	r3, r3, #16
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8005e36:	0c12      	lsrs	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e38:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005e3a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8005e3e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005e42:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005e4a:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e4c:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8005e4e:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8005e50:	8b83      	ldrh	r3, [r0, #28]
 8005e52:	f023 030c 	bic.w	r3, r3, #12
 8005e56:	041b      	lsls	r3, r3, #16
 8005e58:	0c1b      	lsrs	r3, r3, #16
 8005e5a:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8005e5c:	8b83      	ldrh	r3, [r0, #28]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	4323      	orrs	r3, r4
 8005e62:	8383      	strh	r3, [r0, #28]
 8005e64:	e77f      	b.n	8005d66 <TIM_ICInit+0x6a>
 8005e66:	bf00      	nop

08005e68 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8005e68:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8005e6a:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8005e6c:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8005e6e:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8005e70:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8005e72:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8005e74:	8103      	strh	r3, [r0, #8]
}
 8005e76:	4770      	bx	lr

08005e78 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8005e78:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8005e7c:	888a      	ldrh	r2, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8005e7e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005e82:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8005e84:	f1b8 0f00 	cmp.w	r8, #0
 8005e88:	bf0c      	ite	eq
 8005e8a:	2502      	moveq	r5, #2
 8005e8c:	2500      	movne	r5, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8005e8e:	2a01      	cmp	r2, #1
 8005e90:	bf14      	ite	ne
 8005e92:	2601      	movne	r6, #1
 8005e94:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d051      	beq.n	8005f3e <TIM_PWMIConfig+0xc6>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8005e9a:	8c03      	ldrh	r3, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8005e9c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005ea0:	88cf      	ldrh	r7, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8005ea2:	f023 0310 	bic.w	r3, r3, #16
 8005ea6:	041b      	lsls	r3, r3, #16
 8005ea8:	0c1b      	lsrs	r3, r3, #16
 8005eaa:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eac:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005eae:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8005eb0:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8005eb4:	0524      	lsls	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb6:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8005eba:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ebc:	0409      	lsls	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8005ebe:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ec2:	0c09      	lsrs	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8005ec4:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8005ec6:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8005eca:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8005ece:	b289      	uxth	r1, r1
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8005ed0:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8005ed2:	f041 0110 	orr.w	r1, r1, #16

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ed6:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005ed8:	8401      	strh	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8005eda:	8b01      	ldrh	r1, [r0, #24]
 8005edc:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8005ee0:	0409      	lsls	r1, r1, #16
 8005ee2:	0c09      	lsrs	r1, r1, #16
 8005ee4:	8301      	strh	r1, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8005ee6:	8b03      	ldrh	r3, [r0, #24]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8005ef2:	8c01      	ldrh	r1, [r0, #32]
 8005ef4:	f021 0101 	bic.w	r1, r1, #1
 8005ef8:	0409      	lsls	r1, r1, #16
 8005efa:	0c09      	lsrs	r1, r1, #16
 8005efc:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005efe:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005f00:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8005f02:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8005f06:	0412      	lsls	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f08:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8005f0c:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f0e:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005f10:	ea42 120c 	orr.w	r2, r2, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f14:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8005f16:	f043 0301 	orr.w	r3, r3, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005f1a:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8005f1c:	431d      	orrs	r5, r3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005f1e:	4316      	orrs	r6, r2
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f20:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8005f22:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8005f24:	8b03      	ldrh	r3, [r0, #24]
 8005f26:	f023 030c 	bic.w	r3, r3, #12
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	0c1b      	lsrs	r3, r3, #16
 8005f2e:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8005f30:	8b03      	ldrh	r3, [r0, #24]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	431f      	orrs	r7, r3
 8005f36:	8307      	strh	r7, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8005f38:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8005f3c:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8005f3e:	8c03      	ldrh	r3, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8005f40:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8005f42:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8005f44:	f023 0301 	bic.w	r3, r3, #1
 8005f48:	041b      	lsls	r3, r3, #16
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4e:	8b01      	ldrh	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8005f50:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8005f52:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
 8005f56:	0409      	lsls	r1, r1, #16
 8005f58:	0c09      	lsrs	r1, r1, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f5a:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005f5e:	ea41 1107 	orr.w	r1, r1, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f62:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005f64:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f66:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8005f68:	f048 0801 	orr.w	r8, r8, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8005f6c:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8005f6e:	ea43 0308 	orr.w	r3, r3, r8

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f72:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005f74:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8005f76:	8b03      	ldrh	r3, [r0, #24]
 8005f78:	f023 030c 	bic.w	r3, r3, #12
 8005f7c:	041b      	lsls	r3, r3, #16
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8005f82:	8b03      	ldrh	r3, [r0, #24]
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	4323      	orrs	r3, r4
 8005f88:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8005f8a:	8c03      	ldrh	r3, [r0, #32]
 8005f8c:	f023 0310 	bic.w	r3, r3, #16
 8005f90:	041b      	lsls	r3, r3, #16
 8005f92:	0c1b      	lsrs	r3, r3, #16
 8005f94:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f96:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005f98:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8005f9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f9e:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8005fa4:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa6:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8005fa8:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fac:	0c1b      	lsrs	r3, r3, #16
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8005fae:	f043 0310 	orr.w	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8005fb2:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8005fb4:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8005fb8:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fbc:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 8005fbe:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8005fc0:	8b03      	ldrh	r3, [r0, #24]
 8005fc2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	0c1b      	lsrs	r3, r3, #16
 8005fca:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8005fcc:	8b03      	ldrh	r3, [r0, #24]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 8005fd4:	b2a4      	uxth	r4, r4
 8005fd6:	8304      	strh	r4, [r0, #24]
 8005fd8:	e7ae      	b.n	8005f38 <TIM_PWMIConfig+0xc0>
 8005fda:	bf00      	nop

08005fdc <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8005fdc:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8005fde:	4770      	bx	lr

08005fe0 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8005fe0:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8005fe2:	4770      	bx	lr

08005fe4 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8005fe4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8005fe6:	4770      	bx	lr

08005fe8 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8005fe8:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8005fea:	4770      	bx	lr

08005fec <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8005fec:	8b03      	ldrh	r3, [r0, #24]
 8005fee:	f023 030c 	bic.w	r3, r3, #12
 8005ff2:	041b      	lsls	r3, r3, #16
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8005ff8:	8b03      	ldrh	r3, [r0, #24]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	8303      	strh	r3, [r0, #24]
}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop

08006004 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8006004:	8b03      	ldrh	r3, [r0, #24]
 8006006:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800600a:	041b      	lsls	r3, r3, #16
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8006010:	8b03      	ldrh	r3, [r0, #24]
 8006012:	b29b      	uxth	r3, r3
 8006014:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006018:	b29b      	uxth	r3, r3
 800601a:	8303      	strh	r3, [r0, #24]
}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop

08006020 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8006020:	8b83      	ldrh	r3, [r0, #28]
 8006022:	f023 030c 	bic.w	r3, r3, #12
 8006026:	041b      	lsls	r3, r3, #16
 8006028:	0c1b      	lsrs	r3, r3, #16
 800602a:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800602c:	8b83      	ldrh	r3, [r0, #28]
 800602e:	b29b      	uxth	r3, r3
 8006030:	430b      	orrs	r3, r1
 8006032:	8383      	strh	r3, [r0, #28]
}
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop

08006038 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8006038:	8b83      	ldrh	r3, [r0, #28]
 800603a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8006044:	8b83      	ldrh	r3, [r0, #28]
 8006046:	b29b      	uxth	r3, r3
 8006048:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800604c:	b29b      	uxth	r3, r3
 800604e:	8383      	strh	r3, [r0, #28]
}
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop

08006054 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8006054:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8006058:	880b      	ldrh	r3, [r1, #0]
 800605a:	898a      	ldrh	r2, [r1, #12]
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800605c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800605e:	888f      	ldrh	r7, [r1, #4]
 8006060:	88ce      	ldrh	r6, [r1, #6]
 8006062:	890d      	ldrh	r5, [r1, #8]
 8006064:	894c      	ldrh	r4, [r1, #10]
 8006066:	ea4c 0303 	orr.w	r3, ip, r3
 800606a:	433b      	orrs	r3, r7
 800606c:	4333      	orrs	r3, r6
 800606e:	432b      	orrs	r3, r5
 8006070:	4323      	orrs	r3, r4
 8006072:	4313      	orrs	r3, r2
 8006074:	b29b      	uxth	r3, r3
 8006076:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 800607a:	bcf0      	pop	{r4, r5, r6, r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop

08006080 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8006080:	2300      	movs	r3, #0
 8006082:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8006084:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8006086:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8006088:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800608a:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800608c:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800608e:	8183      	strh	r3, [r0, #12]
}
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop

08006094 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8006094:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006098:	b921      	cbnz	r1, 80060a4 <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800609a:	045b      	lsls	r3, r3, #17
 800609c:	0c5b      	lsrs	r3, r3, #17
 800609e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80060a2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80060a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80060b2:	4770      	bx	lr

080060b4 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80060b4:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80060b6:	b929      	cbnz	r1, 80060c4 <TIM_SelectCOM+0x10>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 80060b8:	f023 0304 	bic.w	r3, r3, #4
 80060bc:	041b      	lsls	r3, r3, #16
 80060be:	0c1b      	lsrs	r3, r3, #16
 80060c0:	8083      	strh	r3, [r0, #4]
 80060c2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f043 0304 	orr.w	r3, r3, #4
 80060ca:	8083      	strh	r3, [r0, #4]
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop

080060d0 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80060d0:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80060d2:	b929      	cbnz	r1, 80060e0 <TIM_CCPreloadControl+0x10>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	041b      	lsls	r3, r3, #16
 80060da:	0c1b      	lsrs	r3, r3, #16
 80060dc:	8083      	strh	r3, [r0, #4]
 80060de:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	8083      	strh	r3, [r0, #4]
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop

080060ec <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80060ec:	8983      	ldrh	r3, [r0, #12]
 80060ee:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80060f0:	b91a      	cbnz	r2, 80060fa <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80060f2:	ea23 0101 	bic.w	r1, r3, r1
 80060f6:	8181      	strh	r1, [r0, #12]
 80060f8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80060fa:	4319      	orrs	r1, r3
 80060fc:	8181      	strh	r1, [r0, #12]
 80060fe:	4770      	bx	lr

08006100 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8006100:	8281      	strh	r1, [r0, #20]
}
 8006102:	4770      	bx	lr

08006104 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8006104:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 8006106:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006108:	bf0c      	ite	eq
 800610a:	2000      	moveq	r0, #0
 800610c:	2001      	movne	r0, #1
 800610e:	4770      	bx	lr

08006110 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8006110:	43c9      	mvns	r1, r1
 8006112:	b289      	uxth	r1, r1
 8006114:	8201      	strh	r1, [r0, #16]
}
 8006116:	4770      	bx	lr

08006118 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8006118:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800611a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800611c:	4211      	tst	r1, r2
 800611e:	bf0c      	ite	eq
 8006120:	2000      	moveq	r0, #0
 8006122:	2001      	movne	r0, #1
 8006124:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006126:	bf0c      	ite	eq
 8006128:	2000      	moveq	r0, #0
 800612a:	f000 0001 	andne.w	r0, r0, #1
 800612e:	4770      	bx	lr

08006130 <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8006130:	43c9      	mvns	r1, r1
 8006132:	b289      	uxth	r1, r1
 8006134:	8201      	strh	r1, [r0, #16]
}
 8006136:	4770      	bx	lr

08006138 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8006138:	430a      	orrs	r2, r1
 800613a:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 800613e:	4770      	bx	lr

08006140 <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8006140:	8983      	ldrh	r3, [r0, #12]
 8006142:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006144:	b91a      	cbnz	r2, 800614e <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8006146:	ea23 0101 	bic.w	r1, r3, r1
 800614a:	8181      	strh	r1, [r0, #12]
 800614c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800614e:	4319      	orrs	r1, r3
 8006150:	8181      	strh	r1, [r0, #12]
 8006152:	4770      	bx	lr

08006154 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8006154:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006156:	b929      	cbnz	r1, 8006164 <TIM_SelectCCDMA+0x10>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8006158:	f023 0308 	bic.w	r3, r3, #8
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	8083      	strh	r3, [r0, #4]
 8006162:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8006164:	b29b      	uxth	r3, r3
 8006166:	f043 0308 	orr.w	r3, r3, #8
 800616a:	8083      	strh	r3, [r0, #4]
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop

08006170 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8006170:	8903      	ldrh	r3, [r0, #8]
 8006172:	f023 0307 	bic.w	r3, r3, #7
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	0c1b      	lsrs	r3, r3, #16
 800617a:	8103      	strh	r3, [r0, #8]
}
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop

08006180 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006180:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8006182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006186:	041b      	lsls	r3, r3, #16
 8006188:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800618a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618c:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800618e:	8903      	ldrh	r3, [r0, #8]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f043 0307 	orr.w	r3, r3, #7
 8006196:	8103      	strh	r3, [r0, #8]
}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop

0800619c <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800619c:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800619e:	b430      	push	{r4, r5}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80061a0:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80061a2:	d026      	beq.n	80061f2 <TIM_TIxExternalClockConfig+0x56>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80061a4:	f024 0401 	bic.w	r4, r4, #1
 80061a8:	0424      	lsls	r4, r4, #16
 80061aa:	0c24      	lsrs	r4, r4, #16
 80061ac:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ae:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80061b0:	8c04      	ldrh	r4, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80061b2:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 80061b6:	042d      	lsls	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061b8:	f024 040a 	bic.w	r4, r4, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80061bc:	0c2d      	lsrs	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061be:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80061c0:	f045 0501 	orr.w	r5, r5, #1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061c4:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80061c6:	ea45 1303 	orr.w	r3, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80061ca:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80061ce:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80061d0:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061d2:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80061d4:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061d6:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80061d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061dc:	041b      	lsls	r3, r3, #16
 80061de:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80061e0:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e2:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80061e4:	8903      	ldrh	r3, [r0, #8]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f043 0307 	orr.w	r3, r3, #7
 80061ec:	8103      	strh	r3, [r0, #8]
}
 80061ee:	bc30      	pop	{r4, r5}
 80061f0:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80061f2:	f024 0410 	bic.w	r4, r4, #16
 80061f6:	0424      	lsls	r4, r4, #16
 80061f8:	0c24      	lsrs	r4, r4, #16
 80061fa:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061fc:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80061fe:	8c04      	ldrh	r4, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006200:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006204:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8006208:	052d      	lsls	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800620a:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800620c:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800620e:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8006210:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8006214:	f044 0410 	orr.w	r4, r4, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8006218:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800621c:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8006220:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8006222:	b292      	uxth	r2, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006224:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006226:	8402      	strh	r2, [r0, #32]
 8006228:	e7d5      	b.n	80061d6 <TIM_TIxExternalClockConfig+0x3a>
 800622a:	bf00      	nop

0800622c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800622c:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800622e:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8006230:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8006232:	430c      	orrs	r4, r1
 8006234:	4314      	orrs	r4, r2
 8006236:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800623a:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623c:	8104      	strh	r4, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800623e:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8006240:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8006248:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800624c:	8103      	strh	r3, [r0, #8]
}
 800624e:	bc10      	pop	{r4}
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop

08006254 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8006254:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8006256:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8006258:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800625a:	430c      	orrs	r4, r1
 800625c:	4314      	orrs	r4, r2
 800625e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8006262:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006264:	8104      	strh	r4, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8006266:	8903      	ldrh	r3, [r0, #8]
 8006268:	b29b      	uxth	r3, r3
 800626a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800626e:	8103      	strh	r3, [r0, #8]
}
 8006270:	bc10      	pop	{r4}
 8006272:	4770      	bx	lr

08006274 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006274:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	041b      	lsls	r3, r3, #16
 800627c:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800627e:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006280:	8103      	strh	r3, [r0, #8]
}
 8006282:	4770      	bx	lr

08006284 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8006284:	8883      	ldrh	r3, [r0, #4]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8006290:	8883      	ldrh	r3, [r0, #4]
 8006292:	b29b      	uxth	r3, r3
 8006294:	430b      	orrs	r3, r1
 8006296:	8083      	strh	r3, [r0, #4]
}
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop

0800629c <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 800629c:	8903      	ldrh	r3, [r0, #8]
 800629e:	f023 0307 	bic.w	r3, r3, #7
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	0c1b      	lsrs	r3, r3, #16
 80062a6:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80062a8:	8903      	ldrh	r3, [r0, #8]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	430b      	orrs	r3, r1
 80062ae:	8103      	strh	r3, [r0, #8]
}
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop

080062b4 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80062b4:	8903      	ldrh	r3, [r0, #8]
 80062b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ba:	041b      	lsls	r3, r3, #16
 80062bc:	0c1b      	lsrs	r3, r3, #16
 80062be:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80062c0:	8903      	ldrh	r3, [r0, #8]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	430b      	orrs	r3, r1
 80062c6:	8103      	strh	r3, [r0, #8]
}
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop

080062cc <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80062cc:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80062ce:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80062d0:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80062d2:	430c      	orrs	r4, r1
 80062d4:	4314      	orrs	r4, r2
 80062d6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80062da:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062dc:	8104      	strh	r4, [r0, #8]
}
 80062de:	bc10      	pop	{r4}
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop

080062e4 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 80062e4:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062e6:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80062e8:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80062ec:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80062f0:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80062f4:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80062f8:	0436      	lsls	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80062fa:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80062fe:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8006300:	0c36      	lsrs	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8006302:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8006304:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8006306:	4316      	orrs	r6, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8006308:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800630a:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800630e:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8006312:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8006314:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8006318:	b2b6      	uxth	r6, r6

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631a:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800631c:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800631e:	8406      	strh	r6, [r0, #32]
}
 8006320:	bc70      	pop	{r4, r5, r6}
 8006322:	4770      	bx	lr

08006324 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8006324:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006326:	b929      	cbnz	r1, 8006334 <TIM_SelectHallSensor+0x10>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8006328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800632c:	041b      	lsls	r3, r3, #16
 800632e:	0c1b      	lsrs	r3, r3, #16
 8006330:	8083      	strh	r3, [r0, #4]
 8006332:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8006334:	b29b      	uxth	r3, r3
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	8083      	strh	r3, [r0, #4]
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop

08006340 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8006340:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop

08006348 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8006348:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800634a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800634e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006352:	4298      	cmp	r0, r3
 8006354:	d028      	beq.n	80063a8 <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8006356:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800635a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800635e:	4298      	cmp	r0, r3
 8006360:	d02c      	beq.n	80063bc <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 8006362:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8006366:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800636a:	4298      	cmp	r0, r3
 800636c:	d032      	beq.n	80063d4 <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 800636e:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8006372:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006376:	4298      	cmp	r0, r3
 8006378:	d038      	beq.n	80063ec <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 800637a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800637e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006382:	4298      	cmp	r0, r3
 8006384:	d03e      	beq.n	8006404 <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 8006386:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800638a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800638e:	4298      	cmp	r0, r3
 8006390:	d000      	beq.n	8006394 <USART_DeInit+0x4c>
 8006392:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8006394:	2020      	movs	r0, #32
 8006396:	2101      	movs	r1, #1
 8006398:	f7fd fe20 	bl	8003fdc <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800639c:	2020      	movs	r0, #32
 800639e:	2100      	movs	r1, #0
    }
  }
}
 80063a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80063a4:	f7fd be1a 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80063a8:	2010      	movs	r0, #16
 80063aa:	2101      	movs	r1, #1
 80063ac:	f7fd fe16 	bl	8003fdc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80063b0:	2010      	movs	r0, #16
 80063b2:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80063b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80063b8:	f7fd be10 	b.w	8003fdc <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80063bc:	2101      	movs	r1, #1
 80063be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80063c2:	f7fd fdfd 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80063c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80063ca:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80063cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80063d0:	f7fd bdf6 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 80063d4:	2101      	movs	r1, #1
 80063d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80063da:	f7fd fdf1 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80063de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80063e2:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80063e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 80063e8:	f7fd bdea 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 80063ec:	2101      	movs	r1, #1
 80063ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80063f2:	f7fd fde5 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80063f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80063fa:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80063fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8006400:	f7fd bdde 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8006404:	2101      	movs	r1, #1
 8006406:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800640a:	f7fd fdd9 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800640e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006412:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8006414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8006418:	f7fd bdd2 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>

0800641c <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800641c:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800641e:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006420:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006424:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006426:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006428:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800642a:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800642c:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800642e:	8948      	ldrh	r0, [r1, #10]
 8006430:	890f      	ldrh	r7, [r1, #8]
 8006432:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8006434:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8006436:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8006438:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800643a:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800643c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006440:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006444:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8006448:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800644a:	4302      	orrs	r2, r0
 800644c:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800644e:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8006450:	4313      	orrs	r3, r2
 8006452:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8006454:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8006456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800645a:	041b      	lsls	r3, r3, #16
 800645c:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800645e:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8006460:	430b      	orrs	r3, r1
 8006462:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8006464:	4668      	mov	r0, sp
 8006466:	f7fd fcb7 	bl	8003dd8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800646a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800646e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006472:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006476:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800647a:	429c      	cmp	r4, r3
 800647c:	bf18      	it	ne
 800647e:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8006480:	89a2      	ldrh	r2, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8006482:	bf0c      	ite	eq
 8006484:	9b03      	ldreq	r3, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8006486:	9b02      	ldrne	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8006488:	b212      	sxth	r2, r2
 800648a:	2a00      	cmp	r2, #0
 800648c:	db21      	blt.n	80064d2 <USART_Init+0xb6>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800648e:	6828      	ldr	r0, [r5, #0]
 8006490:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006498:	0080      	lsls	r0, r0, #2
 800649a:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 800649e:	f248 531f 	movw	r3, #34079	; 0x851f

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80064a2:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 80064a4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80064a8:	fba3 5201 	umull	r5, r2, r3, r1
 80064ac:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80064ae:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80064b0:	0116      	lsls	r6, r2, #4
 80064b2:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80064b4:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80064b6:	fb02 1215 	mls	r2, r2, r5, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80064ba:	db13      	blt.n	80064e4 <USART_Init+0xc8>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80064bc:	0112      	lsls	r2, r2, #4
 80064be:	3232      	adds	r2, #50	; 0x32
 80064c0:	fba3 5302 	umull	r5, r3, r3, r2
 80064c4:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80064c8:	4333      	orrs	r3, r6
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	8123      	strh	r3, [r4, #8]
}
 80064ce:	b005      	add	sp, #20
 80064d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80064d2:	682a      	ldr	r2, [r5, #0]
 80064d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80064d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80064dc:	0052      	lsls	r2, r2, #1
 80064de:	fbb3 f1f2 	udiv	r1, r3, r2
 80064e2:	e7dc      	b.n	800649e <USART_Init+0x82>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80064e4:	00d2      	lsls	r2, r2, #3
 80064e6:	3232      	adds	r2, #50	; 0x32
 80064e8:	fba3 1302 	umull	r1, r3, r3, r2
 80064ec:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80064f0:	4333      	orrs	r3, r6
 80064f2:	e7ea      	b.n	80064ca <USART_Init+0xae>

080064f4 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80064f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80064f8:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 80064fa:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80064fc:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 80064fe:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8006500:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8006502:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8006504:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8006506:	8183      	strh	r3, [r0, #12]
}
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop

0800650c <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800650c:	880a      	ldrh	r2, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800650e:	8a03      	ldrh	r3, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8006510:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8006512:	884d      	ldrh	r5, [r1, #2]
 8006514:	888c      	ldrh	r4, [r1, #4]
 8006516:	88c9      	ldrh	r1, [r1, #6]
 8006518:	432a      	orrs	r2, r5
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800651a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800651e:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8006520:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8006522:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8006524:	0c1b      	lsrs	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8006526:	b292      	uxth	r2, r2
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8006528:	4313      	orrs	r3, r2
 800652a:	8203      	strh	r3, [r0, #16]
}
 800652c:	bc30      	pop	{r4, r5}
 800652e:	4770      	bx	lr

08006530 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8006530:	2300      	movs	r3, #0
 8006532:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8006534:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8006536:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8006538:	80c3      	strh	r3, [r0, #6]
}
 800653a:	4770      	bx	lr

0800653c <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800653c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800653e:	b929      	cbnz	r1, 800654c <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8006540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006544:	041b      	lsls	r3, r3, #16
 8006546:	0c1b      	lsrs	r3, r3, #16
 8006548:	8183      	strh	r3, [r0, #12]
 800654a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800654c:	b29b      	uxth	r3, r3
 800654e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006552:	8183      	strh	r3, [r0, #12]
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop

08006558 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8006558:	8b03      	ldrh	r3, [r0, #24]
 800655a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800655e:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8006560:	8b03      	ldrh	r3, [r0, #24]
 8006562:	b29b      	uxth	r3, r3
 8006564:	430b      	orrs	r3, r1
 8006566:	8303      	strh	r3, [r0, #24]
}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop

0800656c <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800656c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800656e:	b919      	cbnz	r1, 8006578 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8006570:	045b      	lsls	r3, r3, #17
 8006572:	0c5b      	lsrs	r3, r3, #17
 8006574:	8183      	strh	r3, [r0, #12]
 8006576:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8006578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800657c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006580:	b29b      	uxth	r3, r3
 8006582:	8183      	strh	r3, [r0, #12]
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop

08006588 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8006588:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800658a:	b929      	cbnz	r1, 8006598 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800658c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	0c1b      	lsrs	r3, r3, #16
 8006594:	8283      	strh	r3, [r0, #20]
 8006596:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8006598:	b29b      	uxth	r3, r3
 800659a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800659e:	8283      	strh	r3, [r0, #20]
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop

080065a4 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80065a4:	05c9      	lsls	r1, r1, #23
 80065a6:	0dc9      	lsrs	r1, r1, #23
 80065a8:	8081      	strh	r1, [r0, #4]
}
 80065aa:	4770      	bx	lr

080065ac <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80065ac:	8880      	ldrh	r0, [r0, #4]
}
 80065ae:	05c0      	lsls	r0, r0, #23
 80065b0:	0dc0      	lsrs	r0, r0, #23
 80065b2:	4770      	bx	lr

080065b4 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80065b4:	8a03      	ldrh	r3, [r0, #16]
 80065b6:	f023 030f 	bic.w	r3, r3, #15
 80065ba:	041b      	lsls	r3, r3, #16
 80065bc:	0c1b      	lsrs	r3, r3, #16
 80065be:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80065c0:	8a03      	ldrh	r3, [r0, #16]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	430b      	orrs	r3, r1
 80065c6:	8203      	strh	r3, [r0, #16]
}
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop

080065cc <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80065cc:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80065ce:	b929      	cbnz	r1, 80065dc <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80065d0:	f023 0302 	bic.w	r3, r3, #2
 80065d4:	041b      	lsls	r3, r3, #16
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	8183      	strh	r3, [r0, #12]
 80065da:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f043 0302 	orr.w	r3, r3, #2
 80065e2:	8183      	strh	r3, [r0, #12]
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop

080065e8 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 80065e8:	8983      	ldrh	r3, [r0, #12]
 80065ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ee:	041b      	lsls	r3, r3, #16
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 80065f4:	8983      	ldrh	r3, [r0, #12]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	430b      	orrs	r3, r1
 80065fa:	8183      	strh	r3, [r0, #12]
}
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop

08006600 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8006600:	8a03      	ldrh	r3, [r0, #16]
 8006602:	f023 0320 	bic.w	r3, r3, #32
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	0c1b      	lsrs	r3, r3, #16
 800660a:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800660c:	8a03      	ldrh	r3, [r0, #16]
 800660e:	b29b      	uxth	r3, r3
 8006610:	430b      	orrs	r3, r1
 8006612:	8203      	strh	r3, [r0, #16]
}
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop

08006618 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8006618:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800661a:	b929      	cbnz	r1, 8006628 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800661c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006620:	041b      	lsls	r3, r3, #16
 8006622:	0c1b      	lsrs	r3, r3, #16
 8006624:	8203      	strh	r3, [r0, #16]
 8006626:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8006628:	b29b      	uxth	r3, r3
 800662a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800662e:	8203      	strh	r3, [r0, #16]
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop

08006634 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8006634:	8983      	ldrh	r3, [r0, #12]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f043 0301 	orr.w	r3, r3, #1
 800663c:	8183      	strh	r3, [r0, #12]
}
 800663e:	4770      	bx	lr

08006640 <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8006640:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006642:	b929      	cbnz	r1, 8006650 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8006644:	f023 0308 	bic.w	r3, r3, #8
 8006648:	041b      	lsls	r3, r3, #16
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	8283      	strh	r3, [r0, #20]
 800664e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8006650:	b29b      	uxth	r3, r3
 8006652:	f043 0308 	orr.w	r3, r3, #8
 8006656:	8283      	strh	r3, [r0, #20]
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop

0800665c <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800665c:	8b03      	ldrh	r3, [r0, #24]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8006662:	8b03      	ldrh	r3, [r0, #24]
 8006664:	b29b      	uxth	r3, r3
 8006666:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800666a:	8303      	strh	r3, [r0, #24]
}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop

08006670 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8006670:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006672:	b929      	cbnz	r1, 8006680 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8006674:	f023 0320 	bic.w	r3, r3, #32
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	0c1b      	lsrs	r3, r3, #16
 800667c:	8283      	strh	r3, [r0, #20]
 800667e:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8006680:	b29b      	uxth	r3, r3
 8006682:	f043 0320 	orr.w	r3, r3, #32
 8006686:	8283      	strh	r3, [r0, #20]
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop

0800668c <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800668c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800668e:	b929      	cbnz	r1, 800669c <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8006690:	f023 0310 	bic.w	r3, r3, #16
 8006694:	041b      	lsls	r3, r3, #16
 8006696:	0c1b      	lsrs	r3, r3, #16
 8006698:	8283      	strh	r3, [r0, #20]
 800669a:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800669c:	b29b      	uxth	r3, r3
 800669e:	f043 0310 	orr.w	r3, r3, #16
 80066a2:	8283      	strh	r3, [r0, #20]
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop

080066a8 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80066a8:	8a83      	ldrh	r3, [r0, #20]
 80066aa:	f023 0304 	bic.w	r3, r3, #4
 80066ae:	041b      	lsls	r3, r3, #16
 80066b0:	0c1b      	lsrs	r3, r3, #16
 80066b2:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80066b4:	8a83      	ldrh	r3, [r0, #20]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	430b      	orrs	r3, r1
 80066ba:	8283      	strh	r3, [r0, #20]
}
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80066c0:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80066c2:	b929      	cbnz	r1, 80066d0 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80066c4:	f023 0302 	bic.w	r3, r3, #2
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	0c1b      	lsrs	r3, r3, #16
 80066cc:	8283      	strh	r3, [r0, #20]
 80066ce:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	f043 0302 	orr.w	r3, r3, #2
 80066d6:	8283      	strh	r3, [r0, #20]
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop

080066dc <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80066dc:	8a83      	ldrh	r3, [r0, #20]
 80066de:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80066e0:	b91a      	cbnz	r2, 80066ea <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80066e2:	ea23 0101 	bic.w	r1, r3, r1
 80066e6:	8281      	strh	r1, [r0, #20]
 80066e8:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80066ea:	4319      	orrs	r1, r3
 80066ec:	8281      	strh	r1, [r0, #20]
 80066ee:	4770      	bx	lr

080066f0 <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80066f0:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80066f4:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80066f6:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 80066fa:	2401      	movs	r4, #1
 80066fc:	fa14 f303 	lsls.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8006700:	42a1      	cmp	r1, r4
 8006702:	d00d      	beq.n	8006720 <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8006704:	2902      	cmp	r1, #2
 8006706:	d00d      	beq.n	8006724 <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8006708:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 800670a:	b92a      	cbnz	r2, 8006718 <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800670c:	6802      	ldr	r2, [r0, #0]
 800670e:	ea22 0303 	bic.w	r3, r2, r3
 8006712:	6003      	str	r3, [r0, #0]
  }
}
 8006714:	bc10      	pop	{r4}
 8006716:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8006718:	6802      	ldr	r2, [r0, #0]
 800671a:	4313      	orrs	r3, r2
 800671c:	6003      	str	r3, [r0, #0]
 800671e:	e7f9      	b.n	8006714 <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8006720:	300c      	adds	r0, #12
 8006722:	e7f2      	b.n	800670a <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 8006724:	3010      	adds	r0, #16
 8006726:	e7f0      	b.n	800670a <USART_ITConfig+0x1a>

08006728 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8006728:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 800672a:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800672c:	bf0c      	ite	eq
 800672e:	2000      	moveq	r0, #0
 8006730:	2001      	movne	r0, #1
 8006732:	4770      	bx	lr

08006734 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8006734:	43c9      	mvns	r1, r1
 8006736:	b289      	uxth	r1, r1
 8006738:	8001      	strh	r1, [r0, #0]
}
 800673a:	4770      	bx	lr

0800673c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800673c:	b410      	push	{r4}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800673e:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 8006742:	2401      	movs	r4, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8006744:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8006748:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800674a:	2b01      	cmp	r3, #1
 800674c:	d016      	beq.n	800677c <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800674e:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 8006750:	bf0c      	ite	eq
 8006752:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8006754:	8a82      	ldrhne	r2, [r0, #20]
 8006756:	b292      	uxth	r2, r2
 8006758:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 800675a:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 800675c:	2401      	movs	r4, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 800675e:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8006760:	fa14 f101 	lsls.w	r1, r4, r1
  bitpos &= USARTx->SR;
 8006764:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8006766:	4219      	tst	r1, r3
 8006768:	bf0c      	ite	eq
 800676a:	2300      	moveq	r3, #0
 800676c:	2301      	movne	r3, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 800676e:	2a00      	cmp	r2, #0
 8006770:	bf0c      	ite	eq
 8006772:	2000      	moveq	r0, #0
 8006774:	f003 0001 	andne.w	r0, r3, #1
 8006778:	bc10      	pop	{r4}
 800677a:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 800677c:	8982      	ldrh	r2, [r0, #12]
 800677e:	b292      	uxth	r2, r2
 8006780:	4022      	ands	r2, r4
 8006782:	e7ea      	b.n	800675a <USART_GetITStatus+0x1e>

08006784 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8006784:	0a09      	lsrs	r1, r1, #8
 8006786:	2301      	movs	r3, #1
 8006788:	fa13 f101 	lsls.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 800678c:	43c9      	mvns	r1, r1
 800678e:	b289      	uxth	r1, r1
 8006790:	8001      	strh	r1, [r0, #0]
}
 8006792:	4770      	bx	lr

08006794 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8006794:	b508      	push	{r3, lr}
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8006796:	2101      	movs	r1, #1
 8006798:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800679c:	f7fd fc10 	bl	8003fc0 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 80067a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80067a4:	2100      	movs	r1, #0
}
 80067a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void WWDG_DeInit(void)
{
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 80067aa:	f7fd bc09 	b.w	8003fc0 <RCC_APB1PeriphResetCmd>
 80067ae:	bf00      	nop

080067b0 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 80067b0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80067b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 80067be:	4302      	orrs	r2, r0
  /* Store the new value */
  WWDG->CFR = tmpreg;
 80067c0:	605a      	str	r2, [r3, #4]
}
 80067c2:	4770      	bx	lr

080067c4 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 80067c4:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80067c6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80067ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
  __IO uint32_t tmpreg = 0;
 80067ce:	2200      	movs	r2, #0
 80067d0:	9201      	str	r2, [sp, #4]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80067d8:	9201      	str	r2, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 80067da:	9a01      	ldr	r2, [sp, #4]
 80067dc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80067e0:	4302      	orrs	r2, r0
 80067e2:	9201      	str	r2, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 80067e4:	9a01      	ldr	r2, [sp, #4]
 80067e6:	605a      	str	r2, [r3, #4]
}
 80067e8:	b002      	add	sp, #8
 80067ea:	4770      	bx	lr

080067ec <WWDG_EnableIT>:
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 80067ec:	f248 03a4 	movw	r3, #32932	; 0x80a4
 80067f0:	f2c4 2305 	movt	r3, #16901	; 0x4205
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
}
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop

080067fc <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 80067fc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006800:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006804:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006808:	6018      	str	r0, [r3, #0]
}
 800680a:	4770      	bx	lr

0800680c <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 800680c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006810:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006814:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8006818:	6018      	str	r0, [r3, #0]
}
 800681a:	4770      	bx	lr

0800681c <WWDG_GetFlagStatus>:
  */
FlagStatus WWDG_GetFlagStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((WWDG->SR) != (uint32_t)RESET)
 800681c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006820:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006824:	6898      	ldr	r0, [r3, #8]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8006826:	3000      	adds	r0, #0
 8006828:	bf18      	it	ne
 800682a:	2001      	movne	r0, #1
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop

08006830 <WWDG_ClearFlag>:
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
  WWDG->SR = (uint32_t)RESET;
 8006830:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006834:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006838:	2200      	movs	r2, #0
 800683a:	609a      	str	r2, [r3, #8]
}
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop

08006840 <delay_us>:
  * @brief  wait micro second
  * @param  wait_time : time to wait in micro second
  * @retval None
  */
void delay_us(uint16_t waittime)
{
 8006840:	b510      	push	{r4, lr}
 8006842:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 8006844:	2001      	movs	r0, #1
 8006846:	4601      	mov	r1, r0
 8006848:	f7fd fb74 	bl	8003f34 <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 1)-1;
 800684c:	4b11      	ldr	r3, [pc, #68]	; (8006894 <delay_us+0x54>)
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 800684e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006852:	4619      	mov	r1, r3
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 1)-1;
 8006854:	605c      	str	r4, [r3, #4]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 8006856:	f7fe ff53 	bl	8005700 <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 800685a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800685e:	2108      	movs	r1, #8
 8006860:	f7fe ffe4 	bl	800582c <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 8006864:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006868:	2102      	movs	r1, #2
 800686a:	f7fe ffab 	bl	80057c4 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 800686e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8006872:	2101      	movs	r1, #1
 8006874:	f7fe fff2 	bl	800585c <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 8006878:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800687c:	f7fe ffa6 	bl	80057cc <TIM_GetCounter>
 8006880:	4601      	mov	r1, r0
 8006882:	2800      	cmp	r0, #0
 8006884:	d1f8      	bne.n	8006878 <delay_us+0x38>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8006886:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

}
 800688a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 800688e:	f7fe bfe5 	b.w	800585c <TIM_Cmd>
 8006892:	bf00      	nop
 8006894:	20000010 	.word	0x20000010

08006898 <delay_ms>:
  * @brief  wait millisecond
  * @param  wait_time : time to wait in millisecond
  * @retval None
  */
void delay_ms(uint16_t waittime)
{
 8006898:	b510      	push	{r4, lr}
 800689a:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 800689c:	2001      	movs	r0, #1
 800689e:	4601      	mov	r1, r0
 80068a0:	f7fd fb48 	bl	8003f34 <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 1)-1;
 80068a4:	4b11      	ldr	r3, [pc, #68]	; (80068ec <delay_ms+0x54>)
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 80068a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068aa:	f103 010c 	add.w	r1, r3, #12
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 1)-1;
 80068ae:	611c      	str	r4, [r3, #16]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 80068b0:	f7fe ff26 	bl	8005700 <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 80068b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068b8:	2108      	movs	r1, #8
 80068ba:	f7fe ffb7 	bl	800582c <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 80068be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068c2:	2102      	movs	r1, #2
 80068c4:	f7fe ff7e 	bl	80057c4 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 80068c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068cc:	2101      	movs	r1, #1
 80068ce:	f7fe ffc5 	bl	800585c <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 80068d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80068d6:	f7fe ff79 	bl	80057cc <TIM_GetCounter>
 80068da:	4601      	mov	r1, r0
 80068dc:	2800      	cmp	r0, #0
 80068de:	d1f8      	bne.n	80068d2 <delay_ms+0x3a>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80068e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
}
 80068e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80068e8:	f7fe bfb8 	b.w	800585c <TIM_Cmd>
 80068ec:	20000010 	.word	0x20000010

080068f0 <pinMode>:
	}
	return 16;
}
*/

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 80068f0:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 80068f2:	f240 0428 	movw	r4, #40	; 0x28
 80068f6:	f3c0 4603 	ubfx	r6, r0, #16, #4
 80068fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
	}
	return 16;
}
*/

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {
 80068fe:	b083      	sub	sp, #12
 8006900:	460f      	mov	r7, r1
 8006902:	4605      	mov	r5, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 8006904:	2101      	movs	r1, #1
 8006906:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800690a:	eb04 0486 	add.w	r4, r4, r6, lsl #2

void pinMode(uint32_t portpin, GPIOMode_TypeDef mode) {

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);
 800690e:	f7fd fae7 	bl	8003ee0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006912:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 8006914:	b2ad      	uxth	r5, r5
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8006916:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800691a:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800691e:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
 8006920:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8006922:	2302      	movs	r3, #2
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 8006924:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(GPIOPeriph[portpin>>16 & 0xf], ENABLE);

	GPIO_InitStructure.GPIO_Pin = portpin & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
 8006926:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800692a:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(GPIOPort[portpin >>16 & 0x0f], &GPIO_InitStructure);
 800692e:	f7fc fb0d 	bl	8002f4c <GPIO_Init>
}
 8006932:	b003      	add	sp, #12
 8006934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006936:	bf00      	nop

08006938 <portMode>:


void portMode(GPIO_TypeDef * port, uint32_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8006938:	b500      	push	{lr}
 800693a:	b083      	sub	sp, #12
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
 800693c:	f88d 2004 	strb.w	r2, [sp, #4]
	// RCC_AHB1PeriphClockCmd(GPIOPeriph[portpins>>16 & 0xf], ENABLE);
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit & 0xffff;
 8006940:	b28a      	uxth	r2, r1
 8006942:	9200      	str	r2, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 8006944:	f89d 2010 	ldrb.w	r2, [sp, #16]
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
 8006948:	f88d 3005 	strb.w	r3, [sp, #5]

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 800694c:	f88d 2006 	strb.w	r2, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8006950:	f89d 2014 	ldrb.w	r2, [sp, #20]
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8006954:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit & 0xffff;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 8006956:	f88d 2007 	strb.w	r2, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 800695a:	f7fc faf7 	bl	8002f4c <GPIO_Init>
}
 800695e:	b003      	add	sp, #12
 8006960:	bd00      	pop	{pc}
 8006962:	bf00      	nop

08006964 <digitalWrite>:
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8006964:	4b06      	ldr	r3, [pc, #24]	; (8006980 <digitalWrite+0x1c>)
 8006966:	f3c0 4203 	ubfx	r2, r0, #16, #4
 800696a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
/*
 static void turnOffPWM(uint8_t timer) {
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
 800696e:	b919      	cbnz	r1, 8006978 <digitalWrite+0x14>
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
	} else {
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8006970:	b281      	uxth	r1, r0
 8006972:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006974:	f7fc bb78 	b.w	8003068 <GPIO_ResetBits>
 }
 */
void digitalWrite(uint32_t portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
 8006978:	b281      	uxth	r1, r0
 800697a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800697c:	f7fc bb72 	b.w	8003064 <GPIO_SetBits>
 8006980:	20000028 	.word	0x20000028

08006984 <portWrite>:
		GPIO_ResetBits(GPIOPort[portpin >>16 & 0x0f], portpin & 0xffff);
	}
}

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8006984:	f7fc bb78 	b.w	8003078 <GPIO_Write>

08006988 <digitalRead>:
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
 8006988:	6802      	ldr	r2, [r0, #0]

void portWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
 800698a:	b508      	push	{r3, lr}
	uint8_t mode = (port->MODER) >> (pin * 2);
 800698c:	004b      	lsls	r3, r1, #1
 800698e:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d005      	beq.n	80069a4 <digitalRead+0x1c>
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, pin) ? SET : RESET);
 8006998:	f7fc fb50 	bl	800303c <GPIO_ReadInputDataBit>
 800699c:	3000      	adds	r0, #0
 800699e:	bf18      	it	ne
 80069a0:	2001      	movne	r0, #1
}
 80069a2:	bd08      	pop	{r3, pc}
}

uint8_t digitalRead(GPIO_TypeDef * port, uint16_t pin) {
	uint8_t mode = (port->MODER) >> (pin * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, pin) ? SET : RESET);
 80069a4:	f7fc fb54 	bl	8003050 <GPIO_ReadOutputDataBit>
 80069a8:	3000      	adds	r0, #0
 80069aa:	bf18      	it	ne
 80069ac:	2001      	movne	r0, #1
 80069ae:	bd08      	pop	{r3, pc}

080069b0 <i2c_begin>:
/**
 * @brief  I2C Configuration
 * @param  None
 * @retval None
 */
void i2c_begin(I2C_TypeDef * I2Cx, uint32_t clkspeed) {
 80069b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069b2:	b087      	sub	sp, #28
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
//  I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80069b4:	ae06      	add	r6, sp, #24
void i2c_begin(I2C_TypeDef * I2Cx, uint32_t clkspeed) {
  GPIO_InitTypeDef  GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	// Preset I2C configuration to the structure.
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80069b6:	2300      	movs	r3, #0
 80069b8:	f8ad 300c 	strh.w	r3, [sp, #12]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80069bc:	f64b 73ff 	movw	r3, #49151	; 0xbfff
//  I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80069c0:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80069c4:	f846 1d10 	str.w	r1, [r6, #-16]!
  GPIO_InitTypeDef  GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	// Preset I2C configuration to the structure.
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80069c8:	f8ad 300e 	strh.w	r3, [sp, #14]
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C3, ENABLE);
	} else {
	*/
		// I2C1 as default
		// I2C Periph Clock enable.
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80069cc:	2101      	movs	r1, #1

	// Preset I2C configuration to the structure.
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
//  I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80069ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C3, ENABLE);
	} else {
	*/
		// I2C1 as default
		// I2C Periph Clock enable.
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80069d2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
		// SDA -- GPIOB 7, 9 / SCL -- GPIOB 6, 8
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
		// Set Pins as AF
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 80069d6:	f44f 6780 	mov.w	r7, #1024	; 0x400

	// Preset I2C configuration to the structure.
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
//  I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80069da:	f8ad 3012 	strh.w	r3, [sp, #18]
		// I2C Periph Clock enable.
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
		// SDA -- GPIOB 7, 9 / SCL -- GPIOB 6, 8
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
		// Set Pins as AF
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 80069de:	f2c4 0702 	movt	r7, #16386	; 0x4002
	// Preset I2C configuration to the structure.
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
//  I2C_InitStructure.I2C_OwnAddress1 = I2C_SLAVE_ADDRESS7;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80069e2:	f8ad 5014 	strh.w	r5, [sp, #20]
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C3, ENABLE);
	} else {
	*/
		// I2C1 as default
		// I2C Periph Clock enable.
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80069e6:	f7fd faa5 	bl	8003f34 <RCC_APB1PeriphClockCmd>
		// SDA -- GPIOB 7, 9 / SCL -- GPIOB 6, 8
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80069ea:	2002      	movs	r0, #2
 80069ec:	2101      	movs	r1, #1
 80069ee:	f7fd fa77 	bl	8003ee0 <RCC_AHB1PeriphClockCmd>
		// Set Pins as AF
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 80069f2:	2109      	movs	r1, #9
 80069f4:	2204      	movs	r2, #4
 80069f6:	4638      	mov	r0, r7
 80069f8:	f7fc fb44 	bl	8003084 <GPIO_PinAFConfig>
		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 80069fc:	4638      	mov	r0, r7
 80069fe:	2106      	movs	r1, #6
 8006a00:	2204      	movs	r2, #4
 8006a02:	f7fc fb3f 	bl	8003084 <GPIO_PinAFConfig>
		portMode(GPIOB, GPIO_Pin_9 | GPIO_Pin_6,
 8006a06:	2401      	movs	r4, #1
 8006a08:	f04f 0e02 	mov.w	lr, #2
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	4672      	mov	r2, lr
 8006a10:	4623      	mov	r3, r4
 8006a12:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a16:	e88d 4010 	stmia.w	sp, {r4, lr}
 8006a1a:	f7ff ff8d 	bl	8006938 <portMode>
				GPIO_Mode_AF, GPIO_OType_OD, GPIO_PuPd_UP, GPIO_Speed_50MHz);
		/* Apply I2C configuration after enabling it */
		I2C_Init(I2C1, &I2C_InitStructure);
 8006a1e:	0428      	lsls	r0, r5, #16
 8006a20:	4631      	mov	r1, r6
 8006a22:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
 8006a26:	f7fc fe4f 	bl	80036c8 <I2C_Init>
		// I2C_ITConfig
		// DMA_Init
		// I2C_DMACmd
		// I2C_DMALastTransferCmd
		I2C_Cmd(I2C1, ENABLE);
 8006a2a:	0428      	lsls	r0, r5, #16
 8006a2c:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
 8006a30:	4621      	mov	r1, r4
 8006a32:	f7fc fec7 	bl	80037c4 <I2C_Cmd>
		// DMA_Cmd
		/*
	}
	*/

}
 8006a36:	b007      	add	sp, #28
 8006a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a3a:	bf00      	nop

08006a3c <i2c_transmit>:
void i2c_transmit(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t * data, uint16_t n) {
	uint16_t i;

	/* Send STRAT condition */
//	I2C_GenerateSTART(I2Cx, ENABLE);
	I2C_GenerateSTART(I2C1, ENABLE);
 8006a3c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
/**
 * @brief  Write Command to ST7032i
 * @param  Data : Command Data
 * @retval None
 */
void i2c_transmit(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t * data, uint16_t n) {
 8006a40:	b570      	push	{r4, r5, r6, lr}
	uint16_t i;

	/* Send STRAT condition */
//	I2C_GenerateSTART(I2Cx, ENABLE);
	I2C_GenerateSTART(I2C1, ENABLE);
 8006a42:	f2c4 0000 	movt	r0, #16384	; 0x4000
/**
 * @brief  Write Command to ST7032i
 * @param  Data : Command Data
 * @retval None
 */
void i2c_transmit(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t * data, uint16_t n) {
 8006a46:	460d      	mov	r5, r1
	uint16_t i;

	/* Send STRAT condition */
//	I2C_GenerateSTART(I2Cx, ENABLE);
	I2C_GenerateSTART(I2C1, ENABLE);
 8006a48:	2101      	movs	r1, #1
/**
 * @brief  Write Command to ST7032i
 * @param  Data : Command Data
 * @retval None
 */
void i2c_transmit(I2C_TypeDef * I2Cx, uint8_t addr, uint8_t * data, uint16_t n) {
 8006a4a:	4614      	mov	r4, r2
 8006a4c:	461e      	mov	r6, r3
	uint16_t i;

	/* Send STRAT condition */
//	I2C_GenerateSTART(I2Cx, ENABLE);
	I2C_GenerateSTART(I2C1, ENABLE);
 8006a4e:	f7fc fec7 	bl	80037e0 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
//	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT ))
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 8006a52:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8006a56:	2101      	movs	r1, #1
 8006a58:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006a5c:	f2c0 0103 	movt	r1, #3
 8006a60:	f7fc ffda 	bl	8003a18 <I2C_CheckEvent>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d0f4      	beq.n	8006a52 <i2c_transmit+0x16>
		;
	/* Send EEPROM address for write */
//		I2C_Send7bitAddress(I2Cx, addr << 1, I2C_Direction_Transmitter );
		I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8006a68:	0069      	lsls	r1, r5, #1
 8006a6a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8006a6e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006a72:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8006a76:	2200      	movs	r2, #0
 8006a78:	f7fc fece 	bl	8003818 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
 8006a7c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8006a80:	2182      	movs	r1, #130	; 0x82
 8006a82:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006a86:	f2c0 0107 	movt	r1, #7
 8006a8a:	f7fc ffc5 	bl	8003a18 <I2C_CheckEvent>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d0f4      	beq.n	8006a7c <i2c_transmit+0x40>
		;

	for (i = 0; i < n; i++) {
 8006a92:	b1b6      	cbz	r6, 8006ac2 <i2c_transmit+0x86>
 8006a94:	2500      	movs	r5, #0
//		I2C_SendData(I2Cx, data[i]);
		I2C_SendData(I2C1, data[i]);
 8006a96:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8006a9a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006a9e:	5d61      	ldrb	r1, [r4, r5]
 8006aa0:	f7fc ff52 	bl	8003948 <I2C_SendData>
		/* Test on EV8 and clear it */
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 8006aa4:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8006aa8:	2184      	movs	r1, #132	; 0x84
 8006aaa:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006aae:	f2c0 0107 	movt	r1, #7
 8006ab2:	f7fc ffb1 	bl	8003a18 <I2C_CheckEvent>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d0f4      	beq.n	8006aa4 <i2c_transmit+0x68>
 8006aba:	3501      	adds	r5, #1
	/* Test on EV6 and clear it */
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;

	for (i = 0; i < n; i++) {
 8006abc:	b2ab      	uxth	r3, r5
 8006abe:	429e      	cmp	r6, r3
 8006ac0:	d8e9      	bhi.n	8006a96 <i2c_transmit+0x5a>
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
	}
//	I2C_GenerateSTOP(I2Cx, ENABLE);
	I2C_GenerateSTOP(I2C1, ENABLE);
 8006ac2:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8006ac6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006aca:	2101      	movs	r1, #1
}
 8006acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
//		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
	}
//	I2C_GenerateSTOP(I2Cx, ENABLE);
	I2C_GenerateSTOP(I2C1, ENABLE);
 8006ad0:	f7fc be94 	b.w	80037fc <I2C_GenerateSTOP>

08006ad4 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8006ad4:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8006ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	3201      	adds	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
}
 8006ae2:	4770      	bx	lr

08006ae4 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8006ae4:	4b03      	ldr	r3, [pc, #12]	; (8006af4 <SysTick_delay+0x10>)
 8006ae6:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8006ae8:	6819      	ldr	r1, [r3, #0]
 8006aea:	1a89      	subs	r1, r1, r2
 8006aec:	4281      	cmp	r1, r0
 8006aee:	d3fb      	bcc.n	8006ae8 <SysTick_delay+0x4>
		;
}
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	200009fc 	.word	0x200009fc

08006af8 <SysTick_Start>:

void SysTick_Start(void) {
 8006af8:	b500      	push	{lr}
 8006afa:	b085      	sub	sp, #20
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 8006afc:	4668      	mov	r0, sp
 8006afe:	f7fd f96b 	bl	8003dd8 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 8006b02:	9901      	ldr	r1, [sp, #4]
 8006b04:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8006b08:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8006b0c:	fba3 2101 	umull	r2, r1, r3, r1
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8006b10:	f24e 0310 	movw	r3, #57360	; 0xe010
 8006b14:	f2ce 0300 	movt	r3, #57344	; 0xe000
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8006b18:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8006b1c:	0989      	lsrs	r1, r1, #6
 8006b1e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8006b22:	3901      	subs	r1, #1
 8006b24:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8006b26:	21f0      	movs	r1, #240	; 0xf0
 8006b28:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b30:	2207      	movs	r2, #7
 8006b32:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 8006b34:	b005      	add	sp, #20
 8006b36:	bd00      	pop	{pc}

08006b38 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8006b38:	f640 13fc 	movw	r3, #2556	; 0x9fc
 8006b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006b40:	6818      	ldr	r0, [r3, #0]
}
 8006b42:	4770      	bx	lr

08006b44 <buffer_clear>:
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 8006b4a:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 8006b4e:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8006b52:	4770      	bx	lr

08006b54 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8006b54:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop

08006b5c <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8006b5c:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8006b60:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d001      	beq.n	8006b6c <buffer_is_full+0x10>
		return 1;
	}
	return 0;
 8006b68:	2000      	movs	r0, #0
}
 8006b6a:	4770      	bx	lr

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8006b6c:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (r->head == r->tail) && (r->count > 0) ) {
		return 1;
 8006b70:	3000      	adds	r0, #0
 8006b72:	bf18      	it	ne
 8006b74:	2001      	movne	r0, #1
 8006b76:	4770      	bx	lr

08006b78 <buffer_enque>:
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8006b78:	4603      	mov	r3, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8006b7a:	f8b0 0100 	ldrh.w	r0, [r0, #256]	; 0x100
		return 1;
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8006b7e:	b430      	push	{r4, r5}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8006b80:	f9b3 4102 	ldrsh.w	r4, [r3, #258]	; 0x102
 8006b84:	b202      	sxth	r2, r0
 8006b86:	4294      	cmp	r4, r2
 8006b88:	d013      	beq.n	8006bb2 <buffer_enque+0x3a>
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8006b8a:	3001      	adds	r0, #1
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8006b8c:	b200      	sxth	r0, r0
 8006b8e:	17c4      	asrs	r4, r0, #31
 8006b90:	0e64      	lsrs	r4, r4, #25

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8006b92:	f8b3 5104 	ldrh.w	r5, [r3, #260]	; 0x104
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8006b96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 8006b9a:	1900      	adds	r0, r0, r4
 8006b9c:	f000 007f 	and.w	r0, r0, #127	; 0x7f

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8006ba0:	1c6a      	adds	r2, r5, #1
	r->head %= USART_BUFFER_SIZE;
 8006ba2:	1b04      	subs	r4, r0, r4

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8006ba4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8006ba8:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	return w;
}
 8006bac:	4608      	mov	r0, r1
 8006bae:	bc30      	pop	{r4, r5}
 8006bb0:	4770      	bx	lr
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8006bb2:	f8b3 4104 	ldrh.w	r4, [r3, #260]	; 0x104
 8006bb6:	2c00      	cmp	r4, #0
 8006bb8:	d0e7      	beq.n	8006b8a <buffer_enque+0x12>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
 8006bba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006bbe:	e7f5      	b.n	8006bac <buffer_enque+0x34>

08006bc0 <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8006bc0:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	b410      	push	{r4}
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
 8006bc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
 8006bcc:	b90a      	cbnz	r2, 8006bd2 <buffer_deque+0x12>
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 8006bce:	bc10      	pop	{r4}
 8006bd0:	4770      	bx	lr

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8006bd2:	f8b3 0102 	ldrh.w	r0, [r3, #258]	; 0x102
 8006bd6:	1c44      	adds	r4, r0, #1
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8006bd8:	b224      	sxth	r4, r4
 8006bda:	17e1      	asrs	r1, r4, #31
 8006bdc:	0e49      	lsrs	r1, r1, #25
 8006bde:	1864      	adds	r4, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8006be0:	b200      	sxth	r0, r0
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8006be2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
 8006be6:	3a01      	subs	r2, #1
	r->tail %= USART_BUFFER_SIZE;
 8006be8:	1a61      	subs	r1, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8006bea:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	r->count--;
 8006bee:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 8006bf2:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 8006bf6:	e7ea      	b.n	8006bce <buffer_deque+0xe>

08006bf8 <usart_id>:
  USART6,
};
*/

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
 8006bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bfc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006c00:	4298      	cmp	r0, r3
 8006c02:	d016      	beq.n	8006c32 <usart_id+0x3a>
			return USART_1;
	if ( USARTx == USART2 )
 8006c04:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8006c08:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c0c:	4298      	cmp	r0, r3
 8006c0e:	d012      	beq.n	8006c36 <usart_id+0x3e>
			return USART_2;
	if ( USARTx == USART3 )
 8006c10:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8006c14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c18:	4298      	cmp	r0, r3
 8006c1a:	d008      	beq.n	8006c2e <usart_id+0x36>
			return USART_3;
	if ( USARTx == USART6 )
 8006c1c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c20:	f2c4 0301 	movt	r3, #16385	; 0x4001
			return USART_6;
 8006c24:	4298      	cmp	r0, r3
 8006c26:	bf0c      	ite	eq
 8006c28:	2005      	moveq	r0, #5
 8006c2a:	2000      	movne	r0, #0
 8006c2c:	4770      	bx	lr
	if ( USARTx == USART1 )
			return USART_1;
	if ( USARTx == USART2 )
			return USART_2;
	if ( USARTx == USART3 )
			return USART_3;
 8006c2e:	2002      	movs	r0, #2
	if ( USARTx == USART6 )
			return USART_6;
	return 0;
}
 8006c30:	4770      	bx	lr
};
*/

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
			return USART_1;
 8006c32:	2000      	movs	r0, #0
 8006c34:	4770      	bx	lr
	if ( USARTx == USART2 )
			return USART_2;
 8006c36:	2001      	movs	r0, #1
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop

08006c3c <usart_begin>:
				((uint32_t) RCC_APB1Periph_UART4), GPIOA, GPIO_PinSource1, GPIO_PinSource0, GPIO_AF_USART3,
				UART4_IRQn
		}
};

void usart_begin(USART_TypeDef * USARTx, const uint32_t baud) {
 8006c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  USART6,
};
*/

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
 8006c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006c48:	2600      	movs	r6, #0
 8006c4a:	4298      	cmp	r0, r3
				((uint32_t) RCC_APB1Periph_UART4), GPIOA, GPIO_PinSource1, GPIO_PinSource0, GPIO_AF_USART3,
				UART4_IRQn
		}
};

void usart_begin(USART_TypeDef * USARTx, const uint32_t baud) {
 8006c4c:	b089      	sub	sp, #36	; 0x24
 8006c4e:	4605      	mov	r5, r0
 8006c50:	4689      	mov	r9, r1
  USART6,
};
*/

uint8_t usart_id(USART_TypeDef * USARTx) {
	if ( USARTx == USART1 )
 8006c52:	4634      	mov	r4, r6
 8006c54:	d018      	beq.n	8006c88 <usart_begin+0x4c>
			return USART_1;
	if ( USARTx == USART2 )
 8006c56:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8006c5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c5e:	2601      	movs	r6, #1
 8006c60:	4298      	cmp	r0, r3
 8006c62:	4634      	mov	r4, r6
 8006c64:	d010      	beq.n	8006c88 <usart_begin+0x4c>
			return USART_2;
	if ( USARTx == USART3 )
 8006c66:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8006c6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c6e:	2602      	movs	r6, #2
 8006c70:	4298      	cmp	r0, r3
 8006c72:	4634      	mov	r4, r6
 8006c74:	d008      	beq.n	8006c88 <usart_begin+0x4c>
			return USART_3;
	if ( USARTx == USART6 )
 8006c76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c7a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8006c7e:	4298      	cmp	r0, r3
 8006c80:	bf14      	ite	ne
 8006c82:	2600      	movne	r6, #0
 8006c84:	2605      	moveq	r6, #5
 8006c86:	4634      	mov	r4, r6

	uint8_t portid = usart_id(USARTx);
	if ( portid == 6 )
		while(1);

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
 8006c88:	2002      	movs	r0, #2
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	f7fd f928 	bl	8003ee0 <RCC_AHB1PeriphClockCmd>
	portMode(usartInfo[portid].port, usartInfo[portid].rxpin | usartInfo[portid].txpin,
 8006c90:	4b31      	ldr	r3, [pc, #196]	; (8006d58 <usart_begin+0x11c>)
 8006c92:	0124      	lsls	r4, r4, #4
 8006c94:	191f      	adds	r7, r3, r4
 8006c96:	5b1b      	ldrh	r3, [r3, r4]
 8006c98:	8879      	ldrh	r1, [r7, #2]
 8006c9a:	68b8      	ldr	r0, [r7, #8]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	4319      	orrs	r1, r3
 8006ca0:	2400      	movs	r4, #0
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	b289      	uxth	r1, r1
 8006ca6:	9400      	str	r4, [sp, #0]
 8006ca8:	9401      	str	r4, [sp, #4]
 8006caa:	f7ff fe45 	bl	8006938 <portMode>
			GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
	/* USART3 clock enable */
	RCC_APB1PeriphClockCmd(usartInfo[portid].periph, (FunctionalState) ENABLE);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	f7fd f93f 	bl	8003f34 <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(usartInfo[portid].port, usartInfo[portid].txsource, usartInfo[portid].af ); // TX -- PB10
 8006cb6:	68b8      	ldr	r0, [r7, #8]
 8006cb8:	7b79      	ldrb	r1, [r7, #13]
 8006cba:	7bba      	ldrb	r2, [r7, #14]
 8006cbc:	f7fc f9e2 	bl	8003084 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(usartInfo[portid].port, usartInfo[portid].rxsource, usartInfo[portid].af ); // RX -- PB11
 8006cc0:	7bba      	ldrb	r2, [r7, #14]
 8006cc2:	68b8      	ldr	r0, [r7, #8]
 8006cc4:	7b39      	ldrb	r1, [r7, #12]
 8006cc6:	f7fc f9dd 	bl	8003084 <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8006cca:	230c      	movs	r3, #12

	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8006ccc:	a903      	add	r1, sp, #12
 8006cce:	4628      	mov	r0, r5
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8006cd0:	f8ad 3016 	strh.w	r3, [sp, #22]
	RCC_APB1PeriphClockCmd(usartInfo[portid].periph, (FunctionalState) ENABLE);

	GPIO_PinAFConfig(usartInfo[portid].port, usartInfo[portid].txsource, usartInfo[portid].af ); // TX -- PB10
	GPIO_PinAFConfig(usartInfo[portid].port, usartInfo[portid].rxsource, usartInfo[portid].af ); // RX -- PB11

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8006cd4:	f8cd 900c 	str.w	r9, [sp, #12]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8006cd8:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8006cdc:	f8ad 4012 	strh.w	r4, [sp, #18]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8006ce0:	f8ad 4014 	strh.w	r4, [sp, #20]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8006ce4:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8006ce8:	f7ff fb98 	bl	800641c <USART_Init>

	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 8006cec:	4628      	mov	r0, r5
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f240 5125 	movw	r1, #1317	; 0x525
 8006cf4:	f7ff fcfc 	bl	80066f0 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f240 7127 	movw	r1, #1831	; 0x727
 8006cfe:	4622      	mov	r2, r4
 8006d00:	f7ff fcf6 	bl	80066f0 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = usartInfo[portid].irq_channel;
 8006d04:	7bfa      	ldrb	r2, [r7, #15]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8006d06:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8006d0a:	a807      	add	r0, sp, #28
	uint8_t portid = usart_id(USARTx);
	if ( portid == 6 )
		while(1);

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, (FunctionalState) ENABLE);
	portMode(usartInfo[portid].port, usartInfo[portid].rxpin | usartInfo[portid].txpin,
 8006d0c:	f107 0808 	add.w	r8, r7, #8

	NVIC_InitStructure.NVIC_IRQChannel = usartInfo[portid].irq_channel;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
 8006d10:	2701      	movs	r7, #1
	USART_Init(USARTx, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = usartInfo[portid].irq_channel;
 8006d12:	f88d 201c 	strb.w	r2, [sp, #28]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8006d16:	f88d 401e 	strb.w	r4, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
 8006d1a:	f88d 701f 	strb.w	r7, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8006d1e:	f7f9 fa3d 	bl	800019c <NVIC_Init>

	buffer_clear(&rxring[portid]);
 8006d22:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006d26:	fb03 f606 	mul.w	r6, r3, r6
 8006d2a:	4a0c      	ldr	r2, [pc, #48]	; (8006d5c <usart_begin+0x120>)
	buffer_clear(&txring[portid]);
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <usart_begin+0x124>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = (FunctionalState) ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff

	buffer_clear(&rxring[portid]);
 8006d2e:	18b2      	adds	r2, r6, r2
	buffer_clear(&txring[portid]);
 8006d30:	18f3      	adds	r3, r6, r3

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx, (FunctionalState) ENABLE);
 8006d32:	4628      	mov	r0, r5
 8006d34:	4639      	mov	r1, r7
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8006d36:	f8a2 4100 	strh.w	r4, [r2, #256]	; 0x100
	r->tail = 0;
 8006d3a:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
	r->count = 0;
 8006d3e:	f8a2 4104 	strh.w	r4, [r2, #260]	; 0x104
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8006d42:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 8006d46:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 8006d4a:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104

	buffer_clear(&rxring[portid]);
	buffer_clear(&txring[portid]);

	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx, (FunctionalState) ENABLE);
 8006d4e:	f7ff fbf5 	bl	800653c <USART_Cmd>
}
 8006d52:	b009      	add	sp, #36	; 0x24
 8006d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d58:	2000009c 	.word	0x2000009c
 8006d5c:	20000d14 	.word	0x20000d14
 8006d60:	20000a00 	.word	0x20000a00

08006d64 <usart_bare_write>:

void usart_bare_write(USART_TypeDef * USARTx, const uint16_t w) {
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4604      	mov	r4, r0
 8006d68:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET)
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	2180      	movs	r1, #128	; 0x80
 8006d6e:	f7ff fcdb 	bl	8006728 <USART_GetFlagStatus>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d0f9      	beq.n	8006d6a <usart_bare_write+0x6>
		;
	USART_SendData(USARTx, w);
 8006d76:	4620      	mov	r0, r4
 8006d78:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}
 8006d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_bare_write(USART_TypeDef * USARTx, const uint16_t w) {
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET)
		;
	USART_SendData(USARTx, w);
 8006d7e:	f7ff bc11 	b.w	80065a4 <USART_SendData>
 8006d82:	bf00      	nop

08006d84 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 8006d84:	b538      	push	{r3, r4, r5, lr}
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8006d86:	2200      	movs	r2, #0
		;
	USART_SendData(USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 8006d88:	460d      	mov	r5, r1
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8006d8a:	f240 7127 	movw	r1, #1831	; 0x727
		;
	USART_SendData(USARTx, w);
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET);
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
 8006d8e:	4604      	mov	r4, r0
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8006d90:	f7ff fcae 	bl	80066f0 <USART_ITConfig>
	buffer_enque(&txring[USART_3], w);
 8006d94:	4629      	mov	r1, r5
 8006d96:	4805      	ldr	r0, [pc, #20]	; (8006dac <usart_write+0x28>)
 8006d98:	f7ff feee 	bl	8006b78 <buffer_enque>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f240 7127 	movw	r1, #1831	; 0x727
 8006da2:	2201      	movs	r2, #1
}
 8006da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void usart_write(USART_TypeDef * USARTx, const uint16_t w) {
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	buffer_enque(&txring[USART_3], w);
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
 8006da8:	f7ff bca2 	b.w	80066f0 <USART_ITConfig>
 8006dac:	20000c0c 	.word	0x20000c0c

08006db0 <usart_print>:
}

void usart_print(USART_TypeDef * USARTx, const char * s) {
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	460c      	mov	r4, r1
	while (*s)
 8006db4:	7809      	ldrb	r1, [r1, #0]
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	buffer_enque(&txring[USART_3], w);
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
}

void usart_print(USART_TypeDef * USARTx, const char * s) {
 8006db6:	4605      	mov	r5, r0
	while (*s)
 8006db8:	b131      	cbz	r1, 8006dc8 <usart_print+0x18>
		usart_write(USARTx, (uint16_t) *s++);
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f7ff ffe2 	bl	8006d84 <usart_write>
	buffer_enque(&txring[USART_3], w);
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) ENABLE);
}

void usart_print(USART_TypeDef * USARTx, const char * s) {
	while (*s)
 8006dc0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	d1f8      	bne.n	8006dba <usart_print+0xa>
 8006dc8:	bd38      	pop	{r3, r4, r5, pc}
 8006dca:	bf00      	nop

08006dcc <usart_bare_read>:
		usart_write(USARTx, (uint16_t) *s++);
}

uint16_t usart_bare_read(USART_TypeDef * USARTx) {
	return USART_ReceiveData(USARTx );
 8006dcc:	f7ff bbee 	b.w	80065ac <USART_ReceiveData>

08006dd0 <usart_read>:
}

uint16_t usart_read(USART_TypeDef * USARTx) {
 8006dd0:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(&rxring[USART_3]);
 8006dd2:	4804      	ldr	r0, [pc, #16]	; (8006de4 <usart_read+0x14>)
 8006dd4:	f7ff fef4 	bl	8006bc0 <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
 8006dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	return w;
}
 8006ddc:	4298      	cmp	r0, r3
 8006dde:	bf08      	it	eq
 8006de0:	2000      	moveq	r0, #0
 8006de2:	bd08      	pop	{r3, pc}
 8006de4:	20000f20 	.word	0x20000f20

08006de8 <usart_flush>:

void usart_flush(USART_TypeDef * USARTx) {
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
 8006dea:	2200      	movs	r2, #0
 8006dec:	f240 5125 	movw	r1, #1317	; 0x525
	uint16_t w = buffer_deque(&rxring[USART_3]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx) {
 8006df0:	4604      	mov	r4, r0
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
 8006df2:	f7ff fc7d 	bl	80066f0 <USART_ITConfig>
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8006df6:	4b21      	ldr	r3, [pc, #132]	; (8006e7c <usart_flush+0x94>)
 8006df8:	4d21      	ldr	r5, [pc, #132]	; (8006e80 <usart_flush+0x98>)
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8006dfa:	4f21      	ldr	r7, [pc, #132]	; (8006e80 <usart_flush+0x98>)
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8006dfc:	2600      	movs	r6, #0
 8006dfe:	f8a3 630c 	strh.w	r6, [r3, #780]	; 0x30c
	r->tail = 0;
 8006e02:	f8a3 630e 	strh.w	r6, [r3, #782]	; 0x30e
	r->count = 0;
 8006e06:	f8a3 6310 	strh.w	r6, [r3, #784]	; 0x310
}

void usart_flush(USART_TypeDef * USARTx) {
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[USART_3]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
 8006e0a:	f240 5125 	movw	r1, #1317	; 0x525
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f7ff fcb8 	bl	8006784 <USART_ClearITPendingBit>
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
 8006e14:	4620      	mov	r0, r4
 8006e16:	f240 5125 	movw	r1, #1317	; 0x525
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f7ff fc68 	bl	80066f0 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
 8006e20:	4632      	mov	r2, r6
 8006e22:	4620      	mov	r0, r4
 8006e24:	f240 7127 	movw	r1, #1831	; 0x727
 8006e28:	f7ff fc62 	bl	80066f0 <USART_ITConfig>
	while ( buffer_count(&txring[USART_3]) > 0 ) {
 8006e2c:	f8b5 6310 	ldrh.w	r6, [r5, #784]	; 0x310
 8006e30:	b1be      	cbz	r6, 8006e62 <usart_flush+0x7a>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
 8006e32:	4620      	mov	r0, r4
 8006e34:	2180      	movs	r1, #128	; 0x80
 8006e36:	f7ff fc77 	bl	8006728 <USART_GetFlagStatus>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d0f9      	beq.n	8006e32 <usart_flush+0x4a>
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
 8006e3e:	4811      	ldr	r0, [pc, #68]	; (8006e84 <usart_flush+0x9c>)
 8006e40:	f7ff febe 	bl	8006bc0 <buffer_deque>
 8006e44:	4601      	mov	r1, r0
 8006e46:	4620      	mov	r0, r4
 8006e48:	f7ff fbac 	bl	80065a4 <USART_SendData>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	2140      	movs	r1, #64	; 0x40
 8006e50:	f7ff fc6a 	bl	8006728 <USART_GetFlagStatus>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d0f9      	beq.n	8006e4c <usart_flush+0x64>
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[USART_3]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	while ( buffer_count(&txring[USART_3]) > 0 ) {
 8006e58:	f8b5 6310 	ldrh.w	r6, [r5, #784]	; 0x310
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8006e5c:	4f08      	ldr	r7, [pc, #32]	; (8006e80 <usart_flush+0x98>)
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[USART_3]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, (FunctionalState) ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, (FunctionalState) DISABLE);
	while ( buffer_count(&txring[USART_3]) > 0 ) {
 8006e5e:	2e00      	cmp	r6, #0
 8006e60:	d1e7      	bne.n	8006e32 <usart_flush+0x4a>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
 8006e62:	4620      	mov	r0, r4
 8006e64:	f240 7127 	movw	r1, #1831	; 0x727
 8006e68:	f7ff fc8c 	bl	8006784 <USART_ClearITPendingBit>
};

USARTRing rxring[3], txring[3];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8006e6c:	f8a7 630c 	strh.w	r6, [r7, #780]	; 0x30c
	r->tail = 0;
 8006e70:	f8a7 630e 	strh.w	r6, [r7, #782]	; 0x30e
	r->count = 0;
 8006e74:	f8a7 6310 	strh.w	r6, [r7, #784]	; 0x310
		USART_SendData(USARTx, buffer_deque(&txring[USART_3]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[USART_3]);
}
 8006e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000d14 	.word	0x20000d14
 8006e80:	20000a00 	.word	0x20000a00
 8006e84:	20000c0c 	.word	0x20000c0c

08006e88 <usart_peek>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8006e88:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <usart_peek+0x1c>)
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[USART_3]);
}

uint16_t usart_peek(USART_TypeDef * uport) {
	if ( ! buffer_count(&rxring[USART_3]) == 0 )
 8006e8a:	f8b3 2310 	ldrh.w	r2, [r3, #784]	; 0x310
 8006e8e:	b912      	cbnz	r2, 8006e96 <usart_peek+0xe>
		return rxring[USART_3].buf[rxring[USART_3].tail];
	return 0xffff;
 8006e90:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8006e94:	4770      	bx	lr
	buffer_clear(&txring[USART_3]);
}

uint16_t usart_peek(USART_TypeDef * uport) {
	if ( ! buffer_count(&rxring[USART_3]) == 0 )
		return rxring[USART_3].buf[rxring[USART_3].tail];
 8006e96:	f9b3 230e 	ldrsh.w	r2, [r3, #782]	; 0x30e
 8006e9a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8006e9e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006ea2:	4770      	bx	lr
 8006ea4:	20000d14 	.word	0x20000d14

08006ea8 <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8006ea8:	f640 5314 	movw	r3, #3348	; 0xd14
 8006eac:	f2c2 0300 	movt	r3, #8192	; 0x2000
	return 0xffff;
}

uint16_t usart_available(USART_TypeDef * uport) {
	return buffer_count(&rxring[USART_3]);
}
 8006eb0:	f8b3 0310 	ldrh.w	r0, [r3, #784]	; 0x310
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop

08006eb8 <USART3_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8006eb8:	f44f 4090 	mov.w	r0, #18432	; 0x4800
	return buffer_count(&rxring[USART_3]);
}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
 8006ebc:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8006ebe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006ec2:	f240 5125 	movw	r1, #1317	; 0x525
 8006ec6:	f7ff fc39 	bl	800673c <USART_GetITStatus>
 8006eca:	2800      	cmp	r0, #0
 8006ecc:	d12d      	bne.n	8006f2a <USART3_IRQHandler+0x72>
		buffer_enque(&rxring[USART_3], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8006ece:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8006ed2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006ed6:	f240 7127 	movw	r1, #1831	; 0x727
 8006eda:	f7ff fc2f 	bl	800673c <USART_GetITStatus>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d022      	beq.n	8006f28 <USART3_IRQHandler+0x70>
		if (txring[USART_3].count == 0) {
 8006ee2:	4817      	ldr	r0, [pc, #92]	; (8006f40 <USART3_IRQHandler+0x88>)
 8006ee4:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 8006ee8:	b162      	cbz	r2, 8006f04 <USART3_IRQHandler+0x4c>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
 8006eea:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8006eee:	f7ff fe67 	bl	8006bc0 <buffer_deque>
 8006ef2:	4601      	mov	r1, r0
 8006ef4:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8006ef8:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8006efc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART_3].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
 8006f00:	f7ff bb50 	b.w	80065a4 <USART_SendData>
		buffer_enque(&rxring[USART_3], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART_3].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8006f04:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8006f08:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006f0c:	f240 7127 	movw	r1, #1831	; 0x727
 8006f10:	f7ff fbee 	bl	80066f0 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8006f14:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8006f18:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006f1c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART_3]));
		}
	}
}
 8006f20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART_3].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8006f24:	f7ff bc2e 	b.w	8006784 <USART_ClearITPendingBit>
 8006f28:	bd08      	pop	{r3, pc}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART_3], USART_ReceiveData(USART3) );
 8006f2a:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8006f2e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006f32:	f7ff fb3b 	bl	80065ac <USART_ReceiveData>
 8006f36:	4601      	mov	r1, r0
 8006f38:	4802      	ldr	r0, [pc, #8]	; (8006f44 <USART3_IRQHandler+0x8c>)
 8006f3a:	f7ff fe1d 	bl	8006b78 <buffer_enque>
 8006f3e:	e7c6      	b.n	8006ece <USART3_IRQHandler+0x16>
 8006f40:	20000a00 	.word	0x20000a00
 8006f44:	20000f20 	.word	0x20000f20

08006f48 <ST7032i_command>:
/**
 * @brief  Write Command to ST7032i
 * @param  Data : Command Data
 * @retval None
 */
void ST7032i_command(uint8_t d) {
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	b082      	sub	sp, #8
	uint8_t data[2];
	data[0] = 0;
 8006f4c:	2400      	movs	r4, #0
	data[1] = d;
 8006f4e:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(I2C1, ST7032I_ADDR, data, 2);
 8006f52:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8006f56:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006f5a:	213e      	movs	r1, #62	; 0x3e
 8006f5c:	aa01      	add	r2, sp, #4
 8006f5e:	2302      	movs	r3, #2
 * @param  Data : Command Data
 * @retval None
 */
void ST7032i_command(uint8_t d) {
	uint8_t data[2];
	data[0] = 0;
 8006f60:	f88d 4004 	strb.w	r4, [sp, #4]
	data[1] = d;
	i2c_transmit(I2C1, ST7032I_ADDR, data, 2);
 8006f64:	f7ff fd6a 	bl	8006a3c <i2c_transmit>
}
 8006f68:	b002      	add	sp, #8
 8006f6a:	bd10      	pop	{r4, pc}

08006f6c <ST7032i_data>:
/**
 * @brief  Write Data to ST7032i
 * @param  Data : "Data" Data
 * @retval None
 */
void ST7032i_data(uint8_t data) {
 8006f6c:	b510      	push	{r4, lr}
 8006f6e:	b082      	sub	sp, #8
	uint8_t t[2];
	t[0] = 0x40 ; //0b01000000;
 8006f70:	2440      	movs	r4, #64	; 0x40
	t[1] = data;
 8006f72:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(I2C1, ST7032I_ADDR, t, 2);
 8006f76:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8006f7a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8006f7e:	213e      	movs	r1, #62	; 0x3e
 8006f80:	aa01      	add	r2, sp, #4
 8006f82:	2302      	movs	r3, #2
 * @param  Data : "Data" Data
 * @retval None
 */
void ST7032i_data(uint8_t data) {
	uint8_t t[2];
	t[0] = 0x40 ; //0b01000000;
 8006f84:	f88d 4004 	strb.w	r4, [sp, #4]
	t[1] = data;
	i2c_transmit(I2C1, ST7032I_ADDR, t, 2);
 8006f88:	f7ff fd58 	bl	8006a3c <i2c_transmit>
}
 8006f8c:	b002      	add	sp, #8
 8006f8e:	bd10      	pop	{r4, pc}

08006f90 <ST7032i_print>:

void ST7032i_print(char * str) {
 8006f90:	b510      	push	{r4, lr}
 8006f92:	4604      	mov	r4, r0
	while (*str)
 8006f94:	7800      	ldrb	r0, [r0, #0]
 8006f96:	b128      	cbz	r0, 8006fa4 <ST7032i_print+0x14>
		ST7032i_data(*str++);
 8006f98:	f7ff ffe8 	bl	8006f6c <ST7032i_data>
	t[1] = data;
	i2c_transmit(I2C1, ST7032I_ADDR, t, 2);
}

void ST7032i_print(char * str) {
	while (*str)
 8006f9c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d1f9      	bne.n	8006f98 <ST7032i_print+0x8>
 8006fa4:	bd10      	pop	{r4, pc}
 8006fa6:	bf00      	nop

08006fa8 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8006fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop

08006fb0 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8006fb0:	f241 0328 	movw	r3, #4136	; 0x1028
 8006fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006fb8:	220c      	movs	r2, #12
 8006fba:	601a      	str	r2, [r3, #0]
	return -1;
}
 8006fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop

08006fc4 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8006fc4:	f241 0328 	movw	r3, #4136	; 0x1028
 8006fc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006fcc:	220b      	movs	r2, #11
 8006fce:	601a      	str	r2, [r3, #0]
	return -1;
}
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop

08006fd8 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8006fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fdc:	604b      	str	r3, [r1, #4]
	return 0;
}
 8006fde:	2000      	movs	r0, #0
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop

08006fe4 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8006fe4:	2001      	movs	r0, #1
 8006fe6:	4770      	bx	lr

08006fe8 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8006fe8:	2802      	cmp	r0, #2
 8006fea:	d801      	bhi.n	8006ff0 <_isatty+0x8>
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8006fec:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8006fee:	4770      	bx	lr
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8006ff0:	4b02      	ldr	r3, [pc, #8]	; (8006ffc <_isatty+0x14>)
 8006ff2:	2209      	movs	r2, #9
 8006ff4:	601a      	str	r2, [r3, #0]
		return 0;
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20001028 	.word	0x20001028

08007000 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8007000:	f241 0328 	movw	r3, #4136	; 0x1028
 8007004:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007008:	2216      	movs	r2, #22
 800700a:	601a      	str	r2, [r3, #0]
	return (-1);
}
 800700c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop

08007014 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8007014:	f241 0328 	movw	r3, #4136	; 0x1028
 8007018:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800701c:	221f      	movs	r2, #31
 800701e:	601a      	str	r2, [r3, #0]
	return -1;
}
 8007020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop

08007028 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8007028:	2000      	movs	r0, #0
 800702a:	4770      	bx	lr

0800702c <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 800702c:	b430      	push	{r4, r5}
	int n;
	int num = 0;
	switch (file) {
 800702e:	b130      	cbz	r0, 800703e <_read+0x12>
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8007030:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <_read+0x34>)
 8007032:	2209      	movs	r2, #9
 8007034:	601a      	str	r2, [r3, #0]
				return -1;
 8007036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 800703a:	bc30      	pop	{r4, r5}
 800703c:	4770      	bx	lr
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 800703e:	2a00      	cmp	r2, #0
 8007040:	ddfb      	ble.n	800703a <_read+0xe>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8007042:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8007046:	188d      	adds	r5, r1, r2
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8007048:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800704c:	8823      	ldrh	r3, [r4, #0]
 800704e:	069b      	lsls	r3, r3, #26
 8007050:	d5fc      	bpl.n	800704c <_read+0x20>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8007052:	88a3      	ldrh	r3, [r4, #4]
 8007054:	f801 3b01 	strb.w	r3, [r1], #1
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8007058:	42a9      	cmp	r1, r5
 800705a:	d1f7      	bne.n	800704c <_read+0x20>
 800705c:	4610      	mov	r0, r2
 800705e:	e7ec      	b.n	800703a <_read+0xe>
 8007060:	20001028 	.word	0x20001028

08007064 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8007064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007068:	604b      	str	r3, [r1, #4]
	return 0;
}
 800706a:	2000      	movs	r0, #0
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop

08007070 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8007070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop

08007078 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8007078:	f241 0328 	movw	r3, #4136	; 0x1028
 800707c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007080:	2202      	movs	r2, #2
 8007082:	601a      	str	r2, [r3, #0]
	return -1;
}
 8007084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop

0800708c <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 800708c:	f241 0328 	movw	r3, #4136	; 0x1028
 8007090:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007094:	220a      	movs	r2, #10
 8007096:	601a      	str	r2, [r3, #0]
	return -1;
}
 8007098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop

080070a0 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 80070a0:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 80070a2:	b430      	push	{r4, r5}
	int n;
	switch (file) {
 80070a4:	d009      	beq.n	80070ba <_write+0x1a>
 80070a6:	2802      	cmp	r0, #2
 80070a8:	d017      	beq.n	80070da <_write+0x3a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 80070aa:	4b14      	ldr	r3, [pc, #80]	; (80070fc <_write+0x5c>)
 80070ac:	2209      	movs	r2, #9
 80070ae:	601a      	str	r2, [r3, #0]
				return -1;
 80070b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 80070b4:	4610      	mov	r0, r2
 80070b6:	bc30      	pop	{r4, r5}
 80070b8:	4770      	bx	lr
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 80070ba:	2a00      	cmp	r2, #0
 80070bc:	ddfa      	ble.n	80070b4 <_write+0x14>
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80070be:	f44f 5480 	mov.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 80070c2:	188d      	adds	r5, r1, r2
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80070c4:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80070c8:	8823      	ldrh	r3, [r4, #0]
 80070ca:	065b      	lsls	r3, r3, #25
 80070cc:	d5fc      	bpl.n	80070c8 <_write+0x28>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80070ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 80070d2:	42a9      	cmp	r1, r5
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80070d4:	80a3      	strh	r3, [r4, #4]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 80070d6:	d1f7      	bne.n	80070c8 <_write+0x28>
 80070d8:	e7ec      	b.n	80070b4 <_write+0x14>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80070da:	2a00      	cmp	r2, #0
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80070dc:	bfc2      	ittt	gt
 80070de:	f44f 5480 	movgt.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 80070e2:	188d      	addgt	r5, r1, r2
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80070e4:	f2c4 0401 	movtgt	r4, #16385	; 0x4001
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80070e8:	dde4      	ble.n	80070b4 <_write+0x14>
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 80070ea:	8823      	ldrh	r3, [r4, #0]
 80070ec:	0658      	lsls	r0, r3, #25
 80070ee:	d5fc      	bpl.n	80070ea <_write+0x4a>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80070f0:	f811 3b01 	ldrb.w	r3, [r1], #1
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80070f4:	42a9      	cmp	r1, r5
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 80070f6:	80a3      	strh	r3, [r4, #4]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 80070f8:	d1f7      	bne.n	80070ea <_write+0x4a>
 80070fa:	e7db      	b.n	80070b4 <_write+0x14>
 80070fc:	20001028 	.word	0x20001028

08007100 <_sbrk>:

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8007100:	4a0d      	ldr	r2, [pc, #52]	; (8007138 <_sbrk+0x38>)
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8007102:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8007104:	6813      	ldr	r3, [r2, #0]
 8007106:	b1a3      	cbz	r3, 8007132 <_sbrk+0x32>
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8007108:	f3ef 8108 	mrs	r1, MSP
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 800710c:	1818      	adds	r0, r3, r0
 800710e:	4288      	cmp	r0, r1
		errno = ENOMEM;
		return (caddr_t) -1;
		//abort ();
	}

	heap_end += incr;
 8007110:	bf98      	it	ls
 8007112:	6010      	strls	r0, [r2, #0]
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8007114:	d801      	bhi.n	800711a <_sbrk+0x1a>
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 8007116:	4618      	mov	r0, r3
 8007118:	bd08      	pop	{r3, pc}
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 800711a:	2219      	movs	r2, #25
 800711c:	2002      	movs	r0, #2
 800711e:	4907      	ldr	r1, [pc, #28]	; (800713c <_sbrk+0x3c>)
 8007120:	f7ff ffbe 	bl	80070a0 <_write>
		errno = ENOMEM;
 8007124:	4b06      	ldr	r3, [pc, #24]	; (8007140 <_sbrk+0x40>)
 8007126:	220c      	movs	r2, #12
 8007128:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800712a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 800712e:	4618      	mov	r0, r3
 8007130:	bd08      	pop	{r3, pc}
	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
		heap_end = &_ebss;
 8007132:	4b04      	ldr	r3, [pc, #16]	; (8007144 <_sbrk+0x44>)
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	e7e7      	b.n	8007108 <_sbrk+0x8>
 8007138:	200009b4 	.word	0x200009b4
 800713c:	0800c714 	.word	0x0800c714
 8007140:	20001028 	.word	0x20001028
 8007144:	2000102c 	.word	0x2000102c

08007148 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8007148:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 800714a:	2001      	movs	r0, #1
 800714c:	4902      	ldr	r1, [pc, #8]	; (8007158 <_exit+0x10>)
 800714e:	2204      	movs	r2, #4
 8007150:	f7ff ffa6 	bl	80070a0 <_write>
 8007154:	e7fe      	b.n	8007154 <_exit+0xc>
 8007156:	bf00      	nop
 8007158:	0800c730 	.word	0x0800c730
 800715c:	0800c79c 	.word	0x0800c79c
 8007160:	20000000 	.word	0x20000000
 8007164:	200009b4 	.word	0x200009b4
 8007168:	200009b4 	.word	0x200009b4
 800716c:	2000102c 	.word	0x2000102c

08007170 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop

08007174 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8007174:	e7fe      	b.n	8007174 <HardFault_Handler>
 8007176:	bf00      	nop

08007178 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8007178:	e7fe      	b.n	8007178 <MemManage_Handler>
 800717a:	bf00      	nop

0800717c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800717c:	e7fe      	b.n	800717c <BusFault_Handler>
 800717e:	bf00      	nop

08007180 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8007180:	e7fe      	b.n	8007180 <UsageFault_Handler>
 8007182:	bf00      	nop

08007184 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop

08007188 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop

0800718c <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop

08007190 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007190:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007194:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007198:	2200      	movs	r2, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800719a:	6819      	ldr	r1, [r3, #0]
 800719c:	f041 0101 	orr.w	r1, r1, #1
 80071a0:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80071a2:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80071a4:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80071a6:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80071aa:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80071ae:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80071b2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80071b6:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80071b8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80071ba:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80071bc:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80071be:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80071c2:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80071c4:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80071c6:	9200      	str	r2, [sp, #0]
 80071c8:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80071d0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80071d2:	461a      	mov	r2, r3
 80071d4:	e003      	b.n	80071de <SystemInit+0x4e>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80071dc:	d009      	beq.n	80071f2 <SystemInit+0x62>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80071de:	6813      	ldr	r3, [r2, #0]
 80071e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071e4:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80071e6:	9b00      	ldr	r3, [sp, #0]
 80071e8:	3301      	adds	r3, #1
 80071ea:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80071ec:	9b01      	ldr	r3, [sp, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f1      	beq.n	80071d6 <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80071f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80071f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8007200:	bf08      	it	eq
 8007202:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8007204:	d001      	beq.n	800720a <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 8007206:	2301      	movs	r3, #1
 8007208:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 800720a:	9b01      	ldr	r3, [sp, #4]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d008      	beq.n	8007222 <SystemInit+0x92>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007210:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8007214:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8007218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800721c:	609a      	str	r2, [r3, #8]
#endif
}
 800721e:	b002      	add	sp, #8
 8007220:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8007222:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007226:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 800722a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800722e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8007230:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8007234:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007238:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800723a:	6811      	ldr	r1, [r2, #0]
 800723c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007240:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800724c:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800724e:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8007250:	f245 4219 	movw	r2, #21529	; 0x5419
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8007254:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8007258:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800725c:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800725e:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007266:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8007268:	4619      	mov	r1, r3
 800726a:	680a      	ldr	r2, [r1, #0]
 800726c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007270:	0192      	lsls	r2, r2, #6
 8007272:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007276:	d5f8      	bpl.n	800726a <SystemInit+0xda>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8007278:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800727c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007280:	f240 6105 	movw	r1, #1541	; 0x605
 8007284:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	f022 0203 	bic.w	r2, r2, #3
 800728c:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	f042 0202 	orr.w	r2, r2, #2
 8007294:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	f002 020c 	and.w	r2, r2, #12
 800729c:	2a08      	cmp	r2, #8
 800729e:	d1fa      	bne.n	8007296 <SystemInit+0x106>
 80072a0:	e7b6      	b.n	8007210 <SystemInit+0x80>
 80072a2:	bf00      	nop

080072a4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80072a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80072a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80072b2:	2a04      	cmp	r2, #4
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 80072b4:	bf04      	itt	eq
 80072b6:	f44f 5190 	moveq.w	r1, #4608	; 0x1200
 80072ba:	f2c0 017a 	movteq	r1, #122	; 0x7a
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80072be:	d006      	beq.n	80072ce <SystemCoreClockUpdate+0x2a>
 80072c0:	2a08      	cmp	r2, #8
 80072c2:	bf1c      	itt	ne
 80072c4:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 80072c8:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 80072cc:	d00b      	beq.n	80072e6 <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80072ce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80072d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80072d6:	4b15      	ldr	r3, [pc, #84]	; (800732c <SystemCoreClockUpdate+0x88>)
 80072d8:	6892      	ldr	r2, [r2, #8]
 80072da:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80072de:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80072e0:	40d1      	lsrs	r1, r2
 80072e2:	6119      	str	r1, [r3, #16]
}
 80072e4:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80072e6:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072e8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80072ea:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80072ee:	6858      	ldr	r0, [r3, #4]
 80072f0:	bf15      	itete	ne
 80072f2:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80072f6:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80072fa:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80072fe:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007302:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8007306:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800730a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800730e:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8007312:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800731c:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800731e:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8007322:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 8007324:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 8007328:	e7d1      	b.n	80072ce <SystemCoreClockUpdate+0x2a>
 800732a:	bf00      	nop
 800732c:	200000e0 	.word	0x200000e0

08007330 <cleanup_glue>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	460c      	mov	r4, r1
 8007334:	6809      	ldr	r1, [r1, #0]
 8007336:	4605      	mov	r5, r0
 8007338:	b109      	cbz	r1, 800733e <cleanup_glue+0xe>
 800733a:	f7ff fff9 	bl	8007330 <cleanup_glue>
 800733e:	4628      	mov	r0, r5
 8007340:	4621      	mov	r1, r4
 8007342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007346:	f002 ba23 	b.w	8009790 <_free_r>
 800734a:	bf00      	nop

0800734c <_reclaim_reent>:
 800734c:	4b22      	ldr	r3, [pc, #136]	; (80073d8 <_reclaim_reent+0x8c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4298      	cmp	r0, r3
 8007352:	b570      	push	{r4, r5, r6, lr}
 8007354:	4605      	mov	r5, r0
 8007356:	d032      	beq.n	80073be <_reclaim_reent+0x72>
 8007358:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800735a:	b1ab      	cbz	r3, 8007388 <_reclaim_reent+0x3c>
 800735c:	2200      	movs	r2, #0
 800735e:	4616      	mov	r6, r2
 8007360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007364:	b909      	cbnz	r1, 800736a <_reclaim_reent+0x1e>
 8007366:	e007      	b.n	8007378 <_reclaim_reent+0x2c>
 8007368:	4621      	mov	r1, r4
 800736a:	680c      	ldr	r4, [r1, #0]
 800736c:	4628      	mov	r0, r5
 800736e:	f002 fa0f 	bl	8009790 <_free_r>
 8007372:	2c00      	cmp	r4, #0
 8007374:	d1f8      	bne.n	8007368 <_reclaim_reent+0x1c>
 8007376:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007378:	3601      	adds	r6, #1
 800737a:	2e20      	cmp	r6, #32
 800737c:	4632      	mov	r2, r6
 800737e:	d1ef      	bne.n	8007360 <_reclaim_reent+0x14>
 8007380:	4628      	mov	r0, r5
 8007382:	4619      	mov	r1, r3
 8007384:	f002 fa04 	bl	8009790 <_free_r>
 8007388:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800738a:	b111      	cbz	r1, 8007392 <_reclaim_reent+0x46>
 800738c:	4628      	mov	r0, r5
 800738e:	f002 f9ff 	bl	8009790 <_free_r>
 8007392:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8007396:	b159      	cbz	r1, 80073b0 <_reclaim_reent+0x64>
 8007398:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800739c:	42b1      	cmp	r1, r6
 800739e:	d101      	bne.n	80073a4 <_reclaim_reent+0x58>
 80073a0:	e006      	b.n	80073b0 <_reclaim_reent+0x64>
 80073a2:	4621      	mov	r1, r4
 80073a4:	680c      	ldr	r4, [r1, #0]
 80073a6:	4628      	mov	r0, r5
 80073a8:	f002 f9f2 	bl	8009790 <_free_r>
 80073ac:	42a6      	cmp	r6, r4
 80073ae:	d1f8      	bne.n	80073a2 <_reclaim_reent+0x56>
 80073b0:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80073b2:	b111      	cbz	r1, 80073ba <_reclaim_reent+0x6e>
 80073b4:	4628      	mov	r0, r5
 80073b6:	f002 f9eb 	bl	8009790 <_free_r>
 80073ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80073bc:	b903      	cbnz	r3, 80073c0 <_reclaim_reent+0x74>
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80073c2:	4628      	mov	r0, r5
 80073c4:	4798      	blx	r3
 80073c6:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 80073ca:	2900      	cmp	r1, #0
 80073cc:	d0f7      	beq.n	80073be <_reclaim_reent+0x72>
 80073ce:	4628      	mov	r0, r5
 80073d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073d4:	e7ac      	b.n	8007330 <cleanup_glue>
 80073d6:	bf00      	nop
 80073d8:	200000f8 	.word	0x200000f8

080073dc <_wrapup_reent>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	4607      	mov	r7, r0
 80073e0:	b1b0      	cbz	r0, 8007410 <_wrapup_reent+0x34>
 80073e2:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 80073e6:	b176      	cbz	r6, 8007406 <_wrapup_reent+0x2a>
 80073e8:	6875      	ldr	r5, [r6, #4]
 80073ea:	1e6c      	subs	r4, r5, #1
 80073ec:	d408      	bmi.n	8007400 <_wrapup_reent+0x24>
 80073ee:	3502      	adds	r5, #2
 80073f0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80073f4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80073f8:	3c01      	subs	r4, #1
 80073fa:	4798      	blx	r3
 80073fc:	1c63      	adds	r3, r4, #1
 80073fe:	d1f9      	bne.n	80073f4 <_wrapup_reent+0x18>
 8007400:	6836      	ldr	r6, [r6, #0]
 8007402:	2e00      	cmp	r6, #0
 8007404:	d1f0      	bne.n	80073e8 <_wrapup_reent+0xc>
 8007406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007408:	b10b      	cbz	r3, 800740e <_wrapup_reent+0x32>
 800740a:	4638      	mov	r0, r7
 800740c:	4798      	blx	r3
 800740e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007410:	4b01      	ldr	r3, [pc, #4]	; (8007418 <_wrapup_reent+0x3c>)
 8007412:	681f      	ldr	r7, [r3, #0]
 8007414:	e7e5      	b.n	80073e2 <_wrapup_reent+0x6>
 8007416:	bf00      	nop
 8007418:	200000f8 	.word	0x200000f8

0800741c <_sprintf_r>:
 800741c:	b40c      	push	{r2, r3}
 800741e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007420:	b09d      	sub	sp, #116	; 0x74
 8007422:	ac22      	add	r4, sp, #136	; 0x88
 8007424:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8007428:	f854 2b04 	ldr.w	r2, [r4], #4
 800742c:	9101      	str	r1, [sp, #4]
 800742e:	460e      	mov	r6, r1
 8007430:	4623      	mov	r3, r4
 8007432:	9503      	str	r5, [sp, #12]
 8007434:	9506      	str	r5, [sp, #24]
 8007436:	a901      	add	r1, sp, #4
 8007438:	f44f 7702 	mov.w	r7, #520	; 0x208
 800743c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007440:	f8ad 7010 	strh.w	r7, [sp, #16]
 8007444:	9605      	str	r6, [sp, #20]
 8007446:	f8ad 5012 	strh.w	r5, [sp, #18]
 800744a:	941b      	str	r4, [sp, #108]	; 0x6c
 800744c:	f000 f830 	bl	80074b0 <_svfprintf_r>
 8007450:	9b01      	ldr	r3, [sp, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	b01d      	add	sp, #116	; 0x74
 8007458:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800745c:	b002      	add	sp, #8
 800745e:	4770      	bx	lr

08007460 <sprintf>:
 8007460:	b40e      	push	{r1, r2, r3}
 8007462:	b570      	push	{r4, r5, r6, lr}
 8007464:	b09d      	sub	sp, #116	; 0x74
 8007466:	ac21      	add	r4, sp, #132	; 0x84
 8007468:	f240 03f8 	movw	r3, #248	; 0xf8
 800746c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007470:	f854 2b04 	ldr.w	r2, [r4], #4
 8007474:	4606      	mov	r6, r0
 8007476:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800747a:	6818      	ldr	r0, [r3, #0]
 800747c:	9503      	str	r5, [sp, #12]
 800747e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007482:	f8ad 3010 	strh.w	r3, [sp, #16]
 8007486:	9506      	str	r5, [sp, #24]
 8007488:	4623      	mov	r3, r4
 800748a:	a901      	add	r1, sp, #4
 800748c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8007490:	9601      	str	r6, [sp, #4]
 8007492:	9605      	str	r6, [sp, #20]
 8007494:	f8ad 5012 	strh.w	r5, [sp, #18]
 8007498:	941b      	str	r4, [sp, #108]	; 0x6c
 800749a:	f000 f809 	bl	80074b0 <_svfprintf_r>
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
 80074a4:	b01d      	add	sp, #116	; 0x74
 80074a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80074aa:	b003      	add	sp, #12
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop

080074b0 <_svfprintf_r>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	b0c5      	sub	sp, #276	; 0x114
 80074b6:	468a      	mov	sl, r1
 80074b8:	4614      	mov	r4, r2
 80074ba:	930e      	str	r3, [sp, #56]	; 0x38
 80074bc:	900f      	str	r0, [sp, #60]	; 0x3c
 80074be:	f002 fa5f 	bl	8009980 <_localeconv_r>
 80074c2:	6800      	ldr	r0, [r0, #0]
 80074c4:	9017      	str	r0, [sp, #92]	; 0x5c
 80074c6:	f003 fb35 	bl	800ab34 <strlen>
 80074ca:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80074ce:	901a      	str	r0, [sp, #104]	; 0x68
 80074d0:	2100      	movs	r1, #0
 80074d2:	2000      	movs	r0, #0
 80074d4:	061a      	lsls	r2, r3, #24
 80074d6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80074da:	d504      	bpl.n	80074e6 <_svfprintf_r+0x36>
 80074dc:	f8da 3010 	ldr.w	r3, [sl, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f001 8004 	beq.w	80084ee <_svfprintf_r+0x103e>
 80074e6:	2300      	movs	r3, #0
 80074e8:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 80074ec:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80074f0:	a91f      	add	r1, sp, #124	; 0x7c
 80074f2:	9310      	str	r3, [sp, #64]	; 0x40
 80074f4:	933b      	str	r3, [sp, #236]	; 0xec
 80074f6:	933a      	str	r3, [sp, #232]	; 0xe8
 80074f8:	931c      	str	r3, [sp, #112]	; 0x70
 80074fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80074fc:	930c      	str	r3, [sp, #48]	; 0x30
 80074fe:	ebc0 030b 	rsb	r3, r0, fp
 8007502:	9007      	str	r0, [sp, #28]
 8007504:	9139      	str	r1, [sp, #228]	; 0xe4
 8007506:	9409      	str	r4, [sp, #36]	; 0x24
 8007508:	460e      	mov	r6, r1
 800750a:	931d      	str	r3, [sp, #116]	; 0x74
 800750c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800750e:	7803      	ldrb	r3, [r0, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	bf18      	it	ne
 8007514:	2b25      	cmpne	r3, #37	; 0x25
 8007516:	f000 80af 	beq.w	8007678 <_svfprintf_r+0x1c8>
 800751a:	4607      	mov	r7, r0
 800751c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8007520:	2b25      	cmp	r3, #37	; 0x25
 8007522:	bf18      	it	ne
 8007524:	2b00      	cmpne	r3, #0
 8007526:	d1f9      	bne.n	800751c <_svfprintf_r+0x6c>
 8007528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800752a:	ebb7 0801 	subs.w	r8, r7, r1
 800752e:	d00e      	beq.n	800754e <_svfprintf_r+0x9e>
 8007530:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007532:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007534:	6031      	str	r1, [r6, #0]
 8007536:	3401      	adds	r4, #1
 8007538:	4445      	add	r5, r8
 800753a:	2c07      	cmp	r4, #7
 800753c:	f8c6 8004 	str.w	r8, [r6, #4]
 8007540:	953b      	str	r5, [sp, #236]	; 0xec
 8007542:	943a      	str	r4, [sp, #232]	; 0xe8
 8007544:	dc7c      	bgt.n	8007640 <_svfprintf_r+0x190>
 8007546:	3608      	adds	r6, #8
 8007548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800754a:	4442      	add	r2, r8
 800754c:	920c      	str	r2, [sp, #48]	; 0x30
 800754e:	783b      	ldrb	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d07d      	beq.n	8007650 <_svfprintf_r+0x1a0>
 8007554:	3701      	adds	r7, #1
 8007556:	9709      	str	r7, [sp, #36]	; 0x24
 8007558:	2300      	movs	r3, #0
 800755a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800755c:	930b      	str	r3, [sp, #44]	; 0x2c
 800755e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8007562:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007566:	9308      	str	r3, [sp, #32]
 8007568:	2720      	movs	r7, #32
 800756a:	252b      	movs	r5, #43	; 0x2b
 800756c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007570:	f1a3 0220 	sub.w	r2, r3, #32
 8007574:	2a58      	cmp	r2, #88	; 0x58
 8007576:	f200 823b 	bhi.w	80079f0 <_svfprintf_r+0x540>
 800757a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800757e:	024c      	.short	0x024c
 8007580:	02390239 	.word	0x02390239
 8007584:	02390254 	.word	0x02390254
 8007588:	02390239 	.word	0x02390239
 800758c:	02390239 	.word	0x02390239
 8007590:	02590239 	.word	0x02590239
 8007594:	0239007f 	.word	0x0239007f
 8007598:	0082005c 	.word	0x0082005c
 800759c:	009d0239 	.word	0x009d0239
 80075a0:	00a200a2 	.word	0x00a200a2
 80075a4:	00a200a2 	.word	0x00a200a2
 80075a8:	00a200a2 	.word	0x00a200a2
 80075ac:	00a200a2 	.word	0x00a200a2
 80075b0:	023900a2 	.word	0x023900a2
 80075b4:	02390239 	.word	0x02390239
 80075b8:	02390239 	.word	0x02390239
 80075bc:	02390239 	.word	0x02390239
 80075c0:	02390239 	.word	0x02390239
 80075c4:	00b50239 	.word	0x00b50239
 80075c8:	02390154 	.word	0x02390154
 80075cc:	02390154 	.word	0x02390154
 80075d0:	02390239 	.word	0x02390239
 80075d4:	018b0239 	.word	0x018b0239
 80075d8:	02390239 	.word	0x02390239
 80075dc:	02390190 	.word	0x02390190
 80075e0:	02390239 	.word	0x02390239
 80075e4:	02390239 	.word	0x02390239
 80075e8:	023901a7 	.word	0x023901a7
 80075ec:	01ba0239 	.word	0x01ba0239
 80075f0:	02390239 	.word	0x02390239
 80075f4:	02390239 	.word	0x02390239
 80075f8:	02390239 	.word	0x02390239
 80075fc:	02390239 	.word	0x02390239
 8007600:	02390239 	.word	0x02390239
 8007604:	02780293 	.word	0x02780293
 8007608:	01540154 	.word	0x01540154
 800760c:	028e0154 	.word	0x028e0154
 8007610:	02390278 	.word	0x02390278
 8007614:	02130239 	.word	0x02130239
 8007618:	02180239 	.word	0x02180239
 800761c:	02a50224 	.word	0x02a50224
 8007620:	023901de 	.word	0x023901de
 8007624:	023901e3 	.word	0x023901e3
 8007628:	02390264 	.word	0x02390264
 800762c:	02c70239 	.word	0x02c70239
 8007630:	4252      	negs	r2, r2
 8007632:	920b      	str	r2, [sp, #44]	; 0x2c
 8007634:	930e      	str	r3, [sp, #56]	; 0x38
 8007636:	9b08      	ldr	r3, [sp, #32]
 8007638:	f043 0304 	orr.w	r3, r3, #4
 800763c:	9308      	str	r3, [sp, #32]
 800763e:	e795      	b.n	800756c <_svfprintf_r+0xbc>
 8007640:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007642:	4651      	mov	r1, sl
 8007644:	465a      	mov	r2, fp
 8007646:	f003 faa5 	bl	800ab94 <__ssprint_r>
 800764a:	b940      	cbnz	r0, 800765e <_svfprintf_r+0x1ae>
 800764c:	ae1f      	add	r6, sp, #124	; 0x7c
 800764e:	e77b      	b.n	8007548 <_svfprintf_r+0x98>
 8007650:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8007652:	b123      	cbz	r3, 800765e <_svfprintf_r+0x1ae>
 8007654:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007656:	4651      	mov	r1, sl
 8007658:	aa39      	add	r2, sp, #228	; 0xe4
 800765a:	f003 fa9b 	bl	800ab94 <__ssprint_r>
 800765e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007662:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007668:	bf18      	it	ne
 800766a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800766e:	930c      	str	r3, [sp, #48]	; 0x30
 8007670:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007672:	b045      	add	sp, #276	; 0x114
 8007674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007678:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800767a:	e768      	b.n	800754e <_svfprintf_r+0x9e>
 800767c:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8007680:	e774      	b.n	800756c <_svfprintf_r+0xbc>
 8007682:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007686:	2b2a      	cmp	r3, #42	; 0x2a
 8007688:	f001 804c 	beq.w	8008724 <_svfprintf_r+0x1274>
 800768c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007690:	2400      	movs	r4, #0
 8007692:	2a09      	cmp	r2, #9
 8007694:	f63f af6c 	bhi.w	8007570 <_svfprintf_r+0xc0>
 8007698:	4601      	mov	r1, r0
 800769a:	2400      	movs	r4, #0
 800769c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80076a4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80076a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80076ac:	2a09      	cmp	r2, #9
 80076ae:	4608      	mov	r0, r1
 80076b0:	d9f4      	bls.n	800769c <_svfprintf_r+0x1ec>
 80076b2:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80076b6:	e75b      	b.n	8007570 <_svfprintf_r+0xc0>
 80076b8:	9a08      	ldr	r2, [sp, #32]
 80076ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076be:	9208      	str	r2, [sp, #32]
 80076c0:	e754      	b.n	800756c <_svfprintf_r+0xbc>
 80076c2:	4601      	mov	r1, r0
 80076c4:	2200      	movs	r2, #0
 80076c6:	46b4      	mov	ip, r6
 80076c8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80076cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d0:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80076d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80076d8:	2e09      	cmp	r6, #9
 80076da:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80076de:	4608      	mov	r0, r1
 80076e0:	d9f2      	bls.n	80076c8 <_svfprintf_r+0x218>
 80076e2:	4666      	mov	r6, ip
 80076e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80076e6:	e743      	b.n	8007570 <_svfprintf_r+0xc0>
 80076e8:	9315      	str	r3, [sp, #84]	; 0x54
 80076ea:	9b08      	ldr	r3, [sp, #32]
 80076ec:	9009      	str	r0, [sp, #36]	; 0x24
 80076ee:	f043 0310 	orr.w	r3, r3, #16
 80076f2:	9308      	str	r3, [sp, #32]
 80076f4:	9808      	ldr	r0, [sp, #32]
 80076f6:	06c3      	lsls	r3, r0, #27
 80076f8:	f100 81bf 	bmi.w	8007a7a <_svfprintf_r+0x5ca>
 80076fc:	9a08      	ldr	r2, [sp, #32]
 80076fe:	0655      	lsls	r5, r2, #25
 8007700:	f140 81bb 	bpl.w	8007a7a <_svfprintf_r+0x5ca>
 8007704:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007706:	f9b0 3000 	ldrsh.w	r3, [r0]
 800770a:	3004      	adds	r0, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	900e      	str	r0, [sp, #56]	; 0x38
 8007710:	f2c0 81ba 	blt.w	8007a88 <_svfprintf_r+0x5d8>
 8007714:	bf0c      	ite	eq
 8007716:	2100      	moveq	r1, #0
 8007718:	2101      	movne	r1, #1
 800771a:	2201      	movs	r2, #1
 800771c:	2c00      	cmp	r4, #0
 800771e:	bfa2      	ittt	ge
 8007720:	9808      	ldrge	r0, [sp, #32]
 8007722:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8007726:	9008      	strge	r0, [sp, #32]
 8007728:	2c00      	cmp	r4, #0
 800772a:	bf18      	it	ne
 800772c:	f041 0101 	orrne.w	r1, r1, #1
 8007730:	2900      	cmp	r1, #0
 8007732:	f000 8323 	beq.w	8007d7c <_svfprintf_r+0x8cc>
 8007736:	2a01      	cmp	r2, #1
 8007738:	f000 845f 	beq.w	8007ffa <_svfprintf_r+0xb4a>
 800773c:	2a02      	cmp	r2, #2
 800773e:	bf18      	it	ne
 8007740:	465a      	movne	r2, fp
 8007742:	d102      	bne.n	800774a <_svfprintf_r+0x29a>
 8007744:	f000 bc48 	b.w	8007fd8 <_svfprintf_r+0xb28>
 8007748:	4602      	mov	r2, r0
 800774a:	f003 0107 	and.w	r1, r3, #7
 800774e:	3130      	adds	r1, #48	; 0x30
 8007750:	1e50      	subs	r0, r2, #1
 8007752:	08db      	lsrs	r3, r3, #3
 8007754:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007758:	d1f6      	bne.n	8007748 <_svfprintf_r+0x298>
 800775a:	9b08      	ldr	r3, [sp, #32]
 800775c:	9011      	str	r0, [sp, #68]	; 0x44
 800775e:	07dd      	lsls	r5, r3, #31
 8007760:	d507      	bpl.n	8007772 <_svfprintf_r+0x2c2>
 8007762:	2930      	cmp	r1, #48	; 0x30
 8007764:	f000 8733 	beq.w	80085ce <_svfprintf_r+0x111e>
 8007768:	1e90      	subs	r0, r2, #2
 800776a:	2330      	movs	r3, #48	; 0x30
 800776c:	9011      	str	r0, [sp, #68]	; 0x44
 800776e:	f802 3c02 	strb.w	r3, [r2, #-2]
 8007772:	ebc0 030b 	rsb	r3, r0, fp
 8007776:	930d      	str	r3, [sp, #52]	; 0x34
 8007778:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800777a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800777e:	9412      	str	r4, [sp, #72]	; 0x48
 8007780:	42a3      	cmp	r3, r4
 8007782:	bfb8      	it	lt
 8007784:	4623      	movlt	r3, r4
 8007786:	2000      	movs	r0, #0
 8007788:	930a      	str	r3, [sp, #40]	; 0x28
 800778a:	9016      	str	r0, [sp, #88]	; 0x58
 800778c:	b111      	cbz	r1, 8007794 <_svfprintf_r+0x2e4>
 800778e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007790:	3301      	adds	r3, #1
 8007792:	930a      	str	r3, [sp, #40]	; 0x28
 8007794:	9b08      	ldr	r3, [sp, #32]
 8007796:	f013 0302 	ands.w	r3, r3, #2
 800779a:	9313      	str	r3, [sp, #76]	; 0x4c
 800779c:	d002      	beq.n	80077a4 <_svfprintf_r+0x2f4>
 800779e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80077a0:	3002      	adds	r0, #2
 80077a2:	900a      	str	r0, [sp, #40]	; 0x28
 80077a4:	9b08      	ldr	r3, [sp, #32]
 80077a6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 80077aa:	9314      	str	r3, [sp, #80]	; 0x50
 80077ac:	f040 81bb 	bne.w	8007b26 <_svfprintf_r+0x676>
 80077b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80077b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077b4:	1a47      	subs	r7, r0, r1
 80077b6:	2f00      	cmp	r7, #0
 80077b8:	f340 81b5 	ble.w	8007b26 <_svfprintf_r+0x676>
 80077bc:	2f10      	cmp	r7, #16
 80077be:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80077c0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80077c2:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8007b08 <_svfprintf_r+0x658>
 80077c6:	dd22      	ble.n	800780e <_svfprintf_r+0x35e>
 80077c8:	4623      	mov	r3, r4
 80077ca:	f04f 0910 	mov.w	r9, #16
 80077ce:	4644      	mov	r4, r8
 80077d0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80077d4:	e003      	b.n	80077de <_svfprintf_r+0x32e>
 80077d6:	3f10      	subs	r7, #16
 80077d8:	3608      	adds	r6, #8
 80077da:	2f10      	cmp	r7, #16
 80077dc:	dd15      	ble.n	800780a <_svfprintf_r+0x35a>
 80077de:	3301      	adds	r3, #1
 80077e0:	3510      	adds	r5, #16
 80077e2:	2b07      	cmp	r3, #7
 80077e4:	e886 0210 	stmia.w	r6, {r4, r9}
 80077e8:	953b      	str	r5, [sp, #236]	; 0xec
 80077ea:	933a      	str	r3, [sp, #232]	; 0xe8
 80077ec:	ddf3      	ble.n	80077d6 <_svfprintf_r+0x326>
 80077ee:	4640      	mov	r0, r8
 80077f0:	4651      	mov	r1, sl
 80077f2:	465a      	mov	r2, fp
 80077f4:	f003 f9ce 	bl	800ab94 <__ssprint_r>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	f47f af30 	bne.w	800765e <_svfprintf_r+0x1ae>
 80077fe:	3f10      	subs	r7, #16
 8007800:	2f10      	cmp	r7, #16
 8007802:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007804:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8007806:	ae1f      	add	r6, sp, #124	; 0x7c
 8007808:	dce9      	bgt.n	80077de <_svfprintf_r+0x32e>
 800780a:	46a0      	mov	r8, r4
 800780c:	461c      	mov	r4, r3
 800780e:	3401      	adds	r4, #1
 8007810:	19ed      	adds	r5, r5, r7
 8007812:	2c07      	cmp	r4, #7
 8007814:	f8c6 8000 	str.w	r8, [r6]
 8007818:	6077      	str	r7, [r6, #4]
 800781a:	953b      	str	r5, [sp, #236]	; 0xec
 800781c:	943a      	str	r4, [sp, #232]	; 0xe8
 800781e:	f300 8414 	bgt.w	800804a <_svfprintf_r+0xb9a>
 8007822:	3608      	adds	r6, #8
 8007824:	e180      	b.n	8007b28 <_svfprintf_r+0x678>
 8007826:	9009      	str	r0, [sp, #36]	; 0x24
 8007828:	980e      	ldr	r0, [sp, #56]	; 0x38
 800782a:	9315      	str	r3, [sp, #84]	; 0x54
 800782c:	1dc3      	adds	r3, r0, #7
 800782e:	f023 0307 	bic.w	r3, r3, #7
 8007832:	f103 0108 	add.w	r1, r3, #8
 8007836:	910e      	str	r1, [sp, #56]	; 0x38
 8007838:	f8d3 8000 	ldr.w	r8, [r3]
 800783c:	685d      	ldr	r5, [r3, #4]
 800783e:	4642      	mov	r2, r8
 8007840:	462b      	mov	r3, r5
 8007842:	4629      	mov	r1, r5
 8007844:	4640      	mov	r0, r8
 8007846:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800784a:	f003 f83b 	bl	800a8c4 <__fpclassifyd>
 800784e:	2801      	cmp	r0, #1
 8007850:	4629      	mov	r1, r5
 8007852:	4640      	mov	r0, r8
 8007854:	f040 84d0 	bne.w	80081f8 <_svfprintf_r+0xd48>
 8007858:	2200      	movs	r2, #0
 800785a:	2300      	movs	r3, #0
 800785c:	f004 fd62 	bl	800c324 <__aeabi_dcmplt>
 8007860:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8007864:	b110      	cbz	r0, 800786c <_svfprintf_r+0x3bc>
 8007866:	212d      	movs	r1, #45	; 0x2d
 8007868:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 800786c:	2303      	movs	r3, #3
 800786e:	930a      	str	r3, [sp, #40]	; 0x28
 8007870:	2300      	movs	r3, #0
 8007872:	9312      	str	r3, [sp, #72]	; 0x48
 8007874:	4aa0      	ldr	r2, [pc, #640]	; (8007af8 <_svfprintf_r+0x648>)
 8007876:	4ba1      	ldr	r3, [pc, #644]	; (8007afc <_svfprintf_r+0x64c>)
 8007878:	9815      	ldr	r0, [sp, #84]	; 0x54
 800787a:	2847      	cmp	r0, #71	; 0x47
 800787c:	bfd8      	it	le
 800787e:	461a      	movle	r2, r3
 8007880:	9211      	str	r2, [sp, #68]	; 0x44
 8007882:	9a08      	ldr	r2, [sp, #32]
 8007884:	2303      	movs	r3, #3
 8007886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800788a:	930d      	str	r3, [sp, #52]	; 0x34
 800788c:	2300      	movs	r3, #0
 800788e:	9208      	str	r2, [sp, #32]
 8007890:	9316      	str	r3, [sp, #88]	; 0x58
 8007892:	e77b      	b.n	800778c <_svfprintf_r+0x2dc>
 8007894:	9b08      	ldr	r3, [sp, #32]
 8007896:	f043 0308 	orr.w	r3, r3, #8
 800789a:	9308      	str	r3, [sp, #32]
 800789c:	e666      	b.n	800756c <_svfprintf_r+0xbc>
 800789e:	9908      	ldr	r1, [sp, #32]
 80078a0:	9009      	str	r0, [sp, #36]	; 0x24
 80078a2:	f041 0110 	orr.w	r1, r1, #16
 80078a6:	9108      	str	r1, [sp, #32]
 80078a8:	9a08      	ldr	r2, [sp, #32]
 80078aa:	9315      	str	r3, [sp, #84]	; 0x54
 80078ac:	f012 0110 	ands.w	r1, r2, #16
 80078b0:	f000 8090 	beq.w	80079d4 <_svfprintf_r+0x524>
 80078b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80078b6:	6803      	ldr	r3, [r0, #0]
 80078b8:	2200      	movs	r2, #0
 80078ba:	1a99      	subs	r1, r3, r2
 80078bc:	bf18      	it	ne
 80078be:	2101      	movne	r1, #1
 80078c0:	3004      	adds	r0, #4
 80078c2:	900e      	str	r0, [sp, #56]	; 0x38
 80078c4:	2000      	movs	r0, #0
 80078c6:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 80078ca:	e727      	b.n	800771c <_svfprintf_r+0x26c>
 80078cc:	9908      	ldr	r1, [sp, #32]
 80078ce:	9009      	str	r0, [sp, #36]	; 0x24
 80078d0:	f041 0110 	orr.w	r1, r1, #16
 80078d4:	9108      	str	r1, [sp, #32]
 80078d6:	9a08      	ldr	r2, [sp, #32]
 80078d8:	9315      	str	r3, [sp, #84]	; 0x54
 80078da:	06d0      	lsls	r0, r2, #27
 80078dc:	f140 80b9 	bpl.w	8007a52 <_svfprintf_r+0x5a2>
 80078e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80078e2:	6803      	ldr	r3, [r0, #0]
 80078e4:	2201      	movs	r2, #1
 80078e6:	1c19      	adds	r1, r3, #0
 80078e8:	bf18      	it	ne
 80078ea:	2101      	movne	r1, #1
 80078ec:	3004      	adds	r0, #4
 80078ee:	900e      	str	r0, [sp, #56]	; 0x38
 80078f0:	e7e8      	b.n	80078c4 <_svfprintf_r+0x414>
 80078f2:	4a83      	ldr	r2, [pc, #524]	; (8007b00 <_svfprintf_r+0x650>)
 80078f4:	9315      	str	r3, [sp, #84]	; 0x54
 80078f6:	9b08      	ldr	r3, [sp, #32]
 80078f8:	921c      	str	r2, [sp, #112]	; 0x70
 80078fa:	06da      	lsls	r2, r3, #27
 80078fc:	9009      	str	r0, [sp, #36]	; 0x24
 80078fe:	f100 810d 	bmi.w	8007b1c <_svfprintf_r+0x66c>
 8007902:	9908      	ldr	r1, [sp, #32]
 8007904:	064b      	lsls	r3, r1, #25
 8007906:	f140 8109 	bpl.w	8007b1c <_svfprintf_r+0x66c>
 800790a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800790c:	8813      	ldrh	r3, [r2, #0]
 800790e:	3204      	adds	r2, #4
 8007910:	920e      	str	r2, [sp, #56]	; 0x38
 8007912:	1c19      	adds	r1, r3, #0
 8007914:	9a08      	ldr	r2, [sp, #32]
 8007916:	bf18      	it	ne
 8007918:	2101      	movne	r1, #1
 800791a:	420a      	tst	r2, r1
 800791c:	f000 83ca 	beq.w	80080b4 <_svfprintf_r+0xc04>
 8007920:	9908      	ldr	r1, [sp, #32]
 8007922:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007924:	2230      	movs	r2, #48	; 0x30
 8007926:	f041 0102 	orr.w	r1, r1, #2
 800792a:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 800792e:	9108      	str	r1, [sp, #32]
 8007930:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8007934:	2101      	movs	r1, #1
 8007936:	2202      	movs	r2, #2
 8007938:	e7c4      	b.n	80078c4 <_svfprintf_r+0x414>
 800793a:	9b08      	ldr	r3, [sp, #32]
 800793c:	f043 0310 	orr.w	r3, r3, #16
 8007940:	9308      	str	r3, [sp, #32]
 8007942:	e613      	b.n	800756c <_svfprintf_r+0xbc>
 8007944:	2500      	movs	r5, #0
 8007946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007948:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 800794c:	9315      	str	r3, [sp, #84]	; 0x54
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007952:	9009      	str	r0, [sp, #36]	; 0x24
 8007954:	9211      	str	r2, [sp, #68]	; 0x44
 8007956:	1d1f      	adds	r7, r3, #4
 8007958:	2a00      	cmp	r2, #0
 800795a:	f000 864b 	beq.w	80085f4 <_svfprintf_r+0x1144>
 800795e:	2c00      	cmp	r4, #0
 8007960:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007962:	f2c0 8602 	blt.w	800856a <_svfprintf_r+0x10ba>
 8007966:	4629      	mov	r1, r5
 8007968:	4622      	mov	r2, r4
 800796a:	f002 fad1 	bl	8009f10 <memchr>
 800796e:	2800      	cmp	r0, #0
 8007970:	f000 866f 	beq.w	8008652 <_svfprintf_r+0x11a2>
 8007974:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007976:	9512      	str	r5, [sp, #72]	; 0x48
 8007978:	1ac0      	subs	r0, r0, r3
 800797a:	42a0      	cmp	r0, r4
 800797c:	900d      	str	r0, [sp, #52]	; 0x34
 800797e:	bfd1      	iteee	le
 8007980:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8007982:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 8007986:	970e      	strgt	r7, [sp, #56]	; 0x38
 8007988:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 800798c:	bfd3      	iteet	le
 800798e:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8007992:	900a      	strgt	r0, [sp, #40]	; 0x28
 8007994:	940d      	strgt	r4, [sp, #52]	; 0x34
 8007996:	930a      	strle	r3, [sp, #40]	; 0x28
 8007998:	bfdc      	itt	le
 800799a:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 800799e:	970e      	strle	r7, [sp, #56]	; 0x38
 80079a0:	9516      	str	r5, [sp, #88]	; 0x58
 80079a2:	e6f3      	b.n	800778c <_svfprintf_r+0x2dc>
 80079a4:	9a08      	ldr	r2, [sp, #32]
 80079a6:	f042 0210 	orr.w	r2, r2, #16
 80079aa:	9208      	str	r2, [sp, #32]
 80079ac:	e5de      	b.n	800756c <_svfprintf_r+0xbc>
 80079ae:	9009      	str	r0, [sp, #36]	; 0x24
 80079b0:	9808      	ldr	r0, [sp, #32]
 80079b2:	06c3      	lsls	r3, r0, #27
 80079b4:	f140 843f 	bpl.w	8008236 <_svfprintf_r+0xd86>
 80079b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80079ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079bc:	680b      	ldr	r3, [r1, #0]
 80079be:	3104      	adds	r1, #4
 80079c0:	910e      	str	r1, [sp, #56]	; 0x38
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	e5a2      	b.n	800750c <_svfprintf_r+0x5c>
 80079c6:	9a08      	ldr	r2, [sp, #32]
 80079c8:	9009      	str	r0, [sp, #36]	; 0x24
 80079ca:	f012 0110 	ands.w	r1, r2, #16
 80079ce:	9315      	str	r3, [sp, #84]	; 0x54
 80079d0:	f47f af70 	bne.w	80078b4 <_svfprintf_r+0x404>
 80079d4:	9b08      	ldr	r3, [sp, #32]
 80079d6:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 80079da:	f000 8437 	beq.w	800824c <_svfprintf_r+0xd9c>
 80079de:	980e      	ldr	r0, [sp, #56]	; 0x38
 80079e0:	8803      	ldrh	r3, [r0, #0]
 80079e2:	460a      	mov	r2, r1
 80079e4:	1c19      	adds	r1, r3, #0
 80079e6:	bf18      	it	ne
 80079e8:	2101      	movne	r1, #1
 80079ea:	3004      	adds	r0, #4
 80079ec:	900e      	str	r0, [sp, #56]	; 0x38
 80079ee:	e769      	b.n	80078c4 <_svfprintf_r+0x414>
 80079f0:	9009      	str	r0, [sp, #36]	; 0x24
 80079f2:	9315      	str	r3, [sp, #84]	; 0x54
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f43f ae2b 	beq.w	8007650 <_svfprintf_r+0x1a0>
 80079fa:	2101      	movs	r1, #1
 80079fc:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8007a00:	aa2f      	add	r2, sp, #188	; 0xbc
 8007a02:	2300      	movs	r3, #0
 8007a04:	910a      	str	r1, [sp, #40]	; 0x28
 8007a06:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8007a0a:	910d      	str	r1, [sp, #52]	; 0x34
 8007a0c:	9211      	str	r2, [sp, #68]	; 0x44
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9312      	str	r3, [sp, #72]	; 0x48
 8007a12:	9316      	str	r3, [sp, #88]	; 0x58
 8007a14:	e6be      	b.n	8007794 <_svfprintf_r+0x2e4>
 8007a16:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f47f ada6 	bne.w	800756c <_svfprintf_r+0xbc>
 8007a20:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 8007a24:	e5a2      	b.n	800756c <_svfprintf_r+0xbc>
 8007a26:	9a08      	ldr	r2, [sp, #32]
 8007a28:	f042 0201 	orr.w	r2, r2, #1
 8007a2c:	9208      	str	r2, [sp, #32]
 8007a2e:	e59d      	b.n	800756c <_svfprintf_r+0xbc>
 8007a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a32:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a3a:	1d0b      	adds	r3, r1, #4
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	f6ff adf7 	blt.w	8007630 <_svfprintf_r+0x180>
 8007a42:	930e      	str	r3, [sp, #56]	; 0x38
 8007a44:	e592      	b.n	800756c <_svfprintf_r+0xbc>
 8007a46:	9a08      	ldr	r2, [sp, #32]
 8007a48:	9009      	str	r0, [sp, #36]	; 0x24
 8007a4a:	06d0      	lsls	r0, r2, #27
 8007a4c:	9315      	str	r3, [sp, #84]	; 0x54
 8007a4e:	f53f af47 	bmi.w	80078e0 <_svfprintf_r+0x430>
 8007a52:	9908      	ldr	r1, [sp, #32]
 8007a54:	0649      	lsls	r1, r1, #25
 8007a56:	f140 83ea 	bpl.w	800822e <_svfprintf_r+0xd7e>
 8007a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a5c:	8813      	ldrh	r3, [r2, #0]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007a62:	1c19      	adds	r1, r3, #0
 8007a64:	bf18      	it	ne
 8007a66:	2101      	movne	r1, #1
 8007a68:	3004      	adds	r0, #4
 8007a6a:	900e      	str	r0, [sp, #56]	; 0x38
 8007a6c:	e72a      	b.n	80078c4 <_svfprintf_r+0x414>
 8007a6e:	9009      	str	r0, [sp, #36]	; 0x24
 8007a70:	9808      	ldr	r0, [sp, #32]
 8007a72:	9315      	str	r3, [sp, #84]	; 0x54
 8007a74:	06c3      	lsls	r3, r0, #27
 8007a76:	f57f ae41 	bpl.w	80076fc <_svfprintf_r+0x24c>
 8007a7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007a7c:	680b      	ldr	r3, [r1, #0]
 8007a7e:	3104      	adds	r1, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	910e      	str	r1, [sp, #56]	; 0x38
 8007a84:	f6bf ae46 	bge.w	8007714 <_svfprintf_r+0x264>
 8007a88:	425b      	negs	r3, r3
 8007a8a:	222d      	movs	r2, #45	; 0x2d
 8007a8c:	1c19      	adds	r1, r3, #0
 8007a8e:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8007a92:	bf18      	it	ne
 8007a94:	2101      	movne	r1, #1
 8007a96:	2201      	movs	r2, #1
 8007a98:	e640      	b.n	800771c <_svfprintf_r+0x26c>
 8007a9a:	9908      	ldr	r1, [sp, #32]
 8007a9c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007aa0:	9108      	str	r1, [sp, #32]
 8007aa2:	e563      	b.n	800756c <_svfprintf_r+0xbc>
 8007aa4:	9315      	str	r3, [sp, #84]	; 0x54
 8007aa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aa8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	9009      	str	r0, [sp, #36]	; 0x24
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2001      	movs	r0, #1
 8007ab2:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8007ab6:	3104      	adds	r1, #4
 8007ab8:	aa2f      	add	r2, sp, #188	; 0xbc
 8007aba:	900a      	str	r0, [sp, #40]	; 0x28
 8007abc:	910e      	str	r1, [sp, #56]	; 0x38
 8007abe:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8007ac2:	900d      	str	r0, [sp, #52]	; 0x34
 8007ac4:	9211      	str	r2, [sp, #68]	; 0x44
 8007ac6:	e7a2      	b.n	8007a0e <_svfprintf_r+0x55e>
 8007ac8:	490e      	ldr	r1, [pc, #56]	; (8007b04 <_svfprintf_r+0x654>)
 8007aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007acc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ace:	911c      	str	r1, [sp, #112]	; 0x70
 8007ad0:	9908      	ldr	r1, [sp, #32]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	9009      	str	r0, [sp, #36]	; 0x24
 8007ad6:	3204      	adds	r2, #4
 8007ad8:	f041 0102 	orr.w	r1, r1, #2
 8007adc:	2078      	movs	r0, #120	; 0x78
 8007ade:	920e      	str	r2, [sp, #56]	; 0x38
 8007ae0:	9108      	str	r1, [sp, #32]
 8007ae2:	2230      	movs	r2, #48	; 0x30
 8007ae4:	1c19      	adds	r1, r3, #0
 8007ae6:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8007aea:	bf18      	it	ne
 8007aec:	2101      	movne	r1, #1
 8007aee:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8007af2:	2202      	movs	r2, #2
 8007af4:	9015      	str	r0, [sp, #84]	; 0x54
 8007af6:	e6e5      	b.n	80078c4 <_svfprintf_r+0x414>
 8007af8:	0800c73c 	.word	0x0800c73c
 8007afc:	0800c738 	.word	0x0800c738
 8007b00:	0800c748 	.word	0x0800c748
 8007b04:	0800c75c 	.word	0x0800c75c
 8007b08:	0800c57c 	.word	0x0800c57c
 8007b0c:	9315      	str	r3, [sp, #84]	; 0x54
 8007b0e:	9b08      	ldr	r3, [sp, #32]
 8007b10:	49a4      	ldr	r1, [pc, #656]	; (8007da4 <_svfprintf_r+0x8f4>)
 8007b12:	9009      	str	r0, [sp, #36]	; 0x24
 8007b14:	06da      	lsls	r2, r3, #27
 8007b16:	911c      	str	r1, [sp, #112]	; 0x70
 8007b18:	f57f aef3 	bpl.w	8007902 <_svfprintf_r+0x452>
 8007b1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007b1e:	6803      	ldr	r3, [r0, #0]
 8007b20:	3004      	adds	r0, #4
 8007b22:	900e      	str	r0, [sp, #56]	; 0x38
 8007b24:	e6f5      	b.n	8007912 <_svfprintf_r+0x462>
 8007b26:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007b28:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8007b2c:	b16b      	cbz	r3, 8007b4a <_svfprintf_r+0x69a>
 8007b2e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007b30:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 8007b34:	3401      	adds	r4, #1
 8007b36:	6033      	str	r3, [r6, #0]
 8007b38:	3501      	adds	r5, #1
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	2c07      	cmp	r4, #7
 8007b3e:	6073      	str	r3, [r6, #4]
 8007b40:	953b      	str	r5, [sp, #236]	; 0xec
 8007b42:	943a      	str	r4, [sp, #232]	; 0xe8
 8007b44:	f300 81f5 	bgt.w	8007f32 <_svfprintf_r+0xa82>
 8007b48:	3608      	adds	r6, #8
 8007b4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b4c:	b163      	cbz	r3, 8007b68 <_svfprintf_r+0x6b8>
 8007b4e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007b50:	ab43      	add	r3, sp, #268	; 0x10c
 8007b52:	3401      	adds	r4, #1
 8007b54:	6033      	str	r3, [r6, #0]
 8007b56:	3502      	adds	r5, #2
 8007b58:	2302      	movs	r3, #2
 8007b5a:	2c07      	cmp	r4, #7
 8007b5c:	6073      	str	r3, [r6, #4]
 8007b5e:	953b      	str	r5, [sp, #236]	; 0xec
 8007b60:	943a      	str	r4, [sp, #232]	; 0xe8
 8007b62:	f300 81db 	bgt.w	8007f1c <_svfprintf_r+0xa6c>
 8007b66:	3608      	adds	r6, #8
 8007b68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b6a:	2b80      	cmp	r3, #128	; 0x80
 8007b6c:	f000 8122 	beq.w	8007db4 <_svfprintf_r+0x904>
 8007b70:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b74:	1ac7      	subs	r7, r0, r3
 8007b76:	2f00      	cmp	r7, #0
 8007b78:	dd32      	ble.n	8007be0 <_svfprintf_r+0x730>
 8007b7a:	2f10      	cmp	r7, #16
 8007b7c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007b7e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8007dac <_svfprintf_r+0x8fc>
 8007b82:	dd22      	ble.n	8007bca <_svfprintf_r+0x71a>
 8007b84:	4623      	mov	r3, r4
 8007b86:	f04f 0910 	mov.w	r9, #16
 8007b8a:	4644      	mov	r4, r8
 8007b8c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007b90:	e003      	b.n	8007b9a <_svfprintf_r+0x6ea>
 8007b92:	3f10      	subs	r7, #16
 8007b94:	3608      	adds	r6, #8
 8007b96:	2f10      	cmp	r7, #16
 8007b98:	dd15      	ble.n	8007bc6 <_svfprintf_r+0x716>
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	3510      	adds	r5, #16
 8007b9e:	2b07      	cmp	r3, #7
 8007ba0:	e886 0210 	stmia.w	r6, {r4, r9}
 8007ba4:	953b      	str	r5, [sp, #236]	; 0xec
 8007ba6:	933a      	str	r3, [sp, #232]	; 0xe8
 8007ba8:	ddf3      	ble.n	8007b92 <_svfprintf_r+0x6e2>
 8007baa:	4640      	mov	r0, r8
 8007bac:	4651      	mov	r1, sl
 8007bae:	465a      	mov	r2, fp
 8007bb0:	f002 fff0 	bl	800ab94 <__ssprint_r>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f47f ad52 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007bba:	3f10      	subs	r7, #16
 8007bbc:	2f10      	cmp	r7, #16
 8007bbe:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007bc0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8007bc2:	ae1f      	add	r6, sp, #124	; 0x7c
 8007bc4:	dce9      	bgt.n	8007b9a <_svfprintf_r+0x6ea>
 8007bc6:	46a0      	mov	r8, r4
 8007bc8:	461c      	mov	r4, r3
 8007bca:	3401      	adds	r4, #1
 8007bcc:	19ed      	adds	r5, r5, r7
 8007bce:	2c07      	cmp	r4, #7
 8007bd0:	f8c6 8000 	str.w	r8, [r6]
 8007bd4:	6077      	str	r7, [r6, #4]
 8007bd6:	953b      	str	r5, [sp, #236]	; 0xec
 8007bd8:	943a      	str	r4, [sp, #232]	; 0xe8
 8007bda:	f300 8194 	bgt.w	8007f06 <_svfprintf_r+0xa56>
 8007bde:	3608      	adds	r6, #8
 8007be0:	9908      	ldr	r1, [sp, #32]
 8007be2:	05ca      	lsls	r2, r1, #23
 8007be4:	d472      	bmi.n	8007ccc <_svfprintf_r+0x81c>
 8007be6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007bec:	6073      	str	r3, [r6, #4]
 8007bee:	3401      	adds	r4, #1
 8007bf0:	18ed      	adds	r5, r5, r3
 8007bf2:	2c07      	cmp	r4, #7
 8007bf4:	6032      	str	r2, [r6, #0]
 8007bf6:	953b      	str	r5, [sp, #236]	; 0xec
 8007bf8:	943a      	str	r4, [sp, #232]	; 0xe8
 8007bfa:	dc5c      	bgt.n	8007cb6 <_svfprintf_r+0x806>
 8007bfc:	3608      	adds	r6, #8
 8007bfe:	9908      	ldr	r1, [sp, #32]
 8007c00:	074b      	lsls	r3, r1, #29
 8007c02:	d53e      	bpl.n	8007c82 <_svfprintf_r+0x7d2>
 8007c04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c08:	1ad7      	subs	r7, r2, r3
 8007c0a:	2f00      	cmp	r7, #0
 8007c0c:	dd39      	ble.n	8007c82 <_svfprintf_r+0x7d2>
 8007c0e:	2f10      	cmp	r7, #16
 8007c10:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007c12:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8007db0 <_svfprintf_r+0x900>
 8007c16:	dd22      	ble.n	8007c5e <_svfprintf_r+0x7ae>
 8007c18:	4623      	mov	r3, r4
 8007c1a:	f04f 0910 	mov.w	r9, #16
 8007c1e:	4644      	mov	r4, r8
 8007c20:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007c24:	e003      	b.n	8007c2e <_svfprintf_r+0x77e>
 8007c26:	3f10      	subs	r7, #16
 8007c28:	3608      	adds	r6, #8
 8007c2a:	2f10      	cmp	r7, #16
 8007c2c:	dd15      	ble.n	8007c5a <_svfprintf_r+0x7aa>
 8007c2e:	3301      	adds	r3, #1
 8007c30:	3510      	adds	r5, #16
 8007c32:	2b07      	cmp	r3, #7
 8007c34:	e886 0210 	stmia.w	r6, {r4, r9}
 8007c38:	953b      	str	r5, [sp, #236]	; 0xec
 8007c3a:	933a      	str	r3, [sp, #232]	; 0xe8
 8007c3c:	ddf3      	ble.n	8007c26 <_svfprintf_r+0x776>
 8007c3e:	4640      	mov	r0, r8
 8007c40:	4651      	mov	r1, sl
 8007c42:	465a      	mov	r2, fp
 8007c44:	f002 ffa6 	bl	800ab94 <__ssprint_r>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f47f ad08 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007c4e:	3f10      	subs	r7, #16
 8007c50:	2f10      	cmp	r7, #16
 8007c52:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007c54:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8007c56:	ae1f      	add	r6, sp, #124	; 0x7c
 8007c58:	dce9      	bgt.n	8007c2e <_svfprintf_r+0x77e>
 8007c5a:	46a0      	mov	r8, r4
 8007c5c:	461c      	mov	r4, r3
 8007c5e:	3401      	adds	r4, #1
 8007c60:	197d      	adds	r5, r7, r5
 8007c62:	2c07      	cmp	r4, #7
 8007c64:	f8c6 8000 	str.w	r8, [r6]
 8007c68:	6077      	str	r7, [r6, #4]
 8007c6a:	953b      	str	r5, [sp, #236]	; 0xec
 8007c6c:	943a      	str	r4, [sp, #232]	; 0xe8
 8007c6e:	dd08      	ble.n	8007c82 <_svfprintf_r+0x7d2>
 8007c70:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007c72:	4651      	mov	r1, sl
 8007c74:	465a      	mov	r2, fp
 8007c76:	f002 ff8d 	bl	800ab94 <__ssprint_r>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	f47f acef 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007c80:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007c82:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c88:	428a      	cmp	r2, r1
 8007c8a:	bfac      	ite	ge
 8007c8c:	1880      	addge	r0, r0, r2
 8007c8e:	1840      	addlt	r0, r0, r1
 8007c90:	900c      	str	r0, [sp, #48]	; 0x30
 8007c92:	2d00      	cmp	r5, #0
 8007c94:	f040 8129 	bne.w	8007eea <_svfprintf_r+0xa3a>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	933a      	str	r3, [sp, #232]	; 0xe8
 8007c9c:	ae1f      	add	r6, sp, #124	; 0x7c
 8007c9e:	e435      	b.n	800750c <_svfprintf_r+0x5c>
 8007ca0:	46a0      	mov	r8, r4
 8007ca2:	461c      	mov	r4, r3
 8007ca4:	3401      	adds	r4, #1
 8007ca6:	19ed      	adds	r5, r5, r7
 8007ca8:	2c07      	cmp	r4, #7
 8007caa:	f8c6 8000 	str.w	r8, [r6]
 8007cae:	6077      	str	r7, [r6, #4]
 8007cb0:	953b      	str	r5, [sp, #236]	; 0xec
 8007cb2:	943a      	str	r4, [sp, #232]	; 0xe8
 8007cb4:	dda2      	ble.n	8007bfc <_svfprintf_r+0x74c>
 8007cb6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007cb8:	4651      	mov	r1, sl
 8007cba:	465a      	mov	r2, fp
 8007cbc:	f002 ff6a 	bl	800ab94 <__ssprint_r>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	f47f accc 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007cc6:	ae1f      	add	r6, sp, #124	; 0x7c
 8007cc8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007cca:	e798      	b.n	8007bfe <_svfprintf_r+0x74e>
 8007ccc:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007cce:	2865      	cmp	r0, #101	; 0x65
 8007cd0:	f340 80aa 	ble.w	8007e28 <_svfprintf_r+0x978>
 8007cd4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f004 fb18 	bl	800c310 <__aeabi_dcmpeq>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	f000 8131 	beq.w	8007f48 <_svfprintf_r+0xa98>
 8007ce6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007ce8:	4b2f      	ldr	r3, [pc, #188]	; (8007da8 <_svfprintf_r+0x8f8>)
 8007cea:	3401      	adds	r4, #1
 8007cec:	6033      	str	r3, [r6, #0]
 8007cee:	3501      	adds	r5, #1
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	2c07      	cmp	r4, #7
 8007cf4:	6073      	str	r3, [r6, #4]
 8007cf6:	953b      	str	r5, [sp, #236]	; 0xec
 8007cf8:	943a      	str	r4, [sp, #232]	; 0xe8
 8007cfa:	f300 82b8 	bgt.w	800826e <_svfprintf_r+0xdbe>
 8007cfe:	3608      	adds	r6, #8
 8007d00:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8007d02:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d04:	4299      	cmp	r1, r3
 8007d06:	dc03      	bgt.n	8007d10 <_svfprintf_r+0x860>
 8007d08:	9a08      	ldr	r2, [sp, #32]
 8007d0a:	07d3      	lsls	r3, r2, #31
 8007d0c:	f57f af77 	bpl.w	8007bfe <_svfprintf_r+0x74e>
 8007d10:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007d12:	981a      	ldr	r0, [sp, #104]	; 0x68
 8007d14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d16:	6070      	str	r0, [r6, #4]
 8007d18:	3401      	adds	r4, #1
 8007d1a:	182d      	adds	r5, r5, r0
 8007d1c:	2c07      	cmp	r4, #7
 8007d1e:	6033      	str	r3, [r6, #0]
 8007d20:	953b      	str	r5, [sp, #236]	; 0xec
 8007d22:	943a      	str	r4, [sp, #232]	; 0xe8
 8007d24:	f300 8300 	bgt.w	8008328 <_svfprintf_r+0xe78>
 8007d28:	3608      	adds	r6, #8
 8007d2a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d2c:	1e4f      	subs	r7, r1, #1
 8007d2e:	2f00      	cmp	r7, #0
 8007d30:	f77f af65 	ble.w	8007bfe <_svfprintf_r+0x74e>
 8007d34:	2f10      	cmp	r7, #16
 8007d36:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007d38:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8007dac <_svfprintf_r+0x8fc>
 8007d3c:	ddb2      	ble.n	8007ca4 <_svfprintf_r+0x7f4>
 8007d3e:	4623      	mov	r3, r4
 8007d40:	f04f 0910 	mov.w	r9, #16
 8007d44:	4644      	mov	r4, r8
 8007d46:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007d4a:	e003      	b.n	8007d54 <_svfprintf_r+0x8a4>
 8007d4c:	3608      	adds	r6, #8
 8007d4e:	3f10      	subs	r7, #16
 8007d50:	2f10      	cmp	r7, #16
 8007d52:	dda5      	ble.n	8007ca0 <_svfprintf_r+0x7f0>
 8007d54:	3301      	adds	r3, #1
 8007d56:	3510      	adds	r5, #16
 8007d58:	2b07      	cmp	r3, #7
 8007d5a:	e886 0210 	stmia.w	r6, {r4, r9}
 8007d5e:	953b      	str	r5, [sp, #236]	; 0xec
 8007d60:	933a      	str	r3, [sp, #232]	; 0xe8
 8007d62:	ddf3      	ble.n	8007d4c <_svfprintf_r+0x89c>
 8007d64:	4640      	mov	r0, r8
 8007d66:	4651      	mov	r1, sl
 8007d68:	465a      	mov	r2, fp
 8007d6a:	f002 ff13 	bl	800ab94 <__ssprint_r>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f47f ac75 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007d74:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007d76:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8007d78:	ae1f      	add	r6, sp, #124	; 0x7c
 8007d7a:	e7e8      	b.n	8007d4e <_svfprintf_r+0x89e>
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	f040 80be 	bne.w	8007efe <_svfprintf_r+0xa4e>
 8007d82:	9808      	ldr	r0, [sp, #32]
 8007d84:	07c1      	lsls	r1, r0, #31
 8007d86:	bf5c      	itt	pl
 8007d88:	920d      	strpl	r2, [sp, #52]	; 0x34
 8007d8a:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8007d8e:	f57f acf3 	bpl.w	8007778 <_svfprintf_r+0x2c8>
 8007d92:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007d94:	2330      	movs	r3, #48	; 0x30
 8007d96:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 8007d9a:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8007d9e:	910d      	str	r1, [sp, #52]	; 0x34
 8007da0:	9211      	str	r2, [sp, #68]	; 0x44
 8007da2:	e4e9      	b.n	8007778 <_svfprintf_r+0x2c8>
 8007da4:	0800c75c 	.word	0x0800c75c
 8007da8:	0800c778 	.word	0x0800c778
 8007dac:	0800c58c 	.word	0x0800c58c
 8007db0:	0800c57c 	.word	0x0800c57c
 8007db4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007db6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007db8:	1a47      	subs	r7, r0, r1
 8007dba:	2f00      	cmp	r7, #0
 8007dbc:	f77f aed8 	ble.w	8007b70 <_svfprintf_r+0x6c0>
 8007dc0:	2f10      	cmp	r7, #16
 8007dc2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007dc4:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 80084a0 <_svfprintf_r+0xff0>
 8007dc8:	dd22      	ble.n	8007e10 <_svfprintf_r+0x960>
 8007dca:	4623      	mov	r3, r4
 8007dcc:	f04f 0910 	mov.w	r9, #16
 8007dd0:	4644      	mov	r4, r8
 8007dd2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007dd6:	e003      	b.n	8007de0 <_svfprintf_r+0x930>
 8007dd8:	3f10      	subs	r7, #16
 8007dda:	3608      	adds	r6, #8
 8007ddc:	2f10      	cmp	r7, #16
 8007dde:	dd15      	ble.n	8007e0c <_svfprintf_r+0x95c>
 8007de0:	3301      	adds	r3, #1
 8007de2:	3510      	adds	r5, #16
 8007de4:	2b07      	cmp	r3, #7
 8007de6:	e886 0210 	stmia.w	r6, {r4, r9}
 8007dea:	953b      	str	r5, [sp, #236]	; 0xec
 8007dec:	933a      	str	r3, [sp, #232]	; 0xe8
 8007dee:	ddf3      	ble.n	8007dd8 <_svfprintf_r+0x928>
 8007df0:	4640      	mov	r0, r8
 8007df2:	4651      	mov	r1, sl
 8007df4:	465a      	mov	r2, fp
 8007df6:	f002 fecd 	bl	800ab94 <__ssprint_r>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	f47f ac2f 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007e00:	3f10      	subs	r7, #16
 8007e02:	2f10      	cmp	r7, #16
 8007e04:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007e06:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8007e08:	ae1f      	add	r6, sp, #124	; 0x7c
 8007e0a:	dce9      	bgt.n	8007de0 <_svfprintf_r+0x930>
 8007e0c:	46a0      	mov	r8, r4
 8007e0e:	461c      	mov	r4, r3
 8007e10:	3401      	adds	r4, #1
 8007e12:	19ed      	adds	r5, r5, r7
 8007e14:	2c07      	cmp	r4, #7
 8007e16:	f8c6 8000 	str.w	r8, [r6]
 8007e1a:	6077      	str	r7, [r6, #4]
 8007e1c:	953b      	str	r5, [sp, #236]	; 0xec
 8007e1e:	943a      	str	r4, [sp, #232]	; 0xe8
 8007e20:	f300 81df 	bgt.w	80081e2 <_svfprintf_r+0xd32>
 8007e24:	3608      	adds	r6, #8
 8007e26:	e6a3      	b.n	8007b70 <_svfprintf_r+0x6c0>
 8007e28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e2a:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007e2c:	2a01      	cmp	r2, #1
 8007e2e:	f340 81a5 	ble.w	800817c <_svfprintf_r+0xccc>
 8007e32:	3401      	adds	r4, #1
 8007e34:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007e36:	3501      	adds	r5, #1
 8007e38:	2301      	movs	r3, #1
 8007e3a:	2c07      	cmp	r4, #7
 8007e3c:	6030      	str	r0, [r6, #0]
 8007e3e:	6073      	str	r3, [r6, #4]
 8007e40:	953b      	str	r5, [sp, #236]	; 0xec
 8007e42:	943a      	str	r4, [sp, #232]	; 0xe8
 8007e44:	f300 81c1 	bgt.w	80081ca <_svfprintf_r+0xd1a>
 8007e48:	3608      	adds	r6, #8
 8007e4a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007e4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e4e:	6071      	str	r1, [r6, #4]
 8007e50:	3401      	adds	r4, #1
 8007e52:	186d      	adds	r5, r5, r1
 8007e54:	2c07      	cmp	r4, #7
 8007e56:	6032      	str	r2, [r6, #0]
 8007e58:	953b      	str	r5, [sp, #236]	; 0xec
 8007e5a:	943a      	str	r4, [sp, #232]	; 0xe8
 8007e5c:	f300 81a9 	bgt.w	80081b2 <_svfprintf_r+0xd02>
 8007e60:	3608      	adds	r6, #8
 8007e62:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8007e66:	2200      	movs	r2, #0
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f004 fa51 	bl	800c310 <__aeabi_dcmpeq>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	f040 80f6 	bne.w	8008060 <_svfprintf_r+0xbb0>
 8007e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e76:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007e78:	1e5a      	subs	r2, r3, #1
 8007e7a:	3401      	adds	r4, #1
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	18ad      	adds	r5, r5, r2
 8007e80:	2c07      	cmp	r4, #7
 8007e82:	6033      	str	r3, [r6, #0]
 8007e84:	6072      	str	r2, [r6, #4]
 8007e86:	953b      	str	r5, [sp, #236]	; 0xec
 8007e88:	943a      	str	r4, [sp, #232]	; 0xe8
 8007e8a:	dc22      	bgt.n	8007ed2 <_svfprintf_r+0xa22>
 8007e8c:	3608      	adds	r6, #8
 8007e8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e90:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007e92:	3401      	adds	r4, #1
 8007e94:	18ed      	adds	r5, r5, r3
 8007e96:	2c07      	cmp	r4, #7
 8007e98:	ab3c      	add	r3, sp, #240	; 0xf0
 8007e9a:	6033      	str	r3, [r6, #0]
 8007e9c:	6070      	str	r0, [r6, #4]
 8007e9e:	953b      	str	r5, [sp, #236]	; 0xec
 8007ea0:	943a      	str	r4, [sp, #232]	; 0xe8
 8007ea2:	f77f aeab 	ble.w	8007bfc <_svfprintf_r+0x74c>
 8007ea6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007ea8:	4651      	mov	r1, sl
 8007eaa:	465a      	mov	r2, fp
 8007eac:	f002 fe72 	bl	800ab94 <__ssprint_r>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	f47f abd4 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007eb6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007eb8:	ae1f      	add	r6, sp, #124	; 0x7c
 8007eba:	e6a0      	b.n	8007bfe <_svfprintf_r+0x74e>
 8007ebc:	46a0      	mov	r8, r4
 8007ebe:	461c      	mov	r4, r3
 8007ec0:	3401      	adds	r4, #1
 8007ec2:	19ed      	adds	r5, r5, r7
 8007ec4:	2c07      	cmp	r4, #7
 8007ec6:	f8c6 8000 	str.w	r8, [r6]
 8007eca:	6077      	str	r7, [r6, #4]
 8007ecc:	953b      	str	r5, [sp, #236]	; 0xec
 8007ece:	943a      	str	r4, [sp, #232]	; 0xe8
 8007ed0:	dddc      	ble.n	8007e8c <_svfprintf_r+0x9dc>
 8007ed2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007ed4:	4651      	mov	r1, sl
 8007ed6:	465a      	mov	r2, fp
 8007ed8:	f002 fe5c 	bl	800ab94 <__ssprint_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f47f abbe 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007ee2:	ae1f      	add	r6, sp, #124	; 0x7c
 8007ee4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007ee6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007ee8:	e7d1      	b.n	8007e8e <_svfprintf_r+0x9de>
 8007eea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007eec:	4651      	mov	r1, sl
 8007eee:	465a      	mov	r2, fp
 8007ef0:	f002 fe50 	bl	800ab94 <__ssprint_r>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f43f aecf 	beq.w	8007c98 <_svfprintf_r+0x7e8>
 8007efa:	f7ff bbb0 	b.w	800765e <_svfprintf_r+0x1ae>
 8007efe:	910d      	str	r1, [sp, #52]	; 0x34
 8007f00:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007f04:	e438      	b.n	8007778 <_svfprintf_r+0x2c8>
 8007f06:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007f08:	4651      	mov	r1, sl
 8007f0a:	465a      	mov	r2, fp
 8007f0c:	f002 fe42 	bl	800ab94 <__ssprint_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	f47f aba4 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007f16:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007f18:	ae1f      	add	r6, sp, #124	; 0x7c
 8007f1a:	e661      	b.n	8007be0 <_svfprintf_r+0x730>
 8007f1c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007f1e:	4651      	mov	r1, sl
 8007f20:	465a      	mov	r2, fp
 8007f22:	f002 fe37 	bl	800ab94 <__ssprint_r>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f47f ab99 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007f2c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007f2e:	ae1f      	add	r6, sp, #124	; 0x7c
 8007f30:	e61a      	b.n	8007b68 <_svfprintf_r+0x6b8>
 8007f32:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007f34:	4651      	mov	r1, sl
 8007f36:	465a      	mov	r2, fp
 8007f38:	f002 fe2c 	bl	800ab94 <__ssprint_r>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	f47f ab8e 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007f42:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007f44:	ae1f      	add	r6, sp, #124	; 0x7c
 8007f46:	e600      	b.n	8007b4a <_svfprintf_r+0x69a>
 8007f48:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8007f4a:	2f00      	cmp	r7, #0
 8007f4c:	f340 819a 	ble.w	8008284 <_svfprintf_r+0xdd4>
 8007f50:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8007f52:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007f54:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007f56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f58:	4287      	cmp	r7, r0
 8007f5a:	bfa8      	it	ge
 8007f5c:	4607      	movge	r7, r0
 8007f5e:	1889      	adds	r1, r1, r2
 8007f60:	2f00      	cmp	r7, #0
 8007f62:	910d      	str	r1, [sp, #52]	; 0x34
 8007f64:	dd0b      	ble.n	8007f7e <_svfprintf_r+0xace>
 8007f66:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007f68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f6a:	6077      	str	r7, [r6, #4]
 8007f6c:	3401      	adds	r4, #1
 8007f6e:	19ed      	adds	r5, r5, r7
 8007f70:	2c07      	cmp	r4, #7
 8007f72:	6032      	str	r2, [r6, #0]
 8007f74:	953b      	str	r5, [sp, #236]	; 0xec
 8007f76:	943a      	str	r4, [sp, #232]	; 0xe8
 8007f78:	f300 8304 	bgt.w	8008584 <_svfprintf_r+0x10d4>
 8007f7c:	3608      	adds	r6, #8
 8007f7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f80:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8007f84:	1bdf      	subs	r7, r3, r7
 8007f86:	2f00      	cmp	r7, #0
 8007f88:	f340 80a0 	ble.w	80080cc <_svfprintf_r+0xc1c>
 8007f8c:	2f10      	cmp	r7, #16
 8007f8e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8007f90:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 80084a0 <_svfprintf_r+0xff0>
 8007f94:	f340 815f 	ble.w	8008256 <_svfprintf_r+0xda6>
 8007f98:	4623      	mov	r3, r4
 8007f9a:	f04f 0910 	mov.w	r9, #16
 8007f9e:	4644      	mov	r4, r8
 8007fa0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007fa4:	e004      	b.n	8007fb0 <_svfprintf_r+0xb00>
 8007fa6:	3608      	adds	r6, #8
 8007fa8:	3f10      	subs	r7, #16
 8007faa:	2f10      	cmp	r7, #16
 8007fac:	f340 8151 	ble.w	8008252 <_svfprintf_r+0xda2>
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	3510      	adds	r5, #16
 8007fb4:	2b07      	cmp	r3, #7
 8007fb6:	e886 0210 	stmia.w	r6, {r4, r9}
 8007fba:	953b      	str	r5, [sp, #236]	; 0xec
 8007fbc:	933a      	str	r3, [sp, #232]	; 0xe8
 8007fbe:	ddf2      	ble.n	8007fa6 <_svfprintf_r+0xaf6>
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	4651      	mov	r1, sl
 8007fc4:	465a      	mov	r2, fp
 8007fc6:	f002 fde5 	bl	800ab94 <__ssprint_r>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	f47f ab47 	bne.w	800765e <_svfprintf_r+0x1ae>
 8007fd0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8007fd2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8007fd4:	ae1f      	add	r6, sp, #124	; 0x7c
 8007fd6:	e7e7      	b.n	8007fa8 <_svfprintf_r+0xaf8>
 8007fd8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007fda:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8007fde:	f003 000f 	and.w	r0, r3, #15
 8007fe2:	460a      	mov	r2, r1
 8007fe4:	5c28      	ldrb	r0, [r5, r0]
 8007fe6:	3901      	subs	r1, #1
 8007fe8:	091b      	lsrs	r3, r3, #4
 8007fea:	7010      	strb	r0, [r2, #0]
 8007fec:	d1f7      	bne.n	8007fde <_svfprintf_r+0xb2e>
 8007fee:	ebc2 030b 	rsb	r3, r2, fp
 8007ff2:	9211      	str	r2, [sp, #68]	; 0x44
 8007ff4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ff6:	f7ff bbbf 	b.w	8007778 <_svfprintf_r+0x2c8>
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	bf82      	ittt	hi
 8007ffe:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 8008002:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 8008006:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 800800a:	d809      	bhi.n	8008020 <_svfprintf_r+0xb70>
 800800c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800800e:	3330      	adds	r3, #48	; 0x30
 8008010:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 8008014:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8008018:	900d      	str	r0, [sp, #52]	; 0x34
 800801a:	9111      	str	r1, [sp, #68]	; 0x44
 800801c:	f7ff bbac 	b.w	8007778 <_svfprintf_r+0x2c8>
 8008020:	fba5 0203 	umull	r0, r2, r5, r3
 8008024:	08d2      	lsrs	r2, r2, #3
 8008026:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 800802a:	4608      	mov	r0, r1
 800802c:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 8008030:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008034:	7001      	strb	r1, [r0, #0]
 8008036:	4613      	mov	r3, r2
 8008038:	1e41      	subs	r1, r0, #1
 800803a:	2a00      	cmp	r2, #0
 800803c:	d1f0      	bne.n	8008020 <_svfprintf_r+0xb70>
 800803e:	ebc0 030b 	rsb	r3, r0, fp
 8008042:	9011      	str	r0, [sp, #68]	; 0x44
 8008044:	930d      	str	r3, [sp, #52]	; 0x34
 8008046:	f7ff bb97 	b.w	8007778 <_svfprintf_r+0x2c8>
 800804a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800804c:	4651      	mov	r1, sl
 800804e:	465a      	mov	r2, fp
 8008050:	f002 fda0 	bl	800ab94 <__ssprint_r>
 8008054:	2800      	cmp	r0, #0
 8008056:	f47f ab02 	bne.w	800765e <_svfprintf_r+0x1ae>
 800805a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800805c:	ae1f      	add	r6, sp, #124	; 0x7c
 800805e:	e563      	b.n	8007b28 <_svfprintf_r+0x678>
 8008060:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008062:	1e4f      	subs	r7, r1, #1
 8008064:	2f00      	cmp	r7, #0
 8008066:	f77f af12 	ble.w	8007e8e <_svfprintf_r+0x9de>
 800806a:	2f10      	cmp	r7, #16
 800806c:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 80084a0 <_svfprintf_r+0xff0>
 8008070:	f77f af26 	ble.w	8007ec0 <_svfprintf_r+0xa10>
 8008074:	4623      	mov	r3, r4
 8008076:	f04f 0910 	mov.w	r9, #16
 800807a:	4644      	mov	r4, r8
 800807c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8008080:	e004      	b.n	800808c <_svfprintf_r+0xbdc>
 8008082:	3608      	adds	r6, #8
 8008084:	3f10      	subs	r7, #16
 8008086:	2f10      	cmp	r7, #16
 8008088:	f77f af18 	ble.w	8007ebc <_svfprintf_r+0xa0c>
 800808c:	3301      	adds	r3, #1
 800808e:	3510      	adds	r5, #16
 8008090:	2b07      	cmp	r3, #7
 8008092:	e886 0210 	stmia.w	r6, {r4, r9}
 8008096:	953b      	str	r5, [sp, #236]	; 0xec
 8008098:	933a      	str	r3, [sp, #232]	; 0xe8
 800809a:	ddf2      	ble.n	8008082 <_svfprintf_r+0xbd2>
 800809c:	4640      	mov	r0, r8
 800809e:	4651      	mov	r1, sl
 80080a0:	465a      	mov	r2, fp
 80080a2:	f002 fd77 	bl	800ab94 <__ssprint_r>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	f47f aad9 	bne.w	800765e <_svfprintf_r+0x1ae>
 80080ac:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80080ae:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80080b0:	ae1f      	add	r6, sp, #124	; 0x7c
 80080b2:	e7e7      	b.n	8008084 <_svfprintf_r+0xbd4>
 80080b4:	2202      	movs	r2, #2
 80080b6:	e405      	b.n	80078c4 <_svfprintf_r+0x414>
 80080b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80080ba:	4651      	mov	r1, sl
 80080bc:	465a      	mov	r2, fp
 80080be:	f002 fd69 	bl	800ab94 <__ssprint_r>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	f47f aacb 	bne.w	800765e <_svfprintf_r+0x1ae>
 80080c8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80080ca:	ae1f      	add	r6, sp, #124	; 0x7c
 80080cc:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80080ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80080d0:	4298      	cmp	r0, r3
 80080d2:	dc45      	bgt.n	8008160 <_svfprintf_r+0xcb0>
 80080d4:	9908      	ldr	r1, [sp, #32]
 80080d6:	07c9      	lsls	r1, r1, #31
 80080d8:	d442      	bmi.n	8008160 <_svfprintf_r+0xcb0>
 80080da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80080dc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80080de:	180a      	adds	r2, r1, r0
 80080e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80080e4:	1a8f      	subs	r7, r1, r2
 80080e6:	1ac3      	subs	r3, r0, r3
 80080e8:	42bb      	cmp	r3, r7
 80080ea:	bfb8      	it	lt
 80080ec:	461f      	movlt	r7, r3
 80080ee:	2f00      	cmp	r7, #0
 80080f0:	dd0a      	ble.n	8008108 <_svfprintf_r+0xc58>
 80080f2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80080f4:	6032      	str	r2, [r6, #0]
 80080f6:	3401      	adds	r4, #1
 80080f8:	19ed      	adds	r5, r5, r7
 80080fa:	2c07      	cmp	r4, #7
 80080fc:	6077      	str	r7, [r6, #4]
 80080fe:	953b      	str	r5, [sp, #236]	; 0xec
 8008100:	943a      	str	r4, [sp, #232]	; 0xe8
 8008102:	f300 8256 	bgt.w	80085b2 <_svfprintf_r+0x1102>
 8008106:	3608      	adds	r6, #8
 8008108:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800810c:	1bdf      	subs	r7, r3, r7
 800810e:	2f00      	cmp	r7, #0
 8008110:	f77f ad75 	ble.w	8007bfe <_svfprintf_r+0x74e>
 8008114:	2f10      	cmp	r7, #16
 8008116:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008118:	f8df 8384 	ldr.w	r8, [pc, #900]	; 80084a0 <_svfprintf_r+0xff0>
 800811c:	f77f adc2 	ble.w	8007ca4 <_svfprintf_r+0x7f4>
 8008120:	4623      	mov	r3, r4
 8008122:	f04f 0910 	mov.w	r9, #16
 8008126:	4644      	mov	r4, r8
 8008128:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800812c:	e004      	b.n	8008138 <_svfprintf_r+0xc88>
 800812e:	3608      	adds	r6, #8
 8008130:	3f10      	subs	r7, #16
 8008132:	2f10      	cmp	r7, #16
 8008134:	f77f adb4 	ble.w	8007ca0 <_svfprintf_r+0x7f0>
 8008138:	3301      	adds	r3, #1
 800813a:	3510      	adds	r5, #16
 800813c:	2b07      	cmp	r3, #7
 800813e:	e886 0210 	stmia.w	r6, {r4, r9}
 8008142:	953b      	str	r5, [sp, #236]	; 0xec
 8008144:	933a      	str	r3, [sp, #232]	; 0xe8
 8008146:	ddf2      	ble.n	800812e <_svfprintf_r+0xc7e>
 8008148:	4640      	mov	r0, r8
 800814a:	4651      	mov	r1, sl
 800814c:	465a      	mov	r2, fp
 800814e:	f002 fd21 	bl	800ab94 <__ssprint_r>
 8008152:	2800      	cmp	r0, #0
 8008154:	f47f aa83 	bne.w	800765e <_svfprintf_r+0x1ae>
 8008158:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800815a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800815c:	ae1f      	add	r6, sp, #124	; 0x7c
 800815e:	e7e7      	b.n	8008130 <_svfprintf_r+0xc80>
 8008160:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008162:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008164:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008166:	6070      	str	r0, [r6, #4]
 8008168:	3401      	adds	r4, #1
 800816a:	182d      	adds	r5, r5, r0
 800816c:	2c07      	cmp	r4, #7
 800816e:	6032      	str	r2, [r6, #0]
 8008170:	953b      	str	r5, [sp, #236]	; 0xec
 8008172:	943a      	str	r4, [sp, #232]	; 0xe8
 8008174:	f300 8211 	bgt.w	800859a <_svfprintf_r+0x10ea>
 8008178:	3608      	adds	r6, #8
 800817a:	e7ae      	b.n	80080da <_svfprintf_r+0xc2a>
 800817c:	9b08      	ldr	r3, [sp, #32]
 800817e:	07da      	lsls	r2, r3, #31
 8008180:	f53f ae57 	bmi.w	8007e32 <_svfprintf_r+0x982>
 8008184:	3401      	adds	r4, #1
 8008186:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008188:	3501      	adds	r5, #1
 800818a:	2301      	movs	r3, #1
 800818c:	2c07      	cmp	r4, #7
 800818e:	6032      	str	r2, [r6, #0]
 8008190:	6073      	str	r3, [r6, #4]
 8008192:	953b      	str	r5, [sp, #236]	; 0xec
 8008194:	943a      	str	r4, [sp, #232]	; 0xe8
 8008196:	f77f ae79 	ble.w	8007e8c <_svfprintf_r+0x9dc>
 800819a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800819c:	4651      	mov	r1, sl
 800819e:	465a      	mov	r2, fp
 80081a0:	f002 fcf8 	bl	800ab94 <__ssprint_r>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	f47f aa5a 	bne.w	800765e <_svfprintf_r+0x1ae>
 80081aa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80081ac:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80081ae:	ae1f      	add	r6, sp, #124	; 0x7c
 80081b0:	e66d      	b.n	8007e8e <_svfprintf_r+0x9de>
 80081b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80081b4:	4651      	mov	r1, sl
 80081b6:	465a      	mov	r2, fp
 80081b8:	f002 fcec 	bl	800ab94 <__ssprint_r>
 80081bc:	2800      	cmp	r0, #0
 80081be:	f47f aa4e 	bne.w	800765e <_svfprintf_r+0x1ae>
 80081c2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80081c4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80081c6:	ae1f      	add	r6, sp, #124	; 0x7c
 80081c8:	e64b      	b.n	8007e62 <_svfprintf_r+0x9b2>
 80081ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80081cc:	4651      	mov	r1, sl
 80081ce:	465a      	mov	r2, fp
 80081d0:	f002 fce0 	bl	800ab94 <__ssprint_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f47f aa42 	bne.w	800765e <_svfprintf_r+0x1ae>
 80081da:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80081dc:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80081de:	ae1f      	add	r6, sp, #124	; 0x7c
 80081e0:	e633      	b.n	8007e4a <_svfprintf_r+0x99a>
 80081e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80081e4:	4651      	mov	r1, sl
 80081e6:	465a      	mov	r2, fp
 80081e8:	f002 fcd4 	bl	800ab94 <__ssprint_r>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	f47f aa36 	bne.w	800765e <_svfprintf_r+0x1ae>
 80081f2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80081f4:	ae1f      	add	r6, sp, #124	; 0x7c
 80081f6:	e4bb      	b.n	8007b70 <_svfprintf_r+0x6c0>
 80081f8:	f002 fb64 	bl	800a8c4 <__fpclassifyd>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	f040 809e 	bne.w	800833e <_svfprintf_r+0xe8e>
 8008202:	2203      	movs	r2, #3
 8008204:	9012      	str	r0, [sp, #72]	; 0x48
 8008206:	4ba3      	ldr	r3, [pc, #652]	; (8008494 <_svfprintf_r+0xfe4>)
 8008208:	920a      	str	r2, [sp, #40]	; 0x28
 800820a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800820c:	4aa2      	ldr	r2, [pc, #648]	; (8008498 <_svfprintf_r+0xfe8>)
 800820e:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8008212:	2847      	cmp	r0, #71	; 0x47
 8008214:	bfd8      	it	le
 8008216:	461a      	movle	r2, r3
 8008218:	9211      	str	r2, [sp, #68]	; 0x44
 800821a:	2303      	movs	r3, #3
 800821c:	9a08      	ldr	r2, [sp, #32]
 800821e:	930d      	str	r3, [sp, #52]	; 0x34
 8008220:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008226:	9208      	str	r2, [sp, #32]
 8008228:	9316      	str	r3, [sp, #88]	; 0x58
 800822a:	f7ff baaf 	b.w	800778c <_svfprintf_r+0x2dc>
 800822e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008230:	2201      	movs	r2, #1
 8008232:	680b      	ldr	r3, [r1, #0]
 8008234:	e414      	b.n	8007a60 <_svfprintf_r+0x5b0>
 8008236:	9b08      	ldr	r3, [sp, #32]
 8008238:	065f      	lsls	r7, r3, #25
 800823a:	d56d      	bpl.n	8008318 <_svfprintf_r+0xe68>
 800823c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800823e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008240:	6803      	ldr	r3, [r0, #0]
 8008242:	3004      	adds	r0, #4
 8008244:	900e      	str	r0, [sp, #56]	; 0x38
 8008246:	8019      	strh	r1, [r3, #0]
 8008248:	f7ff b960 	b.w	800750c <_svfprintf_r+0x5c>
 800824c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800824e:	680b      	ldr	r3, [r1, #0]
 8008250:	e406      	b.n	8007a60 <_svfprintf_r+0x5b0>
 8008252:	46a0      	mov	r8, r4
 8008254:	461c      	mov	r4, r3
 8008256:	3401      	adds	r4, #1
 8008258:	19ed      	adds	r5, r5, r7
 800825a:	2c07      	cmp	r4, #7
 800825c:	f8c6 8000 	str.w	r8, [r6]
 8008260:	6077      	str	r7, [r6, #4]
 8008262:	953b      	str	r5, [sp, #236]	; 0xec
 8008264:	943a      	str	r4, [sp, #232]	; 0xe8
 8008266:	f73f af27 	bgt.w	80080b8 <_svfprintf_r+0xc08>
 800826a:	3608      	adds	r6, #8
 800826c:	e72e      	b.n	80080cc <_svfprintf_r+0xc1c>
 800826e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008270:	4651      	mov	r1, sl
 8008272:	465a      	mov	r2, fp
 8008274:	f002 fc8e 	bl	800ab94 <__ssprint_r>
 8008278:	2800      	cmp	r0, #0
 800827a:	f47f a9f0 	bne.w	800765e <_svfprintf_r+0x1ae>
 800827e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008280:	ae1f      	add	r6, sp, #124	; 0x7c
 8008282:	e53d      	b.n	8007d00 <_svfprintf_r+0x850>
 8008284:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008286:	4b85      	ldr	r3, [pc, #532]	; (800849c <_svfprintf_r+0xfec>)
 8008288:	3401      	adds	r4, #1
 800828a:	6033      	str	r3, [r6, #0]
 800828c:	3501      	adds	r5, #1
 800828e:	2301      	movs	r3, #1
 8008290:	2c07      	cmp	r4, #7
 8008292:	6073      	str	r3, [r6, #4]
 8008294:	953b      	str	r5, [sp, #236]	; 0xec
 8008296:	943a      	str	r4, [sp, #232]	; 0xe8
 8008298:	f300 8139 	bgt.w	800850e <_svfprintf_r+0x105e>
 800829c:	3608      	adds	r6, #8
 800829e:	b92f      	cbnz	r7, 80082ac <_svfprintf_r+0xdfc>
 80082a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082a2:	b91a      	cbnz	r2, 80082ac <_svfprintf_r+0xdfc>
 80082a4:	9b08      	ldr	r3, [sp, #32]
 80082a6:	07d8      	lsls	r0, r3, #31
 80082a8:	f57f aca9 	bpl.w	8007bfe <_svfprintf_r+0x74e>
 80082ac:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80082ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80082b0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80082b2:	6071      	str	r1, [r6, #4]
 80082b4:	3401      	adds	r4, #1
 80082b6:	186d      	adds	r5, r5, r1
 80082b8:	2c07      	cmp	r4, #7
 80082ba:	6030      	str	r0, [r6, #0]
 80082bc:	953b      	str	r5, [sp, #236]	; 0xec
 80082be:	943a      	str	r4, [sp, #232]	; 0xe8
 80082c0:	f300 81d2 	bgt.w	8008668 <_svfprintf_r+0x11b8>
 80082c4:	3608      	adds	r6, #8
 80082c6:	427f      	negs	r7, r7
 80082c8:	2f00      	cmp	r7, #0
 80082ca:	f340 8141 	ble.w	8008550 <_svfprintf_r+0x10a0>
 80082ce:	2f10      	cmp	r7, #16
 80082d0:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80084a0 <_svfprintf_r+0xff0>
 80082d4:	f340 8183 	ble.w	80085de <_svfprintf_r+0x112e>
 80082d8:	4623      	mov	r3, r4
 80082da:	f04f 0910 	mov.w	r9, #16
 80082de:	4644      	mov	r4, r8
 80082e0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80082e4:	e004      	b.n	80082f0 <_svfprintf_r+0xe40>
 80082e6:	3608      	adds	r6, #8
 80082e8:	3f10      	subs	r7, #16
 80082ea:	2f10      	cmp	r7, #16
 80082ec:	f340 8175 	ble.w	80085da <_svfprintf_r+0x112a>
 80082f0:	3301      	adds	r3, #1
 80082f2:	3510      	adds	r5, #16
 80082f4:	2b07      	cmp	r3, #7
 80082f6:	e886 0210 	stmia.w	r6, {r4, r9}
 80082fa:	953b      	str	r5, [sp, #236]	; 0xec
 80082fc:	933a      	str	r3, [sp, #232]	; 0xe8
 80082fe:	ddf2      	ble.n	80082e6 <_svfprintf_r+0xe36>
 8008300:	4640      	mov	r0, r8
 8008302:	4651      	mov	r1, sl
 8008304:	465a      	mov	r2, fp
 8008306:	f002 fc45 	bl	800ab94 <__ssprint_r>
 800830a:	2800      	cmp	r0, #0
 800830c:	f47f a9a7 	bne.w	800765e <_svfprintf_r+0x1ae>
 8008310:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008312:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8008314:	ae1f      	add	r6, sp, #124	; 0x7c
 8008316:	e7e7      	b.n	80082e8 <_svfprintf_r+0xe38>
 8008318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800831a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800831c:	6813      	ldr	r3, [r2, #0]
 800831e:	3204      	adds	r2, #4
 8008320:	920e      	str	r2, [sp, #56]	; 0x38
 8008322:	6018      	str	r0, [r3, #0]
 8008324:	f7ff b8f2 	b.w	800750c <_svfprintf_r+0x5c>
 8008328:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800832a:	4651      	mov	r1, sl
 800832c:	465a      	mov	r2, fp
 800832e:	f002 fc31 	bl	800ab94 <__ssprint_r>
 8008332:	2800      	cmp	r0, #0
 8008334:	f47f a993 	bne.w	800765e <_svfprintf_r+0x1ae>
 8008338:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800833a:	ae1f      	add	r6, sp, #124	; 0x7c
 800833c:	e4f5      	b.n	8007d2a <_svfprintf_r+0x87a>
 800833e:	1c60      	adds	r0, r4, #1
 8008340:	f000 80f1 	beq.w	8008526 <_svfprintf_r+0x1076>
 8008344:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008346:	2967      	cmp	r1, #103	; 0x67
 8008348:	bf18      	it	ne
 800834a:	2947      	cmpne	r1, #71	; 0x47
 800834c:	bf14      	ite	ne
 800834e:	2300      	movne	r3, #0
 8008350:	2301      	moveq	r3, #1
 8008352:	bf18      	it	ne
 8008354:	930a      	strne	r3, [sp, #40]	; 0x28
 8008356:	d104      	bne.n	8008362 <_svfprintf_r+0xeb2>
 8008358:	2c00      	cmp	r4, #0
 800835a:	f000 81ad 	beq.w	80086b8 <_svfprintf_r+0x1208>
 800835e:	2201      	movs	r2, #1
 8008360:	920a      	str	r2, [sp, #40]	; 0x28
 8008362:	9808      	ldr	r0, [sp, #32]
 8008364:	2d00      	cmp	r5, #0
 8008366:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800836a:	9008      	str	r0, [sp, #32]
 800836c:	f2c0 8189 	blt.w	8008682 <_svfprintf_r+0x11d2>
 8008370:	2200      	movs	r2, #0
 8008372:	9212      	str	r2, [sp, #72]	; 0x48
 8008374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008376:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008378:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 800837c:	424b      	negs	r3, r1
 800837e:	eb43 0301 	adc.w	r3, r3, r1
 8008382:	469c      	mov	ip, r3
 8008384:	2846      	cmp	r0, #70	; 0x46
 8008386:	bf08      	it	eq
 8008388:	f04c 0c01 	orreq.w	ip, ip, #1
 800838c:	930d      	str	r3, [sp, #52]	; 0x34
 800838e:	46a1      	mov	r9, r4
 8008390:	2103      	movs	r1, #3
 8008392:	f1bc 0f00 	cmp.w	ip, #0
 8008396:	d107      	bne.n	80083a8 <_svfprintf_r+0xef8>
 8008398:	2865      	cmp	r0, #101	; 0x65
 800839a:	bf18      	it	ne
 800839c:	2845      	cmpne	r0, #69	; 0x45
 800839e:	bf0c      	ite	eq
 80083a0:	f104 0901 	addeq.w	r9, r4, #1
 80083a4:	46a1      	movne	r9, r4
 80083a6:	2102      	movs	r1, #2
 80083a8:	e88d 0202 	stmia.w	sp, {r1, r9}
 80083ac:	a940      	add	r1, sp, #256	; 0x100
 80083ae:	9102      	str	r1, [sp, #8]
 80083b0:	a941      	add	r1, sp, #260	; 0x104
 80083b2:	9103      	str	r1, [sp, #12]
 80083b4:	4642      	mov	r2, r8
 80083b6:	a942      	add	r1, sp, #264	; 0x108
 80083b8:	462b      	mov	r3, r5
 80083ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80083bc:	9104      	str	r1, [sp, #16]
 80083be:	f8cd c018 	str.w	ip, [sp, #24]
 80083c2:	f000 fa6d 	bl	80088a0 <_dtoa_r>
 80083c6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80083c8:	9011      	str	r0, [sp, #68]	; 0x44
 80083ca:	2947      	cmp	r1, #71	; 0x47
 80083cc:	bf18      	it	ne
 80083ce:	2967      	cmpne	r1, #103	; 0x67
 80083d0:	f8dd c018 	ldr.w	ip, [sp, #24]
 80083d4:	d104      	bne.n	80083e0 <_svfprintf_r+0xf30>
 80083d6:	9a08      	ldr	r2, [sp, #32]
 80083d8:	07d2      	lsls	r2, r2, #31
 80083da:	bf58      	it	pl
 80083dc:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 80083de:	d515      	bpl.n	800840c <_svfprintf_r+0xf5c>
 80083e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083e2:	eb03 0709 	add.w	r7, r3, r9
 80083e6:	f1bc 0f00 	cmp.w	ip, #0
 80083ea:	d005      	beq.n	80083f8 <_svfprintf_r+0xf48>
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b30      	cmp	r3, #48	; 0x30
 80083f0:	f000 8165 	beq.w	80086be <_svfprintf_r+0x120e>
 80083f4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80083f6:	18ff      	adds	r7, r7, r3
 80083f8:	4640      	mov	r0, r8
 80083fa:	4629      	mov	r1, r5
 80083fc:	2200      	movs	r2, #0
 80083fe:	2300      	movs	r3, #0
 8008400:	f003 ff86 	bl	800c310 <__aeabi_dcmpeq>
 8008404:	2800      	cmp	r0, #0
 8008406:	f000 8117 	beq.w	8008638 <_svfprintf_r+0x1188>
 800840a:	9742      	str	r7, [sp, #264]	; 0x108
 800840c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800840e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008410:	1a3f      	subs	r7, r7, r0
 8008412:	9710      	str	r7, [sp, #64]	; 0x40
 8008414:	2900      	cmp	r1, #0
 8008416:	f000 80f9 	beq.w	800860c <_svfprintf_r+0x115c>
 800841a:	9940      	ldr	r1, [sp, #256]	; 0x100
 800841c:	1ccb      	adds	r3, r1, #3
 800841e:	db02      	blt.n	8008426 <_svfprintf_r+0xf76>
 8008420:	428c      	cmp	r4, r1
 8008422:	f280 80fa 	bge.w	800861a <_svfprintf_r+0x116a>
 8008426:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008428:	3a02      	subs	r2, #2
 800842a:	9215      	str	r2, [sp, #84]	; 0x54
 800842c:	3901      	subs	r1, #1
 800842e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008430:	9140      	str	r1, [sp, #256]	; 0x100
 8008432:	2900      	cmp	r1, #0
 8008434:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8008438:	f2c0 815d 	blt.w	80086f6 <_svfprintf_r+0x1246>
 800843c:	232b      	movs	r3, #43	; 0x2b
 800843e:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8008442:	2909      	cmp	r1, #9
 8008444:	f340 8122 	ble.w	800868c <_svfprintf_r+0x11dc>
 8008448:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 800844c:	f246 6467 	movw	r4, #26215	; 0x6667
 8008450:	4638      	mov	r0, r7
 8008452:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8008456:	fb84 3201 	smull	r3, r2, r4, r1
 800845a:	17cb      	asrs	r3, r1, #31
 800845c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8008460:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008464:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8008468:	3230      	adds	r2, #48	; 0x30
 800846a:	2b09      	cmp	r3, #9
 800846c:	4605      	mov	r5, r0
 800846e:	4619      	mov	r1, r3
 8008470:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8008474:	dcef      	bgt.n	8008456 <_svfprintf_r+0xfa6>
 8008476:	3130      	adds	r1, #48	; 0x30
 8008478:	1eaa      	subs	r2, r5, #2
 800847a:	b2c9      	uxtb	r1, r1
 800847c:	42ba      	cmp	r2, r7
 800847e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8008482:	bf28      	it	cs
 8008484:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8008488:	d213      	bcs.n	80084b2 <_svfprintf_r+0x1002>
 800848a:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 800848e:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8008492:	e009      	b.n	80084a8 <_svfprintf_r+0xff8>
 8008494:	0800c740 	.word	0x0800c740
 8008498:	0800c744 	.word	0x0800c744
 800849c:	0800c778 	.word	0x0800c778
 80084a0:	0800c58c 	.word	0x0800c58c
 80084a4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80084a8:	f803 1b01 	strb.w	r1, [r3], #1
 80084ac:	4282      	cmp	r2, r0
 80084ae:	4619      	mov	r1, r3
 80084b0:	d1f8      	bne.n	80084a4 <_svfprintf_r+0xff4>
 80084b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084b4:	ab3c      	add	r3, sp, #240	; 0xf0
 80084b6:	1acb      	subs	r3, r1, r3
 80084b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80084ba:	2801      	cmp	r0, #1
 80084bc:	4403      	add	r3, r0
 80084be:	930d      	str	r3, [sp, #52]	; 0x34
 80084c0:	f340 8125 	ble.w	800870e <_svfprintf_r+0x125e>
 80084c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084c6:	3301      	adds	r3, #1
 80084c8:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 80084cc:	2100      	movs	r1, #0
 80084ce:	930d      	str	r3, [sp, #52]	; 0x34
 80084d0:	900a      	str	r0, [sp, #40]	; 0x28
 80084d2:	9116      	str	r1, [sp, #88]	; 0x58
 80084d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084d6:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f43f a956 	beq.w	800778c <_svfprintf_r+0x2dc>
 80084e0:	232d      	movs	r3, #45	; 0x2d
 80084e2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80084e6:	2300      	movs	r3, #0
 80084e8:	9312      	str	r3, [sp, #72]	; 0x48
 80084ea:	f7ff b950 	b.w	800778e <_svfprintf_r+0x2de>
 80084ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80084f0:	2140      	movs	r1, #64	; 0x40
 80084f2:	f001 fa59 	bl	80099a8 <_malloc_r>
 80084f6:	f8ca 0000 	str.w	r0, [sl]
 80084fa:	f8ca 0010 	str.w	r0, [sl, #16]
 80084fe:	2800      	cmp	r0, #0
 8008500:	f000 812b 	beq.w	800875a <_svfprintf_r+0x12aa>
 8008504:	2340      	movs	r3, #64	; 0x40
 8008506:	f8ca 3014 	str.w	r3, [sl, #20]
 800850a:	f7fe bfec 	b.w	80074e6 <_svfprintf_r+0x36>
 800850e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008510:	4651      	mov	r1, sl
 8008512:	465a      	mov	r2, fp
 8008514:	f002 fb3e 	bl	800ab94 <__ssprint_r>
 8008518:	2800      	cmp	r0, #0
 800851a:	f47f a8a0 	bne.w	800765e <_svfprintf_r+0x1ae>
 800851e:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8008520:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008522:	ae1f      	add	r6, sp, #124	; 0x7c
 8008524:	e6bb      	b.n	800829e <_svfprintf_r+0xdee>
 8008526:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008528:	2847      	cmp	r0, #71	; 0x47
 800852a:	bf18      	it	ne
 800852c:	2867      	cmpne	r0, #103	; 0x67
 800852e:	bf14      	ite	ne
 8008530:	2000      	movne	r0, #0
 8008532:	2001      	moveq	r0, #1
 8008534:	900a      	str	r0, [sp, #40]	; 0x28
 8008536:	2406      	movs	r4, #6
 8008538:	e713      	b.n	8008362 <_svfprintf_r+0xeb2>
 800853a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800853c:	4651      	mov	r1, sl
 800853e:	465a      	mov	r2, fp
 8008540:	f002 fb28 	bl	800ab94 <__ssprint_r>
 8008544:	2800      	cmp	r0, #0
 8008546:	f47f a88a 	bne.w	800765e <_svfprintf_r+0x1ae>
 800854a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800854c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800854e:	ae1f      	add	r6, sp, #124	; 0x7c
 8008550:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008552:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008554:	6072      	str	r2, [r6, #4]
 8008556:	3401      	adds	r4, #1
 8008558:	18ad      	adds	r5, r5, r2
 800855a:	2c07      	cmp	r4, #7
 800855c:	6033      	str	r3, [r6, #0]
 800855e:	953b      	str	r5, [sp, #236]	; 0xec
 8008560:	943a      	str	r4, [sp, #232]	; 0xe8
 8008562:	f77f ab4b 	ble.w	8007bfc <_svfprintf_r+0x74c>
 8008566:	f7ff bba6 	b.w	8007cb6 <_svfprintf_r+0x806>
 800856a:	f002 fae3 	bl	800ab34 <strlen>
 800856e:	900d      	str	r0, [sp, #52]	; 0x34
 8008570:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008574:	9512      	str	r5, [sp, #72]	; 0x48
 8008576:	900a      	str	r0, [sp, #40]	; 0x28
 8008578:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800857c:	970e      	str	r7, [sp, #56]	; 0x38
 800857e:	9516      	str	r5, [sp, #88]	; 0x58
 8008580:	f7ff b904 	b.w	800778c <_svfprintf_r+0x2dc>
 8008584:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008586:	4651      	mov	r1, sl
 8008588:	465a      	mov	r2, fp
 800858a:	f002 fb03 	bl	800ab94 <__ssprint_r>
 800858e:	2800      	cmp	r0, #0
 8008590:	f47f a865 	bne.w	800765e <_svfprintf_r+0x1ae>
 8008594:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8008596:	ae1f      	add	r6, sp, #124	; 0x7c
 8008598:	e4f1      	b.n	8007f7e <_svfprintf_r+0xace>
 800859a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800859c:	4651      	mov	r1, sl
 800859e:	465a      	mov	r2, fp
 80085a0:	f002 faf8 	bl	800ab94 <__ssprint_r>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f47f a85a 	bne.w	800765e <_svfprintf_r+0x1ae>
 80085aa:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80085ac:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80085ae:	ae1f      	add	r6, sp, #124	; 0x7c
 80085b0:	e593      	b.n	80080da <_svfprintf_r+0xc2a>
 80085b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80085b4:	4651      	mov	r1, sl
 80085b6:	465a      	mov	r2, fp
 80085b8:	f002 faec 	bl	800ab94 <__ssprint_r>
 80085bc:	2800      	cmp	r0, #0
 80085be:	f47f a84e 	bne.w	800765e <_svfprintf_r+0x1ae>
 80085c2:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80085c4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80085c6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80085c8:	1acb      	subs	r3, r1, r3
 80085ca:	ae1f      	add	r6, sp, #124	; 0x7c
 80085cc:	e59c      	b.n	8008108 <_svfprintf_r+0xc58>
 80085ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085d0:	ebc3 030b 	rsb	r3, r3, fp
 80085d4:	930d      	str	r3, [sp, #52]	; 0x34
 80085d6:	f7ff b8cf 	b.w	8007778 <_svfprintf_r+0x2c8>
 80085da:	46a0      	mov	r8, r4
 80085dc:	461c      	mov	r4, r3
 80085de:	3401      	adds	r4, #1
 80085e0:	19ed      	adds	r5, r5, r7
 80085e2:	2c07      	cmp	r4, #7
 80085e4:	f8c6 8000 	str.w	r8, [r6]
 80085e8:	6077      	str	r7, [r6, #4]
 80085ea:	953b      	str	r5, [sp, #236]	; 0xec
 80085ec:	943a      	str	r4, [sp, #232]	; 0xe8
 80085ee:	dca4      	bgt.n	800853a <_svfprintf_r+0x108a>
 80085f0:	3608      	adds	r6, #8
 80085f2:	e7ad      	b.n	8008550 <_svfprintf_r+0x10a0>
 80085f4:	2c06      	cmp	r4, #6
 80085f6:	bf28      	it	cs
 80085f8:	2406      	movcs	r4, #6
 80085fa:	495f      	ldr	r1, [pc, #380]	; (8008778 <_svfprintf_r+0x12c8>)
 80085fc:	940d      	str	r4, [sp, #52]	; 0x34
 80085fe:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 8008602:	900a      	str	r0, [sp, #40]	; 0x28
 8008604:	970e      	str	r7, [sp, #56]	; 0x38
 8008606:	9111      	str	r1, [sp, #68]	; 0x44
 8008608:	f7ff ba01 	b.w	8007a0e <_svfprintf_r+0x55e>
 800860c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800860e:	2b65      	cmp	r3, #101	; 0x65
 8008610:	dd6f      	ble.n	80086f2 <_svfprintf_r+0x1242>
 8008612:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008614:	9940      	ldr	r1, [sp, #256]	; 0x100
 8008616:	2a00      	cmp	r2, #0
 8008618:	d15e      	bne.n	80086d8 <_svfprintf_r+0x1228>
 800861a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800861c:	428a      	cmp	r2, r1
 800861e:	dc3d      	bgt.n	800869c <_svfprintf_r+0x11ec>
 8008620:	9b08      	ldr	r3, [sp, #32]
 8008622:	07da      	lsls	r2, r3, #31
 8008624:	d56c      	bpl.n	8008700 <_svfprintf_r+0x1250>
 8008626:	1c4b      	adds	r3, r1, #1
 8008628:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 800862c:	2267      	movs	r2, #103	; 0x67
 800862e:	930d      	str	r3, [sp, #52]	; 0x34
 8008630:	900a      	str	r0, [sp, #40]	; 0x28
 8008632:	9215      	str	r2, [sp, #84]	; 0x54
 8008634:	9116      	str	r1, [sp, #88]	; 0x58
 8008636:	e74d      	b.n	80084d4 <_svfprintf_r+0x1024>
 8008638:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800863a:	429f      	cmp	r7, r3
 800863c:	bf98      	it	ls
 800863e:	461f      	movls	r7, r3
 8008640:	f67f aee4 	bls.w	800840c <_svfprintf_r+0xf5c>
 8008644:	2230      	movs	r2, #48	; 0x30
 8008646:	f803 2b01 	strb.w	r2, [r3], #1
 800864a:	42bb      	cmp	r3, r7
 800864c:	9342      	str	r3, [sp, #264]	; 0x108
 800864e:	d1fa      	bne.n	8008646 <_svfprintf_r+0x1196>
 8008650:	e6dc      	b.n	800840c <_svfprintf_r+0xf5c>
 8008652:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8008656:	9012      	str	r0, [sp, #72]	; 0x48
 8008658:	920a      	str	r2, [sp, #40]	; 0x28
 800865a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800865e:	970e      	str	r7, [sp, #56]	; 0x38
 8008660:	940d      	str	r4, [sp, #52]	; 0x34
 8008662:	9016      	str	r0, [sp, #88]	; 0x58
 8008664:	f7ff b892 	b.w	800778c <_svfprintf_r+0x2dc>
 8008668:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800866a:	4651      	mov	r1, sl
 800866c:	465a      	mov	r2, fp
 800866e:	f002 fa91 	bl	800ab94 <__ssprint_r>
 8008672:	2800      	cmp	r0, #0
 8008674:	f47e aff3 	bne.w	800765e <_svfprintf_r+0x1ae>
 8008678:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800867a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800867c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800867e:	ae1f      	add	r6, sp, #124	; 0x7c
 8008680:	e621      	b.n	80082c6 <_svfprintf_r+0xe16>
 8008682:	212d      	movs	r1, #45	; 0x2d
 8008684:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8008688:	9112      	str	r1, [sp, #72]	; 0x48
 800868a:	e673      	b.n	8008374 <_svfprintf_r+0xec4>
 800868c:	3130      	adds	r1, #48	; 0x30
 800868e:	2330      	movs	r3, #48	; 0x30
 8008690:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8008694:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8008698:	a93d      	add	r1, sp, #244	; 0xf4
 800869a:	e70a      	b.n	80084b2 <_svfprintf_r+0x1002>
 800869c:	2900      	cmp	r1, #0
 800869e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80086a0:	bfd4      	ite	le
 80086a2:	f1c1 0302 	rsble	r3, r1, #2
 80086a6:	2301      	movgt	r3, #1
 80086a8:	181b      	adds	r3, r3, r0
 80086aa:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80086ae:	930d      	str	r3, [sp, #52]	; 0x34
 80086b0:	2367      	movs	r3, #103	; 0x67
 80086b2:	920a      	str	r2, [sp, #40]	; 0x28
 80086b4:	9315      	str	r3, [sp, #84]	; 0x54
 80086b6:	e7bd      	b.n	8008634 <_svfprintf_r+0x1184>
 80086b8:	2401      	movs	r4, #1
 80086ba:	940a      	str	r4, [sp, #40]	; 0x28
 80086bc:	e651      	b.n	8008362 <_svfprintf_r+0xeb2>
 80086be:	4640      	mov	r0, r8
 80086c0:	4629      	mov	r1, r5
 80086c2:	2200      	movs	r2, #0
 80086c4:	2300      	movs	r3, #0
 80086c6:	f003 fe23 	bl	800c310 <__aeabi_dcmpeq>
 80086ca:	2800      	cmp	r0, #0
 80086cc:	f47f ae92 	bne.w	80083f4 <_svfprintf_r+0xf44>
 80086d0:	f1c9 0301 	rsb	r3, r9, #1
 80086d4:	9340      	str	r3, [sp, #256]	; 0x100
 80086d6:	e68e      	b.n	80083f6 <_svfprintf_r+0xf46>
 80086d8:	2900      	cmp	r1, #0
 80086da:	dd38      	ble.n	800874e <_svfprintf_r+0x129e>
 80086dc:	bb74      	cbnz	r4, 800873c <_svfprintf_r+0x128c>
 80086de:	9b08      	ldr	r3, [sp, #32]
 80086e0:	07dd      	lsls	r5, r3, #31
 80086e2:	d42b      	bmi.n	800873c <_svfprintf_r+0x128c>
 80086e4:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80086e8:	2266      	movs	r2, #102	; 0x66
 80086ea:	900a      	str	r0, [sp, #40]	; 0x28
 80086ec:	910d      	str	r1, [sp, #52]	; 0x34
 80086ee:	9215      	str	r2, [sp, #84]	; 0x54
 80086f0:	e7a0      	b.n	8008634 <_svfprintf_r+0x1184>
 80086f2:	9940      	ldr	r1, [sp, #256]	; 0x100
 80086f4:	e69a      	b.n	800842c <_svfprintf_r+0xf7c>
 80086f6:	232d      	movs	r3, #45	; 0x2d
 80086f8:	4249      	negs	r1, r1
 80086fa:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 80086fe:	e6a0      	b.n	8008442 <_svfprintf_r+0xf92>
 8008700:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8008704:	2267      	movs	r2, #103	; 0x67
 8008706:	900a      	str	r0, [sp, #40]	; 0x28
 8008708:	910d      	str	r1, [sp, #52]	; 0x34
 800870a:	9215      	str	r2, [sp, #84]	; 0x54
 800870c:	e792      	b.n	8008634 <_svfprintf_r+0x1184>
 800870e:	9908      	ldr	r1, [sp, #32]
 8008710:	f011 0301 	ands.w	r3, r1, #1
 8008714:	f47f aed6 	bne.w	80084c4 <_svfprintf_r+0x1014>
 8008718:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800871a:	9316      	str	r3, [sp, #88]	; 0x58
 800871c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8008720:	920a      	str	r2, [sp, #40]	; 0x28
 8008722:	e6d7      	b.n	80084d4 <_svfprintf_r+0x1024>
 8008724:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008726:	680c      	ldr	r4, [r1, #0]
 8008728:	1d0b      	adds	r3, r1, #4
 800872a:	2c00      	cmp	r4, #0
 800872c:	bfbc      	itt	lt
 800872e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008730:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8008734:	f6bf a985 	bge.w	8007a42 <_svfprintf_r+0x592>
 8008738:	f7fe bf18 	b.w	800756c <_svfprintf_r+0xbc>
 800873c:	3401      	adds	r4, #1
 800873e:	190c      	adds	r4, r1, r4
 8008740:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8008744:	2066      	movs	r0, #102	; 0x66
 8008746:	940d      	str	r4, [sp, #52]	; 0x34
 8008748:	930a      	str	r3, [sp, #40]	; 0x28
 800874a:	9015      	str	r0, [sp, #84]	; 0x54
 800874c:	e772      	b.n	8008634 <_svfprintf_r+0x1184>
 800874e:	b914      	cbnz	r4, 8008756 <_svfprintf_r+0x12a6>
 8008750:	9a08      	ldr	r2, [sp, #32]
 8008752:	07d0      	lsls	r0, r2, #31
 8008754:	d509      	bpl.n	800876a <_svfprintf_r+0x12ba>
 8008756:	3402      	adds	r4, #2
 8008758:	e7f2      	b.n	8008740 <_svfprintf_r+0x1290>
 800875a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800875c:	230c      	movs	r3, #12
 800875e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008762:	600b      	str	r3, [r1, #0]
 8008764:	920c      	str	r2, [sp, #48]	; 0x30
 8008766:	f7fe bf83 	b.w	8007670 <_svfprintf_r+0x1c0>
 800876a:	2001      	movs	r0, #1
 800876c:	2266      	movs	r2, #102	; 0x66
 800876e:	900a      	str	r0, [sp, #40]	; 0x28
 8008770:	9215      	str	r2, [sp, #84]	; 0x54
 8008772:	900d      	str	r0, [sp, #52]	; 0x34
 8008774:	e75e      	b.n	8008634 <_svfprintf_r+0x1184>
 8008776:	bf00      	nop
 8008778:	0800c770 	.word	0x0800c770
 800877c:	00000000 	.word	0x00000000

08008780 <quorem>:
 8008780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	6903      	ldr	r3, [r0, #16]
 8008786:	690d      	ldr	r5, [r1, #16]
 8008788:	429d      	cmp	r5, r3
 800878a:	4681      	mov	r9, r0
 800878c:	f300 8084 	bgt.w	8008898 <quorem+0x118>
 8008790:	1ceb      	adds	r3, r5, #3
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	18cf      	adds	r7, r1, r3
 8008796:	18c3      	adds	r3, r0, r3
 8008798:	687e      	ldr	r6, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	3601      	adds	r6, #1
 800879e:	fbb3 f6f6 	udiv	r6, r3, r6
 80087a2:	f101 0414 	add.w	r4, r1, #20
 80087a6:	3d01      	subs	r5, #1
 80087a8:	3704      	adds	r7, #4
 80087aa:	f100 0814 	add.w	r8, r0, #20
 80087ae:	2e00      	cmp	r6, #0
 80087b0:	d03c      	beq.n	800882c <quorem+0xac>
 80087b2:	f04f 0e00 	mov.w	lr, #0
 80087b6:	4642      	mov	r2, r8
 80087b8:	4623      	mov	r3, r4
 80087ba:	46f4      	mov	ip, lr
 80087bc:	f853 bb04 	ldr.w	fp, [r3], #4
 80087c0:	6810      	ldr	r0, [r2, #0]
 80087c2:	fa1f fa8b 	uxth.w	sl, fp
 80087c6:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 80087ca:	fb06 ea0a 	mla	sl, r6, sl, lr
 80087ce:	fb06 fe0b 	mul.w	lr, r6, fp
 80087d2:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 80087d6:	fa1c fc80 	uxtah	ip, ip, r0
 80087da:	fa1f fb8e 	uxth.w	fp, lr
 80087de:	fa1f fa8a 	uxth.w	sl, sl
 80087e2:	ebca 0c0c 	rsb	ip, sl, ip
 80087e6:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 80087ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80087ee:	fa1f fc8c 	uxth.w	ip, ip
 80087f2:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 80087f6:	429f      	cmp	r7, r3
 80087f8:	f842 cb04 	str.w	ip, [r2], #4
 80087fc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8008800:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008804:	d2da      	bcs.n	80087bc <quorem+0x3c>
 8008806:	1d2a      	adds	r2, r5, #4
 8008808:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 800880c:	6858      	ldr	r0, [r3, #4]
 800880e:	b968      	cbnz	r0, 800882c <quorem+0xac>
 8008810:	4598      	cmp	r8, r3
 8008812:	d209      	bcs.n	8008828 <quorem+0xa8>
 8008814:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8008818:	b112      	cbz	r2, 8008820 <quorem+0xa0>
 800881a:	e005      	b.n	8008828 <quorem+0xa8>
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	b91a      	cbnz	r2, 8008828 <quorem+0xa8>
 8008820:	3b04      	subs	r3, #4
 8008822:	3d01      	subs	r5, #1
 8008824:	4598      	cmp	r8, r3
 8008826:	d3f9      	bcc.n	800881c <quorem+0x9c>
 8008828:	f8c9 5010 	str.w	r5, [r9, #16]
 800882c:	4648      	mov	r0, r9
 800882e:	f001 fe4f 	bl	800a4d0 <__mcmp>
 8008832:	2800      	cmp	r0, #0
 8008834:	db2d      	blt.n	8008892 <quorem+0x112>
 8008836:	3601      	adds	r6, #1
 8008838:	4643      	mov	r3, r8
 800883a:	f04f 0c00 	mov.w	ip, #0
 800883e:	f854 2b04 	ldr.w	r2, [r4], #4
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	b291      	uxth	r1, r2
 8008846:	fa1f fa80 	uxth.w	sl, r0
 800884a:	0c12      	lsrs	r2, r2, #16
 800884c:	ebc1 010a 	rsb	r1, r1, sl
 8008850:	4461      	add	r1, ip
 8008852:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8008856:	eb02 4221 	add.w	r2, r2, r1, asr #16
 800885a:	b289      	uxth	r1, r1
 800885c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008860:	42a7      	cmp	r7, r4
 8008862:	f843 1b04 	str.w	r1, [r3], #4
 8008866:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800886a:	d2e8      	bcs.n	800883e <quorem+0xbe>
 800886c:	1d2a      	adds	r2, r5, #4
 800886e:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8008872:	6859      	ldr	r1, [r3, #4]
 8008874:	b969      	cbnz	r1, 8008892 <quorem+0x112>
 8008876:	4598      	cmp	r8, r3
 8008878:	d209      	bcs.n	800888e <quorem+0x10e>
 800887a:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800887e:	b112      	cbz	r2, 8008886 <quorem+0x106>
 8008880:	e005      	b.n	800888e <quorem+0x10e>
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	b91a      	cbnz	r2, 800888e <quorem+0x10e>
 8008886:	3b04      	subs	r3, #4
 8008888:	3d01      	subs	r5, #1
 800888a:	4598      	cmp	r8, r3
 800888c:	d3f9      	bcc.n	8008882 <quorem+0x102>
 800888e:	f8c9 5010 	str.w	r5, [r9, #16]
 8008892:	4630      	mov	r0, r6
 8008894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008898:	2000      	movs	r0, #0
 800889a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889e:	bf00      	nop

080088a0 <_dtoa_r>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80088a6:	b09d      	sub	sp, #116	; 0x74
 80088a8:	4607      	mov	r7, r0
 80088aa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80088ac:	4692      	mov	sl, r2
 80088ae:	469b      	mov	fp, r3
 80088b0:	b141      	cbz	r1, 80088c4 <_dtoa_r+0x24>
 80088b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80088b4:	2201      	movs	r2, #1
 80088b6:	409a      	lsls	r2, r3
 80088b8:	604b      	str	r3, [r1, #4]
 80088ba:	608a      	str	r2, [r1, #8]
 80088bc:	f001 fbd4 	bl	800a068 <_Bfree>
 80088c0:	2300      	movs	r3, #0
 80088c2:	643b      	str	r3, [r7, #64]	; 0x40
 80088c4:	f1bb 0500 	subs.w	r5, fp, #0
 80088c8:	f2c0 80df 	blt.w	8008a8a <_dtoa_r+0x1ea>
 80088cc:	2300      	movs	r3, #0
 80088ce:	6023      	str	r3, [r4, #0]
 80088d0:	2300      	movs	r3, #0
 80088d2:	461a      	mov	r2, r3
 80088d4:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80088d8:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 80088dc:	402b      	ands	r3, r5
 80088de:	4293      	cmp	r3, r2
 80088e0:	f000 80be 	beq.w	8008a60 <_dtoa_r+0x1c0>
 80088e4:	4650      	mov	r0, sl
 80088e6:	4659      	mov	r1, fp
 80088e8:	2200      	movs	r2, #0
 80088ea:	2300      	movs	r3, #0
 80088ec:	46d0      	mov	r8, sl
 80088ee:	46d9      	mov	r9, fp
 80088f0:	2401      	movs	r4, #1
 80088f2:	f003 fd0d 	bl	800c310 <__aeabi_dcmpeq>
 80088f6:	b978      	cbnz	r0, 8008918 <_dtoa_r+0x78>
 80088f8:	f014 0fff 	tst.w	r4, #255	; 0xff
 80088fc:	d110      	bne.n	8008920 <_dtoa_r+0x80>
 80088fe:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8008900:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8008902:	2301      	movs	r3, #1
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	4d78      	ldr	r5, [pc, #480]	; (8008ae8 <_dtoa_r+0x248>)
 8008908:	b114      	cbz	r4, 8008910 <_dtoa_r+0x70>
 800890a:	4d78      	ldr	r5, [pc, #480]	; (8008aec <_dtoa_r+0x24c>)
 800890c:	6025      	str	r5, [r4, #0]
 800890e:	3d01      	subs	r5, #1
 8008910:	4628      	mov	r0, r5
 8008912:	b01d      	add	sp, #116	; 0x74
 8008914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008918:	2400      	movs	r4, #0
 800891a:	f014 0fff 	tst.w	r4, #255	; 0xff
 800891e:	d0ee      	beq.n	80088fe <_dtoa_r+0x5e>
 8008920:	a91b      	add	r1, sp, #108	; 0x6c
 8008922:	9100      	str	r1, [sp, #0]
 8008924:	4638      	mov	r0, r7
 8008926:	a91a      	add	r1, sp, #104	; 0x68
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	9101      	str	r1, [sp, #4]
 800892e:	f001 fed1 	bl	800a6d4 <__d2b>
 8008932:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8008936:	900a      	str	r0, [sp, #40]	; 0x28
 8008938:	2c00      	cmp	r4, #0
 800893a:	f040 80b5 	bne.w	8008aa8 <_dtoa_r+0x208>
 800893e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008940:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8008942:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8008946:	1934      	adds	r4, r6, r4
 8008948:	429c      	cmp	r4, r3
 800894a:	f2c0 8281 	blt.w	8008e50 <_dtoa_r+0x5b0>
 800894e:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8008952:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8008956:	1b1b      	subs	r3, r3, r4
 8008958:	f204 4212 	addw	r2, r4, #1042	; 0x412
 800895c:	fa15 f303 	lsls.w	r3, r5, r3
 8008960:	fa2a f002 	lsr.w	r0, sl, r2
 8008964:	4318      	orrs	r0, r3
 8008966:	f003 f9f5 	bl	800bd54 <__aeabi_ui2d>
 800896a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800896e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008970:	2501      	movs	r5, #1
 8008972:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8008976:	900d      	str	r0, [sp, #52]	; 0x34
 8008978:	3c01      	subs	r4, #1
 800897a:	9516      	str	r5, [sp, #88]	; 0x58
 800897c:	2300      	movs	r3, #0
 800897e:	2200      	movs	r2, #0
 8008980:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8008984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008988:	f003 f8a6 	bl	800bad8 <__aeabi_dsub>
 800898c:	a350      	add	r3, pc, #320	; (adr r3, 8008ad0 <_dtoa_r+0x230>)
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	f003 fa55 	bl	800be40 <__aeabi_dmul>
 8008996:	a350      	add	r3, pc, #320	; (adr r3, 8008ad8 <_dtoa_r+0x238>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f003 f89e 	bl	800badc <__adddf3>
 80089a0:	4680      	mov	r8, r0
 80089a2:	4620      	mov	r0, r4
 80089a4:	4689      	mov	r9, r1
 80089a6:	f003 f9e5 	bl	800bd74 <__aeabi_i2d>
 80089aa:	a34d      	add	r3, pc, #308	; (adr r3, 8008ae0 <_dtoa_r+0x240>)
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f003 fa46 	bl	800be40 <__aeabi_dmul>
 80089b4:	4602      	mov	r2, r0
 80089b6:	460b      	mov	r3, r1
 80089b8:	4640      	mov	r0, r8
 80089ba:	4649      	mov	r1, r9
 80089bc:	f003 f88e 	bl	800badc <__adddf3>
 80089c0:	4680      	mov	r8, r0
 80089c2:	4689      	mov	r9, r1
 80089c4:	f003 fcd6 	bl	800c374 <__aeabi_d2iz>
 80089c8:	4649      	mov	r1, r9
 80089ca:	9005      	str	r0, [sp, #20]
 80089cc:	2200      	movs	r2, #0
 80089ce:	4640      	mov	r0, r8
 80089d0:	2300      	movs	r3, #0
 80089d2:	f003 fca7 	bl	800c324 <__aeabi_dcmplt>
 80089d6:	b150      	cbz	r0, 80089ee <_dtoa_r+0x14e>
 80089d8:	9805      	ldr	r0, [sp, #20]
 80089da:	f003 f9cb 	bl	800bd74 <__aeabi_i2d>
 80089de:	4642      	mov	r2, r8
 80089e0:	464b      	mov	r3, r9
 80089e2:	f003 fc95 	bl	800c310 <__aeabi_dcmpeq>
 80089e6:	b910      	cbnz	r0, 80089ee <_dtoa_r+0x14e>
 80089e8:	9d05      	ldr	r5, [sp, #20]
 80089ea:	3d01      	subs	r5, #1
 80089ec:	9505      	str	r5, [sp, #20]
 80089ee:	9d05      	ldr	r5, [sp, #20]
 80089f0:	2d16      	cmp	r5, #22
 80089f2:	f200 815e 	bhi.w	8008cb2 <_dtoa_r+0x412>
 80089f6:	4b3e      	ldr	r3, [pc, #248]	; (8008af0 <_dtoa_r+0x250>)
 80089f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80089fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a00:	4652      	mov	r2, sl
 8008a02:	465b      	mov	r3, fp
 8008a04:	f003 fcac 	bl	800c360 <__aeabi_dcmpgt>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	f000 8229 	beq.w	8008e60 <_dtoa_r+0x5c0>
 8008a0e:	9d05      	ldr	r5, [sp, #20]
 8008a10:	3d01      	subs	r5, #1
 8008a12:	9505      	str	r5, [sp, #20]
 8008a14:	2500      	movs	r5, #0
 8008a16:	9514      	str	r5, [sp, #80]	; 0x50
 8008a18:	1b34      	subs	r4, r6, r4
 8008a1a:	3c01      	subs	r4, #1
 8008a1c:	f100 8213 	bmi.w	8008e46 <_dtoa_r+0x5a6>
 8008a20:	2500      	movs	r5, #0
 8008a22:	940b      	str	r4, [sp, #44]	; 0x2c
 8008a24:	950f      	str	r5, [sp, #60]	; 0x3c
 8008a26:	9c05      	ldr	r4, [sp, #20]
 8008a28:	2c00      	cmp	r4, #0
 8008a2a:	f2c0 8203 	blt.w	8008e34 <_dtoa_r+0x594>
 8008a2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008a30:	9413      	str	r4, [sp, #76]	; 0x4c
 8008a32:	192d      	adds	r5, r5, r4
 8008a34:	2400      	movs	r4, #0
 8008a36:	950b      	str	r5, [sp, #44]	; 0x2c
 8008a38:	9410      	str	r4, [sp, #64]	; 0x40
 8008a3a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8008a3c:	2d09      	cmp	r5, #9
 8008a3e:	d85d      	bhi.n	8008afc <_dtoa_r+0x25c>
 8008a40:	2401      	movs	r4, #1
 8008a42:	2d05      	cmp	r5, #5
 8008a44:	dd02      	ble.n	8008a4c <_dtoa_r+0x1ac>
 8008a46:	3d04      	subs	r5, #4
 8008a48:	9526      	str	r5, [sp, #152]	; 0x98
 8008a4a:	2400      	movs	r4, #0
 8008a4c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8008a4e:	1eab      	subs	r3, r5, #2
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d855      	bhi.n	8008b00 <_dtoa_r+0x260>
 8008a54:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008a58:	036d0382 	.word	0x036d0382
 8008a5c:	03850246 	.word	0x03850246
 8008a60:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8008a62:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a66:	6023      	str	r3, [r4, #0]
 8008a68:	f1ba 0f00 	cmp.w	sl, #0
 8008a6c:	d013      	beq.n	8008a96 <_dtoa_r+0x1f6>
 8008a6e:	4d21      	ldr	r5, [pc, #132]	; (8008af4 <_dtoa_r+0x254>)
 8008a70:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8008a72:	2c00      	cmp	r4, #0
 8008a74:	f43f af4c 	beq.w	8008910 <_dtoa_r+0x70>
 8008a78:	78eb      	ldrb	r3, [r5, #3]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 8117 	beq.w	8008cae <_dtoa_r+0x40e>
 8008a80:	f105 0308 	add.w	r3, r5, #8
 8008a84:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	e742      	b.n	8008910 <_dtoa_r+0x70>
 8008a8a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8008a8e:	2301      	movs	r3, #1
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	46ab      	mov	fp, r5
 8008a94:	e71c      	b.n	80088d0 <_dtoa_r+0x30>
 8008a96:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <_dtoa_r+0x254>)
 8008a98:	4a17      	ldr	r2, [pc, #92]	; (8008af8 <_dtoa_r+0x258>)
 8008a9a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008a9e:	2d00      	cmp	r5, #0
 8008aa0:	bf0c      	ite	eq
 8008aa2:	4615      	moveq	r5, r2
 8008aa4:	461d      	movne	r5, r3
 8008aa6:	e7e3      	b.n	8008a70 <_dtoa_r+0x1d0>
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	4640      	mov	r0, r8
 8008aac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ab0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008ab2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008ab4:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8008ab8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008abc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ac0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ac4:	2500      	movs	r5, #0
 8008ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ac8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008acc:	9516      	str	r5, [sp, #88]	; 0x58
 8008ace:	e755      	b.n	800897c <_dtoa_r+0xdc>
 8008ad0:	636f4361 	.word	0x636f4361
 8008ad4:	3fd287a7 	.word	0x3fd287a7
 8008ad8:	8b60c8b3 	.word	0x8b60c8b3
 8008adc:	3fc68a28 	.word	0x3fc68a28
 8008ae0:	509f79fb 	.word	0x509f79fb
 8008ae4:	3fd34413 	.word	0x3fd34413
 8008ae8:	0800c778 	.word	0x0800c778
 8008aec:	0800c779 	.word	0x0800c779
 8008af0:	0800c5b0 	.word	0x0800c5b0
 8008af4:	0800c788 	.word	0x0800c788
 8008af8:	0800c77c 	.word	0x0800c77c
 8008afc:	2400      	movs	r4, #0
 8008afe:	9426      	str	r4, [sp, #152]	; 0x98
 8008b00:	2400      	movs	r4, #0
 8008b02:	647c      	str	r4, [r7, #68]	; 0x44
 8008b04:	4638      	mov	r0, r7
 8008b06:	4621      	mov	r1, r4
 8008b08:	f001 fa88 	bl	800a01c <_Balloc>
 8008b0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008b10:	950e      	str	r5, [sp, #56]	; 0x38
 8008b12:	2501      	movs	r5, #1
 8008b14:	9512      	str	r5, [sp, #72]	; 0x48
 8008b16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008b1a:	9009      	str	r0, [sp, #36]	; 0x24
 8008b1c:	6438      	str	r0, [r7, #64]	; 0x40
 8008b1e:	9515      	str	r5, [sp, #84]	; 0x54
 8008b20:	9427      	str	r4, [sp, #156]	; 0x9c
 8008b22:	9c05      	ldr	r4, [sp, #20]
 8008b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b26:	2c0e      	cmp	r4, #14
 8008b28:	bfcc      	ite	gt
 8008b2a:	2500      	movgt	r5, #0
 8008b2c:	2501      	movle	r5, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	bfb8      	it	lt
 8008b32:	2500      	movlt	r5, #0
 8008b34:	2d00      	cmp	r5, #0
 8008b36:	f000 80c1 	beq.w	8008cbc <_dtoa_r+0x41c>
 8008b3a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8008b3c:	4b5e      	ldr	r3, [pc, #376]	; (8008cb8 <_dtoa_r+0x418>)
 8008b3e:	0fe5      	lsrs	r5, r4, #31
 8008b40:	9c05      	ldr	r4, [sp, #20]
 8008b42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008b4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008b4c:	2c00      	cmp	r4, #0
 8008b4e:	bfcc      	ite	gt
 8008b50:	2500      	movgt	r5, #0
 8008b52:	f005 0501 	andle.w	r5, r5, #1
 8008b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	f040 81a8 	bne.w	8008eb0 <_dtoa_r+0x610>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	4650      	mov	r0, sl
 8008b66:	4659      	mov	r1, fp
 8008b68:	f003 fa94 	bl	800c094 <__aeabi_ddiv>
 8008b6c:	f003 fc02 	bl	800c374 <__aeabi_d2iz>
 8008b70:	4606      	mov	r6, r0
 8008b72:	f003 f8ff 	bl	800bd74 <__aeabi_i2d>
 8008b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b7a:	f003 f961 	bl	800be40 <__aeabi_dmul>
 8008b7e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008b80:	460b      	mov	r3, r1
 8008b82:	4602      	mov	r2, r0
 8008b84:	4659      	mov	r1, fp
 8008b86:	4650      	mov	r0, sl
 8008b88:	f002 ffa6 	bl	800bad8 <__aeabi_dsub>
 8008b8c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8008b90:	f804 3b01 	strb.w	r3, [r4], #1
 8008b94:	9411      	str	r4, [sp, #68]	; 0x44
 8008b96:	46a0      	mov	r8, r4
 8008b98:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008b9a:	2c01      	cmp	r4, #1
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	468b      	mov	fp, r1
 8008ba0:	d04c      	beq.n	8008c3c <_dtoa_r+0x39c>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8008baa:	f003 f949 	bl	800be40 <__aeabi_dmul>
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4682      	mov	sl, r0
 8008bb4:	468b      	mov	fp, r1
 8008bb6:	2401      	movs	r4, #1
 8008bb8:	f003 fbaa 	bl	800c310 <__aeabi_dcmpeq>
 8008bbc:	b100      	cbz	r0, 8008bc0 <_dtoa_r+0x320>
 8008bbe:	462c      	mov	r4, r5
 8008bc0:	f014 0fff 	tst.w	r4, #255	; 0xff
 8008bc4:	f000 8575 	beq.w	80096b2 <_dtoa_r+0xe12>
 8008bc8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008bca:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008bcc:	1ca5      	adds	r5, r4, #2
 8008bce:	eb04 0900 	add.w	r9, r4, r0
 8008bd2:	e00d      	b.n	8008bf0 <_dtoa_r+0x350>
 8008bd4:	f003 f934 	bl	800be40 <__aeabi_dmul>
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2300      	movs	r3, #0
 8008bdc:	4682      	mov	sl, r0
 8008bde:	468b      	mov	fp, r1
 8008be0:	f003 fb96 	bl	800c310 <__aeabi_dcmpeq>
 8008be4:	b100      	cbz	r0, 8008be8 <_dtoa_r+0x348>
 8008be6:	2400      	movs	r4, #0
 8008be8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8008bec:	f000 8423 	beq.w	8009436 <_dtoa_r+0xb96>
 8008bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bf4:	4650      	mov	r0, sl
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	f003 fa4c 	bl	800c094 <__aeabi_ddiv>
 8008bfc:	f003 fbba 	bl	800c374 <__aeabi_d2iz>
 8008c00:	4606      	mov	r6, r0
 8008c02:	f003 f8b7 	bl	800bd74 <__aeabi_i2d>
 8008c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c0a:	f003 f919 	bl	800be40 <__aeabi_dmul>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	4650      	mov	r0, sl
 8008c14:	4659      	mov	r1, fp
 8008c16:	f002 ff5f 	bl	800bad8 <__aeabi_dsub>
 8008c1a:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8008c1e:	2300      	movs	r3, #0
 8008c20:	2200      	movs	r2, #0
 8008c22:	454d      	cmp	r5, r9
 8008c24:	f805 4c01 	strb.w	r4, [r5, #-1]
 8008c28:	46a8      	mov	r8, r5
 8008c2a:	4682      	mov	sl, r0
 8008c2c:	468b      	mov	fp, r1
 8008c2e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8008c32:	f04f 0401 	mov.w	r4, #1
 8008c36:	f105 0501 	add.w	r5, r5, #1
 8008c3a:	d1cb      	bne.n	8008bd4 <_dtoa_r+0x334>
 8008c3c:	4652      	mov	r2, sl
 8008c3e:	465b      	mov	r3, fp
 8008c40:	4650      	mov	r0, sl
 8008c42:	4659      	mov	r1, fp
 8008c44:	f002 ff4a 	bl	800badc <__adddf3>
 8008c48:	4604      	mov	r4, r0
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c52:	462b      	mov	r3, r5
 8008c54:	f003 fb66 	bl	800c324 <__aeabi_dcmplt>
 8008c58:	b958      	cbnz	r0, 8008c72 <_dtoa_r+0x3d2>
 8008c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c5e:	4622      	mov	r2, r4
 8008c60:	462b      	mov	r3, r5
 8008c62:	f003 fb55 	bl	800c310 <__aeabi_dcmpeq>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	f000 83e5 	beq.w	8009436 <_dtoa_r+0xb96>
 8008c6c:	07f3      	lsls	r3, r6, #31
 8008c6e:	f140 83e2 	bpl.w	8009436 <_dtoa_r+0xb96>
 8008c72:	9c05      	ldr	r4, [sp, #20]
 8008c74:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8008c78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c7a:	9417      	str	r4, [sp, #92]	; 0x5c
 8008c7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c7e:	e003      	b.n	8008c88 <_dtoa_r+0x3e8>
 8008c80:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8008c84:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008c88:	2e39      	cmp	r6, #57	; 0x39
 8008c8a:	4643      	mov	r3, r8
 8008c8c:	f040 8489 	bne.w	80095a2 <_dtoa_r+0xd02>
 8008c90:	4590      	cmp	r8, r2
 8008c92:	d1f5      	bne.n	8008c80 <_dtoa_r+0x3e0>
 8008c94:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8008c96:	9309      	str	r3, [sp, #36]	; 0x24
 8008c98:	3401      	adds	r4, #1
 8008c9a:	9405      	str	r4, [sp, #20]
 8008c9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008c9e:	2330      	movs	r3, #48	; 0x30
 8008ca0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008ca4:	2231      	movs	r2, #49	; 0x31
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008cac:	e0b0      	b.n	8008e10 <_dtoa_r+0x570>
 8008cae:	1ceb      	adds	r3, r5, #3
 8008cb0:	e6e8      	b.n	8008a84 <_dtoa_r+0x1e4>
 8008cb2:	2501      	movs	r5, #1
 8008cb4:	9514      	str	r5, [sp, #80]	; 0x50
 8008cb6:	e6af      	b.n	8008a18 <_dtoa_r+0x178>
 8008cb8:	0800c5b0 	.word	0x0800c5b0
 8008cbc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008cbe:	2c00      	cmp	r4, #0
 8008cc0:	f040 80d1 	bne.w	8008e66 <_dtoa_r+0x5c6>
 8008cc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008cc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008cca:	9306      	str	r3, [sp, #24]
 8008ccc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	bfc8      	it	gt
 8008cd2:	2c00      	cmpgt	r4, #0
 8008cd4:	dd09      	ble.n	8008cea <_dtoa_r+0x44a>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008cda:	42a3      	cmp	r3, r4
 8008cdc:	bfa8      	it	ge
 8008cde:	4623      	movge	r3, r4
 8008ce0:	1ac9      	subs	r1, r1, r3
 8008ce2:	1ac0      	subs	r0, r0, r3
 8008ce4:	910f      	str	r1, [sp, #60]	; 0x3c
 8008ce6:	1ae4      	subs	r4, r4, r3
 8008ce8:	900b      	str	r0, [sp, #44]	; 0x2c
 8008cea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	dd1a      	ble.n	8008d26 <_dtoa_r+0x486>
 8008cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 841d 	beq.w	8009532 <_dtoa_r+0xc92>
 8008cf8:	2d00      	cmp	r5, #0
 8008cfa:	dd10      	ble.n	8008d1e <_dtoa_r+0x47e>
 8008cfc:	9906      	ldr	r1, [sp, #24]
 8008cfe:	462a      	mov	r2, r5
 8008d00:	4638      	mov	r0, r7
 8008d02:	f001 fb39 	bl	800a378 <__pow5mult>
 8008d06:	9006      	str	r0, [sp, #24]
 8008d08:	9906      	ldr	r1, [sp, #24]
 8008d0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f001 fa9b 	bl	800a248 <__multiply>
 8008d12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d14:	4606      	mov	r6, r0
 8008d16:	4638      	mov	r0, r7
 8008d18:	f001 f9a6 	bl	800a068 <_Bfree>
 8008d1c:	960a      	str	r6, [sp, #40]	; 0x28
 8008d1e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d20:	1b42      	subs	r2, r0, r5
 8008d22:	f040 8429 	bne.w	8009578 <_dtoa_r+0xcd8>
 8008d26:	2101      	movs	r1, #1
 8008d28:	4638      	mov	r0, r7
 8008d2a:	f001 fa83 	bl	800a234 <__i2b>
 8008d2e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8008d30:	2d00      	cmp	r5, #0
 8008d32:	4606      	mov	r6, r0
 8008d34:	dd05      	ble.n	8008d42 <_dtoa_r+0x4a2>
 8008d36:	4631      	mov	r1, r6
 8008d38:	4638      	mov	r0, r7
 8008d3a:	462a      	mov	r2, r5
 8008d3c:	f001 fb1c 	bl	800a378 <__pow5mult>
 8008d40:	4606      	mov	r6, r0
 8008d42:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8008d44:	2d01      	cmp	r5, #1
 8008d46:	f340 820f 	ble.w	8009168 <_dtoa_r+0x8c8>
 8008d4a:	2500      	movs	r5, #0
 8008d4c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008d4e:	2301      	movs	r3, #1
 8008d50:	2800      	cmp	r0, #0
 8008d52:	f040 838c 	bne.w	800946e <_dtoa_r+0xbce>
 8008d56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d58:	185b      	adds	r3, r3, r1
 8008d5a:	f013 031f 	ands.w	r3, r3, #31
 8008d5e:	f000 82cb 	beq.w	80092f8 <_dtoa_r+0xa58>
 8008d62:	f1c3 0220 	rsb	r2, r3, #32
 8008d66:	2a04      	cmp	r2, #4
 8008d68:	f340 84bf 	ble.w	80096ea <_dtoa_r+0xe4a>
 8008d6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d6e:	f1c3 031c 	rsb	r3, r3, #28
 8008d72:	18d2      	adds	r2, r2, r3
 8008d74:	18c9      	adds	r1, r1, r3
 8008d76:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d78:	18e4      	adds	r4, r4, r3
 8008d7a:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d7e:	2a00      	cmp	r2, #0
 8008d80:	dd04      	ble.n	8008d8c <_dtoa_r+0x4ec>
 8008d82:	4638      	mov	r0, r7
 8008d84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d86:	f001 fb43 	bl	800a410 <__lshift>
 8008d8a:	900a      	str	r0, [sp, #40]	; 0x28
 8008d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	dd05      	ble.n	8008d9e <_dtoa_r+0x4fe>
 8008d92:	4631      	mov	r1, r6
 8008d94:	4638      	mov	r0, r7
 8008d96:	461a      	mov	r2, r3
 8008d98:	f001 fb3a 	bl	800a410 <__lshift>
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008da0:	2800      	cmp	r0, #0
 8008da2:	f040 834c 	bne.w	800943e <_dtoa_r+0xb9e>
 8008da6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008da8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008daa:	2900      	cmp	r1, #0
 8008dac:	bfcc      	ite	gt
 8008dae:	2300      	movgt	r3, #0
 8008db0:	2301      	movle	r3, #1
 8008db2:	2a02      	cmp	r2, #2
 8008db4:	bfd8      	it	le
 8008db6:	2300      	movle	r3, #0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 8226 	beq.w	800920a <_dtoa_r+0x96a>
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	f040 808a 	bne.w	8008ed8 <_dtoa_r+0x638>
 8008dc4:	4631      	mov	r1, r6
 8008dc6:	2205      	movs	r2, #5
 8008dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dca:	4638      	mov	r0, r7
 8008dcc:	f001 f956 	bl	800a07c <__multadd>
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008dd6:	f001 fb7b 	bl	800a4d0 <__mcmp>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	dd7c      	ble.n	8008ed8 <_dtoa_r+0x638>
 8008dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de0:	9c05      	ldr	r4, [sp, #20]
 8008de2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008de4:	2231      	movs	r2, #49	; 0x31
 8008de6:	f803 2b01 	strb.w	r2, [r3], #1
 8008dea:	3401      	adds	r4, #1
 8008dec:	9405      	str	r4, [sp, #20]
 8008dee:	9309      	str	r3, [sp, #36]	; 0x24
 8008df0:	2400      	movs	r4, #0
 8008df2:	4638      	mov	r0, r7
 8008df4:	4631      	mov	r1, r6
 8008df6:	f001 f937 	bl	800a068 <_Bfree>
 8008dfa:	9806      	ldr	r0, [sp, #24]
 8008dfc:	b140      	cbz	r0, 8008e10 <_dtoa_r+0x570>
 8008dfe:	4284      	cmp	r4, r0
 8008e00:	bf18      	it	ne
 8008e02:	2c00      	cmpne	r4, #0
 8008e04:	f040 8273 	bne.w	80092ee <_dtoa_r+0xa4e>
 8008e08:	4638      	mov	r0, r7
 8008e0a:	9906      	ldr	r1, [sp, #24]
 8008e0c:	f001 f92c 	bl	800a068 <_Bfree>
 8008e10:	4638      	mov	r0, r7
 8008e12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e14:	f001 f928 	bl	800a068 <_Bfree>
 8008e18:	9c05      	ldr	r4, [sp, #20]
 8008e1a:	1c63      	adds	r3, r4, #1
 8008e1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008e1e:	2200      	movs	r2, #0
 8008e20:	7022      	strb	r2, [r4, #0]
 8008e22:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8008e28:	2c00      	cmp	r4, #0
 8008e2a:	f43f ad71 	beq.w	8008910 <_dtoa_r+0x70>
 8008e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e30:	6020      	str	r0, [r4, #0]
 8008e32:	e56d      	b.n	8008910 <_dtoa_r+0x70>
 8008e34:	9c05      	ldr	r4, [sp, #20]
 8008e36:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e38:	1b2d      	subs	r5, r5, r4
 8008e3a:	950f      	str	r5, [sp, #60]	; 0x3c
 8008e3c:	4265      	negs	r5, r4
 8008e3e:	2400      	movs	r4, #0
 8008e40:	9510      	str	r5, [sp, #64]	; 0x40
 8008e42:	9413      	str	r4, [sp, #76]	; 0x4c
 8008e44:	e5f9      	b.n	8008a3a <_dtoa_r+0x19a>
 8008e46:	4264      	negs	r4, r4
 8008e48:	940f      	str	r4, [sp, #60]	; 0x3c
 8008e4a:	2400      	movs	r4, #0
 8008e4c:	940b      	str	r4, [sp, #44]	; 0x2c
 8008e4e:	e5ea      	b.n	8008a26 <_dtoa_r+0x186>
 8008e50:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8008e54:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8008e58:	1b00      	subs	r0, r0, r4
 8008e5a:	fa0a f000 	lsl.w	r0, sl, r0
 8008e5e:	e582      	b.n	8008966 <_dtoa_r+0xc6>
 8008e60:	2500      	movs	r5, #0
 8008e62:	9514      	str	r5, [sp, #80]	; 0x50
 8008e64:	e5d8      	b.n	8008a18 <_dtoa_r+0x178>
 8008e66:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8008e68:	2c01      	cmp	r4, #1
 8008e6a:	f340 838f 	ble.w	800958c <_dtoa_r+0xcec>
 8008e6e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008e70:	1e62      	subs	r2, r4, #1
 8008e72:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008e74:	4294      	cmp	r4, r2
 8008e76:	bfbf      	itttt	lt
 8008e78:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 8008e7a:	9210      	strlt	r2, [sp, #64]	; 0x40
 8008e7c:	ebc4 0302 	rsblt	r3, r4, r2
 8008e80:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8008e82:	bfb6      	itet	lt
 8008e84:	18e4      	addlt	r4, r4, r3
 8008e86:	ebc2 0504 	rsbge	r5, r2, r4
 8008e8a:	9413      	strlt	r4, [sp, #76]	; 0x4c
 8008e8c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8008e8e:	2c00      	cmp	r4, #0
 8008e90:	f2c0 838f 	blt.w	80095b2 <_dtoa_r+0xd12>
 8008e94:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8008e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e9a:	18d2      	adds	r2, r2, r3
 8008e9c:	920f      	str	r2, [sp, #60]	; 0x3c
 8008e9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ea0:	4638      	mov	r0, r7
 8008ea2:	18d2      	adds	r2, r2, r3
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ea8:	f001 f9c4 	bl	800a234 <__i2b>
 8008eac:	9006      	str	r0, [sp, #24]
 8008eae:	e70d      	b.n	8008ccc <_dtoa_r+0x42c>
 8008eb0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008eb2:	2d00      	cmp	r5, #0
 8008eb4:	f040 8367 	bne.w	8009586 <_dtoa_r+0xce6>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8008ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ec4:	f002 ffbc 	bl	800be40 <__aeabi_dmul>
 8008ec8:	4652      	mov	r2, sl
 8008eca:	465b      	mov	r3, fp
 8008ecc:	f003 fa3e 	bl	800c34c <__aeabi_dcmpge>
 8008ed0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008ed2:	9606      	str	r6, [sp, #24]
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d082      	beq.n	8008dde <_dtoa_r+0x53e>
 8008ed8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8008eda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008edc:	43e4      	mvns	r4, r4
 8008ede:	9405      	str	r4, [sp, #20]
 8008ee0:	2400      	movs	r4, #0
 8008ee2:	e786      	b.n	8008df2 <_dtoa_r+0x552>
 8008ee4:	2501      	movs	r5, #1
 8008ee6:	9512      	str	r5, [sp, #72]	; 0x48
 8008ee8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8008eea:	2d00      	cmp	r5, #0
 8008eec:	f340 82d3 	ble.w	8009496 <_dtoa_r+0xbf6>
 8008ef0:	46a9      	mov	r9, r5
 8008ef2:	2d0e      	cmp	r5, #14
 8008ef4:	bf8c      	ite	hi
 8008ef6:	2400      	movhi	r4, #0
 8008ef8:	f004 0401 	andls.w	r4, r4, #1
 8008efc:	9515      	str	r5, [sp, #84]	; 0x54
 8008efe:	950e      	str	r5, [sp, #56]	; 0x38
 8008f00:	2100      	movs	r1, #0
 8008f02:	f1b9 0f17 	cmp.w	r9, #23
 8008f06:	6479      	str	r1, [r7, #68]	; 0x44
 8008f08:	d909      	bls.n	8008f1e <_dtoa_r+0x67e>
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	2304      	movs	r3, #4
 8008f0e:	005b      	lsls	r3, r3, #1
 8008f10:	f103 0014 	add.w	r0, r3, #20
 8008f14:	4611      	mov	r1, r2
 8008f16:	3201      	adds	r2, #1
 8008f18:	4548      	cmp	r0, r9
 8008f1a:	d9f8      	bls.n	8008f0e <_dtoa_r+0x66e>
 8008f1c:	6479      	str	r1, [r7, #68]	; 0x44
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f001 f87c 	bl	800a01c <_Balloc>
 8008f24:	9009      	str	r0, [sp, #36]	; 0x24
 8008f26:	6438      	str	r0, [r7, #64]	; 0x40
 8008f28:	2c00      	cmp	r4, #0
 8008f2a:	f43f adfa 	beq.w	8008b22 <_dtoa_r+0x282>
 8008f2e:	9c05      	ldr	r4, [sp, #20]
 8008f30:	4652      	mov	r2, sl
 8008f32:	465b      	mov	r3, fp
 8008f34:	2c00      	cmp	r4, #0
 8008f36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008f3a:	f340 81f8 	ble.w	800932e <_dtoa_r+0xa8e>
 8008f3e:	4b97      	ldr	r3, [pc, #604]	; (800919c <_dtoa_r+0x8fc>)
 8008f40:	f004 020f 	and.w	r2, r4, #15
 8008f44:	1124      	asrs	r4, r4, #4
 8008f46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f4a:	2602      	movs	r6, #2
 8008f4c:	06e2      	lsls	r2, r4, #27
 8008f4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f52:	d50b      	bpl.n	8008f6c <_dtoa_r+0x6cc>
 8008f54:	4b92      	ldr	r3, [pc, #584]	; (80091a0 <_dtoa_r+0x900>)
 8008f56:	4650      	mov	r0, sl
 8008f58:	4659      	mov	r1, fp
 8008f5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f5e:	f003 f899 	bl	800c094 <__aeabi_ddiv>
 8008f62:	f004 040f 	and.w	r4, r4, #15
 8008f66:	4682      	mov	sl, r0
 8008f68:	468b      	mov	fp, r1
 8008f6a:	2603      	movs	r6, #3
 8008f6c:	b174      	cbz	r4, 8008f8c <_dtoa_r+0x6ec>
 8008f6e:	4d8c      	ldr	r5, [pc, #560]	; (80091a0 <_dtoa_r+0x900>)
 8008f70:	4640      	mov	r0, r8
 8008f72:	4649      	mov	r1, r9
 8008f74:	07e3      	lsls	r3, r4, #31
 8008f76:	d504      	bpl.n	8008f82 <_dtoa_r+0x6e2>
 8008f78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f7c:	f002 ff60 	bl	800be40 <__aeabi_dmul>
 8008f80:	3601      	adds	r6, #1
 8008f82:	3508      	adds	r5, #8
 8008f84:	1064      	asrs	r4, r4, #1
 8008f86:	d1f5      	bne.n	8008f74 <_dtoa_r+0x6d4>
 8008f88:	4680      	mov	r8, r0
 8008f8a:	4689      	mov	r9, r1
 8008f8c:	4650      	mov	r0, sl
 8008f8e:	4659      	mov	r1, fp
 8008f90:	4642      	mov	r2, r8
 8008f92:	464b      	mov	r3, r9
 8008f94:	f003 f87e 	bl	800c094 <__aeabi_ddiv>
 8008f98:	4682      	mov	sl, r0
 8008f9a:	468b      	mov	fp, r1
 8008f9c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8008f9e:	2c00      	cmp	r4, #0
 8008fa0:	f000 8100 	beq.w	80091a4 <_dtoa_r+0x904>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4650      	mov	r0, sl
 8008fa8:	4659      	mov	r1, fp
 8008faa:	2200      	movs	r2, #0
 8008fac:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8008fb0:	2401      	movs	r4, #1
 8008fb2:	f003 f9b7 	bl	800c324 <__aeabi_dcmplt>
 8008fb6:	b900      	cbnz	r0, 8008fba <_dtoa_r+0x71a>
 8008fb8:	2400      	movs	r4, #0
 8008fba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008fbc:	2d00      	cmp	r5, #0
 8008fbe:	bfd4      	ite	le
 8008fc0:	2400      	movle	r4, #0
 8008fc2:	f004 0401 	andgt.w	r4, r4, #1
 8008fc6:	2c00      	cmp	r4, #0
 8008fc8:	f000 80ec 	beq.w	80091a4 <_dtoa_r+0x904>
 8008fcc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8008fce:	2c00      	cmp	r4, #0
 8008fd0:	f340 819b 	ble.w	800930a <_dtoa_r+0xa6a>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8008fdc:	4650      	mov	r0, sl
 8008fde:	4659      	mov	r1, fp
 8008fe0:	f002 ff2e 	bl	800be40 <__aeabi_dmul>
 8008fe4:	4682      	mov	sl, r0
 8008fe6:	1c70      	adds	r0, r6, #1
 8008fe8:	468b      	mov	fp, r1
 8008fea:	f002 fec3 	bl	800bd74 <__aeabi_i2d>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	4659      	mov	r1, fp
 8008ff6:	f002 ff23 	bl	800be40 <__aeabi_dmul>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8009002:	f002 fd6b 	bl	800badc <__adddf3>
 8009006:	9d05      	ldr	r5, [sp, #20]
 8009008:	3d01      	subs	r5, #1
 800900a:	9517      	str	r5, [sp, #92]	; 0x5c
 800900c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800900e:	4680      	mov	r8, r0
 8009010:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8009014:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009016:	2c00      	cmp	r4, #0
 8009018:	f000 81b0 	beq.w	800937c <_dtoa_r+0xadc>
 800901c:	4b5f      	ldr	r3, [pc, #380]	; (800919c <_dtoa_r+0x8fc>)
 800901e:	2100      	movs	r1, #0
 8009020:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009024:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009028:	2000      	movs	r0, #0
 800902a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800902e:	f003 f831 	bl	800c094 <__aeabi_ddiv>
 8009032:	4642      	mov	r2, r8
 8009034:	464b      	mov	r3, r9
 8009036:	f002 fd4f 	bl	800bad8 <__aeabi_dsub>
 800903a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800903e:	4659      	mov	r1, fp
 8009040:	4650      	mov	r0, sl
 8009042:	f003 f997 	bl	800c374 <__aeabi_d2iz>
 8009046:	4606      	mov	r6, r0
 8009048:	f002 fe94 	bl	800bd74 <__aeabi_i2d>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4650      	mov	r0, sl
 8009052:	4659      	mov	r1, fp
 8009054:	f002 fd40 	bl	800bad8 <__aeabi_dsub>
 8009058:	3630      	adds	r6, #48	; 0x30
 800905a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800905c:	b2f6      	uxtb	r6, r6
 800905e:	4682      	mov	sl, r0
 8009060:	468b      	mov	fp, r1
 8009062:	f804 6b01 	strb.w	r6, [r4], #1
 8009066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800906a:	4652      	mov	r2, sl
 800906c:	465b      	mov	r3, fp
 800906e:	9411      	str	r4, [sp, #68]	; 0x44
 8009070:	46a0      	mov	r8, r4
 8009072:	f003 f975 	bl	800c360 <__aeabi_dcmpgt>
 8009076:	2800      	cmp	r0, #0
 8009078:	f040 8325 	bne.w	80096c6 <_dtoa_r+0xe26>
 800907c:	2100      	movs	r1, #0
 800907e:	4652      	mov	r2, sl
 8009080:	465b      	mov	r3, fp
 8009082:	2000      	movs	r0, #0
 8009084:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8009088:	f002 fd26 	bl	800bad8 <__aeabi_dsub>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009094:	f003 f964 	bl	800c360 <__aeabi_dcmpgt>
 8009098:	2800      	cmp	r0, #0
 800909a:	f040 827f 	bne.w	800959c <_dtoa_r+0xcfc>
 800909e:	2d01      	cmp	r5, #1
 80090a0:	f340 8133 	ble.w	800930a <_dtoa_r+0xa6a>
 80090a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80090a8:	1945      	adds	r5, r0, r5
 80090aa:	e00f      	b.n	80090cc <_dtoa_r+0x82c>
 80090ac:	2100      	movs	r1, #0
 80090ae:	2000      	movs	r0, #0
 80090b0:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80090b4:	f002 fd10 	bl	800bad8 <__aeabi_dsub>
 80090b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090bc:	f003 f932 	bl	800c324 <__aeabi_dcmplt>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	f040 826b 	bne.w	800959c <_dtoa_r+0xcfc>
 80090c6:	42ac      	cmp	r4, r5
 80090c8:	f000 811f 	beq.w	800930a <_dtoa_r+0xa6a>
 80090cc:	2300      	movs	r3, #0
 80090ce:	2200      	movs	r2, #0
 80090d0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80090d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090d8:	f002 feb2 	bl	800be40 <__aeabi_dmul>
 80090dc:	2300      	movs	r3, #0
 80090de:	2200      	movs	r2, #0
 80090e0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80090e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090e8:	4650      	mov	r0, sl
 80090ea:	4659      	mov	r1, fp
 80090ec:	f002 fea8 	bl	800be40 <__aeabi_dmul>
 80090f0:	4680      	mov	r8, r0
 80090f2:	4689      	mov	r9, r1
 80090f4:	f003 f93e 	bl	800c374 <__aeabi_d2iz>
 80090f8:	4606      	mov	r6, r0
 80090fa:	f002 fe3b 	bl	800bd74 <__aeabi_i2d>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4640      	mov	r0, r8
 8009104:	4649      	mov	r1, r9
 8009106:	f002 fce7 	bl	800bad8 <__aeabi_dsub>
 800910a:	3630      	adds	r6, #48	; 0x30
 800910c:	b2f6      	uxtb	r6, r6
 800910e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009112:	f804 6b01 	strb.w	r6, [r4], #1
 8009116:	4682      	mov	sl, r0
 8009118:	468b      	mov	fp, r1
 800911a:	f003 f903 	bl	800c324 <__aeabi_dcmplt>
 800911e:	46a0      	mov	r8, r4
 8009120:	4652      	mov	r2, sl
 8009122:	465b      	mov	r3, fp
 8009124:	2800      	cmp	r0, #0
 8009126:	d0c1      	beq.n	80090ac <_dtoa_r+0x80c>
 8009128:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800912a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800912c:	9005      	str	r0, [sp, #20]
 800912e:	9409      	str	r4, [sp, #36]	; 0x24
 8009130:	e66e      	b.n	8008e10 <_dtoa_r+0x570>
 8009132:	2500      	movs	r5, #0
 8009134:	9512      	str	r5, [sp, #72]	; 0x48
 8009136:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8009138:	9805      	ldr	r0, [sp, #20]
 800913a:	182d      	adds	r5, r5, r0
 800913c:	f105 0901 	add.w	r9, r5, #1
 8009140:	f1b9 0f00 	cmp.w	r9, #0
 8009144:	9515      	str	r5, [sp, #84]	; 0x54
 8009146:	f340 819b 	ble.w	8009480 <_dtoa_r+0xbe0>
 800914a:	f1b9 0f0e 	cmp.w	r9, #14
 800914e:	bf8c      	ite	hi
 8009150:	2400      	movhi	r4, #0
 8009152:	f004 0401 	andls.w	r4, r4, #1
 8009156:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800915a:	e6d1      	b.n	8008f00 <_dtoa_r+0x660>
 800915c:	2500      	movs	r5, #0
 800915e:	9512      	str	r5, [sp, #72]	; 0x48
 8009160:	e6c2      	b.n	8008ee8 <_dtoa_r+0x648>
 8009162:	2501      	movs	r5, #1
 8009164:	9512      	str	r5, [sp, #72]	; 0x48
 8009166:	e7e6      	b.n	8009136 <_dtoa_r+0x896>
 8009168:	f1ba 0f00 	cmp.w	sl, #0
 800916c:	f47f aded 	bne.w	8008d4a <_dtoa_r+0x4aa>
 8009170:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009174:	4655      	mov	r5, sl
 8009176:	2b00      	cmp	r3, #0
 8009178:	f47f ade8 	bne.w	8008d4c <_dtoa_r+0x4ac>
 800917c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8009180:	ea0b 0303 	and.w	r3, fp, r3
 8009184:	461d      	mov	r5, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	f43f ade0 	beq.w	8008d4c <_dtoa_r+0x4ac>
 800918c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800918e:	3501      	adds	r5, #1
 8009190:	950f      	str	r5, [sp, #60]	; 0x3c
 8009192:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009194:	3501      	adds	r5, #1
 8009196:	950b      	str	r5, [sp, #44]	; 0x2c
 8009198:	2501      	movs	r5, #1
 800919a:	e5d7      	b.n	8008d4c <_dtoa_r+0x4ac>
 800919c:	0800c5b0 	.word	0x0800c5b0
 80091a0:	0800c6a0 	.word	0x0800c6a0
 80091a4:	4630      	mov	r0, r6
 80091a6:	f002 fde5 	bl	800bd74 <__aeabi_i2d>
 80091aa:	4652      	mov	r2, sl
 80091ac:	465b      	mov	r3, fp
 80091ae:	f002 fe47 	bl	800be40 <__aeabi_dmul>
 80091b2:	2300      	movs	r3, #0
 80091b4:	2200      	movs	r2, #0
 80091b6:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80091ba:	f002 fc8f 	bl	800badc <__adddf3>
 80091be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80091c0:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 80091c4:	4680      	mov	r8, r0
 80091c6:	46a1      	mov	r9, r4
 80091c8:	2d00      	cmp	r5, #0
 80091ca:	f040 80ac 	bne.w	8009326 <_dtoa_r+0xa86>
 80091ce:	2300      	movs	r3, #0
 80091d0:	2200      	movs	r2, #0
 80091d2:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80091d6:	4650      	mov	r0, sl
 80091d8:	4659      	mov	r1, fp
 80091da:	f002 fc7d 	bl	800bad8 <__aeabi_dsub>
 80091de:	4642      	mov	r2, r8
 80091e0:	4623      	mov	r3, r4
 80091e2:	4682      	mov	sl, r0
 80091e4:	468b      	mov	fp, r1
 80091e6:	f003 f8bb 	bl	800c360 <__aeabi_dcmpgt>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f040 80c3 	bne.w	8009376 <_dtoa_r+0xad6>
 80091f0:	4642      	mov	r2, r8
 80091f2:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80091f6:	4650      	mov	r0, sl
 80091f8:	4659      	mov	r1, fp
 80091fa:	f003 f893 	bl	800c324 <__aeabi_dcmplt>
 80091fe:	2800      	cmp	r0, #0
 8009200:	f000 8083 	beq.w	800930a <_dtoa_r+0xa6a>
 8009204:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009206:	9606      	str	r6, [sp, #24]
 8009208:	e666      	b.n	8008ed8 <_dtoa_r+0x638>
 800920a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800920c:	2800      	cmp	r0, #0
 800920e:	f000 8147 	beq.w	80094a0 <_dtoa_r+0xc00>
 8009212:	2c00      	cmp	r4, #0
 8009214:	dd05      	ble.n	8009222 <_dtoa_r+0x982>
 8009216:	4638      	mov	r0, r7
 8009218:	9906      	ldr	r1, [sp, #24]
 800921a:	4622      	mov	r2, r4
 800921c:	f001 f8f8 	bl	800a410 <__lshift>
 8009220:	9006      	str	r0, [sp, #24]
 8009222:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009226:	2d00      	cmp	r5, #0
 8009228:	f040 8201 	bne.w	800962e <_dtoa_r+0xd8e>
 800922c:	f00a 0001 	and.w	r0, sl, #1
 8009230:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009232:	9c06      	ldr	r4, [sp, #24]
 8009234:	900b      	str	r0, [sp, #44]	; 0x2c
 8009236:	4631      	mov	r1, r6
 8009238:	980a      	ldr	r0, [sp, #40]	; 0x28
 800923a:	f7ff faa1 	bl	8008780 <quorem>
 800923e:	4621      	mov	r1, r4
 8009240:	9008      	str	r0, [sp, #32]
 8009242:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009244:	f001 f944 	bl	800a4d0 <__mcmp>
 8009248:	4642      	mov	r2, r8
 800924a:	4681      	mov	r9, r0
 800924c:	4631      	mov	r1, r6
 800924e:	4638      	mov	r0, r7
 8009250:	f001 f95e 	bl	800a510 <__mdiff>
 8009254:	9a08      	ldr	r2, [sp, #32]
 8009256:	68c3      	ldr	r3, [r0, #12]
 8009258:	3230      	adds	r2, #48	; 0x30
 800925a:	4682      	mov	sl, r0
 800925c:	9206      	str	r2, [sp, #24]
 800925e:	f04f 0b01 	mov.w	fp, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d03d      	beq.n	80092e2 <_dtoa_r+0xa42>
 8009266:	4638      	mov	r0, r7
 8009268:	4651      	mov	r1, sl
 800926a:	f000 fefd 	bl	800a068 <_Bfree>
 800926e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009270:	ea5b 0303 	orrs.w	r3, fp, r3
 8009274:	d103      	bne.n	800927e <_dtoa_r+0x9de>
 8009276:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009278:	2800      	cmp	r0, #0
 800927a:	f000 8211 	beq.w	80096a0 <_dtoa_r+0xe00>
 800927e:	f1b9 0f00 	cmp.w	r9, #0
 8009282:	f2c0 819f 	blt.w	80095c4 <_dtoa_r+0xd24>
 8009286:	9826      	ldr	r0, [sp, #152]	; 0x98
 8009288:	ea59 0000 	orrs.w	r0, r9, r0
 800928c:	d103      	bne.n	8009296 <_dtoa_r+0x9f6>
 800928e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009290:	2900      	cmp	r1, #0
 8009292:	f000 8197 	beq.w	80095c4 <_dtoa_r+0xd24>
 8009296:	f1bb 0f00 	cmp.w	fp, #0
 800929a:	f300 81ea 	bgt.w	8009672 <_dtoa_r+0xdd2>
 800929e:	9a06      	ldr	r2, [sp, #24]
 80092a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092a2:	f805 2b01 	strb.w	r2, [r5], #1
 80092a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80092a8:	1a2b      	subs	r3, r5, r0
 80092aa:	428b      	cmp	r3, r1
 80092ac:	46aa      	mov	sl, r5
 80092ae:	f000 81db 	beq.w	8009668 <_dtoa_r+0xdc8>
 80092b2:	220a      	movs	r2, #10
 80092b4:	2300      	movs	r3, #0
 80092b6:	4638      	mov	r0, r7
 80092b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092ba:	f000 fedf 	bl	800a07c <__multadd>
 80092be:	4544      	cmp	r4, r8
 80092c0:	900a      	str	r0, [sp, #40]	; 0x28
 80092c2:	d027      	beq.n	8009314 <_dtoa_r+0xa74>
 80092c4:	4621      	mov	r1, r4
 80092c6:	220a      	movs	r2, #10
 80092c8:	2300      	movs	r3, #0
 80092ca:	4638      	mov	r0, r7
 80092cc:	f000 fed6 	bl	800a07c <__multadd>
 80092d0:	4641      	mov	r1, r8
 80092d2:	4604      	mov	r4, r0
 80092d4:	220a      	movs	r2, #10
 80092d6:	4638      	mov	r0, r7
 80092d8:	2300      	movs	r3, #0
 80092da:	f000 fecf 	bl	800a07c <__multadd>
 80092de:	4680      	mov	r8, r0
 80092e0:	e7a9      	b.n	8009236 <_dtoa_r+0x996>
 80092e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092e4:	4651      	mov	r1, sl
 80092e6:	f001 f8f3 	bl	800a4d0 <__mcmp>
 80092ea:	4683      	mov	fp, r0
 80092ec:	e7bb      	b.n	8009266 <_dtoa_r+0x9c6>
 80092ee:	4638      	mov	r0, r7
 80092f0:	4621      	mov	r1, r4
 80092f2:	f000 feb9 	bl	800a068 <_Bfree>
 80092f6:	e587      	b.n	8008e08 <_dtoa_r+0x568>
 80092f8:	231c      	movs	r3, #28
 80092fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80092fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092fe:	18c0      	adds	r0, r0, r3
 8009300:	18c9      	adds	r1, r1, r3
 8009302:	900f      	str	r0, [sp, #60]	; 0x3c
 8009304:	18e4      	adds	r4, r4, r3
 8009306:	910b      	str	r1, [sp, #44]	; 0x2c
 8009308:	e538      	b.n	8008d7c <_dtoa_r+0x4dc>
 800930a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800930e:	4682      	mov	sl, r0
 8009310:	468b      	mov	fp, r1
 8009312:	e406      	b.n	8008b22 <_dtoa_r+0x282>
 8009314:	4621      	mov	r1, r4
 8009316:	4638      	mov	r0, r7
 8009318:	220a      	movs	r2, #10
 800931a:	2300      	movs	r3, #0
 800931c:	f000 feae 	bl	800a07c <__multadd>
 8009320:	4604      	mov	r4, r0
 8009322:	4680      	mov	r8, r0
 8009324:	e787      	b.n	8009236 <_dtoa_r+0x996>
 8009326:	9c05      	ldr	r4, [sp, #20]
 8009328:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800932a:	9417      	str	r4, [sp, #92]	; 0x5c
 800932c:	e672      	b.n	8009014 <_dtoa_r+0x774>
 800932e:	9d05      	ldr	r5, [sp, #20]
 8009330:	426c      	negs	r4, r5
 8009332:	2c00      	cmp	r4, #0
 8009334:	f000 80fb 	beq.w	800952e <_dtoa_r+0xc8e>
 8009338:	4ba0      	ldr	r3, [pc, #640]	; (80095bc <_dtoa_r+0xd1c>)
 800933a:	f004 020f 	and.w	r2, r4, #15
 800933e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009342:	4650      	mov	r0, sl
 8009344:	4659      	mov	r1, fp
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f002 fd79 	bl	800be40 <__aeabi_dmul>
 800934e:	1124      	asrs	r4, r4, #4
 8009350:	4682      	mov	sl, r0
 8009352:	468b      	mov	fp, r1
 8009354:	f000 80eb 	beq.w	800952e <_dtoa_r+0xc8e>
 8009358:	4d99      	ldr	r5, [pc, #612]	; (80095c0 <_dtoa_r+0xd20>)
 800935a:	2602      	movs	r6, #2
 800935c:	07e2      	lsls	r2, r4, #31
 800935e:	d504      	bpl.n	800936a <_dtoa_r+0xaca>
 8009360:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009364:	f002 fd6c 	bl	800be40 <__aeabi_dmul>
 8009368:	3601      	adds	r6, #1
 800936a:	3508      	adds	r5, #8
 800936c:	1064      	asrs	r4, r4, #1
 800936e:	d1f5      	bne.n	800935c <_dtoa_r+0xabc>
 8009370:	4682      	mov	sl, r0
 8009372:	468b      	mov	fp, r1
 8009374:	e612      	b.n	8008f9c <_dtoa_r+0x6fc>
 8009376:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009378:	9606      	str	r6, [sp, #24]
 800937a:	e530      	b.n	8008dde <_dtoa_r+0x53e>
 800937c:	498f      	ldr	r1, [pc, #572]	; (80095bc <_dtoa_r+0xd1c>)
 800937e:	1e6c      	subs	r4, r5, #1
 8009380:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009384:	4642      	mov	r2, r8
 8009386:	464b      	mov	r3, r9
 8009388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800938c:	9406      	str	r4, [sp, #24]
 800938e:	f002 fd57 	bl	800be40 <__aeabi_dmul>
 8009392:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8009396:	4659      	mov	r1, fp
 8009398:	4650      	mov	r0, sl
 800939a:	f002 ffeb 	bl	800c374 <__aeabi_d2iz>
 800939e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093a0:	4604      	mov	r4, r0
 80093a2:	9111      	str	r1, [sp, #68]	; 0x44
 80093a4:	f002 fce6 	bl	800bd74 <__aeabi_i2d>
 80093a8:	460b      	mov	r3, r1
 80093aa:	4602      	mov	r2, r0
 80093ac:	4659      	mov	r1, fp
 80093ae:	4650      	mov	r0, sl
 80093b0:	f002 fb92 	bl	800bad8 <__aeabi_dsub>
 80093b4:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80093b8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80093ba:	f804 3b01 	strb.w	r3, [r4], #1
 80093be:	2d01      	cmp	r5, #1
 80093c0:	4682      	mov	sl, r0
 80093c2:	468b      	mov	fp, r1
 80093c4:	9411      	str	r4, [sp, #68]	; 0x44
 80093c6:	46a0      	mov	r8, r4
 80093c8:	d020      	beq.n	800940c <_dtoa_r+0xb6c>
 80093ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80093cc:	1e66      	subs	r6, r4, #1
 80093ce:	1976      	adds	r6, r6, r5
 80093d0:	2300      	movs	r3, #0
 80093d2:	2200      	movs	r2, #0
 80093d4:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80093d8:	f002 fd32 	bl	800be40 <__aeabi_dmul>
 80093dc:	4689      	mov	r9, r1
 80093de:	4680      	mov	r8, r0
 80093e0:	f002 ffc8 	bl	800c374 <__aeabi_d2iz>
 80093e4:	4605      	mov	r5, r0
 80093e6:	f002 fcc5 	bl	800bd74 <__aeabi_i2d>
 80093ea:	3530      	adds	r5, #48	; 0x30
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4640      	mov	r0, r8
 80093f2:	4649      	mov	r1, r9
 80093f4:	f002 fb70 	bl	800bad8 <__aeabi_dsub>
 80093f8:	f804 5f01 	strb.w	r5, [r4, #1]!
 80093fc:	42b4      	cmp	r4, r6
 80093fe:	d1e7      	bne.n	80093d0 <_dtoa_r+0xb30>
 8009400:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009402:	9c06      	ldr	r4, [sp, #24]
 8009404:	4682      	mov	sl, r0
 8009406:	468b      	mov	fp, r1
 8009408:	eb05 0804 	add.w	r8, r5, r4
 800940c:	2300      	movs	r3, #0
 800940e:	2200      	movs	r2, #0
 8009410:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8009414:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8009418:	f002 fb60 	bl	800badc <__adddf3>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	4650      	mov	r0, sl
 8009422:	4659      	mov	r1, fp
 8009424:	f002 ff9c 	bl	800c360 <__aeabi_dcmpgt>
 8009428:	2800      	cmp	r0, #0
 800942a:	f000 808a 	beq.w	8009542 <_dtoa_r+0xca2>
 800942e:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8009432:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009434:	e422      	b.n	8008c7c <_dtoa_r+0x3dc>
 8009436:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009438:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800943c:	e4e8      	b.n	8008e10 <_dtoa_r+0x570>
 800943e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009440:	4631      	mov	r1, r6
 8009442:	f001 f845 	bl	800a4d0 <__mcmp>
 8009446:	2800      	cmp	r0, #0
 8009448:	f6bf acad 	bge.w	8008da6 <_dtoa_r+0x506>
 800944c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800944e:	220a      	movs	r2, #10
 8009450:	4638      	mov	r0, r7
 8009452:	2300      	movs	r3, #0
 8009454:	f000 fe12 	bl	800a07c <__multadd>
 8009458:	9905      	ldr	r1, [sp, #20]
 800945a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800945c:	900a      	str	r0, [sp, #40]	; 0x28
 800945e:	3901      	subs	r1, #1
 8009460:	9105      	str	r1, [sp, #20]
 8009462:	2a00      	cmp	r2, #0
 8009464:	f040 8136 	bne.w	80096d4 <_dtoa_r+0xe34>
 8009468:	9815      	ldr	r0, [sp, #84]	; 0x54
 800946a:	900e      	str	r0, [sp, #56]	; 0x38
 800946c:	e49b      	b.n	8008da6 <_dtoa_r+0x506>
 800946e:	6933      	ldr	r3, [r6, #16]
 8009470:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009474:	6918      	ldr	r0, [r3, #16]
 8009476:	f000 fe91 	bl	800a19c <__hi0bits>
 800947a:	f1c0 0320 	rsb	r3, r0, #32
 800947e:	e46a      	b.n	8008d56 <_dtoa_r+0x4b6>
 8009480:	f1b9 0f0e 	cmp.w	r9, #14
 8009484:	bf8c      	ite	hi
 8009486:	2300      	movhi	r3, #0
 8009488:	2301      	movls	r3, #1
 800948a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800948e:	2100      	movs	r1, #0
 8009490:	6479      	str	r1, [r7, #68]	; 0x44
 8009492:	401c      	ands	r4, r3
 8009494:	e543      	b.n	8008f1e <_dtoa_r+0x67e>
 8009496:	2301      	movs	r3, #1
 8009498:	9315      	str	r3, [sp, #84]	; 0x54
 800949a:	930e      	str	r3, [sp, #56]	; 0x38
 800949c:	9327      	str	r3, [sp, #156]	; 0x9c
 800949e:	e7f6      	b.n	800948e <_dtoa_r+0xbee>
 80094a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80094a2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80094a6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80094aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80094ac:	e006      	b.n	80094bc <_dtoa_r+0xc1c>
 80094ae:	4651      	mov	r1, sl
 80094b0:	4638      	mov	r0, r7
 80094b2:	220a      	movs	r2, #10
 80094b4:	2300      	movs	r3, #0
 80094b6:	f000 fde1 	bl	800a07c <__multadd>
 80094ba:	4682      	mov	sl, r0
 80094bc:	4631      	mov	r1, r6
 80094be:	4650      	mov	r0, sl
 80094c0:	f7ff f95e 	bl	8008780 <quorem>
 80094c4:	3030      	adds	r0, #48	; 0x30
 80094c6:	5528      	strb	r0, [r5, r4]
 80094c8:	3401      	adds	r4, #1
 80094ca:	45a0      	cmp	r8, r4
 80094cc:	dcef      	bgt.n	80094ae <_dtoa_r+0xc0e>
 80094ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80094d0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80094d4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80094d8:	4681      	mov	r9, r0
 80094da:	2c01      	cmp	r4, #1
 80094dc:	bfac      	ite	ge
 80094de:	44a2      	addge	sl, r4
 80094e0:	f10a 0a01 	addlt.w	sl, sl, #1
 80094e4:	2400      	movs	r4, #0
 80094e6:	2201      	movs	r2, #1
 80094e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094ea:	4638      	mov	r0, r7
 80094ec:	f000 ff90 	bl	800a410 <__lshift>
 80094f0:	4631      	mov	r1, r6
 80094f2:	900a      	str	r0, [sp, #40]	; 0x28
 80094f4:	f000 ffec 	bl	800a4d0 <__mcmp>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	f340 8082 	ble.w	8009602 <_dtoa_r+0xd62>
 80094fe:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8009502:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009504:	1c6a      	adds	r2, r5, #1
 8009506:	e003      	b.n	8009510 <_dtoa_r+0xc70>
 8009508:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 800950c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009510:	2b39      	cmp	r3, #57	; 0x39
 8009512:	f040 8084 	bne.w	800961e <_dtoa_r+0xd7e>
 8009516:	4592      	cmp	sl, r2
 8009518:	d1f6      	bne.n	8009508 <_dtoa_r+0xc68>
 800951a:	9805      	ldr	r0, [sp, #20]
 800951c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800951e:	3001      	adds	r0, #1
 8009520:	2331      	movs	r3, #49	; 0x31
 8009522:	9005      	str	r0, [sp, #20]
 8009524:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8009528:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800952c:	e461      	b.n	8008df2 <_dtoa_r+0x552>
 800952e:	2602      	movs	r6, #2
 8009530:	e534      	b.n	8008f9c <_dtoa_r+0x6fc>
 8009532:	4638      	mov	r0, r7
 8009534:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009536:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009538:	f000 ff1e 	bl	800a378 <__pow5mult>
 800953c:	900a      	str	r0, [sp, #40]	; 0x28
 800953e:	f7ff bbf2 	b.w	8008d26 <_dtoa_r+0x486>
 8009542:	2100      	movs	r1, #0
 8009544:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009548:	2000      	movs	r0, #0
 800954a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800954e:	f002 fac3 	bl	800bad8 <__aeabi_dsub>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4650      	mov	r0, sl
 8009558:	4659      	mov	r1, fp
 800955a:	f002 fee3 	bl	800c324 <__aeabi_dcmplt>
 800955e:	2800      	cmp	r0, #0
 8009560:	f43f aed3 	beq.w	800930a <_dtoa_r+0xa6a>
 8009564:	4642      	mov	r2, r8
 8009566:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 800956a:	2b30      	cmp	r3, #48	; 0x30
 800956c:	d0fa      	beq.n	8009564 <_dtoa_r+0xcc4>
 800956e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8009570:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009572:	9405      	str	r4, [sp, #20]
 8009574:	9209      	str	r2, [sp, #36]	; 0x24
 8009576:	e44b      	b.n	8008e10 <_dtoa_r+0x570>
 8009578:	4638      	mov	r0, r7
 800957a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800957c:	f000 fefc 	bl	800a378 <__pow5mult>
 8009580:	900a      	str	r0, [sp, #40]	; 0x28
 8009582:	f7ff bbd0 	b.w	8008d26 <_dtoa_r+0x486>
 8009586:	2600      	movs	r6, #0
 8009588:	9606      	str	r6, [sp, #24]
 800958a:	e4a5      	b.n	8008ed8 <_dtoa_r+0x638>
 800958c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800958e:	2d00      	cmp	r5, #0
 8009590:	d064      	beq.n	800965c <_dtoa_r+0xdbc>
 8009592:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009596:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009598:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800959a:	e47d      	b.n	8008e98 <_dtoa_r+0x5f8>
 800959c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800959e:	f7ff bb6d 	b.w	8008c7c <_dtoa_r+0x3dc>
 80095a2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80095a4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80095a8:	1c72      	adds	r2, r6, #1
 80095aa:	b2d2      	uxtb	r2, r2
 80095ac:	9405      	str	r4, [sp, #20]
 80095ae:	f7ff bb7b 	b.w	8008ca8 <_dtoa_r+0x408>
 80095b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80095b4:	2300      	movs	r3, #0
 80095b6:	1b04      	subs	r4, r0, r4
 80095b8:	e46e      	b.n	8008e98 <_dtoa_r+0x5f8>
 80095ba:	bf00      	nop
 80095bc:	0800c5b0 	.word	0x0800c5b0
 80095c0:	0800c6a0 	.word	0x0800c6a0
 80095c4:	f1bb 0f00 	cmp.w	fp, #0
 80095c8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80095cc:	dd10      	ble.n	80095f0 <_dtoa_r+0xd50>
 80095ce:	2201      	movs	r2, #1
 80095d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095d2:	4638      	mov	r0, r7
 80095d4:	f000 ff1c 	bl	800a410 <__lshift>
 80095d8:	4631      	mov	r1, r6
 80095da:	900a      	str	r0, [sp, #40]	; 0x28
 80095dc:	f000 ff78 	bl	800a4d0 <__mcmp>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	dd6b      	ble.n	80096bc <_dtoa_r+0xe1c>
 80095e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095e8:	d053      	beq.n	8009692 <_dtoa_r+0xdf2>
 80095ea:	9b08      	ldr	r3, [sp, #32]
 80095ec:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80095f0:	462b      	mov	r3, r5
 80095f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095f4:	f803 9b01 	strb.w	r9, [r3], #1
 80095f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80095fc:	9309      	str	r3, [sp, #36]	; 0x24
 80095fe:	f7ff bbf8 	b.w	8008df2 <_dtoa_r+0x552>
 8009602:	d103      	bne.n	800960c <_dtoa_r+0xd6c>
 8009604:	f019 0f01 	tst.w	r9, #1
 8009608:	f47f af79 	bne.w	80094fe <_dtoa_r+0xc5e>
 800960c:	4652      	mov	r2, sl
 800960e:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8009612:	2b30      	cmp	r3, #48	; 0x30
 8009614:	d0fa      	beq.n	800960c <_dtoa_r+0xd6c>
 8009616:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009618:	9209      	str	r2, [sp, #36]	; 0x24
 800961a:	f7ff bbea 	b.w	8008df2 <_dtoa_r+0x552>
 800961e:	3301      	adds	r3, #1
 8009620:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009622:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8009626:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800962a:	f7ff bbe2 	b.w	8008df2 <_dtoa_r+0x552>
 800962e:	9c06      	ldr	r4, [sp, #24]
 8009630:	4638      	mov	r0, r7
 8009632:	6861      	ldr	r1, [r4, #4]
 8009634:	f000 fcf2 	bl	800a01c <_Balloc>
 8009638:	9d06      	ldr	r5, [sp, #24]
 800963a:	692a      	ldr	r2, [r5, #16]
 800963c:	3202      	adds	r2, #2
 800963e:	4604      	mov	r4, r0
 8009640:	0092      	lsls	r2, r2, #2
 8009642:	f105 010c 	add.w	r1, r5, #12
 8009646:	f100 000c 	add.w	r0, r0, #12
 800964a:	f000 fc9f 	bl	8009f8c <memcpy>
 800964e:	4638      	mov	r0, r7
 8009650:	4621      	mov	r1, r4
 8009652:	2201      	movs	r2, #1
 8009654:	f000 fedc 	bl	800a410 <__lshift>
 8009658:	4680      	mov	r8, r0
 800965a:	e5e7      	b.n	800922c <_dtoa_r+0x98c>
 800965c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800965e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009660:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009662:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009666:	e417      	b.n	8008e98 <_dtoa_r+0x5f8>
 8009668:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800966c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009670:	e739      	b.n	80094e6 <_dtoa_r+0xc46>
 8009672:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8009676:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800967a:	d00a      	beq.n	8009692 <_dtoa_r+0xdf2>
 800967c:	462b      	mov	r3, r5
 800967e:	f109 0901 	add.w	r9, r9, #1
 8009682:	f803 9b01 	strb.w	r9, [r3], #1
 8009686:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009688:	f8cd 8018 	str.w	r8, [sp, #24]
 800968c:	9309      	str	r3, [sp, #36]	; 0x24
 800968e:	f7ff bbb0 	b.w	8008df2 <_dtoa_r+0x552>
 8009692:	46aa      	mov	sl, r5
 8009694:	2339      	movs	r3, #57	; 0x39
 8009696:	f80a 3b01 	strb.w	r3, [sl], #1
 800969a:	f8cd 8018 	str.w	r8, [sp, #24]
 800969e:	e730      	b.n	8009502 <_dtoa_r+0xc62>
 80096a0:	464b      	mov	r3, r9
 80096a2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80096a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096aa:	d0f2      	beq.n	8009692 <_dtoa_r+0xdf2>
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dc9c      	bgt.n	80095ea <_dtoa_r+0xd4a>
 80096b0:	e79e      	b.n	80095f0 <_dtoa_r+0xd50>
 80096b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80096b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80096b6:	9409      	str	r4, [sp, #36]	; 0x24
 80096b8:	f7ff bbaa 	b.w	8008e10 <_dtoa_r+0x570>
 80096bc:	d198      	bne.n	80095f0 <_dtoa_r+0xd50>
 80096be:	f019 0f01 	tst.w	r9, #1
 80096c2:	d095      	beq.n	80095f0 <_dtoa_r+0xd50>
 80096c4:	e78e      	b.n	80095e4 <_dtoa_r+0xd44>
 80096c6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80096c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80096ca:	9405      	str	r4, [sp, #20]
 80096cc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80096ce:	9409      	str	r4, [sp, #36]	; 0x24
 80096d0:	f7ff bb9e 	b.w	8008e10 <_dtoa_r+0x570>
 80096d4:	2300      	movs	r3, #0
 80096d6:	4638      	mov	r0, r7
 80096d8:	9906      	ldr	r1, [sp, #24]
 80096da:	220a      	movs	r2, #10
 80096dc:	f000 fcce 	bl	800a07c <__multadd>
 80096e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096e2:	9006      	str	r0, [sp, #24]
 80096e4:	930e      	str	r3, [sp, #56]	; 0x38
 80096e6:	f7ff bb5e 	b.w	8008da6 <_dtoa_r+0x506>
 80096ea:	f43f ab47 	beq.w	8008d7c <_dtoa_r+0x4dc>
 80096ee:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80096f2:	e602      	b.n	80092fa <_dtoa_r+0xa5a>
 80096f4:	f3af 8000 	nop.w

080096f8 <_malloc_trim_r>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	4d22      	ldr	r5, [pc, #136]	; (8009784 <_malloc_trim_r+0x8c>)
 80096fc:	460f      	mov	r7, r1
 80096fe:	4604      	mov	r4, r0
 8009700:	f000 fc88 	bl	800a014 <__malloc_lock>
 8009704:	68ab      	ldr	r3, [r5, #8]
 8009706:	685e      	ldr	r6, [r3, #4]
 8009708:	f026 0603 	bic.w	r6, r6, #3
 800970c:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8009710:	1bdf      	subs	r7, r3, r7
 8009712:	0b3f      	lsrs	r7, r7, #12
 8009714:	3f01      	subs	r7, #1
 8009716:	033f      	lsls	r7, r7, #12
 8009718:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800971c:	4620      	mov	r0, r4
 800971e:	db07      	blt.n	8009730 <_malloc_trim_r+0x38>
 8009720:	2100      	movs	r1, #0
 8009722:	f001 f907 	bl	800a934 <_sbrk_r>
 8009726:	68ab      	ldr	r3, [r5, #8]
 8009728:	199b      	adds	r3, r3, r6
 800972a:	4298      	cmp	r0, r3
 800972c:	4620      	mov	r0, r4
 800972e:	d003      	beq.n	8009738 <_malloc_trim_r+0x40>
 8009730:	f000 fc72 	bl	800a018 <__malloc_unlock>
 8009734:	2000      	movs	r0, #0
 8009736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009738:	4279      	negs	r1, r7
 800973a:	f001 f8fb 	bl	800a934 <_sbrk_r>
 800973e:	3001      	adds	r0, #1
 8009740:	d00d      	beq.n	800975e <_malloc_trim_r+0x66>
 8009742:	4b11      	ldr	r3, [pc, #68]	; (8009788 <_malloc_trim_r+0x90>)
 8009744:	68aa      	ldr	r2, [r5, #8]
 8009746:	6819      	ldr	r1, [r3, #0]
 8009748:	1bf6      	subs	r6, r6, r7
 800974a:	f046 0601 	orr.w	r6, r6, #1
 800974e:	1bcf      	subs	r7, r1, r7
 8009750:	4620      	mov	r0, r4
 8009752:	6056      	str	r6, [r2, #4]
 8009754:	601f      	str	r7, [r3, #0]
 8009756:	f000 fc5f 	bl	800a018 <__malloc_unlock>
 800975a:	2001      	movs	r0, #1
 800975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800975e:	2100      	movs	r1, #0
 8009760:	4620      	mov	r0, r4
 8009762:	f001 f8e7 	bl	800a934 <_sbrk_r>
 8009766:	68ab      	ldr	r3, [r5, #8]
 8009768:	1ac2      	subs	r2, r0, r3
 800976a:	2a0f      	cmp	r2, #15
 800976c:	dd07      	ble.n	800977e <_malloc_trim_r+0x86>
 800976e:	4907      	ldr	r1, [pc, #28]	; (800978c <_malloc_trim_r+0x94>)
 8009770:	6809      	ldr	r1, [r1, #0]
 8009772:	1a40      	subs	r0, r0, r1
 8009774:	4904      	ldr	r1, [pc, #16]	; (8009788 <_malloc_trim_r+0x90>)
 8009776:	f042 0201 	orr.w	r2, r2, #1
 800977a:	6008      	str	r0, [r1, #0]
 800977c:	605a      	str	r2, [r3, #4]
 800977e:	4620      	mov	r0, r4
 8009780:	e7d6      	b.n	8009730 <_malloc_trim_r+0x38>
 8009782:	bf00      	nop
 8009784:	200005a4 	.word	0x200005a4
 8009788:	200009cc 	.word	0x200009cc
 800978c:	200009ac 	.word	0x200009ac

08009790 <_free_r>:
 8009790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009794:	460d      	mov	r5, r1
 8009796:	4604      	mov	r4, r0
 8009798:	2900      	cmp	r1, #0
 800979a:	d06f      	beq.n	800987c <_free_r+0xec>
 800979c:	f000 fc3a 	bl	800a014 <__malloc_lock>
 80097a0:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80097a4:	4e58      	ldr	r6, [pc, #352]	; (8009908 <_free_r+0x178>)
 80097a6:	f1a5 0108 	sub.w	r1, r5, #8
 80097aa:	f020 0301 	bic.w	r3, r0, #1
 80097ae:	18ca      	adds	r2, r1, r3
 80097b0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80097b4:	6857      	ldr	r7, [r2, #4]
 80097b6:	4594      	cmp	ip, r2
 80097b8:	f027 0703 	bic.w	r7, r7, #3
 80097bc:	d07c      	beq.n	80098b8 <_free_r+0x128>
 80097be:	f010 0001 	ands.w	r0, r0, #1
 80097c2:	6057      	str	r7, [r2, #4]
 80097c4:	d049      	beq.n	800985a <_free_r+0xca>
 80097c6:	2000      	movs	r0, #0
 80097c8:	19d5      	adds	r5, r2, r7
 80097ca:	686d      	ldr	r5, [r5, #4]
 80097cc:	f015 0f01 	tst.w	r5, #1
 80097d0:	d106      	bne.n	80097e0 <_free_r+0x50>
 80097d2:	19db      	adds	r3, r3, r7
 80097d4:	6895      	ldr	r5, [r2, #8]
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d062      	beq.n	80098a0 <_free_r+0x110>
 80097da:	68d2      	ldr	r2, [r2, #12]
 80097dc:	60ea      	str	r2, [r5, #12]
 80097de:	6095      	str	r5, [r2, #8]
 80097e0:	f043 0201 	orr.w	r2, r3, #1
 80097e4:	604a      	str	r2, [r1, #4]
 80097e6:	50cb      	str	r3, [r1, r3]
 80097e8:	bb90      	cbnz	r0, 8009850 <_free_r+0xc0>
 80097ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097ee:	d347      	bcc.n	8009880 <_free_r+0xf0>
 80097f0:	099d      	lsrs	r5, r3, #6
 80097f2:	3538      	adds	r5, #56	; 0x38
 80097f4:	0a5a      	lsrs	r2, r3, #9
 80097f6:	00e8      	lsls	r0, r5, #3
 80097f8:	2a04      	cmp	r2, #4
 80097fa:	d916      	bls.n	800982a <_free_r+0x9a>
 80097fc:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8009800:	00e8      	lsls	r0, r5, #3
 8009802:	2a14      	cmp	r2, #20
 8009804:	d911      	bls.n	800982a <_free_r+0x9a>
 8009806:	0b1d      	lsrs	r5, r3, #12
 8009808:	356e      	adds	r5, #110	; 0x6e
 800980a:	00e8      	lsls	r0, r5, #3
 800980c:	2a54      	cmp	r2, #84	; 0x54
 800980e:	d90c      	bls.n	800982a <_free_r+0x9a>
 8009810:	0bdd      	lsrs	r5, r3, #15
 8009812:	3577      	adds	r5, #119	; 0x77
 8009814:	00e8      	lsls	r0, r5, #3
 8009816:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800981a:	d906      	bls.n	800982a <_free_r+0x9a>
 800981c:	f240 5054 	movw	r0, #1364	; 0x554
 8009820:	4282      	cmp	r2, r0
 8009822:	d86d      	bhi.n	8009900 <_free_r+0x170>
 8009824:	0c9d      	lsrs	r5, r3, #18
 8009826:	357c      	adds	r5, #124	; 0x7c
 8009828:	00e8      	lsls	r0, r5, #3
 800982a:	1986      	adds	r6, r0, r6
 800982c:	4836      	ldr	r0, [pc, #216]	; (8009908 <_free_r+0x178>)
 800982e:	68b2      	ldr	r2, [r6, #8]
 8009830:	42b2      	cmp	r2, r6
 8009832:	d103      	bne.n	800983c <_free_r+0xac>
 8009834:	e05b      	b.n	80098ee <_free_r+0x15e>
 8009836:	6892      	ldr	r2, [r2, #8]
 8009838:	4296      	cmp	r6, r2
 800983a:	d004      	beq.n	8009846 <_free_r+0xb6>
 800983c:	6850      	ldr	r0, [r2, #4]
 800983e:	f020 0003 	bic.w	r0, r0, #3
 8009842:	4283      	cmp	r3, r0
 8009844:	d3f7      	bcc.n	8009836 <_free_r+0xa6>
 8009846:	68d3      	ldr	r3, [r2, #12]
 8009848:	60cb      	str	r3, [r1, #12]
 800984a:	608a      	str	r2, [r1, #8]
 800984c:	60d1      	str	r1, [r2, #12]
 800984e:	6099      	str	r1, [r3, #8]
 8009850:	4620      	mov	r0, r4
 8009852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009856:	f000 bbdf 	b.w	800a018 <__malloc_unlock>
 800985a:	f855 cc08 	ldr.w	ip, [r5, #-8]
 800985e:	ebcc 0101 	rsb	r1, ip, r1
 8009862:	f106 0808 	add.w	r8, r6, #8
 8009866:	688d      	ldr	r5, [r1, #8]
 8009868:	4545      	cmp	r5, r8
 800986a:	4463      	add	r3, ip
 800986c:	d03d      	beq.n	80098ea <_free_r+0x15a>
 800986e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8009872:	f8c5 c00c 	str.w	ip, [r5, #12]
 8009876:	f8cc 5008 	str.w	r5, [ip, #8]
 800987a:	e7a5      	b.n	80097c8 <_free_r+0x38>
 800987c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009880:	08db      	lsrs	r3, r3, #3
 8009882:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8009886:	6875      	ldr	r5, [r6, #4]
 8009888:	6890      	ldr	r0, [r2, #8]
 800988a:	60ca      	str	r2, [r1, #12]
 800988c:	109b      	asrs	r3, r3, #2
 800988e:	2701      	movs	r7, #1
 8009890:	fa17 f303 	lsls.w	r3, r7, r3
 8009894:	432b      	orrs	r3, r5
 8009896:	6088      	str	r0, [r1, #8]
 8009898:	6073      	str	r3, [r6, #4]
 800989a:	6091      	str	r1, [r2, #8]
 800989c:	60c1      	str	r1, [r0, #12]
 800989e:	e7d7      	b.n	8009850 <_free_r+0xc0>
 80098a0:	4f1a      	ldr	r7, [pc, #104]	; (800990c <_free_r+0x17c>)
 80098a2:	42bd      	cmp	r5, r7
 80098a4:	d199      	bne.n	80097da <_free_r+0x4a>
 80098a6:	f043 0201 	orr.w	r2, r3, #1
 80098aa:	6171      	str	r1, [r6, #20]
 80098ac:	6131      	str	r1, [r6, #16]
 80098ae:	60cd      	str	r5, [r1, #12]
 80098b0:	608d      	str	r5, [r1, #8]
 80098b2:	604a      	str	r2, [r1, #4]
 80098b4:	50cb      	str	r3, [r1, r3]
 80098b6:	e7cb      	b.n	8009850 <_free_r+0xc0>
 80098b8:	07c2      	lsls	r2, r0, #31
 80098ba:	443b      	add	r3, r7
 80098bc:	d407      	bmi.n	80098ce <_free_r+0x13e>
 80098be:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80098c2:	1a89      	subs	r1, r1, r2
 80098c4:	189b      	adds	r3, r3, r2
 80098c6:	6888      	ldr	r0, [r1, #8]
 80098c8:	68ca      	ldr	r2, [r1, #12]
 80098ca:	60c2      	str	r2, [r0, #12]
 80098cc:	6090      	str	r0, [r2, #8]
 80098ce:	4a10      	ldr	r2, [pc, #64]	; (8009910 <_free_r+0x180>)
 80098d0:	60b1      	str	r1, [r6, #8]
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	f043 0001 	orr.w	r0, r3, #1
 80098d8:	4293      	cmp	r3, r2
 80098da:	6048      	str	r0, [r1, #4]
 80098dc:	d3b8      	bcc.n	8009850 <_free_r+0xc0>
 80098de:	4b0d      	ldr	r3, [pc, #52]	; (8009914 <_free_r+0x184>)
 80098e0:	4620      	mov	r0, r4
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	f7ff ff08 	bl	80096f8 <_malloc_trim_r>
 80098e8:	e7b2      	b.n	8009850 <_free_r+0xc0>
 80098ea:	2001      	movs	r0, #1
 80098ec:	e76c      	b.n	80097c8 <_free_r+0x38>
 80098ee:	6843      	ldr	r3, [r0, #4]
 80098f0:	10ad      	asrs	r5, r5, #2
 80098f2:	2601      	movs	r6, #1
 80098f4:	fa16 f505 	lsls.w	r5, r6, r5
 80098f8:	432b      	orrs	r3, r5
 80098fa:	6043      	str	r3, [r0, #4]
 80098fc:	4613      	mov	r3, r2
 80098fe:	e7a3      	b.n	8009848 <_free_r+0xb8>
 8009900:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8009904:	257e      	movs	r5, #126	; 0x7e
 8009906:	e790      	b.n	800982a <_free_r+0x9a>
 8009908:	200005a4 	.word	0x200005a4
 800990c:	200005ac 	.word	0x200005ac
 8009910:	200009b0 	.word	0x200009b0
 8009914:	200009c8 	.word	0x200009c8

08009918 <_setlocale_r>:
 8009918:	b510      	push	{r4, lr}
 800991a:	4614      	mov	r4, r2
 800991c:	b122      	cbz	r2, 8009928 <_setlocale_r+0x10>
 800991e:	4610      	mov	r0, r2
 8009920:	490b      	ldr	r1, [pc, #44]	; (8009950 <_setlocale_r+0x38>)
 8009922:	f001 f819 	bl	800a958 <strcmp>
 8009926:	b908      	cbnz	r0, 800992c <_setlocale_r+0x14>
 8009928:	480a      	ldr	r0, [pc, #40]	; (8009954 <_setlocale_r+0x3c>)
 800992a:	bd10      	pop	{r4, pc}
 800992c:	4620      	mov	r0, r4
 800992e:	4909      	ldr	r1, [pc, #36]	; (8009954 <_setlocale_r+0x3c>)
 8009930:	f001 f812 	bl	800a958 <strcmp>
 8009934:	b908      	cbnz	r0, 800993a <_setlocale_r+0x22>
 8009936:	4807      	ldr	r0, [pc, #28]	; (8009954 <_setlocale_r+0x3c>)
 8009938:	bd10      	pop	{r4, pc}
 800993a:	4620      	mov	r0, r4
 800993c:	4906      	ldr	r1, [pc, #24]	; (8009958 <_setlocale_r+0x40>)
 800993e:	f001 f80b 	bl	800a958 <strcmp>
 8009942:	4b04      	ldr	r3, [pc, #16]	; (8009954 <_setlocale_r+0x3c>)
 8009944:	2800      	cmp	r0, #0
 8009946:	bf0c      	ite	eq
 8009948:	4618      	moveq	r0, r3
 800994a:	2000      	movne	r0, #0
 800994c:	bd10      	pop	{r4, pc}
 800994e:	bf00      	nop
 8009950:	0800c790 	.word	0x0800c790
 8009954:	0800c78c 	.word	0x0800c78c
 8009958:	0800c708 	.word	0x0800c708

0800995c <__locale_charset>:
 800995c:	f240 5028 	movw	r0, #1320	; 0x528
 8009960:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop

08009968 <__locale_mb_cur_max>:
 8009968:	f240 5328 	movw	r3, #1320	; 0x528
 800996c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009970:	6a18      	ldr	r0, [r3, #32]
 8009972:	4770      	bx	lr

08009974 <__locale_msgcharset>:
 8009974:	4800      	ldr	r0, [pc, #0]	; (8009978 <__locale_msgcharset+0x4>)
 8009976:	4770      	bx	lr
 8009978:	2000054c 	.word	0x2000054c

0800997c <__locale_cjk_lang>:
 800997c:	2000      	movs	r0, #0
 800997e:	4770      	bx	lr

08009980 <_localeconv_r>:
 8009980:	4800      	ldr	r0, [pc, #0]	; (8009984 <_localeconv_r+0x4>)
 8009982:	4770      	bx	lr
 8009984:	2000056c 	.word	0x2000056c

08009988 <setlocale>:
 8009988:	b410      	push	{r4}
 800998a:	f240 03f8 	movw	r3, #248	; 0xf8
 800998e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009992:	4604      	mov	r4, r0
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	460a      	mov	r2, r1
 8009998:	4621      	mov	r1, r4
 800999a:	bc10      	pop	{r4}
 800999c:	e7bc      	b.n	8009918 <_setlocale_r>
 800999e:	bf00      	nop

080099a0 <localeconv>:
 80099a0:	4800      	ldr	r0, [pc, #0]	; (80099a4 <localeconv+0x4>)
 80099a2:	4770      	bx	lr
 80099a4:	2000056c 	.word	0x2000056c

080099a8 <_malloc_r>:
 80099a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	f101 040b 	add.w	r4, r1, #11
 80099b0:	2c16      	cmp	r4, #22
 80099b2:	4605      	mov	r5, r0
 80099b4:	d92a      	bls.n	8009a0c <_malloc_r+0x64>
 80099b6:	f024 0407 	bic.w	r4, r4, #7
 80099ba:	0fe3      	lsrs	r3, r4, #31
 80099bc:	428c      	cmp	r4, r1
 80099be:	bf2c      	ite	cs
 80099c0:	4619      	movcs	r1, r3
 80099c2:	f043 0101 	orrcc.w	r1, r3, #1
 80099c6:	bb51      	cbnz	r1, 8009a1e <_malloc_r+0x76>
 80099c8:	4628      	mov	r0, r5
 80099ca:	f000 fb23 	bl	800a014 <__malloc_lock>
 80099ce:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80099d2:	d22a      	bcs.n	8009a2a <_malloc_r+0x82>
 80099d4:	4e7d      	ldr	r6, [pc, #500]	; (8009bcc <_malloc_r+0x224>)
 80099d6:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80099da:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 80099de:	68df      	ldr	r7, [r3, #12]
 80099e0:	429f      	cmp	r7, r3
 80099e2:	f000 8235 	beq.w	8009e50 <_malloc_r+0x4a8>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	68b9      	ldr	r1, [r7, #8]
 80099ec:	f023 0303 	bic.w	r3, r3, #3
 80099f0:	18fb      	adds	r3, r7, r3
 80099f2:	60ca      	str	r2, [r1, #12]
 80099f4:	6858      	ldr	r0, [r3, #4]
 80099f6:	6091      	str	r1, [r2, #8]
 80099f8:	f040 0201 	orr.w	r2, r0, #1
 80099fc:	605a      	str	r2, [r3, #4]
 80099fe:	4628      	mov	r0, r5
 8009a00:	f000 fb0a 	bl	800a018 <__malloc_unlock>
 8009a04:	3708      	adds	r7, #8
 8009a06:	4638      	mov	r0, r7
 8009a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	2410      	movs	r4, #16
 8009a10:	428c      	cmp	r4, r1
 8009a12:	bf2c      	ite	cs
 8009a14:	4619      	movcs	r1, r3
 8009a16:	f043 0101 	orrcc.w	r1, r3, #1
 8009a1a:	2900      	cmp	r1, #0
 8009a1c:	d0d4      	beq.n	80099c8 <_malloc_r+0x20>
 8009a1e:	230c      	movs	r3, #12
 8009a20:	2700      	movs	r7, #0
 8009a22:	602b      	str	r3, [r5, #0]
 8009a24:	4638      	mov	r0, r7
 8009a26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8009a2e:	bf04      	itt	eq
 8009a30:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8009a34:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8009a38:	f040 8081 	bne.w	8009b3e <_malloc_r+0x196>
 8009a3c:	4e63      	ldr	r6, [pc, #396]	; (8009bcc <_malloc_r+0x224>)
 8009a3e:	1871      	adds	r1, r6, r1
 8009a40:	68cf      	ldr	r7, [r1, #12]
 8009a42:	42b9      	cmp	r1, r7
 8009a44:	d106      	bne.n	8009a54 <_malloc_r+0xac>
 8009a46:	e00d      	b.n	8009a64 <_malloc_r+0xbc>
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f280 8169 	bge.w	8009d20 <_malloc_r+0x378>
 8009a4e:	68ff      	ldr	r7, [r7, #12]
 8009a50:	42b9      	cmp	r1, r7
 8009a52:	d007      	beq.n	8009a64 <_malloc_r+0xbc>
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	f022 0203 	bic.w	r2, r2, #3
 8009a5a:	1b13      	subs	r3, r2, r4
 8009a5c:	2b0f      	cmp	r3, #15
 8009a5e:	ddf3      	ble.n	8009a48 <_malloc_r+0xa0>
 8009a60:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8009a64:	f10e 0e01 	add.w	lr, lr, #1
 8009a68:	4a58      	ldr	r2, [pc, #352]	; (8009bcc <_malloc_r+0x224>)
 8009a6a:	6937      	ldr	r7, [r6, #16]
 8009a6c:	f102 0c08 	add.w	ip, r2, #8
 8009a70:	4567      	cmp	r7, ip
 8009a72:	bf08      	it	eq
 8009a74:	6853      	ldreq	r3, [r2, #4]
 8009a76:	d023      	beq.n	8009ac0 <_malloc_r+0x118>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f023 0303 	bic.w	r3, r3, #3
 8009a7e:	1b19      	subs	r1, r3, r4
 8009a80:	290f      	cmp	r1, #15
 8009a82:	f300 81b4 	bgt.w	8009dee <_malloc_r+0x446>
 8009a86:	2900      	cmp	r1, #0
 8009a88:	f8c2 c014 	str.w	ip, [r2, #20]
 8009a8c:	f8c2 c010 	str.w	ip, [r2, #16]
 8009a90:	f280 808f 	bge.w	8009bb2 <_malloc_r+0x20a>
 8009a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a98:	f080 8161 	bcs.w	8009d5e <_malloc_r+0x3b6>
 8009a9c:	08db      	lsrs	r3, r3, #3
 8009a9e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009aa2:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8009aa6:	6888      	ldr	r0, [r1, #8]
 8009aa8:	60f9      	str	r1, [r7, #12]
 8009aaa:	109b      	asrs	r3, r3, #2
 8009aac:	f04f 0901 	mov.w	r9, #1
 8009ab0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ab4:	ea43 0308 	orr.w	r3, r3, r8
 8009ab8:	60b8      	str	r0, [r7, #8]
 8009aba:	6053      	str	r3, [r2, #4]
 8009abc:	608f      	str	r7, [r1, #8]
 8009abe:	60c7      	str	r7, [r0, #12]
 8009ac0:	2001      	movs	r0, #1
 8009ac2:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8009ac6:	4090      	lsls	r0, r2
 8009ac8:	4298      	cmp	r0, r3
 8009aca:	f200 8081 	bhi.w	8009bd0 <_malloc_r+0x228>
 8009ace:	4203      	tst	r3, r0
 8009ad0:	d106      	bne.n	8009ae0 <_malloc_r+0x138>
 8009ad2:	f02e 0e03 	bic.w	lr, lr, #3
 8009ad6:	0040      	lsls	r0, r0, #1
 8009ad8:	4203      	tst	r3, r0
 8009ada:	f10e 0e04 	add.w	lr, lr, #4
 8009ade:	d0fa      	beq.n	8009ad6 <_malloc_r+0x12e>
 8009ae0:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8009ae4:	464f      	mov	r7, r9
 8009ae6:	46f0      	mov	r8, lr
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	429f      	cmp	r7, r3
 8009aec:	d107      	bne.n	8009afe <_malloc_r+0x156>
 8009aee:	e191      	b.n	8009e14 <_malloc_r+0x46c>
 8009af0:	2a00      	cmp	r2, #0
 8009af2:	f280 81b7 	bge.w	8009e64 <_malloc_r+0x4bc>
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	429f      	cmp	r7, r3
 8009afa:	f000 818b 	beq.w	8009e14 <_malloc_r+0x46c>
 8009afe:	6859      	ldr	r1, [r3, #4]
 8009b00:	f021 0103 	bic.w	r1, r1, #3
 8009b04:	1b0a      	subs	r2, r1, r4
 8009b06:	2a0f      	cmp	r2, #15
 8009b08:	ddf2      	ble.n	8009af0 <_malloc_r+0x148>
 8009b0a:	461f      	mov	r7, r3
 8009b0c:	1919      	adds	r1, r3, r4
 8009b0e:	68d8      	ldr	r0, [r3, #12]
 8009b10:	f857 ef08 	ldr.w	lr, [r7, #8]!
 8009b14:	508a      	str	r2, [r1, r2]
 8009b16:	f044 0401 	orr.w	r4, r4, #1
 8009b1a:	f042 0201 	orr.w	r2, r2, #1
 8009b1e:	f8ce 000c 	str.w	r0, [lr, #12]
 8009b22:	f8c0 e008 	str.w	lr, [r0, #8]
 8009b26:	605c      	str	r4, [r3, #4]
 8009b28:	6171      	str	r1, [r6, #20]
 8009b2a:	6131      	str	r1, [r6, #16]
 8009b2c:	f8c1 c00c 	str.w	ip, [r1, #12]
 8009b30:	f8c1 c008 	str.w	ip, [r1, #8]
 8009b34:	604a      	str	r2, [r1, #4]
 8009b36:	4628      	mov	r0, r5
 8009b38:	f000 fa6e 	bl	800a018 <__malloc_unlock>
 8009b3c:	e763      	b.n	8009a06 <_malloc_r+0x5e>
 8009b3e:	f1be 0f04 	cmp.w	lr, #4
 8009b42:	bf9e      	ittt	ls
 8009b44:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8009b48:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8009b4c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8009b50:	f67f af74 	bls.w	8009a3c <_malloc_r+0x94>
 8009b54:	f1be 0f14 	cmp.w	lr, #20
 8009b58:	bf9c      	itt	ls
 8009b5a:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8009b5e:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8009b62:	f67f af6b 	bls.w	8009a3c <_malloc_r+0x94>
 8009b66:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8009b6a:	bf9e      	ittt	ls
 8009b6c:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8009b70:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8009b74:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8009b78:	f67f af60 	bls.w	8009a3c <_malloc_r+0x94>
 8009b7c:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8009b80:	bf9e      	ittt	ls
 8009b82:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8009b86:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8009b8a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8009b8e:	f67f af55 	bls.w	8009a3c <_malloc_r+0x94>
 8009b92:	f240 5354 	movw	r3, #1364	; 0x554
 8009b96:	459e      	cmp	lr, r3
 8009b98:	bf9d      	ittte	ls
 8009b9a:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8009b9e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8009ba2:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8009ba6:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8009baa:	bf88      	it	hi
 8009bac:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8009bb0:	e744      	b.n	8009a3c <_malloc_r+0x94>
 8009bb2:	18fb      	adds	r3, r7, r3
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	f042 0201 	orr.w	r2, r2, #1
 8009bbc:	605a      	str	r2, [r3, #4]
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	f000 fa2a 	bl	800a018 <__malloc_unlock>
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bca:	bf00      	nop
 8009bcc:	200005a4 	.word	0x200005a4
 8009bd0:	68b7      	ldr	r7, [r6, #8]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f023 0803 	bic.w	r8, r3, #3
 8009bd8:	4544      	cmp	r4, r8
 8009bda:	ebc4 0208 	rsb	r2, r4, r8
 8009bde:	bf94      	ite	ls
 8009be0:	2300      	movls	r3, #0
 8009be2:	2301      	movhi	r3, #1
 8009be4:	2a0f      	cmp	r2, #15
 8009be6:	bfd8      	it	le
 8009be8:	f043 0301 	orrle.w	r3, r3, #1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 80a7 	beq.w	8009d40 <_malloc_r+0x398>
 8009bf2:	4bb3      	ldr	r3, [pc, #716]	; (8009ec0 <_malloc_r+0x518>)
 8009bf4:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8009ec4 <_malloc_r+0x51c>
 8009bf8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009bfc:	f8da 3000 	ldr.w	r3, [sl]
 8009c00:	3201      	adds	r2, #1
 8009c02:	4423      	add	r3, r4
 8009c04:	bf08      	it	eq
 8009c06:	f103 0b10 	addeq.w	fp, r3, #16
 8009c0a:	d006      	beq.n	8009c1a <_malloc_r+0x272>
 8009c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c10:	330f      	adds	r3, #15
 8009c12:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009c16:	f023 0b0f 	bic.w	fp, r3, #15
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	4659      	mov	r1, fp
 8009c1e:	f000 fe89 	bl	800a934 <_sbrk_r>
 8009c22:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009c26:	4681      	mov	r9, r0
 8009c28:	f000 8144 	beq.w	8009eb4 <_malloc_r+0x50c>
 8009c2c:	eb07 0208 	add.w	r2, r7, r8
 8009c30:	4282      	cmp	r2, r0
 8009c32:	f200 8126 	bhi.w	8009e82 <_malloc_r+0x4da>
 8009c36:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009c3a:	454a      	cmp	r2, r9
 8009c3c:	445b      	add	r3, fp
 8009c3e:	f8ca 3004 	str.w	r3, [sl, #4]
 8009c42:	f000 8141 	beq.w	8009ec8 <_malloc_r+0x520>
 8009c46:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8009c4a:	3101      	adds	r1, #1
 8009c4c:	bf15      	itete	ne
 8009c4e:	ebc2 0209 	rsbne	r2, r2, r9
 8009c52:	4b9b      	ldreq	r3, [pc, #620]	; (8009ec0 <_malloc_r+0x518>)
 8009c54:	189b      	addne	r3, r3, r2
 8009c56:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 8009c5a:	bf18      	it	ne
 8009c5c:	f8ca 3004 	strne.w	r3, [sl, #4]
 8009c60:	f019 0307 	ands.w	r3, r9, #7
 8009c64:	bf1f      	itttt	ne
 8009c66:	f1c3 0208 	rsbne	r2, r3, #8
 8009c6a:	4491      	addne	r9, r2
 8009c6c:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8009c70:	f103 0208 	addne.w	r2, r3, #8
 8009c74:	eb09 030b 	add.w	r3, r9, fp
 8009c78:	bf08      	it	eq
 8009c7a:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8009c7e:	051b      	lsls	r3, r3, #20
 8009c80:	0d1b      	lsrs	r3, r3, #20
 8009c82:	ebc3 0b02 	rsb	fp, r3, r2
 8009c86:	4628      	mov	r0, r5
 8009c88:	4659      	mov	r1, fp
 8009c8a:	f000 fe53 	bl	800a934 <_sbrk_r>
 8009c8e:	1c43      	adds	r3, r0, #1
 8009c90:	f000 8126 	beq.w	8009ee0 <_malloc_r+0x538>
 8009c94:	ebc9 0200 	rsb	r2, r9, r0
 8009c98:	445a      	add	r2, fp
 8009c9a:	f042 0201 	orr.w	r2, r2, #1
 8009c9e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009ca2:	f8c6 9008 	str.w	r9, [r6, #8]
 8009ca6:	445b      	add	r3, fp
 8009ca8:	42b7      	cmp	r7, r6
 8009caa:	f8ca 3004 	str.w	r3, [sl, #4]
 8009cae:	f8c9 2004 	str.w	r2, [r9, #4]
 8009cb2:	d015      	beq.n	8009ce0 <_malloc_r+0x338>
 8009cb4:	f1b8 0f0f 	cmp.w	r8, #15
 8009cb8:	f240 80f6 	bls.w	8009ea8 <_malloc_r+0x500>
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f1a8 020c 	sub.w	r2, r8, #12
 8009cc2:	f022 0207 	bic.w	r2, r2, #7
 8009cc6:	18b9      	adds	r1, r7, r2
 8009cc8:	f000 0e01 	and.w	lr, r0, #1
 8009ccc:	ea42 0e0e 	orr.w	lr, r2, lr
 8009cd0:	2005      	movs	r0, #5
 8009cd2:	2a0f      	cmp	r2, #15
 8009cd4:	f8c7 e004 	str.w	lr, [r7, #4]
 8009cd8:	6048      	str	r0, [r1, #4]
 8009cda:	6088      	str	r0, [r1, #8]
 8009cdc:	f200 8104 	bhi.w	8009ee8 <_malloc_r+0x540>
 8009ce0:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8009ce4:	68b7      	ldr	r7, [r6, #8]
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	bf84      	itt	hi
 8009cea:	4a76      	ldrhi	r2, [pc, #472]	; (8009ec4 <_malloc_r+0x51c>)
 8009cec:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 8009cee:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	bf84      	itt	hi
 8009cf6:	4a73      	ldrhi	r2, [pc, #460]	; (8009ec4 <_malloc_r+0x51c>)
 8009cf8:	6313      	strhi	r3, [r2, #48]	; 0x30
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f023 0303 	bic.w	r3, r3, #3
 8009d00:	429c      	cmp	r4, r3
 8009d02:	ebc4 0203 	rsb	r2, r4, r3
 8009d06:	bf94      	ite	ls
 8009d08:	2300      	movls	r3, #0
 8009d0a:	2301      	movhi	r3, #1
 8009d0c:	2a0f      	cmp	r2, #15
 8009d0e:	bfd8      	it	le
 8009d10:	f043 0301 	orrle.w	r3, r3, #1
 8009d14:	b1a3      	cbz	r3, 8009d40 <_malloc_r+0x398>
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f97e 	bl	800a018 <__malloc_unlock>
 8009d1c:	2700      	movs	r7, #0
 8009d1e:	e672      	b.n	8009a06 <_malloc_r+0x5e>
 8009d20:	18ba      	adds	r2, r7, r2
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6850      	ldr	r0, [r2, #4]
 8009d26:	68b9      	ldr	r1, [r7, #8]
 8009d28:	f040 0001 	orr.w	r0, r0, #1
 8009d2c:	6050      	str	r0, [r2, #4]
 8009d2e:	60cb      	str	r3, [r1, #12]
 8009d30:	4628      	mov	r0, r5
 8009d32:	6099      	str	r1, [r3, #8]
 8009d34:	3708      	adds	r7, #8
 8009d36:	f000 f96f 	bl	800a018 <__malloc_unlock>
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d40:	193b      	adds	r3, r7, r4
 8009d42:	f042 0201 	orr.w	r2, r2, #1
 8009d46:	f044 0401 	orr.w	r4, r4, #1
 8009d4a:	607c      	str	r4, [r7, #4]
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	605a      	str	r2, [r3, #4]
 8009d50:	3708      	adds	r7, #8
 8009d52:	60b3      	str	r3, [r6, #8]
 8009d54:	f000 f960 	bl	800a018 <__malloc_unlock>
 8009d58:	4638      	mov	r0, r7
 8009d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5e:	0a5a      	lsrs	r2, r3, #9
 8009d60:	2a04      	cmp	r2, #4
 8009d62:	bf9e      	ittt	ls
 8009d64:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8009d68:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 8009d6c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8009d70:	d928      	bls.n	8009dc4 <_malloc_r+0x41c>
 8009d72:	2a14      	cmp	r2, #20
 8009d74:	bf9c      	itt	ls
 8009d76:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 8009d7a:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8009d7e:	d921      	bls.n	8009dc4 <_malloc_r+0x41c>
 8009d80:	2a54      	cmp	r2, #84	; 0x54
 8009d82:	bf9e      	ittt	ls
 8009d84:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8009d88:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 8009d8c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8009d90:	d918      	bls.n	8009dc4 <_malloc_r+0x41c>
 8009d92:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009d96:	bf9e      	ittt	ls
 8009d98:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 8009d9c:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8009da0:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8009da4:	d90e      	bls.n	8009dc4 <_malloc_r+0x41c>
 8009da6:	f240 5154 	movw	r1, #1364	; 0x554
 8009daa:	428a      	cmp	r2, r1
 8009dac:	bf9d      	ittte	ls
 8009dae:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8009db2:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8009db6:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8009dba:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 8009dbe:	bf88      	it	hi
 8009dc0:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8009dc4:	1830      	adds	r0, r6, r0
 8009dc6:	493e      	ldr	r1, [pc, #248]	; (8009ec0 <_malloc_r+0x518>)
 8009dc8:	6882      	ldr	r2, [r0, #8]
 8009dca:	4282      	cmp	r2, r0
 8009dcc:	d103      	bne.n	8009dd6 <_malloc_r+0x42e>
 8009dce:	e061      	b.n	8009e94 <_malloc_r+0x4ec>
 8009dd0:	6892      	ldr	r2, [r2, #8]
 8009dd2:	4290      	cmp	r0, r2
 8009dd4:	d004      	beq.n	8009de0 <_malloc_r+0x438>
 8009dd6:	6851      	ldr	r1, [r2, #4]
 8009dd8:	f021 0103 	bic.w	r1, r1, #3
 8009ddc:	428b      	cmp	r3, r1
 8009dde:	d3f7      	bcc.n	8009dd0 <_malloc_r+0x428>
 8009de0:	68d1      	ldr	r1, [r2, #12]
 8009de2:	6873      	ldr	r3, [r6, #4]
 8009de4:	60f9      	str	r1, [r7, #12]
 8009de6:	60ba      	str	r2, [r7, #8]
 8009de8:	60d7      	str	r7, [r2, #12]
 8009dea:	608f      	str	r7, [r1, #8]
 8009dec:	e668      	b.n	8009ac0 <_malloc_r+0x118>
 8009dee:	193b      	adds	r3, r7, r4
 8009df0:	f041 0001 	orr.w	r0, r1, #1
 8009df4:	f044 0401 	orr.w	r4, r4, #1
 8009df8:	607c      	str	r4, [r7, #4]
 8009dfa:	6153      	str	r3, [r2, #20]
 8009dfc:	6113      	str	r3, [r2, #16]
 8009dfe:	6058      	str	r0, [r3, #4]
 8009e00:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009e04:	f8c3 c008 	str.w	ip, [r3, #8]
 8009e08:	5059      	str	r1, [r3, r1]
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f000 f904 	bl	800a018 <__malloc_unlock>
 8009e10:	3708      	adds	r7, #8
 8009e12:	e5f8      	b.n	8009a06 <_malloc_r+0x5e>
 8009e14:	f108 0801 	add.w	r8, r8, #1
 8009e18:	3708      	adds	r7, #8
 8009e1a:	f018 0f03 	tst.w	r8, #3
 8009e1e:	f47f ae63 	bne.w	8009ae8 <_malloc_r+0x140>
 8009e22:	464b      	mov	r3, r9
 8009e24:	f01e 0f03 	tst.w	lr, #3
 8009e28:	f1a3 0208 	sub.w	r2, r3, #8
 8009e2c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8009e30:	d062      	beq.n	8009ef8 <_malloc_r+0x550>
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d0f5      	beq.n	8009e24 <_malloc_r+0x47c>
 8009e38:	6873      	ldr	r3, [r6, #4]
 8009e3a:	0040      	lsls	r0, r0, #1
 8009e3c:	4298      	cmp	r0, r3
 8009e3e:	f63f aec7 	bhi.w	8009bd0 <_malloc_r+0x228>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f43f aec4 	beq.w	8009bd0 <_malloc_r+0x228>
 8009e48:	4218      	tst	r0, r3
 8009e4a:	d05a      	beq.n	8009f02 <_malloc_r+0x55a>
 8009e4c:	46c6      	mov	lr, r8
 8009e4e:	e647      	b.n	8009ae0 <_malloc_r+0x138>
 8009e50:	f107 0308 	add.w	r3, r7, #8
 8009e54:	697f      	ldr	r7, [r7, #20]
 8009e56:	42bb      	cmp	r3, r7
 8009e58:	bf08      	it	eq
 8009e5a:	f10e 0e02 	addeq.w	lr, lr, #2
 8009e5e:	f43f ae03 	beq.w	8009a68 <_malloc_r+0xc0>
 8009e62:	e5c0      	b.n	80099e6 <_malloc_r+0x3e>
 8009e64:	1859      	adds	r1, r3, r1
 8009e66:	461f      	mov	r7, r3
 8009e68:	6848      	ldr	r0, [r1, #4]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8009e70:	f040 0001 	orr.w	r0, r0, #1
 8009e74:	6048      	str	r0, [r1, #4]
 8009e76:	60d3      	str	r3, [r2, #12]
 8009e78:	609a      	str	r2, [r3, #8]
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f000 f8cc 	bl	800a018 <__malloc_unlock>
 8009e80:	e5c1      	b.n	8009a06 <_malloc_r+0x5e>
 8009e82:	42b7      	cmp	r7, r6
 8009e84:	f43f aed7 	beq.w	8009c36 <_malloc_r+0x28e>
 8009e88:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <_malloc_r+0x518>)
 8009e8a:	689f      	ldr	r7, [r3, #8]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f023 0303 	bic.w	r3, r3, #3
 8009e92:	e735      	b.n	8009d00 <_malloc_r+0x358>
 8009e94:	684b      	ldr	r3, [r1, #4]
 8009e96:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8009e9a:	2001      	movs	r0, #1
 8009e9c:	fa00 f008 	lsl.w	r0, r0, r8
 8009ea0:	4303      	orrs	r3, r0
 8009ea2:	604b      	str	r3, [r1, #4]
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	e79d      	b.n	8009de4 <_malloc_r+0x43c>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f8c9 3004 	str.w	r3, [r9, #4]
 8009eae:	464f      	mov	r7, r9
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	e725      	b.n	8009d00 <_malloc_r+0x358>
 8009eb4:	68b7      	ldr	r7, [r6, #8]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f023 0303 	bic.w	r3, r3, #3
 8009ebc:	e720      	b.n	8009d00 <_malloc_r+0x358>
 8009ebe:	bf00      	nop
 8009ec0:	200005a4 	.word	0x200005a4
 8009ec4:	200009c8 	.word	0x200009c8
 8009ec8:	0511      	lsls	r1, r2, #20
 8009eca:	0d09      	lsrs	r1, r1, #20
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	f47f aeba 	bne.w	8009c46 <_malloc_r+0x29e>
 8009ed2:	68b2      	ldr	r2, [r6, #8]
 8009ed4:	eb0b 0108 	add.w	r1, fp, r8
 8009ed8:	f041 0101 	orr.w	r1, r1, #1
 8009edc:	6051      	str	r1, [r2, #4]
 8009ede:	e6ff      	b.n	8009ce0 <_malloc_r+0x338>
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f04f 0b00 	mov.w	fp, #0
 8009ee6:	e6da      	b.n	8009c9e <_malloc_r+0x2f6>
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f107 0108 	add.w	r1, r7, #8
 8009eee:	f7ff fc4f 	bl	8009790 <_free_r>
 8009ef2:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <_malloc_r+0x564>)
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	e6f3      	b.n	8009ce0 <_malloc_r+0x338>
 8009ef8:	6873      	ldr	r3, [r6, #4]
 8009efa:	ea23 0300 	bic.w	r3, r3, r0
 8009efe:	6073      	str	r3, [r6, #4]
 8009f00:	e79b      	b.n	8009e3a <_malloc_r+0x492>
 8009f02:	0040      	lsls	r0, r0, #1
 8009f04:	f108 0804 	add.w	r8, r8, #4
 8009f08:	e79e      	b.n	8009e48 <_malloc_r+0x4a0>
 8009f0a:	bf00      	nop
 8009f0c:	200009c8 	.word	0x200009c8

08009f10 <memchr>:
 8009f10:	0783      	lsls	r3, r0, #30
 8009f12:	b470      	push	{r4, r5, r6}
 8009f14:	b2c9      	uxtb	r1, r1
 8009f16:	d00f      	beq.n	8009f38 <memchr+0x28>
 8009f18:	2a00      	cmp	r2, #0
 8009f1a:	d033      	beq.n	8009f84 <memchr+0x74>
 8009f1c:	7803      	ldrb	r3, [r0, #0]
 8009f1e:	3a01      	subs	r2, #1
 8009f20:	428b      	cmp	r3, r1
 8009f22:	d106      	bne.n	8009f32 <memchr+0x22>
 8009f24:	e01d      	b.n	8009f62 <memchr+0x52>
 8009f26:	2a00      	cmp	r2, #0
 8009f28:	d02c      	beq.n	8009f84 <memchr+0x74>
 8009f2a:	7803      	ldrb	r3, [r0, #0]
 8009f2c:	3a01      	subs	r2, #1
 8009f2e:	428b      	cmp	r3, r1
 8009f30:	d017      	beq.n	8009f62 <memchr+0x52>
 8009f32:	3001      	adds	r0, #1
 8009f34:	0783      	lsls	r3, r0, #30
 8009f36:	d1f6      	bne.n	8009f26 <memchr+0x16>
 8009f38:	2a03      	cmp	r2, #3
 8009f3a:	bf84      	itt	hi
 8009f3c:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8009f40:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8009f44:	d80f      	bhi.n	8009f66 <memchr+0x56>
 8009f46:	b1ea      	cbz	r2, 8009f84 <memchr+0x74>
 8009f48:	7803      	ldrb	r3, [r0, #0]
 8009f4a:	3a01      	subs	r2, #1
 8009f4c:	428b      	cmp	r3, r1
 8009f4e:	4402      	add	r2, r0
 8009f50:	d104      	bne.n	8009f5c <memchr+0x4c>
 8009f52:	e006      	b.n	8009f62 <memchr+0x52>
 8009f54:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8009f58:	428b      	cmp	r3, r1
 8009f5a:	d002      	beq.n	8009f62 <memchr+0x52>
 8009f5c:	4290      	cmp	r0, r2
 8009f5e:	d1f9      	bne.n	8009f54 <memchr+0x44>
 8009f60:	2000      	movs	r0, #0
 8009f62:	bc70      	pop	{r4, r5, r6}
 8009f64:	4770      	bx	lr
 8009f66:	4604      	mov	r4, r0
 8009f68:	3004      	adds	r0, #4
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	4073      	eors	r3, r6
 8009f6e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8009f72:	ea25 0303 	bic.w	r3, r5, r3
 8009f76:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8009f7a:	d105      	bne.n	8009f88 <memchr+0x78>
 8009f7c:	3a04      	subs	r2, #4
 8009f7e:	2a03      	cmp	r2, #3
 8009f80:	d8f1      	bhi.n	8009f66 <memchr+0x56>
 8009f82:	e7e0      	b.n	8009f46 <memchr+0x36>
 8009f84:	4610      	mov	r0, r2
 8009f86:	e7ec      	b.n	8009f62 <memchr+0x52>
 8009f88:	4620      	mov	r0, r4
 8009f8a:	e7dc      	b.n	8009f46 <memchr+0x36>

08009f8c <memcpy>:
 8009f8c:	2a0f      	cmp	r2, #15
 8009f8e:	b4f0      	push	{r4, r5, r6, r7}
 8009f90:	bf98      	it	ls
 8009f92:	4603      	movls	r3, r0
 8009f94:	d931      	bls.n	8009ffa <memcpy+0x6e>
 8009f96:	ea41 0300 	orr.w	r3, r1, r0
 8009f9a:	079b      	lsls	r3, r3, #30
 8009f9c:	d137      	bne.n	800a00e <memcpy+0x82>
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	4615      	mov	r5, r2
 8009fa4:	6826      	ldr	r6, [r4, #0]
 8009fa6:	601e      	str	r6, [r3, #0]
 8009fa8:	6866      	ldr	r6, [r4, #4]
 8009faa:	605e      	str	r6, [r3, #4]
 8009fac:	68a6      	ldr	r6, [r4, #8]
 8009fae:	609e      	str	r6, [r3, #8]
 8009fb0:	68e6      	ldr	r6, [r4, #12]
 8009fb2:	3d10      	subs	r5, #16
 8009fb4:	60de      	str	r6, [r3, #12]
 8009fb6:	3410      	adds	r4, #16
 8009fb8:	3310      	adds	r3, #16
 8009fba:	2d0f      	cmp	r5, #15
 8009fbc:	d8f2      	bhi.n	8009fa4 <memcpy+0x18>
 8009fbe:	f1a2 0410 	sub.w	r4, r2, #16
 8009fc2:	f024 040f 	bic.w	r4, r4, #15
 8009fc6:	f002 020f 	and.w	r2, r2, #15
 8009fca:	3410      	adds	r4, #16
 8009fcc:	2a03      	cmp	r2, #3
 8009fce:	eb00 0304 	add.w	r3, r0, r4
 8009fd2:	4421      	add	r1, r4
 8009fd4:	d911      	bls.n	8009ffa <memcpy+0x6e>
 8009fd6:	1f0e      	subs	r6, r1, #4
 8009fd8:	461d      	mov	r5, r3
 8009fda:	4614      	mov	r4, r2
 8009fdc:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8009fe0:	3c04      	subs	r4, #4
 8009fe2:	2c03      	cmp	r4, #3
 8009fe4:	f845 7b04 	str.w	r7, [r5], #4
 8009fe8:	d8f8      	bhi.n	8009fdc <memcpy+0x50>
 8009fea:	1f14      	subs	r4, r2, #4
 8009fec:	f024 0403 	bic.w	r4, r4, #3
 8009ff0:	3404      	adds	r4, #4
 8009ff2:	f002 0203 	and.w	r2, r2, #3
 8009ff6:	1909      	adds	r1, r1, r4
 8009ff8:	191b      	adds	r3, r3, r4
 8009ffa:	b132      	cbz	r2, 800a00a <memcpy+0x7e>
 8009ffc:	3901      	subs	r1, #1
 8009ffe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a002:	3a01      	subs	r2, #1
 800a004:	f803 4b01 	strb.w	r4, [r3], #1
 800a008:	d1f9      	bne.n	8009ffe <memcpy+0x72>
 800a00a:	bcf0      	pop	{r4, r5, r6, r7}
 800a00c:	4770      	bx	lr
 800a00e:	4603      	mov	r3, r0
 800a010:	e7f4      	b.n	8009ffc <memcpy+0x70>
 800a012:	bf00      	nop

0800a014 <__malloc_lock>:
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop

0800a018 <__malloc_unlock>:
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop

0800a01c <_Balloc>:
 800a01c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a01e:	b570      	push	{r4, r5, r6, lr}
 800a020:	4605      	mov	r5, r0
 800a022:	460c      	mov	r4, r1
 800a024:	b14b      	cbz	r3, 800a03a <_Balloc+0x1e>
 800a026:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a02a:	b178      	cbz	r0, 800a04c <_Balloc+0x30>
 800a02c:	6802      	ldr	r2, [r0, #0]
 800a02e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a032:	2300      	movs	r3, #0
 800a034:	6103      	str	r3, [r0, #16]
 800a036:	60c3      	str	r3, [r0, #12]
 800a038:	bd70      	pop	{r4, r5, r6, pc}
 800a03a:	2104      	movs	r1, #4
 800a03c:	2221      	movs	r2, #33	; 0x21
 800a03e:	f001 fa7f 	bl	800b540 <_calloc_r>
 800a042:	4603      	mov	r3, r0
 800a044:	64e8      	str	r0, [r5, #76]	; 0x4c
 800a046:	2800      	cmp	r0, #0
 800a048:	d1ed      	bne.n	800a026 <_Balloc+0xa>
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
 800a04c:	2101      	movs	r1, #1
 800a04e:	fa11 f604 	lsls.w	r6, r1, r4
 800a052:	1d72      	adds	r2, r6, #5
 800a054:	4628      	mov	r0, r5
 800a056:	0092      	lsls	r2, r2, #2
 800a058:	f001 fa72 	bl	800b540 <_calloc_r>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d0f4      	beq.n	800a04a <_Balloc+0x2e>
 800a060:	6044      	str	r4, [r0, #4]
 800a062:	6086      	str	r6, [r0, #8]
 800a064:	e7e5      	b.n	800a032 <_Balloc+0x16>
 800a066:	bf00      	nop

0800a068 <_Bfree>:
 800a068:	b131      	cbz	r1, 800a078 <_Bfree+0x10>
 800a06a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a06c:	684a      	ldr	r2, [r1, #4]
 800a06e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a072:	6008      	str	r0, [r1, #0]
 800a074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop

0800a07c <__multadd>:
 800a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a07e:	460d      	mov	r5, r1
 800a080:	4606      	mov	r6, r0
 800a082:	690c      	ldr	r4, [r1, #16]
 800a084:	f101 0014 	add.w	r0, r1, #20
 800a088:	b083      	sub	sp, #12
 800a08a:	2100      	movs	r1, #0
 800a08c:	6807      	ldr	r7, [r0, #0]
 800a08e:	fa1f fc87 	uxth.w	ip, r7
 800a092:	0c3f      	lsrs	r7, r7, #16
 800a094:	fb02 330c 	mla	r3, r2, ip, r3
 800a098:	fb02 f707 	mul.w	r7, r2, r7
 800a09c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 800a0a6:	3101      	adds	r1, #1
 800a0a8:	f840 3b04 	str.w	r3, [r0], #4
 800a0ac:	0c3b      	lsrs	r3, r7, #16
 800a0ae:	428c      	cmp	r4, r1
 800a0b0:	dcec      	bgt.n	800a08c <__multadd+0x10>
 800a0b2:	b13b      	cbz	r3, 800a0c4 <__multadd+0x48>
 800a0b4:	68aa      	ldr	r2, [r5, #8]
 800a0b6:	4294      	cmp	r4, r2
 800a0b8:	da07      	bge.n	800a0ca <__multadd+0x4e>
 800a0ba:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800a0be:	3401      	adds	r4, #1
 800a0c0:	6153      	str	r3, [r2, #20]
 800a0c2:	612c      	str	r4, [r5, #16]
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	b003      	add	sp, #12
 800a0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ca:	6869      	ldr	r1, [r5, #4]
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	3101      	adds	r1, #1
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f7ff ffa3 	bl	800a01c <_Balloc>
 800a0d6:	692a      	ldr	r2, [r5, #16]
 800a0d8:	3202      	adds	r2, #2
 800a0da:	f105 010c 	add.w	r1, r5, #12
 800a0de:	4607      	mov	r7, r0
 800a0e0:	0092      	lsls	r2, r2, #2
 800a0e2:	f100 000c 	add.w	r0, r0, #12
 800a0e6:	f7ff ff51 	bl	8009f8c <memcpy>
 800a0ea:	6869      	ldr	r1, [r5, #4]
 800a0ec:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800a0ee:	9b01      	ldr	r3, [sp, #4]
 800a0f0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800a0f4:	6028      	str	r0, [r5, #0]
 800a0f6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800a0fa:	463d      	mov	r5, r7
 800a0fc:	e7dd      	b.n	800a0ba <__multadd+0x3e>
 800a0fe:	bf00      	nop

0800a100 <__s2b>:
 800a100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a104:	461e      	mov	r6, r3
 800a106:	f648 6339 	movw	r3, #36409	; 0x8e39
 800a10a:	f106 0408 	add.w	r4, r6, #8
 800a10e:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 800a112:	fb83 5304 	smull	r5, r3, r3, r4
 800a116:	17e4      	asrs	r4, r4, #31
 800a118:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 800a11c:	460f      	mov	r7, r1
 800a11e:	2100      	movs	r1, #0
 800a120:	2b01      	cmp	r3, #1
 800a122:	4604      	mov	r4, r0
 800a124:	4690      	mov	r8, r2
 800a126:	dd05      	ble.n	800a134 <__s2b+0x34>
 800a128:	2201      	movs	r2, #1
 800a12a:	2100      	movs	r1, #0
 800a12c:	0052      	lsls	r2, r2, #1
 800a12e:	3101      	adds	r1, #1
 800a130:	4293      	cmp	r3, r2
 800a132:	dcfb      	bgt.n	800a12c <__s2b+0x2c>
 800a134:	4620      	mov	r0, r4
 800a136:	f7ff ff71 	bl	800a01c <_Balloc>
 800a13a:	9b08      	ldr	r3, [sp, #32]
 800a13c:	6143      	str	r3, [r0, #20]
 800a13e:	2301      	movs	r3, #1
 800a140:	f1b8 0f09 	cmp.w	r8, #9
 800a144:	4601      	mov	r1, r0
 800a146:	6103      	str	r3, [r0, #16]
 800a148:	dd23      	ble.n	800a192 <__s2b+0x92>
 800a14a:	f107 0909 	add.w	r9, r7, #9
 800a14e:	464d      	mov	r5, r9
 800a150:	4447      	add	r7, r8
 800a152:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a156:	220a      	movs	r2, #10
 800a158:	3b30      	subs	r3, #48	; 0x30
 800a15a:	4620      	mov	r0, r4
 800a15c:	f7ff ff8e 	bl	800a07c <__multadd>
 800a160:	42bd      	cmp	r5, r7
 800a162:	4601      	mov	r1, r0
 800a164:	d1f5      	bne.n	800a152 <__s2b+0x52>
 800a166:	eb09 0708 	add.w	r7, r9, r8
 800a16a:	3f08      	subs	r7, #8
 800a16c:	4546      	cmp	r6, r8
 800a16e:	dd0d      	ble.n	800a18c <__s2b+0x8c>
 800a170:	ebc8 0707 	rsb	r7, r8, r7
 800a174:	f817 3008 	ldrb.w	r3, [r7, r8]
 800a178:	220a      	movs	r2, #10
 800a17a:	3b30      	subs	r3, #48	; 0x30
 800a17c:	4620      	mov	r0, r4
 800a17e:	f7ff ff7d 	bl	800a07c <__multadd>
 800a182:	f108 0801 	add.w	r8, r8, #1
 800a186:	45b0      	cmp	r8, r6
 800a188:	4601      	mov	r1, r0
 800a18a:	d1f3      	bne.n	800a174 <__s2b+0x74>
 800a18c:	4608      	mov	r0, r1
 800a18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a192:	370a      	adds	r7, #10
 800a194:	f04f 0809 	mov.w	r8, #9
 800a198:	e7e8      	b.n	800a16c <__s2b+0x6c>
 800a19a:	bf00      	nop

0800a19c <__hi0bits>:
 800a19c:	4603      	mov	r3, r0
 800a19e:	2000      	movs	r0, #0
 800a1a0:	0c1a      	lsrs	r2, r3, #16
 800a1a2:	d101      	bne.n	800a1a8 <__hi0bits+0xc>
 800a1a4:	041b      	lsls	r3, r3, #16
 800a1a6:	2010      	movs	r0, #16
 800a1a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a1ac:	d101      	bne.n	800a1b2 <__hi0bits+0x16>
 800a1ae:	3008      	adds	r0, #8
 800a1b0:	021b      	lsls	r3, r3, #8
 800a1b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a1b6:	d101      	bne.n	800a1bc <__hi0bits+0x20>
 800a1b8:	3004      	adds	r0, #4
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a1c0:	d101      	bne.n	800a1c6 <__hi0bits+0x2a>
 800a1c2:	3002      	adds	r0, #2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	db02      	blt.n	800a1d0 <__hi0bits+0x34>
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	d401      	bmi.n	800a1d2 <__hi0bits+0x36>
 800a1ce:	2020      	movs	r0, #32
 800a1d0:	4770      	bx	lr
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop

0800a1d8 <__lo0bits>:
 800a1d8:	6803      	ldr	r3, [r0, #0]
 800a1da:	4602      	mov	r2, r0
 800a1dc:	f013 0007 	ands.w	r0, r3, #7
 800a1e0:	d007      	beq.n	800a1f2 <__lo0bits+0x1a>
 800a1e2:	07d9      	lsls	r1, r3, #31
 800a1e4:	d41f      	bmi.n	800a226 <__lo0bits+0x4e>
 800a1e6:	0798      	lsls	r0, r3, #30
 800a1e8:	d41f      	bmi.n	800a22a <__lo0bits+0x52>
 800a1ea:	089b      	lsrs	r3, r3, #2
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	2002      	movs	r0, #2
 800a1f0:	4770      	bx	lr
 800a1f2:	b299      	uxth	r1, r3
 800a1f4:	b909      	cbnz	r1, 800a1fa <__lo0bits+0x22>
 800a1f6:	0c1b      	lsrs	r3, r3, #16
 800a1f8:	2010      	movs	r0, #16
 800a1fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1fe:	d101      	bne.n	800a204 <__lo0bits+0x2c>
 800a200:	3008      	adds	r0, #8
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	0719      	lsls	r1, r3, #28
 800a206:	d101      	bne.n	800a20c <__lo0bits+0x34>
 800a208:	3004      	adds	r0, #4
 800a20a:	091b      	lsrs	r3, r3, #4
 800a20c:	0799      	lsls	r1, r3, #30
 800a20e:	d101      	bne.n	800a214 <__lo0bits+0x3c>
 800a210:	3002      	adds	r0, #2
 800a212:	089b      	lsrs	r3, r3, #2
 800a214:	07d9      	lsls	r1, r3, #31
 800a216:	d404      	bmi.n	800a222 <__lo0bits+0x4a>
 800a218:	085b      	lsrs	r3, r3, #1
 800a21a:	d101      	bne.n	800a220 <__lo0bits+0x48>
 800a21c:	2020      	movs	r0, #32
 800a21e:	4770      	bx	lr
 800a220:	3001      	adds	r0, #1
 800a222:	6013      	str	r3, [r2, #0]
 800a224:	4770      	bx	lr
 800a226:	2000      	movs	r0, #0
 800a228:	4770      	bx	lr
 800a22a:	085b      	lsrs	r3, r3, #1
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	2001      	movs	r0, #1
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop

0800a234 <__i2b>:
 800a234:	b510      	push	{r4, lr}
 800a236:	460c      	mov	r4, r1
 800a238:	2101      	movs	r1, #1
 800a23a:	f7ff feef 	bl	800a01c <_Balloc>
 800a23e:	2201      	movs	r2, #1
 800a240:	6144      	str	r4, [r0, #20]
 800a242:	6102      	str	r2, [r0, #16]
 800a244:	bd10      	pop	{r4, pc}
 800a246:	bf00      	nop

0800a248 <__multiply>:
 800a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	690f      	ldr	r7, [r1, #16]
 800a24e:	6916      	ldr	r6, [r2, #16]
 800a250:	42b7      	cmp	r7, r6
 800a252:	b085      	sub	sp, #20
 800a254:	460d      	mov	r5, r1
 800a256:	4692      	mov	sl, r2
 800a258:	da04      	bge.n	800a264 <__multiply+0x1c>
 800a25a:	463a      	mov	r2, r7
 800a25c:	4655      	mov	r5, sl
 800a25e:	4637      	mov	r7, r6
 800a260:	468a      	mov	sl, r1
 800a262:	4616      	mov	r6, r2
 800a264:	68ab      	ldr	r3, [r5, #8]
 800a266:	6869      	ldr	r1, [r5, #4]
 800a268:	19bc      	adds	r4, r7, r6
 800a26a:	429c      	cmp	r4, r3
 800a26c:	bfc8      	it	gt
 800a26e:	3101      	addgt	r1, #1
 800a270:	f7ff fed4 	bl	800a01c <_Balloc>
 800a274:	1d21      	adds	r1, r4, #4
 800a276:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 800a27a:	f100 0914 	add.w	r9, r0, #20
 800a27e:	f10b 0b04 	add.w	fp, fp, #4
 800a282:	45d9      	cmp	r9, fp
 800a284:	9000      	str	r0, [sp, #0]
 800a286:	9101      	str	r1, [sp, #4]
 800a288:	d205      	bcs.n	800a296 <__multiply+0x4e>
 800a28a:	464b      	mov	r3, r9
 800a28c:	2200      	movs	r2, #0
 800a28e:	f843 2b04 	str.w	r2, [r3], #4
 800a292:	459b      	cmp	fp, r3
 800a294:	d8fb      	bhi.n	800a28e <__multiply+0x46>
 800a296:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800a29a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800a29e:	f10a 0a14 	add.w	sl, sl, #20
 800a2a2:	f106 0814 	add.w	r8, r6, #20
 800a2a6:	3514      	adds	r5, #20
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	45c2      	cmp	sl, r8
 800a2ac:	d24f      	bcs.n	800a34e <__multiply+0x106>
 800a2ae:	f8cd b008 	str.w	fp, [sp, #8]
 800a2b2:	9403      	str	r4, [sp, #12]
 800a2b4:	46ab      	mov	fp, r5
 800a2b6:	f85a 5b04 	ldr.w	r5, [sl], #4
 800a2ba:	b2ac      	uxth	r4, r5
 800a2bc:	b1e4      	cbz	r4, 800a2f8 <__multiply+0xb0>
 800a2be:	465a      	mov	r2, fp
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	f852 6b04 	ldr.w	r6, [r2], #4
 800a2c8:	681d      	ldr	r5, [r3, #0]
 800a2ca:	b2b0      	uxth	r0, r6
 800a2cc:	fa11 f185 	uxtah	r1, r1, r5
 800a2d0:	0c36      	lsrs	r6, r6, #16
 800a2d2:	0c2d      	lsrs	r5, r5, #16
 800a2d4:	fb04 1000 	mla	r0, r4, r0, r1
 800a2d8:	fb04 5106 	mla	r1, r4, r6, r5
 800a2dc:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 800a2e0:	b280      	uxth	r0, r0
 800a2e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800a2e6:	0c09      	lsrs	r1, r1, #16
 800a2e8:	4297      	cmp	r7, r2
 800a2ea:	461d      	mov	r5, r3
 800a2ec:	f843 0b04 	str.w	r0, [r3], #4
 800a2f0:	d8e8      	bhi.n	800a2c4 <__multiply+0x7c>
 800a2f2:	6069      	str	r1, [r5, #4]
 800a2f4:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 800a2f8:	0c2d      	lsrs	r5, r5, #16
 800a2fa:	d021      	beq.n	800a340 <__multiply+0xf8>
 800a2fc:	f8d9 6000 	ldr.w	r6, [r9]
 800a300:	465b      	mov	r3, fp
 800a302:	4630      	mov	r0, r6
 800a304:	4649      	mov	r1, r9
 800a306:	f04f 0c00 	mov.w	ip, #0
 800a30a:	e000      	b.n	800a30e <__multiply+0xc6>
 800a30c:	4611      	mov	r1, r2
 800a30e:	881a      	ldrh	r2, [r3, #0]
 800a310:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 800a314:	fb05 cc02 	mla	ip, r5, r2, ip
 800a318:	b2b6      	uxth	r6, r6
 800a31a:	460a      	mov	r2, r1
 800a31c:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 800a320:	f842 6b04 	str.w	r6, [r2], #4
 800a324:	f853 6b04 	ldr.w	r6, [r3], #4
 800a328:	6848      	ldr	r0, [r1, #4]
 800a32a:	0c36      	lsrs	r6, r6, #16
 800a32c:	b284      	uxth	r4, r0
 800a32e:	fb05 4606 	mla	r6, r5, r6, r4
 800a332:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 800a336:	429f      	cmp	r7, r3
 800a338:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 800a33c:	d8e6      	bhi.n	800a30c <__multiply+0xc4>
 800a33e:	604e      	str	r6, [r1, #4]
 800a340:	45d0      	cmp	r8, sl
 800a342:	f109 0904 	add.w	r9, r9, #4
 800a346:	d8b6      	bhi.n	800a2b6 <__multiply+0x6e>
 800a348:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a34c:	9c03      	ldr	r4, [sp, #12]
 800a34e:	2c00      	cmp	r4, #0
 800a350:	dd0c      	ble.n	800a36c <__multiply+0x124>
 800a352:	e89d 0006 	ldmia.w	sp, {r1, r2}
 800a356:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800a35a:	b93b      	cbnz	r3, 800a36c <__multiply+0x124>
 800a35c:	f1ab 0b04 	sub.w	fp, fp, #4
 800a360:	e002      	b.n	800a368 <__multiply+0x120>
 800a362:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 800a366:	b90b      	cbnz	r3, 800a36c <__multiply+0x124>
 800a368:	3c01      	subs	r4, #1
 800a36a:	d1fa      	bne.n	800a362 <__multiply+0x11a>
 800a36c:	9a00      	ldr	r2, [sp, #0]
 800a36e:	6114      	str	r4, [r2, #16]
 800a370:	4610      	mov	r0, r2
 800a372:	b005      	add	sp, #20
 800a374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a378 <__pow5mult>:
 800a378:	f012 0303 	ands.w	r3, r2, #3
 800a37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a380:	4615      	mov	r5, r2
 800a382:	4604      	mov	r4, r0
 800a384:	4688      	mov	r8, r1
 800a386:	d12d      	bne.n	800a3e4 <__pow5mult+0x6c>
 800a388:	10ad      	asrs	r5, r5, #2
 800a38a:	d01d      	beq.n	800a3c8 <__pow5mult+0x50>
 800a38c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800a38e:	b92f      	cbnz	r7, 800a39c <__pow5mult+0x24>
 800a390:	e031      	b.n	800a3f6 <__pow5mult+0x7e>
 800a392:	106d      	asrs	r5, r5, #1
 800a394:	d018      	beq.n	800a3c8 <__pow5mult+0x50>
 800a396:	683e      	ldr	r6, [r7, #0]
 800a398:	b1ce      	cbz	r6, 800a3ce <__pow5mult+0x56>
 800a39a:	4637      	mov	r7, r6
 800a39c:	07e8      	lsls	r0, r5, #31
 800a39e:	d5f8      	bpl.n	800a392 <__pow5mult+0x1a>
 800a3a0:	4641      	mov	r1, r8
 800a3a2:	463a      	mov	r2, r7
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f7ff ff4f 	bl	800a248 <__multiply>
 800a3aa:	f1b8 0f00 	cmp.w	r8, #0
 800a3ae:	d017      	beq.n	800a3e0 <__pow5mult+0x68>
 800a3b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a3b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a3b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3ba:	106d      	asrs	r5, r5, #1
 800a3bc:	f8c8 1000 	str.w	r1, [r8]
 800a3c0:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 800a3c4:	4680      	mov	r8, r0
 800a3c6:	d1e6      	bne.n	800a396 <__pow5mult+0x1e>
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	463a      	mov	r2, r7
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f7ff ff38 	bl	800a248 <__multiply>
 800a3d8:	6038      	str	r0, [r7, #0]
 800a3da:	6006      	str	r6, [r0, #0]
 800a3dc:	4607      	mov	r7, r0
 800a3de:	e7dd      	b.n	800a39c <__pow5mult+0x24>
 800a3e0:	4680      	mov	r8, r0
 800a3e2:	e7d6      	b.n	800a392 <__pow5mult+0x1a>
 800a3e4:	1e5e      	subs	r6, r3, #1
 800a3e6:	4a09      	ldr	r2, [pc, #36]	; (800a40c <__pow5mult+0x94>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 800a3ee:	f7ff fe45 	bl	800a07c <__multadd>
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	e7c8      	b.n	800a388 <__pow5mult+0x10>
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f240 2171 	movw	r1, #625	; 0x271
 800a3fc:	f7ff ff1a 	bl	800a234 <__i2b>
 800a400:	2300      	movs	r3, #0
 800a402:	64a0      	str	r0, [r4, #72]	; 0x48
 800a404:	4607      	mov	r7, r0
 800a406:	6003      	str	r3, [r0, #0]
 800a408:	e7c8      	b.n	800a39c <__pow5mult+0x24>
 800a40a:	bf00      	nop
 800a40c:	0800c5a0 	.word	0x0800c5a0

0800a410 <__lshift>:
 800a410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	4691      	mov	r9, r2
 800a416:	690a      	ldr	r2, [r1, #16]
 800a418:	688b      	ldr	r3, [r1, #8]
 800a41a:	ea4f 1769 	mov.w	r7, r9, asr #5
 800a41e:	eb07 0b02 	add.w	fp, r7, r2
 800a422:	f10b 0501 	add.w	r5, fp, #1
 800a426:	429d      	cmp	r5, r3
 800a428:	460c      	mov	r4, r1
 800a42a:	4606      	mov	r6, r0
 800a42c:	6849      	ldr	r1, [r1, #4]
 800a42e:	dd03      	ble.n	800a438 <__lshift+0x28>
 800a430:	005b      	lsls	r3, r3, #1
 800a432:	3101      	adds	r1, #1
 800a434:	429d      	cmp	r5, r3
 800a436:	dcfb      	bgt.n	800a430 <__lshift+0x20>
 800a438:	4630      	mov	r0, r6
 800a43a:	f7ff fdef 	bl	800a01c <_Balloc>
 800a43e:	2f00      	cmp	r7, #0
 800a440:	f100 0314 	add.w	r3, r0, #20
 800a444:	dd09      	ble.n	800a45a <__lshift+0x4a>
 800a446:	2200      	movs	r2, #0
 800a448:	4611      	mov	r1, r2
 800a44a:	3201      	adds	r2, #1
 800a44c:	42ba      	cmp	r2, r7
 800a44e:	f843 1b04 	str.w	r1, [r3], #4
 800a452:	d1fa      	bne.n	800a44a <__lshift+0x3a>
 800a454:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800a458:	3314      	adds	r3, #20
 800a45a:	6922      	ldr	r2, [r4, #16]
 800a45c:	f019 091f 	ands.w	r9, r9, #31
 800a460:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800a464:	f104 0114 	add.w	r1, r4, #20
 800a468:	f10c 0c14 	add.w	ip, ip, #20
 800a46c:	d022      	beq.n	800a4b4 <__lshift+0xa4>
 800a46e:	f1c9 0a20 	rsb	sl, r9, #32
 800a472:	2200      	movs	r2, #0
 800a474:	e000      	b.n	800a478 <__lshift+0x68>
 800a476:	463b      	mov	r3, r7
 800a478:	f8d1 8000 	ldr.w	r8, [r1]
 800a47c:	461f      	mov	r7, r3
 800a47e:	fa08 f809 	lsl.w	r8, r8, r9
 800a482:	ea48 0202 	orr.w	r2, r8, r2
 800a486:	f847 2b04 	str.w	r2, [r7], #4
 800a48a:	f851 2b04 	ldr.w	r2, [r1], #4
 800a48e:	458c      	cmp	ip, r1
 800a490:	fa22 f20a 	lsr.w	r2, r2, sl
 800a494:	d8ef      	bhi.n	800a476 <__lshift+0x66>
 800a496:	605a      	str	r2, [r3, #4]
 800a498:	b10a      	cbz	r2, 800a49e <__lshift+0x8e>
 800a49a:	f10b 0502 	add.w	r5, fp, #2
 800a49e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800a4a0:	6862      	ldr	r2, [r4, #4]
 800a4a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4a6:	3d01      	subs	r5, #1
 800a4a8:	6105      	str	r5, [r0, #16]
 800a4aa:	6021      	str	r1, [r4, #0]
 800a4ac:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b4:	f851 2b04 	ldr.w	r2, [r1], #4
 800a4b8:	458c      	cmp	ip, r1
 800a4ba:	f843 2b04 	str.w	r2, [r3], #4
 800a4be:	d9ee      	bls.n	800a49e <__lshift+0x8e>
 800a4c0:	f851 2b04 	ldr.w	r2, [r1], #4
 800a4c4:	458c      	cmp	ip, r1
 800a4c6:	f843 2b04 	str.w	r2, [r3], #4
 800a4ca:	d8f3      	bhi.n	800a4b4 <__lshift+0xa4>
 800a4cc:	e7e7      	b.n	800a49e <__lshift+0x8e>
 800a4ce:	bf00      	nop

0800a4d0 <__mcmp>:
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	690a      	ldr	r2, [r1, #16]
 800a4d4:	6900      	ldr	r0, [r0, #16]
 800a4d6:	1a80      	subs	r0, r0, r2
 800a4d8:	b430      	push	{r4, r5}
 800a4da:	d111      	bne.n	800a500 <__mcmp+0x30>
 800a4dc:	3204      	adds	r2, #4
 800a4de:	0094      	lsls	r4, r2, #2
 800a4e0:	191a      	adds	r2, r3, r4
 800a4e2:	1909      	adds	r1, r1, r4
 800a4e4:	3314      	adds	r3, #20
 800a4e6:	3204      	adds	r2, #4
 800a4e8:	3104      	adds	r1, #4
 800a4ea:	f852 5c04 	ldr.w	r5, [r2, #-4]
 800a4ee:	f851 4c04 	ldr.w	r4, [r1, #-4]
 800a4f2:	3a04      	subs	r2, #4
 800a4f4:	42a5      	cmp	r5, r4
 800a4f6:	f1a1 0104 	sub.w	r1, r1, #4
 800a4fa:	d103      	bne.n	800a504 <__mcmp+0x34>
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d3f4      	bcc.n	800a4ea <__mcmp+0x1a>
 800a500:	bc30      	pop	{r4, r5}
 800a502:	4770      	bx	lr
 800a504:	bf38      	it	cc
 800a506:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 800a50a:	d3f9      	bcc.n	800a500 <__mcmp+0x30>
 800a50c:	2001      	movs	r0, #1
 800a50e:	e7f7      	b.n	800a500 <__mcmp+0x30>

0800a510 <__mdiff>:
 800a510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	4606      	mov	r6, r0
 800a518:	4611      	mov	r1, r2
 800a51a:	4620      	mov	r0, r4
 800a51c:	4615      	mov	r5, r2
 800a51e:	f7ff ffd7 	bl	800a4d0 <__mcmp>
 800a522:	1e07      	subs	r7, r0, #0
 800a524:	d058      	beq.n	800a5d8 <__mdiff+0xc8>
 800a526:	db52      	blt.n	800a5ce <__mdiff+0xbe>
 800a528:	2700      	movs	r7, #0
 800a52a:	4630      	mov	r0, r6
 800a52c:	6861      	ldr	r1, [r4, #4]
 800a52e:	f7ff fd75 	bl	800a01c <_Balloc>
 800a532:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800a536:	692b      	ldr	r3, [r5, #16]
 800a538:	60c7      	str	r7, [r0, #12]
 800a53a:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 800a53e:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 800a542:	3714      	adds	r7, #20
 800a544:	f108 0814 	add.w	r8, r8, #20
 800a548:	3414      	adds	r4, #20
 800a54a:	3514      	adds	r5, #20
 800a54c:	f100 0914 	add.w	r9, r0, #20
 800a550:	2600      	movs	r6, #0
 800a552:	f854 3b04 	ldr.w	r3, [r4], #4
 800a556:	f855 2b04 	ldr.w	r2, [r5], #4
 800a55a:	fa16 f183 	uxtah	r1, r6, r3
 800a55e:	fa1f fa82 	uxth.w	sl, r2
 800a562:	0c12      	lsrs	r2, r2, #16
 800a564:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 800a568:	ebca 0101 	rsb	r1, sl, r1
 800a56c:	eb06 4621 	add.w	r6, r6, r1, asr #16
 800a570:	464b      	mov	r3, r9
 800a572:	b289      	uxth	r1, r1
 800a574:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 800a578:	f843 1b04 	str.w	r1, [r3], #4
 800a57c:	1436      	asrs	r6, r6, #16
 800a57e:	45a8      	cmp	r8, r5
 800a580:	4622      	mov	r2, r4
 800a582:	4699      	mov	r9, r3
 800a584:	d8e5      	bhi.n	800a552 <__mdiff+0x42>
 800a586:	42a7      	cmp	r7, r4
 800a588:	4698      	mov	r8, r3
 800a58a:	d914      	bls.n	800a5b6 <__mdiff+0xa6>
 800a58c:	f852 5b04 	ldr.w	r5, [r2], #4
 800a590:	fa16 f685 	uxtah	r6, r6, r5
 800a594:	0c2d      	lsrs	r5, r5, #16
 800a596:	eb05 4526 	add.w	r5, r5, r6, asr #16
 800a59a:	b2b6      	uxth	r6, r6
 800a59c:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 800a5a0:	142e      	asrs	r6, r5, #16
 800a5a2:	4297      	cmp	r7, r2
 800a5a4:	f843 1b04 	str.w	r1, [r3], #4
 800a5a8:	d8f0      	bhi.n	800a58c <__mdiff+0x7c>
 800a5aa:	43e3      	mvns	r3, r4
 800a5ac:	19db      	adds	r3, r3, r7
 800a5ae:	f023 0303 	bic.w	r3, r3, #3
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4443      	add	r3, r8
 800a5b6:	b931      	cbnz	r1, 800a5c6 <__mdiff+0xb6>
 800a5b8:	3b04      	subs	r3, #4
 800a5ba:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a5be:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a5c2:	2a00      	cmp	r2, #0
 800a5c4:	d0f9      	beq.n	800a5ba <__mdiff+0xaa>
 800a5c6:	f8c0 c010 	str.w	ip, [r0, #16]
 800a5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ce:	4623      	mov	r3, r4
 800a5d0:	2701      	movs	r7, #1
 800a5d2:	462c      	mov	r4, r5
 800a5d4:	461d      	mov	r5, r3
 800a5d6:	e7a8      	b.n	800a52a <__mdiff+0x1a>
 800a5d8:	4630      	mov	r0, r6
 800a5da:	4639      	mov	r1, r7
 800a5dc:	f7ff fd1e 	bl	800a01c <_Balloc>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	6103      	str	r3, [r0, #16]
 800a5e4:	6147      	str	r7, [r0, #20]
 800a5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ea:	bf00      	nop

0800a5ec <__ulp>:
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800a5f2:	400b      	ands	r3, r1
 800a5f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	dd02      	ble.n	800a602 <__ulp+0x16>
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	2000      	movs	r0, #0
 800a600:	4770      	bx	lr
 800a602:	425b      	negs	r3, r3
 800a604:	151b      	asrs	r3, r3, #20
 800a606:	2100      	movs	r1, #0
 800a608:	2b13      	cmp	r3, #19
 800a60a:	dd0b      	ble.n	800a624 <__ulp+0x38>
 800a60c:	2b32      	cmp	r3, #50	; 0x32
 800a60e:	dd02      	ble.n	800a616 <__ulp+0x2a>
 800a610:	2301      	movs	r3, #1
 800a612:	4618      	mov	r0, r3
 800a614:	4770      	bx	lr
 800a616:	2201      	movs	r2, #1
 800a618:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 800a61c:	fa12 f303 	lsls.w	r3, r2, r3
 800a620:	4618      	mov	r0, r3
 800a622:	4770      	bx	lr
 800a624:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a628:	fa52 f103 	asrs.w	r1, r2, r3
 800a62c:	2000      	movs	r0, #0
 800a62e:	4770      	bx	lr

0800a630 <__b2d>:
 800a630:	6902      	ldr	r2, [r0, #16]
 800a632:	3204      	adds	r2, #4
 800a634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a636:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800a63a:	4603      	mov	r3, r0
 800a63c:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 800a640:	4628      	mov	r0, r5
 800a642:	460f      	mov	r7, r1
 800a644:	f103 0614 	add.w	r6, r3, #20
 800a648:	f7ff fda8 	bl	800a19c <__hi0bits>
 800a64c:	f1c0 0320 	rsb	r3, r0, #32
 800a650:	280a      	cmp	r0, #10
 800a652:	603b      	str	r3, [r7, #0]
 800a654:	4623      	mov	r3, r4
 800a656:	dc14      	bgt.n	800a682 <__b2d+0x52>
 800a658:	f1c0 010b 	rsb	r1, r0, #11
 800a65c:	fa35 f701 	lsrs.w	r7, r5, r1
 800a660:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 800a664:	42a6      	cmp	r6, r4
 800a666:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 800a66a:	d22e      	bcs.n	800a6ca <__b2d+0x9a>
 800a66c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800a670:	fa34 f101 	lsrs.w	r1, r4, r1
 800a674:	3015      	adds	r0, #21
 800a676:	4085      	lsls	r5, r0
 800a678:	ea41 0205 	orr.w	r2, r1, r5
 800a67c:	4610      	mov	r0, r2
 800a67e:	4619      	mov	r1, r3
 800a680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a682:	2100      	movs	r1, #0
 800a684:	42a6      	cmp	r6, r4
 800a686:	d202      	bcs.n	800a68e <__b2d+0x5e>
 800a688:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800a68c:	3c04      	subs	r4, #4
 800a68e:	f1b0 070b 	subs.w	r7, r0, #11
 800a692:	bf02      	ittt	eq
 800a694:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 800a698:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 800a69c:	460a      	moveq	r2, r1
 800a69e:	d0ed      	beq.n	800a67c <__b2d+0x4c>
 800a6a0:	40bd      	lsls	r5, r7
 800a6a2:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 800a6a6:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 800a6aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a6ae:	fa21 fc00 	lsr.w	ip, r1, r0
 800a6b2:	42b4      	cmp	r4, r6
 800a6b4:	ea45 030c 	orr.w	r3, r5, ip
 800a6b8:	d909      	bls.n	800a6ce <__b2d+0x9e>
 800a6ba:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800a6be:	fa34 f000 	lsrs.w	r0, r4, r0
 800a6c2:	40b9      	lsls	r1, r7
 800a6c4:	ea40 0201 	orr.w	r2, r0, r1
 800a6c8:	e7d8      	b.n	800a67c <__b2d+0x4c>
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	e7d2      	b.n	800a674 <__b2d+0x44>
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	e7f7      	b.n	800a6c2 <__b2d+0x92>
 800a6d2:	bf00      	nop

0800a6d4 <__d2b>:
 800a6d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6d8:	b083      	sub	sp, #12
 800a6da:	2101      	movs	r1, #1
 800a6dc:	461d      	mov	r5, r3
 800a6de:	4614      	mov	r4, r2
 800a6e0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800a6e2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a6e4:	f7ff fc9a 	bl	800a01c <_Balloc>
 800a6e8:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 800a6ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a6f0:	f3c5 590a 	ubfx	r9, r5, #20, #11
 800a6f4:	4680      	mov	r8, r0
 800a6f6:	9301      	str	r3, [sp, #4]
 800a6f8:	f1b9 0f00 	cmp.w	r9, #0
 800a6fc:	d002      	beq.n	800a704 <__d2b+0x30>
 800a6fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a702:	9301      	str	r3, [sp, #4]
 800a704:	2c00      	cmp	r4, #0
 800a706:	d025      	beq.n	800a754 <__d2b+0x80>
 800a708:	a802      	add	r0, sp, #8
 800a70a:	f840 4d08 	str.w	r4, [r0, #-8]!
 800a70e:	4668      	mov	r0, sp
 800a710:	f7ff fd62 	bl	800a1d8 <__lo0bits>
 800a714:	9b01      	ldr	r3, [sp, #4]
 800a716:	2800      	cmp	r0, #0
 800a718:	d132      	bne.n	800a780 <__d2b+0xac>
 800a71a:	9a00      	ldr	r2, [sp, #0]
 800a71c:	f8c8 2014 	str.w	r2, [r8, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	bf0c      	ite	eq
 800a724:	2401      	moveq	r4, #1
 800a726:	2402      	movne	r4, #2
 800a728:	f8c8 3018 	str.w	r3, [r8, #24]
 800a72c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a730:	f1b9 0f00 	cmp.w	r9, #0
 800a734:	d11b      	bne.n	800a76e <__d2b+0x9a>
 800a736:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 800a73a:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 800a73e:	6910      	ldr	r0, [r2, #16]
 800a740:	603b      	str	r3, [r7, #0]
 800a742:	f7ff fd2b 	bl	800a19c <__hi0bits>
 800a746:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800a74a:	6030      	str	r0, [r6, #0]
 800a74c:	4640      	mov	r0, r8
 800a74e:	b003      	add	sp, #12
 800a750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a754:	a801      	add	r0, sp, #4
 800a756:	f7ff fd3f 	bl	800a1d8 <__lo0bits>
 800a75a:	9b01      	ldr	r3, [sp, #4]
 800a75c:	2401      	movs	r4, #1
 800a75e:	f8c8 3014 	str.w	r3, [r8, #20]
 800a762:	f8c8 4010 	str.w	r4, [r8, #16]
 800a766:	3020      	adds	r0, #32
 800a768:	f1b9 0f00 	cmp.w	r9, #0
 800a76c:	d0e3      	beq.n	800a736 <__d2b+0x62>
 800a76e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 800a772:	eb09 0300 	add.w	r3, r9, r0
 800a776:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a77a:	603b      	str	r3, [r7, #0]
 800a77c:	6030      	str	r0, [r6, #0]
 800a77e:	e7e5      	b.n	800a74c <__d2b+0x78>
 800a780:	f1c0 0220 	rsb	r2, r0, #32
 800a784:	9900      	ldr	r1, [sp, #0]
 800a786:	fa13 f202 	lsls.w	r2, r3, r2
 800a78a:	430a      	orrs	r2, r1
 800a78c:	40c3      	lsrs	r3, r0
 800a78e:	f8c8 2014 	str.w	r2, [r8, #20]
 800a792:	9301      	str	r3, [sp, #4]
 800a794:	e7c4      	b.n	800a720 <__d2b+0x4c>
 800a796:	bf00      	nop

0800a798 <__ratio>:
 800a798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a79c:	b083      	sub	sp, #12
 800a79e:	460d      	mov	r5, r1
 800a7a0:	4669      	mov	r1, sp
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	f7ff ff44 	bl	800a630 <__b2d>
 800a7a8:	4689      	mov	r9, r1
 800a7aa:	4680      	mov	r8, r0
 800a7ac:	a901      	add	r1, sp, #4
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f7ff ff3e 	bl	800a630 <__b2d>
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	e89d 000a 	ldmia.w	sp, {r1, r3}
 800a7ba:	692a      	ldr	r2, [r5, #16]
 800a7bc:	6924      	ldr	r4, [r4, #16]
 800a7be:	1acb      	subs	r3, r1, r3
 800a7c0:	1aa4      	subs	r4, r4, r2
 800a7c2:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 800a7c6:	2c00      	cmp	r4, #0
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	464b      	mov	r3, r9
 800a7cc:	4639      	mov	r1, r7
 800a7ce:	bfcb      	itete	gt
 800a7d0:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 800a7d4:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 800a7d8:	4699      	movgt	r9, r3
 800a7da:	460f      	movle	r7, r1
 800a7dc:	bfcc      	ite	gt
 800a7de:	46c0      	nopgt			; (mov r8, r8)
 800a7e0:	4636      	movle	r6, r6
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	4632      	mov	r2, r6
 800a7e8:	463b      	mov	r3, r7
 800a7ea:	f001 fc53 	bl	800c094 <__aeabi_ddiv>
 800a7ee:	b003      	add	sp, #12
 800a7f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a7f4 <_mprec_log10>:
 800a7f4:	b510      	push	{r4, lr}
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	2c17      	cmp	r4, #23
 800a7fe:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800a802:	dd08      	ble.n	800a816 <_mprec_log10+0x22>
 800a804:	2300      	movs	r3, #0
 800a806:	2200      	movs	r2, #0
 800a808:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800a80c:	f001 fb18 	bl	800be40 <__aeabi_dmul>
 800a810:	3c01      	subs	r4, #1
 800a812:	d1f7      	bne.n	800a804 <_mprec_log10+0x10>
 800a814:	bd10      	pop	{r4, pc}
 800a816:	4b03      	ldr	r3, [pc, #12]	; (800a824 <_mprec_log10+0x30>)
 800a818:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a81c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 800a820:	bd10      	pop	{r4, pc}
 800a822:	bf00      	nop
 800a824:	0800c5a0 	.word	0x0800c5a0

0800a828 <__copybits>:
 800a828:	6913      	ldr	r3, [r2, #16]
 800a82a:	3901      	subs	r1, #1
 800a82c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a830:	1149      	asrs	r1, r1, #5
 800a832:	b470      	push	{r4, r5, r6}
 800a834:	3314      	adds	r3, #20
 800a836:	f102 0414 	add.w	r4, r2, #20
 800a83a:	3101      	adds	r1, #1
 800a83c:	429c      	cmp	r4, r3
 800a83e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a842:	d20c      	bcs.n	800a85e <__copybits+0x36>
 800a844:	4605      	mov	r5, r0
 800a846:	f854 6b04 	ldr.w	r6, [r4], #4
 800a84a:	42a3      	cmp	r3, r4
 800a84c:	f845 6b04 	str.w	r6, [r5], #4
 800a850:	d8f9      	bhi.n	800a846 <__copybits+0x1e>
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	3b15      	subs	r3, #21
 800a856:	f023 0303 	bic.w	r3, r3, #3
 800a85a:	3304      	adds	r3, #4
 800a85c:	18c0      	adds	r0, r0, r3
 800a85e:	4281      	cmp	r1, r0
 800a860:	d904      	bls.n	800a86c <__copybits+0x44>
 800a862:	2300      	movs	r3, #0
 800a864:	f840 3b04 	str.w	r3, [r0], #4
 800a868:	4281      	cmp	r1, r0
 800a86a:	d8fb      	bhi.n	800a864 <__copybits+0x3c>
 800a86c:	bc70      	pop	{r4, r5, r6}
 800a86e:	4770      	bx	lr

0800a870 <__any_on>:
 800a870:	6902      	ldr	r2, [r0, #16]
 800a872:	114b      	asrs	r3, r1, #5
 800a874:	429a      	cmp	r2, r3
 800a876:	b410      	push	{r4}
 800a878:	db01      	blt.n	800a87e <__any_on+0xe>
 800a87a:	461a      	mov	r2, r3
 800a87c:	dc13      	bgt.n	800a8a6 <__any_on+0x36>
 800a87e:	3204      	adds	r2, #4
 800a880:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800a884:	f100 0114 	add.w	r1, r0, #20
 800a888:	1d1c      	adds	r4, r3, #4
 800a88a:	42a1      	cmp	r1, r4
 800a88c:	d218      	bcs.n	800a8c0 <__any_on+0x50>
 800a88e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a892:	b92a      	cbnz	r2, 800a8a0 <__any_on+0x30>
 800a894:	4299      	cmp	r1, r3
 800a896:	d213      	bcs.n	800a8c0 <__any_on+0x50>
 800a898:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	d0f9      	beq.n	800a894 <__any_on+0x24>
 800a8a0:	2001      	movs	r0, #1
 800a8a2:	bc10      	pop	{r4}
 800a8a4:	4770      	bx	lr
 800a8a6:	f011 011f 	ands.w	r1, r1, #31
 800a8aa:	d0e8      	beq.n	800a87e <__any_on+0xe>
 800a8ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	fa33 f401 	lsrs.w	r4, r3, r1
 800a8b6:	fa14 f101 	lsls.w	r1, r4, r1
 800a8ba:	4299      	cmp	r1, r3
 800a8bc:	d1f0      	bne.n	800a8a0 <__any_on+0x30>
 800a8be:	e7de      	b.n	800a87e <__any_on+0xe>
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	e7ee      	b.n	800a8a2 <__any_on+0x32>

0800a8c4 <__fpclassifyd>:
 800a8c4:	ea50 0201 	orrs.w	r2, r0, r1
 800a8c8:	b410      	push	{r4}
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	d102      	bne.n	800a8d4 <__fpclassifyd+0x10>
 800a8ce:	2002      	movs	r0, #2
 800a8d0:	bc10      	pop	{r4}
 800a8d2:	4770      	bx	lr
 800a8d4:	f1d0 0101 	rsbs	r1, r0, #1
 800a8d8:	bf38      	it	cc
 800a8da:	2100      	movcc	r1, #0
 800a8dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8e0:	bf08      	it	eq
 800a8e2:	2800      	cmpeq	r0, #0
 800a8e4:	d0f3      	beq.n	800a8ce <__fpclassifyd+0xa>
 800a8e6:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 800a8ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8ee:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 800a8f2:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 800a8f6:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 800a8fa:	4290      	cmp	r0, r2
 800a8fc:	bf88      	it	hi
 800a8fe:	4294      	cmphi	r4, r2
 800a900:	d801      	bhi.n	800a906 <__fpclassifyd+0x42>
 800a902:	2004      	movs	r0, #4
 800a904:	e7e4      	b.n	800a8d0 <__fpclassifyd+0xc>
 800a906:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 800a90a:	2003      	movs	r0, #3
 800a90c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a910:	bf28      	it	cs
 800a912:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 800a916:	d3db      	bcc.n	800a8d0 <__fpclassifyd+0xc>
 800a918:	2200      	movs	r2, #0
 800a91a:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 800a91e:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800a922:	bf18      	it	ne
 800a924:	4293      	cmpne	r3, r2
 800a926:	bf14      	ite	ne
 800a928:	2300      	movne	r3, #0
 800a92a:	2301      	moveq	r3, #1
 800a92c:	ea01 0003 	and.w	r0, r1, r3
 800a930:	e7ce      	b.n	800a8d0 <__fpclassifyd+0xc>
 800a932:	bf00      	nop

0800a934 <_sbrk_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4c07      	ldr	r4, [pc, #28]	; (800a954 <_sbrk_r+0x20>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4605      	mov	r5, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	f7fc fbde 	bl	8007100 <_sbrk>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d000      	beq.n	800a94a <_sbrk_r+0x16>
 800a948:	bd38      	pop	{r3, r4, r5, pc}
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d0fb      	beq.n	800a948 <_sbrk_r+0x14>
 800a950:	602b      	str	r3, [r5, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	20001028 	.word	0x20001028

0800a958 <strcmp>:
 800a958:	ea80 0201 	eor.w	r2, r0, r1
 800a95c:	f012 0f03 	tst.w	r2, #3
 800a960:	d13a      	bne.n	800a9d8 <strcmp_unaligned>
 800a962:	f010 0203 	ands.w	r2, r0, #3
 800a966:	f020 0003 	bic.w	r0, r0, #3
 800a96a:	f021 0103 	bic.w	r1, r1, #3
 800a96e:	f850 cb04 	ldr.w	ip, [r0], #4
 800a972:	bf08      	it	eq
 800a974:	f851 3b04 	ldreq.w	r3, [r1], #4
 800a978:	d00d      	beq.n	800a996 <strcmp+0x3e>
 800a97a:	f082 0203 	eor.w	r2, r2, #3
 800a97e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800a982:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800a986:	fa23 f202 	lsr.w	r2, r3, r2
 800a98a:	f851 3b04 	ldr.w	r3, [r1], #4
 800a98e:	ea4c 0c02 	orr.w	ip, ip, r2
 800a992:	ea43 0302 	orr.w	r3, r3, r2
 800a996:	bf00      	nop
 800a998:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 800a99c:	459c      	cmp	ip, r3
 800a99e:	bf01      	itttt	eq
 800a9a0:	ea22 020c 	biceq.w	r2, r2, ip
 800a9a4:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 800a9a8:	f850 cb04 	ldreq.w	ip, [r0], #4
 800a9ac:	f851 3b04 	ldreq.w	r3, [r1], #4
 800a9b0:	d0f2      	beq.n	800a998 <strcmp+0x40>
 800a9b2:	ea4f 600c 	mov.w	r0, ip, lsl #24
 800a9b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800a9ba:	2801      	cmp	r0, #1
 800a9bc:	bf28      	it	cs
 800a9be:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 800a9c2:	bf08      	it	eq
 800a9c4:	0a1b      	lsreq	r3, r3, #8
 800a9c6:	d0f4      	beq.n	800a9b2 <strcmp+0x5a>
 800a9c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 800a9cc:	ea4f 6010 	mov.w	r0, r0, lsr #24
 800a9d0:	eba0 0003 	sub.w	r0, r0, r3
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop

0800a9d8 <strcmp_unaligned>:
 800a9d8:	f010 0f03 	tst.w	r0, #3
 800a9dc:	d00a      	beq.n	800a9f4 <strcmp_unaligned+0x1c>
 800a9de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e6:	2a01      	cmp	r2, #1
 800a9e8:	bf28      	it	cs
 800a9ea:	429a      	cmpcs	r2, r3
 800a9ec:	d0f4      	beq.n	800a9d8 <strcmp_unaligned>
 800a9ee:	eba2 0003 	sub.w	r0, r2, r3
 800a9f2:	4770      	bx	lr
 800a9f4:	f84d 5d04 	str.w	r5, [sp, #-4]!
 800a9f8:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800a9fc:	f04f 0201 	mov.w	r2, #1
 800aa00:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 800aa04:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 800aa08:	f001 0c03 	and.w	ip, r1, #3
 800aa0c:	f021 0103 	bic.w	r1, r1, #3
 800aa10:	f850 4b04 	ldr.w	r4, [r0], #4
 800aa14:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa18:	f1bc 0f02 	cmp.w	ip, #2
 800aa1c:	d026      	beq.n	800aa6c <strcmp_unaligned+0x94>
 800aa1e:	d84b      	bhi.n	800aab8 <strcmp_unaligned+0xe0>
 800aa20:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 800aa24:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 800aa28:	eba4 0302 	sub.w	r3, r4, r2
 800aa2c:	ea23 0304 	bic.w	r3, r3, r4
 800aa30:	d10d      	bne.n	800aa4e <strcmp_unaligned+0x76>
 800aa32:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800aa36:	bf08      	it	eq
 800aa38:	f851 5b04 	ldreq.w	r5, [r1], #4
 800aa3c:	d10a      	bne.n	800aa54 <strcmp_unaligned+0x7c>
 800aa3e:	ea8c 0c04 	eor.w	ip, ip, r4
 800aa42:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 800aa46:	d10c      	bne.n	800aa62 <strcmp_unaligned+0x8a>
 800aa48:	f850 4b04 	ldr.w	r4, [r0], #4
 800aa4c:	e7e8      	b.n	800aa20 <strcmp_unaligned+0x48>
 800aa4e:	ea4f 2515 	mov.w	r5, r5, lsr #8
 800aa52:	e05c      	b.n	800ab0e <strcmp_unaligned+0x136>
 800aa54:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 800aa58:	d152      	bne.n	800ab00 <strcmp_unaligned+0x128>
 800aa5a:	780d      	ldrb	r5, [r1, #0]
 800aa5c:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800aa60:	e055      	b.n	800ab0e <strcmp_unaligned+0x136>
 800aa62:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800aa66:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 800aa6a:	e050      	b.n	800ab0e <strcmp_unaligned+0x136>
 800aa6c:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 800aa70:	eba4 0302 	sub.w	r3, r4, r2
 800aa74:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aa78:	ea23 0304 	bic.w	r3, r3, r4
 800aa7c:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 800aa80:	d117      	bne.n	800aab2 <strcmp_unaligned+0xda>
 800aa82:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800aa86:	bf08      	it	eq
 800aa88:	f851 5b04 	ldreq.w	r5, [r1], #4
 800aa8c:	d107      	bne.n	800aa9e <strcmp_unaligned+0xc6>
 800aa8e:	ea8c 0c04 	eor.w	ip, ip, r4
 800aa92:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 800aa96:	d108      	bne.n	800aaaa <strcmp_unaligned+0xd2>
 800aa98:	f850 4b04 	ldr.w	r4, [r0], #4
 800aa9c:	e7e6      	b.n	800aa6c <strcmp_unaligned+0x94>
 800aa9e:	041b      	lsls	r3, r3, #16
 800aaa0:	d12e      	bne.n	800ab00 <strcmp_unaligned+0x128>
 800aaa2:	880d      	ldrh	r5, [r1, #0]
 800aaa4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800aaa8:	e031      	b.n	800ab0e <strcmp_unaligned+0x136>
 800aaaa:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800aaae:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800aab2:	ea4f 4515 	mov.w	r5, r5, lsr #16
 800aab6:	e02a      	b.n	800ab0e <strcmp_unaligned+0x136>
 800aab8:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 800aabc:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 800aac0:	eba4 0302 	sub.w	r3, r4, r2
 800aac4:	ea23 0304 	bic.w	r3, r3, r4
 800aac8:	d10d      	bne.n	800aae6 <strcmp_unaligned+0x10e>
 800aaca:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 800aace:	bf08      	it	eq
 800aad0:	f851 5b04 	ldreq.w	r5, [r1], #4
 800aad4:	d10a      	bne.n	800aaec <strcmp_unaligned+0x114>
 800aad6:	ea8c 0c04 	eor.w	ip, ip, r4
 800aada:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 800aade:	d10a      	bne.n	800aaf6 <strcmp_unaligned+0x11e>
 800aae0:	f850 4b04 	ldr.w	r4, [r0], #4
 800aae4:	e7e8      	b.n	800aab8 <strcmp_unaligned+0xe0>
 800aae6:	ea4f 6515 	mov.w	r5, r5, lsr #24
 800aaea:	e010      	b.n	800ab0e <strcmp_unaligned+0x136>
 800aaec:	f014 0fff 	tst.w	r4, #255	; 0xff
 800aaf0:	d006      	beq.n	800ab00 <strcmp_unaligned+0x128>
 800aaf2:	f851 5b04 	ldr.w	r5, [r1], #4
 800aaf6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 800aafa:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800aafe:	e006      	b.n	800ab0e <strcmp_unaligned+0x136>
 800ab00:	f04f 0000 	mov.w	r0, #0
 800ab04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab08:	f85d 5b04 	ldr.w	r5, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 800ab12:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 800ab16:	2801      	cmp	r0, #1
 800ab18:	bf28      	it	cs
 800ab1a:	4290      	cmpcs	r0, r2
 800ab1c:	bf04      	itt	eq
 800ab1e:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 800ab22:	0a2d      	lsreq	r5, r5, #8
 800ab24:	d0f3      	beq.n	800ab0e <strcmp_unaligned+0x136>
 800ab26:	eba2 0000 	sub.w	r0, r2, r0
 800ab2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab2e:	f85d 5b04 	ldr.w	r5, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <strlen>:
 800ab34:	f020 0103 	bic.w	r1, r0, #3
 800ab38:	f010 0003 	ands.w	r0, r0, #3
 800ab3c:	f1c0 0000 	rsb	r0, r0, #0
 800ab40:	f851 3b04 	ldr.w	r3, [r1], #4
 800ab44:	f100 0c04 	add.w	ip, r0, #4
 800ab48:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ab4c:	f06f 0200 	mvn.w	r2, #0
 800ab50:	bf1c      	itt	ne
 800ab52:	fa22 f20c 	lsrne.w	r2, r2, ip
 800ab56:	4313      	orrne	r3, r2
 800ab58:	f04f 0c01 	mov.w	ip, #1
 800ab5c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800ab60:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800ab64:	eba3 020c 	sub.w	r2, r3, ip
 800ab68:	ea22 0203 	bic.w	r2, r2, r3
 800ab6c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800ab70:	bf04      	itt	eq
 800ab72:	f851 3b04 	ldreq.w	r3, [r1], #4
 800ab76:	3004      	addeq	r0, #4
 800ab78:	d0f4      	beq.n	800ab64 <strlen+0x30>
 800ab7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ab7e:	bf1f      	itttt	ne
 800ab80:	3001      	addne	r0, #1
 800ab82:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800ab86:	3001      	addne	r0, #1
 800ab88:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800ab8c:	bf18      	it	ne
 800ab8e:	3001      	addne	r0, #1
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop

0800ab94 <__ssprint_r>:
 800ab94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab98:	b083      	sub	sp, #12
 800ab9a:	4691      	mov	r9, r2
 800ab9c:	9001      	str	r0, [sp, #4]
 800ab9e:	6890      	ldr	r0, [r2, #8]
 800aba0:	6817      	ldr	r7, [r2, #0]
 800aba2:	460d      	mov	r5, r1
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d072      	beq.n	800ac8e <__ssprint_r+0xfa>
 800aba8:	f04f 0a00 	mov.w	sl, #0
 800abac:	6808      	ldr	r0, [r1, #0]
 800abae:	688b      	ldr	r3, [r1, #8]
 800abb0:	4654      	mov	r4, sl
 800abb2:	2c00      	cmp	r4, #0
 800abb4:	d048      	beq.n	800ac48 <__ssprint_r+0xb4>
 800abb6:	429c      	cmp	r4, r3
 800abb8:	461e      	mov	r6, r3
 800abba:	4698      	mov	r8, r3
 800abbc:	bf3c      	itt	cc
 800abbe:	4626      	movcc	r6, r4
 800abc0:	46a0      	movcc	r8, r4
 800abc2:	d331      	bcc.n	800ac28 <__ssprint_r+0x94>
 800abc4:	89ab      	ldrh	r3, [r5, #12]
 800abc6:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800abca:	d02d      	beq.n	800ac28 <__ssprint_r+0x94>
 800abcc:	696e      	ldr	r6, [r5, #20]
 800abce:	6929      	ldr	r1, [r5, #16]
 800abd0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800abd4:	ebc1 0800 	rsb	r8, r1, r0
 800abd8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 800abdc:	1c60      	adds	r0, r4, #1
 800abde:	1076      	asrs	r6, r6, #1
 800abe0:	4440      	add	r0, r8
 800abe2:	4286      	cmp	r6, r0
 800abe4:	4632      	mov	r2, r6
 800abe6:	bf3c      	itt	cc
 800abe8:	4606      	movcc	r6, r0
 800abea:	4632      	movcc	r2, r6
 800abec:	055b      	lsls	r3, r3, #21
 800abee:	9801      	ldr	r0, [sp, #4]
 800abf0:	d52f      	bpl.n	800ac52 <__ssprint_r+0xbe>
 800abf2:	4611      	mov	r1, r2
 800abf4:	f7fe fed8 	bl	80099a8 <_malloc_r>
 800abf8:	4683      	mov	fp, r0
 800abfa:	2800      	cmp	r0, #0
 800abfc:	d032      	beq.n	800ac64 <__ssprint_r+0xd0>
 800abfe:	6929      	ldr	r1, [r5, #16]
 800ac00:	4642      	mov	r2, r8
 800ac02:	f7ff f9c3 	bl	8009f8c <memcpy>
 800ac06:	89ab      	ldrh	r3, [r5, #12]
 800ac08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac10:	81ab      	strh	r3, [r5, #12]
 800ac12:	ebc8 0306 	rsb	r3, r8, r6
 800ac16:	eb0b 0008 	add.w	r0, fp, r8
 800ac1a:	616e      	str	r6, [r5, #20]
 800ac1c:	f8c5 b010 	str.w	fp, [r5, #16]
 800ac20:	6028      	str	r0, [r5, #0]
 800ac22:	4626      	mov	r6, r4
 800ac24:	60ab      	str	r3, [r5, #8]
 800ac26:	46a0      	mov	r8, r4
 800ac28:	4642      	mov	r2, r8
 800ac2a:	4651      	mov	r1, sl
 800ac2c:	f000 fcb8 	bl	800b5a0 <memmove>
 800ac30:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800ac34:	68ab      	ldr	r3, [r5, #8]
 800ac36:	6828      	ldr	r0, [r5, #0]
 800ac38:	1b9b      	subs	r3, r3, r6
 800ac3a:	4440      	add	r0, r8
 800ac3c:	1b14      	subs	r4, r2, r4
 800ac3e:	60ab      	str	r3, [r5, #8]
 800ac40:	6028      	str	r0, [r5, #0]
 800ac42:	f8c9 4008 	str.w	r4, [r9, #8]
 800ac46:	b1e4      	cbz	r4, 800ac82 <__ssprint_r+0xee>
 800ac48:	f8d7 a000 	ldr.w	sl, [r7]
 800ac4c:	687c      	ldr	r4, [r7, #4]
 800ac4e:	3708      	adds	r7, #8
 800ac50:	e7af      	b.n	800abb2 <__ssprint_r+0x1e>
 800ac52:	f000 fd47 	bl	800b6e4 <_realloc_r>
 800ac56:	4683      	mov	fp, r0
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d1da      	bne.n	800ac12 <__ssprint_r+0x7e>
 800ac5c:	9801      	ldr	r0, [sp, #4]
 800ac5e:	6929      	ldr	r1, [r5, #16]
 800ac60:	f7fe fd96 	bl	8009790 <_free_r>
 800ac64:	9a01      	ldr	r2, [sp, #4]
 800ac66:	230c      	movs	r3, #12
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	89aa      	ldrh	r2, [r5, #12]
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac72:	81aa      	strh	r2, [r5, #12]
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac78:	f8c9 3008 	str.w	r3, [r9, #8]
 800ac7c:	f8c9 3004 	str.w	r3, [r9, #4]
 800ac80:	e002      	b.n	800ac88 <__ssprint_r+0xf4>
 800ac82:	f8c9 4004 	str.w	r4, [r9, #4]
 800ac86:	4620      	mov	r0, r4
 800ac88:	b003      	add	sp, #12
 800ac8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac8e:	6050      	str	r0, [r2, #4]
 800ac90:	e7fa      	b.n	800ac88 <__ssprint_r+0xf4>
 800ac92:	bf00      	nop

0800ac94 <_svfiprintf_r>:
 800ac94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac98:	468a      	mov	sl, r1
 800ac9a:	8989      	ldrh	r1, [r1, #12]
 800ac9c:	b0ad      	sub	sp, #180	; 0xb4
 800ac9e:	0609      	lsls	r1, r1, #24
 800aca0:	9007      	str	r0, [sp, #28]
 800aca2:	9305      	str	r3, [sp, #20]
 800aca4:	d504      	bpl.n	800acb0 <_svfiprintf_r+0x1c>
 800aca6:	f8da 3010 	ldr.w	r3, [sl, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 8422 	beq.w	800b4f4 <_svfiprintf_r+0x860>
 800acb0:	2300      	movs	r3, #0
 800acb2:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 800acb6:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800acba:	a90e      	add	r1, sp, #56	; 0x38
 800acbc:	930c      	str	r3, [sp, #48]	; 0x30
 800acbe:	932a      	str	r3, [sp, #168]	; 0xa8
 800acc0:	9329      	str	r3, [sp, #164]	; 0xa4
 800acc2:	9304      	str	r3, [sp, #16]
 800acc4:	ebc0 0308 	rsb	r3, r0, r8
 800acc8:	9001      	str	r0, [sp, #4]
 800acca:	9128      	str	r1, [sp, #160]	; 0xa0
 800accc:	4617      	mov	r7, r2
 800acce:	460c      	mov	r4, r1
 800acd0:	930d      	str	r3, [sp, #52]	; 0x34
 800acd2:	783b      	ldrb	r3, [r7, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bf18      	it	ne
 800acd8:	2b25      	cmpne	r3, #37	; 0x25
 800acda:	463d      	mov	r5, r7
 800acdc:	d016      	beq.n	800ad0c <_svfiprintf_r+0x78>
 800acde:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800ace2:	2b25      	cmp	r3, #37	; 0x25
 800ace4:	bf18      	it	ne
 800ace6:	2b00      	cmpne	r3, #0
 800ace8:	d1f9      	bne.n	800acde <_svfiprintf_r+0x4a>
 800acea:	1bee      	subs	r6, r5, r7
 800acec:	d00e      	beq.n	800ad0c <_svfiprintf_r+0x78>
 800acee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800acf0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800acf2:	6027      	str	r7, [r4, #0]
 800acf4:	3301      	adds	r3, #1
 800acf6:	1992      	adds	r2, r2, r6
 800acf8:	2b07      	cmp	r3, #7
 800acfa:	6066      	str	r6, [r4, #4]
 800acfc:	922a      	str	r2, [sp, #168]	; 0xa8
 800acfe:	9329      	str	r3, [sp, #164]	; 0xa4
 800ad00:	f300 832a 	bgt.w	800b358 <_svfiprintf_r+0x6c4>
 800ad04:	3408      	adds	r4, #8
 800ad06:	9b04      	ldr	r3, [sp, #16]
 800ad08:	199b      	adds	r3, r3, r6
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	782b      	ldrb	r3, [r5, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f000 82c5 	beq.w	800b29e <_svfiprintf_r+0x60a>
 800ad14:	2200      	movs	r2, #0
 800ad16:	1c6f      	adds	r7, r5, #1
 800ad18:	4613      	mov	r3, r2
 800ad1a:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800ad1e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ad22:	9206      	str	r2, [sp, #24]
 800ad24:	4693      	mov	fp, r2
 800ad26:	f817 2b01 	ldrb.w	r2, [r7], #1
 800ad2a:	f1a2 0120 	sub.w	r1, r2, #32
 800ad2e:	2958      	cmp	r1, #88	; 0x58
 800ad30:	f200 8178 	bhi.w	800b024 <_svfiprintf_r+0x390>
 800ad34:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ad38:	01760172 	.word	0x01760172
 800ad3c:	016f0176 	.word	0x016f0176
 800ad40:	01760176 	.word	0x01760176
 800ad44:	01760176 	.word	0x01760176
 800ad48:	01760176 	.word	0x01760176
 800ad4c:	01d800af 	.word	0x01d800af
 800ad50:	00ba0176 	.word	0x00ba0176
 800ad54:	017601da 	.word	0x017601da
 800ad58:	01c401d5 	.word	0x01c401d5
 800ad5c:	01c401c4 	.word	0x01c401c4
 800ad60:	01c401c4 	.word	0x01c401c4
 800ad64:	01c401c4 	.word	0x01c401c4
 800ad68:	01c401c4 	.word	0x01c401c4
 800ad6c:	01760176 	.word	0x01760176
 800ad70:	01760176 	.word	0x01760176
 800ad74:	01760176 	.word	0x01760176
 800ad78:	01760176 	.word	0x01760176
 800ad7c:	01760176 	.word	0x01760176
 800ad80:	017601a7 	.word	0x017601a7
 800ad84:	01760176 	.word	0x01760176
 800ad88:	01760176 	.word	0x01760176
 800ad8c:	01760176 	.word	0x01760176
 800ad90:	01760176 	.word	0x01760176
 800ad94:	005c0176 	.word	0x005c0176
 800ad98:	01760176 	.word	0x01760176
 800ad9c:	01760176 	.word	0x01760176
 800ada0:	00a00176 	.word	0x00a00176
 800ada4:	01760176 	.word	0x01760176
 800ada8:	0176016a 	.word	0x0176016a
 800adac:	01760176 	.word	0x01760176
 800adb0:	01760176 	.word	0x01760176
 800adb4:	01760176 	.word	0x01760176
 800adb8:	01760176 	.word	0x01760176
 800adbc:	01170176 	.word	0x01170176
 800adc0:	01760105 	.word	0x01760105
 800adc4:	01760176 	.word	0x01760176
 800adc8:	01050102 	.word	0x01050102
 800adcc:	01760176 	.word	0x01760176
 800add0:	01760059 	.word	0x01760059
 800add4:	005e00d1 	.word	0x005e00d1
 800add8:	005900bd 	.word	0x005900bd
 800addc:	01870176 	.word	0x01870176
 800ade0:	00a20176 	.word	0x00a20176
 800ade4:	01760176 	.word	0x01760176
 800ade8:	00e2      	.short	0x00e2
 800adea:	f04b 0b10 	orr.w	fp, fp, #16
 800adee:	e79a      	b.n	800ad26 <_svfiprintf_r+0x92>
 800adf0:	f04b 0b10 	orr.w	fp, fp, #16
 800adf4:	f01b 0210 	ands.w	r2, fp, #16
 800adf8:	f000 8313 	beq.w	800b422 <_svfiprintf_r+0x78e>
 800adfc:	9805      	ldr	r0, [sp, #20]
 800adfe:	6803      	ldr	r3, [r0, #0]
 800ae00:	2200      	movs	r2, #0
 800ae02:	1a99      	subs	r1, r3, r2
 800ae04:	bf18      	it	ne
 800ae06:	2101      	movne	r1, #1
 800ae08:	3004      	adds	r0, #4
 800ae0a:	9005      	str	r0, [sp, #20]
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 800ae12:	2d00      	cmp	r5, #0
 800ae14:	bfa8      	it	ge
 800ae16:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 800ae1a:	2d00      	cmp	r5, #0
 800ae1c:	bf18      	it	ne
 800ae1e:	f041 0101 	orrne.w	r1, r1, #1
 800ae22:	2900      	cmp	r1, #0
 800ae24:	f000 8228 	beq.w	800b278 <_svfiprintf_r+0x5e4>
 800ae28:	2a01      	cmp	r2, #1
 800ae2a:	f000 82cf 	beq.w	800b3cc <_svfiprintf_r+0x738>
 800ae2e:	2a02      	cmp	r2, #2
 800ae30:	bf18      	it	ne
 800ae32:	4642      	movne	r2, r8
 800ae34:	d101      	bne.n	800ae3a <_svfiprintf_r+0x1a6>
 800ae36:	e2b9      	b.n	800b3ac <_svfiprintf_r+0x718>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	f003 0107 	and.w	r1, r3, #7
 800ae3e:	3130      	adds	r1, #48	; 0x30
 800ae40:	1e50      	subs	r0, r2, #1
 800ae42:	08db      	lsrs	r3, r3, #3
 800ae44:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ae48:	d1f6      	bne.n	800ae38 <_svfiprintf_r+0x1a4>
 800ae4a:	f01b 0f01 	tst.w	fp, #1
 800ae4e:	9009      	str	r0, [sp, #36]	; 0x24
 800ae50:	f040 831a 	bne.w	800b488 <_svfiprintf_r+0x7f4>
 800ae54:	ebc0 0308 	rsb	r3, r0, r8
 800ae58:	9303      	str	r3, [sp, #12]
 800ae5a:	9508      	str	r5, [sp, #32]
 800ae5c:	9803      	ldr	r0, [sp, #12]
 800ae5e:	9908      	ldr	r1, [sp, #32]
 800ae60:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 800ae64:	4288      	cmp	r0, r1
 800ae66:	bfb8      	it	lt
 800ae68:	4608      	movlt	r0, r1
 800ae6a:	9002      	str	r0, [sp, #8]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 808b 	beq.w	800af88 <_svfiprintf_r+0x2f4>
 800ae72:	3001      	adds	r0, #1
 800ae74:	9002      	str	r0, [sp, #8]
 800ae76:	e087      	b.n	800af88 <_svfiprintf_r+0x2f4>
 800ae78:	f04b 0b10 	orr.w	fp, fp, #16
 800ae7c:	f01b 0f10 	tst.w	fp, #16
 800ae80:	f000 82c1 	beq.w	800b406 <_svfiprintf_r+0x772>
 800ae84:	9805      	ldr	r0, [sp, #20]
 800ae86:	6803      	ldr	r3, [r0, #0]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	1c19      	adds	r1, r3, #0
 800ae8c:	bf18      	it	ne
 800ae8e:	2101      	movne	r1, #1
 800ae90:	3004      	adds	r0, #4
 800ae92:	9005      	str	r0, [sp, #20]
 800ae94:	e7ba      	b.n	800ae0c <_svfiprintf_r+0x178>
 800ae96:	9805      	ldr	r0, [sp, #20]
 800ae98:	9905      	ldr	r1, [sp, #20]
 800ae9a:	6800      	ldr	r0, [r0, #0]
 800ae9c:	1d0a      	adds	r2, r1, #4
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	9006      	str	r0, [sp, #24]
 800aea2:	f280 82e0 	bge.w	800b466 <_svfiprintf_r+0x7d2>
 800aea6:	4240      	negs	r0, r0
 800aea8:	9006      	str	r0, [sp, #24]
 800aeaa:	9205      	str	r2, [sp, #20]
 800aeac:	f04b 0b04 	orr.w	fp, fp, #4
 800aeb0:	e739      	b.n	800ad26 <_svfiprintf_r+0x92>
 800aeb2:	9b05      	ldr	r3, [sp, #20]
 800aeb4:	9905      	ldr	r1, [sp, #20]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2230      	movs	r2, #48	; 0x30
 800aeba:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 800aebe:	2278      	movs	r2, #120	; 0x78
 800aec0:	3104      	adds	r1, #4
 800aec2:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800aec6:	4aaf      	ldr	r2, [pc, #700]	; (800b184 <_svfiprintf_r+0x4f0>)
 800aec8:	9105      	str	r1, [sp, #20]
 800aeca:	1c19      	adds	r1, r3, #0
 800aecc:	bf18      	it	ne
 800aece:	2101      	movne	r1, #1
 800aed0:	920c      	str	r2, [sp, #48]	; 0x30
 800aed2:	f04b 0b02 	orr.w	fp, fp, #2
 800aed6:	2202      	movs	r2, #2
 800aed8:	e798      	b.n	800ae0c <_svfiprintf_r+0x178>
 800aeda:	f01b 0f10 	tst.w	fp, #16
 800aede:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800aee2:	f040 82dd 	bne.w	800b4a0 <_svfiprintf_r+0x80c>
 800aee6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800aeea:	f000 82fb 	beq.w	800b4e4 <_svfiprintf_r+0x850>
 800aeee:	9a05      	ldr	r2, [sp, #20]
 800aef0:	9804      	ldr	r0, [sp, #16]
 800aef2:	6813      	ldr	r3, [r2, #0]
 800aef4:	3204      	adds	r2, #4
 800aef6:	9205      	str	r2, [sp, #20]
 800aef8:	8018      	strh	r0, [r3, #0]
 800aefa:	e6ea      	b.n	800acd2 <_svfiprintf_r+0x3e>
 800aefc:	49a1      	ldr	r1, [pc, #644]	; (800b184 <_svfiprintf_r+0x4f0>)
 800aefe:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800af02:	910c      	str	r1, [sp, #48]	; 0x30
 800af04:	f01b 0f10 	tst.w	fp, #16
 800af08:	d103      	bne.n	800af12 <_svfiprintf_r+0x27e>
 800af0a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800af0e:	f040 82d3 	bne.w	800b4b8 <_svfiprintf_r+0x824>
 800af12:	9805      	ldr	r0, [sp, #20]
 800af14:	6803      	ldr	r3, [r0, #0]
 800af16:	3004      	adds	r0, #4
 800af18:	9005      	str	r0, [sp, #20]
 800af1a:	1c19      	adds	r1, r3, #0
 800af1c:	bf18      	it	ne
 800af1e:	2101      	movne	r1, #1
 800af20:	ea1b 0f01 	tst.w	fp, r1
 800af24:	f000 8287 	beq.w	800b436 <_svfiprintf_r+0x7a2>
 800af28:	2130      	movs	r1, #48	; 0x30
 800af2a:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800af2e:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800af32:	f04b 0b02 	orr.w	fp, fp, #2
 800af36:	2101      	movs	r1, #1
 800af38:	2202      	movs	r2, #2
 800af3a:	e767      	b.n	800ae0c <_svfiprintf_r+0x178>
 800af3c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 800af40:	e6f1      	b.n	800ad26 <_svfiprintf_r+0x92>
 800af42:	f01b 0f10 	tst.w	fp, #16
 800af46:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800af4a:	f000 80a4 	beq.w	800b096 <_svfiprintf_r+0x402>
 800af4e:	9805      	ldr	r0, [sp, #20]
 800af50:	6803      	ldr	r3, [r0, #0]
 800af52:	3004      	adds	r0, #4
 800af54:	9005      	str	r0, [sp, #20]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f2c0 80a9 	blt.w	800b0ae <_svfiprintf_r+0x41a>
 800af5c:	bf0c      	ite	eq
 800af5e:	2100      	moveq	r1, #0
 800af60:	2101      	movne	r1, #1
 800af62:	2201      	movs	r2, #1
 800af64:	e755      	b.n	800ae12 <_svfiprintf_r+0x17e>
 800af66:	9b05      	ldr	r3, [sp, #20]
 800af68:	9905      	ldr	r1, [sp, #20]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2001      	movs	r0, #1
 800af6e:	2200      	movs	r2, #0
 800af70:	3104      	adds	r1, #4
 800af72:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 800af76:	ab1e      	add	r3, sp, #120	; 0x78
 800af78:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800af7c:	9002      	str	r0, [sp, #8]
 800af7e:	9105      	str	r1, [sp, #20]
 800af80:	9003      	str	r0, [sp, #12]
 800af82:	9309      	str	r3, [sp, #36]	; 0x24
 800af84:	2300      	movs	r3, #0
 800af86:	9308      	str	r3, [sp, #32]
 800af88:	f01b 0302 	ands.w	r3, fp, #2
 800af8c:	930a      	str	r3, [sp, #40]	; 0x28
 800af8e:	d002      	beq.n	800af96 <_svfiprintf_r+0x302>
 800af90:	9b02      	ldr	r3, [sp, #8]
 800af92:	3302      	adds	r3, #2
 800af94:	9302      	str	r3, [sp, #8]
 800af96:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800af9a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af9c:	f040 80c1 	bne.w	800b122 <_svfiprintf_r+0x48e>
 800afa0:	9b06      	ldr	r3, [sp, #24]
 800afa2:	9802      	ldr	r0, [sp, #8]
 800afa4:	1a1d      	subs	r5, r3, r0
 800afa6:	2d00      	cmp	r5, #0
 800afa8:	f340 80bb 	ble.w	800b122 <_svfiprintf_r+0x48e>
 800afac:	2d10      	cmp	r5, #16
 800afae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800afb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800afb2:	4e75      	ldr	r6, [pc, #468]	; (800b188 <_svfiprintf_r+0x4f4>)
 800afb4:	dd1f      	ble.n	800aff6 <_svfiprintf_r+0x362>
 800afb6:	4621      	mov	r1, r4
 800afb8:	f04f 0910 	mov.w	r9, #16
 800afbc:	9c07      	ldr	r4, [sp, #28]
 800afbe:	e002      	b.n	800afc6 <_svfiprintf_r+0x332>
 800afc0:	3d10      	subs	r5, #16
 800afc2:	2d10      	cmp	r5, #16
 800afc4:	dd16      	ble.n	800aff4 <_svfiprintf_r+0x360>
 800afc6:	3301      	adds	r3, #1
 800afc8:	3210      	adds	r2, #16
 800afca:	e881 0240 	stmia.w	r1, {r6, r9}
 800afce:	3108      	adds	r1, #8
 800afd0:	2b07      	cmp	r3, #7
 800afd2:	922a      	str	r2, [sp, #168]	; 0xa8
 800afd4:	9329      	str	r3, [sp, #164]	; 0xa4
 800afd6:	ddf3      	ble.n	800afc0 <_svfiprintf_r+0x32c>
 800afd8:	4620      	mov	r0, r4
 800afda:	4651      	mov	r1, sl
 800afdc:	4642      	mov	r2, r8
 800afde:	f7ff fdd9 	bl	800ab94 <__ssprint_r>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	f040 8162 	bne.w	800b2ac <_svfiprintf_r+0x618>
 800afe8:	3d10      	subs	r5, #16
 800afea:	2d10      	cmp	r5, #16
 800afec:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800afee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800aff0:	a90e      	add	r1, sp, #56	; 0x38
 800aff2:	dce8      	bgt.n	800afc6 <_svfiprintf_r+0x332>
 800aff4:	460c      	mov	r4, r1
 800aff6:	3301      	adds	r3, #1
 800aff8:	1952      	adds	r2, r2, r5
 800affa:	2b07      	cmp	r3, #7
 800affc:	6026      	str	r6, [r4, #0]
 800affe:	6065      	str	r5, [r4, #4]
 800b000:	922a      	str	r2, [sp, #168]	; 0xa8
 800b002:	9329      	str	r3, [sp, #164]	; 0xa4
 800b004:	f300 8219 	bgt.w	800b43a <_svfiprintf_r+0x7a6>
 800b008:	3408      	adds	r4, #8
 800b00a:	e08c      	b.n	800b126 <_svfiprintf_r+0x492>
 800b00c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800b010:	4b5e      	ldr	r3, [pc, #376]	; (800b18c <_svfiprintf_r+0x4f8>)
 800b012:	930c      	str	r3, [sp, #48]	; 0x30
 800b014:	e776      	b.n	800af04 <_svfiprintf_r+0x270>
 800b016:	f04b 0b01 	orr.w	fp, fp, #1
 800b01a:	e684      	b.n	800ad26 <_svfiprintf_r+0x92>
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	bf08      	it	eq
 800b020:	2320      	moveq	r3, #32
 800b022:	e680      	b.n	800ad26 <_svfiprintf_r+0x92>
 800b024:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800b028:	2a00      	cmp	r2, #0
 800b02a:	f000 8138 	beq.w	800b29e <_svfiprintf_r+0x60a>
 800b02e:	2301      	movs	r3, #1
 800b030:	9302      	str	r3, [sp, #8]
 800b032:	2300      	movs	r3, #0
 800b034:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800b038:	2301      	movs	r3, #1
 800b03a:	9303      	str	r3, [sp, #12]
 800b03c:	ab1e      	add	r3, sp, #120	; 0x78
 800b03e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800b042:	9309      	str	r3, [sp, #36]	; 0x24
 800b044:	e79e      	b.n	800af84 <_svfiprintf_r+0x2f0>
 800b046:	9b05      	ldr	r3, [sp, #20]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	9309      	str	r3, [sp, #36]	; 0x24
 800b04c:	9b05      	ldr	r3, [sp, #20]
 800b04e:	3304      	adds	r3, #4
 800b050:	9305      	str	r3, [sp, #20]
 800b052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b054:	2600      	movs	r6, #0
 800b056:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 8259 	beq.w	800b512 <_svfiprintf_r+0x87e>
 800b060:	2d00      	cmp	r5, #0
 800b062:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b064:	f2c0 822d 	blt.w	800b4c2 <_svfiprintf_r+0x82e>
 800b068:	4631      	mov	r1, r6
 800b06a:	462a      	mov	r2, r5
 800b06c:	f7fe ff50 	bl	8009f10 <memchr>
 800b070:	2800      	cmp	r0, #0
 800b072:	f000 8258 	beq.w	800b526 <_svfiprintf_r+0x892>
 800b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b078:	9608      	str	r6, [sp, #32]
 800b07a:	1ac0      	subs	r0, r0, r3
 800b07c:	42a8      	cmp	r0, r5
 800b07e:	9003      	str	r0, [sp, #12]
 800b080:	bfc8      	it	gt
 800b082:	9503      	strgt	r5, [sp, #12]
 800b084:	e6ea      	b.n	800ae5c <_svfiprintf_r+0x1c8>
 800b086:	f04b 0b10 	orr.w	fp, fp, #16
 800b08a:	f01b 0f10 	tst.w	fp, #16
 800b08e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800b092:	f47f af5c 	bne.w	800af4e <_svfiprintf_r+0x2ba>
 800b096:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b09a:	f000 8208 	beq.w	800b4ae <_svfiprintf_r+0x81a>
 800b09e:	9905      	ldr	r1, [sp, #20]
 800b0a0:	f9b1 3000 	ldrsh.w	r3, [r1]
 800b0a4:	3104      	adds	r1, #4
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	9105      	str	r1, [sp, #20]
 800b0aa:	f6bf af57 	bge.w	800af5c <_svfiprintf_r+0x2c8>
 800b0ae:	425b      	negs	r3, r3
 800b0b0:	222d      	movs	r2, #45	; 0x2d
 800b0b2:	1c19      	adds	r1, r3, #0
 800b0b4:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800b0b8:	bf18      	it	ne
 800b0ba:	2101      	movne	r1, #1
 800b0bc:	2201      	movs	r2, #1
 800b0be:	e6a8      	b.n	800ae12 <_svfiprintf_r+0x17e>
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800b0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0cc:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b0d0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800b0d4:	2e09      	cmp	r6, #9
 800b0d6:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 800b0da:	4607      	mov	r7, r0
 800b0dc:	d9f2      	bls.n	800b0c4 <_svfiprintf_r+0x430>
 800b0de:	9106      	str	r1, [sp, #24]
 800b0e0:	e623      	b.n	800ad2a <_svfiprintf_r+0x96>
 800b0e2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800b0e6:	e61e      	b.n	800ad26 <_svfiprintf_r+0x92>
 800b0e8:	232b      	movs	r3, #43	; 0x2b
 800b0ea:	e61c      	b.n	800ad26 <_svfiprintf_r+0x92>
 800b0ec:	f817 2b01 	ldrb.w	r2, [r7], #1
 800b0f0:	2a2a      	cmp	r2, #42	; 0x2a
 800b0f2:	f000 81ae 	beq.w	800b452 <_svfiprintf_r+0x7be>
 800b0f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b0fa:	2500      	movs	r5, #0
 800b0fc:	2909      	cmp	r1, #9
 800b0fe:	f63f ae14 	bhi.w	800ad2a <_svfiprintf_r+0x96>
 800b102:	4638      	mov	r0, r7
 800b104:	2500      	movs	r5, #0
 800b106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b10a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800b10e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 800b112:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b116:	2909      	cmp	r1, #9
 800b118:	4607      	mov	r7, r0
 800b11a:	d9f4      	bls.n	800b106 <_svfiprintf_r+0x472>
 800b11c:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 800b120:	e603      	b.n	800ad2a <_svfiprintf_r+0x96>
 800b122:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b124:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b126:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 800b12a:	b161      	cbz	r1, 800b146 <_svfiprintf_r+0x4b2>
 800b12c:	3301      	adds	r3, #1
 800b12e:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 800b132:	3201      	adds	r2, #1
 800b134:	6021      	str	r1, [r4, #0]
 800b136:	2101      	movs	r1, #1
 800b138:	2b07      	cmp	r3, #7
 800b13a:	6061      	str	r1, [r4, #4]
 800b13c:	922a      	str	r2, [sp, #168]	; 0xa8
 800b13e:	9329      	str	r3, [sp, #164]	; 0xa4
 800b140:	f300 811e 	bgt.w	800b380 <_svfiprintf_r+0x6ec>
 800b144:	3408      	adds	r4, #8
 800b146:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b148:	b159      	cbz	r1, 800b162 <_svfiprintf_r+0x4ce>
 800b14a:	3301      	adds	r3, #1
 800b14c:	a92b      	add	r1, sp, #172	; 0xac
 800b14e:	3202      	adds	r2, #2
 800b150:	6021      	str	r1, [r4, #0]
 800b152:	2102      	movs	r1, #2
 800b154:	2b07      	cmp	r3, #7
 800b156:	6061      	str	r1, [r4, #4]
 800b158:	922a      	str	r2, [sp, #168]	; 0xa8
 800b15a:	9329      	str	r3, [sp, #164]	; 0xa4
 800b15c:	f300 811b 	bgt.w	800b396 <_svfiprintf_r+0x702>
 800b160:	3408      	adds	r4, #8
 800b162:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b164:	2880      	cmp	r0, #128	; 0x80
 800b166:	f000 80ae 	beq.w	800b2c6 <_svfiprintf_r+0x632>
 800b16a:	9808      	ldr	r0, [sp, #32]
 800b16c:	9903      	ldr	r1, [sp, #12]
 800b16e:	1a45      	subs	r5, r0, r1
 800b170:	2d00      	cmp	r5, #0
 800b172:	dd33      	ble.n	800b1dc <_svfiprintf_r+0x548>
 800b174:	2d10      	cmp	r5, #16
 800b176:	4e06      	ldr	r6, [pc, #24]	; (800b190 <_svfiprintf_r+0x4fc>)
 800b178:	dd26      	ble.n	800b1c8 <_svfiprintf_r+0x534>
 800b17a:	4621      	mov	r1, r4
 800b17c:	f04f 0910 	mov.w	r9, #16
 800b180:	9c07      	ldr	r4, [sp, #28]
 800b182:	e00a      	b.n	800b19a <_svfiprintf_r+0x506>
 800b184:	0800c75c 	.word	0x0800c75c
 800b188:	0800c6c8 	.word	0x0800c6c8
 800b18c:	0800c748 	.word	0x0800c748
 800b190:	0800c6d8 	.word	0x0800c6d8
 800b194:	3d10      	subs	r5, #16
 800b196:	2d10      	cmp	r5, #16
 800b198:	dd15      	ble.n	800b1c6 <_svfiprintf_r+0x532>
 800b19a:	3301      	adds	r3, #1
 800b19c:	3210      	adds	r2, #16
 800b19e:	e881 0240 	stmia.w	r1, {r6, r9}
 800b1a2:	3108      	adds	r1, #8
 800b1a4:	2b07      	cmp	r3, #7
 800b1a6:	922a      	str	r2, [sp, #168]	; 0xa8
 800b1a8:	9329      	str	r3, [sp, #164]	; 0xa4
 800b1aa:	ddf3      	ble.n	800b194 <_svfiprintf_r+0x500>
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	4651      	mov	r1, sl
 800b1b0:	4642      	mov	r2, r8
 800b1b2:	f7ff fcef 	bl	800ab94 <__ssprint_r>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d178      	bne.n	800b2ac <_svfiprintf_r+0x618>
 800b1ba:	3d10      	subs	r5, #16
 800b1bc:	2d10      	cmp	r5, #16
 800b1be:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b1c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b1c2:	a90e      	add	r1, sp, #56	; 0x38
 800b1c4:	dce9      	bgt.n	800b19a <_svfiprintf_r+0x506>
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	1952      	adds	r2, r2, r5
 800b1cc:	2b07      	cmp	r3, #7
 800b1ce:	6026      	str	r6, [r4, #0]
 800b1d0:	6065      	str	r5, [r4, #4]
 800b1d2:	922a      	str	r2, [sp, #168]	; 0xa8
 800b1d4:	9329      	str	r3, [sp, #164]	; 0xa4
 800b1d6:	f300 80c8 	bgt.w	800b36a <_svfiprintf_r+0x6d6>
 800b1da:	3408      	adds	r4, #8
 800b1dc:	9903      	ldr	r1, [sp, #12]
 800b1de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	1852      	adds	r2, r2, r1
 800b1e4:	2b07      	cmp	r3, #7
 800b1e6:	e884 0003 	stmia.w	r4, {r0, r1}
 800b1ea:	922a      	str	r2, [sp, #168]	; 0xa8
 800b1ec:	9329      	str	r3, [sp, #164]	; 0xa4
 800b1ee:	bfd8      	it	le
 800b1f0:	f104 0108 	addle.w	r1, r4, #8
 800b1f4:	f300 809a 	bgt.w	800b32c <_svfiprintf_r+0x698>
 800b1f8:	f01b 0f04 	tst.w	fp, #4
 800b1fc:	d02e      	beq.n	800b25c <_svfiprintf_r+0x5c8>
 800b1fe:	9b06      	ldr	r3, [sp, #24]
 800b200:	9802      	ldr	r0, [sp, #8]
 800b202:	1a1d      	subs	r5, r3, r0
 800b204:	2d00      	cmp	r5, #0
 800b206:	dd29      	ble.n	800b25c <_svfiprintf_r+0x5c8>
 800b208:	2d10      	cmp	r5, #16
 800b20a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b20c:	4e97      	ldr	r6, [pc, #604]	; (800b46c <_svfiprintf_r+0x7d8>)
 800b20e:	dd1c      	ble.n	800b24a <_svfiprintf_r+0x5b6>
 800b210:	2410      	movs	r4, #16
 800b212:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800b216:	e002      	b.n	800b21e <_svfiprintf_r+0x58a>
 800b218:	3d10      	subs	r5, #16
 800b21a:	2d10      	cmp	r5, #16
 800b21c:	dd15      	ble.n	800b24a <_svfiprintf_r+0x5b6>
 800b21e:	3301      	adds	r3, #1
 800b220:	3210      	adds	r2, #16
 800b222:	600e      	str	r6, [r1, #0]
 800b224:	604c      	str	r4, [r1, #4]
 800b226:	3108      	adds	r1, #8
 800b228:	2b07      	cmp	r3, #7
 800b22a:	922a      	str	r2, [sp, #168]	; 0xa8
 800b22c:	9329      	str	r3, [sp, #164]	; 0xa4
 800b22e:	ddf3      	ble.n	800b218 <_svfiprintf_r+0x584>
 800b230:	4648      	mov	r0, r9
 800b232:	4651      	mov	r1, sl
 800b234:	4642      	mov	r2, r8
 800b236:	f7ff fcad 	bl	800ab94 <__ssprint_r>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	d136      	bne.n	800b2ac <_svfiprintf_r+0x618>
 800b23e:	3d10      	subs	r5, #16
 800b240:	2d10      	cmp	r5, #16
 800b242:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b244:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b246:	a90e      	add	r1, sp, #56	; 0x38
 800b248:	dce9      	bgt.n	800b21e <_svfiprintf_r+0x58a>
 800b24a:	3301      	adds	r3, #1
 800b24c:	18aa      	adds	r2, r5, r2
 800b24e:	2b07      	cmp	r3, #7
 800b250:	600e      	str	r6, [r1, #0]
 800b252:	604d      	str	r5, [r1, #4]
 800b254:	922a      	str	r2, [sp, #168]	; 0xa8
 800b256:	9329      	str	r3, [sp, #164]	; 0xa4
 800b258:	f300 810c 	bgt.w	800b474 <_svfiprintf_r+0x7e0>
 800b25c:	9b04      	ldr	r3, [sp, #16]
 800b25e:	9902      	ldr	r1, [sp, #8]
 800b260:	9806      	ldr	r0, [sp, #24]
 800b262:	4281      	cmp	r1, r0
 800b264:	bfac      	ite	ge
 800b266:	185b      	addge	r3, r3, r1
 800b268:	181b      	addlt	r3, r3, r0
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	2a00      	cmp	r2, #0
 800b26e:	d167      	bne.n	800b340 <_svfiprintf_r+0x6ac>
 800b270:	2300      	movs	r3, #0
 800b272:	9329      	str	r3, [sp, #164]	; 0xa4
 800b274:	ac0e      	add	r4, sp, #56	; 0x38
 800b276:	e52c      	b.n	800acd2 <_svfiprintf_r+0x3e>
 800b278:	2a00      	cmp	r2, #0
 800b27a:	d169      	bne.n	800b350 <_svfiprintf_r+0x6bc>
 800b27c:	f01b 0f01 	tst.w	fp, #1
 800b280:	bf04      	itt	eq
 800b282:	9203      	streq	r2, [sp, #12]
 800b284:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 800b288:	f43f ade7 	beq.w	800ae5a <_svfiprintf_r+0x1c6>
 800b28c:	2330      	movs	r3, #48	; 0x30
 800b28e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 800b292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b294:	9303      	str	r3, [sp, #12]
 800b296:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 800b29a:	9309      	str	r3, [sp, #36]	; 0x24
 800b29c:	e5dd      	b.n	800ae5a <_svfiprintf_r+0x1c6>
 800b29e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b2a0:	b123      	cbz	r3, 800b2ac <_svfiprintf_r+0x618>
 800b2a2:	9807      	ldr	r0, [sp, #28]
 800b2a4:	4651      	mov	r1, sl
 800b2a6:	aa28      	add	r2, sp, #160	; 0xa0
 800b2a8:	f7ff fc74 	bl	800ab94 <__ssprint_r>
 800b2ac:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800b2b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b2b4:	9b04      	ldr	r3, [sp, #16]
 800b2b6:	bf18      	it	ne
 800b2b8:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800b2bc:	9304      	str	r3, [sp, #16]
 800b2be:	9804      	ldr	r0, [sp, #16]
 800b2c0:	b02d      	add	sp, #180	; 0xb4
 800b2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c6:	9906      	ldr	r1, [sp, #24]
 800b2c8:	9802      	ldr	r0, [sp, #8]
 800b2ca:	1a0d      	subs	r5, r1, r0
 800b2cc:	2d00      	cmp	r5, #0
 800b2ce:	f77f af4c 	ble.w	800b16a <_svfiprintf_r+0x4d6>
 800b2d2:	2d10      	cmp	r5, #16
 800b2d4:	4e66      	ldr	r6, [pc, #408]	; (800b470 <_svfiprintf_r+0x7dc>)
 800b2d6:	dd1e      	ble.n	800b316 <_svfiprintf_r+0x682>
 800b2d8:	4621      	mov	r1, r4
 800b2da:	f04f 0910 	mov.w	r9, #16
 800b2de:	9c07      	ldr	r4, [sp, #28]
 800b2e0:	e002      	b.n	800b2e8 <_svfiprintf_r+0x654>
 800b2e2:	3d10      	subs	r5, #16
 800b2e4:	2d10      	cmp	r5, #16
 800b2e6:	dd15      	ble.n	800b314 <_svfiprintf_r+0x680>
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	3210      	adds	r2, #16
 800b2ec:	e881 0240 	stmia.w	r1, {r6, r9}
 800b2f0:	3108      	adds	r1, #8
 800b2f2:	2b07      	cmp	r3, #7
 800b2f4:	922a      	str	r2, [sp, #168]	; 0xa8
 800b2f6:	9329      	str	r3, [sp, #164]	; 0xa4
 800b2f8:	ddf3      	ble.n	800b2e2 <_svfiprintf_r+0x64e>
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	4651      	mov	r1, sl
 800b2fe:	4642      	mov	r2, r8
 800b300:	f7ff fc48 	bl	800ab94 <__ssprint_r>
 800b304:	2800      	cmp	r0, #0
 800b306:	d1d1      	bne.n	800b2ac <_svfiprintf_r+0x618>
 800b308:	3d10      	subs	r5, #16
 800b30a:	2d10      	cmp	r5, #16
 800b30c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b30e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b310:	a90e      	add	r1, sp, #56	; 0x38
 800b312:	dce9      	bgt.n	800b2e8 <_svfiprintf_r+0x654>
 800b314:	460c      	mov	r4, r1
 800b316:	3301      	adds	r3, #1
 800b318:	1952      	adds	r2, r2, r5
 800b31a:	2b07      	cmp	r3, #7
 800b31c:	6026      	str	r6, [r4, #0]
 800b31e:	6065      	str	r5, [r4, #4]
 800b320:	922a      	str	r2, [sp, #168]	; 0xa8
 800b322:	9329      	str	r3, [sp, #164]	; 0xa4
 800b324:	f300 80d2 	bgt.w	800b4cc <_svfiprintf_r+0x838>
 800b328:	3408      	adds	r4, #8
 800b32a:	e71e      	b.n	800b16a <_svfiprintf_r+0x4d6>
 800b32c:	9807      	ldr	r0, [sp, #28]
 800b32e:	4651      	mov	r1, sl
 800b330:	4642      	mov	r2, r8
 800b332:	f7ff fc2f 	bl	800ab94 <__ssprint_r>
 800b336:	2800      	cmp	r0, #0
 800b338:	d1b8      	bne.n	800b2ac <_svfiprintf_r+0x618>
 800b33a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b33c:	a90e      	add	r1, sp, #56	; 0x38
 800b33e:	e75b      	b.n	800b1f8 <_svfiprintf_r+0x564>
 800b340:	9807      	ldr	r0, [sp, #28]
 800b342:	4651      	mov	r1, sl
 800b344:	4642      	mov	r2, r8
 800b346:	f7ff fc25 	bl	800ab94 <__ssprint_r>
 800b34a:	2800      	cmp	r0, #0
 800b34c:	d090      	beq.n	800b270 <_svfiprintf_r+0x5dc>
 800b34e:	e7ad      	b.n	800b2ac <_svfiprintf_r+0x618>
 800b350:	9103      	str	r1, [sp, #12]
 800b352:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800b356:	e580      	b.n	800ae5a <_svfiprintf_r+0x1c6>
 800b358:	9807      	ldr	r0, [sp, #28]
 800b35a:	4651      	mov	r1, sl
 800b35c:	4642      	mov	r2, r8
 800b35e:	f7ff fc19 	bl	800ab94 <__ssprint_r>
 800b362:	2800      	cmp	r0, #0
 800b364:	d1a2      	bne.n	800b2ac <_svfiprintf_r+0x618>
 800b366:	ac0e      	add	r4, sp, #56	; 0x38
 800b368:	e4cd      	b.n	800ad06 <_svfiprintf_r+0x72>
 800b36a:	9807      	ldr	r0, [sp, #28]
 800b36c:	4651      	mov	r1, sl
 800b36e:	4642      	mov	r2, r8
 800b370:	f7ff fc10 	bl	800ab94 <__ssprint_r>
 800b374:	2800      	cmp	r0, #0
 800b376:	d199      	bne.n	800b2ac <_svfiprintf_r+0x618>
 800b378:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b37a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b37c:	ac0e      	add	r4, sp, #56	; 0x38
 800b37e:	e72d      	b.n	800b1dc <_svfiprintf_r+0x548>
 800b380:	9807      	ldr	r0, [sp, #28]
 800b382:	4651      	mov	r1, sl
 800b384:	4642      	mov	r2, r8
 800b386:	f7ff fc05 	bl	800ab94 <__ssprint_r>
 800b38a:	2800      	cmp	r0, #0
 800b38c:	d18e      	bne.n	800b2ac <_svfiprintf_r+0x618>
 800b38e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b390:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b392:	ac0e      	add	r4, sp, #56	; 0x38
 800b394:	e6d7      	b.n	800b146 <_svfiprintf_r+0x4b2>
 800b396:	9807      	ldr	r0, [sp, #28]
 800b398:	4651      	mov	r1, sl
 800b39a:	4642      	mov	r2, r8
 800b39c:	f7ff fbfa 	bl	800ab94 <__ssprint_r>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d183      	bne.n	800b2ac <_svfiprintf_r+0x618>
 800b3a4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b3a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b3a8:	ac0e      	add	r4, sp, #56	; 0x38
 800b3aa:	e6da      	b.n	800b162 <_svfiprintf_r+0x4ce>
 800b3ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b3ae:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 800b3b2:	f003 000f 	and.w	r0, r3, #15
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	5c30      	ldrb	r0, [r6, r0]
 800b3ba:	3a01      	subs	r2, #1
 800b3bc:	091b      	lsrs	r3, r3, #4
 800b3be:	7008      	strb	r0, [r1, #0]
 800b3c0:	d1f7      	bne.n	800b3b2 <_svfiprintf_r+0x71e>
 800b3c2:	ebc1 0308 	rsb	r3, r1, r8
 800b3c6:	9109      	str	r1, [sp, #36]	; 0x24
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	e546      	b.n	800ae5a <_svfiprintf_r+0x1c6>
 800b3cc:	2b09      	cmp	r3, #9
 800b3ce:	bf82      	ittt	hi
 800b3d0:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 800b3d4:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 800b3d8:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 800b3dc:	d801      	bhi.n	800b3e2 <_svfiprintf_r+0x74e>
 800b3de:	3330      	adds	r3, #48	; 0x30
 800b3e0:	e755      	b.n	800b28e <_svfiprintf_r+0x5fa>
 800b3e2:	fba6 0203 	umull	r0, r2, r6, r3
 800b3e6:	08d2      	lsrs	r2, r2, #3
 800b3e8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 800b3ec:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 800b3f0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800b3f4:	4608      	mov	r0, r1
 800b3f6:	f881 c000 	strb.w	ip, [r1]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	3901      	subs	r1, #1
 800b3fe:	2a00      	cmp	r2, #0
 800b400:	d1ef      	bne.n	800b3e2 <_svfiprintf_r+0x74e>
 800b402:	9009      	str	r0, [sp, #36]	; 0x24
 800b404:	e526      	b.n	800ae54 <_svfiprintf_r+0x1c0>
 800b406:	9905      	ldr	r1, [sp, #20]
 800b408:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b40c:	bf14      	ite	ne
 800b40e:	880b      	ldrhne	r3, [r1, #0]
 800b410:	680b      	ldreq	r3, [r1, #0]
 800b412:	2201      	movs	r2, #1
 800b414:	9805      	ldr	r0, [sp, #20]
 800b416:	1c19      	adds	r1, r3, #0
 800b418:	bf18      	it	ne
 800b41a:	2101      	movne	r1, #1
 800b41c:	3004      	adds	r0, #4
 800b41e:	9005      	str	r0, [sp, #20]
 800b420:	e4f4      	b.n	800ae0c <_svfiprintf_r+0x178>
 800b422:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800b426:	bf0b      	itete	eq
 800b428:	9a05      	ldreq	r2, [sp, #20]
 800b42a:	9905      	ldrne	r1, [sp, #20]
 800b42c:	6813      	ldreq	r3, [r2, #0]
 800b42e:	880b      	ldrhne	r3, [r1, #0]
 800b430:	bf08      	it	eq
 800b432:	460a      	moveq	r2, r1
 800b434:	e7ee      	b.n	800b414 <_svfiprintf_r+0x780>
 800b436:	2202      	movs	r2, #2
 800b438:	e4e8      	b.n	800ae0c <_svfiprintf_r+0x178>
 800b43a:	9807      	ldr	r0, [sp, #28]
 800b43c:	4651      	mov	r1, sl
 800b43e:	4642      	mov	r2, r8
 800b440:	f7ff fba8 	bl	800ab94 <__ssprint_r>
 800b444:	2800      	cmp	r0, #0
 800b446:	f47f af31 	bne.w	800b2ac <_svfiprintf_r+0x618>
 800b44a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b44c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b44e:	ac0e      	add	r4, sp, #56	; 0x38
 800b450:	e669      	b.n	800b126 <_svfiprintf_r+0x492>
 800b452:	9a05      	ldr	r2, [sp, #20]
 800b454:	6815      	ldr	r5, [r2, #0]
 800b456:	3204      	adds	r2, #4
 800b458:	2d00      	cmp	r5, #0
 800b45a:	bfbc      	itt	lt
 800b45c:	9205      	strlt	r2, [sp, #20]
 800b45e:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800b462:	f6ff ac60 	blt.w	800ad26 <_svfiprintf_r+0x92>
 800b466:	9205      	str	r2, [sp, #20]
 800b468:	e45d      	b.n	800ad26 <_svfiprintf_r+0x92>
 800b46a:	bf00      	nop
 800b46c:	0800c6c8 	.word	0x0800c6c8
 800b470:	0800c6d8 	.word	0x0800c6d8
 800b474:	9807      	ldr	r0, [sp, #28]
 800b476:	4651      	mov	r1, sl
 800b478:	4642      	mov	r2, r8
 800b47a:	f7ff fb8b 	bl	800ab94 <__ssprint_r>
 800b47e:	2800      	cmp	r0, #0
 800b480:	f47f af14 	bne.w	800b2ac <_svfiprintf_r+0x618>
 800b484:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b486:	e6e9      	b.n	800b25c <_svfiprintf_r+0x5c8>
 800b488:	2930      	cmp	r1, #48	; 0x30
 800b48a:	d004      	beq.n	800b496 <_svfiprintf_r+0x802>
 800b48c:	1e93      	subs	r3, r2, #2
 800b48e:	9309      	str	r3, [sp, #36]	; 0x24
 800b490:	2330      	movs	r3, #48	; 0x30
 800b492:	f802 3c02 	strb.w	r3, [r2, #-2]
 800b496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b498:	ebc3 0308 	rsb	r3, r3, r8
 800b49c:	9303      	str	r3, [sp, #12]
 800b49e:	e4dc      	b.n	800ae5a <_svfiprintf_r+0x1c6>
 800b4a0:	9805      	ldr	r0, [sp, #20]
 800b4a2:	9904      	ldr	r1, [sp, #16]
 800b4a4:	6803      	ldr	r3, [r0, #0]
 800b4a6:	3004      	adds	r0, #4
 800b4a8:	9005      	str	r0, [sp, #20]
 800b4aa:	6019      	str	r1, [r3, #0]
 800b4ac:	e411      	b.n	800acd2 <_svfiprintf_r+0x3e>
 800b4ae:	9a05      	ldr	r2, [sp, #20]
 800b4b0:	6813      	ldr	r3, [r2, #0]
 800b4b2:	3204      	adds	r2, #4
 800b4b4:	9205      	str	r2, [sp, #20]
 800b4b6:	e54e      	b.n	800af56 <_svfiprintf_r+0x2c2>
 800b4b8:	9905      	ldr	r1, [sp, #20]
 800b4ba:	880b      	ldrh	r3, [r1, #0]
 800b4bc:	3104      	adds	r1, #4
 800b4be:	9105      	str	r1, [sp, #20]
 800b4c0:	e52b      	b.n	800af1a <_svfiprintf_r+0x286>
 800b4c2:	f7ff fb37 	bl	800ab34 <strlen>
 800b4c6:	9608      	str	r6, [sp, #32]
 800b4c8:	9003      	str	r0, [sp, #12]
 800b4ca:	e4c7      	b.n	800ae5c <_svfiprintf_r+0x1c8>
 800b4cc:	9807      	ldr	r0, [sp, #28]
 800b4ce:	4651      	mov	r1, sl
 800b4d0:	4642      	mov	r2, r8
 800b4d2:	f7ff fb5f 	bl	800ab94 <__ssprint_r>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	f47f aee8 	bne.w	800b2ac <_svfiprintf_r+0x618>
 800b4dc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b4de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800b4e0:	ac0e      	add	r4, sp, #56	; 0x38
 800b4e2:	e642      	b.n	800b16a <_svfiprintf_r+0x4d6>
 800b4e4:	9905      	ldr	r1, [sp, #20]
 800b4e6:	9a04      	ldr	r2, [sp, #16]
 800b4e8:	680b      	ldr	r3, [r1, #0]
 800b4ea:	3104      	adds	r1, #4
 800b4ec:	9105      	str	r1, [sp, #20]
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	f7ff bbef 	b.w	800acd2 <_svfiprintf_r+0x3e>
 800b4f4:	2140      	movs	r1, #64	; 0x40
 800b4f6:	9200      	str	r2, [sp, #0]
 800b4f8:	f7fe fa56 	bl	80099a8 <_malloc_r>
 800b4fc:	9a00      	ldr	r2, [sp, #0]
 800b4fe:	f8ca 0000 	str.w	r0, [sl]
 800b502:	f8ca 0010 	str.w	r0, [sl, #16]
 800b506:	b188      	cbz	r0, 800b52c <_svfiprintf_r+0x898>
 800b508:	2340      	movs	r3, #64	; 0x40
 800b50a:	f8ca 3014 	str.w	r3, [sl, #20]
 800b50e:	f7ff bbcf 	b.w	800acb0 <_svfiprintf_r+0x1c>
 800b512:	2d06      	cmp	r5, #6
 800b514:	bf28      	it	cs
 800b516:	2506      	movcs	r5, #6
 800b518:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 800b51c:	9302      	str	r3, [sp, #8]
 800b51e:	4b07      	ldr	r3, [pc, #28]	; (800b53c <_svfiprintf_r+0x8a8>)
 800b520:	9503      	str	r5, [sp, #12]
 800b522:	9309      	str	r3, [sp, #36]	; 0x24
 800b524:	e52e      	b.n	800af84 <_svfiprintf_r+0x2f0>
 800b526:	9503      	str	r5, [sp, #12]
 800b528:	9008      	str	r0, [sp, #32]
 800b52a:	e497      	b.n	800ae5c <_svfiprintf_r+0x1c8>
 800b52c:	9807      	ldr	r0, [sp, #28]
 800b52e:	230c      	movs	r3, #12
 800b530:	6003      	str	r3, [r0, #0]
 800b532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b536:	9304      	str	r3, [sp, #16]
 800b538:	e6c1      	b.n	800b2be <_svfiprintf_r+0x62a>
 800b53a:	bf00      	nop
 800b53c:	0800c770 	.word	0x0800c770

0800b540 <_calloc_r>:
 800b540:	b510      	push	{r4, lr}
 800b542:	fb01 f102 	mul.w	r1, r1, r2
 800b546:	f7fe fa2f 	bl	80099a8 <_malloc_r>
 800b54a:	4604      	mov	r4, r0
 800b54c:	b300      	cbz	r0, 800b590 <_calloc_r+0x50>
 800b54e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b552:	f022 0203 	bic.w	r2, r2, #3
 800b556:	3a04      	subs	r2, #4
 800b558:	2a24      	cmp	r2, #36	; 0x24
 800b55a:	d81b      	bhi.n	800b594 <_calloc_r+0x54>
 800b55c:	2a13      	cmp	r2, #19
 800b55e:	bf98      	it	ls
 800b560:	4602      	movls	r2, r0
 800b562:	d911      	bls.n	800b588 <_calloc_r+0x48>
 800b564:	2300      	movs	r3, #0
 800b566:	2a1b      	cmp	r2, #27
 800b568:	6003      	str	r3, [r0, #0]
 800b56a:	6043      	str	r3, [r0, #4]
 800b56c:	bf98      	it	ls
 800b56e:	f100 0208 	addls.w	r2, r0, #8
 800b572:	d909      	bls.n	800b588 <_calloc_r+0x48>
 800b574:	2a24      	cmp	r2, #36	; 0x24
 800b576:	6083      	str	r3, [r0, #8]
 800b578:	60c3      	str	r3, [r0, #12]
 800b57a:	bf11      	iteee	ne
 800b57c:	f100 0210 	addne.w	r2, r0, #16
 800b580:	6103      	streq	r3, [r0, #16]
 800b582:	6143      	streq	r3, [r0, #20]
 800b584:	f100 0218 	addeq.w	r2, r0, #24
 800b588:	2300      	movs	r3, #0
 800b58a:	6013      	str	r3, [r2, #0]
 800b58c:	6053      	str	r3, [r2, #4]
 800b58e:	6093      	str	r3, [r2, #8]
 800b590:	4620      	mov	r0, r4
 800b592:	bd10      	pop	{r4, pc}
 800b594:	2100      	movs	r1, #0
 800b596:	f000 f85b 	bl	800b650 <memset>
 800b59a:	4620      	mov	r0, r4
 800b59c:	bd10      	pop	{r4, pc}
 800b59e:	bf00      	nop

0800b5a0 <memmove>:
 800b5a0:	4288      	cmp	r0, r1
 800b5a2:	b4f0      	push	{r4, r5, r6, r7}
 800b5a4:	d912      	bls.n	800b5cc <memmove+0x2c>
 800b5a6:	188d      	adds	r5, r1, r2
 800b5a8:	42a8      	cmp	r0, r5
 800b5aa:	d20f      	bcs.n	800b5cc <memmove+0x2c>
 800b5ac:	b162      	cbz	r2, 800b5c8 <memmove+0x28>
 800b5ae:	4251      	negs	r1, r2
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	1882      	adds	r2, r0, r2
 800b5b4:	186d      	adds	r5, r5, r1
 800b5b6:	1852      	adds	r2, r2, r1
 800b5b8:	18ec      	adds	r4, r5, r3
 800b5ba:	18d1      	adds	r1, r2, r3
 800b5bc:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	f801 4c01 	strb.w	r4, [r1, #-1]
 800b5c6:	d1f7      	bne.n	800b5b8 <memmove+0x18>
 800b5c8:	bcf0      	pop	{r4, r5, r6, r7}
 800b5ca:	4770      	bx	lr
 800b5cc:	2a0f      	cmp	r2, #15
 800b5ce:	bf98      	it	ls
 800b5d0:	4603      	movls	r3, r0
 800b5d2:	d931      	bls.n	800b638 <memmove+0x98>
 800b5d4:	ea41 0300 	orr.w	r3, r1, r0
 800b5d8:	079b      	lsls	r3, r3, #30
 800b5da:	d137      	bne.n	800b64c <memmove+0xac>
 800b5dc:	460c      	mov	r4, r1
 800b5de:	4603      	mov	r3, r0
 800b5e0:	4615      	mov	r5, r2
 800b5e2:	6826      	ldr	r6, [r4, #0]
 800b5e4:	601e      	str	r6, [r3, #0]
 800b5e6:	6866      	ldr	r6, [r4, #4]
 800b5e8:	605e      	str	r6, [r3, #4]
 800b5ea:	68a6      	ldr	r6, [r4, #8]
 800b5ec:	609e      	str	r6, [r3, #8]
 800b5ee:	68e6      	ldr	r6, [r4, #12]
 800b5f0:	3d10      	subs	r5, #16
 800b5f2:	60de      	str	r6, [r3, #12]
 800b5f4:	3410      	adds	r4, #16
 800b5f6:	3310      	adds	r3, #16
 800b5f8:	2d0f      	cmp	r5, #15
 800b5fa:	d8f2      	bhi.n	800b5e2 <memmove+0x42>
 800b5fc:	f1a2 0410 	sub.w	r4, r2, #16
 800b600:	f024 040f 	bic.w	r4, r4, #15
 800b604:	f002 020f 	and.w	r2, r2, #15
 800b608:	3410      	adds	r4, #16
 800b60a:	2a03      	cmp	r2, #3
 800b60c:	eb00 0304 	add.w	r3, r0, r4
 800b610:	4421      	add	r1, r4
 800b612:	d911      	bls.n	800b638 <memmove+0x98>
 800b614:	1f0e      	subs	r6, r1, #4
 800b616:	461d      	mov	r5, r3
 800b618:	4614      	mov	r4, r2
 800b61a:	f856 7f04 	ldr.w	r7, [r6, #4]!
 800b61e:	3c04      	subs	r4, #4
 800b620:	2c03      	cmp	r4, #3
 800b622:	f845 7b04 	str.w	r7, [r5], #4
 800b626:	d8f8      	bhi.n	800b61a <memmove+0x7a>
 800b628:	1f14      	subs	r4, r2, #4
 800b62a:	f024 0403 	bic.w	r4, r4, #3
 800b62e:	3404      	adds	r4, #4
 800b630:	f002 0203 	and.w	r2, r2, #3
 800b634:	1909      	adds	r1, r1, r4
 800b636:	191b      	adds	r3, r3, r4
 800b638:	2a00      	cmp	r2, #0
 800b63a:	d0c5      	beq.n	800b5c8 <memmove+0x28>
 800b63c:	3901      	subs	r1, #1
 800b63e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b642:	3a01      	subs	r2, #1
 800b644:	f803 4b01 	strb.w	r4, [r3], #1
 800b648:	d1f9      	bne.n	800b63e <memmove+0x9e>
 800b64a:	e7bd      	b.n	800b5c8 <memmove+0x28>
 800b64c:	4603      	mov	r3, r0
 800b64e:	e7f5      	b.n	800b63c <memmove+0x9c>

0800b650 <memset>:
 800b650:	f010 0f03 	tst.w	r0, #3
 800b654:	b470      	push	{r4, r5, r6}
 800b656:	4603      	mov	r3, r0
 800b658:	d042      	beq.n	800b6e0 <memset+0x90>
 800b65a:	2a00      	cmp	r2, #0
 800b65c:	d03e      	beq.n	800b6dc <memset+0x8c>
 800b65e:	3a01      	subs	r2, #1
 800b660:	b2cd      	uxtb	r5, r1
 800b662:	e003      	b.n	800b66c <memset+0x1c>
 800b664:	1e54      	subs	r4, r2, #1
 800b666:	2a00      	cmp	r2, #0
 800b668:	d038      	beq.n	800b6dc <memset+0x8c>
 800b66a:	4622      	mov	r2, r4
 800b66c:	f803 5b01 	strb.w	r5, [r3], #1
 800b670:	f013 0f03 	tst.w	r3, #3
 800b674:	461c      	mov	r4, r3
 800b676:	d1f5      	bne.n	800b664 <memset+0x14>
 800b678:	2a03      	cmp	r2, #3
 800b67a:	d929      	bls.n	800b6d0 <memset+0x80>
 800b67c:	b2cd      	uxtb	r5, r1
 800b67e:	2a0f      	cmp	r2, #15
 800b680:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800b684:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800b688:	bf84      	itt	hi
 800b68a:	4623      	movhi	r3, r4
 800b68c:	4616      	movhi	r6, r2
 800b68e:	d911      	bls.n	800b6b4 <memset+0x64>
 800b690:	3e10      	subs	r6, #16
 800b692:	601d      	str	r5, [r3, #0]
 800b694:	605d      	str	r5, [r3, #4]
 800b696:	609d      	str	r5, [r3, #8]
 800b698:	60dd      	str	r5, [r3, #12]
 800b69a:	3310      	adds	r3, #16
 800b69c:	2e0f      	cmp	r6, #15
 800b69e:	d8f7      	bhi.n	800b690 <memset+0x40>
 800b6a0:	f1a2 0310 	sub.w	r3, r2, #16
 800b6a4:	f023 030f 	bic.w	r3, r3, #15
 800b6a8:	f002 020f 	and.w	r2, r2, #15
 800b6ac:	3310      	adds	r3, #16
 800b6ae:	2a03      	cmp	r2, #3
 800b6b0:	441c      	add	r4, r3
 800b6b2:	d90d      	bls.n	800b6d0 <memset+0x80>
 800b6b4:	4626      	mov	r6, r4
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	3b04      	subs	r3, #4
 800b6ba:	2b03      	cmp	r3, #3
 800b6bc:	f846 5b04 	str.w	r5, [r6], #4
 800b6c0:	d8fa      	bhi.n	800b6b8 <memset+0x68>
 800b6c2:	1f13      	subs	r3, r2, #4
 800b6c4:	f023 0303 	bic.w	r3, r3, #3
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	f002 0203 	and.w	r2, r2, #3
 800b6ce:	18e4      	adds	r4, r4, r3
 800b6d0:	b2c9      	uxtb	r1, r1
 800b6d2:	b11a      	cbz	r2, 800b6dc <memset+0x8c>
 800b6d4:	3a01      	subs	r2, #1
 800b6d6:	f804 1b01 	strb.w	r1, [r4], #1
 800b6da:	d1fb      	bne.n	800b6d4 <memset+0x84>
 800b6dc:	bc70      	pop	{r4, r5, r6}
 800b6de:	4770      	bx	lr
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	e7c9      	b.n	800b678 <memset+0x28>

0800b6e4 <_realloc_r>:
 800b6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e8:	460c      	mov	r4, r1
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	4607      	mov	r7, r0
 800b6ee:	4690      	mov	r8, r2
 800b6f0:	2900      	cmp	r1, #0
 800b6f2:	f000 80fe 	beq.w	800b8f2 <_realloc_r+0x20e>
 800b6f6:	f108 050b 	add.w	r5, r8, #11
 800b6fa:	f7fe fc8b 	bl	800a014 <__malloc_lock>
 800b6fe:	2d16      	cmp	r5, #22
 800b700:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800b704:	d87d      	bhi.n	800b802 <_realloc_r+0x11e>
 800b706:	2210      	movs	r2, #16
 800b708:	2600      	movs	r6, #0
 800b70a:	4615      	mov	r5, r2
 800b70c:	4545      	cmp	r5, r8
 800b70e:	bf38      	it	cc
 800b710:	f046 0601 	orrcc.w	r6, r6, #1
 800b714:	2e00      	cmp	r6, #0
 800b716:	f040 80f2 	bne.w	800b8fe <_realloc_r+0x21a>
 800b71a:	f021 0a03 	bic.w	sl, r1, #3
 800b71e:	4592      	cmp	sl, r2
 800b720:	f1a4 0b08 	sub.w	fp, r4, #8
 800b724:	bfa8      	it	ge
 800b726:	4656      	movge	r6, sl
 800b728:	da55      	bge.n	800b7d6 <_realloc_r+0xf2>
 800b72a:	4ba0      	ldr	r3, [pc, #640]	; (800b9ac <_realloc_r+0x2c8>)
 800b72c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800b730:	eb0b 000a 	add.w	r0, fp, sl
 800b734:	4584      	cmp	ip, r0
 800b736:	f000 80e7 	beq.w	800b908 <_realloc_r+0x224>
 800b73a:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800b73e:	f02e 0901 	bic.w	r9, lr, #1
 800b742:	4481      	add	r9, r0
 800b744:	f8d9 9004 	ldr.w	r9, [r9, #4]
 800b748:	f019 0f01 	tst.w	r9, #1
 800b74c:	bf1c      	itt	ne
 800b74e:	46b6      	movne	lr, r6
 800b750:	4670      	movne	r0, lr
 800b752:	d05b      	beq.n	800b80c <_realloc_r+0x128>
 800b754:	07c9      	lsls	r1, r1, #31
 800b756:	d479      	bmi.n	800b84c <_realloc_r+0x168>
 800b758:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800b75c:	ebc1 090b 	rsb	r9, r1, fp
 800b760:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b764:	f021 0103 	bic.w	r1, r1, #3
 800b768:	2800      	cmp	r0, #0
 800b76a:	f000 8097 	beq.w	800b89c <_realloc_r+0x1b8>
 800b76e:	4560      	cmp	r0, ip
 800b770:	eb01 0c0a 	add.w	ip, r1, sl
 800b774:	eb0e 060c 	add.w	r6, lr, ip
 800b778:	f000 811a 	beq.w	800b9b0 <_realloc_r+0x2cc>
 800b77c:	42b2      	cmp	r2, r6
 800b77e:	f300 808f 	bgt.w	800b8a0 <_realloc_r+0x1bc>
 800b782:	68c3      	ldr	r3, [r0, #12]
 800b784:	6882      	ldr	r2, [r0, #8]
 800b786:	46c8      	mov	r8, r9
 800b788:	609a      	str	r2, [r3, #8]
 800b78a:	60d3      	str	r3, [r2, #12]
 800b78c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b790:	f858 1f08 	ldr.w	r1, [r8, #8]!
 800b794:	f1aa 0204 	sub.w	r2, sl, #4
 800b798:	2a24      	cmp	r2, #36	; 0x24
 800b79a:	60cb      	str	r3, [r1, #12]
 800b79c:	6099      	str	r1, [r3, #8]
 800b79e:	f200 8144 	bhi.w	800ba2a <_realloc_r+0x346>
 800b7a2:	2a13      	cmp	r2, #19
 800b7a4:	bf98      	it	ls
 800b7a6:	4643      	movls	r3, r8
 800b7a8:	d90b      	bls.n	800b7c2 <_realloc_r+0xde>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	f8c9 3008 	str.w	r3, [r9, #8]
 800b7b0:	6863      	ldr	r3, [r4, #4]
 800b7b2:	2a1b      	cmp	r2, #27
 800b7b4:	f8c9 300c 	str.w	r3, [r9, #12]
 800b7b8:	f200 8140 	bhi.w	800ba3c <_realloc_r+0x358>
 800b7bc:	f109 0310 	add.w	r3, r9, #16
 800b7c0:	3408      	adds	r4, #8
 800b7c2:	6822      	ldr	r2, [r4, #0]
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	6862      	ldr	r2, [r4, #4]
 800b7c8:	605a      	str	r2, [r3, #4]
 800b7ca:	68a2      	ldr	r2, [r4, #8]
 800b7cc:	609a      	str	r2, [r3, #8]
 800b7ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b7d2:	4644      	mov	r4, r8
 800b7d4:	46cb      	mov	fp, r9
 800b7d6:	1b72      	subs	r2, r6, r5
 800b7d8:	2a0f      	cmp	r2, #15
 800b7da:	d822      	bhi.n	800b822 <_realloc_r+0x13e>
 800b7dc:	f001 0101 	and.w	r1, r1, #1
 800b7e0:	eb0b 0306 	add.w	r3, fp, r6
 800b7e4:	430e      	orrs	r6, r1
 800b7e6:	f8cb 6004 	str.w	r6, [fp, #4]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	f042 0201 	orr.w	r2, r2, #1
 800b7f0:	605a      	str	r2, [r3, #4]
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	f7fe fc10 	bl	800a018 <__malloc_unlock>
 800b7f8:	46a0      	mov	r8, r4
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	b003      	add	sp, #12
 800b7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b802:	f025 0507 	bic.w	r5, r5, #7
 800b806:	462a      	mov	r2, r5
 800b808:	0fee      	lsrs	r6, r5, #31
 800b80a:	e77f      	b.n	800b70c <_realloc_r+0x28>
 800b80c:	f02e 0e03 	bic.w	lr, lr, #3
 800b810:	eb0e 060a 	add.w	r6, lr, sl
 800b814:	42b2      	cmp	r2, r6
 800b816:	dc9d      	bgt.n	800b754 <_realloc_r+0x70>
 800b818:	68c3      	ldr	r3, [r0, #12]
 800b81a:	6882      	ldr	r2, [r0, #8]
 800b81c:	60d3      	str	r3, [r2, #12]
 800b81e:	609a      	str	r2, [r3, #8]
 800b820:	e7d9      	b.n	800b7d6 <_realloc_r+0xf2>
 800b822:	eb0b 0305 	add.w	r3, fp, r5
 800b826:	f001 0101 	and.w	r1, r1, #1
 800b82a:	1898      	adds	r0, r3, r2
 800b82c:	430d      	orrs	r5, r1
 800b82e:	f042 0201 	orr.w	r2, r2, #1
 800b832:	f8cb 5004 	str.w	r5, [fp, #4]
 800b836:	605a      	str	r2, [r3, #4]
 800b838:	6842      	ldr	r2, [r0, #4]
 800b83a:	f042 0201 	orr.w	r2, r2, #1
 800b83e:	6042      	str	r2, [r0, #4]
 800b840:	f103 0108 	add.w	r1, r3, #8
 800b844:	4638      	mov	r0, r7
 800b846:	f7fd ffa3 	bl	8009790 <_free_r>
 800b84a:	e7d2      	b.n	800b7f2 <_realloc_r+0x10e>
 800b84c:	4641      	mov	r1, r8
 800b84e:	4638      	mov	r0, r7
 800b850:	f7fe f8aa 	bl	80099a8 <_malloc_r>
 800b854:	4680      	mov	r8, r0
 800b856:	b1e8      	cbz	r0, 800b894 <_realloc_r+0x1b0>
 800b858:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800b85c:	f021 0301 	bic.w	r3, r1, #1
 800b860:	f1a0 0208 	sub.w	r2, r0, #8
 800b864:	445b      	add	r3, fp
 800b866:	429a      	cmp	r2, r3
 800b868:	f000 80d9 	beq.w	800ba1e <_realloc_r+0x33a>
 800b86c:	f1aa 0204 	sub.w	r2, sl, #4
 800b870:	2a24      	cmp	r2, #36	; 0x24
 800b872:	f200 8096 	bhi.w	800b9a2 <_realloc_r+0x2be>
 800b876:	2a13      	cmp	r2, #19
 800b878:	bf9c      	itt	ls
 800b87a:	4603      	movls	r3, r0
 800b87c:	4622      	movls	r2, r4
 800b87e:	d863      	bhi.n	800b948 <_realloc_r+0x264>
 800b880:	6811      	ldr	r1, [r2, #0]
 800b882:	6019      	str	r1, [r3, #0]
 800b884:	6851      	ldr	r1, [r2, #4]
 800b886:	6059      	str	r1, [r3, #4]
 800b888:	6892      	ldr	r2, [r2, #8]
 800b88a:	609a      	str	r2, [r3, #8]
 800b88c:	4638      	mov	r0, r7
 800b88e:	4621      	mov	r1, r4
 800b890:	f7fd ff7e 	bl	8009790 <_free_r>
 800b894:	4638      	mov	r0, r7
 800b896:	f7fe fbbf 	bl	800a018 <__malloc_unlock>
 800b89a:	e7ae      	b.n	800b7fa <_realloc_r+0x116>
 800b89c:	eb01 0c0a 	add.w	ip, r1, sl
 800b8a0:	4562      	cmp	r2, ip
 800b8a2:	dcd3      	bgt.n	800b84c <_realloc_r+0x168>
 800b8a4:	464e      	mov	r6, r9
 800b8a6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800b8aa:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800b8ae:	f1aa 0204 	sub.w	r2, sl, #4
 800b8b2:	2a24      	cmp	r2, #36	; 0x24
 800b8b4:	60cb      	str	r3, [r1, #12]
 800b8b6:	6099      	str	r1, [r3, #8]
 800b8b8:	d865      	bhi.n	800b986 <_realloc_r+0x2a2>
 800b8ba:	2a13      	cmp	r2, #19
 800b8bc:	bf98      	it	ls
 800b8be:	4633      	movls	r3, r6
 800b8c0:	d90b      	bls.n	800b8da <_realloc_r+0x1f6>
 800b8c2:	6823      	ldr	r3, [r4, #0]
 800b8c4:	f8c9 3008 	str.w	r3, [r9, #8]
 800b8c8:	6863      	ldr	r3, [r4, #4]
 800b8ca:	2a1b      	cmp	r2, #27
 800b8cc:	f8c9 300c 	str.w	r3, [r9, #12]
 800b8d0:	f200 80c0 	bhi.w	800ba54 <_realloc_r+0x370>
 800b8d4:	f109 0310 	add.w	r3, r9, #16
 800b8d8:	3408      	adds	r4, #8
 800b8da:	6822      	ldr	r2, [r4, #0]
 800b8dc:	601a      	str	r2, [r3, #0]
 800b8de:	6862      	ldr	r2, [r4, #4]
 800b8e0:	605a      	str	r2, [r3, #4]
 800b8e2:	68a2      	ldr	r2, [r4, #8]
 800b8e4:	609a      	str	r2, [r3, #8]
 800b8e6:	4634      	mov	r4, r6
 800b8e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b8ec:	4666      	mov	r6, ip
 800b8ee:	46cb      	mov	fp, r9
 800b8f0:	e771      	b.n	800b7d6 <_realloc_r+0xf2>
 800b8f2:	4611      	mov	r1, r2
 800b8f4:	b003      	add	sp, #12
 800b8f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8fa:	f7fe b855 	b.w	80099a8 <_malloc_r>
 800b8fe:	230c      	movs	r3, #12
 800b900:	603b      	str	r3, [r7, #0]
 800b902:	f04f 0800 	mov.w	r8, #0
 800b906:	e778      	b.n	800b7fa <_realloc_r+0x116>
 800b908:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800b90c:	f026 0e03 	bic.w	lr, r6, #3
 800b910:	eb0e 000a 	add.w	r0, lr, sl
 800b914:	f105 0610 	add.w	r6, r5, #16
 800b918:	42b0      	cmp	r0, r6
 800b91a:	bfb8      	it	lt
 800b91c:	4660      	movlt	r0, ip
 800b91e:	f6ff af19 	blt.w	800b754 <_realloc_r+0x70>
 800b922:	eb0b 0205 	add.w	r2, fp, r5
 800b926:	1b41      	subs	r1, r0, r5
 800b928:	f041 0101 	orr.w	r1, r1, #1
 800b92c:	6051      	str	r1, [r2, #4]
 800b92e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800b932:	609a      	str	r2, [r3, #8]
 800b934:	f001 0301 	and.w	r3, r1, #1
 800b938:	431d      	orrs	r5, r3
 800b93a:	f844 5c04 	str.w	r5, [r4, #-4]
 800b93e:	4638      	mov	r0, r7
 800b940:	f7fe fb6a 	bl	800a018 <__malloc_unlock>
 800b944:	46a0      	mov	r8, r4
 800b946:	e758      	b.n	800b7fa <_realloc_r+0x116>
 800b948:	6823      	ldr	r3, [r4, #0]
 800b94a:	6003      	str	r3, [r0, #0]
 800b94c:	6863      	ldr	r3, [r4, #4]
 800b94e:	2a1b      	cmp	r2, #27
 800b950:	6043      	str	r3, [r0, #4]
 800b952:	bf9c      	itt	ls
 800b954:	f104 0208 	addls.w	r2, r4, #8
 800b958:	f100 0308 	addls.w	r3, r0, #8
 800b95c:	d990      	bls.n	800b880 <_realloc_r+0x19c>
 800b95e:	68a3      	ldr	r3, [r4, #8]
 800b960:	6083      	str	r3, [r0, #8]
 800b962:	68e3      	ldr	r3, [r4, #12]
 800b964:	2a24      	cmp	r2, #36	; 0x24
 800b966:	60c3      	str	r3, [r0, #12]
 800b968:	bf03      	ittte	eq
 800b96a:	6923      	ldreq	r3, [r4, #16]
 800b96c:	6103      	streq	r3, [r0, #16]
 800b96e:	6962      	ldreq	r2, [r4, #20]
 800b970:	f100 0310 	addne.w	r3, r0, #16
 800b974:	bf09      	itett	eq
 800b976:	6142      	streq	r2, [r0, #20]
 800b978:	f104 0210 	addne.w	r2, r4, #16
 800b97c:	f100 0318 	addeq.w	r3, r0, #24
 800b980:	f104 0218 	addeq.w	r2, r4, #24
 800b984:	e77c      	b.n	800b880 <_realloc_r+0x19c>
 800b986:	4621      	mov	r1, r4
 800b988:	4630      	mov	r0, r6
 800b98a:	f8cd c004 	str.w	ip, [sp, #4]
 800b98e:	f7ff fe07 	bl	800b5a0 <memmove>
 800b992:	f8dd c004 	ldr.w	ip, [sp, #4]
 800b996:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b99a:	4634      	mov	r4, r6
 800b99c:	46cb      	mov	fp, r9
 800b99e:	4666      	mov	r6, ip
 800b9a0:	e719      	b.n	800b7d6 <_realloc_r+0xf2>
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	f7ff fdfc 	bl	800b5a0 <memmove>
 800b9a8:	e770      	b.n	800b88c <_realloc_r+0x1a8>
 800b9aa:	bf00      	nop
 800b9ac:	200005a4 	.word	0x200005a4
 800b9b0:	f105 0110 	add.w	r1, r5, #16
 800b9b4:	428e      	cmp	r6, r1
 800b9b6:	f6ff af73 	blt.w	800b8a0 <_realloc_r+0x1bc>
 800b9ba:	46c8      	mov	r8, r9
 800b9bc:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800b9c0:	f858 0f08 	ldr.w	r0, [r8, #8]!
 800b9c4:	f1aa 0204 	sub.w	r2, sl, #4
 800b9c8:	2a24      	cmp	r2, #36	; 0x24
 800b9ca:	60c1      	str	r1, [r0, #12]
 800b9cc:	6088      	str	r0, [r1, #8]
 800b9ce:	d861      	bhi.n	800ba94 <_realloc_r+0x3b0>
 800b9d0:	2a13      	cmp	r2, #19
 800b9d2:	bf98      	it	ls
 800b9d4:	4642      	movls	r2, r8
 800b9d6:	d90a      	bls.n	800b9ee <_realloc_r+0x30a>
 800b9d8:	6821      	ldr	r1, [r4, #0]
 800b9da:	f8c9 1008 	str.w	r1, [r9, #8]
 800b9de:	6861      	ldr	r1, [r4, #4]
 800b9e0:	2a1b      	cmp	r2, #27
 800b9e2:	f8c9 100c 	str.w	r1, [r9, #12]
 800b9e6:	d85c      	bhi.n	800baa2 <_realloc_r+0x3be>
 800b9e8:	f109 0210 	add.w	r2, r9, #16
 800b9ec:	3408      	adds	r4, #8
 800b9ee:	6821      	ldr	r1, [r4, #0]
 800b9f0:	6011      	str	r1, [r2, #0]
 800b9f2:	6861      	ldr	r1, [r4, #4]
 800b9f4:	6051      	str	r1, [r2, #4]
 800b9f6:	68a1      	ldr	r1, [r4, #8]
 800b9f8:	6091      	str	r1, [r2, #8]
 800b9fa:	eb09 0205 	add.w	r2, r9, r5
 800b9fe:	1b71      	subs	r1, r6, r5
 800ba00:	f041 0101 	orr.w	r1, r1, #1
 800ba04:	6051      	str	r1, [r2, #4]
 800ba06:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba0a:	609a      	str	r2, [r3, #8]
 800ba0c:	f001 0301 	and.w	r3, r1, #1
 800ba10:	431d      	orrs	r5, r3
 800ba12:	f8c9 5004 	str.w	r5, [r9, #4]
 800ba16:	4638      	mov	r0, r7
 800ba18:	f7fe fafe 	bl	800a018 <__malloc_unlock>
 800ba1c:	e6ed      	b.n	800b7fa <_realloc_r+0x116>
 800ba1e:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800ba22:	f026 0603 	bic.w	r6, r6, #3
 800ba26:	4456      	add	r6, sl
 800ba28:	e6d5      	b.n	800b7d6 <_realloc_r+0xf2>
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	4640      	mov	r0, r8
 800ba2e:	f7ff fdb7 	bl	800b5a0 <memmove>
 800ba32:	4644      	mov	r4, r8
 800ba34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ba38:	46cb      	mov	fp, r9
 800ba3a:	e6cc      	b.n	800b7d6 <_realloc_r+0xf2>
 800ba3c:	68a3      	ldr	r3, [r4, #8]
 800ba3e:	f8c9 3010 	str.w	r3, [r9, #16]
 800ba42:	68e3      	ldr	r3, [r4, #12]
 800ba44:	2a24      	cmp	r2, #36	; 0x24
 800ba46:	f8c9 3014 	str.w	r3, [r9, #20]
 800ba4a:	d00f      	beq.n	800ba6c <_realloc_r+0x388>
 800ba4c:	f109 0318 	add.w	r3, r9, #24
 800ba50:	3410      	adds	r4, #16
 800ba52:	e6b6      	b.n	800b7c2 <_realloc_r+0xde>
 800ba54:	68a3      	ldr	r3, [r4, #8]
 800ba56:	f8c9 3010 	str.w	r3, [r9, #16]
 800ba5a:	68e3      	ldr	r3, [r4, #12]
 800ba5c:	2a24      	cmp	r2, #36	; 0x24
 800ba5e:	f8c9 3014 	str.w	r3, [r9, #20]
 800ba62:	d00d      	beq.n	800ba80 <_realloc_r+0x39c>
 800ba64:	f109 0318 	add.w	r3, r9, #24
 800ba68:	3410      	adds	r4, #16
 800ba6a:	e736      	b.n	800b8da <_realloc_r+0x1f6>
 800ba6c:	6923      	ldr	r3, [r4, #16]
 800ba6e:	f8c9 3018 	str.w	r3, [r9, #24]
 800ba72:	6962      	ldr	r2, [r4, #20]
 800ba74:	f109 0320 	add.w	r3, r9, #32
 800ba78:	f8c9 201c 	str.w	r2, [r9, #28]
 800ba7c:	3418      	adds	r4, #24
 800ba7e:	e6a0      	b.n	800b7c2 <_realloc_r+0xde>
 800ba80:	6923      	ldr	r3, [r4, #16]
 800ba82:	f8c9 3018 	str.w	r3, [r9, #24]
 800ba86:	6962      	ldr	r2, [r4, #20]
 800ba88:	f109 0320 	add.w	r3, r9, #32
 800ba8c:	f8c9 201c 	str.w	r2, [r9, #28]
 800ba90:	3418      	adds	r4, #24
 800ba92:	e722      	b.n	800b8da <_realloc_r+0x1f6>
 800ba94:	4640      	mov	r0, r8
 800ba96:	4621      	mov	r1, r4
 800ba98:	9301      	str	r3, [sp, #4]
 800ba9a:	f7ff fd81 	bl	800b5a0 <memmove>
 800ba9e:	9b01      	ldr	r3, [sp, #4]
 800baa0:	e7ab      	b.n	800b9fa <_realloc_r+0x316>
 800baa2:	68a1      	ldr	r1, [r4, #8]
 800baa4:	f8c9 1010 	str.w	r1, [r9, #16]
 800baa8:	68e1      	ldr	r1, [r4, #12]
 800baaa:	2a24      	cmp	r2, #36	; 0x24
 800baac:	f8c9 1014 	str.w	r1, [r9, #20]
 800bab0:	d003      	beq.n	800baba <_realloc_r+0x3d6>
 800bab2:	f109 0218 	add.w	r2, r9, #24
 800bab6:	3410      	adds	r4, #16
 800bab8:	e799      	b.n	800b9ee <_realloc_r+0x30a>
 800baba:	6922      	ldr	r2, [r4, #16]
 800babc:	f8c9 2018 	str.w	r2, [r9, #24]
 800bac0:	6961      	ldr	r1, [r4, #20]
 800bac2:	f109 0220 	add.w	r2, r9, #32
 800bac6:	f8c9 101c 	str.w	r1, [r9, #28]
 800baca:	3418      	adds	r4, #24
 800bacc:	e78f      	b.n	800b9ee <_realloc_r+0x30a>
 800bace:	bf00      	nop

0800bad0 <__aeabi_drsub>:
 800bad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800bad4:	e002      	b.n	800badc <__adddf3>
 800bad6:	bf00      	nop

0800bad8 <__aeabi_dsub>:
 800bad8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800badc <__adddf3>:
 800badc:	b530      	push	{r4, r5, lr}
 800bade:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800bae2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800bae6:	ea94 0f05 	teq	r4, r5
 800baea:	bf08      	it	eq
 800baec:	ea90 0f02 	teqeq	r0, r2
 800baf0:	bf1f      	itttt	ne
 800baf2:	ea54 0c00 	orrsne.w	ip, r4, r0
 800baf6:	ea55 0c02 	orrsne.w	ip, r5, r2
 800bafa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800bafe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800bb02:	f000 80e2 	beq.w	800bcca <__adddf3+0x1ee>
 800bb06:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800bb0a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800bb0e:	bfb8      	it	lt
 800bb10:	426d      	neglt	r5, r5
 800bb12:	dd0c      	ble.n	800bb2e <__adddf3+0x52>
 800bb14:	442c      	add	r4, r5
 800bb16:	ea80 0202 	eor.w	r2, r0, r2
 800bb1a:	ea81 0303 	eor.w	r3, r1, r3
 800bb1e:	ea82 0000 	eor.w	r0, r2, r0
 800bb22:	ea83 0101 	eor.w	r1, r3, r1
 800bb26:	ea80 0202 	eor.w	r2, r0, r2
 800bb2a:	ea81 0303 	eor.w	r3, r1, r3
 800bb2e:	2d36      	cmp	r5, #54	; 0x36
 800bb30:	bf88      	it	hi
 800bb32:	bd30      	pophi	{r4, r5, pc}
 800bb34:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800bb38:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800bb3c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800bb40:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800bb44:	d002      	beq.n	800bb4c <__adddf3+0x70>
 800bb46:	4240      	negs	r0, r0
 800bb48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800bb4c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800bb50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800bb54:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800bb58:	d002      	beq.n	800bb60 <__adddf3+0x84>
 800bb5a:	4252      	negs	r2, r2
 800bb5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800bb60:	ea94 0f05 	teq	r4, r5
 800bb64:	f000 80a7 	beq.w	800bcb6 <__adddf3+0x1da>
 800bb68:	f1a4 0401 	sub.w	r4, r4, #1
 800bb6c:	f1d5 0e20 	rsbs	lr, r5, #32
 800bb70:	db0d      	blt.n	800bb8e <__adddf3+0xb2>
 800bb72:	fa02 fc0e 	lsl.w	ip, r2, lr
 800bb76:	fa22 f205 	lsr.w	r2, r2, r5
 800bb7a:	1880      	adds	r0, r0, r2
 800bb7c:	f141 0100 	adc.w	r1, r1, #0
 800bb80:	fa03 f20e 	lsl.w	r2, r3, lr
 800bb84:	1880      	adds	r0, r0, r2
 800bb86:	fa43 f305 	asr.w	r3, r3, r5
 800bb8a:	4159      	adcs	r1, r3
 800bb8c:	e00e      	b.n	800bbac <__adddf3+0xd0>
 800bb8e:	f1a5 0520 	sub.w	r5, r5, #32
 800bb92:	f10e 0e20 	add.w	lr, lr, #32
 800bb96:	2a01      	cmp	r2, #1
 800bb98:	fa03 fc0e 	lsl.w	ip, r3, lr
 800bb9c:	bf28      	it	cs
 800bb9e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800bba2:	fa43 f305 	asr.w	r3, r3, r5
 800bba6:	18c0      	adds	r0, r0, r3
 800bba8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800bbac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800bbb0:	d507      	bpl.n	800bbc2 <__adddf3+0xe6>
 800bbb2:	f04f 0e00 	mov.w	lr, #0
 800bbb6:	f1dc 0c00 	rsbs	ip, ip, #0
 800bbba:	eb7e 0000 	sbcs.w	r0, lr, r0
 800bbbe:	eb6e 0101 	sbc.w	r1, lr, r1
 800bbc2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bbc6:	d31b      	bcc.n	800bc00 <__adddf3+0x124>
 800bbc8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bbcc:	d30c      	bcc.n	800bbe8 <__adddf3+0x10c>
 800bbce:	0849      	lsrs	r1, r1, #1
 800bbd0:	ea5f 0030 	movs.w	r0, r0, rrx
 800bbd4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800bbd8:	f104 0401 	add.w	r4, r4, #1
 800bbdc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800bbe0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800bbe4:	f080 809a 	bcs.w	800bd1c <__adddf3+0x240>
 800bbe8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800bbec:	bf08      	it	eq
 800bbee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800bbf2:	f150 0000 	adcs.w	r0, r0, #0
 800bbf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800bbfa:	ea41 0105 	orr.w	r1, r1, r5
 800bbfe:	bd30      	pop	{r4, r5, pc}
 800bc00:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800bc04:	4140      	adcs	r0, r0
 800bc06:	eb41 0101 	adc.w	r1, r1, r1
 800bc0a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bc0e:	f1a4 0401 	sub.w	r4, r4, #1
 800bc12:	d1e9      	bne.n	800bbe8 <__adddf3+0x10c>
 800bc14:	f091 0f00 	teq	r1, #0
 800bc18:	bf04      	itt	eq
 800bc1a:	4601      	moveq	r1, r0
 800bc1c:	2000      	moveq	r0, #0
 800bc1e:	fab1 f381 	clz	r3, r1
 800bc22:	bf08      	it	eq
 800bc24:	3320      	addeq	r3, #32
 800bc26:	f1a3 030b 	sub.w	r3, r3, #11
 800bc2a:	f1b3 0220 	subs.w	r2, r3, #32
 800bc2e:	da0c      	bge.n	800bc4a <__adddf3+0x16e>
 800bc30:	320c      	adds	r2, #12
 800bc32:	dd08      	ble.n	800bc46 <__adddf3+0x16a>
 800bc34:	f102 0c14 	add.w	ip, r2, #20
 800bc38:	f1c2 020c 	rsb	r2, r2, #12
 800bc3c:	fa01 f00c 	lsl.w	r0, r1, ip
 800bc40:	fa21 f102 	lsr.w	r1, r1, r2
 800bc44:	e00c      	b.n	800bc60 <__adddf3+0x184>
 800bc46:	f102 0214 	add.w	r2, r2, #20
 800bc4a:	bfd8      	it	le
 800bc4c:	f1c2 0c20 	rsble	ip, r2, #32
 800bc50:	fa01 f102 	lsl.w	r1, r1, r2
 800bc54:	fa20 fc0c 	lsr.w	ip, r0, ip
 800bc58:	bfdc      	itt	le
 800bc5a:	ea41 010c 	orrle.w	r1, r1, ip
 800bc5e:	4090      	lslle	r0, r2
 800bc60:	1ae4      	subs	r4, r4, r3
 800bc62:	bfa2      	ittt	ge
 800bc64:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800bc68:	4329      	orrge	r1, r5
 800bc6a:	bd30      	popge	{r4, r5, pc}
 800bc6c:	ea6f 0404 	mvn.w	r4, r4
 800bc70:	3c1f      	subs	r4, #31
 800bc72:	da1c      	bge.n	800bcae <__adddf3+0x1d2>
 800bc74:	340c      	adds	r4, #12
 800bc76:	dc0e      	bgt.n	800bc96 <__adddf3+0x1ba>
 800bc78:	f104 0414 	add.w	r4, r4, #20
 800bc7c:	f1c4 0220 	rsb	r2, r4, #32
 800bc80:	fa20 f004 	lsr.w	r0, r0, r4
 800bc84:	fa01 f302 	lsl.w	r3, r1, r2
 800bc88:	ea40 0003 	orr.w	r0, r0, r3
 800bc8c:	fa21 f304 	lsr.w	r3, r1, r4
 800bc90:	ea45 0103 	orr.w	r1, r5, r3
 800bc94:	bd30      	pop	{r4, r5, pc}
 800bc96:	f1c4 040c 	rsb	r4, r4, #12
 800bc9a:	f1c4 0220 	rsb	r2, r4, #32
 800bc9e:	fa20 f002 	lsr.w	r0, r0, r2
 800bca2:	fa01 f304 	lsl.w	r3, r1, r4
 800bca6:	ea40 0003 	orr.w	r0, r0, r3
 800bcaa:	4629      	mov	r1, r5
 800bcac:	bd30      	pop	{r4, r5, pc}
 800bcae:	fa21 f004 	lsr.w	r0, r1, r4
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	bd30      	pop	{r4, r5, pc}
 800bcb6:	f094 0f00 	teq	r4, #0
 800bcba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800bcbe:	bf06      	itte	eq
 800bcc0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800bcc4:	3401      	addeq	r4, #1
 800bcc6:	3d01      	subne	r5, #1
 800bcc8:	e74e      	b.n	800bb68 <__adddf3+0x8c>
 800bcca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800bcce:	bf18      	it	ne
 800bcd0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800bcd4:	d029      	beq.n	800bd2a <__adddf3+0x24e>
 800bcd6:	ea94 0f05 	teq	r4, r5
 800bcda:	bf08      	it	eq
 800bcdc:	ea90 0f02 	teqeq	r0, r2
 800bce0:	d005      	beq.n	800bcee <__adddf3+0x212>
 800bce2:	ea54 0c00 	orrs.w	ip, r4, r0
 800bce6:	bf04      	itt	eq
 800bce8:	4619      	moveq	r1, r3
 800bcea:	4610      	moveq	r0, r2
 800bcec:	bd30      	pop	{r4, r5, pc}
 800bcee:	ea91 0f03 	teq	r1, r3
 800bcf2:	bf1e      	ittt	ne
 800bcf4:	2100      	movne	r1, #0
 800bcf6:	2000      	movne	r0, #0
 800bcf8:	bd30      	popne	{r4, r5, pc}
 800bcfa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800bcfe:	d105      	bne.n	800bd0c <__adddf3+0x230>
 800bd00:	0040      	lsls	r0, r0, #1
 800bd02:	4149      	adcs	r1, r1
 800bd04:	bf28      	it	cs
 800bd06:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800bd0a:	bd30      	pop	{r4, r5, pc}
 800bd0c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800bd10:	bf3c      	itt	cc
 800bd12:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800bd16:	bd30      	popcc	{r4, r5, pc}
 800bd18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800bd1c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800bd20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd24:	f04f 0000 	mov.w	r0, #0
 800bd28:	bd30      	pop	{r4, r5, pc}
 800bd2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800bd2e:	bf1a      	itte	ne
 800bd30:	4619      	movne	r1, r3
 800bd32:	4610      	movne	r0, r2
 800bd34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800bd38:	bf1c      	itt	ne
 800bd3a:	460b      	movne	r3, r1
 800bd3c:	4602      	movne	r2, r0
 800bd3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800bd42:	bf06      	itte	eq
 800bd44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800bd48:	ea91 0f03 	teqeq	r1, r3
 800bd4c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800bd50:	bd30      	pop	{r4, r5, pc}
 800bd52:	bf00      	nop

0800bd54 <__aeabi_ui2d>:
 800bd54:	f090 0f00 	teq	r0, #0
 800bd58:	bf04      	itt	eq
 800bd5a:	2100      	moveq	r1, #0
 800bd5c:	4770      	bxeq	lr
 800bd5e:	b530      	push	{r4, r5, lr}
 800bd60:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800bd64:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800bd68:	f04f 0500 	mov.w	r5, #0
 800bd6c:	f04f 0100 	mov.w	r1, #0
 800bd70:	e750      	b.n	800bc14 <__adddf3+0x138>
 800bd72:	bf00      	nop

0800bd74 <__aeabi_i2d>:
 800bd74:	f090 0f00 	teq	r0, #0
 800bd78:	bf04      	itt	eq
 800bd7a:	2100      	moveq	r1, #0
 800bd7c:	4770      	bxeq	lr
 800bd7e:	b530      	push	{r4, r5, lr}
 800bd80:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800bd84:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800bd88:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800bd8c:	bf48      	it	mi
 800bd8e:	4240      	negmi	r0, r0
 800bd90:	f04f 0100 	mov.w	r1, #0
 800bd94:	e73e      	b.n	800bc14 <__adddf3+0x138>
 800bd96:	bf00      	nop

0800bd98 <__aeabi_f2d>:
 800bd98:	0042      	lsls	r2, r0, #1
 800bd9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800bd9e:	ea4f 0131 	mov.w	r1, r1, rrx
 800bda2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800bda6:	bf1f      	itttt	ne
 800bda8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800bdac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800bdb0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800bdb4:	4770      	bxne	lr
 800bdb6:	f092 0f00 	teq	r2, #0
 800bdba:	bf14      	ite	ne
 800bdbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800bdc0:	4770      	bxeq	lr
 800bdc2:	b530      	push	{r4, r5, lr}
 800bdc4:	f44f 7460 	mov.w	r4, #896	; 0x380
 800bdc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800bdcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bdd0:	e720      	b.n	800bc14 <__adddf3+0x138>
 800bdd2:	bf00      	nop

0800bdd4 <__aeabi_ul2d>:
 800bdd4:	ea50 0201 	orrs.w	r2, r0, r1
 800bdd8:	bf08      	it	eq
 800bdda:	4770      	bxeq	lr
 800bddc:	b530      	push	{r4, r5, lr}
 800bdde:	f04f 0500 	mov.w	r5, #0
 800bde2:	e00a      	b.n	800bdfa <__aeabi_l2d+0x16>

0800bde4 <__aeabi_l2d>:
 800bde4:	ea50 0201 	orrs.w	r2, r0, r1
 800bde8:	bf08      	it	eq
 800bdea:	4770      	bxeq	lr
 800bdec:	b530      	push	{r4, r5, lr}
 800bdee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800bdf2:	d502      	bpl.n	800bdfa <__aeabi_l2d+0x16>
 800bdf4:	4240      	negs	r0, r0
 800bdf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800bdfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800bdfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800be02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800be06:	f43f aedc 	beq.w	800bbc2 <__adddf3+0xe6>
 800be0a:	f04f 0203 	mov.w	r2, #3
 800be0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800be12:	bf18      	it	ne
 800be14:	3203      	addne	r2, #3
 800be16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800be1a:	bf18      	it	ne
 800be1c:	3203      	addne	r2, #3
 800be1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800be22:	f1c2 0320 	rsb	r3, r2, #32
 800be26:	fa00 fc03 	lsl.w	ip, r0, r3
 800be2a:	fa20 f002 	lsr.w	r0, r0, r2
 800be2e:	fa01 fe03 	lsl.w	lr, r1, r3
 800be32:	ea40 000e 	orr.w	r0, r0, lr
 800be36:	fa21 f102 	lsr.w	r1, r1, r2
 800be3a:	4414      	add	r4, r2
 800be3c:	e6c1      	b.n	800bbc2 <__adddf3+0xe6>
 800be3e:	bf00      	nop

0800be40 <__aeabi_dmul>:
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800be46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800be4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800be4e:	bf1d      	ittte	ne
 800be50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800be54:	ea94 0f0c 	teqne	r4, ip
 800be58:	ea95 0f0c 	teqne	r5, ip
 800be5c:	f000 f8de 	bleq	800c01c <__aeabi_dmul+0x1dc>
 800be60:	442c      	add	r4, r5
 800be62:	ea81 0603 	eor.w	r6, r1, r3
 800be66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800be6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800be6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800be72:	bf18      	it	ne
 800be74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800be78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800be7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be80:	d038      	beq.n	800bef4 <__aeabi_dmul+0xb4>
 800be82:	fba0 ce02 	umull	ip, lr, r0, r2
 800be86:	f04f 0500 	mov.w	r5, #0
 800be8a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800be8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800be92:	fbe0 e503 	umlal	lr, r5, r0, r3
 800be96:	f04f 0600 	mov.w	r6, #0
 800be9a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800be9e:	f09c 0f00 	teq	ip, #0
 800bea2:	bf18      	it	ne
 800bea4:	f04e 0e01 	orrne.w	lr, lr, #1
 800bea8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800beac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800beb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800beb4:	d204      	bcs.n	800bec0 <__aeabi_dmul+0x80>
 800beb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800beba:	416d      	adcs	r5, r5
 800bebc:	eb46 0606 	adc.w	r6, r6, r6
 800bec0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800bec4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800bec8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800becc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800bed0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800bed4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800bed8:	bf88      	it	hi
 800beda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800bede:	d81e      	bhi.n	800bf1e <__aeabi_dmul+0xde>
 800bee0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800bee4:	bf08      	it	eq
 800bee6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800beea:	f150 0000 	adcs.w	r0, r0, #0
 800beee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800bef8:	ea46 0101 	orr.w	r1, r6, r1
 800befc:	ea40 0002 	orr.w	r0, r0, r2
 800bf00:	ea81 0103 	eor.w	r1, r1, r3
 800bf04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800bf08:	bfc2      	ittt	gt
 800bf0a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800bf0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800bf12:	bd70      	popgt	{r4, r5, r6, pc}
 800bf14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bf18:	f04f 0e00 	mov.w	lr, #0
 800bf1c:	3c01      	subs	r4, #1
 800bf1e:	f300 80ab 	bgt.w	800c078 <__aeabi_dmul+0x238>
 800bf22:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800bf26:	bfde      	ittt	le
 800bf28:	2000      	movle	r0, #0
 800bf2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800bf2e:	bd70      	pople	{r4, r5, r6, pc}
 800bf30:	f1c4 0400 	rsb	r4, r4, #0
 800bf34:	3c20      	subs	r4, #32
 800bf36:	da35      	bge.n	800bfa4 <__aeabi_dmul+0x164>
 800bf38:	340c      	adds	r4, #12
 800bf3a:	dc1b      	bgt.n	800bf74 <__aeabi_dmul+0x134>
 800bf3c:	f104 0414 	add.w	r4, r4, #20
 800bf40:	f1c4 0520 	rsb	r5, r4, #32
 800bf44:	fa00 f305 	lsl.w	r3, r0, r5
 800bf48:	fa20 f004 	lsr.w	r0, r0, r4
 800bf4c:	fa01 f205 	lsl.w	r2, r1, r5
 800bf50:	ea40 0002 	orr.w	r0, r0, r2
 800bf54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800bf58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bf5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800bf60:	fa21 f604 	lsr.w	r6, r1, r4
 800bf64:	eb42 0106 	adc.w	r1, r2, r6
 800bf68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bf6c:	bf08      	it	eq
 800bf6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
 800bf74:	f1c4 040c 	rsb	r4, r4, #12
 800bf78:	f1c4 0520 	rsb	r5, r4, #32
 800bf7c:	fa00 f304 	lsl.w	r3, r0, r4
 800bf80:	fa20 f005 	lsr.w	r0, r0, r5
 800bf84:	fa01 f204 	lsl.w	r2, r1, r4
 800bf88:	ea40 0002 	orr.w	r0, r0, r2
 800bf8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bf90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800bf94:	f141 0100 	adc.w	r1, r1, #0
 800bf98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bf9c:	bf08      	it	eq
 800bf9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}
 800bfa4:	f1c4 0520 	rsb	r5, r4, #32
 800bfa8:	fa00 f205 	lsl.w	r2, r0, r5
 800bfac:	ea4e 0e02 	orr.w	lr, lr, r2
 800bfb0:	fa20 f304 	lsr.w	r3, r0, r4
 800bfb4:	fa01 f205 	lsl.w	r2, r1, r5
 800bfb8:	ea43 0302 	orr.w	r3, r3, r2
 800bfbc:	fa21 f004 	lsr.w	r0, r1, r4
 800bfc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800bfc4:	fa21 f204 	lsr.w	r2, r1, r4
 800bfc8:	ea20 0002 	bic.w	r0, r0, r2
 800bfcc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800bfd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800bfd4:	bf08      	it	eq
 800bfd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800bfda:	bd70      	pop	{r4, r5, r6, pc}
 800bfdc:	f094 0f00 	teq	r4, #0
 800bfe0:	d10f      	bne.n	800c002 <__aeabi_dmul+0x1c2>
 800bfe2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800bfe6:	0040      	lsls	r0, r0, #1
 800bfe8:	eb41 0101 	adc.w	r1, r1, r1
 800bfec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800bff0:	bf08      	it	eq
 800bff2:	3c01      	subeq	r4, #1
 800bff4:	d0f7      	beq.n	800bfe6 <__aeabi_dmul+0x1a6>
 800bff6:	ea41 0106 	orr.w	r1, r1, r6
 800bffa:	f095 0f00 	teq	r5, #0
 800bffe:	bf18      	it	ne
 800c000:	4770      	bxne	lr
 800c002:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c006:	0052      	lsls	r2, r2, #1
 800c008:	eb43 0303 	adc.w	r3, r3, r3
 800c00c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c010:	bf08      	it	eq
 800c012:	3d01      	subeq	r5, #1
 800c014:	d0f7      	beq.n	800c006 <__aeabi_dmul+0x1c6>
 800c016:	ea43 0306 	orr.w	r3, r3, r6
 800c01a:	4770      	bx	lr
 800c01c:	ea94 0f0c 	teq	r4, ip
 800c020:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c024:	bf18      	it	ne
 800c026:	ea95 0f0c 	teqne	r5, ip
 800c02a:	d00c      	beq.n	800c046 <__aeabi_dmul+0x206>
 800c02c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c030:	bf18      	it	ne
 800c032:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c036:	d1d1      	bne.n	800bfdc <__aeabi_dmul+0x19c>
 800c038:	ea81 0103 	eor.w	r1, r1, r3
 800c03c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c040:	f04f 0000 	mov.w	r0, #0
 800c044:	bd70      	pop	{r4, r5, r6, pc}
 800c046:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c04a:	bf06      	itte	eq
 800c04c:	4610      	moveq	r0, r2
 800c04e:	4619      	moveq	r1, r3
 800c050:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c054:	d019      	beq.n	800c08a <__aeabi_dmul+0x24a>
 800c056:	ea94 0f0c 	teq	r4, ip
 800c05a:	d102      	bne.n	800c062 <__aeabi_dmul+0x222>
 800c05c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c060:	d113      	bne.n	800c08a <__aeabi_dmul+0x24a>
 800c062:	ea95 0f0c 	teq	r5, ip
 800c066:	d105      	bne.n	800c074 <__aeabi_dmul+0x234>
 800c068:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c06c:	bf1c      	itt	ne
 800c06e:	4610      	movne	r0, r2
 800c070:	4619      	movne	r1, r3
 800c072:	d10a      	bne.n	800c08a <__aeabi_dmul+0x24a>
 800c074:	ea81 0103 	eor.w	r1, r1, r3
 800c078:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c07c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c080:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c084:	f04f 0000 	mov.w	r0, #0
 800c088:	bd70      	pop	{r4, r5, r6, pc}
 800c08a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c08e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800c092:	bd70      	pop	{r4, r5, r6, pc}

0800c094 <__aeabi_ddiv>:
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c09a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c09e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c0a2:	bf1d      	ittte	ne
 800c0a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c0a8:	ea94 0f0c 	teqne	r4, ip
 800c0ac:	ea95 0f0c 	teqne	r5, ip
 800c0b0:	f000 f8a7 	bleq	800c202 <__aeabi_ddiv+0x16e>
 800c0b4:	eba4 0405 	sub.w	r4, r4, r5
 800c0b8:	ea81 0e03 	eor.w	lr, r1, r3
 800c0bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c0c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c0c4:	f000 8088 	beq.w	800c1d8 <__aeabi_ddiv+0x144>
 800c0c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c0cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c0d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c0d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c0d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c0dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c0e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c0e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c0e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800c0ec:	429d      	cmp	r5, r3
 800c0ee:	bf08      	it	eq
 800c0f0:	4296      	cmpeq	r6, r2
 800c0f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800c0f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800c0fa:	d202      	bcs.n	800c102 <__aeabi_ddiv+0x6e>
 800c0fc:	085b      	lsrs	r3, r3, #1
 800c0fe:	ea4f 0232 	mov.w	r2, r2, rrx
 800c102:	1ab6      	subs	r6, r6, r2
 800c104:	eb65 0503 	sbc.w	r5, r5, r3
 800c108:	085b      	lsrs	r3, r3, #1
 800c10a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c10e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c112:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800c116:	ebb6 0e02 	subs.w	lr, r6, r2
 800c11a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c11e:	bf22      	ittt	cs
 800c120:	1ab6      	subcs	r6, r6, r2
 800c122:	4675      	movcs	r5, lr
 800c124:	ea40 000c 	orrcs.w	r0, r0, ip
 800c128:	085b      	lsrs	r3, r3, #1
 800c12a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c12e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c132:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c136:	bf22      	ittt	cs
 800c138:	1ab6      	subcs	r6, r6, r2
 800c13a:	4675      	movcs	r5, lr
 800c13c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c140:	085b      	lsrs	r3, r3, #1
 800c142:	ea4f 0232 	mov.w	r2, r2, rrx
 800c146:	ebb6 0e02 	subs.w	lr, r6, r2
 800c14a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c14e:	bf22      	ittt	cs
 800c150:	1ab6      	subcs	r6, r6, r2
 800c152:	4675      	movcs	r5, lr
 800c154:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c158:	085b      	lsrs	r3, r3, #1
 800c15a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c15e:	ebb6 0e02 	subs.w	lr, r6, r2
 800c162:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c166:	bf22      	ittt	cs
 800c168:	1ab6      	subcs	r6, r6, r2
 800c16a:	4675      	movcs	r5, lr
 800c16c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c170:	ea55 0e06 	orrs.w	lr, r5, r6
 800c174:	d018      	beq.n	800c1a8 <__aeabi_ddiv+0x114>
 800c176:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c17a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c17e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c182:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c186:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c18a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c18e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c192:	d1c0      	bne.n	800c116 <__aeabi_ddiv+0x82>
 800c194:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c198:	d10b      	bne.n	800c1b2 <__aeabi_ddiv+0x11e>
 800c19a:	ea41 0100 	orr.w	r1, r1, r0
 800c19e:	f04f 0000 	mov.w	r0, #0
 800c1a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c1a6:	e7b6      	b.n	800c116 <__aeabi_ddiv+0x82>
 800c1a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c1ac:	bf04      	itt	eq
 800c1ae:	4301      	orreq	r1, r0
 800c1b0:	2000      	moveq	r0, #0
 800c1b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c1b6:	bf88      	it	hi
 800c1b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c1bc:	f63f aeaf 	bhi.w	800bf1e <__aeabi_dmul+0xde>
 800c1c0:	ebb5 0c03 	subs.w	ip, r5, r3
 800c1c4:	bf04      	itt	eq
 800c1c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c1ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c1ce:	f150 0000 	adcs.w	r0, r0, #0
 800c1d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
 800c1d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800c1dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c1e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c1e4:	bfc2      	ittt	gt
 800c1e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c1ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c1ee:	bd70      	popgt	{r4, r5, r6, pc}
 800c1f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c1f4:	f04f 0e00 	mov.w	lr, #0
 800c1f8:	3c01      	subs	r4, #1
 800c1fa:	e690      	b.n	800bf1e <__aeabi_dmul+0xde>
 800c1fc:	ea45 0e06 	orr.w	lr, r5, r6
 800c200:	e68d      	b.n	800bf1e <__aeabi_dmul+0xde>
 800c202:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c206:	ea94 0f0c 	teq	r4, ip
 800c20a:	bf08      	it	eq
 800c20c:	ea95 0f0c 	teqeq	r5, ip
 800c210:	f43f af3b 	beq.w	800c08a <__aeabi_dmul+0x24a>
 800c214:	ea94 0f0c 	teq	r4, ip
 800c218:	d10a      	bne.n	800c230 <__aeabi_ddiv+0x19c>
 800c21a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c21e:	f47f af34 	bne.w	800c08a <__aeabi_dmul+0x24a>
 800c222:	ea95 0f0c 	teq	r5, ip
 800c226:	f47f af25 	bne.w	800c074 <__aeabi_dmul+0x234>
 800c22a:	4610      	mov	r0, r2
 800c22c:	4619      	mov	r1, r3
 800c22e:	e72c      	b.n	800c08a <__aeabi_dmul+0x24a>
 800c230:	ea95 0f0c 	teq	r5, ip
 800c234:	d106      	bne.n	800c244 <__aeabi_ddiv+0x1b0>
 800c236:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c23a:	f43f aefd 	beq.w	800c038 <__aeabi_dmul+0x1f8>
 800c23e:	4610      	mov	r0, r2
 800c240:	4619      	mov	r1, r3
 800c242:	e722      	b.n	800c08a <__aeabi_dmul+0x24a>
 800c244:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c248:	bf18      	it	ne
 800c24a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c24e:	f47f aec5 	bne.w	800bfdc <__aeabi_dmul+0x19c>
 800c252:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800c256:	f47f af0d 	bne.w	800c074 <__aeabi_dmul+0x234>
 800c25a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800c25e:	f47f aeeb 	bne.w	800c038 <__aeabi_dmul+0x1f8>
 800c262:	e712      	b.n	800c08a <__aeabi_dmul+0x24a>

0800c264 <__gedf2>:
 800c264:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c268:	e006      	b.n	800c278 <__cmpdf2+0x4>
 800c26a:	bf00      	nop

0800c26c <__ledf2>:
 800c26c:	f04f 0c01 	mov.w	ip, #1
 800c270:	e002      	b.n	800c278 <__cmpdf2+0x4>
 800c272:	bf00      	nop

0800c274 <__cmpdf2>:
 800c274:	f04f 0c01 	mov.w	ip, #1
 800c278:	f84d cd04 	str.w	ip, [sp, #-4]!
 800c27c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c280:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c284:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c288:	bf18      	it	ne
 800c28a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800c28e:	d01b      	beq.n	800c2c8 <__cmpdf2+0x54>
 800c290:	b001      	add	sp, #4
 800c292:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800c296:	bf0c      	ite	eq
 800c298:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800c29c:	ea91 0f03 	teqne	r1, r3
 800c2a0:	bf02      	ittt	eq
 800c2a2:	ea90 0f02 	teqeq	r0, r2
 800c2a6:	2000      	moveq	r0, #0
 800c2a8:	4770      	bxeq	lr
 800c2aa:	f110 0f00 	cmn.w	r0, #0
 800c2ae:	ea91 0f03 	teq	r1, r3
 800c2b2:	bf58      	it	pl
 800c2b4:	4299      	cmppl	r1, r3
 800c2b6:	bf08      	it	eq
 800c2b8:	4290      	cmpeq	r0, r2
 800c2ba:	bf2c      	ite	cs
 800c2bc:	17d8      	asrcs	r0, r3, #31
 800c2be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800c2c2:	f040 0001 	orr.w	r0, r0, #1
 800c2c6:	4770      	bx	lr
 800c2c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c2cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c2d0:	d102      	bne.n	800c2d8 <__cmpdf2+0x64>
 800c2d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800c2d6:	d107      	bne.n	800c2e8 <__cmpdf2+0x74>
 800c2d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c2dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c2e0:	d1d6      	bne.n	800c290 <__cmpdf2+0x1c>
 800c2e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800c2e6:	d0d3      	beq.n	800c290 <__cmpdf2+0x1c>
 800c2e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop

0800c2f0 <__aeabi_cdrcmple>:
 800c2f0:	4684      	mov	ip, r0
 800c2f2:	4610      	mov	r0, r2
 800c2f4:	4662      	mov	r2, ip
 800c2f6:	468c      	mov	ip, r1
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4663      	mov	r3, ip
 800c2fc:	e000      	b.n	800c300 <__aeabi_cdcmpeq>
 800c2fe:	bf00      	nop

0800c300 <__aeabi_cdcmpeq>:
 800c300:	b501      	push	{r0, lr}
 800c302:	f7ff ffb7 	bl	800c274 <__cmpdf2>
 800c306:	2800      	cmp	r0, #0
 800c308:	bf48      	it	mi
 800c30a:	f110 0f00 	cmnmi.w	r0, #0
 800c30e:	bd01      	pop	{r0, pc}

0800c310 <__aeabi_dcmpeq>:
 800c310:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c314:	f7ff fff4 	bl	800c300 <__aeabi_cdcmpeq>
 800c318:	bf0c      	ite	eq
 800c31a:	2001      	moveq	r0, #1
 800c31c:	2000      	movne	r0, #0
 800c31e:	f85d fb08 	ldr.w	pc, [sp], #8
 800c322:	bf00      	nop

0800c324 <__aeabi_dcmplt>:
 800c324:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c328:	f7ff ffea 	bl	800c300 <__aeabi_cdcmpeq>
 800c32c:	bf34      	ite	cc
 800c32e:	2001      	movcc	r0, #1
 800c330:	2000      	movcs	r0, #0
 800c332:	f85d fb08 	ldr.w	pc, [sp], #8
 800c336:	bf00      	nop

0800c338 <__aeabi_dcmple>:
 800c338:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c33c:	f7ff ffe0 	bl	800c300 <__aeabi_cdcmpeq>
 800c340:	bf94      	ite	ls
 800c342:	2001      	movls	r0, #1
 800c344:	2000      	movhi	r0, #0
 800c346:	f85d fb08 	ldr.w	pc, [sp], #8
 800c34a:	bf00      	nop

0800c34c <__aeabi_dcmpge>:
 800c34c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c350:	f7ff ffce 	bl	800c2f0 <__aeabi_cdrcmple>
 800c354:	bf94      	ite	ls
 800c356:	2001      	movls	r0, #1
 800c358:	2000      	movhi	r0, #0
 800c35a:	f85d fb08 	ldr.w	pc, [sp], #8
 800c35e:	bf00      	nop

0800c360 <__aeabi_dcmpgt>:
 800c360:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c364:	f7ff ffc4 	bl	800c2f0 <__aeabi_cdrcmple>
 800c368:	bf34      	ite	cc
 800c36a:	2001      	movcc	r0, #1
 800c36c:	2000      	movcs	r0, #0
 800c36e:	f85d fb08 	ldr.w	pc, [sp], #8
 800c372:	bf00      	nop

0800c374 <__aeabi_d2iz>:
 800c374:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800c378:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800c37c:	d215      	bcs.n	800c3aa <__aeabi_d2iz+0x36>
 800c37e:	d511      	bpl.n	800c3a4 <__aeabi_d2iz+0x30>
 800c380:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800c384:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800c388:	d912      	bls.n	800c3b0 <__aeabi_d2iz+0x3c>
 800c38a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800c38e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c392:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800c396:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c39a:	fa23 f002 	lsr.w	r0, r3, r2
 800c39e:	bf18      	it	ne
 800c3a0:	4240      	negne	r0, r0
 800c3a2:	4770      	bx	lr
 800c3a4:	f04f 0000 	mov.w	r0, #0
 800c3a8:	4770      	bx	lr
 800c3aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800c3ae:	d105      	bne.n	800c3bc <__aeabi_d2iz+0x48>
 800c3b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800c3b4:	bf08      	it	eq
 800c3b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800c3ba:	4770      	bx	lr
 800c3bc:	f04f 0000 	mov.w	r0, #0
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop

0800c3c4 <main>:
/**
 * @brief  Main program.
 * @param  None
 * @retval : None
 */
int main(void) {
 800c3c4:	b530      	push	{r4, r5, lr}
	GPIOPin_Type led = PD12;
	char tmp[32];
	int32_t i = 0;

	portMode(GPIOD, GPIO_Pin_12,
 800c3c6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800c3ca:	2400      	movs	r4, #0
/**
 * @brief  Main program.
 * @param  None
 * @retval : None
 */
int main(void) {
 800c3cc:	b08b      	sub	sp, #44	; 0x2c
	GPIOPin_Type led = PD12;
	char tmp[32];
	int32_t i = 0;

	portMode(GPIOD, GPIO_Pin_12,
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	4623      	mov	r3, r4
 800c3d2:	2502      	movs	r5, #2
 800c3d4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800c3d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c3dc:	e88d 0030 	stmia.w	sp, {r4, r5}
 800c3e0:	f7fa faaa 	bl	8006938 <portMode>
			GPIO_Mode_OUT, GPIO_OType_PP, GPIO_PuPd_NOPULL, GPIO_Speed_50MHz);
	digitalWrite(led, LOW);
 800c3e4:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	f7fa fabb 	bl	8006964 <digitalWrite>
//  COM_Configuration();

	//Send welcome messages
	// cprintf(Welcome_Message);

	digitalWrite(led, HIGH);
 800c3ee:	2101      	movs	r1, #1
 800c3f0:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800c3f4:	f7fa fab6 	bl	8006964 <digitalWrite>
	delay_ms(10);
 800c3f8:	200a      	movs	r0, #10
 800c3fa:	f7fa fa4d 	bl	8006898 <delay_ms>
	digitalWrite(led, LOW);
 800c3fe:	4621      	mov	r1, r4
 800c400:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800c404:	f7fa faae 	bl	8006964 <digitalWrite>
	delay_ms(5);
 800c408:	2005      	movs	r0, #5
 800c40a:	f7fa fa45 	bl	8006898 <delay_ms>

	digitalWrite(led, HIGH);
 800c40e:	2101      	movs	r1, #1
 800c410:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800c414:	f7fa faa6 	bl	8006964 <digitalWrite>
	i2c_begin(I2C1, 100000);
 800c418:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800c41c:	f248 61a0 	movw	r1, #34464	; 0x86a0
 800c420:	f2c0 0101 	movt	r1, #1
 800c424:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800c428:	f7fa fac2 	bl	80069b0 <i2c_begin>

	//Function Set
	ST7032i_command(0x38); //(0b00111000);
 800c42c:	2038      	movs	r0, #56	; 0x38
 800c42e:	f7fa fd8b 	bl	8006f48 <ST7032i_command>
	delay_us(27);
 800c432:	201b      	movs	r0, #27
 800c434:	f7fa fa04 	bl	8006840 <delay_us>
	digitalWrite(led, LOW);
 800c438:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800c43c:	4621      	mov	r1, r4
 800c43e:	f7fa fa91 	bl	8006964 <digitalWrite>

	digitalWrite(led, HIGH);
 800c442:	2101      	movs	r1, #1
 800c444:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800c448:	f7fa fa8c 	bl	8006964 <digitalWrite>
	//Function Set
	ST7032i_command(0x39); //(0b00111001);
 800c44c:	2039      	movs	r0, #57	; 0x39
 800c44e:	f7fa fd7b 	bl	8006f48 <ST7032i_command>
	delay_us(27);
 800c452:	201b      	movs	r0, #27
 800c454:	f7fa f9f4 	bl	8006840 <delay_us>
	digitalWrite(led, LOW);
 800c458:	4621      	mov	r1, r4
 800c45a:	f44f 2082 	mov.w	r0, #266240	; 0x41000
 800c45e:	f7fa fa81 	bl	8006964 <digitalWrite>

	//Bias and OSC frequency
	ST7032i_command(0x14); //(0b00010100);
 800c462:	2014      	movs	r0, #20
 800c464:	f7fa fd70 	bl	8006f48 <ST7032i_command>

	delay_us(27);
 800c468:	201b      	movs	r0, #27
 800c46a:	f7fa f9e9 	bl	8006840 <delay_us>

	//Contrast set
	ST7032i_command(0x70 | (40 & 0x0f));
 800c46e:	2078      	movs	r0, #120	; 0x78
 800c470:	f7fa fd6a 	bl	8006f48 <ST7032i_command>

	delay_us(27);
 800c474:	201b      	movs	r0, #27
 800c476:	f7fa f9e3 	bl	8006840 <delay_us>

	//Power/Icon/Contrast control
	ST7032i_command(0x56 | (40 >> 4 & 0x03));
 800c47a:	2056      	movs	r0, #86	; 0x56
 800c47c:	f7fa fd64 	bl	8006f48 <ST7032i_command>

	delay_us(27);
 800c480:	201b      	movs	r0, #27
 800c482:	f7fa f9dd 	bl	8006840 <delay_us>

	//Follower control
	ST7032i_command(0x6c);
 800c486:	206c      	movs	r0, #108	; 0x6c
 800c488:	f7fa fd5e 	bl	8006f48 <ST7032i_command>

	delay_ms(200);
 800c48c:	20c8      	movs	r0, #200	; 0xc8
 800c48e:	f7fa fa03 	bl	8006898 <delay_ms>

	//Function Set
	ST7032i_command(0x38);
 800c492:	2038      	movs	r0, #56	; 0x38
 800c494:	f7fa fd58 	bl	8006f48 <ST7032i_command>

	//Display control : on
	ST7032i_command(0x0c);
 800c498:	200c      	movs	r0, #12
 800c49a:	f7fa fd55 	bl	8006f48 <ST7032i_command>

	delay_us(27);
 800c49e:	201b      	movs	r0, #27
 800c4a0:	f7fa f9ce 	bl	8006840 <delay_us>

	//Clear
	ST7032i_command(0x01);
 800c4a4:	2001      	movs	r0, #1
 800c4a6:	f7fa fd4f 	bl	8006f48 <ST7032i_command>

	delay_ms(2);
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f7fa f9f4 	bl	8006898 <delay_ms>

	ST7032i_print("Hi friends!");
 800c4b0:	480f      	ldr	r0, [pc, #60]	; (800c4f0 <main+0x12c>)
 800c4b2:	f7fa fd6d 	bl	8006f90 <ST7032i_print>

	ST7032i_command(0x80 | 0x40);
 800c4b6:	20c0      	movs	r0, #192	; 0xc0
 800c4b8:	f7fa fd46 	bl	8006f48 <ST7032i_command>

	ST7032i_print("My World!");
 800c4bc:	480d      	ldr	r0, [pc, #52]	; (800c4f4 <main+0x130>)
 800c4be:	f7fa fd67 	bl	8006f90 <ST7032i_print>

//  cprintf("Done! Confirm a message is on LCD.");

	while (1) {
		//Clear
		ST7032i_command(0x80 | 0x40);
 800c4c2:	20c0      	movs	r0, #192	; 0xc0
 800c4c4:	f7fa fd40 	bl	8006f48 <ST7032i_command>
		ST7032i_print("        ");
 800c4c8:	480b      	ldr	r0, [pc, #44]	; (800c4f8 <main+0x134>)
 800c4ca:	f7fa fd61 	bl	8006f90 <ST7032i_print>
		ST7032i_command(0x80 | 0x40);
 800c4ce:	20c0      	movs	r0, #192	; 0xc0
 800c4d0:	f7fa fd3a 	bl	8006f48 <ST7032i_command>
		sprintf(tmp, (char *)"> %d", (int16_t)i);
 800c4d4:	b222      	sxth	r2, r4
 800c4d6:	4909      	ldr	r1, [pc, #36]	; (800c4fc <main+0x138>)
 800c4d8:	a802      	add	r0, sp, #8
 800c4da:	f7fa ffc1 	bl	8007460 <sprintf>
		ST7032i_print(tmp);
 800c4de:	a802      	add	r0, sp, #8
 800c4e0:	f7fa fd56 	bl	8006f90 <ST7032i_print>
		i++;
		delay_ms(100);
 800c4e4:	2064      	movs	r0, #100	; 0x64
		ST7032i_command(0x80 | 0x40);
		ST7032i_print("        ");
		ST7032i_command(0x80 | 0x40);
		sprintf(tmp, (char *)"> %d", (int16_t)i);
		ST7032i_print(tmp);
		i++;
 800c4e6:	3401      	adds	r4, #1
		delay_ms(100);
 800c4e8:	f7fa f9d6 	bl	8006898 <delay_ms>
 800c4ec:	e7e9      	b.n	800c4c2 <main+0xfe>
 800c4ee:	bf00      	nop
 800c4f0:	0800c6e8 	.word	0x0800c6e8
 800c4f4:	0800c6f4 	.word	0x0800c6f4
 800c4f8:	0800c700 	.word	0x0800c700
 800c4fc:	0800c70c 	.word	0x0800c70c

0800c500 <Reset_Handler>:
 800c500:	2100      	movs	r1, #0
 800c502:	e003      	b.n	800c50c <LoopCopyDataInit>

0800c504 <CopyDataInit>:
 800c504:	4b0a      	ldr	r3, [pc, #40]	; (800c530 <LoopFillZerobss+0x10>)
 800c506:	585b      	ldr	r3, [r3, r1]
 800c508:	5043      	str	r3, [r0, r1]
 800c50a:	3104      	adds	r1, #4

0800c50c <LoopCopyDataInit>:
 800c50c:	4809      	ldr	r0, [pc, #36]	; (800c534 <LoopFillZerobss+0x14>)
 800c50e:	4b0a      	ldr	r3, [pc, #40]	; (800c538 <LoopFillZerobss+0x18>)
 800c510:	1842      	adds	r2, r0, r1
 800c512:	429a      	cmp	r2, r3
 800c514:	d3f6      	bcc.n	800c504 <CopyDataInit>
 800c516:	4a09      	ldr	r2, [pc, #36]	; (800c53c <LoopFillZerobss+0x1c>)
 800c518:	e002      	b.n	800c520 <LoopFillZerobss>

0800c51a <FillZerobss>:
 800c51a:	2300      	movs	r3, #0
 800c51c:	f842 3b04 	str.w	r3, [r2], #4

0800c520 <LoopFillZerobss>:
 800c520:	4b07      	ldr	r3, [pc, #28]	; (800c540 <LoopFillZerobss+0x20>)
 800c522:	429a      	cmp	r2, r3
 800c524:	d3f9      	bcc.n	800c51a <FillZerobss>
 800c526:	f7fa fe33 	bl	8007190 <SystemInit>
 800c52a:	f7ff ff4b 	bl	800c3c4 <main>
 800c52e:	4770      	bx	lr
 800c530:	0800c79c 	.word	0x0800c79c
 800c534:	20000000 	.word	0x20000000
 800c538:	200009b4 	.word	0x200009b4
 800c53c:	200009b4 	.word	0x200009b4
 800c540:	2000102c 	.word	0x2000102c

0800c544 <ADC_IRQHandler>:
 800c544:	e7fe      	b.n	800c544 <ADC_IRQHandler>
	...

0800c548 <Welcome_Message>:
 800c548:	6e49 7469 6169 696c 657a 6120 646e 7020     Initialize and p
 800c558:	7475 6320 6168 6172 7463 7265 6f20 206e     ut character on 
 800c568:	5453 3037 3233 2069 434c 2e44 0a0d 0a0d     ST7032i LCD.....
 800c578:	0000 0000                                   ....

0800c57c <blanks.3927>:
 800c57c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0800c58c <zeroes.3928>:
 800c58c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0800c59c <_global_impure_ptr>:
 800c59c:	0100 2000                                   ... 

0800c5a0 <p05.2449>:
 800c5a0:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

0800c5b0 <__mprec_tens>:
 800c5b0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 800c5c0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 800c5d0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 800c5e0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 800c5f0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 800c600:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 800c610:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 800c620:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 800c630:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 800c640:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 800c650:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 800c660:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 800c670:	9db4 79d9 7843 44ea                         ...yCx.D

0800c678 <__mprec_tinytens>:
 800c678:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 800c688:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 800c698:	6f43 64ac 0628 0ac8                         Co.d(...

0800c6a0 <__mprec_bigtens>:
 800c6a0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 800c6b0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 800c6c0:	bf3c 7f73 4fdd 7515                         <.s..O.u

0800c6c8 <blanks.3871>:
 800c6c8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0800c6d8 <zeroes.3872>:
 800c6d8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 800c6e8:	6948 6620 6972 6e65 7364 0021 794d 5720     Hi friends!.My W
 800c6f8:	726f 646c 0021 0000 2020 2020 2020 2020     orld!...        
 800c708:	0000 0000 203e 6425 0000 0000 6548 7061     ....> %d....Heap
 800c718:	6120 646e 7320 6174 6b63 6320 6c6f 696c      and stack colli
 800c728:	6973 6e6f 000a 0000 7865 7469 0000 0000     sion....exit....
 800c738:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
 800c748:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 800c758:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 800c768:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
 800c778:	0030 0000 6e49 6966 696e 7974 0000 0000     0...Infinity....
 800c788:	614e 004e 0043 0000 4f50 4953 0058 0000     NaN.C...POSIX...
 800c798:	002e 0000                                   ....
