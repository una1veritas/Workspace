
AVRRTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800100  00800100  00000276  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000003e  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013c  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b6  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000013a  00000000  00000000  000004c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bb  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
            }time;

 time t;      
                                                        
int main(void)   // C_task means "main" is never called from another function
{                                
  90:	ff cf       	rjmp	.-2      	; 0x90 <main>

00000092 <not_leap>:

}  
 
char not_leap(void)      //check for leap year
{
    if (!(t.year%100))
  92:	20 91 05 01 	lds	r18, 0x0105
  96:	30 91 06 01 	lds	r19, 0x0106
  9a:	c9 01       	movw	r24, r18
  9c:	64 e6       	ldi	r22, 0x64	; 100
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__udivmodhi4>
  a4:	89 2b       	or	r24, r25
  a6:	31 f4       	brne	.+12     	; 0xb4 <not_leap+0x22>
        return (char)(t.year%400);
  a8:	c9 01       	movw	r24, r18
  aa:	60 e9       	ldi	r22, 0x90	; 144
  ac:	71 e0       	ldi	r23, 0x01	; 1
  ae:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <__udivmodhi4>
  b2:	08 95       	ret
    else
        return (char)(t.year%4);
  b4:	82 2f       	mov	r24, r18
  b6:	83 70       	andi	r24, 0x03	; 3
}         
  b8:	08 95       	ret

000000ba <__vector_16>:
        while(ASSR&0x07);     //Wait until TC0 is updated
		PORTB = 0;
    }            
}

ISR (TIMER0_OVF_vect) { // void counter(void) //overflow interrupt vector
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
//{ 
    
    if (++t.second==60)        //keep track of time, date, month, and year
  dc:	80 91 00 01 	lds	r24, 0x0100
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 00 01 	sts	0x0100, r24
  e6:	8c 33       	cpi	r24, 0x3C	; 60
  e8:	09 f0       	breq	.+2      	; 0xec <__vector_16+0x32>
  ea:	55 c0       	rjmp	.+170    	; 0x196 <__vector_16+0xdc>
    {
        t.second=0;
  ec:	10 92 00 01 	sts	0x0100, r1
        if (++t.minute==60) 
  f0:	80 91 01 01 	lds	r24, 0x0101
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 01 01 	sts	0x0101, r24
  fa:	8c 33       	cpi	r24, 0x3C	; 60
  fc:	09 f0       	breq	.+2      	; 0x100 <__vector_16+0x46>
  fe:	4b c0       	rjmp	.+150    	; 0x196 <__vector_16+0xdc>
        {
            t.minute=0;
 100:	10 92 01 01 	sts	0x0101, r1
            if (++t.hour==24)
 104:	80 91 02 01 	lds	r24, 0x0102
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	80 93 02 01 	sts	0x0102, r24
 10e:	88 31       	cpi	r24, 0x18	; 24
 110:	09 f0       	breq	.+2      	; 0x114 <__vector_16+0x5a>
 112:	41 c0       	rjmp	.+130    	; 0x196 <__vector_16+0xdc>
            {
                t.hour=0;
 114:	10 92 02 01 	sts	0x0102, r1
                if (++t.date==32)
 118:	80 91 03 01 	lds	r24, 0x0103
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 03 01 	sts	0x0103, r24
 122:	80 32       	cpi	r24, 0x20	; 32
 124:	19 f4       	brne	.+6      	; 0x12c <__vector_16+0x72>
                {
                    t.month++;
 126:	80 91 04 01 	lds	r24, 0x0104
 12a:	0c c0       	rjmp	.+24     	; 0x144 <__vector_16+0x8a>
                    t.date=1;
                }
                else if (t.date==31) 
 12c:	8f 31       	cpi	r24, 0x1F	; 31
 12e:	61 f4       	brne	.+24     	; 0x148 <__vector_16+0x8e>
                {                    
                    if ((t.month==4) || (t.month==6) || (t.month==9) || (t.month==11)) 
 130:	80 91 04 01 	lds	r24, 0x0104
 134:	84 30       	cpi	r24, 0x04	; 4
 136:	31 f0       	breq	.+12     	; 0x144 <__vector_16+0x8a>
 138:	86 30       	cpi	r24, 0x06	; 6
 13a:	21 f0       	breq	.+8      	; 0x144 <__vector_16+0x8a>
 13c:	89 30       	cpi	r24, 0x09	; 9
 13e:	11 f0       	breq	.+4      	; 0x144 <__vector_16+0x8a>
 140:	8b 30       	cpi	r24, 0x0B	; 11
 142:	c9 f4       	brne	.+50     	; 0x176 <__vector_16+0xbc>
                    {
                        t.month++;
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	12 c0       	rjmp	.+36     	; 0x16c <__vector_16+0xb2>
                        t.date=1;
                    }
                }
                else if (t.date==30)
 148:	8e 31       	cpi	r24, 0x1E	; 30
 14a:	29 f4       	brne	.+10     	; 0x156 <__vector_16+0x9c>
                {
                    if(t.month==2)
 14c:	80 91 04 01 	lds	r24, 0x0104
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	89 f4       	brne	.+34     	; 0x176 <__vector_16+0xbc>
 154:	0a c0       	rjmp	.+20     	; 0x16a <__vector_16+0xb0>
                    {
                       t.month++;
                       t.date=1;
                    }
                }              
                else if (t.date==29) 
 156:	8d 31       	cpi	r24, 0x1D	; 29
 158:	71 f4       	brne	.+28     	; 0x176 <__vector_16+0xbc>
                {
                    if((t.month==2) && (not_leap()))
 15a:	80 91 04 01 	lds	r24, 0x0104
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	51 f4       	brne	.+20     	; 0x176 <__vector_16+0xbc>
 162:	0e 94 49 00 	call	0x92	; 0x92 <not_leap>
 166:	88 23       	and	r24, r24
 168:	31 f0       	breq	.+12     	; 0x176 <__vector_16+0xbc>
                    {
                        t.month++;
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	80 93 04 01 	sts	0x0104, r24
                        t.date=1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 03 01 	sts	0x0103, r24
                    }                
                }                          
                if (t.month==13)
 176:	80 91 04 01 	lds	r24, 0x0104
 17a:	8d 30       	cpi	r24, 0x0D	; 13
 17c:	61 f4       	brne	.+24     	; 0x196 <__vector_16+0xdc>
                {
                    t.month=1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 04 01 	sts	0x0104, r24
                    t.year++;
 184:	80 91 05 01 	lds	r24, 0x0105
 188:	90 91 06 01 	lds	r25, 0x0106
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 06 01 	sts	0x0106, r25
 192:	80 93 05 01 	sts	0x0105, r24
                }
            }
        }
    }  
    PORTB=~(((t.second&0x01)|t.minute<<1)|t.hour<<7); 
 196:	80 91 01 01 	lds	r24, 0x0101
 19a:	88 0f       	add	r24, r24
 19c:	90 91 02 01 	lds	r25, 0x0102
 1a0:	97 95       	ror	r25
 1a2:	99 27       	eor	r25, r25
 1a4:	97 95       	ror	r25
 1a6:	98 2b       	or	r25, r24
 1a8:	80 91 00 01 	lds	r24, 0x0100
 1ac:	81 70       	andi	r24, 0x01	; 1
 1ae:	98 2b       	or	r25, r24
 1b0:	90 95       	com	r25
 1b2:	95 b9       	out	0x05, r25	; 5


}  
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__udivmodhi4>:
 1d6:	aa 1b       	sub	r26, r26
 1d8:	bb 1b       	sub	r27, r27
 1da:	51 e1       	ldi	r21, 0x11	; 17
 1dc:	07 c0       	rjmp	.+14     	; 0x1ec <__udivmodhi4_ep>

000001de <__udivmodhi4_loop>:
 1de:	aa 1f       	adc	r26, r26
 1e0:	bb 1f       	adc	r27, r27
 1e2:	a6 17       	cp	r26, r22
 1e4:	b7 07       	cpc	r27, r23
 1e6:	10 f0       	brcs	.+4      	; 0x1ec <__udivmodhi4_ep>
 1e8:	a6 1b       	sub	r26, r22
 1ea:	b7 0b       	sbc	r27, r23

000001ec <__udivmodhi4_ep>:
 1ec:	88 1f       	adc	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	5a 95       	dec	r21
 1f2:	a9 f7       	brne	.-22     	; 0x1de <__udivmodhi4_loop>
 1f4:	80 95       	com	r24
 1f6:	90 95       	com	r25
 1f8:	bc 01       	movw	r22, r24
 1fa:	cd 01       	movw	r24, r26
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
