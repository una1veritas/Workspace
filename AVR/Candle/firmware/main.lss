
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006b4  00000000  00000000  000000cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000082  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000035  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000114  00000000  00000000  00000857  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000092  00000000  00000000  0000096b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000013b  00000000  00000000  000009fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000097  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	13 d0       	rcall	.+38     	; 0x52 <main>
  2c:	23 c0       	rjmp	.+70     	; 0x74 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <delay_us>:
	//while(!(TIFR & 0x02));	
	
	
	for (y = 0; y < (100*x); y++);
	{
		asm volatile ("nop");
  30:	00 00       	nop
	}
		
	
}
  32:	08 95       	ret

00000034 <delay_ms>:

//General short delays
void delay_ms(uint16_t x)
{
  34:	0b c0       	rjmp	.+22     	; 0x4c <__SREG__+0xd>
  uint8_t y, z;
  for ( ; x > 0 ; x--){
  36:	20 e0       	ldi	r18, 0x00	; 0
	...
    for ( y = 0 ; y < 90 ; y++){
  44:	2f 5f       	subi	r18, 0xFF	; 255
  46:	2a 35       	cpi	r18, 0x5A	; 90
  48:	b9 f7       	brne	.-18     	; 0x38 <delay_ms+0x4>

//General short delays
void delay_ms(uint16_t x)
{
  uint8_t y, z;
  for ( ; x > 0 ; x--){
  4a:	01 97       	sbiw	r24, 0x01	; 1
  4c:	00 97       	sbiw	r24, 0x00	; 0
  4e:	99 f7       	brne	.-26     	; 0x36 <delay_ms+0x2>
      for ( z = 0 ; z < 6 ; z++){
        asm volatile ("nop");
      }
    }
  }
}
  50:	08 95       	ret

00000052 <main>:
int main (void)
{
	char a;
	int j;
	
	PORTB = 0;
  52:	18 ba       	out	0x18, r1	; 24
	DDRB = 0b00011100;//PB2 = blue, PB3 = green, PB4 = red
  54:	8c e1       	ldi	r24, 0x1C	; 28
  56:	87 bb       	out	0x17, r24	; 23
	//sei();
	
	while(1)
	{
		//PORTB = 0b00010000;
		PORTB |= 1<<GREEN; //green on
  58:	c3 9a       	sbi	0x18, 3	; 24
		delay_ms(400);
  5a:	80 e9       	ldi	r24, 0x90	; 144
  5c:	91 e0       	ldi	r25, 0x01	; 1
  5e:	ea df       	rcall	.-44     	; 0x34 <delay_ms>
		//for (j = 0; j < 250; j++);
		
		//while(1);
		
		//PORTB = 0;
		PORTB &= ~(1<<GREEN); //green off
  60:	c3 98       	cbi	0x18, 3	; 24
//		PORTB |= 1<<BLUE; //blue on
		//for (j = 0; j < 250; j++);
		delay_ms(400);
  62:	80 e9       	ldi	r24, 0x90	; 144
  64:	91 e0       	ldi	r25, 0x01	; 1
  66:	e6 df       	rcall	.-52     	; 0x34 <delay_ms>
		
		//PORTB = 0;
		PORTB &= ~(1<<BLUE); //blue off
  68:	c2 98       	cbi	0x18, 2	; 24
//		PORTB |= 1<<RED; //red on
		//for (j = 0; j < 500; j++);
		delay_ms(400);
  6a:	80 e9       	ldi	r24, 0x90	; 144
  6c:	91 e0       	ldi	r25, 0x01	; 1
  6e:	e2 df       	rcall	.-60     	; 0x34 <delay_ms>
		//PORTB = 0;
		PORTB &= ~(1<<RED); //red off
  70:	c4 98       	cbi	0x18, 4	; 24
  72:	f2 cf       	rjmp	.-28     	; 0x58 <main+0x6>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>
