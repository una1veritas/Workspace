/**
 * @file		dhcp.c
 * @brief 		waiting functions
 */

#ifndef _DHCP_H_
#define _DHCP_H_

#ifdef __cplusplus
extern "C" {
#endif

//#define DHCP_DEBUG

/* DHCP state machine. */
#define	DHCP_MAX_RETRY			3
#define	DHCP_WAIT_TIME			5

#define	DHCP_STATE_DISCOVER			1
#define	DHCP_STATE_REQUEST			2
#define	DHCP_STATE_LEASED			3
#define	DHCP_STATE_REREQUEST		4
#define	DHCP_STATE_RELEASE			5

#define DHCP_FLAGSBROADCAST		0x8000

/* DHCP message OP code */
#define DHCP_BOOTREQUEST		1
#define DHCP_BOOTREPLY			2

/* DHCP message type */
#define	DHCP_DISCOVER			1
#define DHCP_OFFER				2
#define	DHCP_REQUEST			3
#define	DHCP_DECLINE			4
#define	DHCP_ACK				5
#define DHCP_NAK				6
#define	DHCP_RELEASE			7
#define DHCP_INFORM				8

#define DHCP_HTYPE10MB			1
#define DHCP_HTYPE100MB			2

#define DHCP_HLENETHERNET		6
#define DHCP_HOPS				0
#define DHCP_SECS				0

#define DHCP_INITIAL_XID		0xDEADF00D // Initial XID value, incremented for each request.

#define MAGIC_COOKIE			0x63825363

#define DEFAULT_LEASETIME		0xffffffff	/**< infinite lease time */

#define DHCP_MAX_OPT			16

/**
 * @brief	DHCP option and value (cf. RFC-1533)
 */
enum
{
	padOption			=	0,
	subnetMask			=	1,
	timerOffset			=	2,
	routersOnSubnet		=	3,
	timeServer			=	4,
	nameServer			=	5,
	dns					=	6,
	logServer			=	7,
	cookieServer		=	8,
	lprServer			=	9,
	impressServer		=	10,
	resourceLocationServer	=	11,
	hostName			=	12,
	bootFileSize		=	13,
	meritDumpFile		=	14,
	domainName			=	15,
	swapServer			=	16,
	rootPath			=	17,
	extentionsPath		=	18,
	IPforwarding		=	19,
	nonLocalSourceRouting	=	20,
	policyFilter		=	21,
	maxDgramReasmSize	=	22,
	defaultIPTTL		=	23,
	pathMTUagingTimeout	=	24,
	pathMTUplateauTable	=	25,
	ifMTU				=	26,
	allSubnetsLocal		=	27,
	broadcastAddr		=	28,
	performMaskDiscovery	=	29,
	maskSupplier		=	30,
	performRouterDiscovery	=	31,
	routerSolicitationAddr	=	32,
	staticRoute			=	33,
	trailerEncapsulation	=	34,
	arpCacheTimeout		=	35,
	ethernetEncapsulation	=	36,
	tcpDefaultTTL		=	37,
	tcpKeepaliveInterval	=	38,
	tcpKeepaliveGarbage	=	39,
	nisDomainName		=	40,
	nisServers			=	41,
	ntpServers			=	42,
	vendorSpecificInfo	=	43,
	netBIOSnameServer	=	44,
	netBIOSdgramDistServer	=	45,
	netBIOSnodeType		=	46,
	netBIOSscope		=	47,
	xFontServer			=	48,
	xDisplayManager		=	49,
	dhcpRequestedIPaddr	=	50,
	dhcpIPaddrLeaseTime	=	51,
	dhcpOptionOverload	=	52,
	dhcpMessageType		=	53,
	dhcpServerIdentifier	=	54,
	dhcpParamRequest	=	55,
	dhcpMsg				=	56,
	dhcpMaxMsgSize		=	57,
	dhcpT1value			=	58,
	dhcpT2value			=	59,
	dhcpClassIdentifier	=	60,
	dhcpClientIdentifier	=	61,
	endOption			=	255
};


/**
 * @brief		for the DHCP message
 */
typedef struct _RIP_MSG
{
	uint8_t	op;
	uint8_t	htype;
	uint8_t	hlen;
	uint8_t	hops;
	uint32_t	xid;
	uint16_t	secs;
	uint16_t	flags;
	uint8_t	ciaddr[4];
	uint8_t	yiaddr[4];
	uint8_t	siaddr[4];
	uint8_t	giaddr[4];
	uint8_t	chaddr[16];
	uint8_t	sname[64];
	uint8_t	file[128];
	uint8_t	OPT[312];
}RIP_MSG;

void  init_dhcp_client(SOCKET s, void (*ip_update)(void),void (*ip_conflict)(void));	// Initialise the DHCP client
uint8_t init_dhcpc_ch(SOCKET s);						// Initialise the socket for DHCP client
uint8_t getIP_DHCPS(void);								// Get the network configuration from the DHCP server
void  check_DHCP_state(SOCKET s);						// Check the DHCP state


#ifdef __cplusplus
}
#endif


#endif	/* _DHCP_H_ */
