
stm32f4-i2c_lcd.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <delay_us>:
  * @brief  wait micro second
  * @param  wait_time : time to wait in micro second
  * @retval None
  */
void delay_us(uint16_t waittime)
{
 8000188:	b510      	push	{r4, lr}
 800018a:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 800018c:	2001      	movs	r0, #1
 800018e:	4601      	mov	r1, r0
 8000190:	f001 fb76 	bl	8001880 <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 1)-1;
 8000194:	4b11      	ldr	r3, [pc, #68]	; (80001dc <delay_us+0x54>)
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 8000196:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800019a:	4619      	mov	r1, r3
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMicro.TIM_Period = ((waittime+1) * 1)-1;
 800019c:	605c      	str	r4, [r3, #4]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMicro);
 800019e:	f001 fd85 	bl	8001cac <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 80001a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001a6:	2108      	movs	r1, #8
 80001a8:	f001 fe16 	bl	8001dd8 <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 80001ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001b0:	2102      	movs	r1, #2
 80001b2:	f001 fddd 	bl	8001d70 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 80001b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001ba:	2101      	movs	r1, #1
 80001bc:	f001 fe24 	bl	8001e08 <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 80001c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c4:	f001 fdd8 	bl	8001d78 <TIM_GetCounter>
 80001c8:	4601      	mov	r1, r0
 80001ca:	2800      	cmp	r0, #0
 80001cc:	d1f8      	bne.n	80001c0 <delay_us+0x38>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80001ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

}
 80001d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 80001d6:	f001 be17 	b.w	8001e08 <TIM_Cmd>
 80001da:	bf00      	nop
 80001dc:	20000000 	.word	0x20000000

080001e0 <delay_ms>:
  * @brief  wait millisecond
  * @param  wait_time : time to wait in millisecond
  * @retval None
  */
void delay_ms(uint16_t waittime)
{
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4604      	mov	r4, r0
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);
 80001e4:	2001      	movs	r0, #1
 80001e6:	4601      	mov	r1, r0
 80001e8:	f001 fb4a 	bl	8001880 <RCC_APB1PeriphClockCmd>

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 1)-1;
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <delay_ms+0x54>)
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 80001ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001f2:	f103 010c 	add.w	r1, r3, #12
{
  //Supply APB1 Clock
  RCC_APB1PeriphClockCmd(TIM_RCC , ENABLE);

  /* Time base configuration */
  TIM_TimeBaseStructureMili.TIM_Period = ((waittime+1) * 1)-1;
 80001f6:	611c      	str	r4, [r3, #16]
  TIM_TimeBaseInit(TIM_NUM, &TIM_TimeBaseStructureMili);
 80001f8:	f001 fd58 	bl	8001cac <TIM_TimeBaseInit>

  TIM_SelectOnePulseMode(TIM_NUM, TIM_OPMode_Single);
 80001fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000200:	2108      	movs	r1, #8
 8000202:	f001 fde9 	bl	8001dd8 <TIM_SelectOnePulseMode>

  TIM_SetCounter(TIM_NUM,2);
 8000206:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800020a:	2102      	movs	r1, #2
 800020c:	f001 fdb0 	bl	8001d70 <TIM_SetCounter>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, ENABLE);
 8000210:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000214:	2101      	movs	r1, #1
 8000216:	f001 fdf7 	bl	8001e08 <TIM_Cmd>

  while (TIM_GetCounter(TIM_NUM)){};
 800021a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800021e:	f001 fdab 	bl	8001d78 <TIM_GetCounter>
 8000222:	4601      	mov	r1, r0
 8000224:	2800      	cmp	r0, #0
 8000226:	d1f8      	bne.n	800021a <delay_ms+0x3a>

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8000228:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
}
 800022c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TIM_Cmd(TIM_NUM, ENABLE);

  while (TIM_GetCounter(TIM_NUM)){};

  /* TIM enable counter */
  TIM_Cmd(TIM_NUM, DISABLE);
 8000230:	f001 bdea 	b.w	8001e08 <TIM_Cmd>
 8000234:	20000000 	.word	0x20000000

08000238 <pinMode>:
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 8000238:	b5f0      	push	{r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800023a:	f240 0418 	movw	r4, #24
 800023e:	f3c0 2503 	ubfx	r5, r0, #8, #4
 8000242:	f2c2 0400 	movt	r4, #8192	; 0x2000
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 8000246:	b083      	sub	sp, #12
 8000248:	460f      	mov	r7, r1
 800024a:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800024c:	2101      	movs	r1, #1
 800024e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8000252:	f001 faeb 	bl	800182c <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000256:	eb04 0485 	add.w	r4, r4, r5, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800025a:	2301      	movs	r3, #1
 800025c:	f006 060f 	and.w	r6, r6, #15
 8000260:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000264:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 8000266:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000268:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800026c:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000270:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 8000272:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000274:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000276:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 8000278:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800027c:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 8000280:	f000 fe98 	bl	8000fb4 <GPIO_Init>
}
 8000284:	b003      	add	sp, #12
 8000286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000288 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <digitalWrite+0x28>)
 800028a:	f3c0 2203 	ubfx	r2, r0, #8, #4
 800028e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000292:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 8000296:	b929      	cbnz	r1, 80002a4 <digitalWrite+0x1c>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000298:	2101      	movs	r1, #1
 800029a:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800029c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800029e:	b289      	uxth	r1, r1
 80002a0:	f000 bf16 	b.w	80010d0 <GPIO_ResetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002a4:	2101      	movs	r1, #1
 80002a6:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80002a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80002aa:	b289      	uxth	r1, r1
 80002ac:	f000 bf0e 	b.w	80010cc <GPIO_SetBits>
 80002b0:	20000018 	.word	0x20000018

080002b4 <digitalRead>:
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 80002b4:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <digitalRead+0x44>)
 80002b8:	f3c0 2203 	ubfx	r2, r0, #8, #4
 80002bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002c0:	f000 010f 	and.w	r1, r0, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 80002c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002c6:	2301      	movs	r3, #1
 80002c8:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 80002cc:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002ce:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 80002d0:	fa11 f303 	lsls.w	r3, r1, r3
 80002d4:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d005      	beq.n	80002ea <digitalRead+0x36>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 80002de:	f000 fee1 	bl	80010a4 <GPIO_ReadInputDataBit>
 80002e2:	3000      	adds	r0, #0
 80002e4:	bf18      	it	ne
 80002e6:	2001      	movne	r0, #1
}
 80002e8:	bd08      	pop	{r3, pc}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
	if (mode == GPIO_Mode_OUT)
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 80002ea:	f000 fee5 	bl	80010b8 <GPIO_ReadOutputDataBit>
 80002ee:	3000      	adds	r0, #0
 80002f0:	bf18      	it	ne
 80002f2:	2001      	movne	r0, #1
 80002f4:	bd08      	pop	{r3, pc}
 80002f6:	bf00      	nop
 80002f8:	20000018 	.word	0x20000018

080002fc <PinPort>:
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
}

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 80002fc:	f240 0318 	movw	r3, #24
 8000300:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8000304:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000308:	eb03 0380 	add.w	r3, r3, r0, lsl #2
}
 800030c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800030e:	4770      	bx	lr

08000310 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000310:	2301      	movs	r3, #1
 8000312:	f000 000f 	and.w	r0, r0, #15
 8000316:	fa13 f000 	lsls.w	r0, r3, r0
}
 800031a:	b280      	uxth	r0, r0
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 8000320:	f000 000f 	and.w	r0, r0, #15
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop

08000328 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ( port == GPIOB ) {
 800032c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8000330:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8000334:	42b0      	cmp	r0, r6
uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000336:	b082      	sub	sp, #8
 8000338:	4604      	mov	r4, r0
 800033a:	460d      	mov	r5, r1
 800033c:	4617      	mov	r7, r2
 800033e:	4698      	mov	r8, r3
	if ( port == GPIOB ) {
 8000340:	d047      	beq.n	80003d2 <GPIOMode+0xaa>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	} else if ( port == GPIOC ) {
 8000342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000346:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800034a:	4298      	cmp	r0, r3
 800034c:	d046      	beq.n	80003dc <GPIOMode+0xb4>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	} else if ( port == GPIOD ) {
 800034e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000352:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000356:	4298      	cmp	r0, r3
 8000358:	d045      	beq.n	80003e6 <GPIOMode+0xbe>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	} else if ( port == GPIOE ) {
 800035a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800035e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000362:	4298      	cmp	r0, r3
 8000364:	d044      	beq.n	80003f0 <GPIOMode+0xc8>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
	} else if ( port == GPIOF ) {
 8000366:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800036a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800036e:	4298      	cmp	r0, r3
 8000370:	d043      	beq.n	80003fa <GPIOMode+0xd2>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
	} else if ( port == GPIOG ) {
 8000372:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000376:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800037a:	4298      	cmp	r0, r3
 800037c:	d042      	beq.n	8000404 <GPIOMode+0xdc>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	} else if ( port == GPIOH ) {
 800037e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000386:	4298      	cmp	r0, r3
 8000388:	d041      	beq.n	800040e <GPIOMode+0xe6>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
 800038a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800038e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000392:	4298      	cmp	r0, r3
 8000394:	d040      	beq.n	8000418 <GPIOMode+0xf0>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
 8000396:	2300      	movs	r3, #0
 8000398:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800039c:	4298      	cmp	r0, r3
 800039e:	d013      	beq.n	80003c8 <GPIOMode+0xa0>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80003a0:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 80003a4:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80003a6:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80003aa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 80003ae:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80003b2:	4620      	mov	r0, r4
 80003b4:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80003b6:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 80003ba:	f88d 8005 	strb.w	r8, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 80003be:	f000 fdf9 	bl	8000fb4 <GPIO_Init>
}
 80003c2:	b002      	add	sp, #8
 80003c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
	} else if ( port == GPIOA ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80003c8:	2001      	movs	r0, #1
 80003ca:	4601      	mov	r1, r0
 80003cc:	f001 fa2e 	bl	800182c <RCC_AHB1PeriphClockCmd>
 80003d0:	e7e6      	b.n	80003a0 <GPIOMode+0x78>
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
	if ( port == GPIOB ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80003d2:	2002      	movs	r0, #2
 80003d4:	2101      	movs	r1, #1
 80003d6:	f001 fa29 	bl	800182c <RCC_AHB1PeriphClockCmd>
 80003da:	e7e1      	b.n	80003a0 <GPIOMode+0x78>
	} else if ( port == GPIOC ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80003dc:	2004      	movs	r0, #4
 80003de:	2101      	movs	r1, #1
 80003e0:	f001 fa24 	bl	800182c <RCC_AHB1PeriphClockCmd>
 80003e4:	e7dc      	b.n	80003a0 <GPIOMode+0x78>
	} else if ( port == GPIOD ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80003e6:	2008      	movs	r0, #8
 80003e8:	2101      	movs	r1, #1
 80003ea:	f001 fa1f 	bl	800182c <RCC_AHB1PeriphClockCmd>
 80003ee:	e7d7      	b.n	80003a0 <GPIOMode+0x78>
	} else if ( port == GPIOE ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80003f0:	2010      	movs	r0, #16
 80003f2:	2101      	movs	r1, #1
 80003f4:	f001 fa1a 	bl	800182c <RCC_AHB1PeriphClockCmd>
 80003f8:	e7d2      	b.n	80003a0 <GPIOMode+0x78>
	} else if ( port == GPIOF ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80003fa:	2020      	movs	r0, #32
 80003fc:	2101      	movs	r1, #1
 80003fe:	f001 fa15 	bl	800182c <RCC_AHB1PeriphClockCmd>
 8000402:	e7cd      	b.n	80003a0 <GPIOMode+0x78>
	} else if ( port == GPIOG ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000404:	2040      	movs	r0, #64	; 0x40
 8000406:	2101      	movs	r1, #1
 8000408:	f001 fa10 	bl	800182c <RCC_AHB1PeriphClockCmd>
 800040c:	e7c8      	b.n	80003a0 <GPIOMode+0x78>
	} else if ( port == GPIOH ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800040e:	2080      	movs	r0, #128	; 0x80
 8000410:	2101      	movs	r1, #1
 8000412:	f001 fa0b 	bl	800182c <RCC_AHB1PeriphClockCmd>
 8000416:	e7c3      	b.n	80003a0 <GPIOMode+0x78>
	} else if ( port == GPIOI ) {
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000418:	f44f 7080 	mov.w	r0, #256	; 0x100
 800041c:	2101      	movs	r1, #1
 800041e:	f001 fa05 	bl	800182c <RCC_AHB1PeriphClockCmd>
 8000422:	e7bd      	b.n	80003a0 <GPIOMode+0x78>

08000424 <GPIOWrite>:
	GPIO_Init(port, &GPIO_InitStructure);
}


void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 8000424:	f000 be5c 	b.w	80010e0 <GPIO_Write>

08000428 <i2c_begin>:
 */

#include "stm32f4xx_rcc.h"
#include "i2c.h"

void i2c_begin(uint32_t clkspeed) {
 8000428:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 800042a:	2101      	movs	r1, #1
 */

#include "stm32f4xx_rcc.h"
#include "i2c.h"

void i2c_begin(uint32_t clkspeed) {
 800042c:	b087      	sub	sp, #28
 800042e:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000430:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000434:	f001 fa24 	bl	8001880 <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 8000438:	2002      	movs	r0, #2
 800043a:	2101      	movs	r1, #1
 800043c:	f001 f9f6 	bl	800182c <RCC_AHB1PeriphClockCmd>

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
 8000440:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000444:	2106      	movs	r1, #6
 8000446:	2204      	movs	r2, #4
 8000448:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800044c:	f000 fe4e 	bl	80010ec <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );
 8000450:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000454:	2109      	movs	r1, #9
 8000456:	2204      	movs	r2, #4
 8000458:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800045c:	f000 fe46 	bl	80010ec <GPIO_PinAFConfig>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000460:	f44f 6080 	mov.w	r0, #1024	; 0x400
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000464:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8000466:	2501      	movs	r5, #1

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 8000468:	f44f 7210 	mov.w	r2, #576	; 0x240
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800046c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000470:	a904      	add	r1, sp, #16
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000472:	f88d 3015 	strb.w	r3, [sp, #21]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000476:	f88d 3014 	strb.w	r3, [sp, #20]

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 800047a:	9204      	str	r2, [sp, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800047c:	f88d 5016 	strb.w	r5, [sp, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000480:	f88d 5017 	strb.w	r5, [sp, #23]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000484:	f000 fd96 	bl	8000fb4 <GPIO_Init>

//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

	switch (clkspeed) {
 8000488:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800048c:	f365 431f 	bfi	r3, r5, #16, #16
 8000490:	429c      	cmp	r4, r3
 8000492:	d00b      	beq.n	80004ac <i2c_begin+0x84>
 8000494:	f44f 53d4 	mov.w	r3, #6784	; 0x1a80
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000498:	f248 62a0 	movw	r2, #34464	; 0x86a0

//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

	switch (clkspeed) {
 800049c:	f2c0 0306 	movt	r3, #6
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 80004a0:	f365 421f 	bfi	r2, r5, #16, #16
 80004a4:	429c      	cmp	r4, r3
 80004a6:	bf0c      	ite	eq
 80004a8:	461c      	moveq	r4, r3
 80004aa:	4614      	movne	r4, r2
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80004ac:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80004b0:	a906      	add	r1, sp, #24
	default:
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 80004b2:	2300      	movs	r3, #0
 80004b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80004b8:	0428      	lsls	r0, r5, #16
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80004ba:	f64b 73ff 	movw	r3, #49151	; 0xbfff
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80004be:	f841 4d18 	str.w	r4, [r1, #-24]!
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80004c2:	f8ad 3006 	strh.w	r3, [sp, #6]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80004c6:	4669      	mov	r1, sp
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80004c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80004cc:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80004d0:	f8ad 300a 	strh.w	r3, [sp, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80004d4:	f8ad 500c 	strh.w	r5, [sp, #12]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80004d8:	f000 fe58 	bl	800118c <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 80004dc:	0428      	lsls	r0, r5, #16
 80004de:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
 80004e2:	2101      	movs	r1, #1
 80004e4:	f000 fed0 	bl	8001288 <I2C_Cmd>
}
 80004e8:	b007      	add	sp, #28
 80004ea:	bd30      	pop	{r4, r5, pc}

080004ec <i2c_transmit>:

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	4606      	mov	r6, r0
	uint16_t i;

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80004f0:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
	I2C_Init(I2C1, &I2C_InitStructure);
	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 80004f4:	460d      	mov	r5, r1
	uint16_t i;

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80004f6:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80004fa:	2101      	movs	r1, #1
	I2C_Init(I2C1, &I2C_InitStructure);
	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 80004fc:	4614      	mov	r4, r2
	uint16_t i;

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80004fe:	f000 fed1 	bl	80012a4 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 8000502:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000506:	2101      	movs	r1, #1
 8000508:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800050c:	f2c0 0103 	movt	r1, #3
 8000510:	f000 ffe4 	bl	80014dc <I2C_CheckEvent>
 8000514:	2800      	cmp	r0, #0
 8000516:	d0f4      	beq.n	8000502 <i2c_transmit+0x16>
		;
	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000518:	0071      	lsls	r1, r6, #1
 800051a:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800051e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000522:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000526:	2200      	movs	r2, #0
 8000528:	f000 fed8 	bl	80012dc <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
 800052c:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000530:	2182      	movs	r1, #130	; 0x82
 8000532:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000536:	f2c0 0107 	movt	r1, #7
 800053a:	f000 ffcf 	bl	80014dc <I2C_CheckEvent>
 800053e:	2800      	cmp	r0, #0
 8000540:	d0f4      	beq.n	800052c <i2c_transmit+0x40>
		;

	for (i = 0; i < length; i++) {
 8000542:	b1b4      	cbz	r4, 8000572 <i2c_transmit+0x86>
 8000544:	2600      	movs	r6, #0
		I2C_SendData(I2C1, data[i]);
 8000546:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 800054a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800054e:	5da9      	ldrb	r1, [r5, r6]
 8000550:	f000 ff5c 	bl	800140c <I2C_SendData>
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 8000554:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000558:	2184      	movs	r1, #132	; 0x84
 800055a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800055e:	f2c0 0107 	movt	r1, #7
 8000562:	f000 ffbb 	bl	80014dc <I2C_CheckEvent>
 8000566:	2800      	cmp	r0, #0
 8000568:	d0f4      	beq.n	8000554 <i2c_transmit+0x68>
 800056a:	3601      	adds	r6, #1
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;

	for (i = 0; i < length; i++) {
 800056c:	b2b3      	uxth	r3, r6
 800056e:	429c      	cmp	r4, r3
 8000570:	d8e9      	bhi.n	8000546 <i2c_transmit+0x5a>
		I2C_SendData(I2C1, data[i]);
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
	}
	I2C_GenerateSTOP(I2C1, ENABLE);
 8000572:	f44f 40a8 	mov.w	r0, #21504	; 0x5400
 8000576:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800057a:	2101      	movs	r1, #1
}
 800057c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		I2C_SendData(I2C1, data[i]);
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
	}
	I2C_GenerateSTOP(I2C1, ENABLE);
 8000580:	f000 be9e 	b.w	80012c0 <I2C_GenerateSTOP>

08000584 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 8000584:	f640 2310 	movw	r3, #2576	; 0xa10
 8000588:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	3201      	adds	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
}
 8000592:	4770      	bx	lr

08000594 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 8000594:	4b03      	ldr	r3, [pc, #12]	; (80005a4 <SysTick_delay+0x10>)
 8000596:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 8000598:	6819      	ldr	r1, [r3, #0]
 800059a:	1a89      	subs	r1, r1, r2
 800059c:	4281      	cmp	r1, r0
 800059e:	d3fb      	bcc.n	8000598 <SysTick_delay+0x4>
		;
}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000a10 	.word	0x20000a10

080005a8 <SysTick_Start>:

void SysTick_Start(void) {
 80005a8:	b500      	push	{lr}
 80005aa:	b085      	sub	sp, #20
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 80005ac:	4668      	mov	r0, sp
 80005ae:	f001 f8b9 	bl	8001724 <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80005b8:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80005bc:	fba3 2101 	umull	r2, r1, r3, r1
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80005c0:	f24e 0310 	movw	r3, #57360	; 0xe010
 80005c4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80005c8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80005cc:	0989      	lsrs	r1, r1, #6
 80005ce:	f2ce 0200 	movt	r2, #57344	; 0xe000
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80005d2:	3901      	subs	r1, #1
 80005d4:	6059      	str	r1, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80005d6:	21f0      	movs	r1, #240	; 0xf0
 80005d8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e0:	2207      	movs	r2, #7
 80005e2:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 80005e4:	b005      	add	sp, #20
 80005e6:	bd00      	pop	{pc}

080005e8 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 80005e8:	f640 2310 	movw	r3, #2576	; 0xa10
 80005ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005f0:	6818      	ldr	r0, [r3, #0]
}
 80005f2:	4770      	bx	lr

080005f4 <buffer_clear>:
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 80005fa:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 80005fe:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8000602:	4770      	bx	lr

08000604 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000604:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 800060c:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 8000610:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000614:	429a      	cmp	r2, r3
 8000616:	d001      	beq.n	800061c <buffer_is_full+0x10>
		return 1;
	}
	return 0;
 8000618:	2000      	movs	r0, #0
}
 800061a:	4770      	bx	lr

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 800061c:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (r->head == r->tail) && (r->count > 0) ) {
		return 1;
 8000620:	3000      	adds	r0, #0
 8000622:	bf18      	it	ne
 8000624:	2001      	movne	r0, #1
 8000626:	4770      	bx	lr

08000628 <buffer_enque>:
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000628:	4603      	mov	r3, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 800062a:	f8b0 0100 	ldrh.w	r0, [r0, #256]	; 0x100
		return 1;
	}
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 800062e:	b430      	push	{r4, r5}
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000630:	f9b3 4102 	ldrsh.w	r4, [r3, #258]	; 0x102
 8000634:	b202      	sxth	r2, r0
 8000636:	4294      	cmp	r4, r2
 8000638:	d013      	beq.n	8000662 <buffer_enque+0x3a>
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 800063a:	3001      	adds	r0, #1
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 800063c:	b200      	sxth	r0, r0
 800063e:	17c4      	asrs	r4, r0, #31
 8000640:	0e64      	lsrs	r4, r4, #25

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000642:	f8b3 5104 	ldrh.w	r5, [r3, #260]	; 0x104
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
 8000646:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	r->count++;
	r->head %= USART_BUFFER_SIZE;
 800064a:	1900      	adds	r0, r0, r4
 800064c:	f000 007f 	and.w	r0, r0, #127	; 0x7f

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000650:	1c6a      	adds	r2, r5, #1
	r->head %= USART_BUFFER_SIZE;
 8000652:	1b04      	subs	r4, r0, r4

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
	r->buf[r->head++] = w;
	r->count++;
 8000654:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000658:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	return w;
}
 800065c:	4608      	mov	r0, r1
 800065e:	bc30      	pop	{r4, r5}
 8000660:	4770      	bx	lr
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 8000662:	f8b3 4104 	ldrh.w	r4, [r3, #260]	; 0x104
 8000666:	2c00      	cmp	r4, #0
 8000668:	d0e7      	beq.n	800063a <buffer_enque+0x12>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
 800066a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800066e:	e7f5      	b.n	800065c <buffer_enque+0x34>

08000670 <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000670:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000674:	4603      	mov	r3, r0
 8000676:	b410      	push	{r4}
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
 8000678:	f64f 70ff 	movw	r0, #65535	; 0xffff
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
 800067c:	b90a      	cbnz	r2, 8000682 <buffer_deque+0x12>
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 800067e:	bc10      	pop	{r4}
 8000680:	4770      	bx	lr

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000682:	f8b3 0102 	ldrh.w	r0, [r3, #258]	; 0x102
 8000686:	1c44      	adds	r4, r0, #1
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000688:	b224      	sxth	r4, r4
 800068a:	17e1      	asrs	r1, r4, #31
 800068c:	0e49      	lsrs	r1, r1, #25
 800068e:	1864      	adds	r4, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 8000690:	b200      	sxth	r0, r0
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 8000692:	f004 047f 	and.w	r4, r4, #127	; 0x7f
uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
	r->count--;
 8000696:	3a01      	subs	r2, #1
	r->tail %= USART_BUFFER_SIZE;
 8000698:	1a61      	subs	r1, r4, r1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 800069a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	r->count--;
 800069e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 80006a2:	f8a3 1102 	strh.w	r1, [r3, #258]	; 0x102
 80006a6:	e7ea      	b.n	800067e <buffer_deque+0xe>

080006a8 <usart_begin>:
	return w;
}

void usart_begin(USARTSerial usx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 80006a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ac:	460e      	mov	r6, r1
 80006ae:	b08b      	sub	sp, #44	; 0x2c
 80006b0:	4615      	mov	r5, r2
 80006b2:	469b      	mov	fp, r3
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)

	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	switch(usx) {
 80006b4:	2804      	cmp	r0, #4
 80006b6:	f200 8094 	bhi.w	80007e2 <usart_begin+0x13a>
 80006ba:	e8df f010 	tbh	[pc, r0, lsl #1]
 80006be:	009e      	.short	0x009e
 80006c0:	00b600aa 	.word	0x00b600aa
 80006c4:	000500c3 	.word	0x000500c3
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
	break;
	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 80006c8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80006cc:	2101      	movs	r1, #1
 80006ce:	f001 f8d7 	bl	8001880 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
		break;
 80006d2:	f04f 0904 	mov.w	r9, #4
 80006d6:	2335      	movs	r3, #53	; 0x35
 80006d8:	9303      	str	r3, [sp, #12]
 80006da:	464f      	mov	r7, r9
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
	break;
	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
 80006dc:	f04f 0808 	mov.w	r8, #8
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		break;
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 80006e0:	4630      	mov	r0, r6
 80006e2:	f7ff fe0b 	bl	80002fc <PinPort>
 80006e6:	4682      	mov	sl, r0
 80006e8:	4630      	mov	r0, r6
 80006ea:	f7ff fe11 	bl	8000310 <PinBit>
 80006ee:	2202      	movs	r2, #2
 80006f0:	2400      	movs	r4, #0
 80006f2:	4601      	mov	r1, r0
 80006f4:	4613      	mov	r3, r2
 80006f6:	4650      	mov	r0, sl
 80006f8:	9400      	str	r4, [sp, #0]
 80006fa:	9401      	str	r4, [sp, #4]
 80006fc:	f7ff fe14 	bl	8000328 <GPIOMode>
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000700:	4628      	mov	r0, r5
 8000702:	f7ff fdfb 	bl	80002fc <PinPort>
 8000706:	4682      	mov	sl, r0
 8000708:	4628      	mov	r0, r5
 800070a:	f7ff fe01 	bl	8000310 <PinBit>
 800070e:	2202      	movs	r2, #2
 8000710:	4613      	mov	r3, r2
 8000712:	4601      	mov	r1, r0
 8000714:	4650      	mov	r0, sl
 8000716:	9400      	str	r4, [sp, #0]
 8000718:	9401      	str	r4, [sp, #4]
 800071a:	f7ff fe05 	bl	8000328 <GPIOMode>

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
 800071e:	4630      	mov	r0, r6
 8000720:	f7ff fdec 	bl	80002fc <PinPort>
 8000724:	4682      	mov	sl, r0
 8000726:	4630      	mov	r0, r6
 8000728:	f7ff fdfa 	bl	8000320 <PinSource>
 800072c:	4642      	mov	r2, r8
 800072e:	4601      	mov	r1, r0
 8000730:	4650      	mov	r0, sl
 8000732:	f000 fcdb 	bl	80010ec <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 8000736:	4628      	mov	r0, r5
 8000738:	f7ff fde0 	bl	80002fc <PinPort>
 800073c:	4682      	mov	sl, r0
 800073e:	4628      	mov	r0, r5
 8000740:	f7ff fdee 	bl	8000320 <PinSource>
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000744:	4e46      	ldr	r6, [pc, #280]	; (8000860 <usart_begin+0x1b8>)
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 8000746:	4642      	mov	r2, r8
 8000748:	4601      	mov	r1, r0
 800074a:	4650      	mov	r0, sl
 800074c:	f000 fcce 	bl	80010ec <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000750:	230c      	movs	r3, #12

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000752:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000756:	f8ad 301e 	strh.w	r3, [sp, #30]

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 800075a:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 800075c:	f8cd b014 	str.w	fp, [sp, #20]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000760:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000764:	f8ad 401a 	strh.w	r4, [sp, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000768:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 800076c:	f8ad 4020 	strh.w	r4, [sp, #32]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000770:	f002 f92a 	bl	80029c8 <USART_Init>

	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000774:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 8000778:	2201      	movs	r2, #1
 800077a:	f240 5125 	movw	r1, #1317	; 0x525
 800077e:	f002 fa8d 	bl	8002c9c <USART_ITConfig>
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
 8000782:	f240 7127 	movw	r1, #1831	; 0x727
 8000786:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
 800078a:	4622      	mov	r2, r4
 800078c:	f002 fa86 	bl	8002c9c <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000790:	9a03      	ldr	r2, [sp, #12]
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000792:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000796:	2501      	movs	r5, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000798:	a809      	add	r0, sp, #36	; 0x24
	USART_Init(usartx[usx], &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 800079a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 800079e:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 80007a2:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 80007a6:	f000 fb09 	bl	8000dbc <NVIC_Init>
	//
	buffer_clear(&rxring[usx]);
 80007aa:	f44f 7383 	mov.w	r3, #262	; 0x106
 80007ae:	fb03 f909 	mul.w	r9, r3, r9
	buffer_clear(&txring[usx]);
 80007b2:	4a2c      	ldr	r2, [pc, #176]	; (8000864 <usart_begin+0x1bc>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <usart_begin+0x1c0>)
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
 80007b6:	f856 0027 	ldr.w	r0, [r6, r7, lsl #2]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
 80007ba:	444b      	add	r3, r9
	buffer_clear(&txring[usx]);
 80007bc:	4491      	add	r9, r2
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
 80007be:	4629      	mov	r1, r5
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80007c0:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 80007c4:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 80007c8:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80007cc:	f8a9 4100 	strh.w	r4, [r9, #256]	; 0x100
	r->tail = 0;
 80007d0:	f8a9 4102 	strh.w	r4, [r9, #258]	; 0x102
	r->count = 0;
 80007d4:	f8a9 4104 	strh.w	r4, [r9, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
 80007d8:	f002 f986 	bl	8002ae8 <USART_Cmd>
}
 80007dc:	b00b      	add	sp, #44	; 0x2c
 80007de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		irq = UART5_IRQn;
		break;
	case USART6Serial:
	default:
		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 80007e2:	2020      	movs	r0, #32
 80007e4:	2101      	movs	r1, #1
 80007e6:	f001 f859 	bl	800189c <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
		break;
 80007ea:	f04f 0905 	mov.w	r9, #5
 80007ee:	2247      	movs	r2, #71	; 0x47
 80007f0:	9203      	str	r2, [sp, #12]
 80007f2:	464f      	mov	r7, r9
		break;
	case USART6Serial:
	default:
		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 80007f4:	f04f 0808 	mov.w	r8, #8
		irq = USART6_IRQn;
		break;
 80007f8:	e772      	b.n	80006e0 <usart_begin+0x38>
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

	switch(usx) {
	case USART1Serial:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80007fa:	2010      	movs	r0, #16
 80007fc:	2101      	movs	r1, #1
 80007fe:	f001 f84d 	bl	800189c <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
	break;
 8000802:	f04f 0900 	mov.w	r9, #0
 8000806:	2325      	movs	r3, #37	; 0x25
 8000808:	9303      	str	r3, [sp, #12]
 800080a:	464f      	mov	r7, r9
	IRQn_Type irq = USART1_IRQn;

	switch(usx) {
	case USART1Serial:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
 800080c:	f04f 0807 	mov.w	r8, #7
		irq = USART1_IRQn;
	break;
 8000810:	e766      	b.n	80006e0 <usart_begin+0x38>
	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000812:	2101      	movs	r1, #1
 8000814:	f44f 3000 	mov.w	r0, #131072	; 0x20000
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
	break;
 8000818:	4689      	mov	r9, r1
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
	break;
	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800081a:	f001 f831 	bl	8001880 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
	break;
 800081e:	2226      	movs	r2, #38	; 0x26
 8000820:	9203      	str	r2, [sp, #12]
 8000822:	464f      	mov	r7, r9
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
	break;
	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8000824:	f04f 0807 	mov.w	r8, #7
		irq = USART2_IRQn;
	break;
 8000828:	e75a      	b.n	80006e0 <usart_begin+0x38>
	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 800082a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800082e:	2101      	movs	r1, #1
 8000830:	f001 f826 	bl	8001880 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
	break;
 8000834:	f04f 0902 	mov.w	r9, #2
 8000838:	2327      	movs	r3, #39	; 0x27
 800083a:	9303      	str	r3, [sp, #12]
 800083c:	464f      	mov	r7, r9
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
	break;
	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
 800083e:	f04f 0807 	mov.w	r8, #7
		irq = USART3_IRQn;
	break;
 8000842:	e74d      	b.n	80006e0 <usart_begin+0x38>
	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000844:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000848:	2101      	movs	r1, #1
 800084a:	f001 f819 	bl	8001880 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
	break;
 800084e:	f04f 0903 	mov.w	r9, #3
 8000852:	2234      	movs	r2, #52	; 0x34
 8000854:	9203      	str	r2, [sp, #12]
 8000856:	464f      	mov	r7, r9
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
	break;
	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
 8000858:	f04f 0808 	mov.w	r8, #8
		irq = UART4_IRQn;
	break;
 800085c:	e740      	b.n	80006e0 <usart_begin+0x38>
 800085e:	bf00      	nop
 8000860:	2000008c 	.word	0x2000008c
 8000864:	20000a14 	.word	0x20000a14
 8000868:	20001038 	.word	0x20001038

0800086c <usart_bare_write>:
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(usartx[usx], ENABLE);
}

void usart_bare_write(USARTSerial usx, const uint16_t w) {
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	4d09      	ldr	r5, [pc, #36]	; (8000894 <usart_bare_write+0x28>)
 8000870:	4604      	mov	r4, r0
 8000872:	460e      	mov	r6, r1
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
 8000874:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	f002 fa2b 	bl	8002cd4 <USART_GetFlagStatus>
 800087e:	2800      	cmp	r0, #0
 8000880:	d0f8      	beq.n	8000874 <usart_bare_write+0x8>
	USART_SendData(usartx[usx], w) ;
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <usart_bare_write+0x28>)
 8000884:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000888:	4631      	mov	r1, r6
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 800088a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	USART_Cmd(usartx[usx], ENABLE);
}

void usart_bare_write(USARTSerial usx, const uint16_t w) {
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
	USART_SendData(usartx[usx], w) ;
 800088e:	f002 b95f 	b.w	8002b50 <USART_SendData>
 8000892:	bf00      	nop
 8000894:	2000008c 	.word	0x2000008c

08000898 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USARTSerial usx, const uint16_t w) {
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <usart_write+0x58>)
 800089c:	f44f 7483 	mov.w	r4, #262	; 0x106
 80008a0:	fb04 3400 	mla	r4, r4, r0, r3
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
	USART_SendData(usartx[usx], w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USARTSerial usx, const uint16_t w) {
 80008a4:	4605      	mov	r5, r0
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 80008a6:	f9b4 2100 	ldrsh.w	r2, [r4, #256]	; 0x100
 80008aa:	f9b4 3102 	ldrsh.w	r3, [r4, #258]	; 0x102
 80008ae:	429a      	cmp	r2, r3
	while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET) ;
	USART_SendData(usartx[usx], w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USARTSerial usx, const uint16_t w) {
 80008b0:	460f      	mov	r7, r1
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 80008b2:	d014      	beq.n	80008de <usart_write+0x46>

void usart_write(USARTSerial usx, const uint16_t w) {
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
 80008b4:	4e0f      	ldr	r6, [pc, #60]	; (80008f4 <usart_write+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80008bc:	f240 7127 	movw	r1, #1831	; 0x727
 80008c0:	f002 f9ec 	bl	8002c9c <USART_ITConfig>
	buffer_enque(&txring[usx], w);
 80008c4:	4639      	mov	r1, r7
 80008c6:	4620      	mov	r0, r4
 80008c8:	f7ff feae 	bl	8000628 <buffer_enque>
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
 80008cc:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80008d0:	f240 7127 	movw	r1, #1831	; 0x727
 80008d4:	2201      	movs	r2, #1
}
 80008d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
 80008da:	f002 b9df 	b.w	8002c9c <USART_ITConfig>
uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 80008de:	f8b4 3104 	ldrh.w	r3, [r4, #260]	; 0x104
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0e6      	beq.n	80008b4 <usart_write+0x1c>
}

void usart_write(USARTSerial usx, const uint16_t w) {
//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
 80008e6:	f240 3041 	movw	r0, #833	; 0x341
 80008ea:	f7ff fc4d 	bl	8000188 <delay_us>
 80008ee:	e7e1      	b.n	80008b4 <usart_write+0x1c>
 80008f0:	20000a14 	.word	0x20000a14
 80008f4:	2000008c 	.word	0x2000008c

080008f8 <usart_print>:
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
}

void usart_print(USARTSerial usx, const char * s) {
 80008f8:	b538      	push	{r3, r4, r5, lr}
 80008fa:	460c      	mov	r4, r1
	while (*s)
 80008fc:	7809      	ldrb	r1, [r1, #0]
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
}

void usart_print(USARTSerial usx, const char * s) {
 80008fe:	4605      	mov	r5, r0
	while (*s)
 8000900:	b131      	cbz	r1, 8000910 <usart_print+0x18>
		usart_write(usx, (uint16_t) *s++);
 8000902:	4628      	mov	r0, r5
 8000904:	f7ff ffc8 	bl	8000898 <usart_write>
	buffer_enque(&txring[usx], w);
	USART_ITConfig(usartx[usx], USART_IT_TXE, ENABLE);
}

void usart_print(USARTSerial usx, const char * s) {
	while (*s)
 8000908:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800090c:	2900      	cmp	r1, #0
 800090e:	d1f8      	bne.n	8000902 <usart_print+0xa>
 8000910:	bd38      	pop	{r3, r4, r5, pc}
 8000912:	bf00      	nop

08000914 <usart_bare_read>:
		usart_write(usx, (uint16_t) *s++);
}

uint16_t usart_bare_read(USARTSerial usx) {
	return USART_ReceiveData(usartx[usx]);
 8000914:	f240 038c 	movw	r3, #140	; 0x8c
 8000918:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800091c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000920:	f002 b91a 	b.w	8002b58 <USART_ReceiveData>

08000924 <usart_read>:
}

uint16_t usart_read(USARTSerial usx) {
 8000924:	b508      	push	{r3, lr}
	uint16_t w = buffer_deque(&rxring[usx]);
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <usart_read+0x1c>)
 8000928:	f44f 7283 	mov.w	r2, #262	; 0x106
 800092c:	fb02 3000 	mla	r0, r2, r0, r3
 8000930:	f7ff fe9e 	bl	8000670 <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
 8000934:	f64f 73ff 	movw	r3, #65535	; 0xffff
	return w;
}
 8000938:	4298      	cmp	r0, r3
 800093a:	bf08      	it	eq
 800093c:	2000      	moveq	r0, #0
 800093e:	bd08      	pop	{r3, pc}
 8000940:	20001038 	.word	0x20001038

08000944 <usart_flush>:

void usart_flush(USARTSerial usx) {
 8000944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 8000946:	4d2c      	ldr	r5, [pc, #176]	; (80009f8 <usart_flush+0xb4>)
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USARTSerial usx) {
 8000948:	4604      	mov	r4, r0
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 800094a:	2200      	movs	r2, #0
 800094c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8000950:	f240 5125 	movw	r1, #1317	; 0x525
 8000954:	f002 f9a2 	bl	8002c9c <USART_ITConfig>
	buffer_clear(&rxring[usx]);
 8000958:	f44f 7783 	mov.w	r7, #262	; 0x106
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <usart_flush+0xb8>)
	USART_ClearITPendingBit(usartx[usx], USART_IT_RXNE );
 800095e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
	return w;
}

void usart_flush(USARTSerial usx) {
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
 8000962:	fb07 f704 	mul.w	r7, r7, r4
 8000966:	18fb      	adds	r3, r7, r3
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000968:	2600      	movs	r6, #0
 800096a:	f8a3 6100 	strh.w	r6, [r3, #256]	; 0x100
	r->tail = 0;
 800096e:	f8a3 6102 	strh.w	r6, [r3, #258]	; 0x102
	r->count = 0;
 8000972:	f8a3 6104 	strh.w	r6, [r3, #260]	; 0x104
}

void usart_flush(USARTSerial usx) {
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(usartx[usx], USART_IT_RXNE );
 8000976:	f240 5125 	movw	r1, #1317	; 0x525
 800097a:	f002 f9d9 	bl	8002d30 <USART_ClearITPendingBit>
	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 800097e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000982:	f240 5125 	movw	r1, #1317	; 0x525
 8000986:	2201      	movs	r2, #1
 8000988:	f002 f988 	bl	8002c9c <USART_ITConfig>
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
 800098c:	4632      	mov	r2, r6
 800098e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8000992:	f240 7127 	movw	r1, #1831	; 0x727
 8000996:	f002 f981 	bl	8002c9c <USART_ITConfig>
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <usart_flush+0xbc>)
	while ( buffer_count(&txring[usx]) > 0 ) {
 800099c:	19df      	adds	r7, r3, r7
 800099e:	f8b7 6104 	ldrh.w	r6, [r7, #260]	; 0x104
 80009a2:	b1de      	cbz	r6, 80009dc <usart_flush+0x98>
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET);
 80009a4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	f002 f993 	bl	8002cd4 <USART_GetFlagStatus>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d0f8      	beq.n	80009a4 <usart_flush+0x60>
		USART_SendData(usartx[usx], buffer_deque(&txring[usx]));
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <usart_flush+0xb4>)
 80009b4:	4638      	mov	r0, r7
 80009b6:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 80009ba:	f7ff fe59 	bl	8000670 <buffer_deque>
 80009be:	4601      	mov	r1, r0
 80009c0:	4630      	mov	r0, r6
 80009c2:	f002 f8c5 	bl	8002b50 <USART_SendData>
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TC ) == RESET);
 80009c6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80009ca:	2140      	movs	r1, #64	; 0x40
 80009cc:	f002 f982 	bl	8002cd4 <USART_GetFlagStatus>
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d0f8      	beq.n	80009c6 <usart_flush+0x82>
	USART_ITConfig(usartx[usx], USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(usartx[usx], USART_IT_RXNE );
	USART_ITConfig(usartx[usx], USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(usartx[usx], USART_IT_TXE, DISABLE);
	while ( buffer_count(&txring[usx]) > 0 ) {
 80009d4:	f8b7 6104 	ldrh.w	r6, [r7, #260]	; 0x104
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d1e3      	bne.n	80009a4 <usart_flush+0x60>
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TXE ) == RESET);
		USART_SendData(usartx[usx], buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
 80009dc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80009e0:	f240 7127 	movw	r1, #1831	; 0x727
 80009e4:	f002 f9a4 	bl	8002d30 <USART_ClearITPendingBit>
};

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 80009e8:	f8a7 6100 	strh.w	r6, [r7, #256]	; 0x100
	r->tail = 0;
 80009ec:	f8a7 6102 	strh.w	r6, [r7, #258]	; 0x102
	r->count = 0;
 80009f0:	f8a7 6104 	strh.w	r6, [r7, #260]	; 0x104
		USART_SendData(usartx[usx], buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(usartx[usx], USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
	buffer_clear(&txring[usx]);
}
 80009f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000008c 	.word	0x2000008c
 80009fc:	20001038 	.word	0x20001038
 8000a00:	20000a14 	.word	0x20000a14

08000a04 <usart_peek>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <usart_peek+0x2c>)
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USARTSerial usx) {
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8000a06:	f44f 7283 	mov.w	r2, #262	; 0x106
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000a0a:	fb02 3200 	mla	r2, r2, r0, r3
	USART_ClearITPendingBit(usartx[usx], USART_IT_TXE );
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USARTSerial usx) {
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8000a0e:	f8b2 1104 	ldrh.w	r1, [r2, #260]	; 0x104
 8000a12:	b911      	cbnz	r1, 8000a1a <usart_peek+0x16>
		return rxring[usx].buf[rxring[usx].tail];
	return 0xffff;
 8000a14:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8000a18:	4770      	bx	lr
	buffer_clear(&txring[usx]);
}

uint16_t usart_peek(USARTSerial usx) {
	if ( ! buffer_count(&rxring[usx]) == 0 )
		return rxring[usx].buf[rxring[usx].tail];
 8000a1a:	f9b2 2102 	ldrsh.w	r2, [r2, #258]	; 0x102
 8000a1e:	eb00 1180 	add.w	r1, r0, r0, lsl #6
 8000a22:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8000a26:	1880      	adds	r0, r0, r2
 8000a28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20001038 	.word	0x20001038

08000a34 <usart_available>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000a34:	f241 0338 	movw	r3, #4152	; 0x1038
 8000a38:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a40:	fb02 3300 	mla	r3, r2, r0, r3
	return 0xffff;
}

uint16_t usart_available(USARTSerial usx) {
	return buffer_count(&rxring[usx]);
}
 8000a44:	f8b3 0104 	ldrh.w	r0, [r3, #260]	; 0x104
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <USART1_IRQHandler>:


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000a4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
}


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8000a50:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000a52:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000a56:	f240 5125 	movw	r1, #1317	; 0x525
 8000a5a:	f002 f945 	bl	8002ce8 <USART_GetITStatus>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d12b      	bne.n	8000aba <USART1_IRQHandler+0x6e>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8000a62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a66:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000a6a:	f240 7127 	movw	r1, #1831	; 0x727
 8000a6e:	f002 f93b 	bl	8002ce8 <USART_GetITStatus>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d020      	beq.n	8000ab8 <USART1_IRQHandler+0x6c>
		if (txring[USART1Serial].count == 0) {
 8000a76:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <USART1_IRQHandler+0x84>)
 8000a78:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000a7c:	b152      	cbz	r2, 8000a94 <USART1_IRQHandler+0x48>
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8000a7e:	f7ff fdf7 	bl	8000670 <buffer_deque>
 8000a82:	4601      	mov	r1, r0
 8000a84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a88:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 8000a8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8000a90:	f002 b85e 	b.w	8002b50 <USART_SendData>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8000a94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a98:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000a9c:	f240 7127 	movw	r1, #1831	; 0x727
 8000aa0:	f002 f8fc 	bl	8002c9c <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000aa4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000aa8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000aac:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}
 8000ab0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000ab4:	f002 b93c 	b.w	8002d30 <USART_ClearITPendingBit>
 8000ab8:	bd08      	pop	{r3, pc}

// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
 8000aba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000abe:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000ac2:	f002 f849 	bl	8002b58 <USART_ReceiveData>
 8000ac6:	4601      	mov	r1, r0
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <USART1_IRQHandler+0x88>)
 8000aca:	f7ff fdad 	bl	8000628 <buffer_enque>
 8000ace:	e7c8      	b.n	8000a62 <USART1_IRQHandler+0x16>
 8000ad0:	20000a14 	.word	0x20000a14
 8000ad4:	20001038 	.word	0x20001038

08000ad8 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000ad8:	f44f 4088 	mov.w	r0, #17408	; 0x4400
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}

void USART2_IRQHandler(void) {
 8000adc:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000ade:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000ae2:	f240 5125 	movw	r1, #1317	; 0x525
 8000ae6:	f002 f8ff 	bl	8002ce8 <USART_GetITStatus>
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d12d      	bne.n	8000b4a <USART2_IRQHandler+0x72>
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8000aee:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000af2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000af6:	f240 7127 	movw	r1, #1831	; 0x727
 8000afa:	f002 f8f5 	bl	8002ce8 <USART_GetITStatus>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d022      	beq.n	8000b48 <USART2_IRQHandler+0x70>
		if (txring[USART2Serial].count == 0) {
 8000b02:	4817      	ldr	r0, [pc, #92]	; (8000b60 <USART2_IRQHandler+0x88>)
 8000b04:	f8b0 220a 	ldrh.w	r2, [r0, #522]	; 0x20a
 8000b08:	b162      	cbz	r2, 8000b24 <USART2_IRQHandler+0x4c>
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8000b0a:	f500 7083 	add.w	r0, r0, #262	; 0x106
 8000b0e:	f7ff fdaf 	bl	8000670 <buffer_deque>
 8000b12:	4601      	mov	r1, r0
 8000b14:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000b18:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8000b1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8000b20:	f002 b816 	b.w	8002b50 <USART_SendData>
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8000b24:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000b28:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b2c:	f240 7127 	movw	r1, #1831	; 0x727
 8000b30:	f002 f8b4 	bl	8002c9c <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000b34:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000b38:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b3c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}
 8000b40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000b44:	f002 b8f4 	b.w	8002d30 <USART_ClearITPendingBit>
 8000b48:	bd08      	pop	{r3, pc}
	}
}

void USART2_IRQHandler(void) {
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
 8000b4a:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8000b4e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b52:	f002 f801 	bl	8002b58 <USART_ReceiveData>
 8000b56:	4601      	mov	r1, r0
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <USART2_IRQHandler+0x8c>)
 8000b5a:	f7ff fd65 	bl	8000628 <buffer_enque>
 8000b5e:	e7c6      	b.n	8000aee <USART2_IRQHandler+0x16>
 8000b60:	20000a14 	.word	0x20000a14
 8000b64:	2000113e 	.word	0x2000113e

08000b68 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000b68:	f44f 4090 	mov.w	r0, #18432	; 0x4800
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}

void USART3_IRQHandler(void) {
 8000b6c:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000b6e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b72:	f240 5125 	movw	r1, #1317	; 0x525
 8000b76:	f002 f8b7 	bl	8002ce8 <USART_GetITStatus>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d12d      	bne.n	8000bda <USART3_IRQHandler+0x72>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000b7e:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000b82:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000b86:	f240 7127 	movw	r1, #1831	; 0x727
 8000b8a:	f002 f8ad 	bl	8002ce8 <USART_GetITStatus>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d022      	beq.n	8000bd8 <USART3_IRQHandler+0x70>
		if (txring[USART3Serial].count == 0) {
 8000b92:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <USART3_IRQHandler+0x88>)
 8000b94:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 8000b98:	b162      	cbz	r2, 8000bb4 <USART3_IRQHandler+0x4c>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8000b9a:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8000b9e:	f7ff fd67 	bl	8000670 <buffer_deque>
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000ba8:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8000bac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8000bb0:	f001 bfce 	b.w	8002b50 <USART_SendData>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000bb4:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000bb8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000bbc:	f240 7127 	movw	r1, #1831	; 0x727
 8000bc0:	f002 f86c 	bl	8002c9c <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000bc4:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000bc8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000bcc:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}
 8000bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000bd4:	f002 b8ac 	b.w	8002d30 <USART_ClearITPendingBit>
 8000bd8:	bd08      	pop	{r3, pc}
	}
}

void USART3_IRQHandler(void) {
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
 8000bda:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000bde:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000be2:	f001 ffb9 	bl	8002b58 <USART_ReceiveData>
 8000be6:	4601      	mov	r1, r0
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <USART3_IRQHandler+0x8c>)
 8000bea:	f7ff fd1d 	bl	8000628 <buffer_enque>
 8000bee:	e7c6      	b.n	8000b7e <USART3_IRQHandler+0x16>
 8000bf0:	20000a14 	.word	0x20000a14
 8000bf4:	20001244 	.word	0x20001244

08000bf8 <UART4_IRQHandler>:
		}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8000bf8:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}

void UART4_IRQHandler(void) {
 8000bfc:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8000bfe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c02:	f240 5125 	movw	r1, #1317	; 0x525
 8000c06:	f002 f86f 	bl	8002ce8 <USART_GetITStatus>
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d12d      	bne.n	8000c6a <UART4_IRQHandler+0x72>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 8000c0e:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8000c12:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c16:	f240 7127 	movw	r1, #1831	; 0x727
 8000c1a:	f002 f865 	bl	8002ce8 <USART_GetITStatus>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d022      	beq.n	8000c68 <UART4_IRQHandler+0x70>
		if (txring[UART4Serial].count == 0) {
 8000c22:	4817      	ldr	r0, [pc, #92]	; (8000c80 <UART4_IRQHandler+0x88>)
 8000c24:	f8b0 2416 	ldrh.w	r2, [r0, #1046]	; 0x416
 8000c28:	b162      	cbz	r2, 8000c44 <UART4_IRQHandler+0x4c>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8000c2a:	f200 3012 	addw	r0, r0, #786	; 0x312
 8000c2e:	f7ff fd1f 	bl	8000670 <buffer_deque>
 8000c32:	4601      	mov	r1, r0
 8000c34:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8000c38:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8000c3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8000c40:	f001 bf86 	b.w	8002b50 <USART_SendData>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8000c44:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8000c48:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c4c:	f240 7127 	movw	r1, #1831	; 0x727
 8000c50:	f002 f824 	bl	8002c9c <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000c54:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8000c58:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c5c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}
 8000c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000c64:	f002 b864 	b.w	8002d30 <USART_ClearITPendingBit>
 8000c68:	bd08      	pop	{r3, pc}
	}
}

void UART4_IRQHandler(void) {
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
 8000c6a:	f44f 4098 	mov.w	r0, #19456	; 0x4c00
 8000c6e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c72:	f001 ff71 	bl	8002b58 <USART_ReceiveData>
 8000c76:	4601      	mov	r1, r0
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <UART4_IRQHandler+0x8c>)
 8000c7a:	f7ff fcd5 	bl	8000628 <buffer_enque>
 8000c7e:	e7c6      	b.n	8000c0e <UART4_IRQHandler+0x16>
 8000c80:	20000a14 	.word	0x20000a14
 8000c84:	2000134a 	.word	0x2000134a

08000c88 <UART5_IRQHandler>:
		}
	}
}

void UART5_IRQHandler(void) {
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 8000c88:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}

void UART5_IRQHandler(void) {
 8000c8c:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 8000c8e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000c92:	f240 5125 	movw	r1, #1317	; 0x525
 8000c96:	f002 f827 	bl	8002ce8 <USART_GetITStatus>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d12d      	bne.n	8000cfa <UART5_IRQHandler+0x72>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000c9e:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8000ca2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000ca6:	f240 7127 	movw	r1, #1831	; 0x727
 8000caa:	f002 f81d 	bl	8002ce8 <USART_GetITStatus>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	d022      	beq.n	8000cf8 <UART5_IRQHandler+0x70>
		if (txring[UART5Serial].count == 0) {
 8000cb2:	4817      	ldr	r0, [pc, #92]	; (8000d10 <UART5_IRQHandler+0x88>)
 8000cb4:	f8b0 251c 	ldrh.w	r2, [r0, #1308]	; 0x51c
 8000cb8:	b162      	cbz	r2, 8000cd4 <UART5_IRQHandler+0x4c>
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 8000cba:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 8000cbe:	f7ff fcd7 	bl	8000670 <buffer_deque>
 8000cc2:	4601      	mov	r1, r0
 8000cc4:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8000cc8:	f2c4 0000 	movt	r0, #16384	; 0x4000
		}
	}
}
 8000ccc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 8000cd0:	f001 bf3e 	b.w	8002b50 <USART_SendData>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
 8000cd4:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8000cd8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000cdc:	f240 7127 	movw	r1, #1831	; 0x727
 8000ce0:	f001 ffdc 	bl	8002c9c <USART_ITConfig>
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 8000ce4:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8000ce8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000cec:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}
 8000cf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 8000cf4:	f002 b81c 	b.w	8002d30 <USART_ClearITPendingBit>
 8000cf8:	bd08      	pop	{r3, pc}
	}
}

void UART5_IRQHandler(void) {
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
 8000cfa:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8000cfe:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000d02:	f001 ff29 	bl	8002b58 <USART_ReceiveData>
 8000d06:	4601      	mov	r1, r0
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <UART5_IRQHandler+0x8c>)
 8000d0a:	f7ff fc8d 	bl	8000628 <buffer_enque>
 8000d0e:	e7c6      	b.n	8000c9e <UART5_IRQHandler+0x16>
 8000d10:	20000a14 	.word	0x20000a14
 8000d14:	20001450 	.word	0x20001450

08000d18 <USART6_IRQHandler>:
		}
	}
}

void USART6_IRQHandler(void) {
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 8000d18:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}

void USART6_IRQHandler(void) {
 8000d1c:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 8000d1e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000d22:	f240 5125 	movw	r1, #1317	; 0x525
 8000d26:	f001 ffdf 	bl	8002ce8 <USART_GetITStatus>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d12d      	bne.n	8000d8a <USART6_IRQHandler+0x72>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
 8000d2e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d32:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000d36:	f240 7127 	movw	r1, #1831	; 0x727
 8000d3a:	f001 ffd5 	bl	8002ce8 <USART_GetITStatus>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	d022      	beq.n	8000d88 <USART6_IRQHandler+0x70>
		if (txring[USART6Serial].count == 0) {
 8000d42:	4817      	ldr	r0, [pc, #92]	; (8000da0 <USART6_IRQHandler+0x88>)
 8000d44:	f8b0 2622 	ldrh.w	r2, [r0, #1570]	; 0x622
 8000d48:	b162      	cbz	r2, 8000d64 <USART6_IRQHandler+0x4c>
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 8000d4a:	f200 501e 	addw	r0, r0, #1310	; 0x51e
 8000d4e:	f7ff fc8f 	bl	8000670 <buffer_deque>
 8000d52:	4601      	mov	r1, r0
 8000d54:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d58:	f2c4 0001 	movt	r0, #16385	; 0x4001
		}
	}
}
 8000d5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 8000d60:	f001 bef6 	b.w	8002b50 <USART_SendData>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
 8000d64:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d68:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000d6c:	f240 7127 	movw	r1, #1831	; 0x727
 8000d70:	f001 ff94 	bl	8002c9c <USART_ITConfig>
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 8000d74:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d78:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000d7c:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
		}
	}
}
 8000d80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 8000d84:	f001 bfd4 	b.w	8002d30 <USART_ClearITPendingBit>
 8000d88:	bd08      	pop	{r3, pc}
	}
}

void USART6_IRQHandler(void) {
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
 8000d8a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d8e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000d92:	f001 fee1 	bl	8002b58 <USART_ReceiveData>
 8000d96:	4601      	mov	r1, r0
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <USART6_IRQHandler+0x8c>)
 8000d9a:	f7ff fc45 	bl	8000628 <buffer_enque>
 8000d9e:	e7c6      	b.n	8000d2e <USART6_IRQHandler+0x16>
 8000da0:	20000a14 	.word	0x20000a14
 8000da4:	20001556 	.word	0x20001556

08000da8 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000da8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000dac:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000db0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000db4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000db8:	60d8      	str	r0, [r3, #12]
}
 8000dba:	4770      	bx	lr

08000dbc <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000dbc:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000dbe:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000dc0:	b97b      	cbnz	r3, 8000de2 <NVIC_Init+0x26>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dc2:	7802      	ldrb	r2, [r0, #0]
 8000dc4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000dc8:	0951      	lsrs	r1, r2, #5
 8000dca:	f2ce 0300 	movt	r3, #57344	; 0xe000
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000dce:	f002 021f 	and.w	r2, r2, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dd2:	3120      	adds	r1, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa10 f202 	lsls.w	r2, r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000dda:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000dde:	bc30      	pop	{r4, r5}
 8000de0:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000de2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000de6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000dea:	7845      	ldrb	r5, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000dec:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000dee:	7884      	ldrb	r4, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000df0:	7803      	ldrb	r3, [r0, #0]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000df2:	43d2      	mvns	r2, r2
 8000df4:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 8000df8:	f1c2 0104 	rsb	r1, r2, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000dfc:	b2c9      	uxtb	r1, r1
 8000dfe:	fa15 f101 	lsls.w	r1, r5, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8000e02:	250f      	movs	r5, #15
 8000e04:	fa55 f202 	asrs.w	r2, r5, r2

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000e08:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000e0a:	4022      	ands	r2, r4
 8000e0c:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000e0e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000e12:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000e1a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e1e:	7802      	ldrb	r2, [r0, #0]
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000e20:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e24:	0951      	lsrs	r1, r2, #5
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000e26:	f2ce 0300 	movt	r3, #57344	; 0xe000
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e2a:	f002 021f 	and.w	r2, r2, #31
 8000e2e:	2001      	movs	r0, #1
 8000e30:	fa10 f202 	lsls.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e34:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8000e38:	e7d1      	b.n	8000dde <NVIC_Init+0x22>
 8000e3a:	bf00      	nop

08000e3c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8000e3c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8000e40:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000e44:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8000e48:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e4c:	4301      	orrs	r1, r0
 8000e4e:	6099      	str	r1, [r3, #8]
}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000e54:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000e58:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e5c:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000e5e:	b919      	cbnz	r1, 8000e68 <NVIC_SystemLPConfig+0x14>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000e60:	ea22 0000 	bic.w	r0, r2, r0
 8000e64:	6118      	str	r0, [r3, #16]
 8000e66:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000e68:	4310      	orrs	r0, r2
 8000e6a:	6118      	str	r0, [r3, #16]
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000e70:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000e74:	f2ce 0300 	movt	r3, #57344	; 0xe000
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000e78:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	bf0c      	ite	eq
 8000e7e:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000e82:	f022 0204 	bicne.w	r2, r2, #4
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000e8c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e94:	4298      	cmp	r0, r3
 8000e96:	d03c      	beq.n	8000f12 <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ea0:	4298      	cmp	r0, r3
 8000ea2:	d040      	beq.n	8000f26 <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000ea4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ea8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eac:	4298      	cmp	r0, r3
 8000eae:	d044      	beq.n	8000f3a <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000eb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000eb8:	4298      	cmp	r0, r3
 8000eba:	d048      	beq.n	8000f4e <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8000ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ec4:	4298      	cmp	r0, r3
 8000ec6:	d04c      	beq.n	8000f62 <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000ec8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ecc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ed0:	4298      	cmp	r0, r3
 8000ed2:	d050      	beq.n	8000f76 <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8000ed4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ed8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000edc:	4298      	cmp	r0, r3
 8000ede:	d054      	beq.n	8000f8a <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8000ee0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ee4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ee8:	4298      	cmp	r0, r3
 8000eea:	d058      	beq.n	8000f9e <GPIO_DeInit+0x112>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOI)
 8000eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ef4:	4298      	cmp	r0, r3
 8000ef6:	d000      	beq.n	8000efa <GPIO_DeInit+0x6e>
 8000ef8:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000efa:	2101      	movs	r1, #1
 8000efc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f00:	f000 fcda 	bl	80018b8 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000f04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f08:	2100      	movs	r1, #0
    }
  }
}
 8000f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000f0e:	f000 bcd3 	b.w	80018b8 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000f12:	2001      	movs	r0, #1
 8000f14:	4601      	mov	r1, r0
 8000f16:	f000 fccf 	bl	80018b8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000f22:	f000 bcc9 	b.w	80018b8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000f26:	2002      	movs	r0, #2
 8000f28:	2101      	movs	r1, #1
 8000f2a:	f000 fcc5 	bl	80018b8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000f2e:	2002      	movs	r0, #2
 8000f30:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000f36:	f000 bcbf 	b.w	80018b8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000f3a:	2004      	movs	r0, #4
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	f000 fcbb 	bl	80018b8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000f42:	2004      	movs	r0, #4
 8000f44:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000f46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000f4a:	f000 bcb5 	b.w	80018b8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000f4e:	2008      	movs	r0, #8
 8000f50:	2101      	movs	r1, #1
 8000f52:	f000 fcb1 	bl	80018b8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000f56:	2008      	movs	r0, #8
 8000f58:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000f5e:	f000 bcab 	b.w	80018b8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000f62:	2010      	movs	r0, #16
 8000f64:	2101      	movs	r1, #1
 8000f66:	f000 fca7 	bl	80018b8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000f6a:	2010      	movs	r0, #16
 8000f6c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000f72:	f000 bca1 	b.w	80018b8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000f76:	2020      	movs	r0, #32
 8000f78:	2101      	movs	r1, #1
 8000f7a:	f000 fc9d 	bl	80018b8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000f7e:	2020      	movs	r0, #32
 8000f80:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000f82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000f86:	f000 bc97 	b.w	80018b8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000f8a:	2040      	movs	r0, #64	; 0x40
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	f000 fc93 	bl	80018b8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000f92:	2040      	movs	r0, #64	; 0x40
 8000f94:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000f96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000f9a:	f000 bc8d 	b.w	80018b8 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000f9e:	2080      	movs	r0, #128	; 0x80
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	f000 fc89 	bl	80018b8 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000fa6:	2080      	movs	r0, #128	; 0x80
 8000fa8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 8000faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000fae:	f000 bc83 	b.w	80018b8 <RCC_AHB1PeriphResetCmd>
 8000fb2:	bf00      	nop

08000fb4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fba:	680a      	ldr	r2, [r1, #0]
 8000fbc:	461c      	mov	r4, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000fbe:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fc0:	f04f 0803 	mov.w	r8, #3
 8000fc4:	e003      	b.n	8000fce <GPIO_Init+0x1a>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fc6:	3401      	adds	r4, #1
 8000fc8:	3302      	adds	r3, #2
 8000fca:	2c10      	cmp	r4, #16
 8000fcc:	d02b      	beq.n	8001026 <GPIO_Init+0x72>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000fce:	fa17 f504 	lsls.w	r5, r7, r4
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000fd2:	ea05 0602 	and.w	r6, r5, r2

    if (currentpin == pos)
 8000fd6:	42ae      	cmp	r6, r5
 8000fd8:	d1f5      	bne.n	8000fc6 <GPIO_Init+0x12>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fda:	f8d0 9000 	ldr.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000fde:	f891 c004 	ldrb.w	ip, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fe2:	fa08 f503 	lsl.w	r5, r8, r3
 8000fe6:	43ed      	mvns	r5, r5
 8000fe8:	ea05 0909 	and.w	r9, r5, r9
 8000fec:	f8c0 9000 	str.w	r9, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ff0:	f8d0 9000 	ldr.w	r9, [r0]
 8000ff4:	fa0c fa03 	lsl.w	sl, ip, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ff8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ffc:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001000:	f1bc 0f01 	cmp.w	ip, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001004:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001008:	d910      	bls.n	800102c <GPIO_Init+0x78>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800100a:	68c6      	ldr	r6, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800100c:	f891 c007 	ldrb.w	ip, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001010:	4035      	ands	r5, r6
 8001012:	60c5      	str	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001014:	68c6      	ldr	r6, [r0, #12]
 8001016:	fa0c f503 	lsl.w	r5, ip, r3
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800101a:	3401      	adds	r4, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800101c:	4335      	orrs	r5, r6
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800101e:	3302      	adds	r3, #2
 8001020:	2c10      	cmp	r4, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001022:	60c5      	str	r5, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001024:	d1d3      	bne.n	8000fce <GPIO_Init+0x1a>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001026:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800102a:	4770      	bx	lr
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800102c:	f8d0 a008 	ldr.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001030:	f891 9005 	ldrb.w	r9, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001034:	f891 c006 	ldrb.w	ip, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001038:	ea05 0a0a 	and.w	sl, r5, sl
 800103c:	f8c0 a008 	str.w	sl, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001040:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001044:	fa09 f903 	lsl.w	r9, r9, r3
 8001048:	ea49 090a 	orr.w	r9, r9, sl
 800104c:	f8c0 9008 	str.w	r9, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001050:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001054:	ea29 0606 	bic.w	r6, r9, r6
 8001058:	6046      	str	r6, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800105a:	6846      	ldr	r6, [r0, #4]
 800105c:	fa0c fc04 	lsl.w	ip, ip, r4
 8001060:	fa1f fc8c 	uxth.w	ip, ip
 8001064:	ea4c 0606 	orr.w	r6, ip, r6
 8001068:	6046      	str	r6, [r0, #4]
 800106a:	e7ce      	b.n	800100a <GPIO_Init+0x56>

0800106c <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800106c:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800106e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001072:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8001074:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001076:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001078:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800107a:	71c3      	strb	r3, [r0, #7]
}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001080:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001086:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8001088:	9b01      	ldr	r3, [sp, #4]
 800108a:	430b      	orrs	r3, r1
 800108c:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800108e:	9b01      	ldr	r3, [sp, #4]
 8001090:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001092:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001094:	9b01      	ldr	r3, [sp, #4]
 8001096:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001098:	69c3      	ldr	r3, [r0, #28]
 800109a:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800109c:	69c3      	ldr	r3, [r0, #28]
 800109e:	9301      	str	r3, [sp, #4]
}
 80010a0:	b002      	add	sp, #8
 80010a2:	4770      	bx	lr

080010a4 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80010a4:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 80010a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80010a8:	bf0c      	ite	eq
 80010aa:	2000      	moveq	r0, #0
 80010ac:	2001      	movne	r0, #1
 80010ae:	4770      	bx	lr

080010b0 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 80010b0:	6900      	ldr	r0, [r0, #16]
}
 80010b2:	b280      	uxth	r0, r0
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80010b8:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 80010ba:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 80010bc:	bf0c      	ite	eq
 80010be:	2000      	moveq	r0, #0
 80010c0:	2001      	movne	r0, #1
 80010c2:	4770      	bx	lr

080010c4 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 80010c4:	6940      	ldr	r0, [r0, #20]
}
 80010c6:	b280      	uxth	r0, r0
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80010cc:	8301      	strh	r1, [r0, #24]
}
 80010ce:	4770      	bx	lr

080010d0 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80010d0:	8341      	strh	r1, [r0, #26]
}
 80010d2:	4770      	bx	lr

080010d4 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80010d4:	b90a      	cbnz	r2, 80010da <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80010d6:	8341      	strh	r1, [r0, #26]
 80010d8:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 80010da:	8301      	strh	r1, [r0, #24]
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80010e0:	6141      	str	r1, [r0, #20]
}
 80010e2:	4770      	bx	lr

080010e4 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80010e4:	6943      	ldr	r3, [r0, #20]
 80010e6:	404b      	eors	r3, r1
 80010e8:	6143      	str	r3, [r0, #20]
}
 80010ea:	4770      	bx	lr

080010ec <GPIO_PinAFConfig>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010ec:	08cb      	lsrs	r3, r1, #3
 80010ee:	3308      	adds	r3, #8
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010f0:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80010f4:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010f6:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80010f8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 80010fc:	240f      	movs	r4, #15
 80010fe:	408c      	lsls	r4, r1
 8001100:	ea25 0404 	bic.w	r4, r5, r4
 8001104:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001108:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800110c:	fa12 f101 	lsls.w	r1, r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001110:	430c      	orrs	r4, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001112:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 8001116:	bc30      	pop	{r4, r5}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800111c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800111e:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8001122:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001126:	4298      	cmp	r0, r3
 8001128:	d018      	beq.n	800115c <I2C_DeInit+0x40>
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  }
  else if (I2Cx == I2C2)
 800112a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800112e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001132:	4298      	cmp	r0, r3
 8001134:	d01e      	beq.n	8001174 <I2C_DeInit+0x58>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  }
  else 
  {
    if (I2Cx == I2C3)
 8001136:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800113a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800113e:	4298      	cmp	r0, r3
 8001140:	d000      	beq.n	8001144 <I2C_DeInit+0x28>
 8001142:	bd08      	pop	{r3, pc}
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8001144:	2101      	movs	r1, #1
 8001146:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800114a:	f000 fbdf 	bl	800190c <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800114e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001152:	2100      	movs	r1, #0
    }
  }
}
 8001154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8001158:	f000 bbd8 	b.w	800190c <RCC_APB1PeriphResetCmd>
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800115c:	2101      	movs	r1, #1
 800115e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001162:	f000 fbd3 	bl	800190c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001166:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800116a:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800116c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (I2Cx == I2C1)
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8001170:	f000 bbcc 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8001174:	2101      	movs	r1, #1
 8001176:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800117a:	f000 fbc7 	bl	800190c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800117e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001182:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 8001184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else if (I2Cx == I2C2)
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 8001188:	f000 bbc0 	b.w	800190c <RCC_APB1PeriphResetCmd>

0800118c <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	4604      	mov	r4, r0
 8001190:	b084      	sub	sp, #16
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001192:	4668      	mov	r0, sp
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8001194:	88a6      	ldrh	r6, [r4, #4]
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8001196:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8001198:	f000 fac4 	bl	8001724 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800119c:	9802      	ldr	r0, [sp, #8]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800119e:	682a      	ldr	r2, [r5, #0]
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80011a0:	f64d 6183 	movw	r1, #56963	; 0xde83

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80011a4:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80011a8:	f2c4 311b 	movt	r1, #17179	; 0x431b

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80011ac:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80011ae:	fba1 3100 	umull	r3, r1, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80011b2:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80011b4:	0c89      	lsrs	r1, r1, #18
  tmpreg |= freqrange;
 80011b6:	430e      	orrs	r6, r1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80011b8:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80011ba:	8823      	ldrh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80011bc:	f248 66a0 	movw	r6, #34464	; 0x86a0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80011c0:	f023 0301 	bic.w	r3, r3, #1
 80011c4:	041b      	lsls	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80011c6:	f2c0 0601 	movt	r6, #1
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80011ca:	0c1b      	lsrs	r3, r3, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80011cc:	42b2      	cmp	r2, r6
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80011ce:	8023      	strh	r3, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80011d0:	d822      	bhi.n	8001218 <I2C_Init+0x8c>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80011d2:	0052      	lsls	r2, r2, #1
 80011d4:	fbb0 f0f2 	udiv	r0, r0, r2
 80011d8:	b280      	uxth	r0, r0
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80011da:	3101      	adds	r1, #1
 80011dc:	8421      	strh	r1, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80011de:	2803      	cmp	r0, #3
 80011e0:	bf98      	it	ls
 80011e2:	2004      	movls	r0, #4
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80011e4:	83a0      	strh	r0, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80011e6:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80011e8:	896e      	ldrh	r6, [r5, #10]
 80011ea:	88a8      	ldrh	r0, [r5, #4]
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80011ec:	8929      	ldrh	r1, [r5, #8]
 80011ee:	89aa      	ldrh	r2, [r5, #12]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80011f8:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80011fa:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80011fe:	f023 0302 	bic.w	r3, r3, #2
 8001202:	041b      	lsls	r3, r3, #16
 8001204:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001206:	4330      	orrs	r0, r6
 8001208:	4303      	orrs	r3, r0
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800120a:	430a      	orrs	r2, r1
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800120c:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800120e:	b292      	uxth	r2, r2
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001210:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001212:	8122      	strh	r2, [r4, #8]
}
 8001214:	b004      	add	sp, #16
 8001216:	bd70      	pop	{r4, r5, r6, pc}
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001218:	88ee      	ldrh	r6, [r5, #6]
 800121a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800121e:	429e      	cmp	r6, r3
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001220:	bf1d      	ittte	ne
 8001222:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 8001226:	eb02 0282 	addne.w	r2, r2, r2, lsl #2
 800122a:	fbb0 f0f2 	udivne	r0, r0, r2
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800122e:	eb02 0242 	addeq.w	r2, r2, r2, lsl #1
 8001232:	bf0b      	itete	eq
 8001234:	fbb0 f0f2 	udiveq	r0, r0, r2
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001238:	b280      	uxthne	r0, r0
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800123a:	b280      	uxtheq	r0, r0
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800123c:	f440 4080 	orrne.w	r0, r0, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001240:	0503      	lsls	r3, r0, #20
 8001242:	0d1b      	lsrs	r3, r3, #20
 8001244:	b90b      	cbnz	r3, 800124a <I2C_Init+0xbe>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8001246:	f040 0001 	orr.w	r0, r0, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800124a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800124e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8001252:	fb02 f101 	mul.w	r1, r2, r1
 8001256:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800125a:	fb83 2301 	smull	r2, r3, r3, r1
 800125e:	099b      	lsrs	r3, r3, #6
 8001260:	3301      	adds	r3, #1
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001262:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001266:	8423      	strh	r3, [r4, #32]
 8001268:	e7bc      	b.n	80011e4 <I2C_Init+0x58>
 800126a:	bf00      	nop

0800126c <I2C_StructInit>:
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800126c:	2300      	movs	r3, #0
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800126e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001272:	6002      	str	r2, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8001274:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001276:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800127a:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800127c:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800127e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8001282:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001284:	8183      	strh	r3, [r0, #12]
}
 8001286:	4770      	bx	lr

08001288 <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001288:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800128a:	b929      	cbnz	r1, 8001298 <I2C_Cmd+0x10>
    I2Cx->CR1 |= I2C_CR1_PE;
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	041b      	lsls	r3, r3, #16
 8001292:	0c1b      	lsrs	r3, r3, #16
 8001294:	8003      	strh	r3, [r0, #0]
 8001296:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8001298:	b29b      	uxth	r3, r3
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	8003      	strh	r3, [r0, #0]
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop

080012a4 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80012a4:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012a6:	b929      	cbnz	r1, 80012b4 <I2C_GenerateSTART+0x10>
    I2Cx->CR1 |= I2C_CR1_START;
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80012a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	8003      	strh	r3, [r0, #0]
 80012b2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ba:	8003      	strh	r3, [r0, #0]
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop

080012c0 <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80012c0:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012c2:	b929      	cbnz	r1, 80012d0 <I2C_GenerateSTOP+0x10>
    I2Cx->CR1 |= I2C_CR1_STOP;
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80012c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012c8:	041b      	lsls	r3, r3, #16
 80012ca:	0c1b      	lsrs	r3, r3, #16
 80012cc:	8003      	strh	r3, [r0, #0]
 80012ce:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d6:	8003      	strh	r3, [r0, #0]
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80012dc:	b91a      	cbnz	r2, 80012e6 <I2C_Send7bitAddress+0xa>
    Address |= I2C_OAR1_ADD0;
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 80012de:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 80012e2:	8201      	strh	r1, [r0, #16]
}
 80012e4:	4770      	bx	lr
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 80012e6:	f041 0101 	orr.w	r1, r1, #1
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
  }
  /* Send the address */
  I2Cx->DR = Address;
 80012ea:	8201      	strh	r1, [r0, #16]
}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 80012f0:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80012f2:	b929      	cbnz	r1, 8001300 <I2C_AcknowledgeConfig+0x10>
    I2Cx->CR1 |= I2C_CR1_ACK;
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80012f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012f8:	041b      	lsls	r3, r3, #16
 80012fa:	0c1b      	lsrs	r3, r3, #16
 80012fc:	8003      	strh	r3, [r0, #0]
 80012fe:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001300:	b29b      	uxth	r3, r3
 8001302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001306:	8003      	strh	r3, [r0, #0]
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800130c:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800130e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001312:	041b      	lsls	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001314:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8001318:	0c1b      	lsrs	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800131a:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800131c:	8183      	strh	r3, [r0, #12]
}
 800131e:	4770      	bx	lr

08001320 <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8001320:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001322:	b929      	cbnz	r1, 8001330 <I2C_DualAddressCmd+0x10>
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 8001324:	f023 0301 	bic.w	r3, r3, #1
 8001328:	041b      	lsls	r3, r3, #16
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	8183      	strh	r3, [r0, #12]
 800132e:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8001330:	b29b      	uxth	r3, r3
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	8183      	strh	r3, [r0, #12]
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop

0800133c <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800133c:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800133e:	b929      	cbnz	r1, 800134c <I2C_GeneralCallCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENGC;
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8001340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001344:	041b      	lsls	r3, r3, #16
 8001346:	0c1b      	lsrs	r3, r3, #16
 8001348:	8003      	strh	r3, [r0, #0]
 800134a:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800134c:	b29b      	uxth	r3, r3
 800134e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001352:	8003      	strh	r3, [r0, #0]
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop

08001358 <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8001358:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800135a:	b919      	cbnz	r1, 8001364 <I2C_SoftwareResetCmd+0xc>
    I2Cx->CR1 |= I2C_CR1_SWRST;
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800135c:	045b      	lsls	r3, r3, #17
 800135e:	0c5b      	lsrs	r3, r3, #17
 8001360:	8003      	strh	r3, [r0, #0]
 8001362:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8001364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800136c:	b29b      	uxth	r3, r3
 800136e:	8003      	strh	r3, [r0, #0]
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop

08001374 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001374:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8001376:	b129      	cbz	r1, 8001384 <I2C_StretchClockCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 8001378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800137c:	041b      	lsls	r3, r3, #16
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	8003      	strh	r3, [r0, #0]
 8001382:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 8001384:	b29b      	uxth	r3, r3
 8001386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138a:	8003      	strh	r3, [r0, #0]
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001390:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001394:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8001396:	d005      	beq.n	80013a4 <I2C_FastModeDutyCycleConfig+0x14>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8001398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800139c:	041b      	lsls	r3, r3, #16
 800139e:	0c1b      	lsrs	r3, r3, #16
 80013a0:	8383      	strh	r3, [r0, #28]
 80013a2:	4770      	bx	lr
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013aa:	8383      	strh	r3, [r0, #28]
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop

080013b0 <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80013b0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80013b4:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80013b6:	d005      	beq.n	80013c4 <I2C_NACKPositionConfig+0x14>
    I2Cx->CR1 |= I2C_NACKPosition_Next;
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80013b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013bc:	041b      	lsls	r3, r3, #16
 80013be:	0c1b      	lsrs	r3, r3, #16
 80013c0:	8003      	strh	r3, [r0, #0]
 80013c2:	4770      	bx	lr
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ca:	8003      	strh	r3, [r0, #0]
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80013d0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80013d4:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80013d6:	d005      	beq.n	80013e4 <I2C_SMBusAlertConfig+0x14>
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80013d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013dc:	041b      	lsls	r3, r3, #16
 80013de:	0c1b      	lsrs	r3, r3, #16
 80013e0:	8003      	strh	r3, [r0, #0]
 80013e2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ea:	8003      	strh	r3, [r0, #0]
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop

080013f0 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80013f0:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013f2:	b929      	cbnz	r1, 8001400 <I2C_ARPCmd+0x10>
    I2Cx->CR1 |= I2C_CR1_ENARP;
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 80013f4:	f023 0310 	bic.w	r3, r3, #16
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	0c1b      	lsrs	r3, r3, #16
 80013fc:	8003      	strh	r3, [r0, #0]
 80013fe:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001400:	b29b      	uxth	r3, r3
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	8003      	strh	r3, [r0, #0]
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop

0800140c <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800140c:	8201      	strh	r1, [r0, #16]
}
 800140e:	4770      	bx	lr

08001410 <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001410:	8a00      	ldrh	r0, [r0, #16]
}
 8001412:	b2c0      	uxtb	r0, r0
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001418:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800141a:	b929      	cbnz	r1, 8001428 <I2C_TransmitPEC+0x10>
    I2Cx->CR1 |= I2C_CR1_PEC;
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800141c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001420:	041b      	lsls	r3, r3, #16
 8001422:	0c1b      	lsrs	r3, r3, #16
 8001424:	8003      	strh	r3, [r0, #0]
 8001426:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001428:	b29b      	uxth	r3, r3
 800142a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800142e:	8003      	strh	r3, [r0, #0]
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop

08001434 <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001434:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001438:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800143a:	d005      	beq.n	8001448 <I2C_PECPositionConfig+0x14>
    I2Cx->CR1 |= I2C_PECPosition_Next;
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800143c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001440:	041b      	lsls	r3, r3, #16
 8001442:	0c1b      	lsrs	r3, r3, #16
 8001444:	8003      	strh	r3, [r0, #0]
 8001446:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001448:	b29b      	uxth	r3, r3
 800144a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800144e:	8003      	strh	r3, [r0, #0]
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001454:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001456:	b929      	cbnz	r1, 8001464 <I2C_CalculatePEC+0x10>
    I2Cx->CR1 |= I2C_CR1_ENPEC;
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001458:	f023 0320 	bic.w	r3, r3, #32
 800145c:	041b      	lsls	r3, r3, #16
 800145e:	0c1b      	lsrs	r3, r3, #16
 8001460:	8003      	strh	r3, [r0, #0]
 8001462:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001464:	b29b      	uxth	r3, r3
 8001466:	f043 0320 	orr.w	r3, r3, #32
 800146a:	8003      	strh	r3, [r0, #0]
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop

08001470 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8001470:	8b00      	ldrh	r0, [r0, #24]
}
 8001472:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001476:	4770      	bx	lr

08001478 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001478:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800147a:	b929      	cbnz	r1, 8001488 <I2C_DMACmd+0x10>
    I2Cx->CR2 |= I2C_CR2_DMAEN;
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800147c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001480:	041b      	lsls	r3, r3, #16
 8001482:	0c1b      	lsrs	r3, r3, #16
 8001484:	8083      	strh	r3, [r0, #4]
 8001486:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001488:	b29b      	uxth	r3, r3
 800148a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800148e:	8083      	strh	r3, [r0, #4]
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8001494:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001496:	b929      	cbnz	r1, 80014a4 <I2C_DMALastTransferCmd+0x10>
    I2Cx->CR2 |= I2C_CR2_LAST;
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8001498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800149c:	041b      	lsls	r3, r3, #16
 800149e:	0c1b      	lsrs	r3, r3, #16
 80014a0:	8083      	strh	r3, [r0, #4]
 80014a2:	4770      	bx	lr
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014aa:	8083      	strh	r3, [r0, #4]
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop

080014b0 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80014b0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80014b6:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80014b8:	9b01      	ldr	r3, [sp, #4]
 80014ba:	18cb      	adds	r3, r1, r3
 80014bc:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80014be:	9b01      	ldr	r3, [sp, #4]
 80014c0:	8818      	ldrh	r0, [r3, #0]
}
 80014c2:	b280      	uxth	r0, r0
 80014c4:	b002      	add	sp, #8
 80014c6:	4770      	bx	lr

080014c8 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80014c8:	8883      	ldrh	r3, [r0, #4]
 80014ca:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80014cc:	b91a      	cbnz	r2, 80014d6 <I2C_ITConfig+0xe>
    I2Cx->CR2 |= I2C_IT;
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80014ce:	ea23 0101 	bic.w	r1, r3, r1
 80014d2:	8081      	strh	r1, [r0, #4]
 80014d4:	4770      	bx	lr
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80014d6:	4319      	orrs	r1, r3
 80014d8:	8081      	strh	r1, [r0, #4]
 80014da:	4770      	bx	lr

080014dc <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80014dc:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 80014de:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80014e0:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80014e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80014e6:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80014e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 80014ec:	1a0b      	subs	r3, r1, r0
 80014ee:	4258      	negs	r0, r3
 80014f0:	eb40 0003 	adc.w	r0, r0, r3
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80014f8:	8a82      	ldrh	r2, [r0, #20]
  flag2 = I2Cx->SR2;
 80014fa:	8b03      	ldrh	r3, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80014fc:	b290      	uxth	r0, r2
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80014fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

  /* Return status */
  return lastevent;
}
 8001502:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001506:	4770      	bx	lr

08001508 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8001508:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800150a:	2300      	movs	r3, #0

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800150c:	0f0a      	lsrs	r2, r1, #28
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001512:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001514:	9200      	str	r2, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 8001516:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8001518:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 800151c:	b153      	cbz	r3, 8001534 <I2C_GetFlagStatus+0x2c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800151e:	9b01      	ldr	r3, [sp, #4]
 8001520:	3314      	adds	r3, #20
 8001522:	9301      	str	r3, [sp, #4]
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001524:	9b01      	ldr	r3, [sp, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001528:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 800152a:	bf0c      	ite	eq
 800152c:	2000      	moveq	r0, #0
 800152e:	2001      	movne	r0, #1
 8001530:	b002      	add	sp, #8
 8001532:	4770      	bx	lr
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001534:	9b01      	ldr	r3, [sp, #4]
 8001536:	3318      	adds	r3, #24
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8001538:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	e7f2      	b.n	8001524 <I2C_GetFlagStatus+0x1c>
 800153e:	bf00      	nop

08001540 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001540:	43c9      	mvns	r1, r1
 8001542:	b289      	uxth	r1, r1
 8001544:	8281      	strh	r1, [r0, #20]
}
 8001546:	4770      	bx	lr

08001548 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001548:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800154a:	8a80      	ldrh	r0, [r0, #20]
 800154c:	b280      	uxth	r0, r0
 800154e:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001550:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001552:	d006      	beq.n	8001562 <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001554:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8001558:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800155c:	bf0c      	ite	eq
 800155e:	2000      	moveq	r0, #0
 8001560:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8001562:	4770      	bx	lr

08001564 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001564:	43c9      	mvns	r1, r1
 8001566:	b289      	uxth	r1, r1
 8001568:	8281      	strh	r1, [r0, #20]
}
 800156a:	4770      	bx	lr

0800156c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800156c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001570:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001574:	2200      	movs	r2, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	f041 0101 	orr.w	r1, r1, #1
 800157c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800157e:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001580:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001582:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001586:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800158a:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800158e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8001592:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001594:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800159c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800159e:	60da      	str	r2, [r3, #12]
}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop

080015a4 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80015a4:	f643 0302 	movw	r3, #14338	; 0x3802
 80015a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80015b0:	7018      	strb	r0, [r3, #0]
}
 80015b2:	4770      	bx	lr

080015b4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80015b4:	b082      	sub	sp, #8

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80015b6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	9301      	str	r3, [sp, #4]

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80015be:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80015c2:	680a      	ldr	r2, [r1, #0]
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 80015c4:	9b01      	ldr	r3, [sp, #4]
 80015c6:	3301      	adds	r3, #1
 80015c8:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80015ca:	9b01      	ldr	r3, [sp, #4]
 80015cc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015d0:	d001      	beq.n	80015d6 <RCC_WaitForHSEStartUp+0x22>
 80015d2:	0393      	lsls	r3, r2, #14
 80015d4:	d5f5      	bpl.n	80015c2 <RCC_WaitForHSEStartUp+0xe>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 80015d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015de:	6818      	ldr	r0, [r3, #0]
  else
  {
    status = ERROR;
  }
  return (status);
}
 80015e0:	f3c0 4040 	ubfx	r0, r0, #17, #1
 80015e4:	b002      	add	sp, #8
 80015e6:	4770      	bx	lr

080015e8 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80015e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015f0:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80015f2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80015f6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80015fa:	601a      	str	r2, [r3, #0]
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8001600:	2300      	movs	r3, #0
 8001602:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001606:	6018      	str	r0, [r3, #0]
}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop

0800160c <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800160c:	f643 0370 	movw	r3, #14448	; 0x3870
 8001610:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001614:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001616:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001618:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800161a:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800161c:	d004      	beq.n	8001628 <RCC_LSEConfig+0x1c>
 800161e:	2804      	cmp	r0, #4
 8001620:	d101      	bne.n	8001626 <RCC_LSEConfig+0x1a>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001622:	2205      	movs	r2, #5
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001628:	7018      	strb	r0, [r3, #0]
      break;
 800162a:	4770      	bx	lr

0800162c <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800162c:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8001630:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001634:	6018      	str	r0, [r3, #0]
}
 8001636:	4770      	bx	lr

08001638 <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001638:	4301      	orrs	r1, r0
 800163a:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 800163e:	9900      	ldr	r1, [sp, #0]
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 8001646:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800164a:	3b01      	subs	r3, #1
 800164c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001650:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8001654:	6042      	str	r2, [r0, #4]
                 (PLLQ << 24);
}
 8001656:	4770      	bx	lr

08001658 <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8001658:	2360      	movs	r3, #96	; 0x60
 800165a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800165e:	6018      	str	r0, [r3, #0]
}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop

08001664 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001664:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001668:	0180      	lsls	r0, r0, #6
 800166a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800166e:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8001672:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001676:	4770      	bx	lr

08001678 <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 8001678:	2368      	movs	r3, #104	; 0x68
 800167a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800167e:	6018      	str	r0, [r3, #0]
}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop

08001684 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001684:	234c      	movs	r3, #76	; 0x4c
 8001686:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800168a:	6018      	str	r0, [r3, #0]
}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop

08001690 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001690:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001694:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001698:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800169a:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800169e:	4302      	orrs	r2, r0
 80016a0:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80016a2:	609a      	str	r2, [r3, #8]
}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop

080016a8 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80016a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016b0:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80016b2:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80016b6:	4302      	orrs	r2, r0
 80016b8:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80016ba:	609a      	str	r2, [r3, #8]
}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop

080016c0 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80016c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016c8:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80016ca:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80016ce:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016d0:	609a      	str	r2, [r3, #8]
}
 80016d2:	4770      	bx	lr

080016d4 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80016d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016dc:	6898      	ldr	r0, [r3, #8]
}
 80016de:	f000 000c 	and.w	r0, r0, #12
 80016e2:	4770      	bx	lr

080016e4 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80016e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016ec:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80016ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80016f2:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016f4:	609a      	str	r2, [r3, #8]
}
 80016f6:	4770      	bx	lr

080016f8 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80016f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001700:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8001702:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001706:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001708:	609a      	str	r2, [r3, #8]
}
 800170a:	4770      	bx	lr

0800170c <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800170c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001710:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001714:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8001716:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800171a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800171e:	609a      	str	r2, [r3, #8]
}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop

08001724 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001724:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001728:	f2c4 0302 	movt	r3, #16386	; 0x4002
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800172c:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8001734:	2a04      	cmp	r2, #4
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001736:	bf02      	ittt	eq
 8001738:	f44f 5290 	moveq.w	r2, #4608	; 0x1200
 800173c:	f2c0 027a 	movteq	r2, #122	; 0x7a
 8001740:	6002      	streq	r2, [r0, #0]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 8001742:	d006      	beq.n	8001752 <RCC_GetClocksFreq+0x2e>
 8001744:	2a08      	cmp	r2, #8
 8001746:	d01e      	beq.n	8001786 <RCC_GetClocksFreq+0x62>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001748:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800174c:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8001750:	6002      	str	r2, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001752:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001756:	f2c4 0302 	movt	r3, #16386	; 0x4002
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 800175a:	491c      	ldr	r1, [pc, #112]	; (80017cc <RCC_GetClocksFreq+0xa8>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800175c:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 4;
 800175e:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001762:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001764:	40e2      	lsrs	r2, r4
 8001766:	6042      	str	r2, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001768:	689c      	ldr	r4, [r3, #8]
  tmp = tmp >> 10;
 800176a:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 800176e:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001770:	fa32 f404 	lsrs.w	r4, r2, r4
 8001774:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001776:	689b      	ldr	r3, [r3, #8]
  tmp = tmp >> 13;
 8001778:	f3c3 3342 	ubfx	r3, r3, #13, #3
  presc = APBAHBPrescTable[tmp];
 800177c:	5ccb      	ldrb	r3, [r1, r3]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800177e:	40da      	lsrs	r2, r3
 8001780:	60c2      	str	r2, [r0, #12]
}
 8001782:	bc10      	pop	{r4}
 8001784:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001786:	685c      	ldr	r4, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001788:	6859      	ldr	r1, [r3, #4]
      
      if (pllsource != 0)
 800178a:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800178e:	685c      	ldr	r4, [r3, #4]
 8001790:	bf15      	itete	ne
 8001792:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001796:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800179a:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800179e:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80017a6:	fbb3 f2f1 	udiv	r2, r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80017aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80017b2:	f3c4 1488 	ubfx	r4, r4, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80017bc:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80017be:	fb02 f204 	mul.w	r2, r2, r4
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80017c2:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80017c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80017c8:	6002      	str	r2, [r0, #0]
      break;
 80017ca:	e7c2      	b.n	8001752 <RCC_GetClocksFreq+0x2e>
 80017cc:	200000a4 	.word	0x200000a4

080017d0 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80017d0:	f400 7340 	and.w	r3, r0, #768	; 0x300
 80017d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017d8:	d10c      	bne.n	80017f4 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80017da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017de:	f2c4 0302 	movt	r3, #16386	; 0x4002

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80017e2:	f020 4170 	bic.w	r1, r0, #4026531840	; 0xf0000000
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80017e6:	689a      	ldr	r2, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80017e8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80017ec:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 80017f0:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80017f2:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80017f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017fc:	0500      	lsls	r0, r0, #20
 80017fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001800:	0d00      	lsrs	r0, r0, #20
 8001802:	4310      	orrs	r0, r2
 8001804:	6718      	str	r0, [r3, #112]	; 0x70
}
 8001806:	4770      	bx	lr

08001808 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001808:	f640 633c 	movw	r3, #3644	; 0xe3c
 800180c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001810:	6018      	str	r0, [r3, #0]
}
 8001812:	4770      	bx	lr

08001814 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8001814:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001818:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800181c:	6018      	str	r0, [r3, #0]
}
 800181e:	4770      	bx	lr

08001820 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8001820:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8001824:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001828:	6018      	str	r0, [r3, #0]
}
 800182a:	4770      	bx	lr

0800182c <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800182c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001830:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001836:	b919      	cbnz	r1, 8001840 <RCC_AHB1PeriphClockCmd+0x14>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001838:	ea22 0000 	bic.w	r0, r2, r0
 800183c:	6318      	str	r0, [r3, #48]	; 0x30
 800183e:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001840:	4310      	orrs	r0, r2
 8001842:	6318      	str	r0, [r3, #48]	; 0x30
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop

08001848 <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 8001848:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800184c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001852:	b919      	cbnz	r1, 800185c <RCC_AHB2PeriphClockCmd+0x14>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8001854:	ea22 0000 	bic.w	r0, r2, r0
 8001858:	6358      	str	r0, [r3, #52]	; 0x34
 800185a:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800185c:	4310      	orrs	r0, r2
 800185e:	6358      	str	r0, [r3, #52]	; 0x34
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001864:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001868:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800186c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800186e:	b919      	cbnz	r1, 8001878 <RCC_AHB3PeriphClockCmd+0x14>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 8001870:	ea22 0000 	bic.w	r0, r2, r0
 8001874:	6398      	str	r0, [r3, #56]	; 0x38
 8001876:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8001878:	4310      	orrs	r0, r2
 800187a:	6398      	str	r0, [r3, #56]	; 0x38
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop

08001880 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001880:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001884:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800188a:	b919      	cbnz	r1, 8001894 <RCC_APB1PeriphClockCmd+0x14>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800188c:	ea22 0000 	bic.w	r0, r2, r0
 8001890:	6418      	str	r0, [r3, #64]	; 0x40
 8001892:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001894:	4310      	orrs	r0, r2
 8001896:	6418      	str	r0, [r3, #64]	; 0x40
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800189c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018a6:	b919      	cbnz	r1, 80018b0 <RCC_APB2PeriphClockCmd+0x14>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80018a8:	ea22 0000 	bic.w	r0, r2, r0
 80018ac:	6458      	str	r0, [r3, #68]	; 0x44
 80018ae:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80018b0:	4310      	orrs	r0, r2
 80018b2:	6458      	str	r0, [r3, #68]	; 0x44
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop

080018b8 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80018b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018c0:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018c2:	b919      	cbnz	r1, 80018cc <RCC_AHB1PeriphResetCmd+0x14>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80018c4:	ea22 0000 	bic.w	r0, r2, r0
 80018c8:	6118      	str	r0, [r3, #16]
 80018ca:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80018cc:	4310      	orrs	r0, r2
 80018ce:	6118      	str	r0, [r3, #16]
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop

080018d4 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80018d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018dc:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018de:	b919      	cbnz	r1, 80018e8 <RCC_AHB2PeriphResetCmd+0x14>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80018e0:	ea22 0000 	bic.w	r0, r2, r0
 80018e4:	6158      	str	r0, [r3, #20]
 80018e6:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80018e8:	4310      	orrs	r0, r2
 80018ea:	6158      	str	r0, [r3, #20]
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop

080018f0 <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 80018f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018f8:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018fa:	b919      	cbnz	r1, 8001904 <RCC_AHB3PeriphResetCmd+0x14>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 80018fc:	ea22 0000 	bic.w	r0, r2, r0
 8001900:	6198      	str	r0, [r3, #24]
 8001902:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001904:	4310      	orrs	r0, r2
 8001906:	6198      	str	r0, [r3, #24]
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800190c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001910:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001914:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001916:	b919      	cbnz	r1, 8001920 <RCC_APB1PeriphResetCmd+0x14>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001918:	ea22 0000 	bic.w	r0, r2, r0
 800191c:	6218      	str	r0, [r3, #32]
 800191e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001920:	4310      	orrs	r0, r2
 8001922:	6218      	str	r0, [r3, #32]
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop

08001928 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001928:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800192c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001932:	b919      	cbnz	r1, 800193c <RCC_APB2PeriphResetCmd+0x14>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001934:	ea22 0000 	bic.w	r0, r2, r0
 8001938:	6258      	str	r0, [r3, #36]	; 0x24
 800193a:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800193c:	4310      	orrs	r0, r2
 800193e:	6258      	str	r0, [r3, #36]	; 0x24
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop

08001944 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001944:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001948:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800194c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800194e:	b919      	cbnz	r1, 8001958 <RCC_AHB1PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001950:	ea22 0000 	bic.w	r0, r2, r0
 8001954:	6518      	str	r0, [r3, #80]	; 0x50
 8001956:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001958:	4310      	orrs	r0, r2
 800195a:	6518      	str	r0, [r3, #80]	; 0x50
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop

08001960 <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001960:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001964:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800196a:	b919      	cbnz	r1, 8001974 <RCC_AHB2PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800196c:	ea22 0000 	bic.w	r0, r2, r0
 8001970:	6558      	str	r0, [r3, #84]	; 0x54
 8001972:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001974:	4310      	orrs	r0, r2
 8001976:	6558      	str	r0, [r3, #84]	; 0x54
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop

0800197c <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800197c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001980:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001984:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001986:	b919      	cbnz	r1, 8001990 <RCC_AHB3PeriphClockLPModeCmd+0x14>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001988:	ea22 0000 	bic.w	r0, r2, r0
 800198c:	6598      	str	r0, [r3, #88]	; 0x58
 800198e:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001990:	4310      	orrs	r0, r2
 8001992:	6598      	str	r0, [r3, #88]	; 0x58
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop

08001998 <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001998:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800199c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019a2:	b919      	cbnz	r1, 80019ac <RCC_APB1PeriphClockLPModeCmd+0x14>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80019a4:	ea22 0000 	bic.w	r0, r2, r0
 80019a8:	6618      	str	r0, [r3, #96]	; 0x60
 80019aa:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80019ac:	4310      	orrs	r0, r2
 80019ae:	6618      	str	r0, [r3, #96]	; 0x60
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80019b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019be:	b919      	cbnz	r1, 80019c8 <RCC_APB2PeriphClockLPModeCmd+0x14>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80019c0:	ea22 0000 	bic.w	r0, r2, r0
 80019c4:	6658      	str	r0, [r3, #100]	; 0x64
 80019c6:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80019c8:	4310      	orrs	r0, r2
 80019ca:	6658      	str	r0, [r3, #100]	; 0x64
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80019d0:	f643 030d 	movw	r3, #14349	; 0x380d
 80019d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019d8:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019da:	b919      	cbnz	r1, 80019e4 <RCC_ITConfig+0x14>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80019dc:	ea22 0000 	bic.w	r0, r2, r0
 80019e0:	7018      	strb	r0, [r3, #0]
 80019e2:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80019e4:	4310      	orrs	r0, r2
 80019e6:	7018      	strb	r0, [r3, #0]
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop

080019ec <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80019ec:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d00e      	beq.n	8001a10 <RCC_GetFlagStatus+0x24>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80019f2:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80019f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019fc:	bf0c      	ite	eq
 80019fe:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001a00:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001a02:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001a06:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001a0a:	f000 0001 	and.w	r0, r0, #1
 8001a0e:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8001a10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	e7f2      	b.n	8001a02 <RCC_GetFlagStatus+0x16>

08001a1c <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001a1c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a26:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001a2a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop

08001a30 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001a30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a38:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8001a3a:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001a3c:	bf0c      	ite	eq
 8001a3e:	2000      	moveq	r0, #0
 8001a40:	2001      	movne	r0, #1
 8001a42:	4770      	bx	lr

08001a44 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001a44:	f643 030e 	movw	r3, #14350	; 0x380e
 8001a48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a4c:	7018      	strb	r0, [r3, #0]
}
 8001a4e:	4770      	bx	lr

08001a50 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8001a50:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001a52:	2101      	movs	r1, #1
 8001a54:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a58:	f7ff ff66 	bl	8001928 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001a5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a60:	2100      	movs	r1, #0
}
 8001a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001a66:	f7ff bf5f 	b.w	8001928 <RCC_APB2PeriphResetCmd>
 8001a6a:	bf00      	nop

08001a6c <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8001a6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a74:	6018      	str	r0, [r3, #0]
}
 8001a76:	4770      	bx	lr

08001a78 <SYSCFG_EXTILineConfig>:
  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001a78:	088a      	lsrs	r2, r1, #2
 8001a7a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a82:	3202      	adds	r2, #2

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001a84:	f001 0103 	and.w	r1, r1, #3
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001a88:	b430      	push	{r4, r5}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001a8a:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001a8c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001a90:	240f      	movs	r4, #15
 8001a92:	408c      	lsls	r4, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001a94:	ea25 0404 	bic.w	r4, r5, r4
 8001a98:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001a9c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8001aa0:	fa10 f101 	lsls.w	r1, r0, r1
 8001aa4:	430c      	orrs	r4, r1
 8001aa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
}
 8001aaa:	bc30      	pop	{r4, r5}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8001ab0:	23dc      	movs	r3, #220	; 0xdc
 8001ab2:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8001ab6:	6018      	str	r0, [r3, #0]
}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop

08001abc <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8001abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac0:	f2c4 2327 	movt	r3, #16935	; 0x4227
 8001ac4:	6018      	str	r0, [r3, #0]
}
 8001ac6:	4770      	bx	lr

08001ac8 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8001ac8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001acc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ad0:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001ad2:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8001ad6:	4770      	bx	lr

08001ad8 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8001ad8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8001ada:	2300      	movs	r3, #0
 8001adc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ae0:	4298      	cmp	r0, r3
 8001ae2:	d05b      	beq.n	8001b9c <TIM_DeInit+0xc4>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8001ae4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ae8:	d062      	beq.n	8001bb0 <TIM_DeInit+0xd8>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 8001aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001af2:	4298      	cmp	r0, r3
 8001af4:	d066      	beq.n	8001bc4 <TIM_DeInit+0xec>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8001af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001afa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001afe:	4298      	cmp	r0, r3
 8001b00:	d06a      	beq.n	8001bd8 <TIM_DeInit+0x100>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 8001b02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b06:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b0a:	4298      	cmp	r0, r3
 8001b0c:	d06e      	beq.n	8001bec <TIM_DeInit+0x114>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8001b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b16:	4298      	cmp	r0, r3
 8001b18:	d072      	beq.n	8001c00 <TIM_DeInit+0x128>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8001b1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b22:	4298      	cmp	r0, r3
 8001b24:	d076      	beq.n	8001c14 <TIM_DeInit+0x13c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8001b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b2e:	4298      	cmp	r0, r3
 8001b30:	d07a      	beq.n	8001c28 <TIM_DeInit+0x150>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8001b32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b36:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b3a:	4298      	cmp	r0, r3
 8001b3c:	d07e      	beq.n	8001c3c <TIM_DeInit+0x164>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8001b3e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8001b42:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b46:	4298      	cmp	r0, r3
 8001b48:	f000 8084 	beq.w	8001c54 <TIM_DeInit+0x17c>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8001b4c:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001b50:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b54:	4298      	cmp	r0, r3
 8001b56:	f000 8089 	beq.w	8001c6c <TIM_DeInit+0x194>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8001b5a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b62:	4298      	cmp	r0, r3
 8001b64:	f000 808e 	beq.w	8001c84 <TIM_DeInit+0x1ac>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 8001b68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b70:	4298      	cmp	r0, r3
 8001b72:	f000 8091 	beq.w	8001c98 <TIM_DeInit+0x1c0>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8001b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b7e:	4298      	cmp	r0, r3
 8001b80:	d000      	beq.n	8001b84 <TIM_DeInit+0xac>
 8001b82:	bd08      	pop	{r3, pc}
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8001b84:	2101      	movs	r1, #1
 8001b86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b8a:	f7ff febf 	bl	800190c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001b8e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b92:	2100      	movs	r1, #0
    }   
  }
}
 8001b94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8001b98:	f7ff beb8 	b.w	800190c <RCC_APB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	f7ff fec2 	bl	8001928 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8001bac:	f7ff bebc 	b.w	8001928 <RCC_APB2PeriphResetCmd>
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	f7ff feaa 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001bb8:	2001      	movs	r0, #1
 8001bba:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001bbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8001bc0:	f7ff bea4 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	f7ff fea0 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001bcc:	2002      	movs	r0, #2
 8001bce:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001bd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8001bd4:	f7ff be9a 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001bd8:	2004      	movs	r0, #4
 8001bda:	2101      	movs	r1, #1
 8001bdc:	f7ff fe96 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001be0:	2004      	movs	r0, #4
 8001be2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001be4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8001be8:	f7ff be90 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8001bec:	2008      	movs	r0, #8
 8001bee:	2101      	movs	r1, #1
 8001bf0:	f7ff fe8c 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001bf4:	2008      	movs	r0, #8
 8001bf6:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001bf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8001bfc:	f7ff be86 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8001c00:	2010      	movs	r0, #16
 8001c02:	2101      	movs	r1, #1
 8001c04:	f7ff fe82 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001c08:	2010      	movs	r0, #16
 8001c0a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8001c10:	f7ff be7c 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8001c14:	2020      	movs	r0, #32
 8001c16:	2101      	movs	r1, #1
 8001c18:	f7ff fe78 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001c1c:	2020      	movs	r0, #32
 8001c1e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8001c24:	f7ff be72 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8001c28:	2002      	movs	r0, #2
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	f7ff fe7c 	bl	8001928 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001c30:	2002      	movs	r0, #2
 8001c32:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8001c38:	f7ff be76 	b.w	8001928 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c42:	f7ff fe71 	bl	8001928 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001c46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c4a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8001c50:	f7ff be6a 	b.w	8001928 <RCC_APB2PeriphResetCmd>
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8001c54:	2101      	movs	r1, #1
 8001c56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c5a:	f7ff fe65 	bl	8001928 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001c5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c62:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8001c68:	f7ff be5e 	b.w	8001928 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c72:	f7ff fe59 	bl	8001928 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001c76:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c7a:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8001c80:	f7ff be52 	b.w	8001928 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8001c84:	2040      	movs	r0, #64	; 0x40
 8001c86:	2101      	movs	r1, #1
 8001c88:	f7ff fe40 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001c8c:	2040      	movs	r0, #64	; 0x40
 8001c8e:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8001c94:	f7ff be3a 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8001c98:	2080      	movs	r0, #128	; 0x80
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	f7ff fe36 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001ca0:	2080      	movs	r0, #128	; 0x80
 8001ca2:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8001ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8001ca8:	f7ff be30 	b.w	800190c <RCC_APB1PeriphResetCmd>

08001cac <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001cac:	2300      	movs	r3, #0
 8001cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb2:	f2c4 0301 	movt	r3, #16385	; 0x4001
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001cb6:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001cb8:	f2c4 0201 	movt	r2, #16385	; 0x4001
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001cbc:	8804      	ldrh	r4, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001cbe:	4298      	cmp	r0, r3
 8001cc0:	bf18      	it	ne
 8001cc2:	4290      	cmpne	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001cc4:	b2a4      	uxth	r4, r4

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001cc6:	bf14      	ite	ne
 8001cc8:	2300      	movne	r3, #0
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	d008      	beq.n	8001ce0 <TIM_TimeBaseInit+0x34>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cd2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001cd6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cda:	bf18      	it	ne
 8001cdc:	4290      	cmpne	r0, r2
 8001cde:	d123      	bne.n	8001d28 <TIM_TimeBaseInit+0x7c>
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001ce0:	f64f 758f 	movw	r5, #65423	; 0xff8f
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001ce4:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001ce6:	4025      	ands	r5, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001ce8:	ea45 0402 	orr.w	r4, r5, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001cec:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
 8001cf0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8001cf4:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8001cf8:	f2c4 0600 	movt	r6, #16384	; 0x4000
 8001cfc:	42b0      	cmp	r0, r6
 8001cfe:	bf18      	it	ne
 8001d00:	42a8      	cmpne	r0, r5
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001d02:	bf1f      	itttt	ne
 8001d04:	890d      	ldrhne	r5, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001d06:	f64f 42ff 	movwne	r2, #64767	; 0xfcff
 8001d0a:	4022      	andne	r2, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001d0c:	ea42 0405 	orrne.w	r4, r2, r5
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001d10:	684d      	ldr	r5, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001d12:	880a      	ldrh	r2, [r1, #0]
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001d14:	8004      	strh	r4, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001d16:	62c5      	str	r5, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001d18:	8502      	strh	r2, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001d1a:	b10b      	cbz	r3, 8001d20 <TIM_TimeBaseInit+0x74>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001d1c:	7a8b      	ldrb	r3, [r1, #10]
 8001d1e:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001d20:	2301      	movs	r3, #1
 8001d22:	8283      	strh	r3, [r0, #20]
}
 8001d24:	bc70      	pop	{r4, r5, r6}
 8001d26:	4770      	bx	lr

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001d28:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 8001d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d30:	f2c4 0500 	movt	r5, #16384	; 0x4000
 8001d34:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001d38:	4290      	cmp	r0, r2
 8001d3a:	bf18      	it	ne
 8001d3c:	42a8      	cmpne	r0, r5
 8001d3e:	d1d5      	bne.n	8001cec <TIM_TimeBaseInit+0x40>
 8001d40:	e7ce      	b.n	8001ce0 <TIM_TimeBaseInit+0x34>
 8001d42:	bf00      	nop

08001d44 <TIM_TimeBaseStructInit>:
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001d44:	2300      	movs	r3, #0
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001d46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d4a:	6041      	str	r1, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8001d4c:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8001d4e:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8001d50:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8001d52:	7283      	strb	r3, [r0, #10]
}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop

08001d58 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8001d58:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8001d5a:	8282      	strh	r2, [r0, #20]
}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8001d60:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8001d6a:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8001d6c:	8003      	strh	r3, [r0, #0]
}
 8001d6e:	4770      	bx	lr

08001d70 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8001d70:	6241      	str	r1, [r0, #36]	; 0x24
}
 8001d72:	4770      	bx	lr

08001d74 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8001d74:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8001d76:	4770      	bx	lr

08001d78 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8001d78:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8001d7a:	4770      	bx	lr

08001d7c <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8001d7c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8001d7e:	b280      	uxth	r0, r0
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop

08001d84 <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001d84:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001d86:	b929      	cbnz	r1, 8001d94 <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8001d88:	f023 0302 	bic.w	r3, r3, #2
 8001d8c:	041b      	lsls	r3, r3, #16
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	8003      	strh	r3, [r0, #0]
 8001d92:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	8003      	strh	r3, [r0, #0]
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop

08001da0 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001da0:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8001da2:	b929      	cbnz	r1, 8001db0 <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	0c1b      	lsrs	r3, r3, #16
 8001dac:	8003      	strh	r3, [r0, #0]
 8001dae:	4770      	bx	lr
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	8003      	strh	r3, [r0, #0]
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop

08001dbc <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001dbc:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001dbe:	b929      	cbnz	r1, 8001dcc <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dc4:	041b      	lsls	r3, r3, #16
 8001dc6:	0c1b      	lsrs	r3, r3, #16
 8001dc8:	8003      	strh	r3, [r0, #0]
 8001dca:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dd2:	8003      	strh	r3, [r0, #0]
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop

08001dd8 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8001dd8:	8803      	ldrh	r3, [r0, #0]
 8001dda:	f023 0308 	bic.w	r3, r3, #8
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8001de4:	8803      	ldrh	r3, [r0, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	430b      	orrs	r3, r1
 8001dea:	8003      	strh	r3, [r0, #0]
}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8001df0:	8803      	ldrh	r3, [r0, #0]
 8001df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	0c1b      	lsrs	r3, r3, #16
 8001dfa:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8001dfc:	8803      	ldrh	r3, [r0, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	430b      	orrs	r3, r1
 8001e02:	8003      	strh	r3, [r0, #0]
}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001e08:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001e0a:	b929      	cbnz	r1, 8001e18 <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	041b      	lsls	r3, r3, #16
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	8003      	strh	r3, [r0, #0]
 8001e16:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	8003      	strh	r3, [r0, #0]
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop

08001e24 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001e24:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001e28:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001e2a:	898d      	ldrh	r5, [r1, #12]
 8001e2c:	884f      	ldrh	r7, [r1, #2]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001e2e:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001e32:	f024 0401 	bic.w	r4, r4, #1
 8001e36:	0424      	lsls	r4, r4, #16
 8001e38:	0c24      	lsrs	r4, r4, #16
 8001e3a:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e3c:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e3e:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e40:	8b02      	ldrh	r2, [r0, #24]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001e42:	432f      	orrs	r7, r5
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8001e44:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001e48:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001e4a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001e4e:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001e52:	0412      	lsls	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8001e54:	041b      	lsls	r3, r3, #16
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001e56:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001e5a:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001e5e:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8001e60:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001e62:	b2bf      	uxth	r7, r7
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001e64:	42a8      	cmp	r0, r5
 8001e66:	bf18      	it	ne
 8001e68:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e6a:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001e6c:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001e70:	ea47 0303 	orr.w	r3, r7, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001e74:	d116      	bne.n	8001ea4 <TIM_OC1Init+0x80>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001e76:	f64f 75f7 	movw	r5, #65527	; 0xfff7
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001e7a:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001e7e:	f8b1 8012 	ldrh.w	r8, [r1, #18]
 8001e82:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001e84:	888e      	ldrh	r6, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001e86:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001e88:	ea45 0c0c 	orr.w	ip, r5, ip
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001e8c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001e90:	f64f 45ff 	movw	r5, #64767	; 0xfcff
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001e94:	ea48 0707 	orr.w	r7, r8, r7
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001e98:	4025      	ands	r5, r4
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001e9a:	ea0c 0303 	and.w	r3, ip, r3
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001e9e:	b2bc      	uxth	r4, r7
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001ea0:	4333      	orrs	r3, r6
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001ea2:	432c      	orrs	r4, r5
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001ea4:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ea6:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ea8:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001eaa:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eac:	8403      	strh	r3, [r0, #32]
}
 8001eae:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8001eb2:	4770      	bx	lr

08001eb4 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001eb4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001eb8:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001eba:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001ebc:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001ec0:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001ec2:	f024 0410 	bic.w	r4, r4, #16
 8001ec6:	0424      	lsls	r4, r4, #16
 8001ec8:	0c24      	lsrs	r4, r4, #16
 8001eca:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001ecc:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ece:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ed0:	8b03      	ldrh	r3, [r0, #24]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001ed2:	f022 0220 	bic.w	r2, r2, #32
 8001ed6:	0412      	lsls	r2, r2, #16
 8001ed8:	0c12      	lsrs	r2, r2, #16
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001eda:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8001ede:	041b      	lsls	r3, r3, #16
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001ee0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001ee4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8001ee8:	2500      	movs	r5, #0
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001eea:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001eec:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001ef0:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001ef4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001ef8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001efc:	42a8      	cmp	r0, r5
 8001efe:	bf18      	it	ne
 8001f00:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f02:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001f04:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001f06:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001f08:	d119      	bne.n	8001f3e <TIM_OC2Init+0x8a>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001f0a:	f64f 767f 	movw	r6, #65407	; 0xff7f
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001f0e:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001f12:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001f16:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001f1a:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001f1c:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001f1e:	f24f 35ff 	movw	r5, #62463	; 0xf3ff
 8001f22:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001f24:	ea46 1609 	orr.w	r6, r6, r9, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8001f28:	f64f 72bf 	movw	r2, #65471	; 0xffbf
 8001f2c:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001f2e:	ea45 0488 	orr.w	r4, r5, r8, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001f32:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001f36:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001f3a:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001f3c:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001f3e:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f40:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f42:	8303      	strh	r3, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001f44:	6381      	str	r1, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f46:	8402      	strh	r2, [r0, #32]
}
 8001f48:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop

08001f50 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001f50:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001f54:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001f56:	898d      	ldrh	r5, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001f58:	f8b1 c002 	ldrh.w	ip, [r1, #2]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001f5c:	880f      	ldrh	r7, [r1, #0]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001f5e:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8001f62:	0424      	lsls	r4, r4, #16
 8001f64:	0c24      	lsrs	r4, r4, #16
 8001f66:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f68:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f6a:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f6c:	8b83      	ldrh	r3, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001f6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f72:	0412      	lsls	r2, r2, #16
 8001f74:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001f76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001f7a:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001f7e:	2500      	movs	r5, #0
 8001f80:	f44f 6680 	mov.w	r6, #1024	; 0x400
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001f84:	041b      	lsls	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001f86:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001f8a:	f2c4 0501 	movt	r5, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001f8e:	0c1b      	lsrs	r3, r3, #16
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001f90:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001f94:	42a8      	cmp	r0, r5
 8001f96:	bf18      	it	ne
 8001f98:	42b0      	cmpne	r0, r6
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f9a:	b2a4      	uxth	r4, r4
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001f9c:	ea43 0307 	orr.w	r3, r3, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001fa0:	b292      	uxth	r2, r2
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001fa2:	d119      	bne.n	8001fd8 <TIM_OC3Init+0x88>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001fa4:	f24f 76ff 	movw	r6, #63487	; 0xf7ff
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001fa8:	f8b1 900e 	ldrh.w	r9, [r1, #14]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001fac:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001fb0:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001fb4:	8a4f      	ldrh	r7, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001fb6:	4016      	ands	r6, r2
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001fb8:	f64c 75ff 	movw	r5, #53247	; 0xcfff
 8001fbc:	4025      	ands	r5, r4
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001fbe:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001fc2:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001fc6:	4032      	ands	r2, r6
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001fc8:	ea45 1408 	orr.w	r4, r5, r8, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001fcc:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001fd0:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001fd4:	b292      	uxth	r2, r2
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001fd6:	b2a4      	uxth	r4, r4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001fd8:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fda:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fdc:	8383      	strh	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001fde:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fe0:	8402      	strh	r2, [r0, #32]
}
 8001fe2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001fe6:	4770      	bx	lr

08001fe8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001fe8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001fea:	8c04      	ldrh	r4, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001fec:	898d      	ldrh	r5, [r1, #12]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001fee:	f8b1 c000 	ldrh.w	ip, [r1]
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001ff2:	884f      	ldrh	r7, [r1, #2]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001ff4:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001ff8:	0424      	lsls	r4, r4, #16
 8001ffa:	0c24      	lsrs	r4, r4, #16
 8001ffc:	8404      	strh	r4, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ffe:	8c02      	ldrh	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002000:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002002:	8b83      	ldrh	r3, [r0, #28]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002008:	0412      	lsls	r2, r2, #16
 800200a:	0c12      	lsrs	r2, r2, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800200c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8002010:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002014:	2500      	movs	r5, #0
 8002016:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800201a:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800201e:	f2c4 0601 	movt	r6, #16385	; 0x4001
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8002022:	041b      	lsls	r3, r3, #16
 8002024:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002026:	42a8      	cmp	r0, r5
 8002028:	bf18      	it	ne
 800202a:	42b0      	cmpne	r0, r6
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800202c:	bf08      	it	eq
 800202e:	8a0e      	ldrheq	r6, [r1, #16]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002030:	6889      	ldr	r1, [r1, #8]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002032:	b2a4      	uxth	r4, r4
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8002034:	bf02      	ittt	eq
 8002036:	f64b 75ff 	movweq	r5, #49151	; 0xbfff
 800203a:	4025      	andeq	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800203c:	ea45 1486 	orreq.w	r4, r5, r6, lsl #6
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002040:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002044:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002048:	b29b      	uxth	r3, r3
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800204a:	b292      	uxth	r2, r2
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800204c:	bf08      	it	eq
 800204e:	b2a4      	uxtheq	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002050:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002052:	8383      	strh	r3, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8002054:	6401      	str	r1, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002056:	8402      	strh	r2, [r0, #32]
}
 8002058:	bcf0      	pop	{r4, r5, r6, r7}
 800205a:	4770      	bx	lr

0800205c <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800205c:	2300      	movs	r3, #0
 800205e:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002060:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002062:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002064:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002066:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002068:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800206a:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800206c:	8243      	strh	r3, [r0, #18]
}
 800206e:	4770      	bx	lr

08002070 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002070:	b410      	push	{r4}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002072:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002074:	2301      	movs	r3, #1
 8002076:	408b      	lsls	r3, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002078:	b2a4      	uxth	r4, r4
 800207a:	ea24 0303 	bic.w	r3, r4, r3
 800207e:	8403      	strh	r3, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8002080:	3018      	adds	r0, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8002082:	2900      	cmp	r1, #0
 8002084:	bf18      	it	ne
 8002086:	2908      	cmpne	r1, #8
 8002088:	d00e      	beq.n	80020a8 <TIM_SelectOCxM+0x38>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800208a:	3904      	subs	r1, #4
 800208c:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8002090:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8002094:	580c      	ldr	r4, [r1, r0]
 8002096:	4023      	ands	r3, r4
 8002098:	500b      	str	r3, [r1, r0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800209a:	0212      	lsls	r2, r2, #8
 800209c:	580b      	ldr	r3, [r1, r0]
 800209e:	b292      	uxth	r2, r2
 80020a0:	431a      	orrs	r2, r3
 80020a2:	500a      	str	r2, [r1, r0]
  }
}
 80020a4:	bc10      	pop	{r4}
 80020a6:	4770      	bx	lr
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 80020a8:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80020aa:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80020ae:	580c      	ldr	r4, [r1, r0]
 80020b0:	4023      	ands	r3, r4
 80020b2:	500b      	str	r3, [r1, r0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80020b4:	580b      	ldr	r3, [r1, r0]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	500a      	str	r2, [r1, r0]
 80020ba:	e7f3      	b.n	80020a4 <TIM_SelectOCxM+0x34>

080020bc <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80020bc:	6341      	str	r1, [r0, #52]	; 0x34
}
 80020be:	4770      	bx	lr

080020c0 <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80020c0:	6381      	str	r1, [r0, #56]	; 0x38
}
 80020c2:	4770      	bx	lr

080020c4 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80020c4:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80020c6:	4770      	bx	lr

080020c8 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80020c8:	6401      	str	r1, [r0, #64]	; 0x40
}
 80020ca:	4770      	bx	lr

080020cc <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80020cc:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 80020ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d2:	041b      	lsls	r3, r3, #16
 80020d4:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80020d6:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80020d8:	8303      	strh	r3, [r0, #24]
}
 80020da:	4770      	bx	lr

080020dc <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80020dc:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 80020de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 80020e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80020ea:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80020ec:	8303      	strh	r3, [r0, #24]
}
 80020ee:	4770      	bx	lr

080020f0 <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80020f0:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80020f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f6:	041b      	lsls	r3, r3, #16
 80020f8:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 80020fa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80020fc:	8383      	strh	r3, [r0, #28]
}
 80020fe:	4770      	bx	lr

08002100 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8002100:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8002102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800210a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800210e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002110:	8383      	strh	r3, [r0, #28]
}
 8002112:	4770      	bx	lr

08002114 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002114:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8002116:	f023 0308 	bic.w	r3, r3, #8
 800211a:	041b      	lsls	r3, r3, #16
 800211c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800211e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002120:	8303      	strh	r3, [r0, #24]
}
 8002122:	4770      	bx	lr

08002124 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8002124:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8002126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800212e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002132:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002134:	8303      	strh	r3, [r0, #24]
}
 8002136:	4770      	bx	lr

08002138 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002138:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800213a:	f023 0308 	bic.w	r3, r3, #8
 800213e:	041b      	lsls	r3, r3, #16
 8002140:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8002142:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002144:	8383      	strh	r3, [r0, #28]
}
 8002146:	4770      	bx	lr

08002148 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002148:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800214a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800214e:	041b      	lsls	r3, r3, #16
 8002150:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002152:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002156:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002158:	8383      	strh	r3, [r0, #28]
}
 800215a:	4770      	bx	lr

0800215c <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800215c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800215e:	f023 0304 	bic.w	r3, r3, #4
 8002162:	041b      	lsls	r3, r3, #16
 8002164:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002166:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002168:	8303      	strh	r3, [r0, #24]
}
 800216a:	4770      	bx	lr

0800216c <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800216c:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800216e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002172:	041b      	lsls	r3, r3, #16
 8002174:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002176:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800217a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800217c:	8303      	strh	r3, [r0, #24]
}
 800217e:	4770      	bx	lr

08002180 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002180:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8002182:	f023 0304 	bic.w	r3, r3, #4
 8002186:	041b      	lsls	r3, r3, #16
 8002188:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800218a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800218c:	8383      	strh	r3, [r0, #28]
}
 800218e:	4770      	bx	lr

08002190 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8002190:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8002192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800219a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800219e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80021a0:	8383      	strh	r3, [r0, #28]
}
 80021a2:	4770      	bx	lr

080021a4 <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80021a4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 80021a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021aa:	041b      	lsls	r3, r3, #16
 80021ac:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80021ae:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80021b0:	8303      	strh	r3, [r0, #24]
}
 80021b2:	4770      	bx	lr

080021b4 <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80021b4:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 80021b6:	045b      	lsls	r3, r3, #17
 80021b8:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80021ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80021be:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80021c0:	8303      	strh	r3, [r0, #24]
}
 80021c2:	4770      	bx	lr

080021c4 <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80021c4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 80021c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80021ce:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80021d0:	8383      	strh	r3, [r0, #28]
}
 80021d2:	4770      	bx	lr

080021d4 <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80021d4:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 80021d6:	045b      	lsls	r3, r3, #17
 80021d8:	0c5b      	lsrs	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80021da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80021de:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80021e0:	8383      	strh	r3, [r0, #28]
}
 80021e2:	4770      	bx	lr

080021e4 <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80021e4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 80021e6:	f023 0302 	bic.w	r3, r3, #2
 80021ea:	041b      	lsls	r3, r3, #16
 80021ec:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 80021ee:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80021f0:	8403      	strh	r3, [r0, #32]
}
 80021f2:	4770      	bx	lr

080021f4 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80021f4:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80021f6:	f023 0308 	bic.w	r3, r3, #8
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 80021fe:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002200:	8403      	strh	r3, [r0, #32]
}
 8002202:	4770      	bx	lr

08002204 <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002204:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8002206:	f023 0320 	bic.w	r3, r3, #32
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800220e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002212:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002214:	8403      	strh	r3, [r0, #32]
}
 8002216:	4770      	bx	lr

08002218 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002218:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800221a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8002222:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002226:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002228:	8403      	strh	r3, [r0, #32]
}
 800222a:	4770      	bx	lr

0800222c <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800222c:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800222e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8002236:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800223a:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800223c:	8403      	strh	r3, [r0, #32]
}
 800223e:	4770      	bx	lr

08002240 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8002240:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8002242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002246:	041b      	lsls	r3, r3, #16
 8002248:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800224a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800224e:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002250:	8403      	strh	r3, [r0, #32]
}
 8002252:	4770      	bx	lr

08002254 <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002254:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800225e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002262:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002264:	8403      	strh	r3, [r0, #32]
}
 8002266:	4770      	bx	lr

08002268 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002268:	b410      	push	{r4}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800226a:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800226c:	2301      	movs	r3, #1
 800226e:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002270:	b2a4      	uxth	r4, r4
 8002272:	ea24 0303 	bic.w	r3, r4, r3
 8002276:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002278:	8c03      	ldrh	r3, [r0, #32]
 800227a:	fa12 f101 	lsls.w	r1, r2, r1
 800227e:	430b      	orrs	r3, r1
 8002280:	b29b      	uxth	r3, r3
 8002282:	8403      	strh	r3, [r0, #32]
}
 8002284:	bc10      	pop	{r4}
 8002286:	4770      	bx	lr

08002288 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8002288:	b410      	push	{r4}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800228a:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800228c:	2304      	movs	r3, #4
 800228e:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8002290:	b2a4      	uxth	r4, r4
 8002292:	ea24 0303 	bic.w	r3, r4, r3
 8002296:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8002298:	8c03      	ldrh	r3, [r0, #32]
 800229a:	fa12 f101 	lsls.w	r1, r2, r1
 800229e:	430b      	orrs	r3, r1
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	8403      	strh	r3, [r0, #32]
}
 80022a4:	bc10      	pop	{r4}
 80022a6:	4770      	bx	lr

080022a8 <TIM_ICInit>:
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80022a8:	880b      	ldrh	r3, [r1, #0]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80022aa:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d032      	beq.n	8002316 <TIM_ICInit+0x6e>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d058      	beq.n	8002366 <TIM_ICInit+0xbe>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80022b4:	2b08      	cmp	r3, #8
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80022b6:	884e      	ldrh	r6, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80022b8:	8c03      	ldrh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80022ba:	f000 8082 	beq.w	80023c2 <TIM_ICInit+0x11a>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80022be:	888f      	ldrh	r7, [r1, #4]
 80022c0:	890d      	ldrh	r5, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80022c2:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80022c4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80022c8:	0409      	lsls	r1, r1, #16
 80022ca:	0c09      	lsrs	r1, r1, #16
 80022cc:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80022ce:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 80022d0:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80022d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80022d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80022da:	0512      	lsls	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80022dc:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80022de:	0d12      	lsrs	r2, r2, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80022e0:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80022e2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80022e6:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80022ea:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80022f4:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80022f6:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 80022f8:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 80022fa:	8b83      	ldrh	r3, [r0, #28]
 80022fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	0c1b      	lsrs	r3, r3, #16
 8002304:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8002306:	8b83      	ldrh	r3, [r0, #28]
 8002308:	b29b      	uxth	r3, r3
 800230a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800230e:	b29b      	uxth	r3, r3
 8002310:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002312:	bcf0      	pop	{r4, r5, r6, r7}
 8002314:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002316:	8c03      	ldrh	r3, [r0, #32]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002318:	884e      	ldrh	r6, [r1, #2]
 800231a:	888d      	ldrh	r5, [r1, #4]
 800231c:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800231e:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002320:	f023 0101 	bic.w	r1, r3, #1
 8002324:	0409      	lsls	r1, r1, #16
 8002326:	0c09      	lsrs	r1, r1, #16
 8002328:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800232a:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800232c:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800232e:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 8002332:	0412      	lsls	r2, r2, #16
 8002334:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002336:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800233a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800233e:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002340:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002342:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002344:	f046 0101 	orr.w	r1, r6, #1
 8002348:	430b      	orrs	r3, r1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800234a:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800234c:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800234e:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002350:	8b03      	ldrh	r3, [r0, #24]
 8002352:	f023 030c 	bic.w	r3, r3, #12
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	0c1b      	lsrs	r3, r3, #16
 800235a:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800235c:	8b03      	ldrh	r3, [r0, #24]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4323      	orrs	r3, r4
 8002362:	8303      	strh	r3, [r0, #24]
 8002364:	e7d5      	b.n	8002312 <TIM_ICInit+0x6a>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002366:	8c03      	ldrh	r3, [r0, #32]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8002368:	884e      	ldrh	r6, [r1, #2]
 800236a:	888d      	ldrh	r5, [r1, #4]
 800236c:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800236e:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002370:	f023 0110 	bic.w	r1, r3, #16
 8002374:	0409      	lsls	r1, r1, #16
 8002376:	0c09      	lsrs	r1, r1, #16
 8002378:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800237a:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800237c:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800237e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002382:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002388:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800238a:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800238c:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002390:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002392:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002394:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002398:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800239c:	b29b      	uxth	r3, r3
 800239e:	f043 0310 	orr.w	r3, r3, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80023a2:	b292      	uxth	r2, r2
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023a4:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80023a6:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80023a8:	8b03      	ldrh	r3, [r0, #24]
 80023aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	0c1b      	lsrs	r3, r3, #16
 80023b2:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80023b4:	8b03      	ldrh	r3, [r0, #24]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80023bc:	b29b      	uxth	r3, r3
 80023be:	8303      	strh	r3, [r0, #24]
 80023c0:	e7a7      	b.n	8002312 <TIM_ICInit+0x6a>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80023c2:	888d      	ldrh	r5, [r1, #4]
 80023c4:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80023c6:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80023c8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80023cc:	0409      	lsls	r1, r1, #16
 80023ce:	0c09      	lsrs	r1, r1, #16
 80023d0:	8401      	strh	r1, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80023d2:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
 80023d4:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80023d6:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80023da:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80023de:	0412      	lsls	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80023e0:	041b      	lsls	r3, r3, #16
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80023e2:	0c12      	lsrs	r2, r2, #16
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80023e4:	0c1b      	lsrs	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80023e6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80023ea:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80023ee:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80023f6:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80023f8:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 80023fa:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80023fc:	8b83      	ldrh	r3, [r0, #28]
 80023fe:	f023 030c 	bic.w	r3, r3, #12
 8002402:	041b      	lsls	r3, r3, #16
 8002404:	0c1b      	lsrs	r3, r3, #16
 8002406:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002408:	8b83      	ldrh	r3, [r0, #28]
 800240a:	b29b      	uxth	r3, r3
 800240c:	4323      	orrs	r3, r4
 800240e:	8383      	strh	r3, [r0, #28]
 8002410:	e77f      	b.n	8002312 <TIM_ICInit+0x6a>
 8002412:	bf00      	nop

08002414 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002414:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8002416:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8002418:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800241a:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800241c:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800241e:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8002420:	8103      	strh	r3, [r0, #8]
}
 8002422:	4770      	bx	lr

08002424 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8002424:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002428:	888a      	ldrh	r2, [r1, #4]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800242a:	f8b1 8002 	ldrh.w	r8, [r1, #2]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800242e:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8002430:	f1b8 0f00 	cmp.w	r8, #0
 8002434:	bf0c      	ite	eq
 8002436:	2502      	moveq	r5, #2
 8002438:	2500      	movne	r5, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800243a:	2a01      	cmp	r2, #1
 800243c:	bf14      	ite	ne
 800243e:	2601      	movne	r6, #1
 8002440:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002442:	2b00      	cmp	r3, #0
 8002444:	d051      	beq.n	80024ea <TIM_PWMIConfig+0xc6>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002446:	8c03      	ldrh	r3, [r0, #32]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002448:	f8b1 c008 	ldrh.w	ip, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800244c:	88cf      	ldrh	r7, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800244e:	f023 0310 	bic.w	r3, r3, #16
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	0c1b      	lsrs	r3, r3, #16
 8002456:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002458:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800245a:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800245c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8002460:	0524      	lsls	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002462:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002466:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002468:	0409      	lsls	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800246a:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800246e:	0c09      	lsrs	r1, r1, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002470:	b2a4      	uxth	r4, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002472:	ea41 1108 	orr.w	r1, r1, r8, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002476:	ea44 2202 	orr.w	r2, r4, r2, lsl #8

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800247a:	b289      	uxth	r1, r1
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800247c:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800247e:	f041 0110 	orr.w	r1, r1, #16

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002482:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002484:	8401      	strh	r1, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8002486:	8b01      	ldrh	r1, [r0, #24]
 8002488:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	0c09      	lsrs	r1, r1, #16
 8002490:	8301      	strh	r1, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002492:	8b03      	ldrh	r3, [r0, #24]
 8002494:	b29b      	uxth	r3, r3
 8002496:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800249a:	b29b      	uxth	r3, r3
 800249c:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800249e:	8c01      	ldrh	r1, [r0, #32]
 80024a0:	f021 0101 	bic.w	r1, r1, #1
 80024a4:	0409      	lsls	r1, r1, #16
 80024a6:	0c09      	lsrs	r1, r1, #16
 80024a8:	8401      	strh	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024aa:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80024ac:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80024ae:	f022 02f3 	bic.w	r2, r2, #243	; 0xf3
 80024b2:	0412      	lsls	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024b4:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80024b8:	0c12      	lsrs	r2, r2, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ba:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80024bc:	ea42 120c 	orr.w	r2, r2, ip, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024c0:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80024c2:	f043 0301 	orr.w	r3, r3, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80024c6:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80024c8:	431d      	orrs	r5, r3
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80024ca:	4316      	orrs	r6, r2
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024cc:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 80024ce:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80024d0:	8b03      	ldrh	r3, [r0, #24]
 80024d2:	f023 030c 	bic.w	r3, r3, #12
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	0c1b      	lsrs	r3, r3, #16
 80024da:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80024dc:	8b03      	ldrh	r3, [r0, #24]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	431f      	orrs	r7, r3
 80024e2:	8307      	strh	r7, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80024e4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 80024e8:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80024ea:	8c03      	ldrh	r3, [r0, #32]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80024ec:	890f      	ldrh	r7, [r1, #8]
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80024ee:	88cc      	ldrh	r4, [r1, #6]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	0c1b      	lsrs	r3, r3, #16
 80024f8:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024fa:	8b01      	ldrh	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 80024fc:	8c03      	ldrh	r3, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80024fe:	f021 01f3 	bic.w	r1, r1, #243	; 0xf3
 8002502:	0409      	lsls	r1, r1, #16
 8002504:	0c09      	lsrs	r1, r1, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002506:	f023 030a 	bic.w	r3, r3, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800250a:	ea41 1107 	orr.w	r1, r1, r7, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800250e:	041b      	lsls	r3, r3, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002510:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002512:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002514:	f048 0801 	orr.w	r8, r8, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002518:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800251a:	ea43 0308 	orr.w	r3, r3, r8

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800251e:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002520:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002522:	8b03      	ldrh	r3, [r0, #24]
 8002524:	f023 030c 	bic.w	r3, r3, #12
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800252e:	8b03      	ldrh	r3, [r0, #24]
 8002530:	b29b      	uxth	r3, r3
 8002532:	4323      	orrs	r3, r4
 8002534:	8303      	strh	r3, [r0, #24]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002536:	8c03      	ldrh	r3, [r0, #32]
 8002538:	f023 0310 	bic.w	r3, r3, #16
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	0c1b      	lsrs	r3, r3, #16
 8002540:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002542:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002544:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002546:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800254a:	0512      	lsls	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800254c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002550:	0d12      	lsrs	r2, r2, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002552:	041b      	lsls	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8002554:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002558:	0c1b      	lsrs	r3, r3, #16
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800255a:	f043 0310 	orr.w	r3, r3, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800255e:	b292      	uxth	r2, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8002560:	ea43 1505 	orr.w	r5, r3, r5, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8002564:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002568:	8306      	strh	r6, [r0, #24]
  TIMx->CCER = tmpccer;
 800256a:	8405      	strh	r5, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800256c:	8b03      	ldrh	r3, [r0, #24]
 800256e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002578:	8b03      	ldrh	r3, [r0, #24]
 800257a:	b29b      	uxth	r3, r3
 800257c:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 8002580:	b2a4      	uxth	r4, r4
 8002582:	8304      	strh	r4, [r0, #24]
 8002584:	e7ae      	b.n	80024e4 <TIM_PWMIConfig+0xc0>
 8002586:	bf00      	nop

08002588 <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8002588:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800258a:	4770      	bx	lr

0800258c <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800258c:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 800258e:	4770      	bx	lr

08002590 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8002590:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8002592:	4770      	bx	lr

08002594 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8002594:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 8002596:	4770      	bx	lr

08002598 <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8002598:	8b03      	ldrh	r3, [r0, #24]
 800259a:	f023 030c 	bic.w	r3, r3, #12
 800259e:	041b      	lsls	r3, r3, #16
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80025a4:	8b03      	ldrh	r3, [r0, #24]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	430b      	orrs	r3, r1
 80025aa:	8303      	strh	r3, [r0, #24]
}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop

080025b0 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80025b0:	8b03      	ldrh	r3, [r0, #24]
 80025b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025b6:	041b      	lsls	r3, r3, #16
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80025bc:	8b03      	ldrh	r3, [r0, #24]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	8303      	strh	r3, [r0, #24]
}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop

080025cc <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80025cc:	8b83      	ldrh	r3, [r0, #28]
 80025ce:	f023 030c 	bic.w	r3, r3, #12
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80025d8:	8b83      	ldrh	r3, [r0, #28]
 80025da:	b29b      	uxth	r3, r3
 80025dc:	430b      	orrs	r3, r1
 80025de:	8383      	strh	r3, [r0, #28]
}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 80025e4:	8b83      	ldrh	r3, [r0, #28]
 80025e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80025f0:	8b83      	ldrh	r3, [r0, #28]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	8383      	strh	r3, [r0, #28]
}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8002600:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 8002604:	880b      	ldrh	r3, [r1, #0]
 8002606:	898a      	ldrh	r2, [r1, #12]
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8002608:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800260a:	888f      	ldrh	r7, [r1, #4]
 800260c:	88ce      	ldrh	r6, [r1, #6]
 800260e:	890d      	ldrh	r5, [r1, #8]
 8002610:	894c      	ldrh	r4, [r1, #10]
 8002612:	ea4c 0303 	orr.w	r3, ip, r3
 8002616:	433b      	orrs	r3, r7
 8002618:	4333      	orrs	r3, r6
 800261a:	432b      	orrs	r3, r5
 800261c:	4323      	orrs	r3, r4
 800261e:	4313      	orrs	r3, r2
 8002620:	b29b      	uxth	r3, r3
 8002622:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8002626:	bcf0      	pop	{r4, r5, r6, r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop

0800262c <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800262c:	2300      	movs	r3, #0
 800262e:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002630:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002632:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002634:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8002636:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8002638:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800263a:	8183      	strh	r3, [r0, #12]
}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop

08002640 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002640:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002644:	b921      	cbnz	r1, 8002650 <TIM_CtrlPWMOutputs+0x10>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8002646:	045b      	lsls	r3, r3, #17
 8002648:	0c5b      	lsrs	r3, r3, #17
 800264a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800264e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002658:	b29b      	uxth	r3, r3
 800265a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 800265e:	4770      	bx	lr

08002660 <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002660:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002662:	b929      	cbnz	r1, 8002670 <TIM_SelectCOM+0x10>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8002664:	f023 0304 	bic.w	r3, r3, #4
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	0c1b      	lsrs	r3, r3, #16
 800266c:	8083      	strh	r3, [r0, #4]
 800266e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8002670:	b29b      	uxth	r3, r3
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	8083      	strh	r3, [r0, #4]
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop

0800267c <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800267c:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800267e:	b929      	cbnz	r1, 800268c <TIM_CCPreloadControl+0x10>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	041b      	lsls	r3, r3, #16
 8002686:	0c1b      	lsrs	r3, r3, #16
 8002688:	8083      	strh	r3, [r0, #4]
 800268a:	4770      	bx	lr
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800268c:	b29b      	uxth	r3, r3
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	8083      	strh	r3, [r0, #4]
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop

08002698 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8002698:	8983      	ldrh	r3, [r0, #12]
 800269a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800269c:	b91a      	cbnz	r2, 80026a6 <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800269e:	ea23 0101 	bic.w	r1, r3, r1
 80026a2:	8181      	strh	r1, [r0, #12]
 80026a4:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80026a6:	4319      	orrs	r1, r3
 80026a8:	8181      	strh	r1, [r0, #12]
 80026aa:	4770      	bx	lr

080026ac <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80026ac:	8281      	strh	r1, [r0, #20]
}
 80026ae:	4770      	bx	lr

080026b0 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80026b0:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 80026b2:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80026b4:	bf0c      	ite	eq
 80026b6:	2000      	moveq	r0, #0
 80026b8:	2001      	movne	r0, #1
 80026ba:	4770      	bx	lr

080026bc <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80026bc:	43c9      	mvns	r1, r1
 80026be:	b289      	uxth	r1, r1
 80026c0:	8201      	strh	r1, [r0, #16]
}
 80026c2:	4770      	bx	lr

080026c4 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80026c4:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80026c6:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80026c8:	4211      	tst	r1, r2
 80026ca:	bf0c      	ite	eq
 80026cc:	2000      	moveq	r0, #0
 80026ce:	2001      	movne	r0, #1
 80026d0:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80026d2:	bf0c      	ite	eq
 80026d4:	2000      	moveq	r0, #0
 80026d6:	f000 0001 	andne.w	r0, r0, #1
 80026da:	4770      	bx	lr

080026dc <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80026dc:	43c9      	mvns	r1, r1
 80026de:	b289      	uxth	r1, r1
 80026e0:	8201      	strh	r1, [r0, #16]
}
 80026e2:	4770      	bx	lr

080026e4 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80026e4:	430a      	orrs	r2, r1
 80026e6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 80026ea:	4770      	bx	lr

080026ec <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80026ec:	8983      	ldrh	r3, [r0, #12]
 80026ee:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80026f0:	b91a      	cbnz	r2, 80026fa <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80026f2:	ea23 0101 	bic.w	r1, r3, r1
 80026f6:	8181      	strh	r1, [r0, #12]
 80026f8:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80026fa:	4319      	orrs	r1, r3
 80026fc:	8181      	strh	r1, [r0, #12]
 80026fe:	4770      	bx	lr

08002700 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002700:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002702:	b929      	cbnz	r1, 8002710 <TIM_SelectCCDMA+0x10>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8002704:	f023 0308 	bic.w	r3, r3, #8
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	0c1b      	lsrs	r3, r3, #16
 800270c:	8083      	strh	r3, [r0, #4]
 800270e:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002710:	b29b      	uxth	r3, r3
 8002712:	f043 0308 	orr.w	r3, r3, #8
 8002716:	8083      	strh	r3, [r0, #4]
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop

0800271c <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 800271c:	8903      	ldrh	r3, [r0, #8]
 800271e:	f023 0307 	bic.w	r3, r3, #7
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	8103      	strh	r3, [r0, #8]
}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop

0800272c <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800272c:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	041b      	lsls	r3, r3, #16
 8002734:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002736:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002738:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800273a:	8903      	ldrh	r3, [r0, #8]
 800273c:	b29b      	uxth	r3, r3
 800273e:	f043 0307 	orr.w	r3, r3, #7
 8002742:	8103      	strh	r3, [r0, #8]
}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop

08002748 <TIM_TIxExternalClockConfig>:
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002748:	2960      	cmp	r1, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800274a:	b430      	push	{r4, r5}
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800274c:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800274e:	d026      	beq.n	800279e <TIM_TIxExternalClockConfig+0x56>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002750:	f024 0401 	bic.w	r4, r4, #1
 8002754:	0424      	lsls	r4, r4, #16
 8002756:	0c24      	lsrs	r4, r4, #16
 8002758:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275a:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 800275c:	8c04      	ldrh	r4, [r0, #32]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800275e:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
 8002762:	042d      	lsls	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002764:	f024 040a 	bic.w	r4, r4, #10
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8002768:	0c2d      	lsrs	r5, r5, #16
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800276a:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800276c:	f045 0501 	orr.w	r5, r5, #1

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002770:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002772:	ea45 1303 	orr.w	r3, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8002776:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800277a:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800277c:	4322      	orrs	r2, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800277e:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002780:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002782:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002788:	041b      	lsls	r3, r3, #16
 800278a:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800278c:	4319      	orrs	r1, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800278e:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002790:	8903      	ldrh	r3, [r0, #8]
 8002792:	b29b      	uxth	r3, r3
 8002794:	f043 0307 	orr.w	r3, r3, #7
 8002798:	8103      	strh	r3, [r0, #8]
}
 800279a:	bc30      	pop	{r4, r5}
 800279c:	4770      	bx	lr
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800279e:	f024 0410 	bic.w	r4, r4, #16
 80027a2:	0424      	lsls	r4, r4, #16
 80027a4:	0c24      	lsrs	r4, r4, #16
 80027a6:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a8:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80027aa:	8c04      	ldrh	r4, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80027ac:	f425 7540 	bic.w	r5, r5, #768	; 0x300
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b0:	f024 04a0 	bic.w	r4, r4, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80027b4:	052d      	lsls	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b6:	0424      	lsls	r4, r4, #16
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 80027b8:	0d2d      	lsrs	r5, r5, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027ba:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80027bc:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80027c0:	f044 0410 	orr.w	r4, r4, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80027c4:	ea45 3303 	orr.w	r3, r5, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80027c8:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 80027cc:	b29b      	uxth	r3, r3

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80027ce:	b292      	uxth	r2, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d0:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80027d2:	8402      	strh	r2, [r0, #32]
 80027d4:	e7d5      	b.n	8002782 <TIM_TIxExternalClockConfig+0x3a>
 80027d6:	bf00      	nop

080027d8 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80027d8:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80027da:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80027dc:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80027de:	430c      	orrs	r4, r1
 80027e0:	4314      	orrs	r4, r2
 80027e2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80027e6:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e8:	8104      	strh	r4, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027ea:	8903      	ldrh	r3, [r0, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80027ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027f0:	041b      	lsls	r3, r3, #16
 80027f2:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 80027f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f8:	8103      	strh	r3, [r0, #8]
}
 80027fa:	bc10      	pop	{r4}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop

08002800 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002800:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002802:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002804:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002806:	430c      	orrs	r4, r1
 8002808:	4314      	orrs	r4, r2
 800280a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800280e:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002810:	8104      	strh	r4, [r0, #8]

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002812:	8903      	ldrh	r3, [r0, #8]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281a:	8103      	strh	r3, [r0, #8]
}
 800281c:	bc10      	pop	{r4}
 800281e:	4770      	bx	lr

08002820 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002820:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	041b      	lsls	r3, r3, #16
 8002828:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800282a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800282c:	8103      	strh	r3, [r0, #8]
}
 800282e:	4770      	bx	lr

08002830 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8002830:	8883      	ldrh	r3, [r0, #4]
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800283c:	8883      	ldrh	r3, [r0, #4]
 800283e:	b29b      	uxth	r3, r3
 8002840:	430b      	orrs	r3, r1
 8002842:	8083      	strh	r3, [r0, #4]
}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop

08002848 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8002848:	8903      	ldrh	r3, [r0, #8]
 800284a:	f023 0307 	bic.w	r3, r3, #7
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	0c1b      	lsrs	r3, r3, #16
 8002852:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8002854:	8903      	ldrh	r3, [r0, #8]
 8002856:	b29b      	uxth	r3, r3
 8002858:	430b      	orrs	r3, r1
 800285a:	8103      	strh	r3, [r0, #8]
}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop

08002860 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8002860:	8903      	ldrh	r3, [r0, #8]
 8002862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800286c:	8903      	ldrh	r3, [r0, #8]
 800286e:	b29b      	uxth	r3, r3
 8002870:	430b      	orrs	r3, r1
 8002872:	8103      	strh	r3, [r0, #8]
}
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop

08002878 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002878:	b410      	push	{r4}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800287a:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800287c:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800287e:	430c      	orrs	r4, r1
 8002880:	4314      	orrs	r4, r2
 8002882:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002886:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002888:	8104      	strh	r4, [r0, #8]
}
 800288a:	bc10      	pop	{r4}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop

08002890 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002890:	b470      	push	{r4, r5, r6}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002892:	8905      	ldrh	r5, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002894:	8b04      	ldrh	r4, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	8c06      	ldrh	r6, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002898:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800289c:	f026 0622 	bic.w	r6, r6, #34	; 0x22
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80028a0:	f024 0403 	bic.w	r4, r4, #3
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80028a4:	0436      	lsls	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80028a6:	f025 0507 	bic.w	r5, r5, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80028aa:	0424      	lsls	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80028ac:	0c36      	lsrs	r6, r6, #16

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80028ae:	042d      	lsls	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80028b0:	0c24      	lsrs	r4, r4, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80028b2:	4316      	orrs	r6, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80028b4:	0c2d      	lsrs	r5, r5, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80028b6:	f444 7480 	orr.w	r4, r4, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80028ba:	ea46 1603 	orr.w	r6, r6, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 80028be:	4329      	orrs	r1, r5

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80028c0:	f044 0401 	orr.w	r4, r4, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80028c4:	b2b6      	uxth	r6, r6

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c6:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80028c8:	8304      	strh	r4, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ca:	8406      	strh	r6, [r0, #32]
}
 80028cc:	bc70      	pop	{r4, r5, r6}
 80028ce:	4770      	bx	lr

080028d0 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80028d0:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80028d2:	b929      	cbnz	r1, 80028e0 <TIM_SelectHallSensor+0x10>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80028d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	0c1b      	lsrs	r3, r3, #16
 80028dc:	8083      	strh	r3, [r0, #4]
 80028de:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e6:	8083      	strh	r3, [r0, #4]
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop

080028ec <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80028ec:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop

080028f4 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80028f4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80028f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80028fe:	4298      	cmp	r0, r3
 8002900:	d028      	beq.n	8002954 <USART_DeInit+0x60>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
 8002902:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8002906:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800290a:	4298      	cmp	r0, r3
 800290c:	d02c      	beq.n	8002968 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
 800290e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8002912:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002916:	4298      	cmp	r0, r3
 8002918:	d032      	beq.n	8002980 <USART_DeInit+0x8c>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
 800291a:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800291e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002922:	4298      	cmp	r0, r3
 8002924:	d038      	beq.n	8002998 <USART_DeInit+0xa4>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
 8002926:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800292a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800292e:	4298      	cmp	r0, r3
 8002930:	d03e      	beq.n	80029b0 <USART_DeInit+0xbc>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
  }     
  else
  {
    if (USARTx == USART6)
 8002932:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002936:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800293a:	4298      	cmp	r0, r3
 800293c:	d000      	beq.n	8002940 <USART_DeInit+0x4c>
 800293e:	bd08      	pop	{r3, pc}
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002940:	2020      	movs	r0, #32
 8002942:	2101      	movs	r1, #1
 8002944:	f7fe fff0 	bl	8001928 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002948:	2020      	movs	r0, #32
 800294a:	2100      	movs	r1, #0
    }
  }
}
 800294c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002950:	f7fe bfea 	b.w	8001928 <RCC_APB2PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002954:	2010      	movs	r0, #16
 8002956:	2101      	movs	r1, #1
 8002958:	f7fe ffe6 	bl	8001928 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800295c:	2010      	movs	r0, #16
 800295e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002964:	f7fe bfe0 	b.w	8001928 <RCC_APB2PeriphResetCmd>
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002968:	2101      	movs	r1, #1
 800296a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800296e:	f7fe ffcd 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002972:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002976:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else if (USARTx == USART2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800297c:	f7fe bfc6 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002980:	2101      	movs	r1, #1
 8002982:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002986:	f7fe ffc1 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800298a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800298e:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002994:	f7fe bfba 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002998:	2101      	movs	r1, #1
 800299a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800299e:	f7fe ffb5 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80029a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029a6:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80029a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  }    
  else if (USARTx == UART4)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 80029ac:	f7fe bfae 	b.w	800190c <RCC_APB1PeriphResetCmd>
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 80029b0:	2101      	movs	r1, #1
 80029b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80029b6:	f7fe ffa9 	bl	800190c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80029ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80029be:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 80029c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  }
  else if (USARTx == UART5)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 80029c4:	f7fe bfa2 	b.w	800190c <RCC_APB1PeriphResetCmd>

080029c8 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80029c8:	8a02      	ldrh	r2, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80029ca:	88cb      	ldrh	r3, [r1, #6]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80029cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80029d0:	0412      	lsls	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80029d2:	b5f0      	push	{r4, r5, r6, r7, lr}

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80029d4:	0c12      	lsrs	r2, r2, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80029d6:	4604      	mov	r4, r0
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80029d8:	431a      	orrs	r2, r3

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80029da:	8948      	ldrh	r0, [r1, #10]
 80029dc:	890f      	ldrh	r7, [r1, #8]
 80029de:	888e      	ldrh	r6, [r1, #4]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80029e0:	460d      	mov	r5, r1
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80029e2:	8989      	ldrh	r1, [r1, #12]
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80029e4:	8222      	strh	r2, [r4, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80029e6:	89a3      	ldrh	r3, [r4, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80029e8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029ec:	f023 030c 	bic.w	r3, r3, #12

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80029f0:	ea47 0206 	orr.w	r2, r7, r6

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80029f4:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80029f6:	4302      	orrs	r2, r0
 80029f8:	b292      	uxth	r2, r2

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80029fa:	0c1b      	lsrs	r3, r3, #16
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80029fc:	4313      	orrs	r3, r2
 80029fe:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002a00:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	0c1b      	lsrs	r3, r3, #16
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002a0a:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002a10:	4668      	mov	r0, sp
 8002a12:	f7fe fe87 	bl	8001724 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002a16:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002a22:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002a26:	429c      	cmp	r4, r3
 8002a28:	bf18      	it	ne
 8002a2a:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002a2c:	89a2      	ldrh	r2, [r4, #12]
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);

  if ((USARTx == USART1) || (USARTx == USART6))
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002a2e:	bf0c      	ite	eq
 8002a30:	9b03      	ldreq	r3, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002a32:	9b02      	ldrne	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002a34:	b212      	sxth	r2, r2
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	db21      	blt.n	8002a7e <USART_Init+0xb6>
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002a3a:	6828      	ldr	r0, [r5, #0]
 8002a3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a44:	0080      	lsls	r0, r0, #2
 8002a46:	fbb3 f1f0 	udiv	r1, r3, r0
  }
  tmpreg = (integerdivider / 100) << 4;
 8002a4a:	f248 531f 	movw	r3, #34079	; 0x851f

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002a4e:	89a0      	ldrh	r0, [r4, #12]
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8002a50:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8002a54:	fba3 5201 	umull	r5, r2, r3, r1
 8002a58:	0952      	lsrs	r2, r2, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002a5a:	b200      	sxth	r0, r0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002a5c:	0116      	lsls	r6, r2, #4
 8002a5e:	2564      	movs	r5, #100	; 0x64

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002a60:	2800      	cmp	r0, #0
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002a62:	fb02 1215 	mls	r2, r2, r5, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002a66:	db13      	blt.n	8002a90 <USART_Init+0xc8>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002a68:	0112      	lsls	r2, r2, #4
 8002a6a:	3232      	adds	r2, #50	; 0x32
 8002a6c:	fba3 5302 	umull	r5, r3, r3, r2
 8002a70:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8002a74:	4333      	orrs	r3, r6
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	8123      	strh	r3, [r4, #8]
}
 8002a7a:	b005      	add	sp, #20
 8002a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002a7e:	682a      	ldr	r2, [r5, #0]
 8002a80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a88:	0052      	lsls	r2, r2, #1
 8002a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a8e:	e7dc      	b.n	8002a4a <USART_Init+0x82>
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002a90:	00d2      	lsls	r2, r2, #3
 8002a92:	3232      	adds	r2, #50	; 0x32
 8002a94:	fba3 1302 	umull	r1, r3, r3, r2
 8002a98:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002a9c:	4333      	orrs	r3, r6
 8002a9e:	e7ea      	b.n	8002a76 <USART_Init+0xae>

08002aa0 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002aa0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002aa4:	2300      	movs	r3, #0
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002aa6:	6002      	str	r2, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002aa8:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002aaa:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002aac:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002aae:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002ab0:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002ab2:	8183      	strh	r3, [r0, #12]
}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop

08002ab8 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002ab8:	880a      	ldrh	r2, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002aba:	8a03      	ldrh	r3, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002abc:	b430      	push	{r4, r5}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002abe:	884d      	ldrh	r5, [r1, #2]
 8002ac0:	888c      	ldrh	r4, [r1, #4]
 8002ac2:	88c9      	ldrh	r1, [r1, #6]
 8002ac4:	432a      	orrs	r2, r5
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002ac6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002aca:	4322      	orrs	r2, r4
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002acc:	041b      	lsls	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002ace:	430a      	orrs	r2, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002ad0:	0c1b      	lsrs	r3, r3, #16
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002ad2:	b292      	uxth	r2, r2
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	8203      	strh	r3, [r0, #16]
}
 8002ad8:	bc30      	pop	{r4, r5}
 8002ada:	4770      	bx	lr

08002adc <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002adc:	2300      	movs	r3, #0
 8002ade:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002ae0:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002ae2:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002ae4:	80c3      	strh	r3, [r0, #6]
}
 8002ae6:	4770      	bx	lr

08002ae8 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002ae8:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002aea:	b929      	cbnz	r1, 8002af8 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	0c1b      	lsrs	r3, r3, #16
 8002af4:	8183      	strh	r3, [r0, #12]
 8002af6:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002afe:	8183      	strh	r3, [r0, #12]
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop

08002b04 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002b04:	8b03      	ldrh	r3, [r0, #24]
 8002b06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b0a:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002b0c:	8b03      	ldrh	r3, [r0, #24]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	430b      	orrs	r3, r1
 8002b12:	8303      	strh	r3, [r0, #24]
}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop

08002b18 <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002b18:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b1a:	b919      	cbnz	r1, 8002b24 <USART_OverSampling8Cmd+0xc>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002b1c:	045b      	lsls	r3, r3, #17
 8002b1e:	0c5b      	lsrs	r3, r3, #17
 8002b20:	8183      	strh	r3, [r0, #12]
 8002b22:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	8183      	strh	r3, [r0, #12]
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop

08002b34 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002b34:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002b36:	b929      	cbnz	r1, 8002b44 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	8283      	strh	r3, [r0, #20]
 8002b42:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b4a:	8283      	strh	r3, [r0, #20]
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop

08002b50 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002b50:	05c9      	lsls	r1, r1, #23
 8002b52:	0dc9      	lsrs	r1, r1, #23
 8002b54:	8081      	strh	r1, [r0, #4]
}
 8002b56:	4770      	bx	lr

08002b58 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002b58:	8880      	ldrh	r0, [r0, #4]
}
 8002b5a:	05c0      	lsls	r0, r0, #23
 8002b5c:	0dc0      	lsrs	r0, r0, #23
 8002b5e:	4770      	bx	lr

08002b60 <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002b60:	8a03      	ldrh	r3, [r0, #16]
 8002b62:	f023 030f 	bic.w	r3, r3, #15
 8002b66:	041b      	lsls	r3, r3, #16
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002b6c:	8a03      	ldrh	r3, [r0, #16]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	430b      	orrs	r3, r1
 8002b72:	8203      	strh	r3, [r0, #16]
}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop

08002b78 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002b78:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002b7a:	b929      	cbnz	r1, 8002b88 <USART_ReceiverWakeUpCmd+0x10>
    USARTx->CR1 |= USART_CR1_RWU;
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002b7c:	f023 0302 	bic.w	r3, r3, #2
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	0c1b      	lsrs	r3, r3, #16
 8002b84:	8183      	strh	r3, [r0, #12]
 8002b86:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	f043 0302 	orr.w	r3, r3, #2
 8002b8e:	8183      	strh	r3, [r0, #12]
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop

08002b94 <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002b94:	8983      	ldrh	r3, [r0, #12]
 8002b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002ba0:	8983      	ldrh	r3, [r0, #12]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	8183      	strh	r3, [r0, #12]
}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop

08002bac <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002bac:	8a03      	ldrh	r3, [r0, #16]
 8002bae:	f023 0320 	bic.w	r3, r3, #32
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002bb8:	8a03      	ldrh	r3, [r0, #16]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	8203      	strh	r3, [r0, #16]
}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop

08002bc4 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002bc4:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002bc6:	b929      	cbnz	r1, 8002bd4 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	8203      	strh	r3, [r0, #16]
 8002bd2:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bda:	8203      	strh	r3, [r0, #16]
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop

08002be0 <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002be0:	8983      	ldrh	r3, [r0, #12]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	8183      	strh	r3, [r0, #12]
}
 8002bea:	4770      	bx	lr

08002bec <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002bec:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002bee:	b929      	cbnz	r1, 8002bfc <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002bf0:	f023 0308 	bic.w	r3, r3, #8
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	0c1b      	lsrs	r3, r3, #16
 8002bf8:	8283      	strh	r3, [r0, #20]
 8002bfa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f043 0308 	orr.w	r3, r3, #8
 8002c02:	8283      	strh	r3, [r0, #20]
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop

08002c08 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002c08:	8b03      	ldrh	r3, [r0, #24]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002c0e:	8b03      	ldrh	r3, [r0, #24]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c16:	8303      	strh	r3, [r0, #24]
}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop

08002c1c <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002c1c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c1e:	b929      	cbnz	r1, 8002c2c <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002c20:	f023 0320 	bic.w	r3, r3, #32
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	8283      	strh	r3, [r0, #20]
 8002c2a:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	f043 0320 	orr.w	r3, r3, #32
 8002c32:	8283      	strh	r3, [r0, #20]
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop

08002c38 <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002c38:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002c3a:	b929      	cbnz	r1, 8002c48 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002c3c:	f023 0310 	bic.w	r3, r3, #16
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	0c1b      	lsrs	r3, r3, #16
 8002c44:	8283      	strh	r3, [r0, #20]
 8002c46:	4770      	bx	lr
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	f043 0310 	orr.w	r3, r3, #16
 8002c4e:	8283      	strh	r3, [r0, #20]
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop

08002c54 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002c54:	8a83      	ldrh	r3, [r0, #20]
 8002c56:	f023 0304 	bic.w	r3, r3, #4
 8002c5a:	041b      	lsls	r3, r3, #16
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002c60:	8a83      	ldrh	r3, [r0, #20]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	430b      	orrs	r3, r1
 8002c66:	8283      	strh	r3, [r0, #20]
}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop

08002c6c <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002c6c:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002c6e:	b929      	cbnz	r1, 8002c7c <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002c70:	f023 0302 	bic.w	r3, r3, #2
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	0c1b      	lsrs	r3, r3, #16
 8002c78:	8283      	strh	r3, [r0, #20]
 8002c7a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f043 0302 	orr.w	r3, r3, #2
 8002c82:	8283      	strh	r3, [r0, #20]
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop

08002c88 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002c88:	8a83      	ldrh	r3, [r0, #20]
 8002c8a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002c8c:	b91a      	cbnz	r2, 8002c96 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002c8e:	ea23 0101 	bic.w	r1, r3, r1
 8002c92:	8281      	strh	r1, [r0, #20]
 8002c94:	4770      	bx	lr

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002c96:	4319      	orrs	r1, r3
 8002c98:	8281      	strh	r1, [r0, #20]
 8002c9a:	4770      	bx	lr

08002c9c <USART_ITConfig>:

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002c9c:	f001 031f 	and.w	r3, r1, #31
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002ca0:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002ca2:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8002ca6:	2401      	movs	r4, #1
 8002ca8:	fa14 f303 	lsls.w	r3, r4, r3
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002cac:	42a1      	cmp	r1, r4
 8002cae:	d00d      	beq.n	8002ccc <USART_ITConfig+0x30>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002cb0:	2902      	cmp	r1, #2
 8002cb2:	d00d      	beq.n	8002cd0 <USART_ITConfig+0x34>
  {
    usartxbase += 0x10;
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002cb4:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
 8002cb6:	b92a      	cbnz	r2, 8002cc4 <USART_ITConfig+0x28>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002cb8:	6802      	ldr	r2, [r0, #0]
 8002cba:	ea22 0303 	bic.w	r3, r2, r3
 8002cbe:	6003      	str	r3, [r0, #0]
  }
}
 8002cc0:	bc10      	pop	{r4}
 8002cc2:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002cc4:	6802      	ldr	r2, [r0, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	6003      	str	r3, [r0, #0]
 8002cca:	e7f9      	b.n	8002cc0 <USART_ITConfig+0x24>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8002ccc:	300c      	adds	r0, #12
 8002cce:	e7f2      	b.n	8002cb6 <USART_ITConfig+0x1a>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x10;
 8002cd0:	3010      	adds	r0, #16
 8002cd2:	e7f0      	b.n	8002cb6 <USART_ITConfig+0x1a>

08002cd4 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002cd4:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8002cd6:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002cd8:	bf0c      	ite	eq
 8002cda:	2000      	moveq	r0, #0
 8002cdc:	2001      	movne	r0, #1
 8002cde:	4770      	bx	lr

08002ce0 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002ce0:	43c9      	mvns	r1, r1
 8002ce2:	b289      	uxth	r1, r1
 8002ce4:	8001      	strh	r1, [r0, #0]
}
 8002ce6:	4770      	bx	lr

08002ce8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002ce8:	b410      	push	{r4}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002cea:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 8002cee:	2401      	movs	r4, #1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002cf0:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002cf4:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d016      	beq.n	8002d28 <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002cfa:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 8002cfc:	bf0c      	ite	eq
 8002cfe:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002d00:	8a82      	ldrhne	r2, [r0, #20]
 8002d02:	b292      	uxth	r2, r2
 8002d04:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8002d06:	8803      	ldrh	r3, [r0, #0]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8002d08:	2401      	movs	r4, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8002d0a:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8002d0c:	fa14 f101 	lsls.w	r1, r4, r1
  bitpos &= USARTx->SR;
 8002d10:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002d12:	4219      	tst	r1, r3
 8002d14:	bf0c      	ite	eq
 8002d16:	2300      	moveq	r3, #0
 8002d18:	2301      	movne	r3, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8002d1a:	2a00      	cmp	r2, #0
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2000      	moveq	r0, #0
 8002d20:	f003 0001 	andne.w	r0, r3, #1
 8002d24:	bc10      	pop	{r4}
 8002d26:	4770      	bx	lr
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8002d28:	8982      	ldrh	r2, [r0, #12]
 8002d2a:	b292      	uxth	r2, r2
 8002d2c:	4022      	ands	r2, r4
 8002d2e:	e7ea      	b.n	8002d06 <USART_GetITStatus+0x1e>

08002d30 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002d30:	0a09      	lsrs	r1, r1, #8
 8002d32:	2301      	movs	r3, #1
 8002d34:	fa13 f101 	lsls.w	r1, r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002d38:	43c9      	mvns	r1, r1
 8002d3a:	b289      	uxth	r1, r1
 8002d3c:	8001      	strh	r1, [r0, #0]
}
 8002d3e:	4770      	bx	lr

08002d40 <ST7032i_print>:
			delay_ms(10);
		}
	}
}

void ST7032i_print(char * str) {
 8002d40:	b510      	push	{r4, lr}
 8002d42:	4604      	mov	r4, r0
	while (*str)
 8002d44:	7800      	ldrb	r0, [r0, #0]
 8002d46:	b128      	cbz	r0, 8002d54 <ST7032i_print+0x14>
		ST7032i_Data_Write(*str++);
 8002d48:	f000 faa8 	bl	800329c <ST7032i_Data_Write>
		}
	}
}

void ST7032i_print(char * str) {
	while (*str)
 8002d4c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d1f9      	bne.n	8002d48 <ST7032i_print+0x8>
 8002d54:	bd10      	pop	{r4, pc}
 8002d56:	bf00      	nop

08002d58 <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop

08002d60 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002d60:	f241 6390 	movw	r3, #5776	; 0x1690
 8002d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d68:	220c      	movs	r2, #12
 8002d6a:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop

08002d74 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002d74:	f241 6390 	movw	r3, #5776	; 0x1690
 8002d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d7c:	220b      	movs	r2, #11
 8002d7e:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop

08002d88 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002d8e:	2000      	movs	r0, #0
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop

08002d94 <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002d94:	2001      	movs	r0, #1
 8002d96:	4770      	bx	lr

08002d98 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002d98:	2802      	cmp	r0, #2
 8002d9a:	d801      	bhi.n	8002da0 <_isatty+0x8>
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002d9c:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8002d9e:	4770      	bx	lr
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002da0:	4b02      	ldr	r3, [pc, #8]	; (8002dac <_isatty+0x14>)
 8002da2:	2209      	movs	r2, #9
 8002da4:	601a      	str	r2, [r3, #0]
		return 0;
 8002da6:	2000      	movs	r0, #0
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20001690 	.word	0x20001690

08002db0 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002db0:	f241 6390 	movw	r3, #5776	; 0x1690
 8002db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002db8:	2216      	movs	r2, #22
 8002dba:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop

08002dc4 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002dc4:	f241 6390 	movw	r3, #5776	; 0x1690
 8002dc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dcc:	221f      	movs	r2, #31
 8002dce:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop

08002dd8 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002dd8:	2000      	movs	r0, #0
 8002dda:	4770      	bx	lr

08002ddc <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002ddc:	b430      	push	{r4, r5}
	int n;
	int num = 0;
	switch (file) {
 8002dde:	b130      	cbz	r0, 8002dee <_read+0x12>
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <_read+0x34>)
 8002de2:	2209      	movs	r2, #9
 8002de4:	601a      	str	r2, [r3, #0]
				return -1;
 8002de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 8002dea:	bc30      	pop	{r4, r5}
 8002dec:	4770      	bx	lr
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002dee:	2a00      	cmp	r2, #0
 8002df0:	ddfb      	ble.n	8002dea <_read+0xe>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002df2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002df6:	188d      	adds	r5, r1, r2
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002df8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8002dfc:	8823      	ldrh	r3, [r4, #0]
 8002dfe:	069b      	lsls	r3, r3, #26
 8002e00:	d5fc      	bpl.n	8002dfc <_read+0x20>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002e02:	88a3      	ldrh	r3, [r4, #4]
 8002e04:	f801 3b01 	strb.w	r3, [r1], #1
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002e08:	42a9      	cmp	r1, r5
 8002e0a:	d1f7      	bne.n	8002dfc <_read+0x20>
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	e7ec      	b.n	8002dea <_read+0xe>
 8002e10:	20001690 	.word	0x20001690

08002e14 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e18:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop

08002e28 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002e28:	f241 6390 	movw	r3, #5776	; 0x1690
 8002e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e30:	2202      	movs	r2, #2
 8002e32:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop

08002e3c <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002e3c:	f241 6390 	movw	r3, #5776	; 0x1690
 8002e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e44:	220a      	movs	r2, #10
 8002e46:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop

08002e50 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002e50:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002e52:	b430      	push	{r4, r5}
	int n;
	switch (file) {
 8002e54:	d009      	beq.n	8002e6a <_write+0x1a>
 8002e56:	2802      	cmp	r0, #2
 8002e58:	d017      	beq.n	8002e8a <_write+0x3a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <_write+0x5c>)
 8002e5c:	2209      	movs	r2, #9
 8002e5e:	601a      	str	r2, [r3, #0]
				return -1;
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8002e64:	4610      	mov	r0, r2
 8002e66:	bc30      	pop	{r4, r5}
 8002e68:	4770      	bx	lr
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002e6a:	2a00      	cmp	r2, #0
 8002e6c:	ddfa      	ble.n	8002e64 <_write+0x14>
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002e6e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002e72:	188d      	adds	r5, r1, r2
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002e74:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8002e78:	8823      	ldrh	r3, [r4, #0]
 8002e7a:	065b      	lsls	r3, r3, #25
 8002e7c:	d5fc      	bpl.n	8002e78 <_write+0x28>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002e82:	42a9      	cmp	r1, r5
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002e84:	80a3      	strh	r3, [r4, #4]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002e86:	d1f7      	bne.n	8002e78 <_write+0x28>
 8002e88:	e7ec      	b.n	8002e64 <_write+0x14>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002e8a:	2a00      	cmp	r2, #0
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002e8c:	bfc2      	ittt	gt
 8002e8e:	f44f 5480 	movgt.w	r4, #4096	; 0x1000
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002e92:	188d      	addgt	r5, r1, r2
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002e94:	f2c4 0401 	movtgt	r4, #16385	; 0x4001
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002e98:	dde4      	ble.n	8002e64 <_write+0x14>
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002e9a:	8823      	ldrh	r3, [r4, #0]
 8002e9c:	0658      	lsls	r0, r3, #25
 8002e9e:	d5fc      	bpl.n	8002e9a <_write+0x4a>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002ea0:	f811 3b01 	ldrb.w	r3, [r1], #1
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002ea4:	42a9      	cmp	r1, r5
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002ea6:	80a3      	strh	r3, [r4, #4]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002ea8:	d1f7      	bne.n	8002e9a <_write+0x4a>
 8002eaa:	e7db      	b.n	8002e64 <_write+0x14>
 8002eac:	20001690 	.word	0x20001690

08002eb0 <_sbrk>:

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ee8 <_sbrk+0x38>)
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8002eb2:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8002eb4:	6813      	ldr	r3, [r2, #0]
 8002eb6:	b1a3      	cbz	r3, 8002ee2 <_sbrk+0x32>
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8002eb8:	f3ef 8108 	mrs	r1, MSP
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8002ebc:	1818      	adds	r0, r3, r0
 8002ebe:	4288      	cmp	r0, r1
		errno = ENOMEM;
		return (caddr_t) -1;
		//abort ();
	}

	heap_end += incr;
 8002ec0:	bf98      	it	ls
 8002ec2:	6010      	strls	r0, [r2, #0]
		heap_end = &_ebss;
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8002ec4:	d801      	bhi.n	8002eca <_sbrk+0x1a>
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	bd08      	pop	{r3, pc}
	}
	prev_heap_end = heap_end;

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8002eca:	2219      	movs	r2, #25
 8002ecc:	2002      	movs	r0, #2
 8002ece:	4907      	ldr	r1, [pc, #28]	; (8002eec <_sbrk+0x3c>)
 8002ed0:	f7ff ffbe 	bl	8002e50 <_write>
		errno = ENOMEM;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <_sbrk+0x40>)
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}

	heap_end += incr;
	return (caddr_t) prev_heap_end;

}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	bd08      	pop	{r3, pc}
	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
		heap_end = &_ebss;
 8002ee2:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <_sbrk+0x44>)
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e7e7      	b.n	8002eb8 <_sbrk+0x8>
 8002ee8:	200009c4 	.word	0x200009c4
 8002eec:	08008cdc 	.word	0x08008cdc
 8002ef0:	20001690 	.word	0x20001690
 8002ef4:	20001694 	.word	0x20001694

08002ef8 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8002ef8:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 8002efa:	2001      	movs	r0, #1
 8002efc:	4902      	ldr	r1, [pc, #8]	; (8002f08 <_exit+0x10>)
 8002efe:	2204      	movs	r2, #4
 8002f00:	f7ff ffa6 	bl	8002e50 <_write>
 8002f04:	e7fe      	b.n	8002f04 <_exit+0xc>
 8002f06:	bf00      	nop
 8002f08:	08008cf8 	.word	0x08008cf8

08002f0c <I2C_Configuration>:
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8002f0c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8002f0e:	2101      	movs	r1, #1
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8002f10:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8002f12:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8002f16:	f44f 6480 	mov.w	r4, #1024	; 0x400
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8002f1a:	f7fe fcb1 	bl	8001880 <RCC_APB1PeriphClockCmd>
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8002f1e:	f2c4 0402 	movt	r4, #16386	; 0x4002
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 8002f22:	2002      	movs	r0, #2
 8002f24:	2101      	movs	r1, #1
 8002f26:	f7fe fc81 	bl	800182c <RCC_AHB1PeriphClockCmd>

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8002f2a:	2106      	movs	r1, #6
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7fe f8dc 	bl	80010ec <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 8002f34:	4620      	mov	r0, r4
 8002f36:	2204      	movs	r2, #4
 8002f38:	2109      	movs	r1, #9
 8002f3a:	f7fe f8d7 	bl	80010ec <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002f3e:	2501      	movs	r5, #1
  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f40:	2302      	movs	r3, #2

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
 8002f42:	f44f 7210 	mov.w	r2, #576	; 0x240
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002f46:	4620      	mov	r0, r4
 8002f48:	a904      	add	r1, sp, #16

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
 8002f4a:	9204      	str	r2, [sp, #16]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f4c:	f88d 3015 	strb.w	r3, [sp, #21]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002f50:	f88d 3014 	strb.w	r3, [sp, #20]
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8002f54:	f88d 5016 	strb.w	r5, [sp, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002f58:	f88d 5017 	strb.w	r5, [sp, #23]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002f5c:	f7fe f82a 	bl	8000fb4 <GPIO_Init>
  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 8002f60:	a906      	add	r1, sp, #24
 8002f62:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8002f66:	f365 431f 	bfi	r3, r5, #16, #16

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002f6a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 8002f6e:	f841 3d18 	str.w	r3, [r1, #-24]!
//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8ad 3004 	strh.w	r3, [sp, #4]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 8002f78:	0420      	lsls	r0, r4, #16
//Remap_I2C1_Configuration();
//#endif

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002f7a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 8002f7e:	4669      	mov	r1, sp
//Remap_I2C1_Configuration();
//#endif

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8002f80:	f8ad 3006 	strh.w	r3, [sp, #6]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 8002f84:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
//#endif

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8002f88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8c:	f8ad 300a 	strh.w	r3, [sp, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8002f90:	f8ad 400c 	strh.w	r4, [sp, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 8002f94:	f7fe f8fa 	bl	800118c <I2C_Init>
  /* I2C Peripheral Enable */
  I2C_Cmd(I2C1, ENABLE);
 8002f98:	0420      	lsls	r0, r4, #16
 8002f9a:	f440 40a8 	orr.w	r0, r0, #21504	; 0x5400
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	f7fe f972 	bl	8001288 <I2C_Cmd>
}
 8002fa4:	b007      	add	sp, #28
 8002fa6:	bd30      	pop	{r4, r5, pc}

08002fa8 <ST7032i_Command_Write>:
  * @brief  Write Command to ST7032i
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
 8002fa8:	b500      	push	{lr}
 8002faa:	b083      	sub	sp, #12
	uint8_t data[] = { 0b00000000, Data };
 8002fac:	2300      	movs	r3, #0
 8002fae:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8002fb2:	a901      	add	r1, sp, #4
 8002fb4:	203e      	movs	r0, #62	; 0x3e
 8002fb6:	2202      	movs	r2, #2
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
	uint8_t data[] = { 0b00000000, Data };
 8002fb8:	f88d 3004 	strb.w	r3, [sp, #4]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8002fbc:	f7fd fa96 	bl	80004ec <i2c_transmit>
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
}
 8002fc0:	b003      	add	sp, #12
 8002fc2:	bd00      	pop	{pc}

08002fc4 <ST7032i_Icon_Off>:
  * @brief  Put off icon whili Icon RAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Icon_Off(void)
{
 8002fc4:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
 8002fc6:	f240 03cc 	movw	r3, #204	; 0xcc
 8002fca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fce:	7818      	ldrb	r0, [r3, #0]
 8002fd0:	785b      	ldrb	r3, [r3, #1]
 8002fd2:	f3c0 1001 	ubfx	r0, r0, #4, #2
 8002fd6:	4318      	orrs	r0, r3
 8002fd8:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8002fdc:	f7ff ffe4 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 8002fe0:	201b      	movs	r0, #27
}
 8002fe2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_Off(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
  delay_us(27);
 8002fe6:	f7fd b8cf 	b.w	8000188 <delay_us>
 8002fea:	bf00      	nop

08002fec <ST7032i_Icon_On>:
  * @brief  Display icon
  * @param  None
  * @retval None
  */
void ST7032i_Icon_On(void)
{
 8002fec:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
 8002fee:	f240 03cc 	movw	r3, #204	; 0xcc
 8002ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	7858      	ldrb	r0, [r3, #1]
 8002ffa:	f3c2 1301 	ubfx	r3, r2, #4, #2
 8002ffe:	f040 0008 	orr.w	r0, r0, #8
 8003002:	4318      	orrs	r0, r3
 8003004:	f7ff ffd0 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 8003008:	201b      	movs	r0, #27
}
 800300a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_On(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
  delay_us(27);
 800300e:	f7fd b8bb 	b.w	8000188 <delay_us>
 8003012:	bf00      	nop

08003014 <ST7032i_Set_Contrast>:
  * @brief  Set display contrast. value is to be 0 - 63
  * @param  contrast: contrast
  * @retval None
  */
void ST7032i_Set_Contrast(uint8_t contrast)
{
 8003014:	b510      	push	{r4, lr}
 8003016:	4604      	mov	r4, r0
  //Contrast set
  ST7032i_Command_Write(0b01110000 | (contrast & 0b00001111));
 8003018:	f000 000f 	and.w	r0, r0, #15
 800301c:	f040 0070 	orr.w	r0, r0, #112	; 0x70
 8003020:	f7ff ffc2 	bl	8002fa8 <ST7032i_Command_Write>

  delay_us(27);
 8003024:	201b      	movs	r0, #27
 8003026:	f7fd f8af 	bl	8000188 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );
 800302a:	f240 03cc 	movw	r3, #204	; 0xcc
 800302e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003032:	f3c4 1001 	ubfx	r0, r4, #4, #2
 8003036:	785b      	ldrb	r3, [r3, #1]
 8003038:	4318      	orrs	r0, r3
 800303a:	f7ff ffb5 	bl	8002fa8 <ST7032i_Command_Write>

  delay_us(27);
 800303e:	201b      	movs	r0, #27
}
 8003040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );

  delay_us(27);
 8003044:	f7fd b8a0 	b.w	8000188 <delay_us>

08003048 <ST7032i_Set_DDRAM>:
  * @brief  set DDRAM address
  * @param  address : DDRAM address
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
 8003048:	b510      	push	{r4, lr}
 800304a:	4604      	mov	r4, r0
  ST7032i_Command_Write(0b10000000 | address);
 800304c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003050:	f7ff ffaa 	bl	8002fa8 <ST7032i_Command_Write>
  DDRAM_Address = address;
 8003054:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8003058:	f2c2 0300 	movt	r3, #8192	; 0x2000
  delay_us(27);
 800305c:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
 800305e:	701c      	strb	r4, [r3, #0]
  delay_us(27);
}
 8003060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
  delay_us(27);
 8003064:	f7fd b890 	b.w	8000188 <delay_us>

08003068 <ST7032i_Cursor_Blink_Off>:
  * @brief  display square cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
 8003068:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
 800306a:	f240 03cc 	movw	r3, #204	; 0xcc
 800306e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003072:	7898      	ldrb	r0, [r3, #2]
 8003074:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8003078:	f7ff ff96 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 800307c:	201b      	movs	r0, #27
}
 800307e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
  delay_us(27);
 8003082:	f7fd b881 	b.w	8000188 <delay_us>
 8003086:	bf00      	nop

08003088 <ST7032i_Cursor_Blink_On>:
  * @brief  make square cursor brink
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
 8003088:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
 800308a:	f240 03cc 	movw	r3, #204	; 0xcc
 800308e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003092:	7898      	ldrb	r0, [r3, #2]
 8003094:	f040 0001 	orr.w	r0, r0, #1
 8003098:	f7ff ff86 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 800309c:	201b      	movs	r0, #27
}
 800309e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
  delay_us(27);
 80030a2:	f7fd b871 	b.w	8000188 <delay_us>
 80030a6:	bf00      	nop

080030a8 <ST7032i_Cursor_Off>:
  * @brief  put off cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
 80030a8:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
 80030aa:	f240 03cc 	movw	r3, #204	; 0xcc
 80030ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030b2:	7898      	ldrb	r0, [r3, #2]
 80030b4:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 80030b8:	f7ff ff76 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 80030bc:	201b      	movs	r0, #27
}
 80030be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
  delay_us(27);
 80030c2:	f7fd b861 	b.w	8000188 <delay_us>
 80030c6:	bf00      	nop

080030c8 <ST7032i_Cursor_On>:
  * @brief  display under line cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
 80030c8:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
 80030ca:	f240 03cc 	movw	r3, #204	; 0xcc
 80030ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030d2:	7898      	ldrb	r0, [r3, #2]
 80030d4:	f040 0002 	orr.w	r0, r0, #2
 80030d8:	f7ff ff66 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 80030dc:	201b      	movs	r0, #27
}
 80030de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
  delay_us(27);
 80030e2:	f7fd b851 	b.w	8000188 <delay_us>
 80030e6:	bf00      	nop

080030e8 <ST7032i_Display_Off>:
  * @brief  put off display while DDRAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Display_Off(void)
{
 80030e8:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
 80030ea:	f240 03cc 	movw	r3, #204	; 0xcc
 80030ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030f2:	7898      	ldrb	r0, [r3, #2]
 80030f4:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 80030f8:	f7ff ff56 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 80030fc:	201b      	movs	r0, #27
}
 80030fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
  delay_us(27);
 8003102:	f7fd b841 	b.w	8000188 <delay_us>
 8003106:	bf00      	nop

08003108 <ST7032i_Display_On>:
  * @brief  put on display
  * @param  None
  * @retval None
  */
void ST7032i_Display_On(void)
{
 8003108:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
 800310a:	f240 03cc 	movw	r3, #204	; 0xcc
 800310e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003112:	7898      	ldrb	r0, [r3, #2]
 8003114:	f040 0004 	orr.w	r0, r0, #4
 8003118:	f7ff ff46 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 800311c:	201b      	movs	r0, #27
}
 800311e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
  delay_us(27);
 8003122:	f7fd b831 	b.w	8000188 <delay_us>
 8003126:	bf00      	nop

08003128 <ST7032i_Shift_Disable>:
  * @brief  disables shift fucntion
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
 8003128:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
 800312a:	f240 03cc 	movw	r3, #204	; 0xcc
 800312e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003132:	78d8      	ldrb	r0, [r3, #3]
 8003134:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8003138:	f7ff ff36 	bl	8002fa8 <ST7032i_Command_Write>
  Shift = 0;
 800313c:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8003140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003144:	2200      	movs	r2, #0
  delay_us(27);
 8003146:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
 8003148:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 800314a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
  delay_us(27);
 800314e:	f7fd b81b 	b.w	8000188 <delay_us>
 8003152:	bf00      	nop

08003154 <ST7032i_Shift_Enable>:
  * @brief  shift entire display data is send
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
 8003154:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
 8003156:	f240 03cc 	movw	r3, #204	; 0xcc
 800315a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800315e:	78d8      	ldrb	r0, [r3, #3]
 8003160:	f040 0001 	orr.w	r0, r0, #1
 8003164:	f7ff ff20 	bl	8002fa8 <ST7032i_Command_Write>
  Shift = 1;
 8003168:	f640 13cc 	movw	r3, #2508	; 0x9cc
 800316c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003170:	2201      	movs	r2, #1
  delay_us(27);
 8003172:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
 8003174:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 8003176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
  delay_us(27);
 800317a:	f7fd b805 	b.w	8000188 <delay_us>
 800317e:	bf00      	nop

08003180 <ST7032i_Decrement>:
  * @brief  decrement address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Decrement(void)
{
 8003180:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
 8003182:	f240 04cc 	movw	r4, #204	; 0xcc
 8003186:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800318a:	78e0      	ldrb	r0, [r4, #3]
 800318c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8003190:	f7ff ff0a 	bl	8002fa8 <ST7032i_Command_Write>
  Increment = -1;
 8003194:	23ff      	movs	r3, #255	; 0xff
  delay_us(27);
 8003196:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
 8003198:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 800319a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
  delay_us(27);
 800319e:	f7fc bff3 	b.w	8000188 <delay_us>
 80031a2:	bf00      	nop

080031a4 <ST7032i_Increment>:
  * @brief  increment address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Increment(void)
{
 80031a4:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
 80031a6:	f240 04cc 	movw	r4, #204	; 0xcc
 80031aa:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80031ae:	78e0      	ldrb	r0, [r4, #3]
 80031b0:	f040 0002 	orr.w	r0, r0, #2
 80031b4:	f7ff fef8 	bl	8002fa8 <ST7032i_Command_Write>
  Increment = 1;
 80031b8:	2301      	movs	r3, #1
  delay_us(27);
 80031ba:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
 80031bc:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 80031be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
  delay_us(27);
 80031c2:	f7fc bfe1 	b.w	8000188 <delay_us>
 80031c6:	bf00      	nop

080031c8 <ST7032i_Return>:
  * @brief  Return to home position
  * @param  None
  * @retval None
  */
void ST7032i_Return(void)
{
 80031c8:	b508      	push	{r3, lr}
  ST7032i_Command_Write(0b00000010);
 80031ca:	2002      	movs	r0, #2
 80031cc:	f7ff feec 	bl	8002fa8 <ST7032i_Command_Write>
  DDRAM_Address = 0;
 80031d0:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80031d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031d8:	2200      	movs	r2, #0
  delay_ms(2);
 80031da:	2002      	movs	r0, #2
  * @retval None
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
 80031dc:	701a      	strb	r2, [r3, #0]
  delay_ms(2);
}
 80031de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
  delay_ms(2);
 80031e2:	f7fc bffd 	b.w	80001e0 <delay_ms>
 80031e6:	bf00      	nop

080031e8 <ST7032i_Clear>:
  * @brief  Clear Display
  * @param  None
  * @retval None
  */
void ST7032i_Clear(void)
{
 80031e8:	b508      	push	{r3, lr}
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
 80031ea:	2001      	movs	r0, #1
 80031ec:	f7ff fedc 	bl	8002fa8 <ST7032i_Command_Write>
  DDRAM_Address = 0;
 80031f0:	4a07      	ldr	r2, [pc, #28]	; (8003210 <ST7032i_Clear+0x28>)
 80031f2:	4908      	ldr	r1, [pc, #32]	; (8003214 <ST7032i_Clear+0x2c>)
 80031f4:	2300      	movs	r3, #0
 80031f6:	7013      	strb	r3, [r2, #0]
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 80031f8:	2220      	movs	r2, #32
      DDRAM_Data[1][i] =  ' ';
 80031fa:	18c8      	adds	r0, r1, r3

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 80031fc:	54ca      	strb	r2, [r1, r3]
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 80031fe:	3301      	adds	r3, #1
 8003200:	2b10      	cmp	r3, #16
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
 8003202:	7402      	strb	r2, [r0, #16]
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 8003204:	d1f9      	bne.n	80031fa <ST7032i_Clear+0x12>
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 8003206:	2002      	movs	r0, #2
}
 8003208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 800320c:	f7fc bfe8 	b.w	80001e0 <delay_ms>
 8003210:	200009cc 	.word	0x200009cc
 8003214:	20001660 	.word	0x20001660

08003218 <ST7032i_Init>:
  * @brief  Initialize ST7032i LCD and I2C interface
  * @param  None
  * @retval None
  */
void ST7032i_Init(void)
{
 8003218:	b510      	push	{r4, lr}
//  delay_ms(40);

//  I2C_Configuration();

  //Function Set
  ST7032i_Command_Write(0b00111000);
 800321a:	2038      	movs	r0, #56	; 0x38
 800321c:	f7ff fec4 	bl	8002fa8 <ST7032i_Command_Write>

  delay_us(27);
 8003220:	201b      	movs	r0, #27
 8003222:	f7fc ffb1 	bl	8000188 <delay_us>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 8003226:	2039      	movs	r0, #57	; 0x39
 8003228:	f7ff febe 	bl	8002fa8 <ST7032i_Command_Write>

  delay_us(27);
 800322c:	201b      	movs	r0, #27
 800322e:	f7fc ffab 	bl	8000188 <delay_us>

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);
 8003232:	2014      	movs	r0, #20
 8003234:	f7ff feb8 	bl	8002fa8 <ST7032i_Command_Write>
  ST7032i_Command_Write(0b01110000);

  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 8003238:	f240 04cc 	movw	r4, #204	; 0xcc
  delay_us(27);

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);

  delay_us(27);
 800323c:	201b      	movs	r0, #27
  ST7032i_Command_Write(0b01110000);

  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 800323e:	f2c2 0400 	movt	r4, #8192	; 0x2000
  delay_us(27);

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);

  delay_us(27);
 8003242:	f7fc ffa1 	bl	8000188 <delay_us>

  //Contrast set
  ST7032i_Command_Write(0b01110000);
 8003246:	2070      	movs	r0, #112	; 0x70
 8003248:	f7ff feae 	bl	8002fa8 <ST7032i_Command_Write>

  delay_us(27);
 800324c:	201b      	movs	r0, #27
 800324e:	f7fc ff9b 	bl	8000188 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 8003252:	7860      	ldrb	r0, [r4, #1]
 8003254:	f7ff fea8 	bl	8002fa8 <ST7032i_Command_Write>

  delay_us(27);
 8003258:	201b      	movs	r0, #27
 800325a:	f7fc ff95 	bl	8000188 <delay_us>

  //Contrast set
  ST7032i_Set_Contrast(Contrast);
 800325e:	7820      	ldrb	r0, [r4, #0]
 8003260:	f7ff fed8 	bl	8003014 <ST7032i_Set_Contrast>

  //Follower control
  ST7032i_Command_Write(0b01101100);
 8003264:	206c      	movs	r0, #108	; 0x6c
 8003266:	f7ff fe9f 	bl	8002fa8 <ST7032i_Command_Write>

  delay_ms(200);
 800326a:	20c8      	movs	r0, #200	; 0xc8
 800326c:	f7fc ffb8 	bl	80001e0 <delay_ms>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 8003270:	2039      	movs	r0, #57	; 0x39
 8003272:	f7ff fe99 	bl	8002fa8 <ST7032i_Command_Write>

  delay_us(27);
 8003276:	201b      	movs	r0, #27
 8003278:	f7fc ff86 	bl	8000188 <delay_us>

  //Entry mode
  ST7032i_Command_Write(Entry_Mode);
 800327c:	78e0      	ldrb	r0, [r4, #3]
 800327e:	f7ff fe93 	bl	8002fa8 <ST7032i_Command_Write>

  delay_us(27);
 8003282:	201b      	movs	r0, #27
 8003284:	f7fc ff80 	bl	8000188 <delay_us>

  //Display control : on
  ST7032i_Command_Write(Display);
 8003288:	78a0      	ldrb	r0, [r4, #2]
 800328a:	f7ff fe8d 	bl	8002fa8 <ST7032i_Command_Write>

  delay_us(27);
 800328e:	201b      	movs	r0, #27
 8003290:	f7fc ff7a 	bl	8000188 <delay_us>

  //Clear
  ST7032i_Clear();
}
 8003294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ST7032i_Command_Write(Display);

  delay_us(27);

  //Clear
  ST7032i_Clear();
 8003298:	e7a6      	b.n	80031e8 <ST7032i_Clear>
 800329a:	bf00      	nop

0800329c <ST7032i_Data_Write>:
  * @brief  Write Data to ST7032i
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
 800329c:	b500      	push	{lr}
 800329e:	b083      	sub	sp, #12
	uint8_t data[] = { 0b01000000, Data };
 80032a0:	2340      	movs	r3, #64	; 0x40
 80032a2:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(ST7032I_ADDR, data, 2);
 80032a6:	a901      	add	r1, sp, #4
 80032a8:	203e      	movs	r0, #62	; 0x3e
 80032aa:	2202      	movs	r2, #2
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
	uint8_t data[] = { 0b01000000, Data };
 80032ac:	f88d 3004 	strb.w	r3, [sp, #4]
	i2c_transmit(ST7032I_ADDR, data, 2);
 80032b0:	f7fd f91c 	bl	80004ec <i2c_transmit>
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
}
 80032b4:	b003      	add	sp, #12
 80032b6:	bd00      	pop	{pc}

080032b8 <ST7032i_Putchar>:
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
{
 80032b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
  delay_us(27);
  if(DDRAM_Address < 0x10)
 80032bc:	4f61      	ldr	r7, [pc, #388]	; (8003444 <ST7032i_Putchar+0x18c>)
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
{
 80032be:	4604      	mov	r4, r0
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
 80032c0:	b2c0      	uxtb	r0, r0
 80032c2:	f7ff ffeb 	bl	800329c <ST7032i_Data_Write>
  delay_us(27);
 80032c6:	201b      	movs	r0, #27
 80032c8:	f7fc ff5e 	bl	8000188 <delay_us>
  if(DDRAM_Address < 0x10)
 80032cc:	783b      	ldrb	r3, [r7, #0]
 80032ce:	2b0f      	cmp	r3, #15
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 80032d0:	783b      	ldrb	r3, [r7, #0]
{
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
  delay_us(27);
  if(DDRAM_Address < 0x10)
 80032d2:	d81e      	bhi.n	8003312 <ST7032i_Putchar+0x5a>
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 80032d4:	4d5c      	ldr	r5, [pc, #368]	; (8003448 <ST7032i_Putchar+0x190>)
 80032d6:	54ec      	strb	r4, [r5, r3]
    }
  else if (DDRAM_Address >= 0x40 && DDRAM_Address < 0x50)
    {
      DDRAM_Data[1][DDRAM_Address - 0x40] = chardata;
    }
  if (Shift == 0)
 80032d8:	787a      	ldrb	r2, [r7, #1]
 80032da:	4b5a      	ldr	r3, [pc, #360]	; (8003444 <ST7032i_Putchar+0x18c>)
 80032dc:	2a00      	cmp	r2, #0
 80032de:	d126      	bne.n	800332e <ST7032i_Putchar+0x76>
    {
      DDRAM_Address = DDRAM_Address + Increment;
 80032e0:	4a5a      	ldr	r2, [pc, #360]	; (800344c <ST7032i_Putchar+0x194>)
 80032e2:	7819      	ldrb	r1, [r3, #0]
 80032e4:	7912      	ldrb	r2, [r2, #4]
 80032e6:	188a      	adds	r2, r1, r2
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]
        }
      DDRAM_Data[0][0] = ' ';
      DDRAM_Data[1][0] = ' ';
    }

  if (DDRAM_Address == 0x10)
 80032ec:	783b      	ldrb	r3, [r7, #0]
 80032ee:	4a55      	ldr	r2, [pc, #340]	; (8003444 <ST7032i_Putchar+0x18c>)
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d07d      	beq.n	80033f0 <ST7032i_Putchar+0x138>
      DDRAM_Address = 0x40;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
    }

  if (DDRAM_Address == 0x3F)
 80032f4:	783b      	ldrb	r3, [r7, #0]
 80032f6:	4a53      	ldr	r2, [pc, #332]	; (8003444 <ST7032i_Putchar+0x18c>)
 80032f8:	2b3f      	cmp	r3, #63	; 0x3f
 80032fa:	f000 8088 	beq.w	800340e <ST7032i_Putchar+0x156>
      DDRAM_Address = 0x0F;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
    }

  if (DDRAM_Address == 0xFF)
 80032fe:	783b      	ldrb	r3, [r7, #0]
 8003300:	4a50      	ldr	r2, [pc, #320]	; (8003444 <ST7032i_Putchar+0x18c>)
 8003302:	2bff      	cmp	r3, #255	; 0xff
 8003304:	f000 8092 	beq.w	800342c <ST7032i_Putchar+0x174>
      DDRAM_Address = 0x0;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
 8003308:	783b      	ldrb	r3, [r7, #0]
 800330a:	2b50      	cmp	r3, #80	; 0x50
 800330c:	d02b      	beq.n	8003366 <ST7032i_Putchar+0xae>
 800330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  delay_us(27);
  if(DDRAM_Address < 0x10)
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
    }
  else if (DDRAM_Address >= 0x40 && DDRAM_Address < 0x50)
 8003312:	2b3f      	cmp	r3, #63	; 0x3f
 8003314:	d9e0      	bls.n	80032d8 <ST7032i_Putchar+0x20>
 8003316:	783b      	ldrb	r3, [r7, #0]
 8003318:	2b4f      	cmp	r3, #79	; 0x4f
    {
      DDRAM_Data[1][DDRAM_Address - 0x40] = chardata;
 800331a:	bf9e      	ittt	ls
 800331c:	783b      	ldrbls	r3, [r7, #0]
 800331e:	4d4c      	ldrls	r5, [pc, #304]	; (8003450 <ST7032i_Putchar+0x198>)
 8003320:	195d      	addls	r5, r3, r5
    }
  if (Shift == 0)
 8003322:	4b48      	ldr	r3, [pc, #288]	; (8003444 <ST7032i_Putchar+0x18c>)
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
    }
  else if (DDRAM_Address >= 0x40 && DDRAM_Address < 0x50)
    {
      DDRAM_Data[1][DDRAM_Address - 0x40] = chardata;
 8003324:	bf98      	it	ls
 8003326:	742c      	strbls	r4, [r5, #16]
    }
  if (Shift == 0)
 8003328:	787a      	ldrb	r2, [r7, #1]
 800332a:	2a00      	cmp	r2, #0
 800332c:	d0d8      	beq.n	80032e0 <ST7032i_Putchar+0x28>
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d047      	beq.n	80033c4 <ST7032i_Putchar+0x10c>
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
 8003334:	787b      	ldrb	r3, [r7, #1]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d1d8      	bne.n	80032ec <ST7032i_Putchar+0x34>
 800333a:	4b44      	ldr	r3, [pc, #272]	; (800344c <ST7032i_Putchar+0x194>)
 800333c:	791b      	ldrb	r3, [r3, #4]
 800333e:	b25b      	sxtb	r3, r3
 8003340:	3301      	adds	r3, #1
 8003342:	d1d3      	bne.n	80032ec <ST7032i_Putchar+0x34>
 8003344:	4d40      	ldr	r5, [pc, #256]	; (8003448 <ST7032i_Putchar+0x190>)
 8003346:	230f      	movs	r3, #15
/**
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
 8003348:	1e5a      	subs	r2, r3, #1
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
 800334a:	18a8      	adds	r0, r5, r2
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 800334c:	5ca9      	ldrb	r1, [r5, r2]
 800334e:	4c3e      	ldr	r4, [pc, #248]	; (8003448 <ST7032i_Putchar+0x190>)
 8003350:	54e9      	strb	r1, [r5, r3]
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
 8003352:	18e9      	adds	r1, r5, r3
 8003354:	7c00      	ldrb	r0, [r0, #16]
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
 8003356:	4613      	mov	r3, r2
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
 8003358:	7408      	strb	r0, [r1, #16]
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
 800335a:	2a00      	cmp	r2, #0
 800335c:	d1f4      	bne.n	8003348 <ST7032i_Putchar+0x90>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
        }
      DDRAM_Data[0][0] = ' ';
 800335e:	2320      	movs	r3, #32
 8003360:	7023      	strb	r3, [r4, #0]
      DDRAM_Data[1][0] = ' ';
 8003362:	7423      	strb	r3, [r4, #16]
 8003364:	e7c2      	b.n	80032ec <ST7032i_Putchar+0x34>
 8003366:	4d38      	ldr	r5, [pc, #224]	; (8003448 <ST7032i_Putchar+0x190>)
      DDRAM_Address = 0x0;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
 8003368:	2400      	movs	r4, #0
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 800336a:	192b      	adds	r3, r5, r4
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 800336c:	f064 007f 	orn	r0, r4, #127	; 0x7f

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8003370:	7c1b      	ldrb	r3, [r3, #16]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8003372:	b2c0      	uxtb	r0, r0

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8003374:	552b      	strb	r3, [r5, r4]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8003376:	f7ff fe17 	bl	8002fa8 <ST7032i_Command_Write>
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 800337a:	5d28      	ldrb	r0, [r5, r4]
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 800337c:	3401      	adds	r4, #1
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 800337e:	f7ff ff8d 	bl	800329c <ST7032i_Data_Write>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 8003382:	2c10      	cmp	r4, #16
 8003384:	d1f1      	bne.n	800336a <ST7032i_Putchar+0xb2>
 8003386:	2400      	movs	r4, #0
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8003388:	f04f 0820 	mov.w	r8, #32
 800338c:	192e      	adds	r6, r5, r4
/**
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
 800338e:	f104 0040 	add.w	r0, r4, #64	; 0x40
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 8003392:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8003396:	b2c0      	uxtb	r0, r0
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8003398:	f886 8010 	strb.w	r8, [r6, #16]
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 800339c:	f7ff fe04 	bl	8002fa8 <ST7032i_Command_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 80033a0:	3401      	adds	r4, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 80033a2:	7c30      	ldrb	r0, [r6, #16]
 80033a4:	f7ff ff7a 	bl	800329c <ST7032i_Data_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 80033a8:	2c10      	cmp	r4, #16
 80033aa:	d1ef      	bne.n	800338c <ST7032i_Putchar+0xd4>
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
 80033ac:	2340      	movs	r3, #64	; 0x40
 80033ae:	703b      	strb	r3, [r7, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 80033b0:	7838      	ldrb	r0, [r7, #0]
 80033b2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80033b6:	f7ff fdf7 	bl	8002fa8 <ST7032i_Command_Write>
      delay_us(27);
 80033ba:	201b      	movs	r0, #27
    }
}
 80033bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
 80033c0:	f7fc bee2 	b.w	8000188 <delay_us>
    }
  if (Shift == 0)
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <ST7032i_Putchar+0x194>)
 80033c6:	791b      	ldrb	r3, [r3, #4]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d1b3      	bne.n	8003334 <ST7032i_Putchar+0x7c>
 80033cc:	2200      	movs	r2, #0
 80033ce:	4d1e      	ldr	r5, [pc, #120]	; (8003448 <ST7032i_Putchar+0x190>)
 80033d0:	e000      	b.n	80033d4 <ST7032i_Putchar+0x11c>
    {
      for (i = 0 ; i< 15; i++)
 80033d2:	461a      	mov	r2, r3
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80033d4:	1c53      	adds	r3, r2, #1
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
 80033d6:	18e9      	adds	r1, r5, r3
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80033d8:	5ce8      	ldrb	r0, [r5, r3]
 80033da:	4c1b      	ldr	r4, [pc, #108]	; (8003448 <ST7032i_Putchar+0x190>)
 80033dc:	54a8      	strb	r0, [r5, r2]
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
 80033de:	18aa      	adds	r2, r5, r2
 80033e0:	7c09      	ldrb	r1, [r1, #16]
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80033e2:	2b0f      	cmp	r3, #15
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
 80033e4:	7411      	strb	r1, [r2, #16]
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80033e6:	d1f4      	bne.n	80033d2 <ST7032i_Putchar+0x11a>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
 80033e8:	2320      	movs	r3, #32
 80033ea:	73e3      	strb	r3, [r4, #15]
      DDRAM_Data[1][15] = ' ';
 80033ec:	77e3      	strb	r3, [r4, #31]
 80033ee:	e77d      	b.n	80032ec <ST7032i_Putchar+0x34>
      DDRAM_Data[1][0] = ' ';
    }

  if (DDRAM_Address == 0x10)
    {
      DDRAM_Address = 0x40;
 80033f0:	2340      	movs	r3, #64	; 0x40
 80033f2:	7013      	strb	r3, [r2, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 80033f4:	7810      	ldrb	r0, [r2, #0]
 80033f6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80033fa:	f7ff fdd5 	bl	8002fa8 <ST7032i_Command_Write>
      delay_us(27);
 80033fe:	201b      	movs	r0, #27
 8003400:	f7fc fec2 	bl	8000188 <delay_us>
    }

  if (DDRAM_Address == 0x3F)
 8003404:	783b      	ldrb	r3, [r7, #0]
 8003406:	4a0f      	ldr	r2, [pc, #60]	; (8003444 <ST7032i_Putchar+0x18c>)
 8003408:	2b3f      	cmp	r3, #63	; 0x3f
 800340a:	f47f af78 	bne.w	80032fe <ST7032i_Putchar+0x46>
    {
      DDRAM_Address = 0x0F;
 800340e:	230f      	movs	r3, #15
 8003410:	7013      	strb	r3, [r2, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003412:	7810      	ldrb	r0, [r2, #0]
 8003414:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003418:	f7ff fdc6 	bl	8002fa8 <ST7032i_Command_Write>
      delay_us(27);
 800341c:	201b      	movs	r0, #27
 800341e:	f7fc feb3 	bl	8000188 <delay_us>
    }

  if (DDRAM_Address == 0xFF)
 8003422:	783b      	ldrb	r3, [r7, #0]
 8003424:	4a07      	ldr	r2, [pc, #28]	; (8003444 <ST7032i_Putchar+0x18c>)
 8003426:	2bff      	cmp	r3, #255	; 0xff
 8003428:	f47f af6e 	bne.w	8003308 <ST7032i_Putchar+0x50>
    {
      DDRAM_Address = 0x0;
 800342c:	2300      	movs	r3, #0
 800342e:	7013      	strb	r3, [r2, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003430:	7810      	ldrb	r0, [r2, #0]
 8003432:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003436:	f7ff fdb7 	bl	8002fa8 <ST7032i_Command_Write>
      delay_us(27);
 800343a:	201b      	movs	r0, #27
 800343c:	f7fc fea4 	bl	8000188 <delay_us>
 8003440:	e762      	b.n	8003308 <ST7032i_Putchar+0x50>
 8003442:	bf00      	nop
 8003444:	200009cc 	.word	0x200009cc
 8003448:	20001660 	.word	0x20001660
 800344c:	200000cc 	.word	0x200000cc
 8003450:	20001620 	.word	0x20001620

08003454 <ST7032i_Print_String>:
  * @brief  Print string to LCD
  * @param  String: Array which contain string
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	4605      	mov	r5, r0
  uint8_t i = 0;
  while(String[i] != '\0')
 8003458:	7800      	ldrb	r0, [r0, #0]
 800345a:	b140      	cbz	r0, 800346e <ST7032i_Print_String+0x1a>
 800345c:	2400      	movs	r4, #0
    {
      ST7032i_Putchar(String[i]);
      i++;
 800345e:	3401      	adds	r4, #1
 8003460:	b2e4      	uxtb	r4, r4
void ST7032i_Print_String(const int8_t String[])
{
  uint8_t i = 0;
  while(String[i] != '\0')
    {
      ST7032i_Putchar(String[i]);
 8003462:	b240      	sxtb	r0, r0
 8003464:	f7ff ff28 	bl	80032b8 <ST7032i_Putchar>
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
  uint8_t i = 0;
  while(String[i] != '\0')
 8003468:	5d28      	ldrb	r0, [r5, r4]
 800346a:	2800      	cmp	r0, #0
 800346c:	d1f7      	bne.n	800345e <ST7032i_Print_String+0xa>
 800346e:	bd38      	pop	{r3, r4, r5, pc}

08003470 <ST7032i_Icon_Clear>:
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 8003470:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8003472:	f240 04cc 	movw	r4, #204	; 0xcc
 8003476:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800347a:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 800347e:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8003480:	7a20      	ldrb	r0, [r4, #8]
 8003482:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003486:	f7ff fd8f 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 800348a:	201b      	movs	r0, #27
 800348c:	f7fc fe7c 	bl	8000188 <delay_us>

  //icon data reset
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
 8003490:	f241 6380 	movw	r3, #5760	; 0x1680
 8003494:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003498:	5d5b      	ldrb	r3, [r3, r5]
 800349a:	7a60      	ldrb	r0, [r4, #9]
 800349c:	ea23 0000 	bic.w	r0, r3, r0
 80034a0:	f7ff fefc 	bl	800329c <ST7032i_Data_Write>
  delay_us(27);
 80034a4:	201b      	movs	r0, #27
 80034a6:	f7fc fe6f 	bl	8000188 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 80034aa:	f640 13cc 	movw	r3, #2508	; 0x9cc
 80034ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034b2:	7818      	ldrb	r0, [r3, #0]
 80034b4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80034b8:	f7ff fd76 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 80034bc:	201b      	movs	r0, #27

}
 80034be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 80034c2:	f7fc be61 	b.w	8000188 <delay_us>
 80034c6:	bf00      	nop

080034c8 <ST7032i_Icon_Set>:
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 80034c8:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 80034ca:	f240 04cc 	movw	r4, #204	; 0xcc
 80034ce:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80034d2:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 80034d6:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 80034d8:	7a20      	ldrb	r0, [r4, #8]
 80034da:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80034de:	f7ff fd63 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 80034e2:	201b      	movs	r0, #27
 80034e4:	f7fc fe50 	bl	8000188 <delay_us>

  //icon data set
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
 80034e8:	f241 6380 	movw	r3, #5760	; 0x1680
 80034ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034f0:	5d58      	ldrb	r0, [r3, r5]
 80034f2:	7a63      	ldrb	r3, [r4, #9]
 80034f4:	4318      	orrs	r0, r3
 80034f6:	f7ff fed1 	bl	800329c <ST7032i_Data_Write>
  delay_us(27);
 80034fa:	201b      	movs	r0, #27
 80034fc:	f7fc fe44 	bl	8000188 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003500:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8003504:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003508:	7818      	ldrb	r0, [r3, #0]
 800350a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800350e:	f7ff fd4b 	bl	8002fa8 <ST7032i_Command_Write>
  delay_us(27);
 8003512:	201b      	movs	r0, #27
}
 8003514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 8003518:	f7fc be36 	b.w	8000188 <delay_us>
 800351c:	08008d64 	.word	0x08008d64
 8003520:	20000000 	.word	0x20000000
 8003524:	200009c4 	.word	0x200009c4
 8003528:	200009c4 	.word	0x200009c4
 800352c:	20001694 	.word	0x20001694

08003530 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop

08003534 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003534:	e7fe      	b.n	8003534 <HardFault_Handler>
 8003536:	bf00      	nop

08003538 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003538:	e7fe      	b.n	8003538 <MemManage_Handler>
 800353a:	bf00      	nop

0800353c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800353c:	e7fe      	b.n	800353c <BusFault_Handler>
 800353e:	bf00      	nop

08003540 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003540:	e7fe      	b.n	8003540 <UsageFault_Handler>
 8003542:	bf00      	nop

08003544 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop

08003548 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop

0800354c <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop

08003550 <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003550:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003554:	f2c4 0302 	movt	r3, #16386	; 0x4002

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003558:	2200      	movs	r2, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	f041 0101 	orr.w	r1, r1, #1
 8003560:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003562:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003564:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003566:	f243 0110 	movw	r1, #12304	; 0x3010

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800356a:	f020 7084 	bic.w	r0, r0, #17301504	; 0x1080000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800356e:	f2c2 4100 	movt	r1, #9216	; 0x2400

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003572:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8003576:	6018      	str	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003578:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800357a:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800357c:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800357e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8003582:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003584:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003586:	9200      	str	r2, [sp, #0]
 8003588:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003590:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003592:	461a      	mov	r2, r3
 8003594:	e003      	b.n	800359e <SystemInit+0x4e>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003596:	9b00      	ldr	r3, [sp, #0]
 8003598:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800359c:	d009      	beq.n	80035b2 <SystemInit+0x62>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a4:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80035a6:	9b00      	ldr	r3, [sp, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80035ac:	9b01      	ldr	r3, [sp, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f1      	beq.n	8003596 <SystemInit+0x46>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80035b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80035b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80035c0:	bf08      	it	eq
 80035c2:	9301      	streq	r3, [sp, #4]
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80035c4:	d001      	beq.n	80035ca <SystemInit+0x7a>
  {
    HSEStatus = (uint32_t)0x01;
 80035c6:	2301      	movs	r3, #1
 80035c8:	9301      	str	r3, [sp, #4]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }

  if (HSEStatus == (uint32_t)0x01)
 80035ca:	9b01      	ldr	r3, [sp, #4]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d008      	beq.n	80035e2 <SystemInit+0x92>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035d0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80035d4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80035d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035dc:	609a      	str	r2, [r3, #8]
#endif
}
 80035de:	b002      	add	sp, #8
 80035e0:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80035e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80035e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    PWR->CR |= PWR_CR_VOS;
 80035ea:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80035ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80035f0:	f2c4 0200 	movt	r2, #16384	; 0x4000
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80035f4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80035f8:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80035fa:	6811      	ldr	r1, [r2, #0]
 80035fc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003600:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800360c:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800360e:	6899      	ldr	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003610:	f245 4219 	movw	r2, #21529	; 0x5419
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003614:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003618:	f2c0 7240 	movt	r2, #1856	; 0x740
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800361c:	6099      	str	r1, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800361e:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003626:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003628:	4619      	mov	r1, r3
 800362a:	680a      	ldr	r2, [r1, #0]
 800362c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003630:	0192      	lsls	r2, r2, #6
 8003632:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003636:	d5f8      	bpl.n	800362a <SystemInit+0xda>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003638:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800363c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003640:	f240 6105 	movw	r1, #1541	; 0x605
 8003644:	6011      	str	r1, [r2, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	f022 0203 	bic.w	r2, r2, #3
 800364c:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	f042 0202 	orr.w	r2, r2, #2
 8003654:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	f002 020c 	and.w	r2, r2, #12
 800365c:	2a08      	cmp	r2, #8
 800365e:	d1fa      	bne.n	8003656 <SystemInit+0x106>
 8003660:	e7b6      	b.n	80035d0 <SystemInit+0x80>
 8003662:	bf00      	nop

08003664 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003664:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003668:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 8003672:	2a04      	cmp	r2, #4
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 8003674:	bf04      	itt	eq
 8003676:	f44f 5190 	moveq.w	r1, #4608	; 0x1200
 800367a:	f2c0 017a 	movteq	r1, #122	; 0x7a
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 800367e:	d006      	beq.n	800368e <SystemCoreClockUpdate+0x2a>
 8003680:	2a08      	cmp	r2, #8
 8003682:	bf1c      	itt	ne
 8003684:	f44f 5110 	movne.w	r1, #9216	; 0x2400
 8003688:	f2c0 01f4 	movtne	r1, #244	; 0xf4
 800368c:	d00b      	beq.n	80036a6 <SystemCoreClockUpdate+0x42>
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800368e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003692:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <SystemCoreClockUpdate+0x88>)
 8003698:	6892      	ldr	r2, [r2, #8]
 800369a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800369e:	5c9a      	ldrb	r2, [r3, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80036a0:	40d1      	lsrs	r1, r2
 80036a2:	6119      	str	r1, [r3, #16]
}
 80036a4:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80036a6:	6858      	ldr	r0, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80036aa:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80036ae:	6858      	ldr	r0, [r3, #4]
 80036b0:	bf15      	itete	ne
 80036b2:	f44f 5390 	movne.w	r3, #4608	; 0x1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036b6:	f44f 5310 	moveq.w	r3, #9216	; 0x2400
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80036ba:	f2c0 037a 	movtne	r3, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036be:	f2c0 03f4 	movteq	r3, #244	; 0xf4

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036c6:	fbb3 f1f2 	udiv	r1, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80036ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80036ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036d2:	f3c0 1088 	ubfx	r0, r0, #6, #9
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80036dc:	3301      	adds	r3, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036de:	fb01 f100 	mul.w	r1, r1, r0
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80036e2:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 80036e4:	fbb1 f1f3 	udiv	r1, r1, r3
      break;
 80036e8:	e7d1      	b.n	800368e <SystemCoreClockUpdate+0x2a>
 80036ea:	bf00      	nop
 80036ec:	200000f0 	.word	0x200000f0

080036f0 <cleanup_glue>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	460c      	mov	r4, r1
 80036f4:	6809      	ldr	r1, [r1, #0]
 80036f6:	4605      	mov	r5, r0
 80036f8:	b109      	cbz	r1, 80036fe <cleanup_glue+0xe>
 80036fa:	f7ff fff9 	bl	80036f0 <cleanup_glue>
 80036fe:	4628      	mov	r0, r5
 8003700:	4621      	mov	r1, r4
 8003702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003706:	f002 ba23 	b.w	8005b50 <_free_r>
 800370a:	bf00      	nop

0800370c <_reclaim_reent>:
 800370c:	4b22      	ldr	r3, [pc, #136]	; (8003798 <_reclaim_reent+0x8c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4298      	cmp	r0, r3
 8003712:	b570      	push	{r4, r5, r6, lr}
 8003714:	4605      	mov	r5, r0
 8003716:	d032      	beq.n	800377e <_reclaim_reent+0x72>
 8003718:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800371a:	b1ab      	cbz	r3, 8003748 <_reclaim_reent+0x3c>
 800371c:	2200      	movs	r2, #0
 800371e:	4616      	mov	r6, r2
 8003720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003724:	b909      	cbnz	r1, 800372a <_reclaim_reent+0x1e>
 8003726:	e007      	b.n	8003738 <_reclaim_reent+0x2c>
 8003728:	4621      	mov	r1, r4
 800372a:	680c      	ldr	r4, [r1, #0]
 800372c:	4628      	mov	r0, r5
 800372e:	f002 fa0f 	bl	8005b50 <_free_r>
 8003732:	2c00      	cmp	r4, #0
 8003734:	d1f8      	bne.n	8003728 <_reclaim_reent+0x1c>
 8003736:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003738:	3601      	adds	r6, #1
 800373a:	2e20      	cmp	r6, #32
 800373c:	4632      	mov	r2, r6
 800373e:	d1ef      	bne.n	8003720 <_reclaim_reent+0x14>
 8003740:	4628      	mov	r0, r5
 8003742:	4619      	mov	r1, r3
 8003744:	f002 fa04 	bl	8005b50 <_free_r>
 8003748:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800374a:	b111      	cbz	r1, 8003752 <_reclaim_reent+0x46>
 800374c:	4628      	mov	r0, r5
 800374e:	f002 f9ff 	bl	8005b50 <_free_r>
 8003752:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 8003756:	b159      	cbz	r1, 8003770 <_reclaim_reent+0x64>
 8003758:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 800375c:	42b1      	cmp	r1, r6
 800375e:	d101      	bne.n	8003764 <_reclaim_reent+0x58>
 8003760:	e006      	b.n	8003770 <_reclaim_reent+0x64>
 8003762:	4621      	mov	r1, r4
 8003764:	680c      	ldr	r4, [r1, #0]
 8003766:	4628      	mov	r0, r5
 8003768:	f002 f9f2 	bl	8005b50 <_free_r>
 800376c:	42a6      	cmp	r6, r4
 800376e:	d1f8      	bne.n	8003762 <_reclaim_reent+0x56>
 8003770:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003772:	b111      	cbz	r1, 800377a <_reclaim_reent+0x6e>
 8003774:	4628      	mov	r0, r5
 8003776:	f002 f9eb 	bl	8005b50 <_free_r>
 800377a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800377c:	b903      	cbnz	r3, 8003780 <_reclaim_reent+0x74>
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003782:	4628      	mov	r0, r5
 8003784:	4798      	blx	r3
 8003786:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 800378a:	2900      	cmp	r1, #0
 800378c:	d0f7      	beq.n	800377e <_reclaim_reent+0x72>
 800378e:	4628      	mov	r0, r5
 8003790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003794:	e7ac      	b.n	80036f0 <cleanup_glue>
 8003796:	bf00      	nop
 8003798:	20000108 	.word	0x20000108

0800379c <_wrapup_reent>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	4607      	mov	r7, r0
 80037a0:	b1b0      	cbz	r0, 80037d0 <_wrapup_reent+0x34>
 80037a2:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 80037a6:	b176      	cbz	r6, 80037c6 <_wrapup_reent+0x2a>
 80037a8:	6875      	ldr	r5, [r6, #4]
 80037aa:	1e6c      	subs	r4, r5, #1
 80037ac:	d408      	bmi.n	80037c0 <_wrapup_reent+0x24>
 80037ae:	3502      	adds	r5, #2
 80037b0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80037b4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80037b8:	3c01      	subs	r4, #1
 80037ba:	4798      	blx	r3
 80037bc:	1c63      	adds	r3, r4, #1
 80037be:	d1f9      	bne.n	80037b4 <_wrapup_reent+0x18>
 80037c0:	6836      	ldr	r6, [r6, #0]
 80037c2:	2e00      	cmp	r6, #0
 80037c4:	d1f0      	bne.n	80037a8 <_wrapup_reent+0xc>
 80037c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c8:	b10b      	cbz	r3, 80037ce <_wrapup_reent+0x32>
 80037ca:	4638      	mov	r0, r7
 80037cc:	4798      	blx	r3
 80037ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d0:	4b01      	ldr	r3, [pc, #4]	; (80037d8 <_wrapup_reent+0x3c>)
 80037d2:	681f      	ldr	r7, [r3, #0]
 80037d4:	e7e5      	b.n	80037a2 <_wrapup_reent+0x6>
 80037d6:	bf00      	nop
 80037d8:	20000108 	.word	0x20000108

080037dc <_sprintf_r>:
 80037dc:	b40c      	push	{r2, r3}
 80037de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e0:	b09d      	sub	sp, #116	; 0x74
 80037e2:	ac22      	add	r4, sp, #136	; 0x88
 80037e4:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 80037e8:	f854 2b04 	ldr.w	r2, [r4], #4
 80037ec:	9101      	str	r1, [sp, #4]
 80037ee:	460e      	mov	r6, r1
 80037f0:	4623      	mov	r3, r4
 80037f2:	9503      	str	r5, [sp, #12]
 80037f4:	9506      	str	r5, [sp, #24]
 80037f6:	a901      	add	r1, sp, #4
 80037f8:	f44f 7702 	mov.w	r7, #520	; 0x208
 80037fc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003800:	f8ad 7010 	strh.w	r7, [sp, #16]
 8003804:	9605      	str	r6, [sp, #20]
 8003806:	f8ad 5012 	strh.w	r5, [sp, #18]
 800380a:	941b      	str	r4, [sp, #108]	; 0x6c
 800380c:	f000 f830 	bl	8003870 <_svfprintf_r>
 8003810:	9b01      	ldr	r3, [sp, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	b01d      	add	sp, #116	; 0x74
 8003818:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800381c:	b002      	add	sp, #8
 800381e:	4770      	bx	lr

08003820 <sprintf>:
 8003820:	b40e      	push	{r1, r2, r3}
 8003822:	b570      	push	{r4, r5, r6, lr}
 8003824:	b09d      	sub	sp, #116	; 0x74
 8003826:	ac21      	add	r4, sp, #132	; 0x84
 8003828:	f240 1308 	movw	r3, #264	; 0x108
 800382c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003830:	f854 2b04 	ldr.w	r2, [r4], #4
 8003834:	4606      	mov	r6, r0
 8003836:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800383a:	6818      	ldr	r0, [r3, #0]
 800383c:	9503      	str	r5, [sp, #12]
 800383e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003842:	f8ad 3010 	strh.w	r3, [sp, #16]
 8003846:	9506      	str	r5, [sp, #24]
 8003848:	4623      	mov	r3, r4
 800384a:	a901      	add	r1, sp, #4
 800384c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003850:	9601      	str	r6, [sp, #4]
 8003852:	9605      	str	r6, [sp, #20]
 8003854:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003858:	941b      	str	r4, [sp, #108]	; 0x6c
 800385a:	f000 f809 	bl	8003870 <_svfprintf_r>
 800385e:	9b01      	ldr	r3, [sp, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	b01d      	add	sp, #116	; 0x74
 8003866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800386a:	b003      	add	sp, #12
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop

08003870 <_svfprintf_r>:
 8003870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003874:	b0c5      	sub	sp, #276	; 0x114
 8003876:	468a      	mov	sl, r1
 8003878:	4614      	mov	r4, r2
 800387a:	930e      	str	r3, [sp, #56]	; 0x38
 800387c:	900f      	str	r0, [sp, #60]	; 0x3c
 800387e:	f002 fa5f 	bl	8005d40 <_localeconv_r>
 8003882:	6800      	ldr	r0, [r0, #0]
 8003884:	9017      	str	r0, [sp, #92]	; 0x5c
 8003886:	f003 fb35 	bl	8006ef4 <strlen>
 800388a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800388e:	901a      	str	r0, [sp, #104]	; 0x68
 8003890:	2100      	movs	r1, #0
 8003892:	2000      	movs	r0, #0
 8003894:	061a      	lsls	r2, r3, #24
 8003896:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800389a:	d504      	bpl.n	80038a6 <_svfprintf_r+0x36>
 800389c:	f8da 3010 	ldr.w	r3, [sl, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f001 8004 	beq.w	80048ae <_svfprintf_r+0x103e>
 80038a6:	2300      	movs	r3, #0
 80038a8:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 80038ac:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80038b0:	a91f      	add	r1, sp, #124	; 0x7c
 80038b2:	9310      	str	r3, [sp, #64]	; 0x40
 80038b4:	933b      	str	r3, [sp, #236]	; 0xec
 80038b6:	933a      	str	r3, [sp, #232]	; 0xe8
 80038b8:	931c      	str	r3, [sp, #112]	; 0x70
 80038ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80038bc:	930c      	str	r3, [sp, #48]	; 0x30
 80038be:	ebc0 030b 	rsb	r3, r0, fp
 80038c2:	9007      	str	r0, [sp, #28]
 80038c4:	9139      	str	r1, [sp, #228]	; 0xe4
 80038c6:	9409      	str	r4, [sp, #36]	; 0x24
 80038c8:	460e      	mov	r6, r1
 80038ca:	931d      	str	r3, [sp, #116]	; 0x74
 80038cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ce:	7803      	ldrb	r3, [r0, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf18      	it	ne
 80038d4:	2b25      	cmpne	r3, #37	; 0x25
 80038d6:	f000 80af 	beq.w	8003a38 <_svfprintf_r+0x1c8>
 80038da:	4607      	mov	r7, r0
 80038dc:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80038e0:	2b25      	cmp	r3, #37	; 0x25
 80038e2:	bf18      	it	ne
 80038e4:	2b00      	cmpne	r3, #0
 80038e6:	d1f9      	bne.n	80038dc <_svfprintf_r+0x6c>
 80038e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038ea:	ebb7 0801 	subs.w	r8, r7, r1
 80038ee:	d00e      	beq.n	800390e <_svfprintf_r+0x9e>
 80038f0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80038f2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80038f4:	6031      	str	r1, [r6, #0]
 80038f6:	3401      	adds	r4, #1
 80038f8:	4445      	add	r5, r8
 80038fa:	2c07      	cmp	r4, #7
 80038fc:	f8c6 8004 	str.w	r8, [r6, #4]
 8003900:	953b      	str	r5, [sp, #236]	; 0xec
 8003902:	943a      	str	r4, [sp, #232]	; 0xe8
 8003904:	dc7c      	bgt.n	8003a00 <_svfprintf_r+0x190>
 8003906:	3608      	adds	r6, #8
 8003908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800390a:	4442      	add	r2, r8
 800390c:	920c      	str	r2, [sp, #48]	; 0x30
 800390e:	783b      	ldrb	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d07d      	beq.n	8003a10 <_svfprintf_r+0x1a0>
 8003914:	3701      	adds	r7, #1
 8003916:	9709      	str	r7, [sp, #36]	; 0x24
 8003918:	2300      	movs	r3, #0
 800391a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800391c:	930b      	str	r3, [sp, #44]	; 0x2c
 800391e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003922:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003926:	9308      	str	r3, [sp, #32]
 8003928:	2720      	movs	r7, #32
 800392a:	252b      	movs	r5, #43	; 0x2b
 800392c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003930:	f1a3 0220 	sub.w	r2, r3, #32
 8003934:	2a58      	cmp	r2, #88	; 0x58
 8003936:	f200 823b 	bhi.w	8003db0 <_svfprintf_r+0x540>
 800393a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800393e:	024c      	.short	0x024c
 8003940:	02390239 	.word	0x02390239
 8003944:	02390254 	.word	0x02390254
 8003948:	02390239 	.word	0x02390239
 800394c:	02390239 	.word	0x02390239
 8003950:	02590239 	.word	0x02590239
 8003954:	0239007f 	.word	0x0239007f
 8003958:	0082005c 	.word	0x0082005c
 800395c:	009d0239 	.word	0x009d0239
 8003960:	00a200a2 	.word	0x00a200a2
 8003964:	00a200a2 	.word	0x00a200a2
 8003968:	00a200a2 	.word	0x00a200a2
 800396c:	00a200a2 	.word	0x00a200a2
 8003970:	023900a2 	.word	0x023900a2
 8003974:	02390239 	.word	0x02390239
 8003978:	02390239 	.word	0x02390239
 800397c:	02390239 	.word	0x02390239
 8003980:	02390239 	.word	0x02390239
 8003984:	00b50239 	.word	0x00b50239
 8003988:	02390154 	.word	0x02390154
 800398c:	02390154 	.word	0x02390154
 8003990:	02390239 	.word	0x02390239
 8003994:	018b0239 	.word	0x018b0239
 8003998:	02390239 	.word	0x02390239
 800399c:	02390190 	.word	0x02390190
 80039a0:	02390239 	.word	0x02390239
 80039a4:	02390239 	.word	0x02390239
 80039a8:	023901a7 	.word	0x023901a7
 80039ac:	01ba0239 	.word	0x01ba0239
 80039b0:	02390239 	.word	0x02390239
 80039b4:	02390239 	.word	0x02390239
 80039b8:	02390239 	.word	0x02390239
 80039bc:	02390239 	.word	0x02390239
 80039c0:	02390239 	.word	0x02390239
 80039c4:	02780293 	.word	0x02780293
 80039c8:	01540154 	.word	0x01540154
 80039cc:	028e0154 	.word	0x028e0154
 80039d0:	02390278 	.word	0x02390278
 80039d4:	02130239 	.word	0x02130239
 80039d8:	02180239 	.word	0x02180239
 80039dc:	02a50224 	.word	0x02a50224
 80039e0:	023901de 	.word	0x023901de
 80039e4:	023901e3 	.word	0x023901e3
 80039e8:	02390264 	.word	0x02390264
 80039ec:	02c70239 	.word	0x02c70239
 80039f0:	4252      	negs	r2, r2
 80039f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80039f4:	930e      	str	r3, [sp, #56]	; 0x38
 80039f6:	9b08      	ldr	r3, [sp, #32]
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	9308      	str	r3, [sp, #32]
 80039fe:	e795      	b.n	800392c <_svfprintf_r+0xbc>
 8003a00:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a02:	4651      	mov	r1, sl
 8003a04:	465a      	mov	r2, fp
 8003a06:	f003 faa5 	bl	8006f54 <__ssprint_r>
 8003a0a:	b940      	cbnz	r0, 8003a1e <_svfprintf_r+0x1ae>
 8003a0c:	ae1f      	add	r6, sp, #124	; 0x7c
 8003a0e:	e77b      	b.n	8003908 <_svfprintf_r+0x98>
 8003a10:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8003a12:	b123      	cbz	r3, 8003a1e <_svfprintf_r+0x1ae>
 8003a14:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a16:	4651      	mov	r1, sl
 8003a18:	aa39      	add	r2, sp, #228	; 0xe4
 8003a1a:	f003 fa9b 	bl	8006f54 <__ssprint_r>
 8003a1e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003a22:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a28:	bf18      	it	ne
 8003a2a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8003a30:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003a32:	b045      	add	sp, #276	; 0x114
 8003a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003a3a:	e768      	b.n	800390e <_svfprintf_r+0x9e>
 8003a3c:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003a40:	e774      	b.n	800392c <_svfprintf_r+0xbc>
 8003a42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003a46:	2b2a      	cmp	r3, #42	; 0x2a
 8003a48:	f001 804c 	beq.w	8004ae4 <_svfprintf_r+0x1274>
 8003a4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a50:	2400      	movs	r4, #0
 8003a52:	2a09      	cmp	r2, #9
 8003a54:	f63f af6c 	bhi.w	8003930 <_svfprintf_r+0xc0>
 8003a58:	4601      	mov	r1, r0
 8003a5a:	2400      	movs	r4, #0
 8003a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003a64:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003a68:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a6c:	2a09      	cmp	r2, #9
 8003a6e:	4608      	mov	r0, r1
 8003a70:	d9f4      	bls.n	8003a5c <_svfprintf_r+0x1ec>
 8003a72:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8003a76:	e75b      	b.n	8003930 <_svfprintf_r+0xc0>
 8003a78:	9a08      	ldr	r2, [sp, #32]
 8003a7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a7e:	9208      	str	r2, [sp, #32]
 8003a80:	e754      	b.n	800392c <_svfprintf_r+0xbc>
 8003a82:	4601      	mov	r1, r0
 8003a84:	2200      	movs	r2, #0
 8003a86:	46b4      	mov	ip, r6
 8003a88:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8003a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a90:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003a94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003a98:	2e09      	cmp	r6, #9
 8003a9a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003a9e:	4608      	mov	r0, r1
 8003aa0:	d9f2      	bls.n	8003a88 <_svfprintf_r+0x218>
 8003aa2:	4666      	mov	r6, ip
 8003aa4:	920b      	str	r2, [sp, #44]	; 0x2c
 8003aa6:	e743      	b.n	8003930 <_svfprintf_r+0xc0>
 8003aa8:	9315      	str	r3, [sp, #84]	; 0x54
 8003aaa:	9b08      	ldr	r3, [sp, #32]
 8003aac:	9009      	str	r0, [sp, #36]	; 0x24
 8003aae:	f043 0310 	orr.w	r3, r3, #16
 8003ab2:	9308      	str	r3, [sp, #32]
 8003ab4:	9808      	ldr	r0, [sp, #32]
 8003ab6:	06c3      	lsls	r3, r0, #27
 8003ab8:	f100 81bf 	bmi.w	8003e3a <_svfprintf_r+0x5ca>
 8003abc:	9a08      	ldr	r2, [sp, #32]
 8003abe:	0655      	lsls	r5, r2, #25
 8003ac0:	f140 81bb 	bpl.w	8003e3a <_svfprintf_r+0x5ca>
 8003ac4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003ac6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003aca:	3004      	adds	r0, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	900e      	str	r0, [sp, #56]	; 0x38
 8003ad0:	f2c0 81ba 	blt.w	8003e48 <_svfprintf_r+0x5d8>
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2100      	moveq	r1, #0
 8003ad8:	2101      	movne	r1, #1
 8003ada:	2201      	movs	r2, #1
 8003adc:	2c00      	cmp	r4, #0
 8003ade:	bfa2      	ittt	ge
 8003ae0:	9808      	ldrge	r0, [sp, #32]
 8003ae2:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003ae6:	9008      	strge	r0, [sp, #32]
 8003ae8:	2c00      	cmp	r4, #0
 8003aea:	bf18      	it	ne
 8003aec:	f041 0101 	orrne.w	r1, r1, #1
 8003af0:	2900      	cmp	r1, #0
 8003af2:	f000 8323 	beq.w	800413c <_svfprintf_r+0x8cc>
 8003af6:	2a01      	cmp	r2, #1
 8003af8:	f000 845f 	beq.w	80043ba <_svfprintf_r+0xb4a>
 8003afc:	2a02      	cmp	r2, #2
 8003afe:	bf18      	it	ne
 8003b00:	465a      	movne	r2, fp
 8003b02:	d102      	bne.n	8003b0a <_svfprintf_r+0x29a>
 8003b04:	f000 bc48 	b.w	8004398 <_svfprintf_r+0xb28>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	f003 0107 	and.w	r1, r3, #7
 8003b0e:	3130      	adds	r1, #48	; 0x30
 8003b10:	1e50      	subs	r0, r2, #1
 8003b12:	08db      	lsrs	r3, r3, #3
 8003b14:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003b18:	d1f6      	bne.n	8003b08 <_svfprintf_r+0x298>
 8003b1a:	9b08      	ldr	r3, [sp, #32]
 8003b1c:	9011      	str	r0, [sp, #68]	; 0x44
 8003b1e:	07dd      	lsls	r5, r3, #31
 8003b20:	d507      	bpl.n	8003b32 <_svfprintf_r+0x2c2>
 8003b22:	2930      	cmp	r1, #48	; 0x30
 8003b24:	f000 8733 	beq.w	800498e <_svfprintf_r+0x111e>
 8003b28:	1e90      	subs	r0, r2, #2
 8003b2a:	2330      	movs	r3, #48	; 0x30
 8003b2c:	9011      	str	r0, [sp, #68]	; 0x44
 8003b2e:	f802 3c02 	strb.w	r3, [r2, #-2]
 8003b32:	ebc0 030b 	rsb	r3, r0, fp
 8003b36:	930d      	str	r3, [sp, #52]	; 0x34
 8003b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b3a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003b3e:	9412      	str	r4, [sp, #72]	; 0x48
 8003b40:	42a3      	cmp	r3, r4
 8003b42:	bfb8      	it	lt
 8003b44:	4623      	movlt	r3, r4
 8003b46:	2000      	movs	r0, #0
 8003b48:	930a      	str	r3, [sp, #40]	; 0x28
 8003b4a:	9016      	str	r0, [sp, #88]	; 0x58
 8003b4c:	b111      	cbz	r1, 8003b54 <_svfprintf_r+0x2e4>
 8003b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b50:	3301      	adds	r3, #1
 8003b52:	930a      	str	r3, [sp, #40]	; 0x28
 8003b54:	9b08      	ldr	r3, [sp, #32]
 8003b56:	f013 0302 	ands.w	r3, r3, #2
 8003b5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b5c:	d002      	beq.n	8003b64 <_svfprintf_r+0x2f4>
 8003b5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003b60:	3002      	adds	r0, #2
 8003b62:	900a      	str	r0, [sp, #40]	; 0x28
 8003b64:	9b08      	ldr	r3, [sp, #32]
 8003b66:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8003b6a:	9314      	str	r3, [sp, #80]	; 0x50
 8003b6c:	f040 81bb 	bne.w	8003ee6 <_svfprintf_r+0x676>
 8003b70:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b74:	1a47      	subs	r7, r0, r1
 8003b76:	2f00      	cmp	r7, #0
 8003b78:	f340 81b5 	ble.w	8003ee6 <_svfprintf_r+0x676>
 8003b7c:	2f10      	cmp	r7, #16
 8003b7e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003b80:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003b82:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8003ec8 <_svfprintf_r+0x658>
 8003b86:	dd22      	ble.n	8003bce <_svfprintf_r+0x35e>
 8003b88:	4623      	mov	r3, r4
 8003b8a:	f04f 0910 	mov.w	r9, #16
 8003b8e:	4644      	mov	r4, r8
 8003b90:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003b94:	e003      	b.n	8003b9e <_svfprintf_r+0x32e>
 8003b96:	3f10      	subs	r7, #16
 8003b98:	3608      	adds	r6, #8
 8003b9a:	2f10      	cmp	r7, #16
 8003b9c:	dd15      	ble.n	8003bca <_svfprintf_r+0x35a>
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	3510      	adds	r5, #16
 8003ba2:	2b07      	cmp	r3, #7
 8003ba4:	e886 0210 	stmia.w	r6, {r4, r9}
 8003ba8:	953b      	str	r5, [sp, #236]	; 0xec
 8003baa:	933a      	str	r3, [sp, #232]	; 0xe8
 8003bac:	ddf3      	ble.n	8003b96 <_svfprintf_r+0x326>
 8003bae:	4640      	mov	r0, r8
 8003bb0:	4651      	mov	r1, sl
 8003bb2:	465a      	mov	r2, fp
 8003bb4:	f003 f9ce 	bl	8006f54 <__ssprint_r>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	f47f af30 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8003bbe:	3f10      	subs	r7, #16
 8003bc0:	2f10      	cmp	r7, #16
 8003bc2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003bc4:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003bc6:	ae1f      	add	r6, sp, #124	; 0x7c
 8003bc8:	dce9      	bgt.n	8003b9e <_svfprintf_r+0x32e>
 8003bca:	46a0      	mov	r8, r4
 8003bcc:	461c      	mov	r4, r3
 8003bce:	3401      	adds	r4, #1
 8003bd0:	19ed      	adds	r5, r5, r7
 8003bd2:	2c07      	cmp	r4, #7
 8003bd4:	f8c6 8000 	str.w	r8, [r6]
 8003bd8:	6077      	str	r7, [r6, #4]
 8003bda:	953b      	str	r5, [sp, #236]	; 0xec
 8003bdc:	943a      	str	r4, [sp, #232]	; 0xe8
 8003bde:	f300 8414 	bgt.w	800440a <_svfprintf_r+0xb9a>
 8003be2:	3608      	adds	r6, #8
 8003be4:	e180      	b.n	8003ee8 <_svfprintf_r+0x678>
 8003be6:	9009      	str	r0, [sp, #36]	; 0x24
 8003be8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003bea:	9315      	str	r3, [sp, #84]	; 0x54
 8003bec:	1dc3      	adds	r3, r0, #7
 8003bee:	f023 0307 	bic.w	r3, r3, #7
 8003bf2:	f103 0108 	add.w	r1, r3, #8
 8003bf6:	910e      	str	r1, [sp, #56]	; 0x38
 8003bf8:	f8d3 8000 	ldr.w	r8, [r3]
 8003bfc:	685d      	ldr	r5, [r3, #4]
 8003bfe:	4642      	mov	r2, r8
 8003c00:	462b      	mov	r3, r5
 8003c02:	4629      	mov	r1, r5
 8003c04:	4640      	mov	r0, r8
 8003c06:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003c0a:	f003 f83b 	bl	8006c84 <__fpclassifyd>
 8003c0e:	2801      	cmp	r0, #1
 8003c10:	4629      	mov	r1, r5
 8003c12:	4640      	mov	r0, r8
 8003c14:	f040 84d0 	bne.w	80045b8 <_svfprintf_r+0xd48>
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f004 fd62 	bl	80086e4 <__aeabi_dcmplt>
 8003c20:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003c24:	b110      	cbz	r0, 8003c2c <_svfprintf_r+0x3bc>
 8003c26:	212d      	movs	r1, #45	; 0x2d
 8003c28:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8003c30:	2300      	movs	r3, #0
 8003c32:	9312      	str	r3, [sp, #72]	; 0x48
 8003c34:	4aa0      	ldr	r2, [pc, #640]	; (8003eb8 <_svfprintf_r+0x648>)
 8003c36:	4ba1      	ldr	r3, [pc, #644]	; (8003ebc <_svfprintf_r+0x64c>)
 8003c38:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003c3a:	2847      	cmp	r0, #71	; 0x47
 8003c3c:	bfd8      	it	le
 8003c3e:	461a      	movle	r2, r3
 8003c40:	9211      	str	r2, [sp, #68]	; 0x44
 8003c42:	9a08      	ldr	r2, [sp, #32]
 8003c44:	2303      	movs	r3, #3
 8003c46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c4a:	930d      	str	r3, [sp, #52]	; 0x34
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9208      	str	r2, [sp, #32]
 8003c50:	9316      	str	r3, [sp, #88]	; 0x58
 8003c52:	e77b      	b.n	8003b4c <_svfprintf_r+0x2dc>
 8003c54:	9b08      	ldr	r3, [sp, #32]
 8003c56:	f043 0308 	orr.w	r3, r3, #8
 8003c5a:	9308      	str	r3, [sp, #32]
 8003c5c:	e666      	b.n	800392c <_svfprintf_r+0xbc>
 8003c5e:	9908      	ldr	r1, [sp, #32]
 8003c60:	9009      	str	r0, [sp, #36]	; 0x24
 8003c62:	f041 0110 	orr.w	r1, r1, #16
 8003c66:	9108      	str	r1, [sp, #32]
 8003c68:	9a08      	ldr	r2, [sp, #32]
 8003c6a:	9315      	str	r3, [sp, #84]	; 0x54
 8003c6c:	f012 0110 	ands.w	r1, r2, #16
 8003c70:	f000 8090 	beq.w	8003d94 <_svfprintf_r+0x524>
 8003c74:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c76:	6803      	ldr	r3, [r0, #0]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	1a99      	subs	r1, r3, r2
 8003c7c:	bf18      	it	ne
 8003c7e:	2101      	movne	r1, #1
 8003c80:	3004      	adds	r0, #4
 8003c82:	900e      	str	r0, [sp, #56]	; 0x38
 8003c84:	2000      	movs	r0, #0
 8003c86:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8003c8a:	e727      	b.n	8003adc <_svfprintf_r+0x26c>
 8003c8c:	9908      	ldr	r1, [sp, #32]
 8003c8e:	9009      	str	r0, [sp, #36]	; 0x24
 8003c90:	f041 0110 	orr.w	r1, r1, #16
 8003c94:	9108      	str	r1, [sp, #32]
 8003c96:	9a08      	ldr	r2, [sp, #32]
 8003c98:	9315      	str	r3, [sp, #84]	; 0x54
 8003c9a:	06d0      	lsls	r0, r2, #27
 8003c9c:	f140 80b9 	bpl.w	8003e12 <_svfprintf_r+0x5a2>
 8003ca0:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003ca2:	6803      	ldr	r3, [r0, #0]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	1c19      	adds	r1, r3, #0
 8003ca8:	bf18      	it	ne
 8003caa:	2101      	movne	r1, #1
 8003cac:	3004      	adds	r0, #4
 8003cae:	900e      	str	r0, [sp, #56]	; 0x38
 8003cb0:	e7e8      	b.n	8003c84 <_svfprintf_r+0x414>
 8003cb2:	4a83      	ldr	r2, [pc, #524]	; (8003ec0 <_svfprintf_r+0x650>)
 8003cb4:	9315      	str	r3, [sp, #84]	; 0x54
 8003cb6:	9b08      	ldr	r3, [sp, #32]
 8003cb8:	921c      	str	r2, [sp, #112]	; 0x70
 8003cba:	06da      	lsls	r2, r3, #27
 8003cbc:	9009      	str	r0, [sp, #36]	; 0x24
 8003cbe:	f100 810d 	bmi.w	8003edc <_svfprintf_r+0x66c>
 8003cc2:	9908      	ldr	r1, [sp, #32]
 8003cc4:	064b      	lsls	r3, r1, #25
 8003cc6:	f140 8109 	bpl.w	8003edc <_svfprintf_r+0x66c>
 8003cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ccc:	8813      	ldrh	r3, [r2, #0]
 8003cce:	3204      	adds	r2, #4
 8003cd0:	920e      	str	r2, [sp, #56]	; 0x38
 8003cd2:	1c19      	adds	r1, r3, #0
 8003cd4:	9a08      	ldr	r2, [sp, #32]
 8003cd6:	bf18      	it	ne
 8003cd8:	2101      	movne	r1, #1
 8003cda:	420a      	tst	r2, r1
 8003cdc:	f000 83ca 	beq.w	8004474 <_svfprintf_r+0xc04>
 8003ce0:	9908      	ldr	r1, [sp, #32]
 8003ce2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003ce4:	2230      	movs	r2, #48	; 0x30
 8003ce6:	f041 0102 	orr.w	r1, r1, #2
 8003cea:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003cee:	9108      	str	r1, [sp, #32]
 8003cf0:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	e7c4      	b.n	8003c84 <_svfprintf_r+0x414>
 8003cfa:	9b08      	ldr	r3, [sp, #32]
 8003cfc:	f043 0310 	orr.w	r3, r3, #16
 8003d00:	9308      	str	r3, [sp, #32]
 8003d02:	e613      	b.n	800392c <_svfprintf_r+0xbc>
 8003d04:	2500      	movs	r5, #0
 8003d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d08:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003d0c:	9315      	str	r3, [sp, #84]	; 0x54
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d12:	9009      	str	r0, [sp, #36]	; 0x24
 8003d14:	9211      	str	r2, [sp, #68]	; 0x44
 8003d16:	1d1f      	adds	r7, r3, #4
 8003d18:	2a00      	cmp	r2, #0
 8003d1a:	f000 864b 	beq.w	80049b4 <_svfprintf_r+0x1144>
 8003d1e:	2c00      	cmp	r4, #0
 8003d20:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003d22:	f2c0 8602 	blt.w	800492a <_svfprintf_r+0x10ba>
 8003d26:	4629      	mov	r1, r5
 8003d28:	4622      	mov	r2, r4
 8003d2a:	f002 fad1 	bl	80062d0 <memchr>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	f000 866f 	beq.w	8004a12 <_svfprintf_r+0x11a2>
 8003d34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d36:	9512      	str	r5, [sp, #72]	; 0x48
 8003d38:	1ac0      	subs	r0, r0, r3
 8003d3a:	42a0      	cmp	r0, r4
 8003d3c:	900d      	str	r0, [sp, #52]	; 0x34
 8003d3e:	bfd1      	iteee	le
 8003d40:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8003d42:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 8003d46:	970e      	strgt	r7, [sp, #56]	; 0x38
 8003d48:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 8003d4c:	bfd3      	iteet	le
 8003d4e:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8003d52:	900a      	strgt	r0, [sp, #40]	; 0x28
 8003d54:	940d      	strgt	r4, [sp, #52]	; 0x34
 8003d56:	930a      	strle	r3, [sp, #40]	; 0x28
 8003d58:	bfdc      	itt	le
 8003d5a:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8003d5e:	970e      	strle	r7, [sp, #56]	; 0x38
 8003d60:	9516      	str	r5, [sp, #88]	; 0x58
 8003d62:	e6f3      	b.n	8003b4c <_svfprintf_r+0x2dc>
 8003d64:	9a08      	ldr	r2, [sp, #32]
 8003d66:	f042 0210 	orr.w	r2, r2, #16
 8003d6a:	9208      	str	r2, [sp, #32]
 8003d6c:	e5de      	b.n	800392c <_svfprintf_r+0xbc>
 8003d6e:	9009      	str	r0, [sp, #36]	; 0x24
 8003d70:	9808      	ldr	r0, [sp, #32]
 8003d72:	06c3      	lsls	r3, r0, #27
 8003d74:	f140 843f 	bpl.w	80045f6 <_svfprintf_r+0xd86>
 8003d78:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003d7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d7c:	680b      	ldr	r3, [r1, #0]
 8003d7e:	3104      	adds	r1, #4
 8003d80:	910e      	str	r1, [sp, #56]	; 0x38
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e5a2      	b.n	80038cc <_svfprintf_r+0x5c>
 8003d86:	9a08      	ldr	r2, [sp, #32]
 8003d88:	9009      	str	r0, [sp, #36]	; 0x24
 8003d8a:	f012 0110 	ands.w	r1, r2, #16
 8003d8e:	9315      	str	r3, [sp, #84]	; 0x54
 8003d90:	f47f af70 	bne.w	8003c74 <_svfprintf_r+0x404>
 8003d94:	9b08      	ldr	r3, [sp, #32]
 8003d96:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8003d9a:	f000 8437 	beq.w	800460c <_svfprintf_r+0xd9c>
 8003d9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003da0:	8803      	ldrh	r3, [r0, #0]
 8003da2:	460a      	mov	r2, r1
 8003da4:	1c19      	adds	r1, r3, #0
 8003da6:	bf18      	it	ne
 8003da8:	2101      	movne	r1, #1
 8003daa:	3004      	adds	r0, #4
 8003dac:	900e      	str	r0, [sp, #56]	; 0x38
 8003dae:	e769      	b.n	8003c84 <_svfprintf_r+0x414>
 8003db0:	9009      	str	r0, [sp, #36]	; 0x24
 8003db2:	9315      	str	r3, [sp, #84]	; 0x54
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f43f ae2b 	beq.w	8003a10 <_svfprintf_r+0x1a0>
 8003dba:	2101      	movs	r1, #1
 8003dbc:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003dc0:	aa2f      	add	r2, sp, #188	; 0xbc
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	910a      	str	r1, [sp, #40]	; 0x28
 8003dc6:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003dca:	910d      	str	r1, [sp, #52]	; 0x34
 8003dcc:	9211      	str	r2, [sp, #68]	; 0x44
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9312      	str	r3, [sp, #72]	; 0x48
 8003dd2:	9316      	str	r3, [sp, #88]	; 0x58
 8003dd4:	e6be      	b.n	8003b54 <_svfprintf_r+0x2e4>
 8003dd6:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f47f ada6 	bne.w	800392c <_svfprintf_r+0xbc>
 8003de0:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 8003de4:	e5a2      	b.n	800392c <_svfprintf_r+0xbc>
 8003de6:	9a08      	ldr	r2, [sp, #32]
 8003de8:	f042 0201 	orr.w	r2, r2, #1
 8003dec:	9208      	str	r2, [sp, #32]
 8003dee:	e59d      	b.n	800392c <_svfprintf_r+0xbc>
 8003df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003df2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003df8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003dfa:	1d0b      	adds	r3, r1, #4
 8003dfc:	2a00      	cmp	r2, #0
 8003dfe:	f6ff adf7 	blt.w	80039f0 <_svfprintf_r+0x180>
 8003e02:	930e      	str	r3, [sp, #56]	; 0x38
 8003e04:	e592      	b.n	800392c <_svfprintf_r+0xbc>
 8003e06:	9a08      	ldr	r2, [sp, #32]
 8003e08:	9009      	str	r0, [sp, #36]	; 0x24
 8003e0a:	06d0      	lsls	r0, r2, #27
 8003e0c:	9315      	str	r3, [sp, #84]	; 0x54
 8003e0e:	f53f af47 	bmi.w	8003ca0 <_svfprintf_r+0x430>
 8003e12:	9908      	ldr	r1, [sp, #32]
 8003e14:	0649      	lsls	r1, r1, #25
 8003e16:	f140 83ea 	bpl.w	80045ee <_svfprintf_r+0xd7e>
 8003e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e1c:	8813      	ldrh	r3, [r2, #0]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003e22:	1c19      	adds	r1, r3, #0
 8003e24:	bf18      	it	ne
 8003e26:	2101      	movne	r1, #1
 8003e28:	3004      	adds	r0, #4
 8003e2a:	900e      	str	r0, [sp, #56]	; 0x38
 8003e2c:	e72a      	b.n	8003c84 <_svfprintf_r+0x414>
 8003e2e:	9009      	str	r0, [sp, #36]	; 0x24
 8003e30:	9808      	ldr	r0, [sp, #32]
 8003e32:	9315      	str	r3, [sp, #84]	; 0x54
 8003e34:	06c3      	lsls	r3, r0, #27
 8003e36:	f57f ae41 	bpl.w	8003abc <_svfprintf_r+0x24c>
 8003e3a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003e3c:	680b      	ldr	r3, [r1, #0]
 8003e3e:	3104      	adds	r1, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	910e      	str	r1, [sp, #56]	; 0x38
 8003e44:	f6bf ae46 	bge.w	8003ad4 <_svfprintf_r+0x264>
 8003e48:	425b      	negs	r3, r3
 8003e4a:	222d      	movs	r2, #45	; 0x2d
 8003e4c:	1c19      	adds	r1, r3, #0
 8003e4e:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003e52:	bf18      	it	ne
 8003e54:	2101      	movne	r1, #1
 8003e56:	2201      	movs	r2, #1
 8003e58:	e640      	b.n	8003adc <_svfprintf_r+0x26c>
 8003e5a:	9908      	ldr	r1, [sp, #32]
 8003e5c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003e60:	9108      	str	r1, [sp, #32]
 8003e62:	e563      	b.n	800392c <_svfprintf_r+0xbc>
 8003e64:	9315      	str	r3, [sp, #84]	; 0x54
 8003e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e68:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	9009      	str	r0, [sp, #36]	; 0x24
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2001      	movs	r0, #1
 8003e72:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003e76:	3104      	adds	r1, #4
 8003e78:	aa2f      	add	r2, sp, #188	; 0xbc
 8003e7a:	900a      	str	r0, [sp, #40]	; 0x28
 8003e7c:	910e      	str	r1, [sp, #56]	; 0x38
 8003e7e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003e82:	900d      	str	r0, [sp, #52]	; 0x34
 8003e84:	9211      	str	r2, [sp, #68]	; 0x44
 8003e86:	e7a2      	b.n	8003dce <_svfprintf_r+0x55e>
 8003e88:	490e      	ldr	r1, [pc, #56]	; (8003ec4 <_svfprintf_r+0x654>)
 8003e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e8e:	911c      	str	r1, [sp, #112]	; 0x70
 8003e90:	9908      	ldr	r1, [sp, #32]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	9009      	str	r0, [sp, #36]	; 0x24
 8003e96:	3204      	adds	r2, #4
 8003e98:	f041 0102 	orr.w	r1, r1, #2
 8003e9c:	2078      	movs	r0, #120	; 0x78
 8003e9e:	920e      	str	r2, [sp, #56]	; 0x38
 8003ea0:	9108      	str	r1, [sp, #32]
 8003ea2:	2230      	movs	r2, #48	; 0x30
 8003ea4:	1c19      	adds	r1, r3, #0
 8003ea6:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003eaa:	bf18      	it	ne
 8003eac:	2101      	movne	r1, #1
 8003eae:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	9015      	str	r0, [sp, #84]	; 0x54
 8003eb6:	e6e5      	b.n	8003c84 <_svfprintf_r+0x414>
 8003eb8:	08008d04 	.word	0x08008d04
 8003ebc:	08008d00 	.word	0x08008d00
 8003ec0:	08008d10 	.word	0x08008d10
 8003ec4:	08008d24 	.word	0x08008d24
 8003ec8:	08008b20 	.word	0x08008b20
 8003ecc:	9315      	str	r3, [sp, #84]	; 0x54
 8003ece:	9b08      	ldr	r3, [sp, #32]
 8003ed0:	49a4      	ldr	r1, [pc, #656]	; (8004164 <_svfprintf_r+0x8f4>)
 8003ed2:	9009      	str	r0, [sp, #36]	; 0x24
 8003ed4:	06da      	lsls	r2, r3, #27
 8003ed6:	911c      	str	r1, [sp, #112]	; 0x70
 8003ed8:	f57f aef3 	bpl.w	8003cc2 <_svfprintf_r+0x452>
 8003edc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003ede:	6803      	ldr	r3, [r0, #0]
 8003ee0:	3004      	adds	r0, #4
 8003ee2:	900e      	str	r0, [sp, #56]	; 0x38
 8003ee4:	e6f5      	b.n	8003cd2 <_svfprintf_r+0x462>
 8003ee6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ee8:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003eec:	b16b      	cbz	r3, 8003f0a <_svfprintf_r+0x69a>
 8003eee:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003ef0:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 8003ef4:	3401      	adds	r4, #1
 8003ef6:	6033      	str	r3, [r6, #0]
 8003ef8:	3501      	adds	r5, #1
 8003efa:	2301      	movs	r3, #1
 8003efc:	2c07      	cmp	r4, #7
 8003efe:	6073      	str	r3, [r6, #4]
 8003f00:	953b      	str	r5, [sp, #236]	; 0xec
 8003f02:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f04:	f300 81f5 	bgt.w	80042f2 <_svfprintf_r+0xa82>
 8003f08:	3608      	adds	r6, #8
 8003f0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f0c:	b163      	cbz	r3, 8003f28 <_svfprintf_r+0x6b8>
 8003f0e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f10:	ab43      	add	r3, sp, #268	; 0x10c
 8003f12:	3401      	adds	r4, #1
 8003f14:	6033      	str	r3, [r6, #0]
 8003f16:	3502      	adds	r5, #2
 8003f18:	2302      	movs	r3, #2
 8003f1a:	2c07      	cmp	r4, #7
 8003f1c:	6073      	str	r3, [r6, #4]
 8003f1e:	953b      	str	r5, [sp, #236]	; 0xec
 8003f20:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f22:	f300 81db 	bgt.w	80042dc <_svfprintf_r+0xa6c>
 8003f26:	3608      	adds	r6, #8
 8003f28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f2a:	2b80      	cmp	r3, #128	; 0x80
 8003f2c:	f000 8122 	beq.w	8004174 <_svfprintf_r+0x904>
 8003f30:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f34:	1ac7      	subs	r7, r0, r3
 8003f36:	2f00      	cmp	r7, #0
 8003f38:	dd32      	ble.n	8003fa0 <_svfprintf_r+0x730>
 8003f3a:	2f10      	cmp	r7, #16
 8003f3c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f3e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 800416c <_svfprintf_r+0x8fc>
 8003f42:	dd22      	ble.n	8003f8a <_svfprintf_r+0x71a>
 8003f44:	4623      	mov	r3, r4
 8003f46:	f04f 0910 	mov.w	r9, #16
 8003f4a:	4644      	mov	r4, r8
 8003f4c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003f50:	e003      	b.n	8003f5a <_svfprintf_r+0x6ea>
 8003f52:	3f10      	subs	r7, #16
 8003f54:	3608      	adds	r6, #8
 8003f56:	2f10      	cmp	r7, #16
 8003f58:	dd15      	ble.n	8003f86 <_svfprintf_r+0x716>
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	3510      	adds	r5, #16
 8003f5e:	2b07      	cmp	r3, #7
 8003f60:	e886 0210 	stmia.w	r6, {r4, r9}
 8003f64:	953b      	str	r5, [sp, #236]	; 0xec
 8003f66:	933a      	str	r3, [sp, #232]	; 0xe8
 8003f68:	ddf3      	ble.n	8003f52 <_svfprintf_r+0x6e2>
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	465a      	mov	r2, fp
 8003f70:	f002 fff0 	bl	8006f54 <__ssprint_r>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	f47f ad52 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8003f7a:	3f10      	subs	r7, #16
 8003f7c:	2f10      	cmp	r7, #16
 8003f7e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003f80:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003f82:	ae1f      	add	r6, sp, #124	; 0x7c
 8003f84:	dce9      	bgt.n	8003f5a <_svfprintf_r+0x6ea>
 8003f86:	46a0      	mov	r8, r4
 8003f88:	461c      	mov	r4, r3
 8003f8a:	3401      	adds	r4, #1
 8003f8c:	19ed      	adds	r5, r5, r7
 8003f8e:	2c07      	cmp	r4, #7
 8003f90:	f8c6 8000 	str.w	r8, [r6]
 8003f94:	6077      	str	r7, [r6, #4]
 8003f96:	953b      	str	r5, [sp, #236]	; 0xec
 8003f98:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f9a:	f300 8194 	bgt.w	80042c6 <_svfprintf_r+0xa56>
 8003f9e:	3608      	adds	r6, #8
 8003fa0:	9908      	ldr	r1, [sp, #32]
 8003fa2:	05ca      	lsls	r2, r1, #23
 8003fa4:	d472      	bmi.n	800408c <_svfprintf_r+0x81c>
 8003fa6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003fa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003faa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003fac:	6073      	str	r3, [r6, #4]
 8003fae:	3401      	adds	r4, #1
 8003fb0:	18ed      	adds	r5, r5, r3
 8003fb2:	2c07      	cmp	r4, #7
 8003fb4:	6032      	str	r2, [r6, #0]
 8003fb6:	953b      	str	r5, [sp, #236]	; 0xec
 8003fb8:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fba:	dc5c      	bgt.n	8004076 <_svfprintf_r+0x806>
 8003fbc:	3608      	adds	r6, #8
 8003fbe:	9908      	ldr	r1, [sp, #32]
 8003fc0:	074b      	lsls	r3, r1, #29
 8003fc2:	d53e      	bpl.n	8004042 <_svfprintf_r+0x7d2>
 8003fc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc8:	1ad7      	subs	r7, r2, r3
 8003fca:	2f00      	cmp	r7, #0
 8003fcc:	dd39      	ble.n	8004042 <_svfprintf_r+0x7d2>
 8003fce:	2f10      	cmp	r7, #16
 8003fd0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003fd2:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004170 <_svfprintf_r+0x900>
 8003fd6:	dd22      	ble.n	800401e <_svfprintf_r+0x7ae>
 8003fd8:	4623      	mov	r3, r4
 8003fda:	f04f 0910 	mov.w	r9, #16
 8003fde:	4644      	mov	r4, r8
 8003fe0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003fe4:	e003      	b.n	8003fee <_svfprintf_r+0x77e>
 8003fe6:	3f10      	subs	r7, #16
 8003fe8:	3608      	adds	r6, #8
 8003fea:	2f10      	cmp	r7, #16
 8003fec:	dd15      	ble.n	800401a <_svfprintf_r+0x7aa>
 8003fee:	3301      	adds	r3, #1
 8003ff0:	3510      	adds	r5, #16
 8003ff2:	2b07      	cmp	r3, #7
 8003ff4:	e886 0210 	stmia.w	r6, {r4, r9}
 8003ff8:	953b      	str	r5, [sp, #236]	; 0xec
 8003ffa:	933a      	str	r3, [sp, #232]	; 0xe8
 8003ffc:	ddf3      	ble.n	8003fe6 <_svfprintf_r+0x776>
 8003ffe:	4640      	mov	r0, r8
 8004000:	4651      	mov	r1, sl
 8004002:	465a      	mov	r2, fp
 8004004:	f002 ffa6 	bl	8006f54 <__ssprint_r>
 8004008:	2800      	cmp	r0, #0
 800400a:	f47f ad08 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 800400e:	3f10      	subs	r7, #16
 8004010:	2f10      	cmp	r7, #16
 8004012:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004014:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004016:	ae1f      	add	r6, sp, #124	; 0x7c
 8004018:	dce9      	bgt.n	8003fee <_svfprintf_r+0x77e>
 800401a:	46a0      	mov	r8, r4
 800401c:	461c      	mov	r4, r3
 800401e:	3401      	adds	r4, #1
 8004020:	197d      	adds	r5, r7, r5
 8004022:	2c07      	cmp	r4, #7
 8004024:	f8c6 8000 	str.w	r8, [r6]
 8004028:	6077      	str	r7, [r6, #4]
 800402a:	953b      	str	r5, [sp, #236]	; 0xec
 800402c:	943a      	str	r4, [sp, #232]	; 0xe8
 800402e:	dd08      	ble.n	8004042 <_svfprintf_r+0x7d2>
 8004030:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004032:	4651      	mov	r1, sl
 8004034:	465a      	mov	r2, fp
 8004036:	f002 ff8d 	bl	8006f54 <__ssprint_r>
 800403a:	2800      	cmp	r0, #0
 800403c:	f47f acef 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004040:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004042:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004046:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004048:	428a      	cmp	r2, r1
 800404a:	bfac      	ite	ge
 800404c:	1880      	addge	r0, r0, r2
 800404e:	1840      	addlt	r0, r0, r1
 8004050:	900c      	str	r0, [sp, #48]	; 0x30
 8004052:	2d00      	cmp	r5, #0
 8004054:	f040 8129 	bne.w	80042aa <_svfprintf_r+0xa3a>
 8004058:	2300      	movs	r3, #0
 800405a:	933a      	str	r3, [sp, #232]	; 0xe8
 800405c:	ae1f      	add	r6, sp, #124	; 0x7c
 800405e:	e435      	b.n	80038cc <_svfprintf_r+0x5c>
 8004060:	46a0      	mov	r8, r4
 8004062:	461c      	mov	r4, r3
 8004064:	3401      	adds	r4, #1
 8004066:	19ed      	adds	r5, r5, r7
 8004068:	2c07      	cmp	r4, #7
 800406a:	f8c6 8000 	str.w	r8, [r6]
 800406e:	6077      	str	r7, [r6, #4]
 8004070:	953b      	str	r5, [sp, #236]	; 0xec
 8004072:	943a      	str	r4, [sp, #232]	; 0xe8
 8004074:	dda2      	ble.n	8003fbc <_svfprintf_r+0x74c>
 8004076:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004078:	4651      	mov	r1, sl
 800407a:	465a      	mov	r2, fp
 800407c:	f002 ff6a 	bl	8006f54 <__ssprint_r>
 8004080:	2800      	cmp	r0, #0
 8004082:	f47f accc 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004086:	ae1f      	add	r6, sp, #124	; 0x7c
 8004088:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800408a:	e798      	b.n	8003fbe <_svfprintf_r+0x74e>
 800408c:	9815      	ldr	r0, [sp, #84]	; 0x54
 800408e:	2865      	cmp	r0, #101	; 0x65
 8004090:	f340 80aa 	ble.w	80041e8 <_svfprintf_r+0x978>
 8004094:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004098:	2200      	movs	r2, #0
 800409a:	2300      	movs	r3, #0
 800409c:	f004 fb18 	bl	80086d0 <__aeabi_dcmpeq>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	f000 8131 	beq.w	8004308 <_svfprintf_r+0xa98>
 80040a6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040a8:	4b2f      	ldr	r3, [pc, #188]	; (8004168 <_svfprintf_r+0x8f8>)
 80040aa:	3401      	adds	r4, #1
 80040ac:	6033      	str	r3, [r6, #0]
 80040ae:	3501      	adds	r5, #1
 80040b0:	2301      	movs	r3, #1
 80040b2:	2c07      	cmp	r4, #7
 80040b4:	6073      	str	r3, [r6, #4]
 80040b6:	953b      	str	r5, [sp, #236]	; 0xec
 80040b8:	943a      	str	r4, [sp, #232]	; 0xe8
 80040ba:	f300 82b8 	bgt.w	800462e <_svfprintf_r+0xdbe>
 80040be:	3608      	adds	r6, #8
 80040c0:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80040c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80040c4:	4299      	cmp	r1, r3
 80040c6:	dc03      	bgt.n	80040d0 <_svfprintf_r+0x860>
 80040c8:	9a08      	ldr	r2, [sp, #32]
 80040ca:	07d3      	lsls	r3, r2, #31
 80040cc:	f57f af77 	bpl.w	8003fbe <_svfprintf_r+0x74e>
 80040d0:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040d2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80040d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040d6:	6070      	str	r0, [r6, #4]
 80040d8:	3401      	adds	r4, #1
 80040da:	182d      	adds	r5, r5, r0
 80040dc:	2c07      	cmp	r4, #7
 80040de:	6033      	str	r3, [r6, #0]
 80040e0:	953b      	str	r5, [sp, #236]	; 0xec
 80040e2:	943a      	str	r4, [sp, #232]	; 0xe8
 80040e4:	f300 8300 	bgt.w	80046e8 <_svfprintf_r+0xe78>
 80040e8:	3608      	adds	r6, #8
 80040ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 80040ec:	1e4f      	subs	r7, r1, #1
 80040ee:	2f00      	cmp	r7, #0
 80040f0:	f77f af65 	ble.w	8003fbe <_svfprintf_r+0x74e>
 80040f4:	2f10      	cmp	r7, #16
 80040f6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040f8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800416c <_svfprintf_r+0x8fc>
 80040fc:	ddb2      	ble.n	8004064 <_svfprintf_r+0x7f4>
 80040fe:	4623      	mov	r3, r4
 8004100:	f04f 0910 	mov.w	r9, #16
 8004104:	4644      	mov	r4, r8
 8004106:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800410a:	e003      	b.n	8004114 <_svfprintf_r+0x8a4>
 800410c:	3608      	adds	r6, #8
 800410e:	3f10      	subs	r7, #16
 8004110:	2f10      	cmp	r7, #16
 8004112:	dda5      	ble.n	8004060 <_svfprintf_r+0x7f0>
 8004114:	3301      	adds	r3, #1
 8004116:	3510      	adds	r5, #16
 8004118:	2b07      	cmp	r3, #7
 800411a:	e886 0210 	stmia.w	r6, {r4, r9}
 800411e:	953b      	str	r5, [sp, #236]	; 0xec
 8004120:	933a      	str	r3, [sp, #232]	; 0xe8
 8004122:	ddf3      	ble.n	800410c <_svfprintf_r+0x89c>
 8004124:	4640      	mov	r0, r8
 8004126:	4651      	mov	r1, sl
 8004128:	465a      	mov	r2, fp
 800412a:	f002 ff13 	bl	8006f54 <__ssprint_r>
 800412e:	2800      	cmp	r0, #0
 8004130:	f47f ac75 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004134:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004136:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004138:	ae1f      	add	r6, sp, #124	; 0x7c
 800413a:	e7e8      	b.n	800410e <_svfprintf_r+0x89e>
 800413c:	2a00      	cmp	r2, #0
 800413e:	f040 80be 	bne.w	80042be <_svfprintf_r+0xa4e>
 8004142:	9808      	ldr	r0, [sp, #32]
 8004144:	07c1      	lsls	r1, r0, #31
 8004146:	bf5c      	itt	pl
 8004148:	920d      	strpl	r2, [sp, #52]	; 0x34
 800414a:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 800414e:	f57f acf3 	bpl.w	8003b38 <_svfprintf_r+0x2c8>
 8004152:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004154:	2330      	movs	r3, #48	; 0x30
 8004156:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 800415a:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 800415e:	910d      	str	r1, [sp, #52]	; 0x34
 8004160:	9211      	str	r2, [sp, #68]	; 0x44
 8004162:	e4e9      	b.n	8003b38 <_svfprintf_r+0x2c8>
 8004164:	08008d24 	.word	0x08008d24
 8004168:	08008d40 	.word	0x08008d40
 800416c:	08008b30 	.word	0x08008b30
 8004170:	08008b20 	.word	0x08008b20
 8004174:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004176:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004178:	1a47      	subs	r7, r0, r1
 800417a:	2f00      	cmp	r7, #0
 800417c:	f77f aed8 	ble.w	8003f30 <_svfprintf_r+0x6c0>
 8004180:	2f10      	cmp	r7, #16
 8004182:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004184:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 8004860 <_svfprintf_r+0xff0>
 8004188:	dd22      	ble.n	80041d0 <_svfprintf_r+0x960>
 800418a:	4623      	mov	r3, r4
 800418c:	f04f 0910 	mov.w	r9, #16
 8004190:	4644      	mov	r4, r8
 8004192:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004196:	e003      	b.n	80041a0 <_svfprintf_r+0x930>
 8004198:	3f10      	subs	r7, #16
 800419a:	3608      	adds	r6, #8
 800419c:	2f10      	cmp	r7, #16
 800419e:	dd15      	ble.n	80041cc <_svfprintf_r+0x95c>
 80041a0:	3301      	adds	r3, #1
 80041a2:	3510      	adds	r5, #16
 80041a4:	2b07      	cmp	r3, #7
 80041a6:	e886 0210 	stmia.w	r6, {r4, r9}
 80041aa:	953b      	str	r5, [sp, #236]	; 0xec
 80041ac:	933a      	str	r3, [sp, #232]	; 0xe8
 80041ae:	ddf3      	ble.n	8004198 <_svfprintf_r+0x928>
 80041b0:	4640      	mov	r0, r8
 80041b2:	4651      	mov	r1, sl
 80041b4:	465a      	mov	r2, fp
 80041b6:	f002 fecd 	bl	8006f54 <__ssprint_r>
 80041ba:	2800      	cmp	r0, #0
 80041bc:	f47f ac2f 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 80041c0:	3f10      	subs	r7, #16
 80041c2:	2f10      	cmp	r7, #16
 80041c4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80041c6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80041c8:	ae1f      	add	r6, sp, #124	; 0x7c
 80041ca:	dce9      	bgt.n	80041a0 <_svfprintf_r+0x930>
 80041cc:	46a0      	mov	r8, r4
 80041ce:	461c      	mov	r4, r3
 80041d0:	3401      	adds	r4, #1
 80041d2:	19ed      	adds	r5, r5, r7
 80041d4:	2c07      	cmp	r4, #7
 80041d6:	f8c6 8000 	str.w	r8, [r6]
 80041da:	6077      	str	r7, [r6, #4]
 80041dc:	953b      	str	r5, [sp, #236]	; 0xec
 80041de:	943a      	str	r4, [sp, #232]	; 0xe8
 80041e0:	f300 81df 	bgt.w	80045a2 <_svfprintf_r+0xd32>
 80041e4:	3608      	adds	r6, #8
 80041e6:	e6a3      	b.n	8003f30 <_svfprintf_r+0x6c0>
 80041e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80041ea:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80041ec:	2a01      	cmp	r2, #1
 80041ee:	f340 81a5 	ble.w	800453c <_svfprintf_r+0xccc>
 80041f2:	3401      	adds	r4, #1
 80041f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80041f6:	3501      	adds	r5, #1
 80041f8:	2301      	movs	r3, #1
 80041fa:	2c07      	cmp	r4, #7
 80041fc:	6030      	str	r0, [r6, #0]
 80041fe:	6073      	str	r3, [r6, #4]
 8004200:	953b      	str	r5, [sp, #236]	; 0xec
 8004202:	943a      	str	r4, [sp, #232]	; 0xe8
 8004204:	f300 81c1 	bgt.w	800458a <_svfprintf_r+0xd1a>
 8004208:	3608      	adds	r6, #8
 800420a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800420c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800420e:	6071      	str	r1, [r6, #4]
 8004210:	3401      	adds	r4, #1
 8004212:	186d      	adds	r5, r5, r1
 8004214:	2c07      	cmp	r4, #7
 8004216:	6032      	str	r2, [r6, #0]
 8004218:	953b      	str	r5, [sp, #236]	; 0xec
 800421a:	943a      	str	r4, [sp, #232]	; 0xe8
 800421c:	f300 81a9 	bgt.w	8004572 <_svfprintf_r+0xd02>
 8004220:	3608      	adds	r6, #8
 8004222:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8004226:	2200      	movs	r2, #0
 8004228:	2300      	movs	r3, #0
 800422a:	f004 fa51 	bl	80086d0 <__aeabi_dcmpeq>
 800422e:	2800      	cmp	r0, #0
 8004230:	f040 80f6 	bne.w	8004420 <_svfprintf_r+0xbb0>
 8004234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004236:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004238:	1e5a      	subs	r2, r3, #1
 800423a:	3401      	adds	r4, #1
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	18ad      	adds	r5, r5, r2
 8004240:	2c07      	cmp	r4, #7
 8004242:	6033      	str	r3, [r6, #0]
 8004244:	6072      	str	r2, [r6, #4]
 8004246:	953b      	str	r5, [sp, #236]	; 0xec
 8004248:	943a      	str	r4, [sp, #232]	; 0xe8
 800424a:	dc22      	bgt.n	8004292 <_svfprintf_r+0xa22>
 800424c:	3608      	adds	r6, #8
 800424e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004250:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004252:	3401      	adds	r4, #1
 8004254:	18ed      	adds	r5, r5, r3
 8004256:	2c07      	cmp	r4, #7
 8004258:	ab3c      	add	r3, sp, #240	; 0xf0
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	6070      	str	r0, [r6, #4]
 800425e:	953b      	str	r5, [sp, #236]	; 0xec
 8004260:	943a      	str	r4, [sp, #232]	; 0xe8
 8004262:	f77f aeab 	ble.w	8003fbc <_svfprintf_r+0x74c>
 8004266:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004268:	4651      	mov	r1, sl
 800426a:	465a      	mov	r2, fp
 800426c:	f002 fe72 	bl	8006f54 <__ssprint_r>
 8004270:	2800      	cmp	r0, #0
 8004272:	f47f abd4 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004276:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004278:	ae1f      	add	r6, sp, #124	; 0x7c
 800427a:	e6a0      	b.n	8003fbe <_svfprintf_r+0x74e>
 800427c:	46a0      	mov	r8, r4
 800427e:	461c      	mov	r4, r3
 8004280:	3401      	adds	r4, #1
 8004282:	19ed      	adds	r5, r5, r7
 8004284:	2c07      	cmp	r4, #7
 8004286:	f8c6 8000 	str.w	r8, [r6]
 800428a:	6077      	str	r7, [r6, #4]
 800428c:	953b      	str	r5, [sp, #236]	; 0xec
 800428e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004290:	dddc      	ble.n	800424c <_svfprintf_r+0x9dc>
 8004292:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004294:	4651      	mov	r1, sl
 8004296:	465a      	mov	r2, fp
 8004298:	f002 fe5c 	bl	8006f54 <__ssprint_r>
 800429c:	2800      	cmp	r0, #0
 800429e:	f47f abbe 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 80042a2:	ae1f      	add	r6, sp, #124	; 0x7c
 80042a4:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042a6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042a8:	e7d1      	b.n	800424e <_svfprintf_r+0x9de>
 80042aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042ac:	4651      	mov	r1, sl
 80042ae:	465a      	mov	r2, fp
 80042b0:	f002 fe50 	bl	8006f54 <__ssprint_r>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	f43f aecf 	beq.w	8004058 <_svfprintf_r+0x7e8>
 80042ba:	f7ff bbb0 	b.w	8003a1e <_svfprintf_r+0x1ae>
 80042be:	910d      	str	r1, [sp, #52]	; 0x34
 80042c0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80042c4:	e438      	b.n	8003b38 <_svfprintf_r+0x2c8>
 80042c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042c8:	4651      	mov	r1, sl
 80042ca:	465a      	mov	r2, fp
 80042cc:	f002 fe42 	bl	8006f54 <__ssprint_r>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	f47f aba4 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 80042d6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042d8:	ae1f      	add	r6, sp, #124	; 0x7c
 80042da:	e661      	b.n	8003fa0 <_svfprintf_r+0x730>
 80042dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042de:	4651      	mov	r1, sl
 80042e0:	465a      	mov	r2, fp
 80042e2:	f002 fe37 	bl	8006f54 <__ssprint_r>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	f47f ab99 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 80042ec:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042ee:	ae1f      	add	r6, sp, #124	; 0x7c
 80042f0:	e61a      	b.n	8003f28 <_svfprintf_r+0x6b8>
 80042f2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042f4:	4651      	mov	r1, sl
 80042f6:	465a      	mov	r2, fp
 80042f8:	f002 fe2c 	bl	8006f54 <__ssprint_r>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	f47f ab8e 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004302:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004304:	ae1f      	add	r6, sp, #124	; 0x7c
 8004306:	e600      	b.n	8003f0a <_svfprintf_r+0x69a>
 8004308:	9f40      	ldr	r7, [sp, #256]	; 0x100
 800430a:	2f00      	cmp	r7, #0
 800430c:	f340 819a 	ble.w	8004644 <_svfprintf_r+0xdd4>
 8004310:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004312:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004314:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004316:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004318:	4287      	cmp	r7, r0
 800431a:	bfa8      	it	ge
 800431c:	4607      	movge	r7, r0
 800431e:	1889      	adds	r1, r1, r2
 8004320:	2f00      	cmp	r7, #0
 8004322:	910d      	str	r1, [sp, #52]	; 0x34
 8004324:	dd0b      	ble.n	800433e <_svfprintf_r+0xace>
 8004326:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004328:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800432a:	6077      	str	r7, [r6, #4]
 800432c:	3401      	adds	r4, #1
 800432e:	19ed      	adds	r5, r5, r7
 8004330:	2c07      	cmp	r4, #7
 8004332:	6032      	str	r2, [r6, #0]
 8004334:	953b      	str	r5, [sp, #236]	; 0xec
 8004336:	943a      	str	r4, [sp, #232]	; 0xe8
 8004338:	f300 8304 	bgt.w	8004944 <_svfprintf_r+0x10d4>
 800433c:	3608      	adds	r6, #8
 800433e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004340:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8004344:	1bdf      	subs	r7, r3, r7
 8004346:	2f00      	cmp	r7, #0
 8004348:	f340 80a0 	ble.w	800448c <_svfprintf_r+0xc1c>
 800434c:	2f10      	cmp	r7, #16
 800434e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004350:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8004860 <_svfprintf_r+0xff0>
 8004354:	f340 815f 	ble.w	8004616 <_svfprintf_r+0xda6>
 8004358:	4623      	mov	r3, r4
 800435a:	f04f 0910 	mov.w	r9, #16
 800435e:	4644      	mov	r4, r8
 8004360:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004364:	e004      	b.n	8004370 <_svfprintf_r+0xb00>
 8004366:	3608      	adds	r6, #8
 8004368:	3f10      	subs	r7, #16
 800436a:	2f10      	cmp	r7, #16
 800436c:	f340 8151 	ble.w	8004612 <_svfprintf_r+0xda2>
 8004370:	3301      	adds	r3, #1
 8004372:	3510      	adds	r5, #16
 8004374:	2b07      	cmp	r3, #7
 8004376:	e886 0210 	stmia.w	r6, {r4, r9}
 800437a:	953b      	str	r5, [sp, #236]	; 0xec
 800437c:	933a      	str	r3, [sp, #232]	; 0xe8
 800437e:	ddf2      	ble.n	8004366 <_svfprintf_r+0xaf6>
 8004380:	4640      	mov	r0, r8
 8004382:	4651      	mov	r1, sl
 8004384:	465a      	mov	r2, fp
 8004386:	f002 fde5 	bl	8006f54 <__ssprint_r>
 800438a:	2800      	cmp	r0, #0
 800438c:	f47f ab47 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004390:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004392:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004394:	ae1f      	add	r6, sp, #124	; 0x7c
 8004396:	e7e7      	b.n	8004368 <_svfprintf_r+0xaf8>
 8004398:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800439a:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 800439e:	f003 000f 	and.w	r0, r3, #15
 80043a2:	460a      	mov	r2, r1
 80043a4:	5c28      	ldrb	r0, [r5, r0]
 80043a6:	3901      	subs	r1, #1
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	7010      	strb	r0, [r2, #0]
 80043ac:	d1f7      	bne.n	800439e <_svfprintf_r+0xb2e>
 80043ae:	ebc2 030b 	rsb	r3, r2, fp
 80043b2:	9211      	str	r2, [sp, #68]	; 0x44
 80043b4:	930d      	str	r3, [sp, #52]	; 0x34
 80043b6:	f7ff bbbf 	b.w	8003b38 <_svfprintf_r+0x2c8>
 80043ba:	2b09      	cmp	r3, #9
 80043bc:	bf82      	ittt	hi
 80043be:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 80043c2:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 80043c6:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 80043ca:	d809      	bhi.n	80043e0 <_svfprintf_r+0xb70>
 80043cc:	981d      	ldr	r0, [sp, #116]	; 0x74
 80043ce:	3330      	adds	r3, #48	; 0x30
 80043d0:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80043d4:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 80043d8:	900d      	str	r0, [sp, #52]	; 0x34
 80043da:	9111      	str	r1, [sp, #68]	; 0x44
 80043dc:	f7ff bbac 	b.w	8003b38 <_svfprintf_r+0x2c8>
 80043e0:	fba5 0203 	umull	r0, r2, r5, r3
 80043e4:	08d2      	lsrs	r2, r2, #3
 80043e6:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 80043ea:	4608      	mov	r0, r1
 80043ec:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 80043f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80043f4:	7001      	strb	r1, [r0, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	1e41      	subs	r1, r0, #1
 80043fa:	2a00      	cmp	r2, #0
 80043fc:	d1f0      	bne.n	80043e0 <_svfprintf_r+0xb70>
 80043fe:	ebc0 030b 	rsb	r3, r0, fp
 8004402:	9011      	str	r0, [sp, #68]	; 0x44
 8004404:	930d      	str	r3, [sp, #52]	; 0x34
 8004406:	f7ff bb97 	b.w	8003b38 <_svfprintf_r+0x2c8>
 800440a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800440c:	4651      	mov	r1, sl
 800440e:	465a      	mov	r2, fp
 8004410:	f002 fda0 	bl	8006f54 <__ssprint_r>
 8004414:	2800      	cmp	r0, #0
 8004416:	f47f ab02 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 800441a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800441c:	ae1f      	add	r6, sp, #124	; 0x7c
 800441e:	e563      	b.n	8003ee8 <_svfprintf_r+0x678>
 8004420:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004422:	1e4f      	subs	r7, r1, #1
 8004424:	2f00      	cmp	r7, #0
 8004426:	f77f af12 	ble.w	800424e <_svfprintf_r+0x9de>
 800442a:	2f10      	cmp	r7, #16
 800442c:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8004860 <_svfprintf_r+0xff0>
 8004430:	f77f af26 	ble.w	8004280 <_svfprintf_r+0xa10>
 8004434:	4623      	mov	r3, r4
 8004436:	f04f 0910 	mov.w	r9, #16
 800443a:	4644      	mov	r4, r8
 800443c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004440:	e004      	b.n	800444c <_svfprintf_r+0xbdc>
 8004442:	3608      	adds	r6, #8
 8004444:	3f10      	subs	r7, #16
 8004446:	2f10      	cmp	r7, #16
 8004448:	f77f af18 	ble.w	800427c <_svfprintf_r+0xa0c>
 800444c:	3301      	adds	r3, #1
 800444e:	3510      	adds	r5, #16
 8004450:	2b07      	cmp	r3, #7
 8004452:	e886 0210 	stmia.w	r6, {r4, r9}
 8004456:	953b      	str	r5, [sp, #236]	; 0xec
 8004458:	933a      	str	r3, [sp, #232]	; 0xe8
 800445a:	ddf2      	ble.n	8004442 <_svfprintf_r+0xbd2>
 800445c:	4640      	mov	r0, r8
 800445e:	4651      	mov	r1, sl
 8004460:	465a      	mov	r2, fp
 8004462:	f002 fd77 	bl	8006f54 <__ssprint_r>
 8004466:	2800      	cmp	r0, #0
 8004468:	f47f aad9 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 800446c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800446e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004470:	ae1f      	add	r6, sp, #124	; 0x7c
 8004472:	e7e7      	b.n	8004444 <_svfprintf_r+0xbd4>
 8004474:	2202      	movs	r2, #2
 8004476:	e405      	b.n	8003c84 <_svfprintf_r+0x414>
 8004478:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800447a:	4651      	mov	r1, sl
 800447c:	465a      	mov	r2, fp
 800447e:	f002 fd69 	bl	8006f54 <__ssprint_r>
 8004482:	2800      	cmp	r0, #0
 8004484:	f47f aacb 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004488:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800448a:	ae1f      	add	r6, sp, #124	; 0x7c
 800448c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800448e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004490:	4298      	cmp	r0, r3
 8004492:	dc45      	bgt.n	8004520 <_svfprintf_r+0xcb0>
 8004494:	9908      	ldr	r1, [sp, #32]
 8004496:	07c9      	lsls	r1, r1, #31
 8004498:	d442      	bmi.n	8004520 <_svfprintf_r+0xcb0>
 800449a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800449c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800449e:	180a      	adds	r2, r1, r0
 80044a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80044a4:	1a8f      	subs	r7, r1, r2
 80044a6:	1ac3      	subs	r3, r0, r3
 80044a8:	42bb      	cmp	r3, r7
 80044aa:	bfb8      	it	lt
 80044ac:	461f      	movlt	r7, r3
 80044ae:	2f00      	cmp	r7, #0
 80044b0:	dd0a      	ble.n	80044c8 <_svfprintf_r+0xc58>
 80044b2:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044b4:	6032      	str	r2, [r6, #0]
 80044b6:	3401      	adds	r4, #1
 80044b8:	19ed      	adds	r5, r5, r7
 80044ba:	2c07      	cmp	r4, #7
 80044bc:	6077      	str	r7, [r6, #4]
 80044be:	953b      	str	r5, [sp, #236]	; 0xec
 80044c0:	943a      	str	r4, [sp, #232]	; 0xe8
 80044c2:	f300 8256 	bgt.w	8004972 <_svfprintf_r+0x1102>
 80044c6:	3608      	adds	r6, #8
 80044c8:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80044cc:	1bdf      	subs	r7, r3, r7
 80044ce:	2f00      	cmp	r7, #0
 80044d0:	f77f ad75 	ble.w	8003fbe <_svfprintf_r+0x74e>
 80044d4:	2f10      	cmp	r7, #16
 80044d6:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044d8:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8004860 <_svfprintf_r+0xff0>
 80044dc:	f77f adc2 	ble.w	8004064 <_svfprintf_r+0x7f4>
 80044e0:	4623      	mov	r3, r4
 80044e2:	f04f 0910 	mov.w	r9, #16
 80044e6:	4644      	mov	r4, r8
 80044e8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80044ec:	e004      	b.n	80044f8 <_svfprintf_r+0xc88>
 80044ee:	3608      	adds	r6, #8
 80044f0:	3f10      	subs	r7, #16
 80044f2:	2f10      	cmp	r7, #16
 80044f4:	f77f adb4 	ble.w	8004060 <_svfprintf_r+0x7f0>
 80044f8:	3301      	adds	r3, #1
 80044fa:	3510      	adds	r5, #16
 80044fc:	2b07      	cmp	r3, #7
 80044fe:	e886 0210 	stmia.w	r6, {r4, r9}
 8004502:	953b      	str	r5, [sp, #236]	; 0xec
 8004504:	933a      	str	r3, [sp, #232]	; 0xe8
 8004506:	ddf2      	ble.n	80044ee <_svfprintf_r+0xc7e>
 8004508:	4640      	mov	r0, r8
 800450a:	4651      	mov	r1, sl
 800450c:	465a      	mov	r2, fp
 800450e:	f002 fd21 	bl	8006f54 <__ssprint_r>
 8004512:	2800      	cmp	r0, #0
 8004514:	f47f aa83 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004518:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800451a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800451c:	ae1f      	add	r6, sp, #124	; 0x7c
 800451e:	e7e7      	b.n	80044f0 <_svfprintf_r+0xc80>
 8004520:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004522:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004524:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004526:	6070      	str	r0, [r6, #4]
 8004528:	3401      	adds	r4, #1
 800452a:	182d      	adds	r5, r5, r0
 800452c:	2c07      	cmp	r4, #7
 800452e:	6032      	str	r2, [r6, #0]
 8004530:	953b      	str	r5, [sp, #236]	; 0xec
 8004532:	943a      	str	r4, [sp, #232]	; 0xe8
 8004534:	f300 8211 	bgt.w	800495a <_svfprintf_r+0x10ea>
 8004538:	3608      	adds	r6, #8
 800453a:	e7ae      	b.n	800449a <_svfprintf_r+0xc2a>
 800453c:	9b08      	ldr	r3, [sp, #32]
 800453e:	07da      	lsls	r2, r3, #31
 8004540:	f53f ae57 	bmi.w	80041f2 <_svfprintf_r+0x982>
 8004544:	3401      	adds	r4, #1
 8004546:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004548:	3501      	adds	r5, #1
 800454a:	2301      	movs	r3, #1
 800454c:	2c07      	cmp	r4, #7
 800454e:	6032      	str	r2, [r6, #0]
 8004550:	6073      	str	r3, [r6, #4]
 8004552:	953b      	str	r5, [sp, #236]	; 0xec
 8004554:	943a      	str	r4, [sp, #232]	; 0xe8
 8004556:	f77f ae79 	ble.w	800424c <_svfprintf_r+0x9dc>
 800455a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800455c:	4651      	mov	r1, sl
 800455e:	465a      	mov	r2, fp
 8004560:	f002 fcf8 	bl	8006f54 <__ssprint_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	f47f aa5a 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 800456a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800456c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800456e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004570:	e66d      	b.n	800424e <_svfprintf_r+0x9de>
 8004572:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004574:	4651      	mov	r1, sl
 8004576:	465a      	mov	r2, fp
 8004578:	f002 fcec 	bl	8006f54 <__ssprint_r>
 800457c:	2800      	cmp	r0, #0
 800457e:	f47f aa4e 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004582:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004584:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004586:	ae1f      	add	r6, sp, #124	; 0x7c
 8004588:	e64b      	b.n	8004222 <_svfprintf_r+0x9b2>
 800458a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800458c:	4651      	mov	r1, sl
 800458e:	465a      	mov	r2, fp
 8004590:	f002 fce0 	bl	8006f54 <__ssprint_r>
 8004594:	2800      	cmp	r0, #0
 8004596:	f47f aa42 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 800459a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800459c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800459e:	ae1f      	add	r6, sp, #124	; 0x7c
 80045a0:	e633      	b.n	800420a <_svfprintf_r+0x99a>
 80045a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045a4:	4651      	mov	r1, sl
 80045a6:	465a      	mov	r2, fp
 80045a8:	f002 fcd4 	bl	8006f54 <__ssprint_r>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	f47f aa36 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 80045b2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045b4:	ae1f      	add	r6, sp, #124	; 0x7c
 80045b6:	e4bb      	b.n	8003f30 <_svfprintf_r+0x6c0>
 80045b8:	f002 fb64 	bl	8006c84 <__fpclassifyd>
 80045bc:	2800      	cmp	r0, #0
 80045be:	f040 809e 	bne.w	80046fe <_svfprintf_r+0xe8e>
 80045c2:	2203      	movs	r2, #3
 80045c4:	9012      	str	r0, [sp, #72]	; 0x48
 80045c6:	4ba3      	ldr	r3, [pc, #652]	; (8004854 <_svfprintf_r+0xfe4>)
 80045c8:	920a      	str	r2, [sp, #40]	; 0x28
 80045ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 80045cc:	4aa2      	ldr	r2, [pc, #648]	; (8004858 <_svfprintf_r+0xfe8>)
 80045ce:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80045d2:	2847      	cmp	r0, #71	; 0x47
 80045d4:	bfd8      	it	le
 80045d6:	461a      	movle	r2, r3
 80045d8:	9211      	str	r2, [sp, #68]	; 0x44
 80045da:	2303      	movs	r3, #3
 80045dc:	9a08      	ldr	r2, [sp, #32]
 80045de:	930d      	str	r3, [sp, #52]	; 0x34
 80045e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80045e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045e6:	9208      	str	r2, [sp, #32]
 80045e8:	9316      	str	r3, [sp, #88]	; 0x58
 80045ea:	f7ff baaf 	b.w	8003b4c <_svfprintf_r+0x2dc>
 80045ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80045f0:	2201      	movs	r2, #1
 80045f2:	680b      	ldr	r3, [r1, #0]
 80045f4:	e414      	b.n	8003e20 <_svfprintf_r+0x5b0>
 80045f6:	9b08      	ldr	r3, [sp, #32]
 80045f8:	065f      	lsls	r7, r3, #25
 80045fa:	d56d      	bpl.n	80046d8 <_svfprintf_r+0xe68>
 80045fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80045fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004600:	6803      	ldr	r3, [r0, #0]
 8004602:	3004      	adds	r0, #4
 8004604:	900e      	str	r0, [sp, #56]	; 0x38
 8004606:	8019      	strh	r1, [r3, #0]
 8004608:	f7ff b960 	b.w	80038cc <_svfprintf_r+0x5c>
 800460c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800460e:	680b      	ldr	r3, [r1, #0]
 8004610:	e406      	b.n	8003e20 <_svfprintf_r+0x5b0>
 8004612:	46a0      	mov	r8, r4
 8004614:	461c      	mov	r4, r3
 8004616:	3401      	adds	r4, #1
 8004618:	19ed      	adds	r5, r5, r7
 800461a:	2c07      	cmp	r4, #7
 800461c:	f8c6 8000 	str.w	r8, [r6]
 8004620:	6077      	str	r7, [r6, #4]
 8004622:	953b      	str	r5, [sp, #236]	; 0xec
 8004624:	943a      	str	r4, [sp, #232]	; 0xe8
 8004626:	f73f af27 	bgt.w	8004478 <_svfprintf_r+0xc08>
 800462a:	3608      	adds	r6, #8
 800462c:	e72e      	b.n	800448c <_svfprintf_r+0xc1c>
 800462e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004630:	4651      	mov	r1, sl
 8004632:	465a      	mov	r2, fp
 8004634:	f002 fc8e 	bl	8006f54 <__ssprint_r>
 8004638:	2800      	cmp	r0, #0
 800463a:	f47f a9f0 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 800463e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004640:	ae1f      	add	r6, sp, #124	; 0x7c
 8004642:	e53d      	b.n	80040c0 <_svfprintf_r+0x850>
 8004644:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004646:	4b85      	ldr	r3, [pc, #532]	; (800485c <_svfprintf_r+0xfec>)
 8004648:	3401      	adds	r4, #1
 800464a:	6033      	str	r3, [r6, #0]
 800464c:	3501      	adds	r5, #1
 800464e:	2301      	movs	r3, #1
 8004650:	2c07      	cmp	r4, #7
 8004652:	6073      	str	r3, [r6, #4]
 8004654:	953b      	str	r5, [sp, #236]	; 0xec
 8004656:	943a      	str	r4, [sp, #232]	; 0xe8
 8004658:	f300 8139 	bgt.w	80048ce <_svfprintf_r+0x105e>
 800465c:	3608      	adds	r6, #8
 800465e:	b92f      	cbnz	r7, 800466c <_svfprintf_r+0xdfc>
 8004660:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004662:	b91a      	cbnz	r2, 800466c <_svfprintf_r+0xdfc>
 8004664:	9b08      	ldr	r3, [sp, #32]
 8004666:	07d8      	lsls	r0, r3, #31
 8004668:	f57f aca9 	bpl.w	8003fbe <_svfprintf_r+0x74e>
 800466c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800466e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004670:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004672:	6071      	str	r1, [r6, #4]
 8004674:	3401      	adds	r4, #1
 8004676:	186d      	adds	r5, r5, r1
 8004678:	2c07      	cmp	r4, #7
 800467a:	6030      	str	r0, [r6, #0]
 800467c:	953b      	str	r5, [sp, #236]	; 0xec
 800467e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004680:	f300 81d2 	bgt.w	8004a28 <_svfprintf_r+0x11b8>
 8004684:	3608      	adds	r6, #8
 8004686:	427f      	negs	r7, r7
 8004688:	2f00      	cmp	r7, #0
 800468a:	f340 8141 	ble.w	8004910 <_svfprintf_r+0x10a0>
 800468e:	2f10      	cmp	r7, #16
 8004690:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8004860 <_svfprintf_r+0xff0>
 8004694:	f340 8183 	ble.w	800499e <_svfprintf_r+0x112e>
 8004698:	4623      	mov	r3, r4
 800469a:	f04f 0910 	mov.w	r9, #16
 800469e:	4644      	mov	r4, r8
 80046a0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80046a4:	e004      	b.n	80046b0 <_svfprintf_r+0xe40>
 80046a6:	3608      	adds	r6, #8
 80046a8:	3f10      	subs	r7, #16
 80046aa:	2f10      	cmp	r7, #16
 80046ac:	f340 8175 	ble.w	800499a <_svfprintf_r+0x112a>
 80046b0:	3301      	adds	r3, #1
 80046b2:	3510      	adds	r5, #16
 80046b4:	2b07      	cmp	r3, #7
 80046b6:	e886 0210 	stmia.w	r6, {r4, r9}
 80046ba:	953b      	str	r5, [sp, #236]	; 0xec
 80046bc:	933a      	str	r3, [sp, #232]	; 0xe8
 80046be:	ddf2      	ble.n	80046a6 <_svfprintf_r+0xe36>
 80046c0:	4640      	mov	r0, r8
 80046c2:	4651      	mov	r1, sl
 80046c4:	465a      	mov	r2, fp
 80046c6:	f002 fc45 	bl	8006f54 <__ssprint_r>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	f47f a9a7 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 80046d0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046d2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80046d4:	ae1f      	add	r6, sp, #124	; 0x7c
 80046d6:	e7e7      	b.n	80046a8 <_svfprintf_r+0xe38>
 80046d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80046dc:	6813      	ldr	r3, [r2, #0]
 80046de:	3204      	adds	r2, #4
 80046e0:	920e      	str	r2, [sp, #56]	; 0x38
 80046e2:	6018      	str	r0, [r3, #0]
 80046e4:	f7ff b8f2 	b.w	80038cc <_svfprintf_r+0x5c>
 80046e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80046ea:	4651      	mov	r1, sl
 80046ec:	465a      	mov	r2, fp
 80046ee:	f002 fc31 	bl	8006f54 <__ssprint_r>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f47f a993 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 80046f8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046fa:	ae1f      	add	r6, sp, #124	; 0x7c
 80046fc:	e4f5      	b.n	80040ea <_svfprintf_r+0x87a>
 80046fe:	1c60      	adds	r0, r4, #1
 8004700:	f000 80f1 	beq.w	80048e6 <_svfprintf_r+0x1076>
 8004704:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004706:	2967      	cmp	r1, #103	; 0x67
 8004708:	bf18      	it	ne
 800470a:	2947      	cmpne	r1, #71	; 0x47
 800470c:	bf14      	ite	ne
 800470e:	2300      	movne	r3, #0
 8004710:	2301      	moveq	r3, #1
 8004712:	bf18      	it	ne
 8004714:	930a      	strne	r3, [sp, #40]	; 0x28
 8004716:	d104      	bne.n	8004722 <_svfprintf_r+0xeb2>
 8004718:	2c00      	cmp	r4, #0
 800471a:	f000 81ad 	beq.w	8004a78 <_svfprintf_r+0x1208>
 800471e:	2201      	movs	r2, #1
 8004720:	920a      	str	r2, [sp, #40]	; 0x28
 8004722:	9808      	ldr	r0, [sp, #32]
 8004724:	2d00      	cmp	r5, #0
 8004726:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800472a:	9008      	str	r0, [sp, #32]
 800472c:	f2c0 8189 	blt.w	8004a42 <_svfprintf_r+0x11d2>
 8004730:	2200      	movs	r2, #0
 8004732:	9212      	str	r2, [sp, #72]	; 0x48
 8004734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004736:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004738:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 800473c:	424b      	negs	r3, r1
 800473e:	eb43 0301 	adc.w	r3, r3, r1
 8004742:	469c      	mov	ip, r3
 8004744:	2846      	cmp	r0, #70	; 0x46
 8004746:	bf08      	it	eq
 8004748:	f04c 0c01 	orreq.w	ip, ip, #1
 800474c:	930d      	str	r3, [sp, #52]	; 0x34
 800474e:	46a1      	mov	r9, r4
 8004750:	2103      	movs	r1, #3
 8004752:	f1bc 0f00 	cmp.w	ip, #0
 8004756:	d107      	bne.n	8004768 <_svfprintf_r+0xef8>
 8004758:	2865      	cmp	r0, #101	; 0x65
 800475a:	bf18      	it	ne
 800475c:	2845      	cmpne	r0, #69	; 0x45
 800475e:	bf0c      	ite	eq
 8004760:	f104 0901 	addeq.w	r9, r4, #1
 8004764:	46a1      	movne	r9, r4
 8004766:	2102      	movs	r1, #2
 8004768:	e88d 0202 	stmia.w	sp, {r1, r9}
 800476c:	a940      	add	r1, sp, #256	; 0x100
 800476e:	9102      	str	r1, [sp, #8]
 8004770:	a941      	add	r1, sp, #260	; 0x104
 8004772:	9103      	str	r1, [sp, #12]
 8004774:	4642      	mov	r2, r8
 8004776:	a942      	add	r1, sp, #264	; 0x108
 8004778:	462b      	mov	r3, r5
 800477a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800477c:	9104      	str	r1, [sp, #16]
 800477e:	f8cd c018 	str.w	ip, [sp, #24]
 8004782:	f000 fa6d 	bl	8004c60 <_dtoa_r>
 8004786:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004788:	9011      	str	r0, [sp, #68]	; 0x44
 800478a:	2947      	cmp	r1, #71	; 0x47
 800478c:	bf18      	it	ne
 800478e:	2967      	cmpne	r1, #103	; 0x67
 8004790:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004794:	d104      	bne.n	80047a0 <_svfprintf_r+0xf30>
 8004796:	9a08      	ldr	r2, [sp, #32]
 8004798:	07d2      	lsls	r2, r2, #31
 800479a:	bf58      	it	pl
 800479c:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 800479e:	d515      	bpl.n	80047cc <_svfprintf_r+0xf5c>
 80047a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047a2:	eb03 0709 	add.w	r7, r3, r9
 80047a6:	f1bc 0f00 	cmp.w	ip, #0
 80047aa:	d005      	beq.n	80047b8 <_svfprintf_r+0xf48>
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	2b30      	cmp	r3, #48	; 0x30
 80047b0:	f000 8165 	beq.w	8004a7e <_svfprintf_r+0x120e>
 80047b4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80047b6:	18ff      	adds	r7, r7, r3
 80047b8:	4640      	mov	r0, r8
 80047ba:	4629      	mov	r1, r5
 80047bc:	2200      	movs	r2, #0
 80047be:	2300      	movs	r3, #0
 80047c0:	f003 ff86 	bl	80086d0 <__aeabi_dcmpeq>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	f000 8117 	beq.w	80049f8 <_svfprintf_r+0x1188>
 80047ca:	9742      	str	r7, [sp, #264]	; 0x108
 80047cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80047ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047d0:	1a3f      	subs	r7, r7, r0
 80047d2:	9710      	str	r7, [sp, #64]	; 0x40
 80047d4:	2900      	cmp	r1, #0
 80047d6:	f000 80f9 	beq.w	80049cc <_svfprintf_r+0x115c>
 80047da:	9940      	ldr	r1, [sp, #256]	; 0x100
 80047dc:	1ccb      	adds	r3, r1, #3
 80047de:	db02      	blt.n	80047e6 <_svfprintf_r+0xf76>
 80047e0:	428c      	cmp	r4, r1
 80047e2:	f280 80fa 	bge.w	80049da <_svfprintf_r+0x116a>
 80047e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80047e8:	3a02      	subs	r2, #2
 80047ea:	9215      	str	r2, [sp, #84]	; 0x54
 80047ec:	3901      	subs	r1, #1
 80047ee:	9815      	ldr	r0, [sp, #84]	; 0x54
 80047f0:	9140      	str	r1, [sp, #256]	; 0x100
 80047f2:	2900      	cmp	r1, #0
 80047f4:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 80047f8:	f2c0 815d 	blt.w	8004ab6 <_svfprintf_r+0x1246>
 80047fc:	232b      	movs	r3, #43	; 0x2b
 80047fe:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004802:	2909      	cmp	r1, #9
 8004804:	f340 8122 	ble.w	8004a4c <_svfprintf_r+0x11dc>
 8004808:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 800480c:	f246 6467 	movw	r4, #26215	; 0x6667
 8004810:	4638      	mov	r0, r7
 8004812:	f2c6 6466 	movt	r4, #26214	; 0x6666
 8004816:	fb84 3201 	smull	r3, r2, r4, r1
 800481a:	17cb      	asrs	r3, r1, #31
 800481c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004820:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8004824:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8004828:	3230      	adds	r2, #48	; 0x30
 800482a:	2b09      	cmp	r3, #9
 800482c:	4605      	mov	r5, r0
 800482e:	4619      	mov	r1, r3
 8004830:	f800 2d01 	strb.w	r2, [r0, #-1]!
 8004834:	dcef      	bgt.n	8004816 <_svfprintf_r+0xfa6>
 8004836:	3130      	adds	r1, #48	; 0x30
 8004838:	1eaa      	subs	r2, r5, #2
 800483a:	b2c9      	uxtb	r1, r1
 800483c:	42ba      	cmp	r2, r7
 800483e:	f805 1c02 	strb.w	r1, [r5, #-2]
 8004842:	bf28      	it	cs
 8004844:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8004848:	d213      	bcs.n	8004872 <_svfprintf_r+0x1002>
 800484a:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 800484e:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 8004852:	e009      	b.n	8004868 <_svfprintf_r+0xff8>
 8004854:	08008d08 	.word	0x08008d08
 8004858:	08008d0c 	.word	0x08008d0c
 800485c:	08008d40 	.word	0x08008d40
 8004860:	08008b30 	.word	0x08008b30
 8004864:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004868:	f803 1b01 	strb.w	r1, [r3], #1
 800486c:	4282      	cmp	r2, r0
 800486e:	4619      	mov	r1, r3
 8004870:	d1f8      	bne.n	8004864 <_svfprintf_r+0xff4>
 8004872:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004874:	ab3c      	add	r3, sp, #240	; 0xf0
 8004876:	1acb      	subs	r3, r1, r3
 8004878:	931b      	str	r3, [sp, #108]	; 0x6c
 800487a:	2801      	cmp	r0, #1
 800487c:	4403      	add	r3, r0
 800487e:	930d      	str	r3, [sp, #52]	; 0x34
 8004880:	f340 8125 	ble.w	8004ace <_svfprintf_r+0x125e>
 8004884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004886:	3301      	adds	r3, #1
 8004888:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 800488c:	2100      	movs	r1, #0
 800488e:	930d      	str	r3, [sp, #52]	; 0x34
 8004890:	900a      	str	r0, [sp, #40]	; 0x28
 8004892:	9116      	str	r1, [sp, #88]	; 0x58
 8004894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004896:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800489a:	2b00      	cmp	r3, #0
 800489c:	f43f a956 	beq.w	8003b4c <_svfprintf_r+0x2dc>
 80048a0:	232d      	movs	r3, #45	; 0x2d
 80048a2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80048a6:	2300      	movs	r3, #0
 80048a8:	9312      	str	r3, [sp, #72]	; 0x48
 80048aa:	f7ff b950 	b.w	8003b4e <_svfprintf_r+0x2de>
 80048ae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048b0:	2140      	movs	r1, #64	; 0x40
 80048b2:	f001 fa59 	bl	8005d68 <_malloc_r>
 80048b6:	f8ca 0000 	str.w	r0, [sl]
 80048ba:	f8ca 0010 	str.w	r0, [sl, #16]
 80048be:	2800      	cmp	r0, #0
 80048c0:	f000 812b 	beq.w	8004b1a <_svfprintf_r+0x12aa>
 80048c4:	2340      	movs	r3, #64	; 0x40
 80048c6:	f8ca 3014 	str.w	r3, [sl, #20]
 80048ca:	f7fe bfec 	b.w	80038a6 <_svfprintf_r+0x36>
 80048ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048d0:	4651      	mov	r1, sl
 80048d2:	465a      	mov	r2, fp
 80048d4:	f002 fb3e 	bl	8006f54 <__ssprint_r>
 80048d8:	2800      	cmp	r0, #0
 80048da:	f47f a8a0 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 80048de:	9f40      	ldr	r7, [sp, #256]	; 0x100
 80048e0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80048e2:	ae1f      	add	r6, sp, #124	; 0x7c
 80048e4:	e6bb      	b.n	800465e <_svfprintf_r+0xdee>
 80048e6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80048e8:	2847      	cmp	r0, #71	; 0x47
 80048ea:	bf18      	it	ne
 80048ec:	2867      	cmpne	r0, #103	; 0x67
 80048ee:	bf14      	ite	ne
 80048f0:	2000      	movne	r0, #0
 80048f2:	2001      	moveq	r0, #1
 80048f4:	900a      	str	r0, [sp, #40]	; 0x28
 80048f6:	2406      	movs	r4, #6
 80048f8:	e713      	b.n	8004722 <_svfprintf_r+0xeb2>
 80048fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048fc:	4651      	mov	r1, sl
 80048fe:	465a      	mov	r2, fp
 8004900:	f002 fb28 	bl	8006f54 <__ssprint_r>
 8004904:	2800      	cmp	r0, #0
 8004906:	f47f a88a 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 800490a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800490c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800490e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004910:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004912:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004914:	6072      	str	r2, [r6, #4]
 8004916:	3401      	adds	r4, #1
 8004918:	18ad      	adds	r5, r5, r2
 800491a:	2c07      	cmp	r4, #7
 800491c:	6033      	str	r3, [r6, #0]
 800491e:	953b      	str	r5, [sp, #236]	; 0xec
 8004920:	943a      	str	r4, [sp, #232]	; 0xe8
 8004922:	f77f ab4b 	ble.w	8003fbc <_svfprintf_r+0x74c>
 8004926:	f7ff bba6 	b.w	8004076 <_svfprintf_r+0x806>
 800492a:	f002 fae3 	bl	8006ef4 <strlen>
 800492e:	900d      	str	r0, [sp, #52]	; 0x34
 8004930:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8004934:	9512      	str	r5, [sp, #72]	; 0x48
 8004936:	900a      	str	r0, [sp, #40]	; 0x28
 8004938:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 800493c:	970e      	str	r7, [sp, #56]	; 0x38
 800493e:	9516      	str	r5, [sp, #88]	; 0x58
 8004940:	f7ff b904 	b.w	8003b4c <_svfprintf_r+0x2dc>
 8004944:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004946:	4651      	mov	r1, sl
 8004948:	465a      	mov	r2, fp
 800494a:	f002 fb03 	bl	8006f54 <__ssprint_r>
 800494e:	2800      	cmp	r0, #0
 8004950:	f47f a865 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004954:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004956:	ae1f      	add	r6, sp, #124	; 0x7c
 8004958:	e4f1      	b.n	800433e <_svfprintf_r+0xace>
 800495a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800495c:	4651      	mov	r1, sl
 800495e:	465a      	mov	r2, fp
 8004960:	f002 faf8 	bl	8006f54 <__ssprint_r>
 8004964:	2800      	cmp	r0, #0
 8004966:	f47f a85a 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 800496a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800496c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800496e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004970:	e593      	b.n	800449a <_svfprintf_r+0xc2a>
 8004972:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004974:	4651      	mov	r1, sl
 8004976:	465a      	mov	r2, fp
 8004978:	f002 faec 	bl	8006f54 <__ssprint_r>
 800497c:	2800      	cmp	r0, #0
 800497e:	f47f a84e 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004982:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004984:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004986:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004988:	1acb      	subs	r3, r1, r3
 800498a:	ae1f      	add	r6, sp, #124	; 0x7c
 800498c:	e59c      	b.n	80044c8 <_svfprintf_r+0xc58>
 800498e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004990:	ebc3 030b 	rsb	r3, r3, fp
 8004994:	930d      	str	r3, [sp, #52]	; 0x34
 8004996:	f7ff b8cf 	b.w	8003b38 <_svfprintf_r+0x2c8>
 800499a:	46a0      	mov	r8, r4
 800499c:	461c      	mov	r4, r3
 800499e:	3401      	adds	r4, #1
 80049a0:	19ed      	adds	r5, r5, r7
 80049a2:	2c07      	cmp	r4, #7
 80049a4:	f8c6 8000 	str.w	r8, [r6]
 80049a8:	6077      	str	r7, [r6, #4]
 80049aa:	953b      	str	r5, [sp, #236]	; 0xec
 80049ac:	943a      	str	r4, [sp, #232]	; 0xe8
 80049ae:	dca4      	bgt.n	80048fa <_svfprintf_r+0x108a>
 80049b0:	3608      	adds	r6, #8
 80049b2:	e7ad      	b.n	8004910 <_svfprintf_r+0x10a0>
 80049b4:	2c06      	cmp	r4, #6
 80049b6:	bf28      	it	cs
 80049b8:	2406      	movcs	r4, #6
 80049ba:	495f      	ldr	r1, [pc, #380]	; (8004b38 <_svfprintf_r+0x12c8>)
 80049bc:	940d      	str	r4, [sp, #52]	; 0x34
 80049be:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 80049c2:	900a      	str	r0, [sp, #40]	; 0x28
 80049c4:	970e      	str	r7, [sp, #56]	; 0x38
 80049c6:	9111      	str	r1, [sp, #68]	; 0x44
 80049c8:	f7ff ba01 	b.w	8003dce <_svfprintf_r+0x55e>
 80049cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049ce:	2b65      	cmp	r3, #101	; 0x65
 80049d0:	dd6f      	ble.n	8004ab2 <_svfprintf_r+0x1242>
 80049d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049d4:	9940      	ldr	r1, [sp, #256]	; 0x100
 80049d6:	2a00      	cmp	r2, #0
 80049d8:	d15e      	bne.n	8004a98 <_svfprintf_r+0x1228>
 80049da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80049dc:	428a      	cmp	r2, r1
 80049de:	dc3d      	bgt.n	8004a5c <_svfprintf_r+0x11ec>
 80049e0:	9b08      	ldr	r3, [sp, #32]
 80049e2:	07da      	lsls	r2, r3, #31
 80049e4:	d56c      	bpl.n	8004ac0 <_svfprintf_r+0x1250>
 80049e6:	1c4b      	adds	r3, r1, #1
 80049e8:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 80049ec:	2267      	movs	r2, #103	; 0x67
 80049ee:	930d      	str	r3, [sp, #52]	; 0x34
 80049f0:	900a      	str	r0, [sp, #40]	; 0x28
 80049f2:	9215      	str	r2, [sp, #84]	; 0x54
 80049f4:	9116      	str	r1, [sp, #88]	; 0x58
 80049f6:	e74d      	b.n	8004894 <_svfprintf_r+0x1024>
 80049f8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80049fa:	429f      	cmp	r7, r3
 80049fc:	bf98      	it	ls
 80049fe:	461f      	movls	r7, r3
 8004a00:	f67f aee4 	bls.w	80047cc <_svfprintf_r+0xf5c>
 8004a04:	2230      	movs	r2, #48	; 0x30
 8004a06:	f803 2b01 	strb.w	r2, [r3], #1
 8004a0a:	42bb      	cmp	r3, r7
 8004a0c:	9342      	str	r3, [sp, #264]	; 0x108
 8004a0e:	d1fa      	bne.n	8004a06 <_svfprintf_r+0x1196>
 8004a10:	e6dc      	b.n	80047cc <_svfprintf_r+0xf5c>
 8004a12:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8004a16:	9012      	str	r0, [sp, #72]	; 0x48
 8004a18:	920a      	str	r2, [sp, #40]	; 0x28
 8004a1a:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004a1e:	970e      	str	r7, [sp, #56]	; 0x38
 8004a20:	940d      	str	r4, [sp, #52]	; 0x34
 8004a22:	9016      	str	r0, [sp, #88]	; 0x58
 8004a24:	f7ff b892 	b.w	8003b4c <_svfprintf_r+0x2dc>
 8004a28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	465a      	mov	r2, fp
 8004a2e:	f002 fa91 	bl	8006f54 <__ssprint_r>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	f47e aff3 	bne.w	8003a1e <_svfprintf_r+0x1ae>
 8004a38:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004a3a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004a3c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004a3e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004a40:	e621      	b.n	8004686 <_svfprintf_r+0xe16>
 8004a42:	212d      	movs	r1, #45	; 0x2d
 8004a44:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004a48:	9112      	str	r1, [sp, #72]	; 0x48
 8004a4a:	e673      	b.n	8004734 <_svfprintf_r+0xec4>
 8004a4c:	3130      	adds	r1, #48	; 0x30
 8004a4e:	2330      	movs	r3, #48	; 0x30
 8004a50:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8004a54:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8004a58:	a93d      	add	r1, sp, #244	; 0xf4
 8004a5a:	e70a      	b.n	8004872 <_svfprintf_r+0x1002>
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004a60:	bfd4      	ite	le
 8004a62:	f1c1 0302 	rsble	r3, r1, #2
 8004a66:	2301      	movgt	r3, #1
 8004a68:	181b      	adds	r3, r3, r0
 8004a6a:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8004a6e:	930d      	str	r3, [sp, #52]	; 0x34
 8004a70:	2367      	movs	r3, #103	; 0x67
 8004a72:	920a      	str	r2, [sp, #40]	; 0x28
 8004a74:	9315      	str	r3, [sp, #84]	; 0x54
 8004a76:	e7bd      	b.n	80049f4 <_svfprintf_r+0x1184>
 8004a78:	2401      	movs	r4, #1
 8004a7a:	940a      	str	r4, [sp, #40]	; 0x28
 8004a7c:	e651      	b.n	8004722 <_svfprintf_r+0xeb2>
 8004a7e:	4640      	mov	r0, r8
 8004a80:	4629      	mov	r1, r5
 8004a82:	2200      	movs	r2, #0
 8004a84:	2300      	movs	r3, #0
 8004a86:	f003 fe23 	bl	80086d0 <__aeabi_dcmpeq>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	f47f ae92 	bne.w	80047b4 <_svfprintf_r+0xf44>
 8004a90:	f1c9 0301 	rsb	r3, r9, #1
 8004a94:	9340      	str	r3, [sp, #256]	; 0x100
 8004a96:	e68e      	b.n	80047b6 <_svfprintf_r+0xf46>
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	dd38      	ble.n	8004b0e <_svfprintf_r+0x129e>
 8004a9c:	bb74      	cbnz	r4, 8004afc <_svfprintf_r+0x128c>
 8004a9e:	9b08      	ldr	r3, [sp, #32]
 8004aa0:	07dd      	lsls	r5, r3, #31
 8004aa2:	d42b      	bmi.n	8004afc <_svfprintf_r+0x128c>
 8004aa4:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004aa8:	2266      	movs	r2, #102	; 0x66
 8004aaa:	900a      	str	r0, [sp, #40]	; 0x28
 8004aac:	910d      	str	r1, [sp, #52]	; 0x34
 8004aae:	9215      	str	r2, [sp, #84]	; 0x54
 8004ab0:	e7a0      	b.n	80049f4 <_svfprintf_r+0x1184>
 8004ab2:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004ab4:	e69a      	b.n	80047ec <_svfprintf_r+0xf7c>
 8004ab6:	232d      	movs	r3, #45	; 0x2d
 8004ab8:	4249      	negs	r1, r1
 8004aba:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004abe:	e6a0      	b.n	8004802 <_svfprintf_r+0xf92>
 8004ac0:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004ac4:	2267      	movs	r2, #103	; 0x67
 8004ac6:	900a      	str	r0, [sp, #40]	; 0x28
 8004ac8:	910d      	str	r1, [sp, #52]	; 0x34
 8004aca:	9215      	str	r2, [sp, #84]	; 0x54
 8004acc:	e792      	b.n	80049f4 <_svfprintf_r+0x1184>
 8004ace:	9908      	ldr	r1, [sp, #32]
 8004ad0:	f011 0301 	ands.w	r3, r1, #1
 8004ad4:	f47f aed6 	bne.w	8004884 <_svfprintf_r+0x1014>
 8004ad8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ada:	9316      	str	r3, [sp, #88]	; 0x58
 8004adc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004ae0:	920a      	str	r2, [sp, #40]	; 0x28
 8004ae2:	e6d7      	b.n	8004894 <_svfprintf_r+0x1024>
 8004ae4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004ae6:	680c      	ldr	r4, [r1, #0]
 8004ae8:	1d0b      	adds	r3, r1, #4
 8004aea:	2c00      	cmp	r4, #0
 8004aec:	bfbc      	itt	lt
 8004aee:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004af0:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004af4:	f6bf a985 	bge.w	8003e02 <_svfprintf_r+0x592>
 8004af8:	f7fe bf18 	b.w	800392c <_svfprintf_r+0xbc>
 8004afc:	3401      	adds	r4, #1
 8004afe:	190c      	adds	r4, r1, r4
 8004b00:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004b04:	2066      	movs	r0, #102	; 0x66
 8004b06:	940d      	str	r4, [sp, #52]	; 0x34
 8004b08:	930a      	str	r3, [sp, #40]	; 0x28
 8004b0a:	9015      	str	r0, [sp, #84]	; 0x54
 8004b0c:	e772      	b.n	80049f4 <_svfprintf_r+0x1184>
 8004b0e:	b914      	cbnz	r4, 8004b16 <_svfprintf_r+0x12a6>
 8004b10:	9a08      	ldr	r2, [sp, #32]
 8004b12:	07d0      	lsls	r0, r2, #31
 8004b14:	d509      	bpl.n	8004b2a <_svfprintf_r+0x12ba>
 8004b16:	3402      	adds	r4, #2
 8004b18:	e7f2      	b.n	8004b00 <_svfprintf_r+0x1290>
 8004b1a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b22:	600b      	str	r3, [r1, #0]
 8004b24:	920c      	str	r2, [sp, #48]	; 0x30
 8004b26:	f7fe bf83 	b.w	8003a30 <_svfprintf_r+0x1c0>
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	2266      	movs	r2, #102	; 0x66
 8004b2e:	900a      	str	r0, [sp, #40]	; 0x28
 8004b30:	9215      	str	r2, [sp, #84]	; 0x54
 8004b32:	900d      	str	r0, [sp, #52]	; 0x34
 8004b34:	e75e      	b.n	80049f4 <_svfprintf_r+0x1184>
 8004b36:	bf00      	nop
 8004b38:	08008d38 	.word	0x08008d38
 8004b3c:	00000000 	.word	0x00000000

08004b40 <quorem>:
 8004b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b44:	6903      	ldr	r3, [r0, #16]
 8004b46:	690d      	ldr	r5, [r1, #16]
 8004b48:	429d      	cmp	r5, r3
 8004b4a:	4681      	mov	r9, r0
 8004b4c:	f300 8084 	bgt.w	8004c58 <quorem+0x118>
 8004b50:	1ceb      	adds	r3, r5, #3
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	18cf      	adds	r7, r1, r3
 8004b56:	18c3      	adds	r3, r0, r3
 8004b58:	687e      	ldr	r6, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	3601      	adds	r6, #1
 8004b5e:	fbb3 f6f6 	udiv	r6, r3, r6
 8004b62:	f101 0414 	add.w	r4, r1, #20
 8004b66:	3d01      	subs	r5, #1
 8004b68:	3704      	adds	r7, #4
 8004b6a:	f100 0814 	add.w	r8, r0, #20
 8004b6e:	2e00      	cmp	r6, #0
 8004b70:	d03c      	beq.n	8004bec <quorem+0xac>
 8004b72:	f04f 0e00 	mov.w	lr, #0
 8004b76:	4642      	mov	r2, r8
 8004b78:	4623      	mov	r3, r4
 8004b7a:	46f4      	mov	ip, lr
 8004b7c:	f853 bb04 	ldr.w	fp, [r3], #4
 8004b80:	6810      	ldr	r0, [r2, #0]
 8004b82:	fa1f fa8b 	uxth.w	sl, fp
 8004b86:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8004b8a:	fb06 ea0a 	mla	sl, r6, sl, lr
 8004b8e:	fb06 fe0b 	mul.w	lr, r6, fp
 8004b92:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 8004b96:	fa1c fc80 	uxtah	ip, ip, r0
 8004b9a:	fa1f fb8e 	uxth.w	fp, lr
 8004b9e:	fa1f fa8a 	uxth.w	sl, sl
 8004ba2:	ebca 0c0c 	rsb	ip, sl, ip
 8004ba6:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8004baa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004bae:	fa1f fc8c 	uxth.w	ip, ip
 8004bb2:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8004bb6:	429f      	cmp	r7, r3
 8004bb8:	f842 cb04 	str.w	ip, [r2], #4
 8004bbc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004bc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004bc4:	d2da      	bcs.n	8004b7c <quorem+0x3c>
 8004bc6:	1d2a      	adds	r2, r5, #4
 8004bc8:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004bcc:	6858      	ldr	r0, [r3, #4]
 8004bce:	b968      	cbnz	r0, 8004bec <quorem+0xac>
 8004bd0:	4598      	cmp	r8, r3
 8004bd2:	d209      	bcs.n	8004be8 <quorem+0xa8>
 8004bd4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004bd8:	b112      	cbz	r2, 8004be0 <quorem+0xa0>
 8004bda:	e005      	b.n	8004be8 <quorem+0xa8>
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	b91a      	cbnz	r2, 8004be8 <quorem+0xa8>
 8004be0:	3b04      	subs	r3, #4
 8004be2:	3d01      	subs	r5, #1
 8004be4:	4598      	cmp	r8, r3
 8004be6:	d3f9      	bcc.n	8004bdc <quorem+0x9c>
 8004be8:	f8c9 5010 	str.w	r5, [r9, #16]
 8004bec:	4648      	mov	r0, r9
 8004bee:	f001 fe4f 	bl	8006890 <__mcmp>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	db2d      	blt.n	8004c52 <quorem+0x112>
 8004bf6:	3601      	adds	r6, #1
 8004bf8:	4643      	mov	r3, r8
 8004bfa:	f04f 0c00 	mov.w	ip, #0
 8004bfe:	f854 2b04 	ldr.w	r2, [r4], #4
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	b291      	uxth	r1, r2
 8004c06:	fa1f fa80 	uxth.w	sl, r0
 8004c0a:	0c12      	lsrs	r2, r2, #16
 8004c0c:	ebc1 010a 	rsb	r1, r1, sl
 8004c10:	4461      	add	r1, ip
 8004c12:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8004c16:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8004c1a:	b289      	uxth	r1, r1
 8004c1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004c20:	42a7      	cmp	r7, r4
 8004c22:	f843 1b04 	str.w	r1, [r3], #4
 8004c26:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c2a:	d2e8      	bcs.n	8004bfe <quorem+0xbe>
 8004c2c:	1d2a      	adds	r2, r5, #4
 8004c2e:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004c32:	6859      	ldr	r1, [r3, #4]
 8004c34:	b969      	cbnz	r1, 8004c52 <quorem+0x112>
 8004c36:	4598      	cmp	r8, r3
 8004c38:	d209      	bcs.n	8004c4e <quorem+0x10e>
 8004c3a:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004c3e:	b112      	cbz	r2, 8004c46 <quorem+0x106>
 8004c40:	e005      	b.n	8004c4e <quorem+0x10e>
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	b91a      	cbnz	r2, 8004c4e <quorem+0x10e>
 8004c46:	3b04      	subs	r3, #4
 8004c48:	3d01      	subs	r5, #1
 8004c4a:	4598      	cmp	r8, r3
 8004c4c:	d3f9      	bcc.n	8004c42 <quorem+0x102>
 8004c4e:	f8c9 5010 	str.w	r5, [r9, #16]
 8004c52:	4630      	mov	r0, r6
 8004c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c58:	2000      	movs	r0, #0
 8004c5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5e:	bf00      	nop

08004c60 <_dtoa_r>:
 8004c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c64:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004c66:	b09d      	sub	sp, #116	; 0x74
 8004c68:	4607      	mov	r7, r0
 8004c6a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004c6c:	4692      	mov	sl, r2
 8004c6e:	469b      	mov	fp, r3
 8004c70:	b141      	cbz	r1, 8004c84 <_dtoa_r+0x24>
 8004c72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004c74:	2201      	movs	r2, #1
 8004c76:	409a      	lsls	r2, r3
 8004c78:	604b      	str	r3, [r1, #4]
 8004c7a:	608a      	str	r2, [r1, #8]
 8004c7c:	f001 fbd4 	bl	8006428 <_Bfree>
 8004c80:	2300      	movs	r3, #0
 8004c82:	643b      	str	r3, [r7, #64]	; 0x40
 8004c84:	f1bb 0500 	subs.w	r5, fp, #0
 8004c88:	f2c0 80df 	blt.w	8004e4a <_dtoa_r+0x1ea>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6023      	str	r3, [r4, #0]
 8004c90:	2300      	movs	r3, #0
 8004c92:	461a      	mov	r2, r3
 8004c94:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004c98:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004c9c:	402b      	ands	r3, r5
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	f000 80be 	beq.w	8004e20 <_dtoa_r+0x1c0>
 8004ca4:	4650      	mov	r0, sl
 8004ca6:	4659      	mov	r1, fp
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2300      	movs	r3, #0
 8004cac:	46d0      	mov	r8, sl
 8004cae:	46d9      	mov	r9, fp
 8004cb0:	2401      	movs	r4, #1
 8004cb2:	f003 fd0d 	bl	80086d0 <__aeabi_dcmpeq>
 8004cb6:	b978      	cbnz	r0, 8004cd8 <_dtoa_r+0x78>
 8004cb8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004cbc:	d110      	bne.n	8004ce0 <_dtoa_r+0x80>
 8004cbe:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004cc0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	4d78      	ldr	r5, [pc, #480]	; (8004ea8 <_dtoa_r+0x248>)
 8004cc8:	b114      	cbz	r4, 8004cd0 <_dtoa_r+0x70>
 8004cca:	4d78      	ldr	r5, [pc, #480]	; (8004eac <_dtoa_r+0x24c>)
 8004ccc:	6025      	str	r5, [r4, #0]
 8004cce:	3d01      	subs	r5, #1
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	b01d      	add	sp, #116	; 0x74
 8004cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd8:	2400      	movs	r4, #0
 8004cda:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004cde:	d0ee      	beq.n	8004cbe <_dtoa_r+0x5e>
 8004ce0:	a91b      	add	r1, sp, #108	; 0x6c
 8004ce2:	9100      	str	r1, [sp, #0]
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	a91a      	add	r1, sp, #104	; 0x68
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	9101      	str	r1, [sp, #4]
 8004cee:	f001 fed1 	bl	8006a94 <__d2b>
 8004cf2:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8004cf6:	900a      	str	r0, [sp, #40]	; 0x28
 8004cf8:	2c00      	cmp	r4, #0
 8004cfa:	f040 80b5 	bne.w	8004e68 <_dtoa_r+0x208>
 8004cfe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004d00:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8004d02:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004d06:	1934      	adds	r4, r6, r4
 8004d08:	429c      	cmp	r4, r3
 8004d0a:	f2c0 8281 	blt.w	8005210 <_dtoa_r+0x5b0>
 8004d0e:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8004d12:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8004d16:	1b1b      	subs	r3, r3, r4
 8004d18:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8004d1c:	fa15 f303 	lsls.w	r3, r5, r3
 8004d20:	fa2a f002 	lsr.w	r0, sl, r2
 8004d24:	4318      	orrs	r0, r3
 8004d26:	f003 f9f5 	bl	8008114 <__aeabi_ui2d>
 8004d2a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004d2e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d30:	2501      	movs	r5, #1
 8004d32:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8004d36:	900d      	str	r0, [sp, #52]	; 0x34
 8004d38:	3c01      	subs	r4, #1
 8004d3a:	9516      	str	r5, [sp, #88]	; 0x58
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8004d44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d48:	f003 f8a6 	bl	8007e98 <__aeabi_dsub>
 8004d4c:	a350      	add	r3, pc, #320	; (adr r3, 8004e90 <_dtoa_r+0x230>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f003 fa55 	bl	8008200 <__aeabi_dmul>
 8004d56:	a350      	add	r3, pc, #320	; (adr r3, 8004e98 <_dtoa_r+0x238>)
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f003 f89e 	bl	8007e9c <__adddf3>
 8004d60:	4680      	mov	r8, r0
 8004d62:	4620      	mov	r0, r4
 8004d64:	4689      	mov	r9, r1
 8004d66:	f003 f9e5 	bl	8008134 <__aeabi_i2d>
 8004d6a:	a34d      	add	r3, pc, #308	; (adr r3, 8004ea0 <_dtoa_r+0x240>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f003 fa46 	bl	8008200 <__aeabi_dmul>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4640      	mov	r0, r8
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	f003 f88e 	bl	8007e9c <__adddf3>
 8004d80:	4680      	mov	r8, r0
 8004d82:	4689      	mov	r9, r1
 8004d84:	f003 fcd6 	bl	8008734 <__aeabi_d2iz>
 8004d88:	4649      	mov	r1, r9
 8004d8a:	9005      	str	r0, [sp, #20]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	4640      	mov	r0, r8
 8004d90:	2300      	movs	r3, #0
 8004d92:	f003 fca7 	bl	80086e4 <__aeabi_dcmplt>
 8004d96:	b150      	cbz	r0, 8004dae <_dtoa_r+0x14e>
 8004d98:	9805      	ldr	r0, [sp, #20]
 8004d9a:	f003 f9cb 	bl	8008134 <__aeabi_i2d>
 8004d9e:	4642      	mov	r2, r8
 8004da0:	464b      	mov	r3, r9
 8004da2:	f003 fc95 	bl	80086d0 <__aeabi_dcmpeq>
 8004da6:	b910      	cbnz	r0, 8004dae <_dtoa_r+0x14e>
 8004da8:	9d05      	ldr	r5, [sp, #20]
 8004daa:	3d01      	subs	r5, #1
 8004dac:	9505      	str	r5, [sp, #20]
 8004dae:	9d05      	ldr	r5, [sp, #20]
 8004db0:	2d16      	cmp	r5, #22
 8004db2:	f200 815e 	bhi.w	8005072 <_dtoa_r+0x412>
 8004db6:	4b3e      	ldr	r3, [pc, #248]	; (8004eb0 <_dtoa_r+0x250>)
 8004db8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004dc0:	4652      	mov	r2, sl
 8004dc2:	465b      	mov	r3, fp
 8004dc4:	f003 fcac 	bl	8008720 <__aeabi_dcmpgt>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	f000 8229 	beq.w	8005220 <_dtoa_r+0x5c0>
 8004dce:	9d05      	ldr	r5, [sp, #20]
 8004dd0:	3d01      	subs	r5, #1
 8004dd2:	9505      	str	r5, [sp, #20]
 8004dd4:	2500      	movs	r5, #0
 8004dd6:	9514      	str	r5, [sp, #80]	; 0x50
 8004dd8:	1b34      	subs	r4, r6, r4
 8004dda:	3c01      	subs	r4, #1
 8004ddc:	f100 8213 	bmi.w	8005206 <_dtoa_r+0x5a6>
 8004de0:	2500      	movs	r5, #0
 8004de2:	940b      	str	r4, [sp, #44]	; 0x2c
 8004de4:	950f      	str	r5, [sp, #60]	; 0x3c
 8004de6:	9c05      	ldr	r4, [sp, #20]
 8004de8:	2c00      	cmp	r4, #0
 8004dea:	f2c0 8203 	blt.w	80051f4 <_dtoa_r+0x594>
 8004dee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004df0:	9413      	str	r4, [sp, #76]	; 0x4c
 8004df2:	192d      	adds	r5, r5, r4
 8004df4:	2400      	movs	r4, #0
 8004df6:	950b      	str	r5, [sp, #44]	; 0x2c
 8004df8:	9410      	str	r4, [sp, #64]	; 0x40
 8004dfa:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004dfc:	2d09      	cmp	r5, #9
 8004dfe:	d85d      	bhi.n	8004ebc <_dtoa_r+0x25c>
 8004e00:	2401      	movs	r4, #1
 8004e02:	2d05      	cmp	r5, #5
 8004e04:	dd02      	ble.n	8004e0c <_dtoa_r+0x1ac>
 8004e06:	3d04      	subs	r5, #4
 8004e08:	9526      	str	r5, [sp, #152]	; 0x98
 8004e0a:	2400      	movs	r4, #0
 8004e0c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004e0e:	1eab      	subs	r3, r5, #2
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d855      	bhi.n	8004ec0 <_dtoa_r+0x260>
 8004e14:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e18:	036d0382 	.word	0x036d0382
 8004e1c:	03850246 	.word	0x03850246
 8004e20:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8004e22:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e26:	6023      	str	r3, [r4, #0]
 8004e28:	f1ba 0f00 	cmp.w	sl, #0
 8004e2c:	d013      	beq.n	8004e56 <_dtoa_r+0x1f6>
 8004e2e:	4d21      	ldr	r5, [pc, #132]	; (8004eb4 <_dtoa_r+0x254>)
 8004e30:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004e32:	2c00      	cmp	r4, #0
 8004e34:	f43f af4c 	beq.w	8004cd0 <_dtoa_r+0x70>
 8004e38:	78eb      	ldrb	r3, [r5, #3]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 8117 	beq.w	800506e <_dtoa_r+0x40e>
 8004e40:	f105 0308 	add.w	r3, r5, #8
 8004e44:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	e742      	b.n	8004cd0 <_dtoa_r+0x70>
 8004e4a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8004e4e:	2301      	movs	r3, #1
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	46ab      	mov	fp, r5
 8004e54:	e71c      	b.n	8004c90 <_dtoa_r+0x30>
 8004e56:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <_dtoa_r+0x254>)
 8004e58:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <_dtoa_r+0x258>)
 8004e5a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004e5e:	2d00      	cmp	r5, #0
 8004e60:	bf0c      	ite	eq
 8004e62:	4615      	moveq	r5, r2
 8004e64:	461d      	movne	r5, r3
 8004e66:	e7e3      	b.n	8004e30 <_dtoa_r+0x1d0>
 8004e68:	4649      	mov	r1, r9
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e70:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e72:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004e74:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8004e78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e7c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004e80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004e84:	2500      	movs	r5, #0
 8004e86:	930d      	str	r3, [sp, #52]	; 0x34
 8004e88:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e8c:	9516      	str	r5, [sp, #88]	; 0x58
 8004e8e:	e755      	b.n	8004d3c <_dtoa_r+0xdc>
 8004e90:	636f4361 	.word	0x636f4361
 8004e94:	3fd287a7 	.word	0x3fd287a7
 8004e98:	8b60c8b3 	.word	0x8b60c8b3
 8004e9c:	3fc68a28 	.word	0x3fc68a28
 8004ea0:	509f79fb 	.word	0x509f79fb
 8004ea4:	3fd34413 	.word	0x3fd34413
 8004ea8:	08008d40 	.word	0x08008d40
 8004eac:	08008d41 	.word	0x08008d41
 8004eb0:	08008b58 	.word	0x08008b58
 8004eb4:	08008d50 	.word	0x08008d50
 8004eb8:	08008d44 	.word	0x08008d44
 8004ebc:	2400      	movs	r4, #0
 8004ebe:	9426      	str	r4, [sp, #152]	; 0x98
 8004ec0:	2400      	movs	r4, #0
 8004ec2:	647c      	str	r4, [r7, #68]	; 0x44
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	f001 fa88 	bl	80063dc <_Balloc>
 8004ecc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004ed0:	950e      	str	r5, [sp, #56]	; 0x38
 8004ed2:	2501      	movs	r5, #1
 8004ed4:	9512      	str	r5, [sp, #72]	; 0x48
 8004ed6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004eda:	9009      	str	r0, [sp, #36]	; 0x24
 8004edc:	6438      	str	r0, [r7, #64]	; 0x40
 8004ede:	9515      	str	r5, [sp, #84]	; 0x54
 8004ee0:	9427      	str	r4, [sp, #156]	; 0x9c
 8004ee2:	9c05      	ldr	r4, [sp, #20]
 8004ee4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ee6:	2c0e      	cmp	r4, #14
 8004ee8:	bfcc      	ite	gt
 8004eea:	2500      	movgt	r5, #0
 8004eec:	2501      	movle	r5, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bfb8      	it	lt
 8004ef2:	2500      	movlt	r5, #0
 8004ef4:	2d00      	cmp	r5, #0
 8004ef6:	f000 80c1 	beq.w	800507c <_dtoa_r+0x41c>
 8004efa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8004efc:	4b5e      	ldr	r3, [pc, #376]	; (8005078 <_dtoa_r+0x418>)
 8004efe:	0fe5      	lsrs	r5, r4, #31
 8004f00:	9c05      	ldr	r4, [sp, #20]
 8004f02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004f0c:	2c00      	cmp	r4, #0
 8004f0e:	bfcc      	ite	gt
 8004f10:	2500      	movgt	r5, #0
 8004f12:	f005 0501 	andle.w	r5, r5, #1
 8004f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f1a:	2d00      	cmp	r5, #0
 8004f1c:	f040 81a8 	bne.w	8005270 <_dtoa_r+0x610>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4650      	mov	r0, sl
 8004f26:	4659      	mov	r1, fp
 8004f28:	f003 fa94 	bl	8008454 <__aeabi_ddiv>
 8004f2c:	f003 fc02 	bl	8008734 <__aeabi_d2iz>
 8004f30:	4606      	mov	r6, r0
 8004f32:	f003 f8ff 	bl	8008134 <__aeabi_i2d>
 8004f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f3a:	f003 f961 	bl	8008200 <__aeabi_dmul>
 8004f3e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f40:	460b      	mov	r3, r1
 8004f42:	4602      	mov	r2, r0
 8004f44:	4659      	mov	r1, fp
 8004f46:	4650      	mov	r0, sl
 8004f48:	f002 ffa6 	bl	8007e98 <__aeabi_dsub>
 8004f4c:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8004f50:	f804 3b01 	strb.w	r3, [r4], #1
 8004f54:	9411      	str	r4, [sp, #68]	; 0x44
 8004f56:	46a0      	mov	r8, r4
 8004f58:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004f5a:	2c01      	cmp	r4, #1
 8004f5c:	4682      	mov	sl, r0
 8004f5e:	468b      	mov	fp, r1
 8004f60:	d04c      	beq.n	8004ffc <_dtoa_r+0x39c>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2200      	movs	r2, #0
 8004f66:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004f6a:	f003 f949 	bl	8008200 <__aeabi_dmul>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2300      	movs	r3, #0
 8004f72:	4682      	mov	sl, r0
 8004f74:	468b      	mov	fp, r1
 8004f76:	2401      	movs	r4, #1
 8004f78:	f003 fbaa 	bl	80086d0 <__aeabi_dcmpeq>
 8004f7c:	b100      	cbz	r0, 8004f80 <_dtoa_r+0x320>
 8004f7e:	462c      	mov	r4, r5
 8004f80:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004f84:	f000 8575 	beq.w	8005a72 <_dtoa_r+0xe12>
 8004f88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004f8c:	1ca5      	adds	r5, r4, #2
 8004f8e:	eb04 0900 	add.w	r9, r4, r0
 8004f92:	e00d      	b.n	8004fb0 <_dtoa_r+0x350>
 8004f94:	f003 f934 	bl	8008200 <__aeabi_dmul>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4682      	mov	sl, r0
 8004f9e:	468b      	mov	fp, r1
 8004fa0:	f003 fb96 	bl	80086d0 <__aeabi_dcmpeq>
 8004fa4:	b100      	cbz	r0, 8004fa8 <_dtoa_r+0x348>
 8004fa6:	2400      	movs	r4, #0
 8004fa8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004fac:	f000 8423 	beq.w	80057f6 <_dtoa_r+0xb96>
 8004fb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fb4:	4650      	mov	r0, sl
 8004fb6:	4659      	mov	r1, fp
 8004fb8:	f003 fa4c 	bl	8008454 <__aeabi_ddiv>
 8004fbc:	f003 fbba 	bl	8008734 <__aeabi_d2iz>
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	f003 f8b7 	bl	8008134 <__aeabi_i2d>
 8004fc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fca:	f003 f919 	bl	8008200 <__aeabi_dmul>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4650      	mov	r0, sl
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	f002 ff5f 	bl	8007e98 <__aeabi_dsub>
 8004fda:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	454d      	cmp	r5, r9
 8004fe4:	f805 4c01 	strb.w	r4, [r5, #-1]
 8004fe8:	46a8      	mov	r8, r5
 8004fea:	4682      	mov	sl, r0
 8004fec:	468b      	mov	fp, r1
 8004fee:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004ff2:	f04f 0401 	mov.w	r4, #1
 8004ff6:	f105 0501 	add.w	r5, r5, #1
 8004ffa:	d1cb      	bne.n	8004f94 <_dtoa_r+0x334>
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	465b      	mov	r3, fp
 8005000:	4650      	mov	r0, sl
 8005002:	4659      	mov	r1, fp
 8005004:	f002 ff4a 	bl	8007e9c <__adddf3>
 8005008:	4604      	mov	r4, r0
 800500a:	460d      	mov	r5, r1
 800500c:	4622      	mov	r2, r4
 800500e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005012:	462b      	mov	r3, r5
 8005014:	f003 fb66 	bl	80086e4 <__aeabi_dcmplt>
 8005018:	b958      	cbnz	r0, 8005032 <_dtoa_r+0x3d2>
 800501a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800501e:	4622      	mov	r2, r4
 8005020:	462b      	mov	r3, r5
 8005022:	f003 fb55 	bl	80086d0 <__aeabi_dcmpeq>
 8005026:	2800      	cmp	r0, #0
 8005028:	f000 83e5 	beq.w	80057f6 <_dtoa_r+0xb96>
 800502c:	07f3      	lsls	r3, r6, #31
 800502e:	f140 83e2 	bpl.w	80057f6 <_dtoa_r+0xb96>
 8005032:	9c05      	ldr	r4, [sp, #20]
 8005034:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005038:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800503a:	9417      	str	r4, [sp, #92]	; 0x5c
 800503c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800503e:	e003      	b.n	8005048 <_dtoa_r+0x3e8>
 8005040:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 8005044:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005048:	2e39      	cmp	r6, #57	; 0x39
 800504a:	4643      	mov	r3, r8
 800504c:	f040 8489 	bne.w	8005962 <_dtoa_r+0xd02>
 8005050:	4590      	cmp	r8, r2
 8005052:	d1f5      	bne.n	8005040 <_dtoa_r+0x3e0>
 8005054:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005056:	9309      	str	r3, [sp, #36]	; 0x24
 8005058:	3401      	adds	r4, #1
 800505a:	9405      	str	r4, [sp, #20]
 800505c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800505e:	2330      	movs	r3, #48	; 0x30
 8005060:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005064:	2231      	movs	r2, #49	; 0x31
 8005066:	4623      	mov	r3, r4
 8005068:	f803 2c01 	strb.w	r2, [r3, #-1]
 800506c:	e0b0      	b.n	80051d0 <_dtoa_r+0x570>
 800506e:	1ceb      	adds	r3, r5, #3
 8005070:	e6e8      	b.n	8004e44 <_dtoa_r+0x1e4>
 8005072:	2501      	movs	r5, #1
 8005074:	9514      	str	r5, [sp, #80]	; 0x50
 8005076:	e6af      	b.n	8004dd8 <_dtoa_r+0x178>
 8005078:	08008b58 	.word	0x08008b58
 800507c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800507e:	2c00      	cmp	r4, #0
 8005080:	f040 80d1 	bne.w	8005226 <_dtoa_r+0x5c6>
 8005084:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005086:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005088:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800508a:	9306      	str	r3, [sp, #24]
 800508c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800508e:	2800      	cmp	r0, #0
 8005090:	bfc8      	it	gt
 8005092:	2c00      	cmpgt	r4, #0
 8005094:	dd09      	ble.n	80050aa <_dtoa_r+0x44a>
 8005096:	4603      	mov	r3, r0
 8005098:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800509a:	42a3      	cmp	r3, r4
 800509c:	bfa8      	it	ge
 800509e:	4623      	movge	r3, r4
 80050a0:	1ac9      	subs	r1, r1, r3
 80050a2:	1ac0      	subs	r0, r0, r3
 80050a4:	910f      	str	r1, [sp, #60]	; 0x3c
 80050a6:	1ae4      	subs	r4, r4, r3
 80050a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80050aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050ac:	2a00      	cmp	r2, #0
 80050ae:	dd1a      	ble.n	80050e6 <_dtoa_r+0x486>
 80050b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 841d 	beq.w	80058f2 <_dtoa_r+0xc92>
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	dd10      	ble.n	80050de <_dtoa_r+0x47e>
 80050bc:	9906      	ldr	r1, [sp, #24]
 80050be:	462a      	mov	r2, r5
 80050c0:	4638      	mov	r0, r7
 80050c2:	f001 fb39 	bl	8006738 <__pow5mult>
 80050c6:	9006      	str	r0, [sp, #24]
 80050c8:	9906      	ldr	r1, [sp, #24]
 80050ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050cc:	4638      	mov	r0, r7
 80050ce:	f001 fa9b 	bl	8006608 <__multiply>
 80050d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050d4:	4606      	mov	r6, r0
 80050d6:	4638      	mov	r0, r7
 80050d8:	f001 f9a6 	bl	8006428 <_Bfree>
 80050dc:	960a      	str	r6, [sp, #40]	; 0x28
 80050de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80050e0:	1b42      	subs	r2, r0, r5
 80050e2:	f040 8429 	bne.w	8005938 <_dtoa_r+0xcd8>
 80050e6:	2101      	movs	r1, #1
 80050e8:	4638      	mov	r0, r7
 80050ea:	f001 fa83 	bl	80065f4 <__i2b>
 80050ee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80050f0:	2d00      	cmp	r5, #0
 80050f2:	4606      	mov	r6, r0
 80050f4:	dd05      	ble.n	8005102 <_dtoa_r+0x4a2>
 80050f6:	4631      	mov	r1, r6
 80050f8:	4638      	mov	r0, r7
 80050fa:	462a      	mov	r2, r5
 80050fc:	f001 fb1c 	bl	8006738 <__pow5mult>
 8005100:	4606      	mov	r6, r0
 8005102:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8005104:	2d01      	cmp	r5, #1
 8005106:	f340 820f 	ble.w	8005528 <_dtoa_r+0x8c8>
 800510a:	2500      	movs	r5, #0
 800510c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800510e:	2301      	movs	r3, #1
 8005110:	2800      	cmp	r0, #0
 8005112:	f040 838c 	bne.w	800582e <_dtoa_r+0xbce>
 8005116:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005118:	185b      	adds	r3, r3, r1
 800511a:	f013 031f 	ands.w	r3, r3, #31
 800511e:	f000 82cb 	beq.w	80056b8 <_dtoa_r+0xa58>
 8005122:	f1c3 0220 	rsb	r2, r3, #32
 8005126:	2a04      	cmp	r2, #4
 8005128:	f340 84bf 	ble.w	8005aaa <_dtoa_r+0xe4a>
 800512c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800512e:	f1c3 031c 	rsb	r3, r3, #28
 8005132:	18d2      	adds	r2, r2, r3
 8005134:	18c9      	adds	r1, r1, r3
 8005136:	920f      	str	r2, [sp, #60]	; 0x3c
 8005138:	18e4      	adds	r4, r4, r3
 800513a:	910b      	str	r1, [sp, #44]	; 0x2c
 800513c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800513e:	2a00      	cmp	r2, #0
 8005140:	dd04      	ble.n	800514c <_dtoa_r+0x4ec>
 8005142:	4638      	mov	r0, r7
 8005144:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005146:	f001 fb43 	bl	80067d0 <__lshift>
 800514a:	900a      	str	r0, [sp, #40]	; 0x28
 800514c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800514e:	2b00      	cmp	r3, #0
 8005150:	dd05      	ble.n	800515e <_dtoa_r+0x4fe>
 8005152:	4631      	mov	r1, r6
 8005154:	4638      	mov	r0, r7
 8005156:	461a      	mov	r2, r3
 8005158:	f001 fb3a 	bl	80067d0 <__lshift>
 800515c:	4606      	mov	r6, r0
 800515e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005160:	2800      	cmp	r0, #0
 8005162:	f040 834c 	bne.w	80057fe <_dtoa_r+0xb9e>
 8005166:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005168:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800516a:	2900      	cmp	r1, #0
 800516c:	bfcc      	ite	gt
 800516e:	2300      	movgt	r3, #0
 8005170:	2301      	movle	r3, #1
 8005172:	2a02      	cmp	r2, #2
 8005174:	bfd8      	it	le
 8005176:	2300      	movle	r3, #0
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8226 	beq.w	80055ca <_dtoa_r+0x96a>
 800517e:	2900      	cmp	r1, #0
 8005180:	f040 808a 	bne.w	8005298 <_dtoa_r+0x638>
 8005184:	4631      	mov	r1, r6
 8005186:	2205      	movs	r2, #5
 8005188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800518a:	4638      	mov	r0, r7
 800518c:	f001 f956 	bl	800643c <__multadd>
 8005190:	4606      	mov	r6, r0
 8005192:	4631      	mov	r1, r6
 8005194:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005196:	f001 fb7b 	bl	8006890 <__mcmp>
 800519a:	2800      	cmp	r0, #0
 800519c:	dd7c      	ble.n	8005298 <_dtoa_r+0x638>
 800519e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a0:	9c05      	ldr	r4, [sp, #20]
 80051a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051a4:	2231      	movs	r2, #49	; 0x31
 80051a6:	f803 2b01 	strb.w	r2, [r3], #1
 80051aa:	3401      	adds	r4, #1
 80051ac:	9405      	str	r4, [sp, #20]
 80051ae:	9309      	str	r3, [sp, #36]	; 0x24
 80051b0:	2400      	movs	r4, #0
 80051b2:	4638      	mov	r0, r7
 80051b4:	4631      	mov	r1, r6
 80051b6:	f001 f937 	bl	8006428 <_Bfree>
 80051ba:	9806      	ldr	r0, [sp, #24]
 80051bc:	b140      	cbz	r0, 80051d0 <_dtoa_r+0x570>
 80051be:	4284      	cmp	r4, r0
 80051c0:	bf18      	it	ne
 80051c2:	2c00      	cmpne	r4, #0
 80051c4:	f040 8273 	bne.w	80056ae <_dtoa_r+0xa4e>
 80051c8:	4638      	mov	r0, r7
 80051ca:	9906      	ldr	r1, [sp, #24]
 80051cc:	f001 f92c 	bl	8006428 <_Bfree>
 80051d0:	4638      	mov	r0, r7
 80051d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051d4:	f001 f928 	bl	8006428 <_Bfree>
 80051d8:	9c05      	ldr	r4, [sp, #20]
 80051da:	1c63      	adds	r3, r4, #1
 80051dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051de:	2200      	movs	r2, #0
 80051e0:	7022      	strb	r2, [r4, #0]
 80051e2:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80051e4:	6023      	str	r3, [r4, #0]
 80051e6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80051e8:	2c00      	cmp	r4, #0
 80051ea:	f43f ad71 	beq.w	8004cd0 <_dtoa_r+0x70>
 80051ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051f0:	6020      	str	r0, [r4, #0]
 80051f2:	e56d      	b.n	8004cd0 <_dtoa_r+0x70>
 80051f4:	9c05      	ldr	r4, [sp, #20]
 80051f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80051f8:	1b2d      	subs	r5, r5, r4
 80051fa:	950f      	str	r5, [sp, #60]	; 0x3c
 80051fc:	4265      	negs	r5, r4
 80051fe:	2400      	movs	r4, #0
 8005200:	9510      	str	r5, [sp, #64]	; 0x40
 8005202:	9413      	str	r4, [sp, #76]	; 0x4c
 8005204:	e5f9      	b.n	8004dfa <_dtoa_r+0x19a>
 8005206:	4264      	negs	r4, r4
 8005208:	940f      	str	r4, [sp, #60]	; 0x3c
 800520a:	2400      	movs	r4, #0
 800520c:	940b      	str	r4, [sp, #44]	; 0x2c
 800520e:	e5ea      	b.n	8004de6 <_dtoa_r+0x186>
 8005210:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8005214:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8005218:	1b00      	subs	r0, r0, r4
 800521a:	fa0a f000 	lsl.w	r0, sl, r0
 800521e:	e582      	b.n	8004d26 <_dtoa_r+0xc6>
 8005220:	2500      	movs	r5, #0
 8005222:	9514      	str	r5, [sp, #80]	; 0x50
 8005224:	e5d8      	b.n	8004dd8 <_dtoa_r+0x178>
 8005226:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005228:	2c01      	cmp	r4, #1
 800522a:	f340 838f 	ble.w	800594c <_dtoa_r+0xcec>
 800522e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005230:	1e62      	subs	r2, r4, #1
 8005232:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005234:	4294      	cmp	r4, r2
 8005236:	bfbf      	itttt	lt
 8005238:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 800523a:	9210      	strlt	r2, [sp, #64]	; 0x40
 800523c:	ebc4 0302 	rsblt	r3, r4, r2
 8005240:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 8005242:	bfb6      	itet	lt
 8005244:	18e4      	addlt	r4, r4, r3
 8005246:	ebc2 0504 	rsbge	r5, r2, r4
 800524a:	9413      	strlt	r4, [sp, #76]	; 0x4c
 800524c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800524e:	2c00      	cmp	r4, #0
 8005250:	f2c0 838f 	blt.w	8005972 <_dtoa_r+0xd12>
 8005254:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005258:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800525a:	18d2      	adds	r2, r2, r3
 800525c:	920f      	str	r2, [sp, #60]	; 0x3c
 800525e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005260:	4638      	mov	r0, r7
 8005262:	18d2      	adds	r2, r2, r3
 8005264:	2101      	movs	r1, #1
 8005266:	920b      	str	r2, [sp, #44]	; 0x2c
 8005268:	f001 f9c4 	bl	80065f4 <__i2b>
 800526c:	9006      	str	r0, [sp, #24]
 800526e:	e70d      	b.n	800508c <_dtoa_r+0x42c>
 8005270:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005272:	2d00      	cmp	r5, #0
 8005274:	f040 8367 	bne.w	8005946 <_dtoa_r+0xce6>
 8005278:	2300      	movs	r3, #0
 800527a:	2200      	movs	r2, #0
 800527c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8005280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005284:	f002 ffbc 	bl	8008200 <__aeabi_dmul>
 8005288:	4652      	mov	r2, sl
 800528a:	465b      	mov	r3, fp
 800528c:	f003 fa3e 	bl	800870c <__aeabi_dcmpge>
 8005290:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005292:	9606      	str	r6, [sp, #24]
 8005294:	2800      	cmp	r0, #0
 8005296:	d082      	beq.n	800519e <_dtoa_r+0x53e>
 8005298:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 800529a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800529c:	43e4      	mvns	r4, r4
 800529e:	9405      	str	r4, [sp, #20]
 80052a0:	2400      	movs	r4, #0
 80052a2:	e786      	b.n	80051b2 <_dtoa_r+0x552>
 80052a4:	2501      	movs	r5, #1
 80052a6:	9512      	str	r5, [sp, #72]	; 0x48
 80052a8:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80052aa:	2d00      	cmp	r5, #0
 80052ac:	f340 82d3 	ble.w	8005856 <_dtoa_r+0xbf6>
 80052b0:	46a9      	mov	r9, r5
 80052b2:	2d0e      	cmp	r5, #14
 80052b4:	bf8c      	ite	hi
 80052b6:	2400      	movhi	r4, #0
 80052b8:	f004 0401 	andls.w	r4, r4, #1
 80052bc:	9515      	str	r5, [sp, #84]	; 0x54
 80052be:	950e      	str	r5, [sp, #56]	; 0x38
 80052c0:	2100      	movs	r1, #0
 80052c2:	f1b9 0f17 	cmp.w	r9, #23
 80052c6:	6479      	str	r1, [r7, #68]	; 0x44
 80052c8:	d909      	bls.n	80052de <_dtoa_r+0x67e>
 80052ca:	2201      	movs	r2, #1
 80052cc:	2304      	movs	r3, #4
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	f103 0014 	add.w	r0, r3, #20
 80052d4:	4611      	mov	r1, r2
 80052d6:	3201      	adds	r2, #1
 80052d8:	4548      	cmp	r0, r9
 80052da:	d9f8      	bls.n	80052ce <_dtoa_r+0x66e>
 80052dc:	6479      	str	r1, [r7, #68]	; 0x44
 80052de:	4638      	mov	r0, r7
 80052e0:	f001 f87c 	bl	80063dc <_Balloc>
 80052e4:	9009      	str	r0, [sp, #36]	; 0x24
 80052e6:	6438      	str	r0, [r7, #64]	; 0x40
 80052e8:	2c00      	cmp	r4, #0
 80052ea:	f43f adfa 	beq.w	8004ee2 <_dtoa_r+0x282>
 80052ee:	9c05      	ldr	r4, [sp, #20]
 80052f0:	4652      	mov	r2, sl
 80052f2:	465b      	mov	r3, fp
 80052f4:	2c00      	cmp	r4, #0
 80052f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80052fa:	f340 81f8 	ble.w	80056ee <_dtoa_r+0xa8e>
 80052fe:	4b97      	ldr	r3, [pc, #604]	; (800555c <_dtoa_r+0x8fc>)
 8005300:	f004 020f 	and.w	r2, r4, #15
 8005304:	1124      	asrs	r4, r4, #4
 8005306:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800530a:	2602      	movs	r6, #2
 800530c:	06e2      	lsls	r2, r4, #27
 800530e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005312:	d50b      	bpl.n	800532c <_dtoa_r+0x6cc>
 8005314:	4b92      	ldr	r3, [pc, #584]	; (8005560 <_dtoa_r+0x900>)
 8005316:	4650      	mov	r0, sl
 8005318:	4659      	mov	r1, fp
 800531a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800531e:	f003 f899 	bl	8008454 <__aeabi_ddiv>
 8005322:	f004 040f 	and.w	r4, r4, #15
 8005326:	4682      	mov	sl, r0
 8005328:	468b      	mov	fp, r1
 800532a:	2603      	movs	r6, #3
 800532c:	b174      	cbz	r4, 800534c <_dtoa_r+0x6ec>
 800532e:	4d8c      	ldr	r5, [pc, #560]	; (8005560 <_dtoa_r+0x900>)
 8005330:	4640      	mov	r0, r8
 8005332:	4649      	mov	r1, r9
 8005334:	07e3      	lsls	r3, r4, #31
 8005336:	d504      	bpl.n	8005342 <_dtoa_r+0x6e2>
 8005338:	e9d5 2300 	ldrd	r2, r3, [r5]
 800533c:	f002 ff60 	bl	8008200 <__aeabi_dmul>
 8005340:	3601      	adds	r6, #1
 8005342:	3508      	adds	r5, #8
 8005344:	1064      	asrs	r4, r4, #1
 8005346:	d1f5      	bne.n	8005334 <_dtoa_r+0x6d4>
 8005348:	4680      	mov	r8, r0
 800534a:	4689      	mov	r9, r1
 800534c:	4650      	mov	r0, sl
 800534e:	4659      	mov	r1, fp
 8005350:	4642      	mov	r2, r8
 8005352:	464b      	mov	r3, r9
 8005354:	f003 f87e 	bl	8008454 <__aeabi_ddiv>
 8005358:	4682      	mov	sl, r0
 800535a:	468b      	mov	fp, r1
 800535c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800535e:	2c00      	cmp	r4, #0
 8005360:	f000 8100 	beq.w	8005564 <_dtoa_r+0x904>
 8005364:	2300      	movs	r3, #0
 8005366:	4650      	mov	r0, sl
 8005368:	4659      	mov	r1, fp
 800536a:	2200      	movs	r2, #0
 800536c:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005370:	2401      	movs	r4, #1
 8005372:	f003 f9b7 	bl	80086e4 <__aeabi_dcmplt>
 8005376:	b900      	cbnz	r0, 800537a <_dtoa_r+0x71a>
 8005378:	2400      	movs	r4, #0
 800537a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800537c:	2d00      	cmp	r5, #0
 800537e:	bfd4      	ite	le
 8005380:	2400      	movle	r4, #0
 8005382:	f004 0401 	andgt.w	r4, r4, #1
 8005386:	2c00      	cmp	r4, #0
 8005388:	f000 80ec 	beq.w	8005564 <_dtoa_r+0x904>
 800538c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800538e:	2c00      	cmp	r4, #0
 8005390:	f340 819b 	ble.w	80056ca <_dtoa_r+0xa6a>
 8005394:	2300      	movs	r3, #0
 8005396:	2200      	movs	r2, #0
 8005398:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800539c:	4650      	mov	r0, sl
 800539e:	4659      	mov	r1, fp
 80053a0:	f002 ff2e 	bl	8008200 <__aeabi_dmul>
 80053a4:	4682      	mov	sl, r0
 80053a6:	1c70      	adds	r0, r6, #1
 80053a8:	468b      	mov	fp, r1
 80053aa:	f002 fec3 	bl	8008134 <__aeabi_i2d>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4650      	mov	r0, sl
 80053b4:	4659      	mov	r1, fp
 80053b6:	f002 ff23 	bl	8008200 <__aeabi_dmul>
 80053ba:	2300      	movs	r3, #0
 80053bc:	2200      	movs	r2, #0
 80053be:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80053c2:	f002 fd6b 	bl	8007e9c <__adddf3>
 80053c6:	9d05      	ldr	r5, [sp, #20]
 80053c8:	3d01      	subs	r5, #1
 80053ca:	9517      	str	r5, [sp, #92]	; 0x5c
 80053cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80053ce:	4680      	mov	r8, r0
 80053d0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80053d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80053d6:	2c00      	cmp	r4, #0
 80053d8:	f000 81b0 	beq.w	800573c <_dtoa_r+0xadc>
 80053dc:	4b5f      	ldr	r3, [pc, #380]	; (800555c <_dtoa_r+0x8fc>)
 80053de:	2100      	movs	r1, #0
 80053e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80053e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053e8:	2000      	movs	r0, #0
 80053ea:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 80053ee:	f003 f831 	bl	8008454 <__aeabi_ddiv>
 80053f2:	4642      	mov	r2, r8
 80053f4:	464b      	mov	r3, r9
 80053f6:	f002 fd4f 	bl	8007e98 <__aeabi_dsub>
 80053fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053fe:	4659      	mov	r1, fp
 8005400:	4650      	mov	r0, sl
 8005402:	f003 f997 	bl	8008734 <__aeabi_d2iz>
 8005406:	4606      	mov	r6, r0
 8005408:	f002 fe94 	bl	8008134 <__aeabi_i2d>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4650      	mov	r0, sl
 8005412:	4659      	mov	r1, fp
 8005414:	f002 fd40 	bl	8007e98 <__aeabi_dsub>
 8005418:	3630      	adds	r6, #48	; 0x30
 800541a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800541c:	b2f6      	uxtb	r6, r6
 800541e:	4682      	mov	sl, r0
 8005420:	468b      	mov	fp, r1
 8005422:	f804 6b01 	strb.w	r6, [r4], #1
 8005426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800542a:	4652      	mov	r2, sl
 800542c:	465b      	mov	r3, fp
 800542e:	9411      	str	r4, [sp, #68]	; 0x44
 8005430:	46a0      	mov	r8, r4
 8005432:	f003 f975 	bl	8008720 <__aeabi_dcmpgt>
 8005436:	2800      	cmp	r0, #0
 8005438:	f040 8325 	bne.w	8005a86 <_dtoa_r+0xe26>
 800543c:	2100      	movs	r1, #0
 800543e:	4652      	mov	r2, sl
 8005440:	465b      	mov	r3, fp
 8005442:	2000      	movs	r0, #0
 8005444:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005448:	f002 fd26 	bl	8007e98 <__aeabi_dsub>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005454:	f003 f964 	bl	8008720 <__aeabi_dcmpgt>
 8005458:	2800      	cmp	r0, #0
 800545a:	f040 827f 	bne.w	800595c <_dtoa_r+0xcfc>
 800545e:	2d01      	cmp	r5, #1
 8005460:	f340 8133 	ble.w	80056ca <_dtoa_r+0xa6a>
 8005464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005466:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005468:	1945      	adds	r5, r0, r5
 800546a:	e00f      	b.n	800548c <_dtoa_r+0x82c>
 800546c:	2100      	movs	r1, #0
 800546e:	2000      	movs	r0, #0
 8005470:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005474:	f002 fd10 	bl	8007e98 <__aeabi_dsub>
 8005478:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800547c:	f003 f932 	bl	80086e4 <__aeabi_dcmplt>
 8005480:	2800      	cmp	r0, #0
 8005482:	f040 826b 	bne.w	800595c <_dtoa_r+0xcfc>
 8005486:	42ac      	cmp	r4, r5
 8005488:	f000 811f 	beq.w	80056ca <_dtoa_r+0xa6a>
 800548c:	2300      	movs	r3, #0
 800548e:	2200      	movs	r2, #0
 8005490:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005498:	f002 feb2 	bl	8008200 <__aeabi_dmul>
 800549c:	2300      	movs	r3, #0
 800549e:	2200      	movs	r2, #0
 80054a0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80054a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054a8:	4650      	mov	r0, sl
 80054aa:	4659      	mov	r1, fp
 80054ac:	f002 fea8 	bl	8008200 <__aeabi_dmul>
 80054b0:	4680      	mov	r8, r0
 80054b2:	4689      	mov	r9, r1
 80054b4:	f003 f93e 	bl	8008734 <__aeabi_d2iz>
 80054b8:	4606      	mov	r6, r0
 80054ba:	f002 fe3b 	bl	8008134 <__aeabi_i2d>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4640      	mov	r0, r8
 80054c4:	4649      	mov	r1, r9
 80054c6:	f002 fce7 	bl	8007e98 <__aeabi_dsub>
 80054ca:	3630      	adds	r6, #48	; 0x30
 80054cc:	b2f6      	uxtb	r6, r6
 80054ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054d2:	f804 6b01 	strb.w	r6, [r4], #1
 80054d6:	4682      	mov	sl, r0
 80054d8:	468b      	mov	fp, r1
 80054da:	f003 f903 	bl	80086e4 <__aeabi_dcmplt>
 80054de:	46a0      	mov	r8, r4
 80054e0:	4652      	mov	r2, sl
 80054e2:	465b      	mov	r3, fp
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d0c1      	beq.n	800546c <_dtoa_r+0x80c>
 80054e8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80054ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80054ec:	9005      	str	r0, [sp, #20]
 80054ee:	9409      	str	r4, [sp, #36]	; 0x24
 80054f0:	e66e      	b.n	80051d0 <_dtoa_r+0x570>
 80054f2:	2500      	movs	r5, #0
 80054f4:	9512      	str	r5, [sp, #72]	; 0x48
 80054f6:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80054f8:	9805      	ldr	r0, [sp, #20]
 80054fa:	182d      	adds	r5, r5, r0
 80054fc:	f105 0901 	add.w	r9, r5, #1
 8005500:	f1b9 0f00 	cmp.w	r9, #0
 8005504:	9515      	str	r5, [sp, #84]	; 0x54
 8005506:	f340 819b 	ble.w	8005840 <_dtoa_r+0xbe0>
 800550a:	f1b9 0f0e 	cmp.w	r9, #14
 800550e:	bf8c      	ite	hi
 8005510:	2400      	movhi	r4, #0
 8005512:	f004 0401 	andls.w	r4, r4, #1
 8005516:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800551a:	e6d1      	b.n	80052c0 <_dtoa_r+0x660>
 800551c:	2500      	movs	r5, #0
 800551e:	9512      	str	r5, [sp, #72]	; 0x48
 8005520:	e6c2      	b.n	80052a8 <_dtoa_r+0x648>
 8005522:	2501      	movs	r5, #1
 8005524:	9512      	str	r5, [sp, #72]	; 0x48
 8005526:	e7e6      	b.n	80054f6 <_dtoa_r+0x896>
 8005528:	f1ba 0f00 	cmp.w	sl, #0
 800552c:	f47f aded 	bne.w	800510a <_dtoa_r+0x4aa>
 8005530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005534:	4655      	mov	r5, sl
 8005536:	2b00      	cmp	r3, #0
 8005538:	f47f ade8 	bne.w	800510c <_dtoa_r+0x4ac>
 800553c:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8005540:	ea0b 0303 	and.w	r3, fp, r3
 8005544:	461d      	mov	r5, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	f43f ade0 	beq.w	800510c <_dtoa_r+0x4ac>
 800554c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800554e:	3501      	adds	r5, #1
 8005550:	950f      	str	r5, [sp, #60]	; 0x3c
 8005552:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005554:	3501      	adds	r5, #1
 8005556:	950b      	str	r5, [sp, #44]	; 0x2c
 8005558:	2501      	movs	r5, #1
 800555a:	e5d7      	b.n	800510c <_dtoa_r+0x4ac>
 800555c:	08008b58 	.word	0x08008b58
 8005560:	08008c48 	.word	0x08008c48
 8005564:	4630      	mov	r0, r6
 8005566:	f002 fde5 	bl	8008134 <__aeabi_i2d>
 800556a:	4652      	mov	r2, sl
 800556c:	465b      	mov	r3, fp
 800556e:	f002 fe47 	bl	8008200 <__aeabi_dmul>
 8005572:	2300      	movs	r3, #0
 8005574:	2200      	movs	r2, #0
 8005576:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800557a:	f002 fc8f 	bl	8007e9c <__adddf3>
 800557e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005580:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 8005584:	4680      	mov	r8, r0
 8005586:	46a1      	mov	r9, r4
 8005588:	2d00      	cmp	r5, #0
 800558a:	f040 80ac 	bne.w	80056e6 <_dtoa_r+0xa86>
 800558e:	2300      	movs	r3, #0
 8005590:	2200      	movs	r2, #0
 8005592:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8005596:	4650      	mov	r0, sl
 8005598:	4659      	mov	r1, fp
 800559a:	f002 fc7d 	bl	8007e98 <__aeabi_dsub>
 800559e:	4642      	mov	r2, r8
 80055a0:	4623      	mov	r3, r4
 80055a2:	4682      	mov	sl, r0
 80055a4:	468b      	mov	fp, r1
 80055a6:	f003 f8bb 	bl	8008720 <__aeabi_dcmpgt>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	f040 80c3 	bne.w	8005736 <_dtoa_r+0xad6>
 80055b0:	4642      	mov	r2, r8
 80055b2:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80055b6:	4650      	mov	r0, sl
 80055b8:	4659      	mov	r1, fp
 80055ba:	f003 f893 	bl	80086e4 <__aeabi_dcmplt>
 80055be:	2800      	cmp	r0, #0
 80055c0:	f000 8083 	beq.w	80056ca <_dtoa_r+0xa6a>
 80055c4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80055c6:	9606      	str	r6, [sp, #24]
 80055c8:	e666      	b.n	8005298 <_dtoa_r+0x638>
 80055ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80055cc:	2800      	cmp	r0, #0
 80055ce:	f000 8147 	beq.w	8005860 <_dtoa_r+0xc00>
 80055d2:	2c00      	cmp	r4, #0
 80055d4:	dd05      	ble.n	80055e2 <_dtoa_r+0x982>
 80055d6:	4638      	mov	r0, r7
 80055d8:	9906      	ldr	r1, [sp, #24]
 80055da:	4622      	mov	r2, r4
 80055dc:	f001 f8f8 	bl	80067d0 <__lshift>
 80055e0:	9006      	str	r0, [sp, #24]
 80055e2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80055e6:	2d00      	cmp	r5, #0
 80055e8:	f040 8201 	bne.w	80059ee <_dtoa_r+0xd8e>
 80055ec:	f00a 0001 	and.w	r0, sl, #1
 80055f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80055f2:	9c06      	ldr	r4, [sp, #24]
 80055f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80055f6:	4631      	mov	r1, r6
 80055f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80055fa:	f7ff faa1 	bl	8004b40 <quorem>
 80055fe:	4621      	mov	r1, r4
 8005600:	9008      	str	r0, [sp, #32]
 8005602:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005604:	f001 f944 	bl	8006890 <__mcmp>
 8005608:	4642      	mov	r2, r8
 800560a:	4681      	mov	r9, r0
 800560c:	4631      	mov	r1, r6
 800560e:	4638      	mov	r0, r7
 8005610:	f001 f95e 	bl	80068d0 <__mdiff>
 8005614:	9a08      	ldr	r2, [sp, #32]
 8005616:	68c3      	ldr	r3, [r0, #12]
 8005618:	3230      	adds	r2, #48	; 0x30
 800561a:	4682      	mov	sl, r0
 800561c:	9206      	str	r2, [sp, #24]
 800561e:	f04f 0b01 	mov.w	fp, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d03d      	beq.n	80056a2 <_dtoa_r+0xa42>
 8005626:	4638      	mov	r0, r7
 8005628:	4651      	mov	r1, sl
 800562a:	f000 fefd 	bl	8006428 <_Bfree>
 800562e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005630:	ea5b 0303 	orrs.w	r3, fp, r3
 8005634:	d103      	bne.n	800563e <_dtoa_r+0x9de>
 8005636:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005638:	2800      	cmp	r0, #0
 800563a:	f000 8211 	beq.w	8005a60 <_dtoa_r+0xe00>
 800563e:	f1b9 0f00 	cmp.w	r9, #0
 8005642:	f2c0 819f 	blt.w	8005984 <_dtoa_r+0xd24>
 8005646:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005648:	ea59 0000 	orrs.w	r0, r9, r0
 800564c:	d103      	bne.n	8005656 <_dtoa_r+0x9f6>
 800564e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005650:	2900      	cmp	r1, #0
 8005652:	f000 8197 	beq.w	8005984 <_dtoa_r+0xd24>
 8005656:	f1bb 0f00 	cmp.w	fp, #0
 800565a:	f300 81ea 	bgt.w	8005a32 <_dtoa_r+0xdd2>
 800565e:	9a06      	ldr	r2, [sp, #24]
 8005660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005662:	f805 2b01 	strb.w	r2, [r5], #1
 8005666:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005668:	1a2b      	subs	r3, r5, r0
 800566a:	428b      	cmp	r3, r1
 800566c:	46aa      	mov	sl, r5
 800566e:	f000 81db 	beq.w	8005a28 <_dtoa_r+0xdc8>
 8005672:	220a      	movs	r2, #10
 8005674:	2300      	movs	r3, #0
 8005676:	4638      	mov	r0, r7
 8005678:	990a      	ldr	r1, [sp, #40]	; 0x28
 800567a:	f000 fedf 	bl	800643c <__multadd>
 800567e:	4544      	cmp	r4, r8
 8005680:	900a      	str	r0, [sp, #40]	; 0x28
 8005682:	d027      	beq.n	80056d4 <_dtoa_r+0xa74>
 8005684:	4621      	mov	r1, r4
 8005686:	220a      	movs	r2, #10
 8005688:	2300      	movs	r3, #0
 800568a:	4638      	mov	r0, r7
 800568c:	f000 fed6 	bl	800643c <__multadd>
 8005690:	4641      	mov	r1, r8
 8005692:	4604      	mov	r4, r0
 8005694:	220a      	movs	r2, #10
 8005696:	4638      	mov	r0, r7
 8005698:	2300      	movs	r3, #0
 800569a:	f000 fecf 	bl	800643c <__multadd>
 800569e:	4680      	mov	r8, r0
 80056a0:	e7a9      	b.n	80055f6 <_dtoa_r+0x996>
 80056a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80056a4:	4651      	mov	r1, sl
 80056a6:	f001 f8f3 	bl	8006890 <__mcmp>
 80056aa:	4683      	mov	fp, r0
 80056ac:	e7bb      	b.n	8005626 <_dtoa_r+0x9c6>
 80056ae:	4638      	mov	r0, r7
 80056b0:	4621      	mov	r1, r4
 80056b2:	f000 feb9 	bl	8006428 <_Bfree>
 80056b6:	e587      	b.n	80051c8 <_dtoa_r+0x568>
 80056b8:	231c      	movs	r3, #28
 80056ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80056bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056be:	18c0      	adds	r0, r0, r3
 80056c0:	18c9      	adds	r1, r1, r3
 80056c2:	900f      	str	r0, [sp, #60]	; 0x3c
 80056c4:	18e4      	adds	r4, r4, r3
 80056c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80056c8:	e538      	b.n	800513c <_dtoa_r+0x4dc>
 80056ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056ce:	4682      	mov	sl, r0
 80056d0:	468b      	mov	fp, r1
 80056d2:	e406      	b.n	8004ee2 <_dtoa_r+0x282>
 80056d4:	4621      	mov	r1, r4
 80056d6:	4638      	mov	r0, r7
 80056d8:	220a      	movs	r2, #10
 80056da:	2300      	movs	r3, #0
 80056dc:	f000 feae 	bl	800643c <__multadd>
 80056e0:	4604      	mov	r4, r0
 80056e2:	4680      	mov	r8, r0
 80056e4:	e787      	b.n	80055f6 <_dtoa_r+0x996>
 80056e6:	9c05      	ldr	r4, [sp, #20]
 80056e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80056ea:	9417      	str	r4, [sp, #92]	; 0x5c
 80056ec:	e672      	b.n	80053d4 <_dtoa_r+0x774>
 80056ee:	9d05      	ldr	r5, [sp, #20]
 80056f0:	426c      	negs	r4, r5
 80056f2:	2c00      	cmp	r4, #0
 80056f4:	f000 80fb 	beq.w	80058ee <_dtoa_r+0xc8e>
 80056f8:	4ba0      	ldr	r3, [pc, #640]	; (800597c <_dtoa_r+0xd1c>)
 80056fa:	f004 020f 	and.w	r2, r4, #15
 80056fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005702:	4650      	mov	r0, sl
 8005704:	4659      	mov	r1, fp
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	f002 fd79 	bl	8008200 <__aeabi_dmul>
 800570e:	1124      	asrs	r4, r4, #4
 8005710:	4682      	mov	sl, r0
 8005712:	468b      	mov	fp, r1
 8005714:	f000 80eb 	beq.w	80058ee <_dtoa_r+0xc8e>
 8005718:	4d99      	ldr	r5, [pc, #612]	; (8005980 <_dtoa_r+0xd20>)
 800571a:	2602      	movs	r6, #2
 800571c:	07e2      	lsls	r2, r4, #31
 800571e:	d504      	bpl.n	800572a <_dtoa_r+0xaca>
 8005720:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005724:	f002 fd6c 	bl	8008200 <__aeabi_dmul>
 8005728:	3601      	adds	r6, #1
 800572a:	3508      	adds	r5, #8
 800572c:	1064      	asrs	r4, r4, #1
 800572e:	d1f5      	bne.n	800571c <_dtoa_r+0xabc>
 8005730:	4682      	mov	sl, r0
 8005732:	468b      	mov	fp, r1
 8005734:	e612      	b.n	800535c <_dtoa_r+0x6fc>
 8005736:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005738:	9606      	str	r6, [sp, #24]
 800573a:	e530      	b.n	800519e <_dtoa_r+0x53e>
 800573c:	498f      	ldr	r1, [pc, #572]	; (800597c <_dtoa_r+0xd1c>)
 800573e:	1e6c      	subs	r4, r5, #1
 8005740:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800574c:	9406      	str	r4, [sp, #24]
 800574e:	f002 fd57 	bl	8008200 <__aeabi_dmul>
 8005752:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8005756:	4659      	mov	r1, fp
 8005758:	4650      	mov	r0, sl
 800575a:	f002 ffeb 	bl	8008734 <__aeabi_d2iz>
 800575e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005760:	4604      	mov	r4, r0
 8005762:	9111      	str	r1, [sp, #68]	; 0x44
 8005764:	f002 fce6 	bl	8008134 <__aeabi_i2d>
 8005768:	460b      	mov	r3, r1
 800576a:	4602      	mov	r2, r0
 800576c:	4659      	mov	r1, fp
 800576e:	4650      	mov	r0, sl
 8005770:	f002 fb92 	bl	8007e98 <__aeabi_dsub>
 8005774:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005778:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800577a:	f804 3b01 	strb.w	r3, [r4], #1
 800577e:	2d01      	cmp	r5, #1
 8005780:	4682      	mov	sl, r0
 8005782:	468b      	mov	fp, r1
 8005784:	9411      	str	r4, [sp, #68]	; 0x44
 8005786:	46a0      	mov	r8, r4
 8005788:	d020      	beq.n	80057cc <_dtoa_r+0xb6c>
 800578a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800578c:	1e66      	subs	r6, r4, #1
 800578e:	1976      	adds	r6, r6, r5
 8005790:	2300      	movs	r3, #0
 8005792:	2200      	movs	r2, #0
 8005794:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8005798:	f002 fd32 	bl	8008200 <__aeabi_dmul>
 800579c:	4689      	mov	r9, r1
 800579e:	4680      	mov	r8, r0
 80057a0:	f002 ffc8 	bl	8008734 <__aeabi_d2iz>
 80057a4:	4605      	mov	r5, r0
 80057a6:	f002 fcc5 	bl	8008134 <__aeabi_i2d>
 80057aa:	3530      	adds	r5, #48	; 0x30
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4640      	mov	r0, r8
 80057b2:	4649      	mov	r1, r9
 80057b4:	f002 fb70 	bl	8007e98 <__aeabi_dsub>
 80057b8:	f804 5f01 	strb.w	r5, [r4, #1]!
 80057bc:	42b4      	cmp	r4, r6
 80057be:	d1e7      	bne.n	8005790 <_dtoa_r+0xb30>
 80057c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80057c2:	9c06      	ldr	r4, [sp, #24]
 80057c4:	4682      	mov	sl, r0
 80057c6:	468b      	mov	fp, r1
 80057c8:	eb05 0804 	add.w	r8, r5, r4
 80057cc:	2300      	movs	r3, #0
 80057ce:	2200      	movs	r2, #0
 80057d0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80057d4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80057d8:	f002 fb60 	bl	8007e9c <__adddf3>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4650      	mov	r0, sl
 80057e2:	4659      	mov	r1, fp
 80057e4:	f002 ff9c 	bl	8008720 <__aeabi_dcmpgt>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	f000 808a 	beq.w	8005902 <_dtoa_r+0xca2>
 80057ee:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 80057f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80057f4:	e422      	b.n	800503c <_dtoa_r+0x3dc>
 80057f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80057f8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80057fc:	e4e8      	b.n	80051d0 <_dtoa_r+0x570>
 80057fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005800:	4631      	mov	r1, r6
 8005802:	f001 f845 	bl	8006890 <__mcmp>
 8005806:	2800      	cmp	r0, #0
 8005808:	f6bf acad 	bge.w	8005166 <_dtoa_r+0x506>
 800580c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800580e:	220a      	movs	r2, #10
 8005810:	4638      	mov	r0, r7
 8005812:	2300      	movs	r3, #0
 8005814:	f000 fe12 	bl	800643c <__multadd>
 8005818:	9905      	ldr	r1, [sp, #20]
 800581a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800581c:	900a      	str	r0, [sp, #40]	; 0x28
 800581e:	3901      	subs	r1, #1
 8005820:	9105      	str	r1, [sp, #20]
 8005822:	2a00      	cmp	r2, #0
 8005824:	f040 8136 	bne.w	8005a94 <_dtoa_r+0xe34>
 8005828:	9815      	ldr	r0, [sp, #84]	; 0x54
 800582a:	900e      	str	r0, [sp, #56]	; 0x38
 800582c:	e49b      	b.n	8005166 <_dtoa_r+0x506>
 800582e:	6933      	ldr	r3, [r6, #16]
 8005830:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005834:	6918      	ldr	r0, [r3, #16]
 8005836:	f000 fe91 	bl	800655c <__hi0bits>
 800583a:	f1c0 0320 	rsb	r3, r0, #32
 800583e:	e46a      	b.n	8005116 <_dtoa_r+0x4b6>
 8005840:	f1b9 0f0e 	cmp.w	r9, #14
 8005844:	bf8c      	ite	hi
 8005846:	2300      	movhi	r3, #0
 8005848:	2301      	movls	r3, #1
 800584a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800584e:	2100      	movs	r1, #0
 8005850:	6479      	str	r1, [r7, #68]	; 0x44
 8005852:	401c      	ands	r4, r3
 8005854:	e543      	b.n	80052de <_dtoa_r+0x67e>
 8005856:	2301      	movs	r3, #1
 8005858:	9315      	str	r3, [sp, #84]	; 0x54
 800585a:	930e      	str	r3, [sp, #56]	; 0x38
 800585c:	9327      	str	r3, [sp, #156]	; 0x9c
 800585e:	e7f6      	b.n	800584e <_dtoa_r+0xbee>
 8005860:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005862:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8005866:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800586a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800586c:	e006      	b.n	800587c <_dtoa_r+0xc1c>
 800586e:	4651      	mov	r1, sl
 8005870:	4638      	mov	r0, r7
 8005872:	220a      	movs	r2, #10
 8005874:	2300      	movs	r3, #0
 8005876:	f000 fde1 	bl	800643c <__multadd>
 800587a:	4682      	mov	sl, r0
 800587c:	4631      	mov	r1, r6
 800587e:	4650      	mov	r0, sl
 8005880:	f7ff f95e 	bl	8004b40 <quorem>
 8005884:	3030      	adds	r0, #48	; 0x30
 8005886:	5528      	strb	r0, [r5, r4]
 8005888:	3401      	adds	r4, #1
 800588a:	45a0      	cmp	r8, r4
 800588c:	dcef      	bgt.n	800586e <_dtoa_r+0xc0e>
 800588e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005890:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005894:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005898:	4681      	mov	r9, r0
 800589a:	2c01      	cmp	r4, #1
 800589c:	bfac      	ite	ge
 800589e:	44a2      	addge	sl, r4
 80058a0:	f10a 0a01 	addlt.w	sl, sl, #1
 80058a4:	2400      	movs	r4, #0
 80058a6:	2201      	movs	r2, #1
 80058a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058aa:	4638      	mov	r0, r7
 80058ac:	f000 ff90 	bl	80067d0 <__lshift>
 80058b0:	4631      	mov	r1, r6
 80058b2:	900a      	str	r0, [sp, #40]	; 0x28
 80058b4:	f000 ffec 	bl	8006890 <__mcmp>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	f340 8082 	ble.w	80059c2 <_dtoa_r+0xd62>
 80058be:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 80058c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058c4:	1c6a      	adds	r2, r5, #1
 80058c6:	e003      	b.n	80058d0 <_dtoa_r+0xc70>
 80058c8:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 80058cc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80058d0:	2b39      	cmp	r3, #57	; 0x39
 80058d2:	f040 8084 	bne.w	80059de <_dtoa_r+0xd7e>
 80058d6:	4592      	cmp	sl, r2
 80058d8:	d1f6      	bne.n	80058c8 <_dtoa_r+0xc68>
 80058da:	9805      	ldr	r0, [sp, #20]
 80058dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058de:	3001      	adds	r0, #1
 80058e0:	2331      	movs	r3, #49	; 0x31
 80058e2:	9005      	str	r0, [sp, #20]
 80058e4:	f80a 3c01 	strb.w	r3, [sl, #-1]
 80058e8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80058ec:	e461      	b.n	80051b2 <_dtoa_r+0x552>
 80058ee:	2602      	movs	r6, #2
 80058f0:	e534      	b.n	800535c <_dtoa_r+0x6fc>
 80058f2:	4638      	mov	r0, r7
 80058f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058f8:	f000 ff1e 	bl	8006738 <__pow5mult>
 80058fc:	900a      	str	r0, [sp, #40]	; 0x28
 80058fe:	f7ff bbf2 	b.w	80050e6 <_dtoa_r+0x486>
 8005902:	2100      	movs	r1, #0
 8005904:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005908:	2000      	movs	r0, #0
 800590a:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 800590e:	f002 fac3 	bl	8007e98 <__aeabi_dsub>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4650      	mov	r0, sl
 8005918:	4659      	mov	r1, fp
 800591a:	f002 fee3 	bl	80086e4 <__aeabi_dcmplt>
 800591e:	2800      	cmp	r0, #0
 8005920:	f43f aed3 	beq.w	80056ca <_dtoa_r+0xa6a>
 8005924:	4642      	mov	r2, r8
 8005926:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 800592a:	2b30      	cmp	r3, #48	; 0x30
 800592c:	d0fa      	beq.n	8005924 <_dtoa_r+0xcc4>
 800592e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005930:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005932:	9405      	str	r4, [sp, #20]
 8005934:	9209      	str	r2, [sp, #36]	; 0x24
 8005936:	e44b      	b.n	80051d0 <_dtoa_r+0x570>
 8005938:	4638      	mov	r0, r7
 800593a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800593c:	f000 fefc 	bl	8006738 <__pow5mult>
 8005940:	900a      	str	r0, [sp, #40]	; 0x28
 8005942:	f7ff bbd0 	b.w	80050e6 <_dtoa_r+0x486>
 8005946:	2600      	movs	r6, #0
 8005948:	9606      	str	r6, [sp, #24]
 800594a:	e4a5      	b.n	8005298 <_dtoa_r+0x638>
 800594c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800594e:	2d00      	cmp	r5, #0
 8005950:	d064      	beq.n	8005a1c <_dtoa_r+0xdbc>
 8005952:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005956:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005958:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800595a:	e47d      	b.n	8005258 <_dtoa_r+0x5f8>
 800595c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800595e:	f7ff bb6d 	b.w	800503c <_dtoa_r+0x3dc>
 8005962:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005964:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005968:	1c72      	adds	r2, r6, #1
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	9405      	str	r4, [sp, #20]
 800596e:	f7ff bb7b 	b.w	8005068 <_dtoa_r+0x408>
 8005972:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005974:	2300      	movs	r3, #0
 8005976:	1b04      	subs	r4, r0, r4
 8005978:	e46e      	b.n	8005258 <_dtoa_r+0x5f8>
 800597a:	bf00      	nop
 800597c:	08008b58 	.word	0x08008b58
 8005980:	08008c48 	.word	0x08008c48
 8005984:	f1bb 0f00 	cmp.w	fp, #0
 8005988:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800598c:	dd10      	ble.n	80059b0 <_dtoa_r+0xd50>
 800598e:	2201      	movs	r2, #1
 8005990:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005992:	4638      	mov	r0, r7
 8005994:	f000 ff1c 	bl	80067d0 <__lshift>
 8005998:	4631      	mov	r1, r6
 800599a:	900a      	str	r0, [sp, #40]	; 0x28
 800599c:	f000 ff78 	bl	8006890 <__mcmp>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	dd6b      	ble.n	8005a7c <_dtoa_r+0xe1c>
 80059a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059a8:	d053      	beq.n	8005a52 <_dtoa_r+0xdf2>
 80059aa:	9b08      	ldr	r3, [sp, #32]
 80059ac:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80059b0:	462b      	mov	r3, r5
 80059b2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059b4:	f803 9b01 	strb.w	r9, [r3], #1
 80059b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80059bc:	9309      	str	r3, [sp, #36]	; 0x24
 80059be:	f7ff bbf8 	b.w	80051b2 <_dtoa_r+0x552>
 80059c2:	d103      	bne.n	80059cc <_dtoa_r+0xd6c>
 80059c4:	f019 0f01 	tst.w	r9, #1
 80059c8:	f47f af79 	bne.w	80058be <_dtoa_r+0xc5e>
 80059cc:	4652      	mov	r2, sl
 80059ce:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 80059d2:	2b30      	cmp	r3, #48	; 0x30
 80059d4:	d0fa      	beq.n	80059cc <_dtoa_r+0xd6c>
 80059d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059d8:	9209      	str	r2, [sp, #36]	; 0x24
 80059da:	f7ff bbea 	b.w	80051b2 <_dtoa_r+0x552>
 80059de:	3301      	adds	r3, #1
 80059e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059e2:	f80a 3c01 	strb.w	r3, [sl, #-1]
 80059e6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80059ea:	f7ff bbe2 	b.w	80051b2 <_dtoa_r+0x552>
 80059ee:	9c06      	ldr	r4, [sp, #24]
 80059f0:	4638      	mov	r0, r7
 80059f2:	6861      	ldr	r1, [r4, #4]
 80059f4:	f000 fcf2 	bl	80063dc <_Balloc>
 80059f8:	9d06      	ldr	r5, [sp, #24]
 80059fa:	692a      	ldr	r2, [r5, #16]
 80059fc:	3202      	adds	r2, #2
 80059fe:	4604      	mov	r4, r0
 8005a00:	0092      	lsls	r2, r2, #2
 8005a02:	f105 010c 	add.w	r1, r5, #12
 8005a06:	f100 000c 	add.w	r0, r0, #12
 8005a0a:	f000 fc9f 	bl	800634c <memcpy>
 8005a0e:	4638      	mov	r0, r7
 8005a10:	4621      	mov	r1, r4
 8005a12:	2201      	movs	r2, #1
 8005a14:	f000 fedc 	bl	80067d0 <__lshift>
 8005a18:	4680      	mov	r8, r0
 8005a1a:	e5e7      	b.n	80055ec <_dtoa_r+0x98c>
 8005a1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005a1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a20:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005a22:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a26:	e417      	b.n	8005258 <_dtoa_r+0x5f8>
 8005a28:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005a2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a30:	e739      	b.n	80058a6 <_dtoa_r+0xc46>
 8005a32:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005a36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a3a:	d00a      	beq.n	8005a52 <_dtoa_r+0xdf2>
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	f109 0901 	add.w	r9, r9, #1
 8005a42:	f803 9b01 	strb.w	r9, [r3], #1
 8005a46:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a48:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a4e:	f7ff bbb0 	b.w	80051b2 <_dtoa_r+0x552>
 8005a52:	46aa      	mov	sl, r5
 8005a54:	2339      	movs	r3, #57	; 0x39
 8005a56:	f80a 3b01 	strb.w	r3, [sl], #1
 8005a5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a5e:	e730      	b.n	80058c2 <_dtoa_r+0xc62>
 8005a60:	464b      	mov	r3, r9
 8005a62:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005a66:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a6a:	d0f2      	beq.n	8005a52 <_dtoa_r+0xdf2>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	dc9c      	bgt.n	80059aa <_dtoa_r+0xd4a>
 8005a70:	e79e      	b.n	80059b0 <_dtoa_r+0xd50>
 8005a72:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005a74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a76:	9409      	str	r4, [sp, #36]	; 0x24
 8005a78:	f7ff bbaa 	b.w	80051d0 <_dtoa_r+0x570>
 8005a7c:	d198      	bne.n	80059b0 <_dtoa_r+0xd50>
 8005a7e:	f019 0f01 	tst.w	r9, #1
 8005a82:	d095      	beq.n	80059b0 <_dtoa_r+0xd50>
 8005a84:	e78e      	b.n	80059a4 <_dtoa_r+0xd44>
 8005a86:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005a88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a8a:	9405      	str	r4, [sp, #20]
 8005a8c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005a8e:	9409      	str	r4, [sp, #36]	; 0x24
 8005a90:	f7ff bb9e 	b.w	80051d0 <_dtoa_r+0x570>
 8005a94:	2300      	movs	r3, #0
 8005a96:	4638      	mov	r0, r7
 8005a98:	9906      	ldr	r1, [sp, #24]
 8005a9a:	220a      	movs	r2, #10
 8005a9c:	f000 fcce 	bl	800643c <__multadd>
 8005aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005aa2:	9006      	str	r0, [sp, #24]
 8005aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8005aa6:	f7ff bb5e 	b.w	8005166 <_dtoa_r+0x506>
 8005aaa:	f43f ab47 	beq.w	800513c <_dtoa_r+0x4dc>
 8005aae:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005ab2:	e602      	b.n	80056ba <_dtoa_r+0xa5a>
 8005ab4:	f3af 8000 	nop.w

08005ab8 <_malloc_trim_r>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	4d22      	ldr	r5, [pc, #136]	; (8005b44 <_malloc_trim_r+0x8c>)
 8005abc:	460f      	mov	r7, r1
 8005abe:	4604      	mov	r4, r0
 8005ac0:	f000 fc88 	bl	80063d4 <__malloc_lock>
 8005ac4:	68ab      	ldr	r3, [r5, #8]
 8005ac6:	685e      	ldr	r6, [r3, #4]
 8005ac8:	f026 0603 	bic.w	r6, r6, #3
 8005acc:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005ad0:	1bdf      	subs	r7, r3, r7
 8005ad2:	0b3f      	lsrs	r7, r7, #12
 8005ad4:	3f01      	subs	r7, #1
 8005ad6:	033f      	lsls	r7, r7, #12
 8005ad8:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005adc:	4620      	mov	r0, r4
 8005ade:	db07      	blt.n	8005af0 <_malloc_trim_r+0x38>
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	f001 f907 	bl	8006cf4 <_sbrk_r>
 8005ae6:	68ab      	ldr	r3, [r5, #8]
 8005ae8:	199b      	adds	r3, r3, r6
 8005aea:	4298      	cmp	r0, r3
 8005aec:	4620      	mov	r0, r4
 8005aee:	d003      	beq.n	8005af8 <_malloc_trim_r+0x40>
 8005af0:	f000 fc72 	bl	80063d8 <__malloc_unlock>
 8005af4:	2000      	movs	r0, #0
 8005af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af8:	4279      	negs	r1, r7
 8005afa:	f001 f8fb 	bl	8006cf4 <_sbrk_r>
 8005afe:	3001      	adds	r0, #1
 8005b00:	d00d      	beq.n	8005b1e <_malloc_trim_r+0x66>
 8005b02:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <_malloc_trim_r+0x90>)
 8005b04:	68aa      	ldr	r2, [r5, #8]
 8005b06:	6819      	ldr	r1, [r3, #0]
 8005b08:	1bf6      	subs	r6, r6, r7
 8005b0a:	f046 0601 	orr.w	r6, r6, #1
 8005b0e:	1bcf      	subs	r7, r1, r7
 8005b10:	4620      	mov	r0, r4
 8005b12:	6056      	str	r6, [r2, #4]
 8005b14:	601f      	str	r7, [r3, #0]
 8005b16:	f000 fc5f 	bl	80063d8 <__malloc_unlock>
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b1e:	2100      	movs	r1, #0
 8005b20:	4620      	mov	r0, r4
 8005b22:	f001 f8e7 	bl	8006cf4 <_sbrk_r>
 8005b26:	68ab      	ldr	r3, [r5, #8]
 8005b28:	1ac2      	subs	r2, r0, r3
 8005b2a:	2a0f      	cmp	r2, #15
 8005b2c:	dd07      	ble.n	8005b3e <_malloc_trim_r+0x86>
 8005b2e:	4907      	ldr	r1, [pc, #28]	; (8005b4c <_malloc_trim_r+0x94>)
 8005b30:	6809      	ldr	r1, [r1, #0]
 8005b32:	1a40      	subs	r0, r0, r1
 8005b34:	4904      	ldr	r1, [pc, #16]	; (8005b48 <_malloc_trim_r+0x90>)
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	6008      	str	r0, [r1, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	e7d6      	b.n	8005af0 <_malloc_trim_r+0x38>
 8005b42:	bf00      	nop
 8005b44:	200005b4 	.word	0x200005b4
 8005b48:	200009e0 	.word	0x200009e0
 8005b4c:	200009bc 	.word	0x200009bc

08005b50 <_free_r>:
 8005b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b54:	460d      	mov	r5, r1
 8005b56:	4604      	mov	r4, r0
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	d06f      	beq.n	8005c3c <_free_r+0xec>
 8005b5c:	f000 fc3a 	bl	80063d4 <__malloc_lock>
 8005b60:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8005b64:	4e58      	ldr	r6, [pc, #352]	; (8005cc8 <_free_r+0x178>)
 8005b66:	f1a5 0108 	sub.w	r1, r5, #8
 8005b6a:	f020 0301 	bic.w	r3, r0, #1
 8005b6e:	18ca      	adds	r2, r1, r3
 8005b70:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8005b74:	6857      	ldr	r7, [r2, #4]
 8005b76:	4594      	cmp	ip, r2
 8005b78:	f027 0703 	bic.w	r7, r7, #3
 8005b7c:	d07c      	beq.n	8005c78 <_free_r+0x128>
 8005b7e:	f010 0001 	ands.w	r0, r0, #1
 8005b82:	6057      	str	r7, [r2, #4]
 8005b84:	d049      	beq.n	8005c1a <_free_r+0xca>
 8005b86:	2000      	movs	r0, #0
 8005b88:	19d5      	adds	r5, r2, r7
 8005b8a:	686d      	ldr	r5, [r5, #4]
 8005b8c:	f015 0f01 	tst.w	r5, #1
 8005b90:	d106      	bne.n	8005ba0 <_free_r+0x50>
 8005b92:	19db      	adds	r3, r3, r7
 8005b94:	6895      	ldr	r5, [r2, #8]
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d062      	beq.n	8005c60 <_free_r+0x110>
 8005b9a:	68d2      	ldr	r2, [r2, #12]
 8005b9c:	60ea      	str	r2, [r5, #12]
 8005b9e:	6095      	str	r5, [r2, #8]
 8005ba0:	f043 0201 	orr.w	r2, r3, #1
 8005ba4:	604a      	str	r2, [r1, #4]
 8005ba6:	50cb      	str	r3, [r1, r3]
 8005ba8:	bb90      	cbnz	r0, 8005c10 <_free_r+0xc0>
 8005baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bae:	d347      	bcc.n	8005c40 <_free_r+0xf0>
 8005bb0:	099d      	lsrs	r5, r3, #6
 8005bb2:	3538      	adds	r5, #56	; 0x38
 8005bb4:	0a5a      	lsrs	r2, r3, #9
 8005bb6:	00e8      	lsls	r0, r5, #3
 8005bb8:	2a04      	cmp	r2, #4
 8005bba:	d916      	bls.n	8005bea <_free_r+0x9a>
 8005bbc:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005bc0:	00e8      	lsls	r0, r5, #3
 8005bc2:	2a14      	cmp	r2, #20
 8005bc4:	d911      	bls.n	8005bea <_free_r+0x9a>
 8005bc6:	0b1d      	lsrs	r5, r3, #12
 8005bc8:	356e      	adds	r5, #110	; 0x6e
 8005bca:	00e8      	lsls	r0, r5, #3
 8005bcc:	2a54      	cmp	r2, #84	; 0x54
 8005bce:	d90c      	bls.n	8005bea <_free_r+0x9a>
 8005bd0:	0bdd      	lsrs	r5, r3, #15
 8005bd2:	3577      	adds	r5, #119	; 0x77
 8005bd4:	00e8      	lsls	r0, r5, #3
 8005bd6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005bda:	d906      	bls.n	8005bea <_free_r+0x9a>
 8005bdc:	f240 5054 	movw	r0, #1364	; 0x554
 8005be0:	4282      	cmp	r2, r0
 8005be2:	d86d      	bhi.n	8005cc0 <_free_r+0x170>
 8005be4:	0c9d      	lsrs	r5, r3, #18
 8005be6:	357c      	adds	r5, #124	; 0x7c
 8005be8:	00e8      	lsls	r0, r5, #3
 8005bea:	1986      	adds	r6, r0, r6
 8005bec:	4836      	ldr	r0, [pc, #216]	; (8005cc8 <_free_r+0x178>)
 8005bee:	68b2      	ldr	r2, [r6, #8]
 8005bf0:	42b2      	cmp	r2, r6
 8005bf2:	d103      	bne.n	8005bfc <_free_r+0xac>
 8005bf4:	e05b      	b.n	8005cae <_free_r+0x15e>
 8005bf6:	6892      	ldr	r2, [r2, #8]
 8005bf8:	4296      	cmp	r6, r2
 8005bfa:	d004      	beq.n	8005c06 <_free_r+0xb6>
 8005bfc:	6850      	ldr	r0, [r2, #4]
 8005bfe:	f020 0003 	bic.w	r0, r0, #3
 8005c02:	4283      	cmp	r3, r0
 8005c04:	d3f7      	bcc.n	8005bf6 <_free_r+0xa6>
 8005c06:	68d3      	ldr	r3, [r2, #12]
 8005c08:	60cb      	str	r3, [r1, #12]
 8005c0a:	608a      	str	r2, [r1, #8]
 8005c0c:	60d1      	str	r1, [r2, #12]
 8005c0e:	6099      	str	r1, [r3, #8]
 8005c10:	4620      	mov	r0, r4
 8005c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	f000 bbdf 	b.w	80063d8 <__malloc_unlock>
 8005c1a:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8005c1e:	ebcc 0101 	rsb	r1, ip, r1
 8005c22:	f106 0808 	add.w	r8, r6, #8
 8005c26:	688d      	ldr	r5, [r1, #8]
 8005c28:	4545      	cmp	r5, r8
 8005c2a:	4463      	add	r3, ip
 8005c2c:	d03d      	beq.n	8005caa <_free_r+0x15a>
 8005c2e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005c32:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005c36:	f8cc 5008 	str.w	r5, [ip, #8]
 8005c3a:	e7a5      	b.n	8005b88 <_free_r+0x38>
 8005c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c40:	08db      	lsrs	r3, r3, #3
 8005c42:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8005c46:	6875      	ldr	r5, [r6, #4]
 8005c48:	6890      	ldr	r0, [r2, #8]
 8005c4a:	60ca      	str	r2, [r1, #12]
 8005c4c:	109b      	asrs	r3, r3, #2
 8005c4e:	2701      	movs	r7, #1
 8005c50:	fa17 f303 	lsls.w	r3, r7, r3
 8005c54:	432b      	orrs	r3, r5
 8005c56:	6088      	str	r0, [r1, #8]
 8005c58:	6073      	str	r3, [r6, #4]
 8005c5a:	6091      	str	r1, [r2, #8]
 8005c5c:	60c1      	str	r1, [r0, #12]
 8005c5e:	e7d7      	b.n	8005c10 <_free_r+0xc0>
 8005c60:	4f1a      	ldr	r7, [pc, #104]	; (8005ccc <_free_r+0x17c>)
 8005c62:	42bd      	cmp	r5, r7
 8005c64:	d199      	bne.n	8005b9a <_free_r+0x4a>
 8005c66:	f043 0201 	orr.w	r2, r3, #1
 8005c6a:	6171      	str	r1, [r6, #20]
 8005c6c:	6131      	str	r1, [r6, #16]
 8005c6e:	60cd      	str	r5, [r1, #12]
 8005c70:	608d      	str	r5, [r1, #8]
 8005c72:	604a      	str	r2, [r1, #4]
 8005c74:	50cb      	str	r3, [r1, r3]
 8005c76:	e7cb      	b.n	8005c10 <_free_r+0xc0>
 8005c78:	07c2      	lsls	r2, r0, #31
 8005c7a:	443b      	add	r3, r7
 8005c7c:	d407      	bmi.n	8005c8e <_free_r+0x13e>
 8005c7e:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005c82:	1a89      	subs	r1, r1, r2
 8005c84:	189b      	adds	r3, r3, r2
 8005c86:	6888      	ldr	r0, [r1, #8]
 8005c88:	68ca      	ldr	r2, [r1, #12]
 8005c8a:	60c2      	str	r2, [r0, #12]
 8005c8c:	6090      	str	r0, [r2, #8]
 8005c8e:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <_free_r+0x180>)
 8005c90:	60b1      	str	r1, [r6, #8]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	f043 0001 	orr.w	r0, r3, #1
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	6048      	str	r0, [r1, #4]
 8005c9c:	d3b8      	bcc.n	8005c10 <_free_r+0xc0>
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <_free_r+0x184>)
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	f7ff ff08 	bl	8005ab8 <_malloc_trim_r>
 8005ca8:	e7b2      	b.n	8005c10 <_free_r+0xc0>
 8005caa:	2001      	movs	r0, #1
 8005cac:	e76c      	b.n	8005b88 <_free_r+0x38>
 8005cae:	6843      	ldr	r3, [r0, #4]
 8005cb0:	10ad      	asrs	r5, r5, #2
 8005cb2:	2601      	movs	r6, #1
 8005cb4:	fa16 f505 	lsls.w	r5, r6, r5
 8005cb8:	432b      	orrs	r3, r5
 8005cba:	6043      	str	r3, [r0, #4]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	e7a3      	b.n	8005c08 <_free_r+0xb8>
 8005cc0:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8005cc4:	257e      	movs	r5, #126	; 0x7e
 8005cc6:	e790      	b.n	8005bea <_free_r+0x9a>
 8005cc8:	200005b4 	.word	0x200005b4
 8005ccc:	200005bc 	.word	0x200005bc
 8005cd0:	200009c0 	.word	0x200009c0
 8005cd4:	200009dc 	.word	0x200009dc

08005cd8 <_setlocale_r>:
 8005cd8:	b510      	push	{r4, lr}
 8005cda:	4614      	mov	r4, r2
 8005cdc:	b122      	cbz	r2, 8005ce8 <_setlocale_r+0x10>
 8005cde:	4610      	mov	r0, r2
 8005ce0:	490b      	ldr	r1, [pc, #44]	; (8005d10 <_setlocale_r+0x38>)
 8005ce2:	f001 f819 	bl	8006d18 <strcmp>
 8005ce6:	b908      	cbnz	r0, 8005cec <_setlocale_r+0x14>
 8005ce8:	480a      	ldr	r0, [pc, #40]	; (8005d14 <_setlocale_r+0x3c>)
 8005cea:	bd10      	pop	{r4, pc}
 8005cec:	4620      	mov	r0, r4
 8005cee:	4909      	ldr	r1, [pc, #36]	; (8005d14 <_setlocale_r+0x3c>)
 8005cf0:	f001 f812 	bl	8006d18 <strcmp>
 8005cf4:	b908      	cbnz	r0, 8005cfa <_setlocale_r+0x22>
 8005cf6:	4807      	ldr	r0, [pc, #28]	; (8005d14 <_setlocale_r+0x3c>)
 8005cf8:	bd10      	pop	{r4, pc}
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	4906      	ldr	r1, [pc, #24]	; (8005d18 <_setlocale_r+0x40>)
 8005cfe:	f001 f80b 	bl	8006d18 <strcmp>
 8005d02:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <_setlocale_r+0x3c>)
 8005d04:	2800      	cmp	r0, #0
 8005d06:	bf0c      	ite	eq
 8005d08:	4618      	moveq	r0, r3
 8005d0a:	2000      	movne	r0, #0
 8005d0c:	bd10      	pop	{r4, pc}
 8005d0e:	bf00      	nop
 8005d10:	08008d58 	.word	0x08008d58
 8005d14:	08008d54 	.word	0x08008d54
 8005d18:	08008cd4 	.word	0x08008cd4

08005d1c <__locale_charset>:
 8005d1c:	f240 5038 	movw	r0, #1336	; 0x538
 8005d20:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop

08005d28 <__locale_mb_cur_max>:
 8005d28:	f240 5338 	movw	r3, #1336	; 0x538
 8005d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d30:	6a18      	ldr	r0, [r3, #32]
 8005d32:	4770      	bx	lr

08005d34 <__locale_msgcharset>:
 8005d34:	4800      	ldr	r0, [pc, #0]	; (8005d38 <__locale_msgcharset+0x4>)
 8005d36:	4770      	bx	lr
 8005d38:	2000055c 	.word	0x2000055c

08005d3c <__locale_cjk_lang>:
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	4770      	bx	lr

08005d40 <_localeconv_r>:
 8005d40:	4800      	ldr	r0, [pc, #0]	; (8005d44 <_localeconv_r+0x4>)
 8005d42:	4770      	bx	lr
 8005d44:	2000057c 	.word	0x2000057c

08005d48 <setlocale>:
 8005d48:	b410      	push	{r4}
 8005d4a:	f240 1308 	movw	r3, #264	; 0x108
 8005d4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d52:	4604      	mov	r4, r0
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	460a      	mov	r2, r1
 8005d58:	4621      	mov	r1, r4
 8005d5a:	bc10      	pop	{r4}
 8005d5c:	e7bc      	b.n	8005cd8 <_setlocale_r>
 8005d5e:	bf00      	nop

08005d60 <localeconv>:
 8005d60:	4800      	ldr	r0, [pc, #0]	; (8005d64 <localeconv+0x4>)
 8005d62:	4770      	bx	lr
 8005d64:	2000057c 	.word	0x2000057c

08005d68 <_malloc_r>:
 8005d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	f101 040b 	add.w	r4, r1, #11
 8005d70:	2c16      	cmp	r4, #22
 8005d72:	4605      	mov	r5, r0
 8005d74:	d92a      	bls.n	8005dcc <_malloc_r+0x64>
 8005d76:	f024 0407 	bic.w	r4, r4, #7
 8005d7a:	0fe3      	lsrs	r3, r4, #31
 8005d7c:	428c      	cmp	r4, r1
 8005d7e:	bf2c      	ite	cs
 8005d80:	4619      	movcs	r1, r3
 8005d82:	f043 0101 	orrcc.w	r1, r3, #1
 8005d86:	bb51      	cbnz	r1, 8005dde <_malloc_r+0x76>
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f000 fb23 	bl	80063d4 <__malloc_lock>
 8005d8e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005d92:	d22a      	bcs.n	8005dea <_malloc_r+0x82>
 8005d94:	4e7d      	ldr	r6, [pc, #500]	; (8005f8c <_malloc_r+0x224>)
 8005d96:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8005d9a:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 8005d9e:	68df      	ldr	r7, [r3, #12]
 8005da0:	429f      	cmp	r7, r3
 8005da2:	f000 8235 	beq.w	8006210 <_malloc_r+0x4a8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	f023 0303 	bic.w	r3, r3, #3
 8005db0:	18fb      	adds	r3, r7, r3
 8005db2:	60ca      	str	r2, [r1, #12]
 8005db4:	6858      	ldr	r0, [r3, #4]
 8005db6:	6091      	str	r1, [r2, #8]
 8005db8:	f040 0201 	orr.w	r2, r0, #1
 8005dbc:	605a      	str	r2, [r3, #4]
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f000 fb0a 	bl	80063d8 <__malloc_unlock>
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dcc:	2300      	movs	r3, #0
 8005dce:	2410      	movs	r4, #16
 8005dd0:	428c      	cmp	r4, r1
 8005dd2:	bf2c      	ite	cs
 8005dd4:	4619      	movcs	r1, r3
 8005dd6:	f043 0101 	orrcc.w	r1, r3, #1
 8005dda:	2900      	cmp	r1, #0
 8005ddc:	d0d4      	beq.n	8005d88 <_malloc_r+0x20>
 8005dde:	230c      	movs	r3, #12
 8005de0:	2700      	movs	r7, #0
 8005de2:	602b      	str	r3, [r5, #0]
 8005de4:	4638      	mov	r0, r7
 8005de6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dea:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8005dee:	bf04      	itt	eq
 8005df0:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8005df4:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8005df8:	f040 8081 	bne.w	8005efe <_malloc_r+0x196>
 8005dfc:	4e63      	ldr	r6, [pc, #396]	; (8005f8c <_malloc_r+0x224>)
 8005dfe:	1871      	adds	r1, r6, r1
 8005e00:	68cf      	ldr	r7, [r1, #12]
 8005e02:	42b9      	cmp	r1, r7
 8005e04:	d106      	bne.n	8005e14 <_malloc_r+0xac>
 8005e06:	e00d      	b.n	8005e24 <_malloc_r+0xbc>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f280 8169 	bge.w	80060e0 <_malloc_r+0x378>
 8005e0e:	68ff      	ldr	r7, [r7, #12]
 8005e10:	42b9      	cmp	r1, r7
 8005e12:	d007      	beq.n	8005e24 <_malloc_r+0xbc>
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	f022 0203 	bic.w	r2, r2, #3
 8005e1a:	1b13      	subs	r3, r2, r4
 8005e1c:	2b0f      	cmp	r3, #15
 8005e1e:	ddf3      	ble.n	8005e08 <_malloc_r+0xa0>
 8005e20:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005e24:	f10e 0e01 	add.w	lr, lr, #1
 8005e28:	4a58      	ldr	r2, [pc, #352]	; (8005f8c <_malloc_r+0x224>)
 8005e2a:	6937      	ldr	r7, [r6, #16]
 8005e2c:	f102 0c08 	add.w	ip, r2, #8
 8005e30:	4567      	cmp	r7, ip
 8005e32:	bf08      	it	eq
 8005e34:	6853      	ldreq	r3, [r2, #4]
 8005e36:	d023      	beq.n	8005e80 <_malloc_r+0x118>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f023 0303 	bic.w	r3, r3, #3
 8005e3e:	1b19      	subs	r1, r3, r4
 8005e40:	290f      	cmp	r1, #15
 8005e42:	f300 81b4 	bgt.w	80061ae <_malloc_r+0x446>
 8005e46:	2900      	cmp	r1, #0
 8005e48:	f8c2 c014 	str.w	ip, [r2, #20]
 8005e4c:	f8c2 c010 	str.w	ip, [r2, #16]
 8005e50:	f280 808f 	bge.w	8005f72 <_malloc_r+0x20a>
 8005e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e58:	f080 8161 	bcs.w	800611e <_malloc_r+0x3b6>
 8005e5c:	08db      	lsrs	r3, r3, #3
 8005e5e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005e62:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8005e66:	6888      	ldr	r0, [r1, #8]
 8005e68:	60f9      	str	r1, [r7, #12]
 8005e6a:	109b      	asrs	r3, r3, #2
 8005e6c:	f04f 0901 	mov.w	r9, #1
 8005e70:	fa09 f303 	lsl.w	r3, r9, r3
 8005e74:	ea43 0308 	orr.w	r3, r3, r8
 8005e78:	60b8      	str	r0, [r7, #8]
 8005e7a:	6053      	str	r3, [r2, #4]
 8005e7c:	608f      	str	r7, [r1, #8]
 8005e7e:	60c7      	str	r7, [r0, #12]
 8005e80:	2001      	movs	r0, #1
 8005e82:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8005e86:	4090      	lsls	r0, r2
 8005e88:	4298      	cmp	r0, r3
 8005e8a:	f200 8081 	bhi.w	8005f90 <_malloc_r+0x228>
 8005e8e:	4203      	tst	r3, r0
 8005e90:	d106      	bne.n	8005ea0 <_malloc_r+0x138>
 8005e92:	f02e 0e03 	bic.w	lr, lr, #3
 8005e96:	0040      	lsls	r0, r0, #1
 8005e98:	4203      	tst	r3, r0
 8005e9a:	f10e 0e04 	add.w	lr, lr, #4
 8005e9e:	d0fa      	beq.n	8005e96 <_malloc_r+0x12e>
 8005ea0:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8005ea4:	464f      	mov	r7, r9
 8005ea6:	46f0      	mov	r8, lr
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	429f      	cmp	r7, r3
 8005eac:	d107      	bne.n	8005ebe <_malloc_r+0x156>
 8005eae:	e191      	b.n	80061d4 <_malloc_r+0x46c>
 8005eb0:	2a00      	cmp	r2, #0
 8005eb2:	f280 81b7 	bge.w	8006224 <_malloc_r+0x4bc>
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	429f      	cmp	r7, r3
 8005eba:	f000 818b 	beq.w	80061d4 <_malloc_r+0x46c>
 8005ebe:	6859      	ldr	r1, [r3, #4]
 8005ec0:	f021 0103 	bic.w	r1, r1, #3
 8005ec4:	1b0a      	subs	r2, r1, r4
 8005ec6:	2a0f      	cmp	r2, #15
 8005ec8:	ddf2      	ble.n	8005eb0 <_malloc_r+0x148>
 8005eca:	461f      	mov	r7, r3
 8005ecc:	1919      	adds	r1, r3, r4
 8005ece:	68d8      	ldr	r0, [r3, #12]
 8005ed0:	f857 ef08 	ldr.w	lr, [r7, #8]!
 8005ed4:	508a      	str	r2, [r1, r2]
 8005ed6:	f044 0401 	orr.w	r4, r4, #1
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	f8ce 000c 	str.w	r0, [lr, #12]
 8005ee2:	f8c0 e008 	str.w	lr, [r0, #8]
 8005ee6:	605c      	str	r4, [r3, #4]
 8005ee8:	6171      	str	r1, [r6, #20]
 8005eea:	6131      	str	r1, [r6, #16]
 8005eec:	f8c1 c00c 	str.w	ip, [r1, #12]
 8005ef0:	f8c1 c008 	str.w	ip, [r1, #8]
 8005ef4:	604a      	str	r2, [r1, #4]
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 fa6e 	bl	80063d8 <__malloc_unlock>
 8005efc:	e763      	b.n	8005dc6 <_malloc_r+0x5e>
 8005efe:	f1be 0f04 	cmp.w	lr, #4
 8005f02:	bf9e      	ittt	ls
 8005f04:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8005f08:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8005f0c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f10:	f67f af74 	bls.w	8005dfc <_malloc_r+0x94>
 8005f14:	f1be 0f14 	cmp.w	lr, #20
 8005f18:	bf9c      	itt	ls
 8005f1a:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8005f1e:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f22:	f67f af6b 	bls.w	8005dfc <_malloc_r+0x94>
 8005f26:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8005f2a:	bf9e      	ittt	ls
 8005f2c:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8005f30:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8005f34:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f38:	f67f af60 	bls.w	8005dfc <_malloc_r+0x94>
 8005f3c:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8005f40:	bf9e      	ittt	ls
 8005f42:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8005f46:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8005f4a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f4e:	f67f af55 	bls.w	8005dfc <_malloc_r+0x94>
 8005f52:	f240 5354 	movw	r3, #1364	; 0x554
 8005f56:	459e      	cmp	lr, r3
 8005f58:	bf9d      	ittte	ls
 8005f5a:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8005f5e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8005f62:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f66:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8005f6a:	bf88      	it	hi
 8005f6c:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8005f70:	e744      	b.n	8005dfc <_malloc_r+0x94>
 8005f72:	18fb      	adds	r3, r7, r3
 8005f74:	4628      	mov	r0, r5
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	f042 0201 	orr.w	r2, r2, #1
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	3708      	adds	r7, #8
 8005f80:	f000 fa2a 	bl	80063d8 <__malloc_unlock>
 8005f84:	4638      	mov	r0, r7
 8005f86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8a:	bf00      	nop
 8005f8c:	200005b4 	.word	0x200005b4
 8005f90:	68b7      	ldr	r7, [r6, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f023 0803 	bic.w	r8, r3, #3
 8005f98:	4544      	cmp	r4, r8
 8005f9a:	ebc4 0208 	rsb	r2, r4, r8
 8005f9e:	bf94      	ite	ls
 8005fa0:	2300      	movls	r3, #0
 8005fa2:	2301      	movhi	r3, #1
 8005fa4:	2a0f      	cmp	r2, #15
 8005fa6:	bfd8      	it	le
 8005fa8:	f043 0301 	orrle.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80a7 	beq.w	8006100 <_malloc_r+0x398>
 8005fb2:	4bb3      	ldr	r3, [pc, #716]	; (8006280 <_malloc_r+0x518>)
 8005fb4:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 8006284 <_malloc_r+0x51c>
 8005fb8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005fbc:	f8da 3000 	ldr.w	r3, [sl]
 8005fc0:	3201      	adds	r2, #1
 8005fc2:	4423      	add	r3, r4
 8005fc4:	bf08      	it	eq
 8005fc6:	f103 0b10 	addeq.w	fp, r3, #16
 8005fca:	d006      	beq.n	8005fda <_malloc_r+0x272>
 8005fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd0:	330f      	adds	r3, #15
 8005fd2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005fd6:	f023 0b0f 	bic.w	fp, r3, #15
 8005fda:	4628      	mov	r0, r5
 8005fdc:	4659      	mov	r1, fp
 8005fde:	f000 fe89 	bl	8006cf4 <_sbrk_r>
 8005fe2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005fe6:	4681      	mov	r9, r0
 8005fe8:	f000 8144 	beq.w	8006274 <_malloc_r+0x50c>
 8005fec:	eb07 0208 	add.w	r2, r7, r8
 8005ff0:	4282      	cmp	r2, r0
 8005ff2:	f200 8126 	bhi.w	8006242 <_malloc_r+0x4da>
 8005ff6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005ffa:	454a      	cmp	r2, r9
 8005ffc:	445b      	add	r3, fp
 8005ffe:	f8ca 3004 	str.w	r3, [sl, #4]
 8006002:	f000 8141 	beq.w	8006288 <_malloc_r+0x520>
 8006006:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 800600a:	3101      	adds	r1, #1
 800600c:	bf15      	itete	ne
 800600e:	ebc2 0209 	rsbne	r2, r2, r9
 8006012:	4b9b      	ldreq	r3, [pc, #620]	; (8006280 <_malloc_r+0x518>)
 8006014:	189b      	addne	r3, r3, r2
 8006016:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 800601a:	bf18      	it	ne
 800601c:	f8ca 3004 	strne.w	r3, [sl, #4]
 8006020:	f019 0307 	ands.w	r3, r9, #7
 8006024:	bf1f      	itttt	ne
 8006026:	f1c3 0208 	rsbne	r2, r3, #8
 800602a:	4491      	addne	r9, r2
 800602c:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8006030:	f103 0208 	addne.w	r2, r3, #8
 8006034:	eb09 030b 	add.w	r3, r9, fp
 8006038:	bf08      	it	eq
 800603a:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 800603e:	051b      	lsls	r3, r3, #20
 8006040:	0d1b      	lsrs	r3, r3, #20
 8006042:	ebc3 0b02 	rsb	fp, r3, r2
 8006046:	4628      	mov	r0, r5
 8006048:	4659      	mov	r1, fp
 800604a:	f000 fe53 	bl	8006cf4 <_sbrk_r>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	f000 8126 	beq.w	80062a0 <_malloc_r+0x538>
 8006054:	ebc9 0200 	rsb	r2, r9, r0
 8006058:	445a      	add	r2, fp
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006062:	f8c6 9008 	str.w	r9, [r6, #8]
 8006066:	445b      	add	r3, fp
 8006068:	42b7      	cmp	r7, r6
 800606a:	f8ca 3004 	str.w	r3, [sl, #4]
 800606e:	f8c9 2004 	str.w	r2, [r9, #4]
 8006072:	d015      	beq.n	80060a0 <_malloc_r+0x338>
 8006074:	f1b8 0f0f 	cmp.w	r8, #15
 8006078:	f240 80f6 	bls.w	8006268 <_malloc_r+0x500>
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f1a8 020c 	sub.w	r2, r8, #12
 8006082:	f022 0207 	bic.w	r2, r2, #7
 8006086:	18b9      	adds	r1, r7, r2
 8006088:	f000 0e01 	and.w	lr, r0, #1
 800608c:	ea42 0e0e 	orr.w	lr, r2, lr
 8006090:	2005      	movs	r0, #5
 8006092:	2a0f      	cmp	r2, #15
 8006094:	f8c7 e004 	str.w	lr, [r7, #4]
 8006098:	6048      	str	r0, [r1, #4]
 800609a:	6088      	str	r0, [r1, #8]
 800609c:	f200 8104 	bhi.w	80062a8 <_malloc_r+0x540>
 80060a0:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80060a4:	68b7      	ldr	r7, [r6, #8]
 80060a6:	4293      	cmp	r3, r2
 80060a8:	bf84      	itt	hi
 80060aa:	4a76      	ldrhi	r2, [pc, #472]	; (8006284 <_malloc_r+0x51c>)
 80060ac:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 80060ae:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80060b2:	4293      	cmp	r3, r2
 80060b4:	bf84      	itt	hi
 80060b6:	4a73      	ldrhi	r2, [pc, #460]	; (8006284 <_malloc_r+0x51c>)
 80060b8:	6313      	strhi	r3, [r2, #48]	; 0x30
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f023 0303 	bic.w	r3, r3, #3
 80060c0:	429c      	cmp	r4, r3
 80060c2:	ebc4 0203 	rsb	r2, r4, r3
 80060c6:	bf94      	ite	ls
 80060c8:	2300      	movls	r3, #0
 80060ca:	2301      	movhi	r3, #1
 80060cc:	2a0f      	cmp	r2, #15
 80060ce:	bfd8      	it	le
 80060d0:	f043 0301 	orrle.w	r3, r3, #1
 80060d4:	b1a3      	cbz	r3, 8006100 <_malloc_r+0x398>
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 f97e 	bl	80063d8 <__malloc_unlock>
 80060dc:	2700      	movs	r7, #0
 80060de:	e672      	b.n	8005dc6 <_malloc_r+0x5e>
 80060e0:	18ba      	adds	r2, r7, r2
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6850      	ldr	r0, [r2, #4]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	f040 0001 	orr.w	r0, r0, #1
 80060ec:	6050      	str	r0, [r2, #4]
 80060ee:	60cb      	str	r3, [r1, #12]
 80060f0:	4628      	mov	r0, r5
 80060f2:	6099      	str	r1, [r3, #8]
 80060f4:	3708      	adds	r7, #8
 80060f6:	f000 f96f 	bl	80063d8 <__malloc_unlock>
 80060fa:	4638      	mov	r0, r7
 80060fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006100:	193b      	adds	r3, r7, r4
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	f044 0401 	orr.w	r4, r4, #1
 800610a:	607c      	str	r4, [r7, #4]
 800610c:	4628      	mov	r0, r5
 800610e:	605a      	str	r2, [r3, #4]
 8006110:	3708      	adds	r7, #8
 8006112:	60b3      	str	r3, [r6, #8]
 8006114:	f000 f960 	bl	80063d8 <__malloc_unlock>
 8006118:	4638      	mov	r0, r7
 800611a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611e:	0a5a      	lsrs	r2, r3, #9
 8006120:	2a04      	cmp	r2, #4
 8006122:	bf9e      	ittt	ls
 8006124:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8006128:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 800612c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006130:	d928      	bls.n	8006184 <_malloc_r+0x41c>
 8006132:	2a14      	cmp	r2, #20
 8006134:	bf9c      	itt	ls
 8006136:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 800613a:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800613e:	d921      	bls.n	8006184 <_malloc_r+0x41c>
 8006140:	2a54      	cmp	r2, #84	; 0x54
 8006142:	bf9e      	ittt	ls
 8006144:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8006148:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 800614c:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006150:	d918      	bls.n	8006184 <_malloc_r+0x41c>
 8006152:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006156:	bf9e      	ittt	ls
 8006158:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 800615c:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8006160:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006164:	d90e      	bls.n	8006184 <_malloc_r+0x41c>
 8006166:	f240 5154 	movw	r1, #1364	; 0x554
 800616a:	428a      	cmp	r2, r1
 800616c:	bf9d      	ittte	ls
 800616e:	ea4f 4893 	movls.w	r8, r3, lsr #18
 8006172:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 8006176:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800617a:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 800617e:	bf88      	it	hi
 8006180:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 8006184:	1830      	adds	r0, r6, r0
 8006186:	493e      	ldr	r1, [pc, #248]	; (8006280 <_malloc_r+0x518>)
 8006188:	6882      	ldr	r2, [r0, #8]
 800618a:	4282      	cmp	r2, r0
 800618c:	d103      	bne.n	8006196 <_malloc_r+0x42e>
 800618e:	e061      	b.n	8006254 <_malloc_r+0x4ec>
 8006190:	6892      	ldr	r2, [r2, #8]
 8006192:	4290      	cmp	r0, r2
 8006194:	d004      	beq.n	80061a0 <_malloc_r+0x438>
 8006196:	6851      	ldr	r1, [r2, #4]
 8006198:	f021 0103 	bic.w	r1, r1, #3
 800619c:	428b      	cmp	r3, r1
 800619e:	d3f7      	bcc.n	8006190 <_malloc_r+0x428>
 80061a0:	68d1      	ldr	r1, [r2, #12]
 80061a2:	6873      	ldr	r3, [r6, #4]
 80061a4:	60f9      	str	r1, [r7, #12]
 80061a6:	60ba      	str	r2, [r7, #8]
 80061a8:	60d7      	str	r7, [r2, #12]
 80061aa:	608f      	str	r7, [r1, #8]
 80061ac:	e668      	b.n	8005e80 <_malloc_r+0x118>
 80061ae:	193b      	adds	r3, r7, r4
 80061b0:	f041 0001 	orr.w	r0, r1, #1
 80061b4:	f044 0401 	orr.w	r4, r4, #1
 80061b8:	607c      	str	r4, [r7, #4]
 80061ba:	6153      	str	r3, [r2, #20]
 80061bc:	6113      	str	r3, [r2, #16]
 80061be:	6058      	str	r0, [r3, #4]
 80061c0:	f8c3 c00c 	str.w	ip, [r3, #12]
 80061c4:	f8c3 c008 	str.w	ip, [r3, #8]
 80061c8:	5059      	str	r1, [r3, r1]
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 f904 	bl	80063d8 <__malloc_unlock>
 80061d0:	3708      	adds	r7, #8
 80061d2:	e5f8      	b.n	8005dc6 <_malloc_r+0x5e>
 80061d4:	f108 0801 	add.w	r8, r8, #1
 80061d8:	3708      	adds	r7, #8
 80061da:	f018 0f03 	tst.w	r8, #3
 80061de:	f47f ae63 	bne.w	8005ea8 <_malloc_r+0x140>
 80061e2:	464b      	mov	r3, r9
 80061e4:	f01e 0f03 	tst.w	lr, #3
 80061e8:	f1a3 0208 	sub.w	r2, r3, #8
 80061ec:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80061f0:	d062      	beq.n	80062b8 <_malloc_r+0x550>
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d0f5      	beq.n	80061e4 <_malloc_r+0x47c>
 80061f8:	6873      	ldr	r3, [r6, #4]
 80061fa:	0040      	lsls	r0, r0, #1
 80061fc:	4298      	cmp	r0, r3
 80061fe:	f63f aec7 	bhi.w	8005f90 <_malloc_r+0x228>
 8006202:	2800      	cmp	r0, #0
 8006204:	f43f aec4 	beq.w	8005f90 <_malloc_r+0x228>
 8006208:	4218      	tst	r0, r3
 800620a:	d05a      	beq.n	80062c2 <_malloc_r+0x55a>
 800620c:	46c6      	mov	lr, r8
 800620e:	e647      	b.n	8005ea0 <_malloc_r+0x138>
 8006210:	f107 0308 	add.w	r3, r7, #8
 8006214:	697f      	ldr	r7, [r7, #20]
 8006216:	42bb      	cmp	r3, r7
 8006218:	bf08      	it	eq
 800621a:	f10e 0e02 	addeq.w	lr, lr, #2
 800621e:	f43f ae03 	beq.w	8005e28 <_malloc_r+0xc0>
 8006222:	e5c0      	b.n	8005da6 <_malloc_r+0x3e>
 8006224:	1859      	adds	r1, r3, r1
 8006226:	461f      	mov	r7, r3
 8006228:	6848      	ldr	r0, [r1, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8006230:	f040 0001 	orr.w	r0, r0, #1
 8006234:	6048      	str	r0, [r1, #4]
 8006236:	60d3      	str	r3, [r2, #12]
 8006238:	609a      	str	r2, [r3, #8]
 800623a:	4628      	mov	r0, r5
 800623c:	f000 f8cc 	bl	80063d8 <__malloc_unlock>
 8006240:	e5c1      	b.n	8005dc6 <_malloc_r+0x5e>
 8006242:	42b7      	cmp	r7, r6
 8006244:	f43f aed7 	beq.w	8005ff6 <_malloc_r+0x28e>
 8006248:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <_malloc_r+0x518>)
 800624a:	689f      	ldr	r7, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f023 0303 	bic.w	r3, r3, #3
 8006252:	e735      	b.n	80060c0 <_malloc_r+0x358>
 8006254:	684b      	ldr	r3, [r1, #4]
 8006256:	ea4f 08a8 	mov.w	r8, r8, asr #2
 800625a:	2001      	movs	r0, #1
 800625c:	fa00 f008 	lsl.w	r0, r0, r8
 8006260:	4303      	orrs	r3, r0
 8006262:	604b      	str	r3, [r1, #4]
 8006264:	4611      	mov	r1, r2
 8006266:	e79d      	b.n	80061a4 <_malloc_r+0x43c>
 8006268:	2301      	movs	r3, #1
 800626a:	f8c9 3004 	str.w	r3, [r9, #4]
 800626e:	464f      	mov	r7, r9
 8006270:	2300      	movs	r3, #0
 8006272:	e725      	b.n	80060c0 <_malloc_r+0x358>
 8006274:	68b7      	ldr	r7, [r6, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f023 0303 	bic.w	r3, r3, #3
 800627c:	e720      	b.n	80060c0 <_malloc_r+0x358>
 800627e:	bf00      	nop
 8006280:	200005b4 	.word	0x200005b4
 8006284:	200009dc 	.word	0x200009dc
 8006288:	0511      	lsls	r1, r2, #20
 800628a:	0d09      	lsrs	r1, r1, #20
 800628c:	2900      	cmp	r1, #0
 800628e:	f47f aeba 	bne.w	8006006 <_malloc_r+0x29e>
 8006292:	68b2      	ldr	r2, [r6, #8]
 8006294:	eb0b 0108 	add.w	r1, fp, r8
 8006298:	f041 0101 	orr.w	r1, r1, #1
 800629c:	6051      	str	r1, [r2, #4]
 800629e:	e6ff      	b.n	80060a0 <_malloc_r+0x338>
 80062a0:	2201      	movs	r2, #1
 80062a2:	f04f 0b00 	mov.w	fp, #0
 80062a6:	e6da      	b.n	800605e <_malloc_r+0x2f6>
 80062a8:	4628      	mov	r0, r5
 80062aa:	f107 0108 	add.w	r1, r7, #8
 80062ae:	f7ff fc4f 	bl	8005b50 <_free_r>
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <_malloc_r+0x564>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	e6f3      	b.n	80060a0 <_malloc_r+0x338>
 80062b8:	6873      	ldr	r3, [r6, #4]
 80062ba:	ea23 0300 	bic.w	r3, r3, r0
 80062be:	6073      	str	r3, [r6, #4]
 80062c0:	e79b      	b.n	80061fa <_malloc_r+0x492>
 80062c2:	0040      	lsls	r0, r0, #1
 80062c4:	f108 0804 	add.w	r8, r8, #4
 80062c8:	e79e      	b.n	8006208 <_malloc_r+0x4a0>
 80062ca:	bf00      	nop
 80062cc:	200009dc 	.word	0x200009dc

080062d0 <memchr>:
 80062d0:	0783      	lsls	r3, r0, #30
 80062d2:	b470      	push	{r4, r5, r6}
 80062d4:	b2c9      	uxtb	r1, r1
 80062d6:	d00f      	beq.n	80062f8 <memchr+0x28>
 80062d8:	2a00      	cmp	r2, #0
 80062da:	d033      	beq.n	8006344 <memchr+0x74>
 80062dc:	7803      	ldrb	r3, [r0, #0]
 80062de:	3a01      	subs	r2, #1
 80062e0:	428b      	cmp	r3, r1
 80062e2:	d106      	bne.n	80062f2 <memchr+0x22>
 80062e4:	e01d      	b.n	8006322 <memchr+0x52>
 80062e6:	2a00      	cmp	r2, #0
 80062e8:	d02c      	beq.n	8006344 <memchr+0x74>
 80062ea:	7803      	ldrb	r3, [r0, #0]
 80062ec:	3a01      	subs	r2, #1
 80062ee:	428b      	cmp	r3, r1
 80062f0:	d017      	beq.n	8006322 <memchr+0x52>
 80062f2:	3001      	adds	r0, #1
 80062f4:	0783      	lsls	r3, r0, #30
 80062f6:	d1f6      	bne.n	80062e6 <memchr+0x16>
 80062f8:	2a03      	cmp	r2, #3
 80062fa:	bf84      	itt	hi
 80062fc:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8006300:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 8006304:	d80f      	bhi.n	8006326 <memchr+0x56>
 8006306:	b1ea      	cbz	r2, 8006344 <memchr+0x74>
 8006308:	7803      	ldrb	r3, [r0, #0]
 800630a:	3a01      	subs	r2, #1
 800630c:	428b      	cmp	r3, r1
 800630e:	4402      	add	r2, r0
 8006310:	d104      	bne.n	800631c <memchr+0x4c>
 8006312:	e006      	b.n	8006322 <memchr+0x52>
 8006314:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006318:	428b      	cmp	r3, r1
 800631a:	d002      	beq.n	8006322 <memchr+0x52>
 800631c:	4290      	cmp	r0, r2
 800631e:	d1f9      	bne.n	8006314 <memchr+0x44>
 8006320:	2000      	movs	r0, #0
 8006322:	bc70      	pop	{r4, r5, r6}
 8006324:	4770      	bx	lr
 8006326:	4604      	mov	r4, r0
 8006328:	3004      	adds	r0, #4
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	4073      	eors	r3, r6
 800632e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 8006332:	ea25 0303 	bic.w	r3, r5, r3
 8006336:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800633a:	d105      	bne.n	8006348 <memchr+0x78>
 800633c:	3a04      	subs	r2, #4
 800633e:	2a03      	cmp	r2, #3
 8006340:	d8f1      	bhi.n	8006326 <memchr+0x56>
 8006342:	e7e0      	b.n	8006306 <memchr+0x36>
 8006344:	4610      	mov	r0, r2
 8006346:	e7ec      	b.n	8006322 <memchr+0x52>
 8006348:	4620      	mov	r0, r4
 800634a:	e7dc      	b.n	8006306 <memchr+0x36>

0800634c <memcpy>:
 800634c:	2a0f      	cmp	r2, #15
 800634e:	b4f0      	push	{r4, r5, r6, r7}
 8006350:	bf98      	it	ls
 8006352:	4603      	movls	r3, r0
 8006354:	d931      	bls.n	80063ba <memcpy+0x6e>
 8006356:	ea41 0300 	orr.w	r3, r1, r0
 800635a:	079b      	lsls	r3, r3, #30
 800635c:	d137      	bne.n	80063ce <memcpy+0x82>
 800635e:	460c      	mov	r4, r1
 8006360:	4603      	mov	r3, r0
 8006362:	4615      	mov	r5, r2
 8006364:	6826      	ldr	r6, [r4, #0]
 8006366:	601e      	str	r6, [r3, #0]
 8006368:	6866      	ldr	r6, [r4, #4]
 800636a:	605e      	str	r6, [r3, #4]
 800636c:	68a6      	ldr	r6, [r4, #8]
 800636e:	609e      	str	r6, [r3, #8]
 8006370:	68e6      	ldr	r6, [r4, #12]
 8006372:	3d10      	subs	r5, #16
 8006374:	60de      	str	r6, [r3, #12]
 8006376:	3410      	adds	r4, #16
 8006378:	3310      	adds	r3, #16
 800637a:	2d0f      	cmp	r5, #15
 800637c:	d8f2      	bhi.n	8006364 <memcpy+0x18>
 800637e:	f1a2 0410 	sub.w	r4, r2, #16
 8006382:	f024 040f 	bic.w	r4, r4, #15
 8006386:	f002 020f 	and.w	r2, r2, #15
 800638a:	3410      	adds	r4, #16
 800638c:	2a03      	cmp	r2, #3
 800638e:	eb00 0304 	add.w	r3, r0, r4
 8006392:	4421      	add	r1, r4
 8006394:	d911      	bls.n	80063ba <memcpy+0x6e>
 8006396:	1f0e      	subs	r6, r1, #4
 8006398:	461d      	mov	r5, r3
 800639a:	4614      	mov	r4, r2
 800639c:	f856 7f04 	ldr.w	r7, [r6, #4]!
 80063a0:	3c04      	subs	r4, #4
 80063a2:	2c03      	cmp	r4, #3
 80063a4:	f845 7b04 	str.w	r7, [r5], #4
 80063a8:	d8f8      	bhi.n	800639c <memcpy+0x50>
 80063aa:	1f14      	subs	r4, r2, #4
 80063ac:	f024 0403 	bic.w	r4, r4, #3
 80063b0:	3404      	adds	r4, #4
 80063b2:	f002 0203 	and.w	r2, r2, #3
 80063b6:	1909      	adds	r1, r1, r4
 80063b8:	191b      	adds	r3, r3, r4
 80063ba:	b132      	cbz	r2, 80063ca <memcpy+0x7e>
 80063bc:	3901      	subs	r1, #1
 80063be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80063c2:	3a01      	subs	r2, #1
 80063c4:	f803 4b01 	strb.w	r4, [r3], #1
 80063c8:	d1f9      	bne.n	80063be <memcpy+0x72>
 80063ca:	bcf0      	pop	{r4, r5, r6, r7}
 80063cc:	4770      	bx	lr
 80063ce:	4603      	mov	r3, r0
 80063d0:	e7f4      	b.n	80063bc <memcpy+0x70>
 80063d2:	bf00      	nop

080063d4 <__malloc_lock>:
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop

080063d8 <__malloc_unlock>:
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop

080063dc <_Balloc>:
 80063dc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80063de:	b570      	push	{r4, r5, r6, lr}
 80063e0:	4605      	mov	r5, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	b14b      	cbz	r3, 80063fa <_Balloc+0x1e>
 80063e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80063ea:	b178      	cbz	r0, 800640c <_Balloc+0x30>
 80063ec:	6802      	ldr	r2, [r0, #0]
 80063ee:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80063f2:	2300      	movs	r3, #0
 80063f4:	6103      	str	r3, [r0, #16]
 80063f6:	60c3      	str	r3, [r0, #12]
 80063f8:	bd70      	pop	{r4, r5, r6, pc}
 80063fa:	2104      	movs	r1, #4
 80063fc:	2221      	movs	r2, #33	; 0x21
 80063fe:	f001 fa7f 	bl	8007900 <_calloc_r>
 8006402:	4603      	mov	r3, r0
 8006404:	64e8      	str	r0, [r5, #76]	; 0x4c
 8006406:	2800      	cmp	r0, #0
 8006408:	d1ed      	bne.n	80063e6 <_Balloc+0xa>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	2101      	movs	r1, #1
 800640e:	fa11 f604 	lsls.w	r6, r1, r4
 8006412:	1d72      	adds	r2, r6, #5
 8006414:	4628      	mov	r0, r5
 8006416:	0092      	lsls	r2, r2, #2
 8006418:	f001 fa72 	bl	8007900 <_calloc_r>
 800641c:	2800      	cmp	r0, #0
 800641e:	d0f4      	beq.n	800640a <_Balloc+0x2e>
 8006420:	6044      	str	r4, [r0, #4]
 8006422:	6086      	str	r6, [r0, #8]
 8006424:	e7e5      	b.n	80063f2 <_Balloc+0x16>
 8006426:	bf00      	nop

08006428 <_Bfree>:
 8006428:	b131      	cbz	r1, 8006438 <_Bfree+0x10>
 800642a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800642c:	684a      	ldr	r2, [r1, #4]
 800642e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006432:	6008      	str	r0, [r1, #0]
 8006434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop

0800643c <__multadd>:
 800643c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643e:	460d      	mov	r5, r1
 8006440:	4606      	mov	r6, r0
 8006442:	690c      	ldr	r4, [r1, #16]
 8006444:	f101 0014 	add.w	r0, r1, #20
 8006448:	b083      	sub	sp, #12
 800644a:	2100      	movs	r1, #0
 800644c:	6807      	ldr	r7, [r0, #0]
 800644e:	fa1f fc87 	uxth.w	ip, r7
 8006452:	0c3f      	lsrs	r7, r7, #16
 8006454:	fb02 330c 	mla	r3, r2, ip, r3
 8006458:	fb02 f707 	mul.w	r7, r2, r7
 800645c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006460:	b29b      	uxth	r3, r3
 8006462:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 8006466:	3101      	adds	r1, #1
 8006468:	f840 3b04 	str.w	r3, [r0], #4
 800646c:	0c3b      	lsrs	r3, r7, #16
 800646e:	428c      	cmp	r4, r1
 8006470:	dcec      	bgt.n	800644c <__multadd+0x10>
 8006472:	b13b      	cbz	r3, 8006484 <__multadd+0x48>
 8006474:	68aa      	ldr	r2, [r5, #8]
 8006476:	4294      	cmp	r4, r2
 8006478:	da07      	bge.n	800648a <__multadd+0x4e>
 800647a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800647e:	3401      	adds	r4, #1
 8006480:	6153      	str	r3, [r2, #20]
 8006482:	612c      	str	r4, [r5, #16]
 8006484:	4628      	mov	r0, r5
 8006486:	b003      	add	sp, #12
 8006488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648a:	6869      	ldr	r1, [r5, #4]
 800648c:	9301      	str	r3, [sp, #4]
 800648e:	3101      	adds	r1, #1
 8006490:	4630      	mov	r0, r6
 8006492:	f7ff ffa3 	bl	80063dc <_Balloc>
 8006496:	692a      	ldr	r2, [r5, #16]
 8006498:	3202      	adds	r2, #2
 800649a:	f105 010c 	add.w	r1, r5, #12
 800649e:	4607      	mov	r7, r0
 80064a0:	0092      	lsls	r2, r2, #2
 80064a2:	f100 000c 	add.w	r0, r0, #12
 80064a6:	f7ff ff51 	bl	800634c <memcpy>
 80064aa:	6869      	ldr	r1, [r5, #4]
 80064ac:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80064b4:	6028      	str	r0, [r5, #0]
 80064b6:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80064ba:	463d      	mov	r5, r7
 80064bc:	e7dd      	b.n	800647a <__multadd+0x3e>
 80064be:	bf00      	nop

080064c0 <__s2b>:
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	461e      	mov	r6, r3
 80064c6:	f648 6339 	movw	r3, #36409	; 0x8e39
 80064ca:	f106 0408 	add.w	r4, r6, #8
 80064ce:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 80064d2:	fb83 5304 	smull	r5, r3, r3, r4
 80064d6:	17e4      	asrs	r4, r4, #31
 80064d8:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 80064dc:	460f      	mov	r7, r1
 80064de:	2100      	movs	r1, #0
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	4604      	mov	r4, r0
 80064e4:	4690      	mov	r8, r2
 80064e6:	dd05      	ble.n	80064f4 <__s2b+0x34>
 80064e8:	2201      	movs	r2, #1
 80064ea:	2100      	movs	r1, #0
 80064ec:	0052      	lsls	r2, r2, #1
 80064ee:	3101      	adds	r1, #1
 80064f0:	4293      	cmp	r3, r2
 80064f2:	dcfb      	bgt.n	80064ec <__s2b+0x2c>
 80064f4:	4620      	mov	r0, r4
 80064f6:	f7ff ff71 	bl	80063dc <_Balloc>
 80064fa:	9b08      	ldr	r3, [sp, #32]
 80064fc:	6143      	str	r3, [r0, #20]
 80064fe:	2301      	movs	r3, #1
 8006500:	f1b8 0f09 	cmp.w	r8, #9
 8006504:	4601      	mov	r1, r0
 8006506:	6103      	str	r3, [r0, #16]
 8006508:	dd23      	ble.n	8006552 <__s2b+0x92>
 800650a:	f107 0909 	add.w	r9, r7, #9
 800650e:	464d      	mov	r5, r9
 8006510:	4447      	add	r7, r8
 8006512:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006516:	220a      	movs	r2, #10
 8006518:	3b30      	subs	r3, #48	; 0x30
 800651a:	4620      	mov	r0, r4
 800651c:	f7ff ff8e 	bl	800643c <__multadd>
 8006520:	42bd      	cmp	r5, r7
 8006522:	4601      	mov	r1, r0
 8006524:	d1f5      	bne.n	8006512 <__s2b+0x52>
 8006526:	eb09 0708 	add.w	r7, r9, r8
 800652a:	3f08      	subs	r7, #8
 800652c:	4546      	cmp	r6, r8
 800652e:	dd0d      	ble.n	800654c <__s2b+0x8c>
 8006530:	ebc8 0707 	rsb	r7, r8, r7
 8006534:	f817 3008 	ldrb.w	r3, [r7, r8]
 8006538:	220a      	movs	r2, #10
 800653a:	3b30      	subs	r3, #48	; 0x30
 800653c:	4620      	mov	r0, r4
 800653e:	f7ff ff7d 	bl	800643c <__multadd>
 8006542:	f108 0801 	add.w	r8, r8, #1
 8006546:	45b0      	cmp	r8, r6
 8006548:	4601      	mov	r1, r0
 800654a:	d1f3      	bne.n	8006534 <__s2b+0x74>
 800654c:	4608      	mov	r0, r1
 800654e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006552:	370a      	adds	r7, #10
 8006554:	f04f 0809 	mov.w	r8, #9
 8006558:	e7e8      	b.n	800652c <__s2b+0x6c>
 800655a:	bf00      	nop

0800655c <__hi0bits>:
 800655c:	4603      	mov	r3, r0
 800655e:	2000      	movs	r0, #0
 8006560:	0c1a      	lsrs	r2, r3, #16
 8006562:	d101      	bne.n	8006568 <__hi0bits+0xc>
 8006564:	041b      	lsls	r3, r3, #16
 8006566:	2010      	movs	r0, #16
 8006568:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800656c:	d101      	bne.n	8006572 <__hi0bits+0x16>
 800656e:	3008      	adds	r0, #8
 8006570:	021b      	lsls	r3, r3, #8
 8006572:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006576:	d101      	bne.n	800657c <__hi0bits+0x20>
 8006578:	3004      	adds	r0, #4
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006580:	d101      	bne.n	8006586 <__hi0bits+0x2a>
 8006582:	3002      	adds	r0, #2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	db02      	blt.n	8006590 <__hi0bits+0x34>
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	d401      	bmi.n	8006592 <__hi0bits+0x36>
 800658e:	2020      	movs	r0, #32
 8006590:	4770      	bx	lr
 8006592:	3001      	adds	r0, #1
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop

08006598 <__lo0bits>:
 8006598:	6803      	ldr	r3, [r0, #0]
 800659a:	4602      	mov	r2, r0
 800659c:	f013 0007 	ands.w	r0, r3, #7
 80065a0:	d007      	beq.n	80065b2 <__lo0bits+0x1a>
 80065a2:	07d9      	lsls	r1, r3, #31
 80065a4:	d41f      	bmi.n	80065e6 <__lo0bits+0x4e>
 80065a6:	0798      	lsls	r0, r3, #30
 80065a8:	d41f      	bmi.n	80065ea <__lo0bits+0x52>
 80065aa:	089b      	lsrs	r3, r3, #2
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	2002      	movs	r0, #2
 80065b0:	4770      	bx	lr
 80065b2:	b299      	uxth	r1, r3
 80065b4:	b909      	cbnz	r1, 80065ba <__lo0bits+0x22>
 80065b6:	0c1b      	lsrs	r3, r3, #16
 80065b8:	2010      	movs	r0, #16
 80065ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80065be:	d101      	bne.n	80065c4 <__lo0bits+0x2c>
 80065c0:	3008      	adds	r0, #8
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	0719      	lsls	r1, r3, #28
 80065c6:	d101      	bne.n	80065cc <__lo0bits+0x34>
 80065c8:	3004      	adds	r0, #4
 80065ca:	091b      	lsrs	r3, r3, #4
 80065cc:	0799      	lsls	r1, r3, #30
 80065ce:	d101      	bne.n	80065d4 <__lo0bits+0x3c>
 80065d0:	3002      	adds	r0, #2
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	07d9      	lsls	r1, r3, #31
 80065d6:	d404      	bmi.n	80065e2 <__lo0bits+0x4a>
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	d101      	bne.n	80065e0 <__lo0bits+0x48>
 80065dc:	2020      	movs	r0, #32
 80065de:	4770      	bx	lr
 80065e0:	3001      	adds	r0, #1
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	4770      	bx	lr
 80065e6:	2000      	movs	r0, #0
 80065e8:	4770      	bx	lr
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	2001      	movs	r0, #1
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop

080065f4 <__i2b>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	460c      	mov	r4, r1
 80065f8:	2101      	movs	r1, #1
 80065fa:	f7ff feef 	bl	80063dc <_Balloc>
 80065fe:	2201      	movs	r2, #1
 8006600:	6144      	str	r4, [r0, #20]
 8006602:	6102      	str	r2, [r0, #16]
 8006604:	bd10      	pop	{r4, pc}
 8006606:	bf00      	nop

08006608 <__multiply>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	690f      	ldr	r7, [r1, #16]
 800660e:	6916      	ldr	r6, [r2, #16]
 8006610:	42b7      	cmp	r7, r6
 8006612:	b085      	sub	sp, #20
 8006614:	460d      	mov	r5, r1
 8006616:	4692      	mov	sl, r2
 8006618:	da04      	bge.n	8006624 <__multiply+0x1c>
 800661a:	463a      	mov	r2, r7
 800661c:	4655      	mov	r5, sl
 800661e:	4637      	mov	r7, r6
 8006620:	468a      	mov	sl, r1
 8006622:	4616      	mov	r6, r2
 8006624:	68ab      	ldr	r3, [r5, #8]
 8006626:	6869      	ldr	r1, [r5, #4]
 8006628:	19bc      	adds	r4, r7, r6
 800662a:	429c      	cmp	r4, r3
 800662c:	bfc8      	it	gt
 800662e:	3101      	addgt	r1, #1
 8006630:	f7ff fed4 	bl	80063dc <_Balloc>
 8006634:	1d21      	adds	r1, r4, #4
 8006636:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 800663a:	f100 0914 	add.w	r9, r0, #20
 800663e:	f10b 0b04 	add.w	fp, fp, #4
 8006642:	45d9      	cmp	r9, fp
 8006644:	9000      	str	r0, [sp, #0]
 8006646:	9101      	str	r1, [sp, #4]
 8006648:	d205      	bcs.n	8006656 <__multiply+0x4e>
 800664a:	464b      	mov	r3, r9
 800664c:	2200      	movs	r2, #0
 800664e:	f843 2b04 	str.w	r2, [r3], #4
 8006652:	459b      	cmp	fp, r3
 8006654:	d8fb      	bhi.n	800664e <__multiply+0x46>
 8006656:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 800665a:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800665e:	f10a 0a14 	add.w	sl, sl, #20
 8006662:	f106 0814 	add.w	r8, r6, #20
 8006666:	3514      	adds	r5, #20
 8006668:	3714      	adds	r7, #20
 800666a:	45c2      	cmp	sl, r8
 800666c:	d24f      	bcs.n	800670e <__multiply+0x106>
 800666e:	f8cd b008 	str.w	fp, [sp, #8]
 8006672:	9403      	str	r4, [sp, #12]
 8006674:	46ab      	mov	fp, r5
 8006676:	f85a 5b04 	ldr.w	r5, [sl], #4
 800667a:	b2ac      	uxth	r4, r5
 800667c:	b1e4      	cbz	r4, 80066b8 <__multiply+0xb0>
 800667e:	465a      	mov	r2, fp
 8006680:	464b      	mov	r3, r9
 8006682:	2100      	movs	r1, #0
 8006684:	f852 6b04 	ldr.w	r6, [r2], #4
 8006688:	681d      	ldr	r5, [r3, #0]
 800668a:	b2b0      	uxth	r0, r6
 800668c:	fa11 f185 	uxtah	r1, r1, r5
 8006690:	0c36      	lsrs	r6, r6, #16
 8006692:	0c2d      	lsrs	r5, r5, #16
 8006694:	fb04 1000 	mla	r0, r4, r0, r1
 8006698:	fb04 5106 	mla	r1, r4, r6, r5
 800669c:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 80066a0:	b280      	uxth	r0, r0
 80066a2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80066a6:	0c09      	lsrs	r1, r1, #16
 80066a8:	4297      	cmp	r7, r2
 80066aa:	461d      	mov	r5, r3
 80066ac:	f843 0b04 	str.w	r0, [r3], #4
 80066b0:	d8e8      	bhi.n	8006684 <__multiply+0x7c>
 80066b2:	6069      	str	r1, [r5, #4]
 80066b4:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 80066b8:	0c2d      	lsrs	r5, r5, #16
 80066ba:	d021      	beq.n	8006700 <__multiply+0xf8>
 80066bc:	f8d9 6000 	ldr.w	r6, [r9]
 80066c0:	465b      	mov	r3, fp
 80066c2:	4630      	mov	r0, r6
 80066c4:	4649      	mov	r1, r9
 80066c6:	f04f 0c00 	mov.w	ip, #0
 80066ca:	e000      	b.n	80066ce <__multiply+0xc6>
 80066cc:	4611      	mov	r1, r2
 80066ce:	881a      	ldrh	r2, [r3, #0]
 80066d0:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 80066d4:	fb05 cc02 	mla	ip, r5, r2, ip
 80066d8:	b2b6      	uxth	r6, r6
 80066da:	460a      	mov	r2, r1
 80066dc:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80066e0:	f842 6b04 	str.w	r6, [r2], #4
 80066e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80066e8:	6848      	ldr	r0, [r1, #4]
 80066ea:	0c36      	lsrs	r6, r6, #16
 80066ec:	b284      	uxth	r4, r0
 80066ee:	fb05 4606 	mla	r6, r5, r6, r4
 80066f2:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 80066f6:	429f      	cmp	r7, r3
 80066f8:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 80066fc:	d8e6      	bhi.n	80066cc <__multiply+0xc4>
 80066fe:	604e      	str	r6, [r1, #4]
 8006700:	45d0      	cmp	r8, sl
 8006702:	f109 0904 	add.w	r9, r9, #4
 8006706:	d8b6      	bhi.n	8006676 <__multiply+0x6e>
 8006708:	f8dd b008 	ldr.w	fp, [sp, #8]
 800670c:	9c03      	ldr	r4, [sp, #12]
 800670e:	2c00      	cmp	r4, #0
 8006710:	dd0c      	ble.n	800672c <__multiply+0x124>
 8006712:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8006716:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800671a:	b93b      	cbnz	r3, 800672c <__multiply+0x124>
 800671c:	f1ab 0b04 	sub.w	fp, fp, #4
 8006720:	e002      	b.n	8006728 <__multiply+0x120>
 8006722:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 8006726:	b90b      	cbnz	r3, 800672c <__multiply+0x124>
 8006728:	3c01      	subs	r4, #1
 800672a:	d1fa      	bne.n	8006722 <__multiply+0x11a>
 800672c:	9a00      	ldr	r2, [sp, #0]
 800672e:	6114      	str	r4, [r2, #16]
 8006730:	4610      	mov	r0, r2
 8006732:	b005      	add	sp, #20
 8006734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006738 <__pow5mult>:
 8006738:	f012 0303 	ands.w	r3, r2, #3
 800673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006740:	4615      	mov	r5, r2
 8006742:	4604      	mov	r4, r0
 8006744:	4688      	mov	r8, r1
 8006746:	d12d      	bne.n	80067a4 <__pow5mult+0x6c>
 8006748:	10ad      	asrs	r5, r5, #2
 800674a:	d01d      	beq.n	8006788 <__pow5mult+0x50>
 800674c:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800674e:	b92f      	cbnz	r7, 800675c <__pow5mult+0x24>
 8006750:	e031      	b.n	80067b6 <__pow5mult+0x7e>
 8006752:	106d      	asrs	r5, r5, #1
 8006754:	d018      	beq.n	8006788 <__pow5mult+0x50>
 8006756:	683e      	ldr	r6, [r7, #0]
 8006758:	b1ce      	cbz	r6, 800678e <__pow5mult+0x56>
 800675a:	4637      	mov	r7, r6
 800675c:	07e8      	lsls	r0, r5, #31
 800675e:	d5f8      	bpl.n	8006752 <__pow5mult+0x1a>
 8006760:	4641      	mov	r1, r8
 8006762:	463a      	mov	r2, r7
 8006764:	4620      	mov	r0, r4
 8006766:	f7ff ff4f 	bl	8006608 <__multiply>
 800676a:	f1b8 0f00 	cmp.w	r8, #0
 800676e:	d017      	beq.n	80067a0 <__pow5mult+0x68>
 8006770:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006774:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006776:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800677a:	106d      	asrs	r5, r5, #1
 800677c:	f8c8 1000 	str.w	r1, [r8]
 8006780:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 8006784:	4680      	mov	r8, r0
 8006786:	d1e6      	bne.n	8006756 <__pow5mult+0x1e>
 8006788:	4640      	mov	r0, r8
 800678a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800678e:	4639      	mov	r1, r7
 8006790:	463a      	mov	r2, r7
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff ff38 	bl	8006608 <__multiply>
 8006798:	6038      	str	r0, [r7, #0]
 800679a:	6006      	str	r6, [r0, #0]
 800679c:	4607      	mov	r7, r0
 800679e:	e7dd      	b.n	800675c <__pow5mult+0x24>
 80067a0:	4680      	mov	r8, r0
 80067a2:	e7d6      	b.n	8006752 <__pow5mult+0x1a>
 80067a4:	1e5e      	subs	r6, r3, #1
 80067a6:	4a09      	ldr	r2, [pc, #36]	; (80067cc <__pow5mult+0x94>)
 80067a8:	2300      	movs	r3, #0
 80067aa:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80067ae:	f7ff fe45 	bl	800643c <__multadd>
 80067b2:	4680      	mov	r8, r0
 80067b4:	e7c8      	b.n	8006748 <__pow5mult+0x10>
 80067b6:	4620      	mov	r0, r4
 80067b8:	f240 2171 	movw	r1, #625	; 0x271
 80067bc:	f7ff ff1a 	bl	80065f4 <__i2b>
 80067c0:	2300      	movs	r3, #0
 80067c2:	64a0      	str	r0, [r4, #72]	; 0x48
 80067c4:	4607      	mov	r7, r0
 80067c6:	6003      	str	r3, [r0, #0]
 80067c8:	e7c8      	b.n	800675c <__pow5mult+0x24>
 80067ca:	bf00      	nop
 80067cc:	08008b48 	.word	0x08008b48

080067d0 <__lshift>:
 80067d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	4691      	mov	r9, r2
 80067d6:	690a      	ldr	r2, [r1, #16]
 80067d8:	688b      	ldr	r3, [r1, #8]
 80067da:	ea4f 1769 	mov.w	r7, r9, asr #5
 80067de:	eb07 0b02 	add.w	fp, r7, r2
 80067e2:	f10b 0501 	add.w	r5, fp, #1
 80067e6:	429d      	cmp	r5, r3
 80067e8:	460c      	mov	r4, r1
 80067ea:	4606      	mov	r6, r0
 80067ec:	6849      	ldr	r1, [r1, #4]
 80067ee:	dd03      	ble.n	80067f8 <__lshift+0x28>
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	3101      	adds	r1, #1
 80067f4:	429d      	cmp	r5, r3
 80067f6:	dcfb      	bgt.n	80067f0 <__lshift+0x20>
 80067f8:	4630      	mov	r0, r6
 80067fa:	f7ff fdef 	bl	80063dc <_Balloc>
 80067fe:	2f00      	cmp	r7, #0
 8006800:	f100 0314 	add.w	r3, r0, #20
 8006804:	dd09      	ble.n	800681a <__lshift+0x4a>
 8006806:	2200      	movs	r2, #0
 8006808:	4611      	mov	r1, r2
 800680a:	3201      	adds	r2, #1
 800680c:	42ba      	cmp	r2, r7
 800680e:	f843 1b04 	str.w	r1, [r3], #4
 8006812:	d1fa      	bne.n	800680a <__lshift+0x3a>
 8006814:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006818:	3314      	adds	r3, #20
 800681a:	6922      	ldr	r2, [r4, #16]
 800681c:	f019 091f 	ands.w	r9, r9, #31
 8006820:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8006824:	f104 0114 	add.w	r1, r4, #20
 8006828:	f10c 0c14 	add.w	ip, ip, #20
 800682c:	d022      	beq.n	8006874 <__lshift+0xa4>
 800682e:	f1c9 0a20 	rsb	sl, r9, #32
 8006832:	2200      	movs	r2, #0
 8006834:	e000      	b.n	8006838 <__lshift+0x68>
 8006836:	463b      	mov	r3, r7
 8006838:	f8d1 8000 	ldr.w	r8, [r1]
 800683c:	461f      	mov	r7, r3
 800683e:	fa08 f809 	lsl.w	r8, r8, r9
 8006842:	ea48 0202 	orr.w	r2, r8, r2
 8006846:	f847 2b04 	str.w	r2, [r7], #4
 800684a:	f851 2b04 	ldr.w	r2, [r1], #4
 800684e:	458c      	cmp	ip, r1
 8006850:	fa22 f20a 	lsr.w	r2, r2, sl
 8006854:	d8ef      	bhi.n	8006836 <__lshift+0x66>
 8006856:	605a      	str	r2, [r3, #4]
 8006858:	b10a      	cbz	r2, 800685e <__lshift+0x8e>
 800685a:	f10b 0502 	add.w	r5, fp, #2
 800685e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006860:	6862      	ldr	r2, [r4, #4]
 8006862:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006866:	3d01      	subs	r5, #1
 8006868:	6105      	str	r5, [r0, #16]
 800686a:	6021      	str	r1, [r4, #0]
 800686c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006870:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006874:	f851 2b04 	ldr.w	r2, [r1], #4
 8006878:	458c      	cmp	ip, r1
 800687a:	f843 2b04 	str.w	r2, [r3], #4
 800687e:	d9ee      	bls.n	800685e <__lshift+0x8e>
 8006880:	f851 2b04 	ldr.w	r2, [r1], #4
 8006884:	458c      	cmp	ip, r1
 8006886:	f843 2b04 	str.w	r2, [r3], #4
 800688a:	d8f3      	bhi.n	8006874 <__lshift+0xa4>
 800688c:	e7e7      	b.n	800685e <__lshift+0x8e>
 800688e:	bf00      	nop

08006890 <__mcmp>:
 8006890:	4603      	mov	r3, r0
 8006892:	690a      	ldr	r2, [r1, #16]
 8006894:	6900      	ldr	r0, [r0, #16]
 8006896:	1a80      	subs	r0, r0, r2
 8006898:	b430      	push	{r4, r5}
 800689a:	d111      	bne.n	80068c0 <__mcmp+0x30>
 800689c:	3204      	adds	r2, #4
 800689e:	0094      	lsls	r4, r2, #2
 80068a0:	191a      	adds	r2, r3, r4
 80068a2:	1909      	adds	r1, r1, r4
 80068a4:	3314      	adds	r3, #20
 80068a6:	3204      	adds	r2, #4
 80068a8:	3104      	adds	r1, #4
 80068aa:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80068ae:	f851 4c04 	ldr.w	r4, [r1, #-4]
 80068b2:	3a04      	subs	r2, #4
 80068b4:	42a5      	cmp	r5, r4
 80068b6:	f1a1 0104 	sub.w	r1, r1, #4
 80068ba:	d103      	bne.n	80068c4 <__mcmp+0x34>
 80068bc:	4293      	cmp	r3, r2
 80068be:	d3f4      	bcc.n	80068aa <__mcmp+0x1a>
 80068c0:	bc30      	pop	{r4, r5}
 80068c2:	4770      	bx	lr
 80068c4:	bf38      	it	cc
 80068c6:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 80068ca:	d3f9      	bcc.n	80068c0 <__mcmp+0x30>
 80068cc:	2001      	movs	r0, #1
 80068ce:	e7f7      	b.n	80068c0 <__mcmp+0x30>

080068d0 <__mdiff>:
 80068d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d4:	460c      	mov	r4, r1
 80068d6:	4606      	mov	r6, r0
 80068d8:	4611      	mov	r1, r2
 80068da:	4620      	mov	r0, r4
 80068dc:	4615      	mov	r5, r2
 80068de:	f7ff ffd7 	bl	8006890 <__mcmp>
 80068e2:	1e07      	subs	r7, r0, #0
 80068e4:	d058      	beq.n	8006998 <__mdiff+0xc8>
 80068e6:	db52      	blt.n	800698e <__mdiff+0xbe>
 80068e8:	2700      	movs	r7, #0
 80068ea:	4630      	mov	r0, r6
 80068ec:	6861      	ldr	r1, [r4, #4]
 80068ee:	f7ff fd75 	bl	80063dc <_Balloc>
 80068f2:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80068f6:	692b      	ldr	r3, [r5, #16]
 80068f8:	60c7      	str	r7, [r0, #12]
 80068fa:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 80068fe:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 8006902:	3714      	adds	r7, #20
 8006904:	f108 0814 	add.w	r8, r8, #20
 8006908:	3414      	adds	r4, #20
 800690a:	3514      	adds	r5, #20
 800690c:	f100 0914 	add.w	r9, r0, #20
 8006910:	2600      	movs	r6, #0
 8006912:	f854 3b04 	ldr.w	r3, [r4], #4
 8006916:	f855 2b04 	ldr.w	r2, [r5], #4
 800691a:	fa16 f183 	uxtah	r1, r6, r3
 800691e:	fa1f fa82 	uxth.w	sl, r2
 8006922:	0c12      	lsrs	r2, r2, #16
 8006924:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8006928:	ebca 0101 	rsb	r1, sl, r1
 800692c:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8006930:	464b      	mov	r3, r9
 8006932:	b289      	uxth	r1, r1
 8006934:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8006938:	f843 1b04 	str.w	r1, [r3], #4
 800693c:	1436      	asrs	r6, r6, #16
 800693e:	45a8      	cmp	r8, r5
 8006940:	4622      	mov	r2, r4
 8006942:	4699      	mov	r9, r3
 8006944:	d8e5      	bhi.n	8006912 <__mdiff+0x42>
 8006946:	42a7      	cmp	r7, r4
 8006948:	4698      	mov	r8, r3
 800694a:	d914      	bls.n	8006976 <__mdiff+0xa6>
 800694c:	f852 5b04 	ldr.w	r5, [r2], #4
 8006950:	fa16 f685 	uxtah	r6, r6, r5
 8006954:	0c2d      	lsrs	r5, r5, #16
 8006956:	eb05 4526 	add.w	r5, r5, r6, asr #16
 800695a:	b2b6      	uxth	r6, r6
 800695c:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8006960:	142e      	asrs	r6, r5, #16
 8006962:	4297      	cmp	r7, r2
 8006964:	f843 1b04 	str.w	r1, [r3], #4
 8006968:	d8f0      	bhi.n	800694c <__mdiff+0x7c>
 800696a:	43e3      	mvns	r3, r4
 800696c:	19db      	adds	r3, r3, r7
 800696e:	f023 0303 	bic.w	r3, r3, #3
 8006972:	3304      	adds	r3, #4
 8006974:	4443      	add	r3, r8
 8006976:	b931      	cbnz	r1, 8006986 <__mdiff+0xb6>
 8006978:	3b04      	subs	r3, #4
 800697a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800697e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006982:	2a00      	cmp	r2, #0
 8006984:	d0f9      	beq.n	800697a <__mdiff+0xaa>
 8006986:	f8c0 c010 	str.w	ip, [r0, #16]
 800698a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698e:	4623      	mov	r3, r4
 8006990:	2701      	movs	r7, #1
 8006992:	462c      	mov	r4, r5
 8006994:	461d      	mov	r5, r3
 8006996:	e7a8      	b.n	80068ea <__mdiff+0x1a>
 8006998:	4630      	mov	r0, r6
 800699a:	4639      	mov	r1, r7
 800699c:	f7ff fd1e 	bl	80063dc <_Balloc>
 80069a0:	2301      	movs	r3, #1
 80069a2:	6103      	str	r3, [r0, #16]
 80069a4:	6147      	str	r7, [r0, #20]
 80069a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069aa:	bf00      	nop

080069ac <__ulp>:
 80069ac:	2300      	movs	r3, #0
 80069ae:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80069b2:	400b      	ands	r3, r1
 80069b4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dd02      	ble.n	80069c2 <__ulp+0x16>
 80069bc:	4619      	mov	r1, r3
 80069be:	2000      	movs	r0, #0
 80069c0:	4770      	bx	lr
 80069c2:	425b      	negs	r3, r3
 80069c4:	151b      	asrs	r3, r3, #20
 80069c6:	2100      	movs	r1, #0
 80069c8:	2b13      	cmp	r3, #19
 80069ca:	dd0b      	ble.n	80069e4 <__ulp+0x38>
 80069cc:	2b32      	cmp	r3, #50	; 0x32
 80069ce:	dd02      	ble.n	80069d6 <__ulp+0x2a>
 80069d0:	2301      	movs	r3, #1
 80069d2:	4618      	mov	r0, r3
 80069d4:	4770      	bx	lr
 80069d6:	2201      	movs	r2, #1
 80069d8:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 80069dc:	fa12 f303 	lsls.w	r3, r2, r3
 80069e0:	4618      	mov	r0, r3
 80069e2:	4770      	bx	lr
 80069e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80069e8:	fa52 f103 	asrs.w	r1, r2, r3
 80069ec:	2000      	movs	r0, #0
 80069ee:	4770      	bx	lr

080069f0 <__b2d>:
 80069f0:	6902      	ldr	r2, [r0, #16]
 80069f2:	3204      	adds	r2, #4
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 80069fa:	4603      	mov	r3, r0
 80069fc:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8006a00:	4628      	mov	r0, r5
 8006a02:	460f      	mov	r7, r1
 8006a04:	f103 0614 	add.w	r6, r3, #20
 8006a08:	f7ff fda8 	bl	800655c <__hi0bits>
 8006a0c:	f1c0 0320 	rsb	r3, r0, #32
 8006a10:	280a      	cmp	r0, #10
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	4623      	mov	r3, r4
 8006a16:	dc14      	bgt.n	8006a42 <__b2d+0x52>
 8006a18:	f1c0 010b 	rsb	r1, r0, #11
 8006a1c:	fa35 f701 	lsrs.w	r7, r5, r1
 8006a20:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8006a24:	42a6      	cmp	r6, r4
 8006a26:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8006a2a:	d22e      	bcs.n	8006a8a <__b2d+0x9a>
 8006a2c:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006a30:	fa34 f101 	lsrs.w	r1, r4, r1
 8006a34:	3015      	adds	r0, #21
 8006a36:	4085      	lsls	r5, r0
 8006a38:	ea41 0205 	orr.w	r2, r1, r5
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4619      	mov	r1, r3
 8006a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a42:	2100      	movs	r1, #0
 8006a44:	42a6      	cmp	r6, r4
 8006a46:	d202      	bcs.n	8006a4e <__b2d+0x5e>
 8006a48:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006a4c:	3c04      	subs	r4, #4
 8006a4e:	f1b0 070b 	subs.w	r7, r0, #11
 8006a52:	bf02      	ittt	eq
 8006a54:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8006a58:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8006a5c:	460a      	moveq	r2, r1
 8006a5e:	d0ed      	beq.n	8006a3c <__b2d+0x4c>
 8006a60:	40bd      	lsls	r5, r7
 8006a62:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8006a66:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006a6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a6e:	fa21 fc00 	lsr.w	ip, r1, r0
 8006a72:	42b4      	cmp	r4, r6
 8006a74:	ea45 030c 	orr.w	r3, r5, ip
 8006a78:	d909      	bls.n	8006a8e <__b2d+0x9e>
 8006a7a:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006a7e:	fa34 f000 	lsrs.w	r0, r4, r0
 8006a82:	40b9      	lsls	r1, r7
 8006a84:	ea40 0201 	orr.w	r2, r0, r1
 8006a88:	e7d8      	b.n	8006a3c <__b2d+0x4c>
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	e7d2      	b.n	8006a34 <__b2d+0x44>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	e7f7      	b.n	8006a82 <__b2d+0x92>
 8006a92:	bf00      	nop

08006a94 <__d2b>:
 8006a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a98:	b083      	sub	sp, #12
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	461d      	mov	r5, r3
 8006a9e:	4614      	mov	r4, r2
 8006aa0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006aa2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006aa4:	f7ff fc9a 	bl	80063dc <_Balloc>
 8006aa8:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8006aac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ab0:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8006ab4:	4680      	mov	r8, r0
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	f1b9 0f00 	cmp.w	r9, #0
 8006abc:	d002      	beq.n	8006ac4 <__d2b+0x30>
 8006abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	2c00      	cmp	r4, #0
 8006ac6:	d025      	beq.n	8006b14 <__d2b+0x80>
 8006ac8:	a802      	add	r0, sp, #8
 8006aca:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006ace:	4668      	mov	r0, sp
 8006ad0:	f7ff fd62 	bl	8006598 <__lo0bits>
 8006ad4:	9b01      	ldr	r3, [sp, #4]
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d132      	bne.n	8006b40 <__d2b+0xac>
 8006ada:	9a00      	ldr	r2, [sp, #0]
 8006adc:	f8c8 2014 	str.w	r2, [r8, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf0c      	ite	eq
 8006ae4:	2401      	moveq	r4, #1
 8006ae6:	2402      	movne	r4, #2
 8006ae8:	f8c8 3018 	str.w	r3, [r8, #24]
 8006aec:	f8c8 4010 	str.w	r4, [r8, #16]
 8006af0:	f1b9 0f00 	cmp.w	r9, #0
 8006af4:	d11b      	bne.n	8006b2e <__d2b+0x9a>
 8006af6:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006afa:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8006afe:	6910      	ldr	r0, [r2, #16]
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	f7ff fd2b 	bl	800655c <__hi0bits>
 8006b06:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006b0a:	6030      	str	r0, [r6, #0]
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	b003      	add	sp, #12
 8006b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b14:	a801      	add	r0, sp, #4
 8006b16:	f7ff fd3f 	bl	8006598 <__lo0bits>
 8006b1a:	9b01      	ldr	r3, [sp, #4]
 8006b1c:	2401      	movs	r4, #1
 8006b1e:	f8c8 3014 	str.w	r3, [r8, #20]
 8006b22:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b26:	3020      	adds	r0, #32
 8006b28:	f1b9 0f00 	cmp.w	r9, #0
 8006b2c:	d0e3      	beq.n	8006af6 <__d2b+0x62>
 8006b2e:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8006b32:	eb09 0300 	add.w	r3, r9, r0
 8006b36:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	6030      	str	r0, [r6, #0]
 8006b3e:	e7e5      	b.n	8006b0c <__d2b+0x78>
 8006b40:	f1c0 0220 	rsb	r2, r0, #32
 8006b44:	9900      	ldr	r1, [sp, #0]
 8006b46:	fa13 f202 	lsls.w	r2, r3, r2
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	40c3      	lsrs	r3, r0
 8006b4e:	f8c8 2014 	str.w	r2, [r8, #20]
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	e7c4      	b.n	8006ae0 <__d2b+0x4c>
 8006b56:	bf00      	nop

08006b58 <__ratio>:
 8006b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	460d      	mov	r5, r1
 8006b60:	4669      	mov	r1, sp
 8006b62:	4604      	mov	r4, r0
 8006b64:	f7ff ff44 	bl	80069f0 <__b2d>
 8006b68:	4689      	mov	r9, r1
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	a901      	add	r1, sp, #4
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f7ff ff3e 	bl	80069f0 <__b2d>
 8006b74:	460f      	mov	r7, r1
 8006b76:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006b7a:	692a      	ldr	r2, [r5, #16]
 8006b7c:	6924      	ldr	r4, [r4, #16]
 8006b7e:	1acb      	subs	r3, r1, r3
 8006b80:	1aa4      	subs	r4, r4, r2
 8006b82:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8006b86:	2c00      	cmp	r4, #0
 8006b88:	4606      	mov	r6, r0
 8006b8a:	464b      	mov	r3, r9
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	bfcb      	itete	gt
 8006b90:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 8006b94:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006b98:	4699      	movgt	r9, r3
 8006b9a:	460f      	movle	r7, r1
 8006b9c:	bfcc      	ite	gt
 8006b9e:	46c0      	nopgt			; (mov r8, r8)
 8006ba0:	4636      	movle	r6, r6
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	4632      	mov	r2, r6
 8006ba8:	463b      	mov	r3, r7
 8006baa:	f001 fc53 	bl	8008454 <__aeabi_ddiv>
 8006bae:	b003      	add	sp, #12
 8006bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006bb4 <_mprec_log10>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	2000      	movs	r0, #0
 8006bbc:	2c17      	cmp	r4, #23
 8006bbe:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006bc2:	dd08      	ble.n	8006bd6 <_mprec_log10+0x22>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006bcc:	f001 fb18 	bl	8008200 <__aeabi_dmul>
 8006bd0:	3c01      	subs	r4, #1
 8006bd2:	d1f7      	bne.n	8006bc4 <_mprec_log10+0x10>
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <_mprec_log10+0x30>)
 8006bd8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006bdc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006be0:	bd10      	pop	{r4, pc}
 8006be2:	bf00      	nop
 8006be4:	08008b48 	.word	0x08008b48

08006be8 <__copybits>:
 8006be8:	6913      	ldr	r3, [r2, #16]
 8006bea:	3901      	subs	r1, #1
 8006bec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006bf0:	1149      	asrs	r1, r1, #5
 8006bf2:	b470      	push	{r4, r5, r6}
 8006bf4:	3314      	adds	r3, #20
 8006bf6:	f102 0414 	add.w	r4, r2, #20
 8006bfa:	3101      	adds	r1, #1
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c02:	d20c      	bcs.n	8006c1e <__copybits+0x36>
 8006c04:	4605      	mov	r5, r0
 8006c06:	f854 6b04 	ldr.w	r6, [r4], #4
 8006c0a:	42a3      	cmp	r3, r4
 8006c0c:	f845 6b04 	str.w	r6, [r5], #4
 8006c10:	d8f9      	bhi.n	8006c06 <__copybits+0x1e>
 8006c12:	1a9b      	subs	r3, r3, r2
 8006c14:	3b15      	subs	r3, #21
 8006c16:	f023 0303 	bic.w	r3, r3, #3
 8006c1a:	3304      	adds	r3, #4
 8006c1c:	18c0      	adds	r0, r0, r3
 8006c1e:	4281      	cmp	r1, r0
 8006c20:	d904      	bls.n	8006c2c <__copybits+0x44>
 8006c22:	2300      	movs	r3, #0
 8006c24:	f840 3b04 	str.w	r3, [r0], #4
 8006c28:	4281      	cmp	r1, r0
 8006c2a:	d8fb      	bhi.n	8006c24 <__copybits+0x3c>
 8006c2c:	bc70      	pop	{r4, r5, r6}
 8006c2e:	4770      	bx	lr

08006c30 <__any_on>:
 8006c30:	6902      	ldr	r2, [r0, #16]
 8006c32:	114b      	asrs	r3, r1, #5
 8006c34:	429a      	cmp	r2, r3
 8006c36:	b410      	push	{r4}
 8006c38:	db01      	blt.n	8006c3e <__any_on+0xe>
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	dc13      	bgt.n	8006c66 <__any_on+0x36>
 8006c3e:	3204      	adds	r2, #4
 8006c40:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006c44:	f100 0114 	add.w	r1, r0, #20
 8006c48:	1d1c      	adds	r4, r3, #4
 8006c4a:	42a1      	cmp	r1, r4
 8006c4c:	d218      	bcs.n	8006c80 <__any_on+0x50>
 8006c4e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006c52:	b92a      	cbnz	r2, 8006c60 <__any_on+0x30>
 8006c54:	4299      	cmp	r1, r3
 8006c56:	d213      	bcs.n	8006c80 <__any_on+0x50>
 8006c58:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	d0f9      	beq.n	8006c54 <__any_on+0x24>
 8006c60:	2001      	movs	r0, #1
 8006c62:	bc10      	pop	{r4}
 8006c64:	4770      	bx	lr
 8006c66:	f011 011f 	ands.w	r1, r1, #31
 8006c6a:	d0e8      	beq.n	8006c3e <__any_on+0xe>
 8006c6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	fa33 f401 	lsrs.w	r4, r3, r1
 8006c76:	fa14 f101 	lsls.w	r1, r4, r1
 8006c7a:	4299      	cmp	r1, r3
 8006c7c:	d1f0      	bne.n	8006c60 <__any_on+0x30>
 8006c7e:	e7de      	b.n	8006c3e <__any_on+0xe>
 8006c80:	2000      	movs	r0, #0
 8006c82:	e7ee      	b.n	8006c62 <__any_on+0x32>

08006c84 <__fpclassifyd>:
 8006c84:	ea50 0201 	orrs.w	r2, r0, r1
 8006c88:	b410      	push	{r4}
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	d102      	bne.n	8006c94 <__fpclassifyd+0x10>
 8006c8e:	2002      	movs	r0, #2
 8006c90:	bc10      	pop	{r4}
 8006c92:	4770      	bx	lr
 8006c94:	f1d0 0101 	rsbs	r1, r0, #1
 8006c98:	bf38      	it	cc
 8006c9a:	2100      	movcc	r1, #0
 8006c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ca0:	bf08      	it	eq
 8006ca2:	2800      	cmpeq	r0, #0
 8006ca4:	d0f3      	beq.n	8006c8e <__fpclassifyd+0xa>
 8006ca6:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8006caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cae:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 8006cb2:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8006cb6:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8006cba:	4290      	cmp	r0, r2
 8006cbc:	bf88      	it	hi
 8006cbe:	4294      	cmphi	r4, r2
 8006cc0:	d801      	bhi.n	8006cc6 <__fpclassifyd+0x42>
 8006cc2:	2004      	movs	r0, #4
 8006cc4:	e7e4      	b.n	8006c90 <__fpclassifyd+0xc>
 8006cc6:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8006cca:	2003      	movs	r0, #3
 8006ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd0:	bf28      	it	cs
 8006cd2:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8006cd6:	d3db      	bcc.n	8006c90 <__fpclassifyd+0xc>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006cde:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8006ce2:	bf18      	it	ne
 8006ce4:	4293      	cmpne	r3, r2
 8006ce6:	bf14      	ite	ne
 8006ce8:	2300      	movne	r3, #0
 8006cea:	2301      	moveq	r3, #1
 8006cec:	ea01 0003 	and.w	r0, r1, r3
 8006cf0:	e7ce      	b.n	8006c90 <__fpclassifyd+0xc>
 8006cf2:	bf00      	nop

08006cf4 <_sbrk_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4c07      	ldr	r4, [pc, #28]	; (8006d14 <_sbrk_r+0x20>)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	f7fc f8d6 	bl	8002eb0 <_sbrk>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d000      	beq.n	8006d0a <_sbrk_r+0x16>
 8006d08:	bd38      	pop	{r3, r4, r5, pc}
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0fb      	beq.n	8006d08 <_sbrk_r+0x14>
 8006d10:	602b      	str	r3, [r5, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	20001690 	.word	0x20001690

08006d18 <strcmp>:
 8006d18:	ea80 0201 	eor.w	r2, r0, r1
 8006d1c:	f012 0f03 	tst.w	r2, #3
 8006d20:	d13a      	bne.n	8006d98 <strcmp_unaligned>
 8006d22:	f010 0203 	ands.w	r2, r0, #3
 8006d26:	f020 0003 	bic.w	r0, r0, #3
 8006d2a:	f021 0103 	bic.w	r1, r1, #3
 8006d2e:	f850 cb04 	ldr.w	ip, [r0], #4
 8006d32:	bf08      	it	eq
 8006d34:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006d38:	d00d      	beq.n	8006d56 <strcmp+0x3e>
 8006d3a:	f082 0203 	eor.w	r2, r2, #3
 8006d3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006d42:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006d46:	fa23 f202 	lsr.w	r2, r3, r2
 8006d4a:	f851 3b04 	ldr.w	r3, [r1], #4
 8006d4e:	ea4c 0c02 	orr.w	ip, ip, r2
 8006d52:	ea43 0302 	orr.w	r3, r3, r2
 8006d56:	bf00      	nop
 8006d58:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8006d5c:	459c      	cmp	ip, r3
 8006d5e:	bf01      	itttt	eq
 8006d60:	ea22 020c 	biceq.w	r2, r2, ip
 8006d64:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8006d68:	f850 cb04 	ldreq.w	ip, [r0], #4
 8006d6c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006d70:	d0f2      	beq.n	8006d58 <strcmp+0x40>
 8006d72:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8006d76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8006d7a:	2801      	cmp	r0, #1
 8006d7c:	bf28      	it	cs
 8006d7e:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8006d82:	bf08      	it	eq
 8006d84:	0a1b      	lsreq	r3, r3, #8
 8006d86:	d0f4      	beq.n	8006d72 <strcmp+0x5a>
 8006d88:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006d8c:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8006d90:	eba0 0003 	sub.w	r0, r0, r3
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop

08006d98 <strcmp_unaligned>:
 8006d98:	f010 0f03 	tst.w	r0, #3
 8006d9c:	d00a      	beq.n	8006db4 <strcmp_unaligned+0x1c>
 8006d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006da6:	2a01      	cmp	r2, #1
 8006da8:	bf28      	it	cs
 8006daa:	429a      	cmpcs	r2, r3
 8006dac:	d0f4      	beq.n	8006d98 <strcmp_unaligned>
 8006dae:	eba2 0003 	sub.w	r0, r2, r3
 8006db2:	4770      	bx	lr
 8006db4:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8006db8:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8006dbc:	f04f 0201 	mov.w	r2, #1
 8006dc0:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8006dc4:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8006dc8:	f001 0c03 	and.w	ip, r1, #3
 8006dcc:	f021 0103 	bic.w	r1, r1, #3
 8006dd0:	f850 4b04 	ldr.w	r4, [r0], #4
 8006dd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dd8:	f1bc 0f02 	cmp.w	ip, #2
 8006ddc:	d026      	beq.n	8006e2c <strcmp_unaligned+0x94>
 8006dde:	d84b      	bhi.n	8006e78 <strcmp_unaligned+0xe0>
 8006de0:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8006de4:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8006de8:	eba4 0302 	sub.w	r3, r4, r2
 8006dec:	ea23 0304 	bic.w	r3, r3, r4
 8006df0:	d10d      	bne.n	8006e0e <strcmp_unaligned+0x76>
 8006df2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006df6:	bf08      	it	eq
 8006df8:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006dfc:	d10a      	bne.n	8006e14 <strcmp_unaligned+0x7c>
 8006dfe:	ea8c 0c04 	eor.w	ip, ip, r4
 8006e02:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8006e06:	d10c      	bne.n	8006e22 <strcmp_unaligned+0x8a>
 8006e08:	f850 4b04 	ldr.w	r4, [r0], #4
 8006e0c:	e7e8      	b.n	8006de0 <strcmp_unaligned+0x48>
 8006e0e:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8006e12:	e05c      	b.n	8006ece <strcmp_unaligned+0x136>
 8006e14:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8006e18:	d152      	bne.n	8006ec0 <strcmp_unaligned+0x128>
 8006e1a:	780d      	ldrb	r5, [r1, #0]
 8006e1c:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006e20:	e055      	b.n	8006ece <strcmp_unaligned+0x136>
 8006e22:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006e26:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8006e2a:	e050      	b.n	8006ece <strcmp_unaligned+0x136>
 8006e2c:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8006e30:	eba4 0302 	sub.w	r3, r4, r2
 8006e34:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e38:	ea23 0304 	bic.w	r3, r3, r4
 8006e3c:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8006e40:	d117      	bne.n	8006e72 <strcmp_unaligned+0xda>
 8006e42:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006e46:	bf08      	it	eq
 8006e48:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006e4c:	d107      	bne.n	8006e5e <strcmp_unaligned+0xc6>
 8006e4e:	ea8c 0c04 	eor.w	ip, ip, r4
 8006e52:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8006e56:	d108      	bne.n	8006e6a <strcmp_unaligned+0xd2>
 8006e58:	f850 4b04 	ldr.w	r4, [r0], #4
 8006e5c:	e7e6      	b.n	8006e2c <strcmp_unaligned+0x94>
 8006e5e:	041b      	lsls	r3, r3, #16
 8006e60:	d12e      	bne.n	8006ec0 <strcmp_unaligned+0x128>
 8006e62:	880d      	ldrh	r5, [r1, #0]
 8006e64:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006e68:	e031      	b.n	8006ece <strcmp_unaligned+0x136>
 8006e6a:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8006e6e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006e72:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8006e76:	e02a      	b.n	8006ece <strcmp_unaligned+0x136>
 8006e78:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8006e7c:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8006e80:	eba4 0302 	sub.w	r3, r4, r2
 8006e84:	ea23 0304 	bic.w	r3, r3, r4
 8006e88:	d10d      	bne.n	8006ea6 <strcmp_unaligned+0x10e>
 8006e8a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006e8e:	bf08      	it	eq
 8006e90:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006e94:	d10a      	bne.n	8006eac <strcmp_unaligned+0x114>
 8006e96:	ea8c 0c04 	eor.w	ip, ip, r4
 8006e9a:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8006e9e:	d10a      	bne.n	8006eb6 <strcmp_unaligned+0x11e>
 8006ea0:	f850 4b04 	ldr.w	r4, [r0], #4
 8006ea4:	e7e8      	b.n	8006e78 <strcmp_unaligned+0xe0>
 8006ea6:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8006eaa:	e010      	b.n	8006ece <strcmp_unaligned+0x136>
 8006eac:	f014 0fff 	tst.w	r4, #255	; 0xff
 8006eb0:	d006      	beq.n	8006ec0 <strcmp_unaligned+0x128>
 8006eb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006eb6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8006eba:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8006ebe:	e006      	b.n	8006ece <strcmp_unaligned+0x136>
 8006ec0:	f04f 0000 	mov.w	r0, #0
 8006ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ec8:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8006ed2:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8006ed6:	2801      	cmp	r0, #1
 8006ed8:	bf28      	it	cs
 8006eda:	4290      	cmpcs	r0, r2
 8006edc:	bf04      	itt	eq
 8006ede:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8006ee2:	0a2d      	lsreq	r5, r5, #8
 8006ee4:	d0f3      	beq.n	8006ece <strcmp_unaligned+0x136>
 8006ee6:	eba2 0000 	sub.w	r0, r2, r0
 8006eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eee:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <strlen>:
 8006ef4:	f020 0103 	bic.w	r1, r0, #3
 8006ef8:	f010 0003 	ands.w	r0, r0, #3
 8006efc:	f1c0 0000 	rsb	r0, r0, #0
 8006f00:	f851 3b04 	ldr.w	r3, [r1], #4
 8006f04:	f100 0c04 	add.w	ip, r0, #4
 8006f08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006f0c:	f06f 0200 	mvn.w	r2, #0
 8006f10:	bf1c      	itt	ne
 8006f12:	fa22 f20c 	lsrne.w	r2, r2, ip
 8006f16:	4313      	orrne	r3, r2
 8006f18:	f04f 0c01 	mov.w	ip, #1
 8006f1c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006f20:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006f24:	eba3 020c 	sub.w	r2, r3, ip
 8006f28:	ea22 0203 	bic.w	r2, r2, r3
 8006f2c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8006f30:	bf04      	itt	eq
 8006f32:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006f36:	3004      	addeq	r0, #4
 8006f38:	d0f4      	beq.n	8006f24 <strlen+0x30>
 8006f3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f3e:	bf1f      	itttt	ne
 8006f40:	3001      	addne	r0, #1
 8006f42:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8006f46:	3001      	addne	r0, #1
 8006f48:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8006f4c:	bf18      	it	ne
 8006f4e:	3001      	addne	r0, #1
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop

08006f54 <__ssprint_r>:
 8006f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	4691      	mov	r9, r2
 8006f5c:	9001      	str	r0, [sp, #4]
 8006f5e:	6890      	ldr	r0, [r2, #8]
 8006f60:	6817      	ldr	r7, [r2, #0]
 8006f62:	460d      	mov	r5, r1
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d072      	beq.n	800704e <__ssprint_r+0xfa>
 8006f68:	f04f 0a00 	mov.w	sl, #0
 8006f6c:	6808      	ldr	r0, [r1, #0]
 8006f6e:	688b      	ldr	r3, [r1, #8]
 8006f70:	4654      	mov	r4, sl
 8006f72:	2c00      	cmp	r4, #0
 8006f74:	d048      	beq.n	8007008 <__ssprint_r+0xb4>
 8006f76:	429c      	cmp	r4, r3
 8006f78:	461e      	mov	r6, r3
 8006f7a:	4698      	mov	r8, r3
 8006f7c:	bf3c      	itt	cc
 8006f7e:	4626      	movcc	r6, r4
 8006f80:	46a0      	movcc	r8, r4
 8006f82:	d331      	bcc.n	8006fe8 <__ssprint_r+0x94>
 8006f84:	89ab      	ldrh	r3, [r5, #12]
 8006f86:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006f8a:	d02d      	beq.n	8006fe8 <__ssprint_r+0x94>
 8006f8c:	696e      	ldr	r6, [r5, #20]
 8006f8e:	6929      	ldr	r1, [r5, #16]
 8006f90:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006f94:	ebc1 0800 	rsb	r8, r1, r0
 8006f98:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8006f9c:	1c60      	adds	r0, r4, #1
 8006f9e:	1076      	asrs	r6, r6, #1
 8006fa0:	4440      	add	r0, r8
 8006fa2:	4286      	cmp	r6, r0
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	bf3c      	itt	cc
 8006fa8:	4606      	movcc	r6, r0
 8006faa:	4632      	movcc	r2, r6
 8006fac:	055b      	lsls	r3, r3, #21
 8006fae:	9801      	ldr	r0, [sp, #4]
 8006fb0:	d52f      	bpl.n	8007012 <__ssprint_r+0xbe>
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	f7fe fed8 	bl	8005d68 <_malloc_r>
 8006fb8:	4683      	mov	fp, r0
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d032      	beq.n	8007024 <__ssprint_r+0xd0>
 8006fbe:	6929      	ldr	r1, [r5, #16]
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	f7ff f9c3 	bl	800634c <memcpy>
 8006fc6:	89ab      	ldrh	r3, [r5, #12]
 8006fc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd0:	81ab      	strh	r3, [r5, #12]
 8006fd2:	ebc8 0306 	rsb	r3, r8, r6
 8006fd6:	eb0b 0008 	add.w	r0, fp, r8
 8006fda:	616e      	str	r6, [r5, #20]
 8006fdc:	f8c5 b010 	str.w	fp, [r5, #16]
 8006fe0:	6028      	str	r0, [r5, #0]
 8006fe2:	4626      	mov	r6, r4
 8006fe4:	60ab      	str	r3, [r5, #8]
 8006fe6:	46a0      	mov	r8, r4
 8006fe8:	4642      	mov	r2, r8
 8006fea:	4651      	mov	r1, sl
 8006fec:	f000 fcb8 	bl	8007960 <memmove>
 8006ff0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8006ff4:	68ab      	ldr	r3, [r5, #8]
 8006ff6:	6828      	ldr	r0, [r5, #0]
 8006ff8:	1b9b      	subs	r3, r3, r6
 8006ffa:	4440      	add	r0, r8
 8006ffc:	1b14      	subs	r4, r2, r4
 8006ffe:	60ab      	str	r3, [r5, #8]
 8007000:	6028      	str	r0, [r5, #0]
 8007002:	f8c9 4008 	str.w	r4, [r9, #8]
 8007006:	b1e4      	cbz	r4, 8007042 <__ssprint_r+0xee>
 8007008:	f8d7 a000 	ldr.w	sl, [r7]
 800700c:	687c      	ldr	r4, [r7, #4]
 800700e:	3708      	adds	r7, #8
 8007010:	e7af      	b.n	8006f72 <__ssprint_r+0x1e>
 8007012:	f000 fd47 	bl	8007aa4 <_realloc_r>
 8007016:	4683      	mov	fp, r0
 8007018:	2800      	cmp	r0, #0
 800701a:	d1da      	bne.n	8006fd2 <__ssprint_r+0x7e>
 800701c:	9801      	ldr	r0, [sp, #4]
 800701e:	6929      	ldr	r1, [r5, #16]
 8007020:	f7fe fd96 	bl	8005b50 <_free_r>
 8007024:	9a01      	ldr	r2, [sp, #4]
 8007026:	230c      	movs	r3, #12
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	89aa      	ldrh	r2, [r5, #12]
 800702c:	2300      	movs	r3, #0
 800702e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007032:	81aa      	strh	r2, [r5, #12]
 8007034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007038:	f8c9 3008 	str.w	r3, [r9, #8]
 800703c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007040:	e002      	b.n	8007048 <__ssprint_r+0xf4>
 8007042:	f8c9 4004 	str.w	r4, [r9, #4]
 8007046:	4620      	mov	r0, r4
 8007048:	b003      	add	sp, #12
 800704a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704e:	6050      	str	r0, [r2, #4]
 8007050:	e7fa      	b.n	8007048 <__ssprint_r+0xf4>
 8007052:	bf00      	nop

08007054 <_svfiprintf_r>:
 8007054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007058:	468a      	mov	sl, r1
 800705a:	8989      	ldrh	r1, [r1, #12]
 800705c:	b0ad      	sub	sp, #180	; 0xb4
 800705e:	0609      	lsls	r1, r1, #24
 8007060:	9007      	str	r0, [sp, #28]
 8007062:	9305      	str	r3, [sp, #20]
 8007064:	d504      	bpl.n	8007070 <_svfiprintf_r+0x1c>
 8007066:	f8da 3010 	ldr.w	r3, [sl, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8422 	beq.w	80078b4 <_svfiprintf_r+0x860>
 8007070:	2300      	movs	r3, #0
 8007072:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 8007076:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 800707a:	a90e      	add	r1, sp, #56	; 0x38
 800707c:	930c      	str	r3, [sp, #48]	; 0x30
 800707e:	932a      	str	r3, [sp, #168]	; 0xa8
 8007080:	9329      	str	r3, [sp, #164]	; 0xa4
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	ebc0 0308 	rsb	r3, r0, r8
 8007088:	9001      	str	r0, [sp, #4]
 800708a:	9128      	str	r1, [sp, #160]	; 0xa0
 800708c:	4617      	mov	r7, r2
 800708e:	460c      	mov	r4, r1
 8007090:	930d      	str	r3, [sp, #52]	; 0x34
 8007092:	783b      	ldrb	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	bf18      	it	ne
 8007098:	2b25      	cmpne	r3, #37	; 0x25
 800709a:	463d      	mov	r5, r7
 800709c:	d016      	beq.n	80070cc <_svfiprintf_r+0x78>
 800709e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80070a2:	2b25      	cmp	r3, #37	; 0x25
 80070a4:	bf18      	it	ne
 80070a6:	2b00      	cmpne	r3, #0
 80070a8:	d1f9      	bne.n	800709e <_svfiprintf_r+0x4a>
 80070aa:	1bee      	subs	r6, r5, r7
 80070ac:	d00e      	beq.n	80070cc <_svfiprintf_r+0x78>
 80070ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070b0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80070b2:	6027      	str	r7, [r4, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	1992      	adds	r2, r2, r6
 80070b8:	2b07      	cmp	r3, #7
 80070ba:	6066      	str	r6, [r4, #4]
 80070bc:	922a      	str	r2, [sp, #168]	; 0xa8
 80070be:	9329      	str	r3, [sp, #164]	; 0xa4
 80070c0:	f300 832a 	bgt.w	8007718 <_svfiprintf_r+0x6c4>
 80070c4:	3408      	adds	r4, #8
 80070c6:	9b04      	ldr	r3, [sp, #16]
 80070c8:	199b      	adds	r3, r3, r6
 80070ca:	9304      	str	r3, [sp, #16]
 80070cc:	782b      	ldrb	r3, [r5, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 82c5 	beq.w	800765e <_svfiprintf_r+0x60a>
 80070d4:	2200      	movs	r2, #0
 80070d6:	1c6f      	adds	r7, r5, #1
 80070d8:	4613      	mov	r3, r2
 80070da:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80070de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80070e2:	9206      	str	r2, [sp, #24]
 80070e4:	4693      	mov	fp, r2
 80070e6:	f817 2b01 	ldrb.w	r2, [r7], #1
 80070ea:	f1a2 0120 	sub.w	r1, r2, #32
 80070ee:	2958      	cmp	r1, #88	; 0x58
 80070f0:	f200 8178 	bhi.w	80073e4 <_svfiprintf_r+0x390>
 80070f4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80070f8:	01760172 	.word	0x01760172
 80070fc:	016f0176 	.word	0x016f0176
 8007100:	01760176 	.word	0x01760176
 8007104:	01760176 	.word	0x01760176
 8007108:	01760176 	.word	0x01760176
 800710c:	01d800af 	.word	0x01d800af
 8007110:	00ba0176 	.word	0x00ba0176
 8007114:	017601da 	.word	0x017601da
 8007118:	01c401d5 	.word	0x01c401d5
 800711c:	01c401c4 	.word	0x01c401c4
 8007120:	01c401c4 	.word	0x01c401c4
 8007124:	01c401c4 	.word	0x01c401c4
 8007128:	01c401c4 	.word	0x01c401c4
 800712c:	01760176 	.word	0x01760176
 8007130:	01760176 	.word	0x01760176
 8007134:	01760176 	.word	0x01760176
 8007138:	01760176 	.word	0x01760176
 800713c:	01760176 	.word	0x01760176
 8007140:	017601a7 	.word	0x017601a7
 8007144:	01760176 	.word	0x01760176
 8007148:	01760176 	.word	0x01760176
 800714c:	01760176 	.word	0x01760176
 8007150:	01760176 	.word	0x01760176
 8007154:	005c0176 	.word	0x005c0176
 8007158:	01760176 	.word	0x01760176
 800715c:	01760176 	.word	0x01760176
 8007160:	00a00176 	.word	0x00a00176
 8007164:	01760176 	.word	0x01760176
 8007168:	0176016a 	.word	0x0176016a
 800716c:	01760176 	.word	0x01760176
 8007170:	01760176 	.word	0x01760176
 8007174:	01760176 	.word	0x01760176
 8007178:	01760176 	.word	0x01760176
 800717c:	01170176 	.word	0x01170176
 8007180:	01760105 	.word	0x01760105
 8007184:	01760176 	.word	0x01760176
 8007188:	01050102 	.word	0x01050102
 800718c:	01760176 	.word	0x01760176
 8007190:	01760059 	.word	0x01760059
 8007194:	005e00d1 	.word	0x005e00d1
 8007198:	005900bd 	.word	0x005900bd
 800719c:	01870176 	.word	0x01870176
 80071a0:	00a20176 	.word	0x00a20176
 80071a4:	01760176 	.word	0x01760176
 80071a8:	00e2      	.short	0x00e2
 80071aa:	f04b 0b10 	orr.w	fp, fp, #16
 80071ae:	e79a      	b.n	80070e6 <_svfiprintf_r+0x92>
 80071b0:	f04b 0b10 	orr.w	fp, fp, #16
 80071b4:	f01b 0210 	ands.w	r2, fp, #16
 80071b8:	f000 8313 	beq.w	80077e2 <_svfiprintf_r+0x78e>
 80071bc:	9805      	ldr	r0, [sp, #20]
 80071be:	6803      	ldr	r3, [r0, #0]
 80071c0:	2200      	movs	r2, #0
 80071c2:	1a99      	subs	r1, r3, r2
 80071c4:	bf18      	it	ne
 80071c6:	2101      	movne	r1, #1
 80071c8:	3004      	adds	r0, #4
 80071ca:	9005      	str	r0, [sp, #20]
 80071cc:	2000      	movs	r0, #0
 80071ce:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 80071d2:	2d00      	cmp	r5, #0
 80071d4:	bfa8      	it	ge
 80071d6:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 80071da:	2d00      	cmp	r5, #0
 80071dc:	bf18      	it	ne
 80071de:	f041 0101 	orrne.w	r1, r1, #1
 80071e2:	2900      	cmp	r1, #0
 80071e4:	f000 8228 	beq.w	8007638 <_svfiprintf_r+0x5e4>
 80071e8:	2a01      	cmp	r2, #1
 80071ea:	f000 82cf 	beq.w	800778c <_svfiprintf_r+0x738>
 80071ee:	2a02      	cmp	r2, #2
 80071f0:	bf18      	it	ne
 80071f2:	4642      	movne	r2, r8
 80071f4:	d101      	bne.n	80071fa <_svfiprintf_r+0x1a6>
 80071f6:	e2b9      	b.n	800776c <_svfiprintf_r+0x718>
 80071f8:	4602      	mov	r2, r0
 80071fa:	f003 0107 	and.w	r1, r3, #7
 80071fe:	3130      	adds	r1, #48	; 0x30
 8007200:	1e50      	subs	r0, r2, #1
 8007202:	08db      	lsrs	r3, r3, #3
 8007204:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007208:	d1f6      	bne.n	80071f8 <_svfiprintf_r+0x1a4>
 800720a:	f01b 0f01 	tst.w	fp, #1
 800720e:	9009      	str	r0, [sp, #36]	; 0x24
 8007210:	f040 831a 	bne.w	8007848 <_svfiprintf_r+0x7f4>
 8007214:	ebc0 0308 	rsb	r3, r0, r8
 8007218:	9303      	str	r3, [sp, #12]
 800721a:	9508      	str	r5, [sp, #32]
 800721c:	9803      	ldr	r0, [sp, #12]
 800721e:	9908      	ldr	r1, [sp, #32]
 8007220:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 8007224:	4288      	cmp	r0, r1
 8007226:	bfb8      	it	lt
 8007228:	4608      	movlt	r0, r1
 800722a:	9002      	str	r0, [sp, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 808b 	beq.w	8007348 <_svfiprintf_r+0x2f4>
 8007232:	3001      	adds	r0, #1
 8007234:	9002      	str	r0, [sp, #8]
 8007236:	e087      	b.n	8007348 <_svfiprintf_r+0x2f4>
 8007238:	f04b 0b10 	orr.w	fp, fp, #16
 800723c:	f01b 0f10 	tst.w	fp, #16
 8007240:	f000 82c1 	beq.w	80077c6 <_svfiprintf_r+0x772>
 8007244:	9805      	ldr	r0, [sp, #20]
 8007246:	6803      	ldr	r3, [r0, #0]
 8007248:	2201      	movs	r2, #1
 800724a:	1c19      	adds	r1, r3, #0
 800724c:	bf18      	it	ne
 800724e:	2101      	movne	r1, #1
 8007250:	3004      	adds	r0, #4
 8007252:	9005      	str	r0, [sp, #20]
 8007254:	e7ba      	b.n	80071cc <_svfiprintf_r+0x178>
 8007256:	9805      	ldr	r0, [sp, #20]
 8007258:	9905      	ldr	r1, [sp, #20]
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	1d0a      	adds	r2, r1, #4
 800725e:	2800      	cmp	r0, #0
 8007260:	9006      	str	r0, [sp, #24]
 8007262:	f280 82e0 	bge.w	8007826 <_svfiprintf_r+0x7d2>
 8007266:	4240      	negs	r0, r0
 8007268:	9006      	str	r0, [sp, #24]
 800726a:	9205      	str	r2, [sp, #20]
 800726c:	f04b 0b04 	orr.w	fp, fp, #4
 8007270:	e739      	b.n	80070e6 <_svfiprintf_r+0x92>
 8007272:	9b05      	ldr	r3, [sp, #20]
 8007274:	9905      	ldr	r1, [sp, #20]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2230      	movs	r2, #48	; 0x30
 800727a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 800727e:	2278      	movs	r2, #120	; 0x78
 8007280:	3104      	adds	r1, #4
 8007282:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 8007286:	4aaf      	ldr	r2, [pc, #700]	; (8007544 <_svfiprintf_r+0x4f0>)
 8007288:	9105      	str	r1, [sp, #20]
 800728a:	1c19      	adds	r1, r3, #0
 800728c:	bf18      	it	ne
 800728e:	2101      	movne	r1, #1
 8007290:	920c      	str	r2, [sp, #48]	; 0x30
 8007292:	f04b 0b02 	orr.w	fp, fp, #2
 8007296:	2202      	movs	r2, #2
 8007298:	e798      	b.n	80071cc <_svfiprintf_r+0x178>
 800729a:	f01b 0f10 	tst.w	fp, #16
 800729e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80072a2:	f040 82dd 	bne.w	8007860 <_svfiprintf_r+0x80c>
 80072a6:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80072aa:	f000 82fb 	beq.w	80078a4 <_svfiprintf_r+0x850>
 80072ae:	9a05      	ldr	r2, [sp, #20]
 80072b0:	9804      	ldr	r0, [sp, #16]
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	3204      	adds	r2, #4
 80072b6:	9205      	str	r2, [sp, #20]
 80072b8:	8018      	strh	r0, [r3, #0]
 80072ba:	e6ea      	b.n	8007092 <_svfiprintf_r+0x3e>
 80072bc:	49a1      	ldr	r1, [pc, #644]	; (8007544 <_svfiprintf_r+0x4f0>)
 80072be:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80072c2:	910c      	str	r1, [sp, #48]	; 0x30
 80072c4:	f01b 0f10 	tst.w	fp, #16
 80072c8:	d103      	bne.n	80072d2 <_svfiprintf_r+0x27e>
 80072ca:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80072ce:	f040 82d3 	bne.w	8007878 <_svfiprintf_r+0x824>
 80072d2:	9805      	ldr	r0, [sp, #20]
 80072d4:	6803      	ldr	r3, [r0, #0]
 80072d6:	3004      	adds	r0, #4
 80072d8:	9005      	str	r0, [sp, #20]
 80072da:	1c19      	adds	r1, r3, #0
 80072dc:	bf18      	it	ne
 80072de:	2101      	movne	r1, #1
 80072e0:	ea1b 0f01 	tst.w	fp, r1
 80072e4:	f000 8287 	beq.w	80077f6 <_svfiprintf_r+0x7a2>
 80072e8:	2130      	movs	r1, #48	; 0x30
 80072ea:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 80072ee:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 80072f2:	f04b 0b02 	orr.w	fp, fp, #2
 80072f6:	2101      	movs	r1, #1
 80072f8:	2202      	movs	r2, #2
 80072fa:	e767      	b.n	80071cc <_svfiprintf_r+0x178>
 80072fc:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8007300:	e6f1      	b.n	80070e6 <_svfiprintf_r+0x92>
 8007302:	f01b 0f10 	tst.w	fp, #16
 8007306:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800730a:	f000 80a4 	beq.w	8007456 <_svfiprintf_r+0x402>
 800730e:	9805      	ldr	r0, [sp, #20]
 8007310:	6803      	ldr	r3, [r0, #0]
 8007312:	3004      	adds	r0, #4
 8007314:	9005      	str	r0, [sp, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	f2c0 80a9 	blt.w	800746e <_svfiprintf_r+0x41a>
 800731c:	bf0c      	ite	eq
 800731e:	2100      	moveq	r1, #0
 8007320:	2101      	movne	r1, #1
 8007322:	2201      	movs	r2, #1
 8007324:	e755      	b.n	80071d2 <_svfiprintf_r+0x17e>
 8007326:	9b05      	ldr	r3, [sp, #20]
 8007328:	9905      	ldr	r1, [sp, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2001      	movs	r0, #1
 800732e:	2200      	movs	r2, #0
 8007330:	3104      	adds	r1, #4
 8007332:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 8007336:	ab1e      	add	r3, sp, #120	; 0x78
 8007338:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 800733c:	9002      	str	r0, [sp, #8]
 800733e:	9105      	str	r1, [sp, #20]
 8007340:	9003      	str	r0, [sp, #12]
 8007342:	9309      	str	r3, [sp, #36]	; 0x24
 8007344:	2300      	movs	r3, #0
 8007346:	9308      	str	r3, [sp, #32]
 8007348:	f01b 0302 	ands.w	r3, fp, #2
 800734c:	930a      	str	r3, [sp, #40]	; 0x28
 800734e:	d002      	beq.n	8007356 <_svfiprintf_r+0x302>
 8007350:	9b02      	ldr	r3, [sp, #8]
 8007352:	3302      	adds	r3, #2
 8007354:	9302      	str	r3, [sp, #8]
 8007356:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800735a:	930b      	str	r3, [sp, #44]	; 0x2c
 800735c:	f040 80c1 	bne.w	80074e2 <_svfiprintf_r+0x48e>
 8007360:	9b06      	ldr	r3, [sp, #24]
 8007362:	9802      	ldr	r0, [sp, #8]
 8007364:	1a1d      	subs	r5, r3, r0
 8007366:	2d00      	cmp	r5, #0
 8007368:	f340 80bb 	ble.w	80074e2 <_svfiprintf_r+0x48e>
 800736c:	2d10      	cmp	r5, #16
 800736e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007370:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007372:	4e75      	ldr	r6, [pc, #468]	; (8007548 <_svfiprintf_r+0x4f4>)
 8007374:	dd1f      	ble.n	80073b6 <_svfiprintf_r+0x362>
 8007376:	4621      	mov	r1, r4
 8007378:	f04f 0910 	mov.w	r9, #16
 800737c:	9c07      	ldr	r4, [sp, #28]
 800737e:	e002      	b.n	8007386 <_svfiprintf_r+0x332>
 8007380:	3d10      	subs	r5, #16
 8007382:	2d10      	cmp	r5, #16
 8007384:	dd16      	ble.n	80073b4 <_svfiprintf_r+0x360>
 8007386:	3301      	adds	r3, #1
 8007388:	3210      	adds	r2, #16
 800738a:	e881 0240 	stmia.w	r1, {r6, r9}
 800738e:	3108      	adds	r1, #8
 8007390:	2b07      	cmp	r3, #7
 8007392:	922a      	str	r2, [sp, #168]	; 0xa8
 8007394:	9329      	str	r3, [sp, #164]	; 0xa4
 8007396:	ddf3      	ble.n	8007380 <_svfiprintf_r+0x32c>
 8007398:	4620      	mov	r0, r4
 800739a:	4651      	mov	r1, sl
 800739c:	4642      	mov	r2, r8
 800739e:	f7ff fdd9 	bl	8006f54 <__ssprint_r>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	f040 8162 	bne.w	800766c <_svfiprintf_r+0x618>
 80073a8:	3d10      	subs	r5, #16
 80073aa:	2d10      	cmp	r5, #16
 80073ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80073ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80073b0:	a90e      	add	r1, sp, #56	; 0x38
 80073b2:	dce8      	bgt.n	8007386 <_svfiprintf_r+0x332>
 80073b4:	460c      	mov	r4, r1
 80073b6:	3301      	adds	r3, #1
 80073b8:	1952      	adds	r2, r2, r5
 80073ba:	2b07      	cmp	r3, #7
 80073bc:	6026      	str	r6, [r4, #0]
 80073be:	6065      	str	r5, [r4, #4]
 80073c0:	922a      	str	r2, [sp, #168]	; 0xa8
 80073c2:	9329      	str	r3, [sp, #164]	; 0xa4
 80073c4:	f300 8219 	bgt.w	80077fa <_svfiprintf_r+0x7a6>
 80073c8:	3408      	adds	r4, #8
 80073ca:	e08c      	b.n	80074e6 <_svfiprintf_r+0x492>
 80073cc:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80073d0:	4b5e      	ldr	r3, [pc, #376]	; (800754c <_svfiprintf_r+0x4f8>)
 80073d2:	930c      	str	r3, [sp, #48]	; 0x30
 80073d4:	e776      	b.n	80072c4 <_svfiprintf_r+0x270>
 80073d6:	f04b 0b01 	orr.w	fp, fp, #1
 80073da:	e684      	b.n	80070e6 <_svfiprintf_r+0x92>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bf08      	it	eq
 80073e0:	2320      	moveq	r3, #32
 80073e2:	e680      	b.n	80070e6 <_svfiprintf_r+0x92>
 80073e4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	f000 8138 	beq.w	800765e <_svfiprintf_r+0x60a>
 80073ee:	2301      	movs	r3, #1
 80073f0:	9302      	str	r3, [sp, #8]
 80073f2:	2300      	movs	r3, #0
 80073f4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80073f8:	2301      	movs	r3, #1
 80073fa:	9303      	str	r3, [sp, #12]
 80073fc:	ab1e      	add	r3, sp, #120	; 0x78
 80073fe:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8007402:	9309      	str	r3, [sp, #36]	; 0x24
 8007404:	e79e      	b.n	8007344 <_svfiprintf_r+0x2f0>
 8007406:	9b05      	ldr	r3, [sp, #20]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	9309      	str	r3, [sp, #36]	; 0x24
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	3304      	adds	r3, #4
 8007410:	9305      	str	r3, [sp, #20]
 8007412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007414:	2600      	movs	r6, #0
 8007416:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 8259 	beq.w	80078d2 <_svfiprintf_r+0x87e>
 8007420:	2d00      	cmp	r5, #0
 8007422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007424:	f2c0 822d 	blt.w	8007882 <_svfiprintf_r+0x82e>
 8007428:	4631      	mov	r1, r6
 800742a:	462a      	mov	r2, r5
 800742c:	f7fe ff50 	bl	80062d0 <memchr>
 8007430:	2800      	cmp	r0, #0
 8007432:	f000 8258 	beq.w	80078e6 <_svfiprintf_r+0x892>
 8007436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007438:	9608      	str	r6, [sp, #32]
 800743a:	1ac0      	subs	r0, r0, r3
 800743c:	42a8      	cmp	r0, r5
 800743e:	9003      	str	r0, [sp, #12]
 8007440:	bfc8      	it	gt
 8007442:	9503      	strgt	r5, [sp, #12]
 8007444:	e6ea      	b.n	800721c <_svfiprintf_r+0x1c8>
 8007446:	f04b 0b10 	orr.w	fp, fp, #16
 800744a:	f01b 0f10 	tst.w	fp, #16
 800744e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007452:	f47f af5c 	bne.w	800730e <_svfiprintf_r+0x2ba>
 8007456:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800745a:	f000 8208 	beq.w	800786e <_svfiprintf_r+0x81a>
 800745e:	9905      	ldr	r1, [sp, #20]
 8007460:	f9b1 3000 	ldrsh.w	r3, [r1]
 8007464:	3104      	adds	r1, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	9105      	str	r1, [sp, #20]
 800746a:	f6bf af57 	bge.w	800731c <_svfiprintf_r+0x2c8>
 800746e:	425b      	negs	r3, r3
 8007470:	222d      	movs	r2, #45	; 0x2d
 8007472:	1c19      	adds	r1, r3, #0
 8007474:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8007478:	bf18      	it	ne
 800747a:	2101      	movne	r1, #1
 800747c:	2201      	movs	r2, #1
 800747e:	e6a8      	b.n	80071d2 <_svfiprintf_r+0x17e>
 8007480:	4638      	mov	r0, r7
 8007482:	2100      	movs	r1, #0
 8007484:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8007488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800748c:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007490:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007494:	2e09      	cmp	r6, #9
 8007496:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 800749a:	4607      	mov	r7, r0
 800749c:	d9f2      	bls.n	8007484 <_svfiprintf_r+0x430>
 800749e:	9106      	str	r1, [sp, #24]
 80074a0:	e623      	b.n	80070ea <_svfiprintf_r+0x96>
 80074a2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80074a6:	e61e      	b.n	80070e6 <_svfiprintf_r+0x92>
 80074a8:	232b      	movs	r3, #43	; 0x2b
 80074aa:	e61c      	b.n	80070e6 <_svfiprintf_r+0x92>
 80074ac:	f817 2b01 	ldrb.w	r2, [r7], #1
 80074b0:	2a2a      	cmp	r2, #42	; 0x2a
 80074b2:	f000 81ae 	beq.w	8007812 <_svfiprintf_r+0x7be>
 80074b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074ba:	2500      	movs	r5, #0
 80074bc:	2909      	cmp	r1, #9
 80074be:	f63f ae14 	bhi.w	80070ea <_svfiprintf_r+0x96>
 80074c2:	4638      	mov	r0, r7
 80074c4:	2500      	movs	r5, #0
 80074c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80074ce:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80074d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074d6:	2909      	cmp	r1, #9
 80074d8:	4607      	mov	r7, r0
 80074da:	d9f4      	bls.n	80074c6 <_svfiprintf_r+0x472>
 80074dc:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80074e0:	e603      	b.n	80070ea <_svfiprintf_r+0x96>
 80074e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80074e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80074e6:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 80074ea:	b161      	cbz	r1, 8007506 <_svfiprintf_r+0x4b2>
 80074ec:	3301      	adds	r3, #1
 80074ee:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 80074f2:	3201      	adds	r2, #1
 80074f4:	6021      	str	r1, [r4, #0]
 80074f6:	2101      	movs	r1, #1
 80074f8:	2b07      	cmp	r3, #7
 80074fa:	6061      	str	r1, [r4, #4]
 80074fc:	922a      	str	r2, [sp, #168]	; 0xa8
 80074fe:	9329      	str	r3, [sp, #164]	; 0xa4
 8007500:	f300 811e 	bgt.w	8007740 <_svfiprintf_r+0x6ec>
 8007504:	3408      	adds	r4, #8
 8007506:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007508:	b159      	cbz	r1, 8007522 <_svfiprintf_r+0x4ce>
 800750a:	3301      	adds	r3, #1
 800750c:	a92b      	add	r1, sp, #172	; 0xac
 800750e:	3202      	adds	r2, #2
 8007510:	6021      	str	r1, [r4, #0]
 8007512:	2102      	movs	r1, #2
 8007514:	2b07      	cmp	r3, #7
 8007516:	6061      	str	r1, [r4, #4]
 8007518:	922a      	str	r2, [sp, #168]	; 0xa8
 800751a:	9329      	str	r3, [sp, #164]	; 0xa4
 800751c:	f300 811b 	bgt.w	8007756 <_svfiprintf_r+0x702>
 8007520:	3408      	adds	r4, #8
 8007522:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007524:	2880      	cmp	r0, #128	; 0x80
 8007526:	f000 80ae 	beq.w	8007686 <_svfiprintf_r+0x632>
 800752a:	9808      	ldr	r0, [sp, #32]
 800752c:	9903      	ldr	r1, [sp, #12]
 800752e:	1a45      	subs	r5, r0, r1
 8007530:	2d00      	cmp	r5, #0
 8007532:	dd33      	ble.n	800759c <_svfiprintf_r+0x548>
 8007534:	2d10      	cmp	r5, #16
 8007536:	4e06      	ldr	r6, [pc, #24]	; (8007550 <_svfiprintf_r+0x4fc>)
 8007538:	dd26      	ble.n	8007588 <_svfiprintf_r+0x534>
 800753a:	4621      	mov	r1, r4
 800753c:	f04f 0910 	mov.w	r9, #16
 8007540:	9c07      	ldr	r4, [sp, #28]
 8007542:	e00a      	b.n	800755a <_svfiprintf_r+0x506>
 8007544:	08008d24 	.word	0x08008d24
 8007548:	08008c70 	.word	0x08008c70
 800754c:	08008d10 	.word	0x08008d10
 8007550:	08008c80 	.word	0x08008c80
 8007554:	3d10      	subs	r5, #16
 8007556:	2d10      	cmp	r5, #16
 8007558:	dd15      	ble.n	8007586 <_svfiprintf_r+0x532>
 800755a:	3301      	adds	r3, #1
 800755c:	3210      	adds	r2, #16
 800755e:	e881 0240 	stmia.w	r1, {r6, r9}
 8007562:	3108      	adds	r1, #8
 8007564:	2b07      	cmp	r3, #7
 8007566:	922a      	str	r2, [sp, #168]	; 0xa8
 8007568:	9329      	str	r3, [sp, #164]	; 0xa4
 800756a:	ddf3      	ble.n	8007554 <_svfiprintf_r+0x500>
 800756c:	4620      	mov	r0, r4
 800756e:	4651      	mov	r1, sl
 8007570:	4642      	mov	r2, r8
 8007572:	f7ff fcef 	bl	8006f54 <__ssprint_r>
 8007576:	2800      	cmp	r0, #0
 8007578:	d178      	bne.n	800766c <_svfiprintf_r+0x618>
 800757a:	3d10      	subs	r5, #16
 800757c:	2d10      	cmp	r5, #16
 800757e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007580:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007582:	a90e      	add	r1, sp, #56	; 0x38
 8007584:	dce9      	bgt.n	800755a <_svfiprintf_r+0x506>
 8007586:	460c      	mov	r4, r1
 8007588:	3301      	adds	r3, #1
 800758a:	1952      	adds	r2, r2, r5
 800758c:	2b07      	cmp	r3, #7
 800758e:	6026      	str	r6, [r4, #0]
 8007590:	6065      	str	r5, [r4, #4]
 8007592:	922a      	str	r2, [sp, #168]	; 0xa8
 8007594:	9329      	str	r3, [sp, #164]	; 0xa4
 8007596:	f300 80c8 	bgt.w	800772a <_svfiprintf_r+0x6d6>
 800759a:	3408      	adds	r4, #8
 800759c:	9903      	ldr	r1, [sp, #12]
 800759e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075a0:	3301      	adds	r3, #1
 80075a2:	1852      	adds	r2, r2, r1
 80075a4:	2b07      	cmp	r3, #7
 80075a6:	e884 0003 	stmia.w	r4, {r0, r1}
 80075aa:	922a      	str	r2, [sp, #168]	; 0xa8
 80075ac:	9329      	str	r3, [sp, #164]	; 0xa4
 80075ae:	bfd8      	it	le
 80075b0:	f104 0108 	addle.w	r1, r4, #8
 80075b4:	f300 809a 	bgt.w	80076ec <_svfiprintf_r+0x698>
 80075b8:	f01b 0f04 	tst.w	fp, #4
 80075bc:	d02e      	beq.n	800761c <_svfiprintf_r+0x5c8>
 80075be:	9b06      	ldr	r3, [sp, #24]
 80075c0:	9802      	ldr	r0, [sp, #8]
 80075c2:	1a1d      	subs	r5, r3, r0
 80075c4:	2d00      	cmp	r5, #0
 80075c6:	dd29      	ble.n	800761c <_svfiprintf_r+0x5c8>
 80075c8:	2d10      	cmp	r5, #16
 80075ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80075cc:	4e97      	ldr	r6, [pc, #604]	; (800782c <_svfiprintf_r+0x7d8>)
 80075ce:	dd1c      	ble.n	800760a <_svfiprintf_r+0x5b6>
 80075d0:	2410      	movs	r4, #16
 80075d2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80075d6:	e002      	b.n	80075de <_svfiprintf_r+0x58a>
 80075d8:	3d10      	subs	r5, #16
 80075da:	2d10      	cmp	r5, #16
 80075dc:	dd15      	ble.n	800760a <_svfiprintf_r+0x5b6>
 80075de:	3301      	adds	r3, #1
 80075e0:	3210      	adds	r2, #16
 80075e2:	600e      	str	r6, [r1, #0]
 80075e4:	604c      	str	r4, [r1, #4]
 80075e6:	3108      	adds	r1, #8
 80075e8:	2b07      	cmp	r3, #7
 80075ea:	922a      	str	r2, [sp, #168]	; 0xa8
 80075ec:	9329      	str	r3, [sp, #164]	; 0xa4
 80075ee:	ddf3      	ble.n	80075d8 <_svfiprintf_r+0x584>
 80075f0:	4648      	mov	r0, r9
 80075f2:	4651      	mov	r1, sl
 80075f4:	4642      	mov	r2, r8
 80075f6:	f7ff fcad 	bl	8006f54 <__ssprint_r>
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d136      	bne.n	800766c <_svfiprintf_r+0x618>
 80075fe:	3d10      	subs	r5, #16
 8007600:	2d10      	cmp	r5, #16
 8007602:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007604:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007606:	a90e      	add	r1, sp, #56	; 0x38
 8007608:	dce9      	bgt.n	80075de <_svfiprintf_r+0x58a>
 800760a:	3301      	adds	r3, #1
 800760c:	18aa      	adds	r2, r5, r2
 800760e:	2b07      	cmp	r3, #7
 8007610:	600e      	str	r6, [r1, #0]
 8007612:	604d      	str	r5, [r1, #4]
 8007614:	922a      	str	r2, [sp, #168]	; 0xa8
 8007616:	9329      	str	r3, [sp, #164]	; 0xa4
 8007618:	f300 810c 	bgt.w	8007834 <_svfiprintf_r+0x7e0>
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	9902      	ldr	r1, [sp, #8]
 8007620:	9806      	ldr	r0, [sp, #24]
 8007622:	4281      	cmp	r1, r0
 8007624:	bfac      	ite	ge
 8007626:	185b      	addge	r3, r3, r1
 8007628:	181b      	addlt	r3, r3, r0
 800762a:	9304      	str	r3, [sp, #16]
 800762c:	2a00      	cmp	r2, #0
 800762e:	d167      	bne.n	8007700 <_svfiprintf_r+0x6ac>
 8007630:	2300      	movs	r3, #0
 8007632:	9329      	str	r3, [sp, #164]	; 0xa4
 8007634:	ac0e      	add	r4, sp, #56	; 0x38
 8007636:	e52c      	b.n	8007092 <_svfiprintf_r+0x3e>
 8007638:	2a00      	cmp	r2, #0
 800763a:	d169      	bne.n	8007710 <_svfiprintf_r+0x6bc>
 800763c:	f01b 0f01 	tst.w	fp, #1
 8007640:	bf04      	itt	eq
 8007642:	9203      	streq	r2, [sp, #12]
 8007644:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 8007648:	f43f ade7 	beq.w	800721a <_svfiprintf_r+0x1c6>
 800764c:	2330      	movs	r3, #48	; 0x30
 800764e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 8007652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007654:	9303      	str	r3, [sp, #12]
 8007656:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 800765a:	9309      	str	r3, [sp, #36]	; 0x24
 800765c:	e5dd      	b.n	800721a <_svfiprintf_r+0x1c6>
 800765e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007660:	b123      	cbz	r3, 800766c <_svfiprintf_r+0x618>
 8007662:	9807      	ldr	r0, [sp, #28]
 8007664:	4651      	mov	r1, sl
 8007666:	aa28      	add	r2, sp, #160	; 0xa0
 8007668:	f7ff fc74 	bl	8006f54 <__ssprint_r>
 800766c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007670:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007674:	9b04      	ldr	r3, [sp, #16]
 8007676:	bf18      	it	ne
 8007678:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800767c:	9304      	str	r3, [sp, #16]
 800767e:	9804      	ldr	r0, [sp, #16]
 8007680:	b02d      	add	sp, #180	; 0xb4
 8007682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007686:	9906      	ldr	r1, [sp, #24]
 8007688:	9802      	ldr	r0, [sp, #8]
 800768a:	1a0d      	subs	r5, r1, r0
 800768c:	2d00      	cmp	r5, #0
 800768e:	f77f af4c 	ble.w	800752a <_svfiprintf_r+0x4d6>
 8007692:	2d10      	cmp	r5, #16
 8007694:	4e66      	ldr	r6, [pc, #408]	; (8007830 <_svfiprintf_r+0x7dc>)
 8007696:	dd1e      	ble.n	80076d6 <_svfiprintf_r+0x682>
 8007698:	4621      	mov	r1, r4
 800769a:	f04f 0910 	mov.w	r9, #16
 800769e:	9c07      	ldr	r4, [sp, #28]
 80076a0:	e002      	b.n	80076a8 <_svfiprintf_r+0x654>
 80076a2:	3d10      	subs	r5, #16
 80076a4:	2d10      	cmp	r5, #16
 80076a6:	dd15      	ble.n	80076d4 <_svfiprintf_r+0x680>
 80076a8:	3301      	adds	r3, #1
 80076aa:	3210      	adds	r2, #16
 80076ac:	e881 0240 	stmia.w	r1, {r6, r9}
 80076b0:	3108      	adds	r1, #8
 80076b2:	2b07      	cmp	r3, #7
 80076b4:	922a      	str	r2, [sp, #168]	; 0xa8
 80076b6:	9329      	str	r3, [sp, #164]	; 0xa4
 80076b8:	ddf3      	ble.n	80076a2 <_svfiprintf_r+0x64e>
 80076ba:	4620      	mov	r0, r4
 80076bc:	4651      	mov	r1, sl
 80076be:	4642      	mov	r2, r8
 80076c0:	f7ff fc48 	bl	8006f54 <__ssprint_r>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d1d1      	bne.n	800766c <_svfiprintf_r+0x618>
 80076c8:	3d10      	subs	r5, #16
 80076ca:	2d10      	cmp	r5, #16
 80076cc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80076ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80076d0:	a90e      	add	r1, sp, #56	; 0x38
 80076d2:	dce9      	bgt.n	80076a8 <_svfiprintf_r+0x654>
 80076d4:	460c      	mov	r4, r1
 80076d6:	3301      	adds	r3, #1
 80076d8:	1952      	adds	r2, r2, r5
 80076da:	2b07      	cmp	r3, #7
 80076dc:	6026      	str	r6, [r4, #0]
 80076de:	6065      	str	r5, [r4, #4]
 80076e0:	922a      	str	r2, [sp, #168]	; 0xa8
 80076e2:	9329      	str	r3, [sp, #164]	; 0xa4
 80076e4:	f300 80d2 	bgt.w	800788c <_svfiprintf_r+0x838>
 80076e8:	3408      	adds	r4, #8
 80076ea:	e71e      	b.n	800752a <_svfiprintf_r+0x4d6>
 80076ec:	9807      	ldr	r0, [sp, #28]
 80076ee:	4651      	mov	r1, sl
 80076f0:	4642      	mov	r2, r8
 80076f2:	f7ff fc2f 	bl	8006f54 <__ssprint_r>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d1b8      	bne.n	800766c <_svfiprintf_r+0x618>
 80076fa:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80076fc:	a90e      	add	r1, sp, #56	; 0x38
 80076fe:	e75b      	b.n	80075b8 <_svfiprintf_r+0x564>
 8007700:	9807      	ldr	r0, [sp, #28]
 8007702:	4651      	mov	r1, sl
 8007704:	4642      	mov	r2, r8
 8007706:	f7ff fc25 	bl	8006f54 <__ssprint_r>
 800770a:	2800      	cmp	r0, #0
 800770c:	d090      	beq.n	8007630 <_svfiprintf_r+0x5dc>
 800770e:	e7ad      	b.n	800766c <_svfiprintf_r+0x618>
 8007710:	9103      	str	r1, [sp, #12]
 8007712:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007716:	e580      	b.n	800721a <_svfiprintf_r+0x1c6>
 8007718:	9807      	ldr	r0, [sp, #28]
 800771a:	4651      	mov	r1, sl
 800771c:	4642      	mov	r2, r8
 800771e:	f7ff fc19 	bl	8006f54 <__ssprint_r>
 8007722:	2800      	cmp	r0, #0
 8007724:	d1a2      	bne.n	800766c <_svfiprintf_r+0x618>
 8007726:	ac0e      	add	r4, sp, #56	; 0x38
 8007728:	e4cd      	b.n	80070c6 <_svfiprintf_r+0x72>
 800772a:	9807      	ldr	r0, [sp, #28]
 800772c:	4651      	mov	r1, sl
 800772e:	4642      	mov	r2, r8
 8007730:	f7ff fc10 	bl	8006f54 <__ssprint_r>
 8007734:	2800      	cmp	r0, #0
 8007736:	d199      	bne.n	800766c <_svfiprintf_r+0x618>
 8007738:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800773a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800773c:	ac0e      	add	r4, sp, #56	; 0x38
 800773e:	e72d      	b.n	800759c <_svfiprintf_r+0x548>
 8007740:	9807      	ldr	r0, [sp, #28]
 8007742:	4651      	mov	r1, sl
 8007744:	4642      	mov	r2, r8
 8007746:	f7ff fc05 	bl	8006f54 <__ssprint_r>
 800774a:	2800      	cmp	r0, #0
 800774c:	d18e      	bne.n	800766c <_svfiprintf_r+0x618>
 800774e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007750:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007752:	ac0e      	add	r4, sp, #56	; 0x38
 8007754:	e6d7      	b.n	8007506 <_svfiprintf_r+0x4b2>
 8007756:	9807      	ldr	r0, [sp, #28]
 8007758:	4651      	mov	r1, sl
 800775a:	4642      	mov	r2, r8
 800775c:	f7ff fbfa 	bl	8006f54 <__ssprint_r>
 8007760:	2800      	cmp	r0, #0
 8007762:	d183      	bne.n	800766c <_svfiprintf_r+0x618>
 8007764:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007766:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007768:	ac0e      	add	r4, sp, #56	; 0x38
 800776a:	e6da      	b.n	8007522 <_svfiprintf_r+0x4ce>
 800776c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800776e:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8007772:	f003 000f 	and.w	r0, r3, #15
 8007776:	4611      	mov	r1, r2
 8007778:	5c30      	ldrb	r0, [r6, r0]
 800777a:	3a01      	subs	r2, #1
 800777c:	091b      	lsrs	r3, r3, #4
 800777e:	7008      	strb	r0, [r1, #0]
 8007780:	d1f7      	bne.n	8007772 <_svfiprintf_r+0x71e>
 8007782:	ebc1 0308 	rsb	r3, r1, r8
 8007786:	9109      	str	r1, [sp, #36]	; 0x24
 8007788:	9303      	str	r3, [sp, #12]
 800778a:	e546      	b.n	800721a <_svfiprintf_r+0x1c6>
 800778c:	2b09      	cmp	r3, #9
 800778e:	bf82      	ittt	hi
 8007790:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 8007794:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 8007798:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 800779c:	d801      	bhi.n	80077a2 <_svfiprintf_r+0x74e>
 800779e:	3330      	adds	r3, #48	; 0x30
 80077a0:	e755      	b.n	800764e <_svfiprintf_r+0x5fa>
 80077a2:	fba6 0203 	umull	r0, r2, r6, r3
 80077a6:	08d2      	lsrs	r2, r2, #3
 80077a8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80077ac:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 80077b0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80077b4:	4608      	mov	r0, r1
 80077b6:	f881 c000 	strb.w	ip, [r1]
 80077ba:	4613      	mov	r3, r2
 80077bc:	3901      	subs	r1, #1
 80077be:	2a00      	cmp	r2, #0
 80077c0:	d1ef      	bne.n	80077a2 <_svfiprintf_r+0x74e>
 80077c2:	9009      	str	r0, [sp, #36]	; 0x24
 80077c4:	e526      	b.n	8007214 <_svfiprintf_r+0x1c0>
 80077c6:	9905      	ldr	r1, [sp, #20]
 80077c8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80077cc:	bf14      	ite	ne
 80077ce:	880b      	ldrhne	r3, [r1, #0]
 80077d0:	680b      	ldreq	r3, [r1, #0]
 80077d2:	2201      	movs	r2, #1
 80077d4:	9805      	ldr	r0, [sp, #20]
 80077d6:	1c19      	adds	r1, r3, #0
 80077d8:	bf18      	it	ne
 80077da:	2101      	movne	r1, #1
 80077dc:	3004      	adds	r0, #4
 80077de:	9005      	str	r0, [sp, #20]
 80077e0:	e4f4      	b.n	80071cc <_svfiprintf_r+0x178>
 80077e2:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 80077e6:	bf0b      	itete	eq
 80077e8:	9a05      	ldreq	r2, [sp, #20]
 80077ea:	9905      	ldrne	r1, [sp, #20]
 80077ec:	6813      	ldreq	r3, [r2, #0]
 80077ee:	880b      	ldrhne	r3, [r1, #0]
 80077f0:	bf08      	it	eq
 80077f2:	460a      	moveq	r2, r1
 80077f4:	e7ee      	b.n	80077d4 <_svfiprintf_r+0x780>
 80077f6:	2202      	movs	r2, #2
 80077f8:	e4e8      	b.n	80071cc <_svfiprintf_r+0x178>
 80077fa:	9807      	ldr	r0, [sp, #28]
 80077fc:	4651      	mov	r1, sl
 80077fe:	4642      	mov	r2, r8
 8007800:	f7ff fba8 	bl	8006f54 <__ssprint_r>
 8007804:	2800      	cmp	r0, #0
 8007806:	f47f af31 	bne.w	800766c <_svfiprintf_r+0x618>
 800780a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800780c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800780e:	ac0e      	add	r4, sp, #56	; 0x38
 8007810:	e669      	b.n	80074e6 <_svfiprintf_r+0x492>
 8007812:	9a05      	ldr	r2, [sp, #20]
 8007814:	6815      	ldr	r5, [r2, #0]
 8007816:	3204      	adds	r2, #4
 8007818:	2d00      	cmp	r5, #0
 800781a:	bfbc      	itt	lt
 800781c:	9205      	strlt	r2, [sp, #20]
 800781e:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8007822:	f6ff ac60 	blt.w	80070e6 <_svfiprintf_r+0x92>
 8007826:	9205      	str	r2, [sp, #20]
 8007828:	e45d      	b.n	80070e6 <_svfiprintf_r+0x92>
 800782a:	bf00      	nop
 800782c:	08008c70 	.word	0x08008c70
 8007830:	08008c80 	.word	0x08008c80
 8007834:	9807      	ldr	r0, [sp, #28]
 8007836:	4651      	mov	r1, sl
 8007838:	4642      	mov	r2, r8
 800783a:	f7ff fb8b 	bl	8006f54 <__ssprint_r>
 800783e:	2800      	cmp	r0, #0
 8007840:	f47f af14 	bne.w	800766c <_svfiprintf_r+0x618>
 8007844:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007846:	e6e9      	b.n	800761c <_svfiprintf_r+0x5c8>
 8007848:	2930      	cmp	r1, #48	; 0x30
 800784a:	d004      	beq.n	8007856 <_svfiprintf_r+0x802>
 800784c:	1e93      	subs	r3, r2, #2
 800784e:	9309      	str	r3, [sp, #36]	; 0x24
 8007850:	2330      	movs	r3, #48	; 0x30
 8007852:	f802 3c02 	strb.w	r3, [r2, #-2]
 8007856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007858:	ebc3 0308 	rsb	r3, r3, r8
 800785c:	9303      	str	r3, [sp, #12]
 800785e:	e4dc      	b.n	800721a <_svfiprintf_r+0x1c6>
 8007860:	9805      	ldr	r0, [sp, #20]
 8007862:	9904      	ldr	r1, [sp, #16]
 8007864:	6803      	ldr	r3, [r0, #0]
 8007866:	3004      	adds	r0, #4
 8007868:	9005      	str	r0, [sp, #20]
 800786a:	6019      	str	r1, [r3, #0]
 800786c:	e411      	b.n	8007092 <_svfiprintf_r+0x3e>
 800786e:	9a05      	ldr	r2, [sp, #20]
 8007870:	6813      	ldr	r3, [r2, #0]
 8007872:	3204      	adds	r2, #4
 8007874:	9205      	str	r2, [sp, #20]
 8007876:	e54e      	b.n	8007316 <_svfiprintf_r+0x2c2>
 8007878:	9905      	ldr	r1, [sp, #20]
 800787a:	880b      	ldrh	r3, [r1, #0]
 800787c:	3104      	adds	r1, #4
 800787e:	9105      	str	r1, [sp, #20]
 8007880:	e52b      	b.n	80072da <_svfiprintf_r+0x286>
 8007882:	f7ff fb37 	bl	8006ef4 <strlen>
 8007886:	9608      	str	r6, [sp, #32]
 8007888:	9003      	str	r0, [sp, #12]
 800788a:	e4c7      	b.n	800721c <_svfiprintf_r+0x1c8>
 800788c:	9807      	ldr	r0, [sp, #28]
 800788e:	4651      	mov	r1, sl
 8007890:	4642      	mov	r2, r8
 8007892:	f7ff fb5f 	bl	8006f54 <__ssprint_r>
 8007896:	2800      	cmp	r0, #0
 8007898:	f47f aee8 	bne.w	800766c <_svfiprintf_r+0x618>
 800789c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800789e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80078a0:	ac0e      	add	r4, sp, #56	; 0x38
 80078a2:	e642      	b.n	800752a <_svfiprintf_r+0x4d6>
 80078a4:	9905      	ldr	r1, [sp, #20]
 80078a6:	9a04      	ldr	r2, [sp, #16]
 80078a8:	680b      	ldr	r3, [r1, #0]
 80078aa:	3104      	adds	r1, #4
 80078ac:	9105      	str	r1, [sp, #20]
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	f7ff bbef 	b.w	8007092 <_svfiprintf_r+0x3e>
 80078b4:	2140      	movs	r1, #64	; 0x40
 80078b6:	9200      	str	r2, [sp, #0]
 80078b8:	f7fe fa56 	bl	8005d68 <_malloc_r>
 80078bc:	9a00      	ldr	r2, [sp, #0]
 80078be:	f8ca 0000 	str.w	r0, [sl]
 80078c2:	f8ca 0010 	str.w	r0, [sl, #16]
 80078c6:	b188      	cbz	r0, 80078ec <_svfiprintf_r+0x898>
 80078c8:	2340      	movs	r3, #64	; 0x40
 80078ca:	f8ca 3014 	str.w	r3, [sl, #20]
 80078ce:	f7ff bbcf 	b.w	8007070 <_svfiprintf_r+0x1c>
 80078d2:	2d06      	cmp	r5, #6
 80078d4:	bf28      	it	cs
 80078d6:	2506      	movcs	r5, #6
 80078d8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 80078dc:	9302      	str	r3, [sp, #8]
 80078de:	4b07      	ldr	r3, [pc, #28]	; (80078fc <_svfiprintf_r+0x8a8>)
 80078e0:	9503      	str	r5, [sp, #12]
 80078e2:	9309      	str	r3, [sp, #36]	; 0x24
 80078e4:	e52e      	b.n	8007344 <_svfiprintf_r+0x2f0>
 80078e6:	9503      	str	r5, [sp, #12]
 80078e8:	9008      	str	r0, [sp, #32]
 80078ea:	e497      	b.n	800721c <_svfiprintf_r+0x1c8>
 80078ec:	9807      	ldr	r0, [sp, #28]
 80078ee:	230c      	movs	r3, #12
 80078f0:	6003      	str	r3, [r0, #0]
 80078f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078f6:	9304      	str	r3, [sp, #16]
 80078f8:	e6c1      	b.n	800767e <_svfiprintf_r+0x62a>
 80078fa:	bf00      	nop
 80078fc:	08008d38 	.word	0x08008d38

08007900 <_calloc_r>:
 8007900:	b510      	push	{r4, lr}
 8007902:	fb01 f102 	mul.w	r1, r1, r2
 8007906:	f7fe fa2f 	bl	8005d68 <_malloc_r>
 800790a:	4604      	mov	r4, r0
 800790c:	b300      	cbz	r0, 8007950 <_calloc_r+0x50>
 800790e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007912:	f022 0203 	bic.w	r2, r2, #3
 8007916:	3a04      	subs	r2, #4
 8007918:	2a24      	cmp	r2, #36	; 0x24
 800791a:	d81b      	bhi.n	8007954 <_calloc_r+0x54>
 800791c:	2a13      	cmp	r2, #19
 800791e:	bf98      	it	ls
 8007920:	4602      	movls	r2, r0
 8007922:	d911      	bls.n	8007948 <_calloc_r+0x48>
 8007924:	2300      	movs	r3, #0
 8007926:	2a1b      	cmp	r2, #27
 8007928:	6003      	str	r3, [r0, #0]
 800792a:	6043      	str	r3, [r0, #4]
 800792c:	bf98      	it	ls
 800792e:	f100 0208 	addls.w	r2, r0, #8
 8007932:	d909      	bls.n	8007948 <_calloc_r+0x48>
 8007934:	2a24      	cmp	r2, #36	; 0x24
 8007936:	6083      	str	r3, [r0, #8]
 8007938:	60c3      	str	r3, [r0, #12]
 800793a:	bf11      	iteee	ne
 800793c:	f100 0210 	addne.w	r2, r0, #16
 8007940:	6103      	streq	r3, [r0, #16]
 8007942:	6143      	streq	r3, [r0, #20]
 8007944:	f100 0218 	addeq.w	r2, r0, #24
 8007948:	2300      	movs	r3, #0
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	6053      	str	r3, [r2, #4]
 800794e:	6093      	str	r3, [r2, #8]
 8007950:	4620      	mov	r0, r4
 8007952:	bd10      	pop	{r4, pc}
 8007954:	2100      	movs	r1, #0
 8007956:	f000 f85b 	bl	8007a10 <memset>
 800795a:	4620      	mov	r0, r4
 800795c:	bd10      	pop	{r4, pc}
 800795e:	bf00      	nop

08007960 <memmove>:
 8007960:	4288      	cmp	r0, r1
 8007962:	b4f0      	push	{r4, r5, r6, r7}
 8007964:	d912      	bls.n	800798c <memmove+0x2c>
 8007966:	188d      	adds	r5, r1, r2
 8007968:	42a8      	cmp	r0, r5
 800796a:	d20f      	bcs.n	800798c <memmove+0x2c>
 800796c:	b162      	cbz	r2, 8007988 <memmove+0x28>
 800796e:	4251      	negs	r1, r2
 8007970:	4613      	mov	r3, r2
 8007972:	1882      	adds	r2, r0, r2
 8007974:	186d      	adds	r5, r5, r1
 8007976:	1852      	adds	r2, r2, r1
 8007978:	18ec      	adds	r4, r5, r3
 800797a:	18d1      	adds	r1, r2, r3
 800797c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 8007980:	3b01      	subs	r3, #1
 8007982:	f801 4c01 	strb.w	r4, [r1, #-1]
 8007986:	d1f7      	bne.n	8007978 <memmove+0x18>
 8007988:	bcf0      	pop	{r4, r5, r6, r7}
 800798a:	4770      	bx	lr
 800798c:	2a0f      	cmp	r2, #15
 800798e:	bf98      	it	ls
 8007990:	4603      	movls	r3, r0
 8007992:	d931      	bls.n	80079f8 <memmove+0x98>
 8007994:	ea41 0300 	orr.w	r3, r1, r0
 8007998:	079b      	lsls	r3, r3, #30
 800799a:	d137      	bne.n	8007a0c <memmove+0xac>
 800799c:	460c      	mov	r4, r1
 800799e:	4603      	mov	r3, r0
 80079a0:	4615      	mov	r5, r2
 80079a2:	6826      	ldr	r6, [r4, #0]
 80079a4:	601e      	str	r6, [r3, #0]
 80079a6:	6866      	ldr	r6, [r4, #4]
 80079a8:	605e      	str	r6, [r3, #4]
 80079aa:	68a6      	ldr	r6, [r4, #8]
 80079ac:	609e      	str	r6, [r3, #8]
 80079ae:	68e6      	ldr	r6, [r4, #12]
 80079b0:	3d10      	subs	r5, #16
 80079b2:	60de      	str	r6, [r3, #12]
 80079b4:	3410      	adds	r4, #16
 80079b6:	3310      	adds	r3, #16
 80079b8:	2d0f      	cmp	r5, #15
 80079ba:	d8f2      	bhi.n	80079a2 <memmove+0x42>
 80079bc:	f1a2 0410 	sub.w	r4, r2, #16
 80079c0:	f024 040f 	bic.w	r4, r4, #15
 80079c4:	f002 020f 	and.w	r2, r2, #15
 80079c8:	3410      	adds	r4, #16
 80079ca:	2a03      	cmp	r2, #3
 80079cc:	eb00 0304 	add.w	r3, r0, r4
 80079d0:	4421      	add	r1, r4
 80079d2:	d911      	bls.n	80079f8 <memmove+0x98>
 80079d4:	1f0e      	subs	r6, r1, #4
 80079d6:	461d      	mov	r5, r3
 80079d8:	4614      	mov	r4, r2
 80079da:	f856 7f04 	ldr.w	r7, [r6, #4]!
 80079de:	3c04      	subs	r4, #4
 80079e0:	2c03      	cmp	r4, #3
 80079e2:	f845 7b04 	str.w	r7, [r5], #4
 80079e6:	d8f8      	bhi.n	80079da <memmove+0x7a>
 80079e8:	1f14      	subs	r4, r2, #4
 80079ea:	f024 0403 	bic.w	r4, r4, #3
 80079ee:	3404      	adds	r4, #4
 80079f0:	f002 0203 	and.w	r2, r2, #3
 80079f4:	1909      	adds	r1, r1, r4
 80079f6:	191b      	adds	r3, r3, r4
 80079f8:	2a00      	cmp	r2, #0
 80079fa:	d0c5      	beq.n	8007988 <memmove+0x28>
 80079fc:	3901      	subs	r1, #1
 80079fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a02:	3a01      	subs	r2, #1
 8007a04:	f803 4b01 	strb.w	r4, [r3], #1
 8007a08:	d1f9      	bne.n	80079fe <memmove+0x9e>
 8007a0a:	e7bd      	b.n	8007988 <memmove+0x28>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	e7f5      	b.n	80079fc <memmove+0x9c>

08007a10 <memset>:
 8007a10:	f010 0f03 	tst.w	r0, #3
 8007a14:	b470      	push	{r4, r5, r6}
 8007a16:	4603      	mov	r3, r0
 8007a18:	d042      	beq.n	8007aa0 <memset+0x90>
 8007a1a:	2a00      	cmp	r2, #0
 8007a1c:	d03e      	beq.n	8007a9c <memset+0x8c>
 8007a1e:	3a01      	subs	r2, #1
 8007a20:	b2cd      	uxtb	r5, r1
 8007a22:	e003      	b.n	8007a2c <memset+0x1c>
 8007a24:	1e54      	subs	r4, r2, #1
 8007a26:	2a00      	cmp	r2, #0
 8007a28:	d038      	beq.n	8007a9c <memset+0x8c>
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	f803 5b01 	strb.w	r5, [r3], #1
 8007a30:	f013 0f03 	tst.w	r3, #3
 8007a34:	461c      	mov	r4, r3
 8007a36:	d1f5      	bne.n	8007a24 <memset+0x14>
 8007a38:	2a03      	cmp	r2, #3
 8007a3a:	d929      	bls.n	8007a90 <memset+0x80>
 8007a3c:	b2cd      	uxtb	r5, r1
 8007a3e:	2a0f      	cmp	r2, #15
 8007a40:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007a44:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007a48:	bf84      	itt	hi
 8007a4a:	4623      	movhi	r3, r4
 8007a4c:	4616      	movhi	r6, r2
 8007a4e:	d911      	bls.n	8007a74 <memset+0x64>
 8007a50:	3e10      	subs	r6, #16
 8007a52:	601d      	str	r5, [r3, #0]
 8007a54:	605d      	str	r5, [r3, #4]
 8007a56:	609d      	str	r5, [r3, #8]
 8007a58:	60dd      	str	r5, [r3, #12]
 8007a5a:	3310      	adds	r3, #16
 8007a5c:	2e0f      	cmp	r6, #15
 8007a5e:	d8f7      	bhi.n	8007a50 <memset+0x40>
 8007a60:	f1a2 0310 	sub.w	r3, r2, #16
 8007a64:	f023 030f 	bic.w	r3, r3, #15
 8007a68:	f002 020f 	and.w	r2, r2, #15
 8007a6c:	3310      	adds	r3, #16
 8007a6e:	2a03      	cmp	r2, #3
 8007a70:	441c      	add	r4, r3
 8007a72:	d90d      	bls.n	8007a90 <memset+0x80>
 8007a74:	4626      	mov	r6, r4
 8007a76:	4613      	mov	r3, r2
 8007a78:	3b04      	subs	r3, #4
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	f846 5b04 	str.w	r5, [r6], #4
 8007a80:	d8fa      	bhi.n	8007a78 <memset+0x68>
 8007a82:	1f13      	subs	r3, r2, #4
 8007a84:	f023 0303 	bic.w	r3, r3, #3
 8007a88:	3304      	adds	r3, #4
 8007a8a:	f002 0203 	and.w	r2, r2, #3
 8007a8e:	18e4      	adds	r4, r4, r3
 8007a90:	b2c9      	uxtb	r1, r1
 8007a92:	b11a      	cbz	r2, 8007a9c <memset+0x8c>
 8007a94:	3a01      	subs	r2, #1
 8007a96:	f804 1b01 	strb.w	r1, [r4], #1
 8007a9a:	d1fb      	bne.n	8007a94 <memset+0x84>
 8007a9c:	bc70      	pop	{r4, r5, r6}
 8007a9e:	4770      	bx	lr
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	e7c9      	b.n	8007a38 <memset+0x28>

08007aa4 <_realloc_r>:
 8007aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	b083      	sub	sp, #12
 8007aac:	4607      	mov	r7, r0
 8007aae:	4690      	mov	r8, r2
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	f000 80fe 	beq.w	8007cb2 <_realloc_r+0x20e>
 8007ab6:	f108 050b 	add.w	r5, r8, #11
 8007aba:	f7fe fc8b 	bl	80063d4 <__malloc_lock>
 8007abe:	2d16      	cmp	r5, #22
 8007ac0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007ac4:	d87d      	bhi.n	8007bc2 <_realloc_r+0x11e>
 8007ac6:	2210      	movs	r2, #16
 8007ac8:	2600      	movs	r6, #0
 8007aca:	4615      	mov	r5, r2
 8007acc:	4545      	cmp	r5, r8
 8007ace:	bf38      	it	cc
 8007ad0:	f046 0601 	orrcc.w	r6, r6, #1
 8007ad4:	2e00      	cmp	r6, #0
 8007ad6:	f040 80f2 	bne.w	8007cbe <_realloc_r+0x21a>
 8007ada:	f021 0a03 	bic.w	sl, r1, #3
 8007ade:	4592      	cmp	sl, r2
 8007ae0:	f1a4 0b08 	sub.w	fp, r4, #8
 8007ae4:	bfa8      	it	ge
 8007ae6:	4656      	movge	r6, sl
 8007ae8:	da55      	bge.n	8007b96 <_realloc_r+0xf2>
 8007aea:	4ba0      	ldr	r3, [pc, #640]	; (8007d6c <_realloc_r+0x2c8>)
 8007aec:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007af0:	eb0b 000a 	add.w	r0, fp, sl
 8007af4:	4584      	cmp	ip, r0
 8007af6:	f000 80e7 	beq.w	8007cc8 <_realloc_r+0x224>
 8007afa:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007afe:	f02e 0901 	bic.w	r9, lr, #1
 8007b02:	4481      	add	r9, r0
 8007b04:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8007b08:	f019 0f01 	tst.w	r9, #1
 8007b0c:	bf1c      	itt	ne
 8007b0e:	46b6      	movne	lr, r6
 8007b10:	4670      	movne	r0, lr
 8007b12:	d05b      	beq.n	8007bcc <_realloc_r+0x128>
 8007b14:	07c9      	lsls	r1, r1, #31
 8007b16:	d479      	bmi.n	8007c0c <_realloc_r+0x168>
 8007b18:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007b1c:	ebc1 090b 	rsb	r9, r1, fp
 8007b20:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b24:	f021 0103 	bic.w	r1, r1, #3
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f000 8097 	beq.w	8007c5c <_realloc_r+0x1b8>
 8007b2e:	4560      	cmp	r0, ip
 8007b30:	eb01 0c0a 	add.w	ip, r1, sl
 8007b34:	eb0e 060c 	add.w	r6, lr, ip
 8007b38:	f000 811a 	beq.w	8007d70 <_realloc_r+0x2cc>
 8007b3c:	42b2      	cmp	r2, r6
 8007b3e:	f300 808f 	bgt.w	8007c60 <_realloc_r+0x1bc>
 8007b42:	68c3      	ldr	r3, [r0, #12]
 8007b44:	6882      	ldr	r2, [r0, #8]
 8007b46:	46c8      	mov	r8, r9
 8007b48:	609a      	str	r2, [r3, #8]
 8007b4a:	60d3      	str	r3, [r2, #12]
 8007b4c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007b50:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8007b54:	f1aa 0204 	sub.w	r2, sl, #4
 8007b58:	2a24      	cmp	r2, #36	; 0x24
 8007b5a:	60cb      	str	r3, [r1, #12]
 8007b5c:	6099      	str	r1, [r3, #8]
 8007b5e:	f200 8144 	bhi.w	8007dea <_realloc_r+0x346>
 8007b62:	2a13      	cmp	r2, #19
 8007b64:	bf98      	it	ls
 8007b66:	4643      	movls	r3, r8
 8007b68:	d90b      	bls.n	8007b82 <_realloc_r+0xde>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	f8c9 3008 	str.w	r3, [r9, #8]
 8007b70:	6863      	ldr	r3, [r4, #4]
 8007b72:	2a1b      	cmp	r2, #27
 8007b74:	f8c9 300c 	str.w	r3, [r9, #12]
 8007b78:	f200 8140 	bhi.w	8007dfc <_realloc_r+0x358>
 8007b7c:	f109 0310 	add.w	r3, r9, #16
 8007b80:	3408      	adds	r4, #8
 8007b82:	6822      	ldr	r2, [r4, #0]
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	6862      	ldr	r2, [r4, #4]
 8007b88:	605a      	str	r2, [r3, #4]
 8007b8a:	68a2      	ldr	r2, [r4, #8]
 8007b8c:	609a      	str	r2, [r3, #8]
 8007b8e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b92:	4644      	mov	r4, r8
 8007b94:	46cb      	mov	fp, r9
 8007b96:	1b72      	subs	r2, r6, r5
 8007b98:	2a0f      	cmp	r2, #15
 8007b9a:	d822      	bhi.n	8007be2 <_realloc_r+0x13e>
 8007b9c:	f001 0101 	and.w	r1, r1, #1
 8007ba0:	eb0b 0306 	add.w	r3, fp, r6
 8007ba4:	430e      	orrs	r6, r1
 8007ba6:	f8cb 6004 	str.w	r6, [fp, #4]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	f042 0201 	orr.w	r2, r2, #1
 8007bb0:	605a      	str	r2, [r3, #4]
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	f7fe fc10 	bl	80063d8 <__malloc_unlock>
 8007bb8:	46a0      	mov	r8, r4
 8007bba:	4640      	mov	r0, r8
 8007bbc:	b003      	add	sp, #12
 8007bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc2:	f025 0507 	bic.w	r5, r5, #7
 8007bc6:	462a      	mov	r2, r5
 8007bc8:	0fee      	lsrs	r6, r5, #31
 8007bca:	e77f      	b.n	8007acc <_realloc_r+0x28>
 8007bcc:	f02e 0e03 	bic.w	lr, lr, #3
 8007bd0:	eb0e 060a 	add.w	r6, lr, sl
 8007bd4:	42b2      	cmp	r2, r6
 8007bd6:	dc9d      	bgt.n	8007b14 <_realloc_r+0x70>
 8007bd8:	68c3      	ldr	r3, [r0, #12]
 8007bda:	6882      	ldr	r2, [r0, #8]
 8007bdc:	60d3      	str	r3, [r2, #12]
 8007bde:	609a      	str	r2, [r3, #8]
 8007be0:	e7d9      	b.n	8007b96 <_realloc_r+0xf2>
 8007be2:	eb0b 0305 	add.w	r3, fp, r5
 8007be6:	f001 0101 	and.w	r1, r1, #1
 8007bea:	1898      	adds	r0, r3, r2
 8007bec:	430d      	orrs	r5, r1
 8007bee:	f042 0201 	orr.w	r2, r2, #1
 8007bf2:	f8cb 5004 	str.w	r5, [fp, #4]
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	6842      	ldr	r2, [r0, #4]
 8007bfa:	f042 0201 	orr.w	r2, r2, #1
 8007bfe:	6042      	str	r2, [r0, #4]
 8007c00:	f103 0108 	add.w	r1, r3, #8
 8007c04:	4638      	mov	r0, r7
 8007c06:	f7fd ffa3 	bl	8005b50 <_free_r>
 8007c0a:	e7d2      	b.n	8007bb2 <_realloc_r+0x10e>
 8007c0c:	4641      	mov	r1, r8
 8007c0e:	4638      	mov	r0, r7
 8007c10:	f7fe f8aa 	bl	8005d68 <_malloc_r>
 8007c14:	4680      	mov	r8, r0
 8007c16:	b1e8      	cbz	r0, 8007c54 <_realloc_r+0x1b0>
 8007c18:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007c1c:	f021 0301 	bic.w	r3, r1, #1
 8007c20:	f1a0 0208 	sub.w	r2, r0, #8
 8007c24:	445b      	add	r3, fp
 8007c26:	429a      	cmp	r2, r3
 8007c28:	f000 80d9 	beq.w	8007dde <_realloc_r+0x33a>
 8007c2c:	f1aa 0204 	sub.w	r2, sl, #4
 8007c30:	2a24      	cmp	r2, #36	; 0x24
 8007c32:	f200 8096 	bhi.w	8007d62 <_realloc_r+0x2be>
 8007c36:	2a13      	cmp	r2, #19
 8007c38:	bf9c      	itt	ls
 8007c3a:	4603      	movls	r3, r0
 8007c3c:	4622      	movls	r2, r4
 8007c3e:	d863      	bhi.n	8007d08 <_realloc_r+0x264>
 8007c40:	6811      	ldr	r1, [r2, #0]
 8007c42:	6019      	str	r1, [r3, #0]
 8007c44:	6851      	ldr	r1, [r2, #4]
 8007c46:	6059      	str	r1, [r3, #4]
 8007c48:	6892      	ldr	r2, [r2, #8]
 8007c4a:	609a      	str	r2, [r3, #8]
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	4621      	mov	r1, r4
 8007c50:	f7fd ff7e 	bl	8005b50 <_free_r>
 8007c54:	4638      	mov	r0, r7
 8007c56:	f7fe fbbf 	bl	80063d8 <__malloc_unlock>
 8007c5a:	e7ae      	b.n	8007bba <_realloc_r+0x116>
 8007c5c:	eb01 0c0a 	add.w	ip, r1, sl
 8007c60:	4562      	cmp	r2, ip
 8007c62:	dcd3      	bgt.n	8007c0c <_realloc_r+0x168>
 8007c64:	464e      	mov	r6, r9
 8007c66:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007c6a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8007c6e:	f1aa 0204 	sub.w	r2, sl, #4
 8007c72:	2a24      	cmp	r2, #36	; 0x24
 8007c74:	60cb      	str	r3, [r1, #12]
 8007c76:	6099      	str	r1, [r3, #8]
 8007c78:	d865      	bhi.n	8007d46 <_realloc_r+0x2a2>
 8007c7a:	2a13      	cmp	r2, #19
 8007c7c:	bf98      	it	ls
 8007c7e:	4633      	movls	r3, r6
 8007c80:	d90b      	bls.n	8007c9a <_realloc_r+0x1f6>
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	f8c9 3008 	str.w	r3, [r9, #8]
 8007c88:	6863      	ldr	r3, [r4, #4]
 8007c8a:	2a1b      	cmp	r2, #27
 8007c8c:	f8c9 300c 	str.w	r3, [r9, #12]
 8007c90:	f200 80c0 	bhi.w	8007e14 <_realloc_r+0x370>
 8007c94:	f109 0310 	add.w	r3, r9, #16
 8007c98:	3408      	adds	r4, #8
 8007c9a:	6822      	ldr	r2, [r4, #0]
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	6862      	ldr	r2, [r4, #4]
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	68a2      	ldr	r2, [r4, #8]
 8007ca4:	609a      	str	r2, [r3, #8]
 8007ca6:	4634      	mov	r4, r6
 8007ca8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007cac:	4666      	mov	r6, ip
 8007cae:	46cb      	mov	fp, r9
 8007cb0:	e771      	b.n	8007b96 <_realloc_r+0xf2>
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	b003      	add	sp, #12
 8007cb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cba:	f7fe b855 	b.w	8005d68 <_malloc_r>
 8007cbe:	230c      	movs	r3, #12
 8007cc0:	603b      	str	r3, [r7, #0]
 8007cc2:	f04f 0800 	mov.w	r8, #0
 8007cc6:	e778      	b.n	8007bba <_realloc_r+0x116>
 8007cc8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007ccc:	f026 0e03 	bic.w	lr, r6, #3
 8007cd0:	eb0e 000a 	add.w	r0, lr, sl
 8007cd4:	f105 0610 	add.w	r6, r5, #16
 8007cd8:	42b0      	cmp	r0, r6
 8007cda:	bfb8      	it	lt
 8007cdc:	4660      	movlt	r0, ip
 8007cde:	f6ff af19 	blt.w	8007b14 <_realloc_r+0x70>
 8007ce2:	eb0b 0205 	add.w	r2, fp, r5
 8007ce6:	1b41      	subs	r1, r0, r5
 8007ce8:	f041 0101 	orr.w	r1, r1, #1
 8007cec:	6051      	str	r1, [r2, #4]
 8007cee:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007cf2:	609a      	str	r2, [r3, #8]
 8007cf4:	f001 0301 	and.w	r3, r1, #1
 8007cf8:	431d      	orrs	r5, r3
 8007cfa:	f844 5c04 	str.w	r5, [r4, #-4]
 8007cfe:	4638      	mov	r0, r7
 8007d00:	f7fe fb6a 	bl	80063d8 <__malloc_unlock>
 8007d04:	46a0      	mov	r8, r4
 8007d06:	e758      	b.n	8007bba <_realloc_r+0x116>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	6003      	str	r3, [r0, #0]
 8007d0c:	6863      	ldr	r3, [r4, #4]
 8007d0e:	2a1b      	cmp	r2, #27
 8007d10:	6043      	str	r3, [r0, #4]
 8007d12:	bf9c      	itt	ls
 8007d14:	f104 0208 	addls.w	r2, r4, #8
 8007d18:	f100 0308 	addls.w	r3, r0, #8
 8007d1c:	d990      	bls.n	8007c40 <_realloc_r+0x19c>
 8007d1e:	68a3      	ldr	r3, [r4, #8]
 8007d20:	6083      	str	r3, [r0, #8]
 8007d22:	68e3      	ldr	r3, [r4, #12]
 8007d24:	2a24      	cmp	r2, #36	; 0x24
 8007d26:	60c3      	str	r3, [r0, #12]
 8007d28:	bf03      	ittte	eq
 8007d2a:	6923      	ldreq	r3, [r4, #16]
 8007d2c:	6103      	streq	r3, [r0, #16]
 8007d2e:	6962      	ldreq	r2, [r4, #20]
 8007d30:	f100 0310 	addne.w	r3, r0, #16
 8007d34:	bf09      	itett	eq
 8007d36:	6142      	streq	r2, [r0, #20]
 8007d38:	f104 0210 	addne.w	r2, r4, #16
 8007d3c:	f100 0318 	addeq.w	r3, r0, #24
 8007d40:	f104 0218 	addeq.w	r2, r4, #24
 8007d44:	e77c      	b.n	8007c40 <_realloc_r+0x19c>
 8007d46:	4621      	mov	r1, r4
 8007d48:	4630      	mov	r0, r6
 8007d4a:	f8cd c004 	str.w	ip, [sp, #4]
 8007d4e:	f7ff fe07 	bl	8007960 <memmove>
 8007d52:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007d56:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d5a:	4634      	mov	r4, r6
 8007d5c:	46cb      	mov	fp, r9
 8007d5e:	4666      	mov	r6, ip
 8007d60:	e719      	b.n	8007b96 <_realloc_r+0xf2>
 8007d62:	4621      	mov	r1, r4
 8007d64:	f7ff fdfc 	bl	8007960 <memmove>
 8007d68:	e770      	b.n	8007c4c <_realloc_r+0x1a8>
 8007d6a:	bf00      	nop
 8007d6c:	200005b4 	.word	0x200005b4
 8007d70:	f105 0110 	add.w	r1, r5, #16
 8007d74:	428e      	cmp	r6, r1
 8007d76:	f6ff af73 	blt.w	8007c60 <_realloc_r+0x1bc>
 8007d7a:	46c8      	mov	r8, r9
 8007d7c:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8007d80:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8007d84:	f1aa 0204 	sub.w	r2, sl, #4
 8007d88:	2a24      	cmp	r2, #36	; 0x24
 8007d8a:	60c1      	str	r1, [r0, #12]
 8007d8c:	6088      	str	r0, [r1, #8]
 8007d8e:	d861      	bhi.n	8007e54 <_realloc_r+0x3b0>
 8007d90:	2a13      	cmp	r2, #19
 8007d92:	bf98      	it	ls
 8007d94:	4642      	movls	r2, r8
 8007d96:	d90a      	bls.n	8007dae <_realloc_r+0x30a>
 8007d98:	6821      	ldr	r1, [r4, #0]
 8007d9a:	f8c9 1008 	str.w	r1, [r9, #8]
 8007d9e:	6861      	ldr	r1, [r4, #4]
 8007da0:	2a1b      	cmp	r2, #27
 8007da2:	f8c9 100c 	str.w	r1, [r9, #12]
 8007da6:	d85c      	bhi.n	8007e62 <_realloc_r+0x3be>
 8007da8:	f109 0210 	add.w	r2, r9, #16
 8007dac:	3408      	adds	r4, #8
 8007dae:	6821      	ldr	r1, [r4, #0]
 8007db0:	6011      	str	r1, [r2, #0]
 8007db2:	6861      	ldr	r1, [r4, #4]
 8007db4:	6051      	str	r1, [r2, #4]
 8007db6:	68a1      	ldr	r1, [r4, #8]
 8007db8:	6091      	str	r1, [r2, #8]
 8007dba:	eb09 0205 	add.w	r2, r9, r5
 8007dbe:	1b71      	subs	r1, r6, r5
 8007dc0:	f041 0101 	orr.w	r1, r1, #1
 8007dc4:	6051      	str	r1, [r2, #4]
 8007dc6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007dca:	609a      	str	r2, [r3, #8]
 8007dcc:	f001 0301 	and.w	r3, r1, #1
 8007dd0:	431d      	orrs	r5, r3
 8007dd2:	f8c9 5004 	str.w	r5, [r9, #4]
 8007dd6:	4638      	mov	r0, r7
 8007dd8:	f7fe fafe 	bl	80063d8 <__malloc_unlock>
 8007ddc:	e6ed      	b.n	8007bba <_realloc_r+0x116>
 8007dde:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8007de2:	f026 0603 	bic.w	r6, r6, #3
 8007de6:	4456      	add	r6, sl
 8007de8:	e6d5      	b.n	8007b96 <_realloc_r+0xf2>
 8007dea:	4621      	mov	r1, r4
 8007dec:	4640      	mov	r0, r8
 8007dee:	f7ff fdb7 	bl	8007960 <memmove>
 8007df2:	4644      	mov	r4, r8
 8007df4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007df8:	46cb      	mov	fp, r9
 8007dfa:	e6cc      	b.n	8007b96 <_realloc_r+0xf2>
 8007dfc:	68a3      	ldr	r3, [r4, #8]
 8007dfe:	f8c9 3010 	str.w	r3, [r9, #16]
 8007e02:	68e3      	ldr	r3, [r4, #12]
 8007e04:	2a24      	cmp	r2, #36	; 0x24
 8007e06:	f8c9 3014 	str.w	r3, [r9, #20]
 8007e0a:	d00f      	beq.n	8007e2c <_realloc_r+0x388>
 8007e0c:	f109 0318 	add.w	r3, r9, #24
 8007e10:	3410      	adds	r4, #16
 8007e12:	e6b6      	b.n	8007b82 <_realloc_r+0xde>
 8007e14:	68a3      	ldr	r3, [r4, #8]
 8007e16:	f8c9 3010 	str.w	r3, [r9, #16]
 8007e1a:	68e3      	ldr	r3, [r4, #12]
 8007e1c:	2a24      	cmp	r2, #36	; 0x24
 8007e1e:	f8c9 3014 	str.w	r3, [r9, #20]
 8007e22:	d00d      	beq.n	8007e40 <_realloc_r+0x39c>
 8007e24:	f109 0318 	add.w	r3, r9, #24
 8007e28:	3410      	adds	r4, #16
 8007e2a:	e736      	b.n	8007c9a <_realloc_r+0x1f6>
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	f8c9 3018 	str.w	r3, [r9, #24]
 8007e32:	6962      	ldr	r2, [r4, #20]
 8007e34:	f109 0320 	add.w	r3, r9, #32
 8007e38:	f8c9 201c 	str.w	r2, [r9, #28]
 8007e3c:	3418      	adds	r4, #24
 8007e3e:	e6a0      	b.n	8007b82 <_realloc_r+0xde>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	f8c9 3018 	str.w	r3, [r9, #24]
 8007e46:	6962      	ldr	r2, [r4, #20]
 8007e48:	f109 0320 	add.w	r3, r9, #32
 8007e4c:	f8c9 201c 	str.w	r2, [r9, #28]
 8007e50:	3418      	adds	r4, #24
 8007e52:	e722      	b.n	8007c9a <_realloc_r+0x1f6>
 8007e54:	4640      	mov	r0, r8
 8007e56:	4621      	mov	r1, r4
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	f7ff fd81 	bl	8007960 <memmove>
 8007e5e:	9b01      	ldr	r3, [sp, #4]
 8007e60:	e7ab      	b.n	8007dba <_realloc_r+0x316>
 8007e62:	68a1      	ldr	r1, [r4, #8]
 8007e64:	f8c9 1010 	str.w	r1, [r9, #16]
 8007e68:	68e1      	ldr	r1, [r4, #12]
 8007e6a:	2a24      	cmp	r2, #36	; 0x24
 8007e6c:	f8c9 1014 	str.w	r1, [r9, #20]
 8007e70:	d003      	beq.n	8007e7a <_realloc_r+0x3d6>
 8007e72:	f109 0218 	add.w	r2, r9, #24
 8007e76:	3410      	adds	r4, #16
 8007e78:	e799      	b.n	8007dae <_realloc_r+0x30a>
 8007e7a:	6922      	ldr	r2, [r4, #16]
 8007e7c:	f8c9 2018 	str.w	r2, [r9, #24]
 8007e80:	6961      	ldr	r1, [r4, #20]
 8007e82:	f109 0220 	add.w	r2, r9, #32
 8007e86:	f8c9 101c 	str.w	r1, [r9, #28]
 8007e8a:	3418      	adds	r4, #24
 8007e8c:	e78f      	b.n	8007dae <_realloc_r+0x30a>
 8007e8e:	bf00      	nop

08007e90 <__aeabi_drsub>:
 8007e90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007e94:	e002      	b.n	8007e9c <__adddf3>
 8007e96:	bf00      	nop

08007e98 <__aeabi_dsub>:
 8007e98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007e9c <__adddf3>:
 8007e9c:	b530      	push	{r4, r5, lr}
 8007e9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007ea2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007ea6:	ea94 0f05 	teq	r4, r5
 8007eaa:	bf08      	it	eq
 8007eac:	ea90 0f02 	teqeq	r0, r2
 8007eb0:	bf1f      	itttt	ne
 8007eb2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007eb6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007eba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007ebe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007ec2:	f000 80e2 	beq.w	800808a <__adddf3+0x1ee>
 8007ec6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007eca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007ece:	bfb8      	it	lt
 8007ed0:	426d      	neglt	r5, r5
 8007ed2:	dd0c      	ble.n	8007eee <__adddf3+0x52>
 8007ed4:	442c      	add	r4, r5
 8007ed6:	ea80 0202 	eor.w	r2, r0, r2
 8007eda:	ea81 0303 	eor.w	r3, r1, r3
 8007ede:	ea82 0000 	eor.w	r0, r2, r0
 8007ee2:	ea83 0101 	eor.w	r1, r3, r1
 8007ee6:	ea80 0202 	eor.w	r2, r0, r2
 8007eea:	ea81 0303 	eor.w	r3, r1, r3
 8007eee:	2d36      	cmp	r5, #54	; 0x36
 8007ef0:	bf88      	it	hi
 8007ef2:	bd30      	pophi	{r4, r5, pc}
 8007ef4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007ef8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007efc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007f00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007f04:	d002      	beq.n	8007f0c <__adddf3+0x70>
 8007f06:	4240      	negs	r0, r0
 8007f08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007f0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007f10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007f14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007f18:	d002      	beq.n	8007f20 <__adddf3+0x84>
 8007f1a:	4252      	negs	r2, r2
 8007f1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007f20:	ea94 0f05 	teq	r4, r5
 8007f24:	f000 80a7 	beq.w	8008076 <__adddf3+0x1da>
 8007f28:	f1a4 0401 	sub.w	r4, r4, #1
 8007f2c:	f1d5 0e20 	rsbs	lr, r5, #32
 8007f30:	db0d      	blt.n	8007f4e <__adddf3+0xb2>
 8007f32:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007f36:	fa22 f205 	lsr.w	r2, r2, r5
 8007f3a:	1880      	adds	r0, r0, r2
 8007f3c:	f141 0100 	adc.w	r1, r1, #0
 8007f40:	fa03 f20e 	lsl.w	r2, r3, lr
 8007f44:	1880      	adds	r0, r0, r2
 8007f46:	fa43 f305 	asr.w	r3, r3, r5
 8007f4a:	4159      	adcs	r1, r3
 8007f4c:	e00e      	b.n	8007f6c <__adddf3+0xd0>
 8007f4e:	f1a5 0520 	sub.w	r5, r5, #32
 8007f52:	f10e 0e20 	add.w	lr, lr, #32
 8007f56:	2a01      	cmp	r2, #1
 8007f58:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007f5c:	bf28      	it	cs
 8007f5e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007f62:	fa43 f305 	asr.w	r3, r3, r5
 8007f66:	18c0      	adds	r0, r0, r3
 8007f68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007f6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007f70:	d507      	bpl.n	8007f82 <__adddf3+0xe6>
 8007f72:	f04f 0e00 	mov.w	lr, #0
 8007f76:	f1dc 0c00 	rsbs	ip, ip, #0
 8007f7a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007f7e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007f82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007f86:	d31b      	bcc.n	8007fc0 <__adddf3+0x124>
 8007f88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007f8c:	d30c      	bcc.n	8007fa8 <__adddf3+0x10c>
 8007f8e:	0849      	lsrs	r1, r1, #1
 8007f90:	ea5f 0030 	movs.w	r0, r0, rrx
 8007f94:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007f98:	f104 0401 	add.w	r4, r4, #1
 8007f9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007fa0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007fa4:	f080 809a 	bcs.w	80080dc <__adddf3+0x240>
 8007fa8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007fac:	bf08      	it	eq
 8007fae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007fb2:	f150 0000 	adcs.w	r0, r0, #0
 8007fb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007fba:	ea41 0105 	orr.w	r1, r1, r5
 8007fbe:	bd30      	pop	{r4, r5, pc}
 8007fc0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007fc4:	4140      	adcs	r0, r0
 8007fc6:	eb41 0101 	adc.w	r1, r1, r1
 8007fca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007fce:	f1a4 0401 	sub.w	r4, r4, #1
 8007fd2:	d1e9      	bne.n	8007fa8 <__adddf3+0x10c>
 8007fd4:	f091 0f00 	teq	r1, #0
 8007fd8:	bf04      	itt	eq
 8007fda:	4601      	moveq	r1, r0
 8007fdc:	2000      	moveq	r0, #0
 8007fde:	fab1 f381 	clz	r3, r1
 8007fe2:	bf08      	it	eq
 8007fe4:	3320      	addeq	r3, #32
 8007fe6:	f1a3 030b 	sub.w	r3, r3, #11
 8007fea:	f1b3 0220 	subs.w	r2, r3, #32
 8007fee:	da0c      	bge.n	800800a <__adddf3+0x16e>
 8007ff0:	320c      	adds	r2, #12
 8007ff2:	dd08      	ble.n	8008006 <__adddf3+0x16a>
 8007ff4:	f102 0c14 	add.w	ip, r2, #20
 8007ff8:	f1c2 020c 	rsb	r2, r2, #12
 8007ffc:	fa01 f00c 	lsl.w	r0, r1, ip
 8008000:	fa21 f102 	lsr.w	r1, r1, r2
 8008004:	e00c      	b.n	8008020 <__adddf3+0x184>
 8008006:	f102 0214 	add.w	r2, r2, #20
 800800a:	bfd8      	it	le
 800800c:	f1c2 0c20 	rsble	ip, r2, #32
 8008010:	fa01 f102 	lsl.w	r1, r1, r2
 8008014:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008018:	bfdc      	itt	le
 800801a:	ea41 010c 	orrle.w	r1, r1, ip
 800801e:	4090      	lslle	r0, r2
 8008020:	1ae4      	subs	r4, r4, r3
 8008022:	bfa2      	ittt	ge
 8008024:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008028:	4329      	orrge	r1, r5
 800802a:	bd30      	popge	{r4, r5, pc}
 800802c:	ea6f 0404 	mvn.w	r4, r4
 8008030:	3c1f      	subs	r4, #31
 8008032:	da1c      	bge.n	800806e <__adddf3+0x1d2>
 8008034:	340c      	adds	r4, #12
 8008036:	dc0e      	bgt.n	8008056 <__adddf3+0x1ba>
 8008038:	f104 0414 	add.w	r4, r4, #20
 800803c:	f1c4 0220 	rsb	r2, r4, #32
 8008040:	fa20 f004 	lsr.w	r0, r0, r4
 8008044:	fa01 f302 	lsl.w	r3, r1, r2
 8008048:	ea40 0003 	orr.w	r0, r0, r3
 800804c:	fa21 f304 	lsr.w	r3, r1, r4
 8008050:	ea45 0103 	orr.w	r1, r5, r3
 8008054:	bd30      	pop	{r4, r5, pc}
 8008056:	f1c4 040c 	rsb	r4, r4, #12
 800805a:	f1c4 0220 	rsb	r2, r4, #32
 800805e:	fa20 f002 	lsr.w	r0, r0, r2
 8008062:	fa01 f304 	lsl.w	r3, r1, r4
 8008066:	ea40 0003 	orr.w	r0, r0, r3
 800806a:	4629      	mov	r1, r5
 800806c:	bd30      	pop	{r4, r5, pc}
 800806e:	fa21 f004 	lsr.w	r0, r1, r4
 8008072:	4629      	mov	r1, r5
 8008074:	bd30      	pop	{r4, r5, pc}
 8008076:	f094 0f00 	teq	r4, #0
 800807a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800807e:	bf06      	itte	eq
 8008080:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008084:	3401      	addeq	r4, #1
 8008086:	3d01      	subne	r5, #1
 8008088:	e74e      	b.n	8007f28 <__adddf3+0x8c>
 800808a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800808e:	bf18      	it	ne
 8008090:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008094:	d029      	beq.n	80080ea <__adddf3+0x24e>
 8008096:	ea94 0f05 	teq	r4, r5
 800809a:	bf08      	it	eq
 800809c:	ea90 0f02 	teqeq	r0, r2
 80080a0:	d005      	beq.n	80080ae <__adddf3+0x212>
 80080a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80080a6:	bf04      	itt	eq
 80080a8:	4619      	moveq	r1, r3
 80080aa:	4610      	moveq	r0, r2
 80080ac:	bd30      	pop	{r4, r5, pc}
 80080ae:	ea91 0f03 	teq	r1, r3
 80080b2:	bf1e      	ittt	ne
 80080b4:	2100      	movne	r1, #0
 80080b6:	2000      	movne	r0, #0
 80080b8:	bd30      	popne	{r4, r5, pc}
 80080ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80080be:	d105      	bne.n	80080cc <__adddf3+0x230>
 80080c0:	0040      	lsls	r0, r0, #1
 80080c2:	4149      	adcs	r1, r1
 80080c4:	bf28      	it	cs
 80080c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80080ca:	bd30      	pop	{r4, r5, pc}
 80080cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80080d0:	bf3c      	itt	cc
 80080d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80080d6:	bd30      	popcc	{r4, r5, pc}
 80080d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80080dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80080e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80080e4:	f04f 0000 	mov.w	r0, #0
 80080e8:	bd30      	pop	{r4, r5, pc}
 80080ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80080ee:	bf1a      	itte	ne
 80080f0:	4619      	movne	r1, r3
 80080f2:	4610      	movne	r0, r2
 80080f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80080f8:	bf1c      	itt	ne
 80080fa:	460b      	movne	r3, r1
 80080fc:	4602      	movne	r2, r0
 80080fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008102:	bf06      	itte	eq
 8008104:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008108:	ea91 0f03 	teqeq	r1, r3
 800810c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008110:	bd30      	pop	{r4, r5, pc}
 8008112:	bf00      	nop

08008114 <__aeabi_ui2d>:
 8008114:	f090 0f00 	teq	r0, #0
 8008118:	bf04      	itt	eq
 800811a:	2100      	moveq	r1, #0
 800811c:	4770      	bxeq	lr
 800811e:	b530      	push	{r4, r5, lr}
 8008120:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008124:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008128:	f04f 0500 	mov.w	r5, #0
 800812c:	f04f 0100 	mov.w	r1, #0
 8008130:	e750      	b.n	8007fd4 <__adddf3+0x138>
 8008132:	bf00      	nop

08008134 <__aeabi_i2d>:
 8008134:	f090 0f00 	teq	r0, #0
 8008138:	bf04      	itt	eq
 800813a:	2100      	moveq	r1, #0
 800813c:	4770      	bxeq	lr
 800813e:	b530      	push	{r4, r5, lr}
 8008140:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008144:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008148:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800814c:	bf48      	it	mi
 800814e:	4240      	negmi	r0, r0
 8008150:	f04f 0100 	mov.w	r1, #0
 8008154:	e73e      	b.n	8007fd4 <__adddf3+0x138>
 8008156:	bf00      	nop

08008158 <__aeabi_f2d>:
 8008158:	0042      	lsls	r2, r0, #1
 800815a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800815e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008162:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008166:	bf1f      	itttt	ne
 8008168:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800816c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008170:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008174:	4770      	bxne	lr
 8008176:	f092 0f00 	teq	r2, #0
 800817a:	bf14      	ite	ne
 800817c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008180:	4770      	bxeq	lr
 8008182:	b530      	push	{r4, r5, lr}
 8008184:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008188:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800818c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008190:	e720      	b.n	8007fd4 <__adddf3+0x138>
 8008192:	bf00      	nop

08008194 <__aeabi_ul2d>:
 8008194:	ea50 0201 	orrs.w	r2, r0, r1
 8008198:	bf08      	it	eq
 800819a:	4770      	bxeq	lr
 800819c:	b530      	push	{r4, r5, lr}
 800819e:	f04f 0500 	mov.w	r5, #0
 80081a2:	e00a      	b.n	80081ba <__aeabi_l2d+0x16>

080081a4 <__aeabi_l2d>:
 80081a4:	ea50 0201 	orrs.w	r2, r0, r1
 80081a8:	bf08      	it	eq
 80081aa:	4770      	bxeq	lr
 80081ac:	b530      	push	{r4, r5, lr}
 80081ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80081b2:	d502      	bpl.n	80081ba <__aeabi_l2d+0x16>
 80081b4:	4240      	negs	r0, r0
 80081b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80081ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80081c6:	f43f aedc 	beq.w	8007f82 <__adddf3+0xe6>
 80081ca:	f04f 0203 	mov.w	r2, #3
 80081ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80081d2:	bf18      	it	ne
 80081d4:	3203      	addne	r2, #3
 80081d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80081da:	bf18      	it	ne
 80081dc:	3203      	addne	r2, #3
 80081de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80081e2:	f1c2 0320 	rsb	r3, r2, #32
 80081e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80081ea:	fa20 f002 	lsr.w	r0, r0, r2
 80081ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80081f2:	ea40 000e 	orr.w	r0, r0, lr
 80081f6:	fa21 f102 	lsr.w	r1, r1, r2
 80081fa:	4414      	add	r4, r2
 80081fc:	e6c1      	b.n	8007f82 <__adddf3+0xe6>
 80081fe:	bf00      	nop

08008200 <__aeabi_dmul>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800820a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800820e:	bf1d      	ittte	ne
 8008210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008214:	ea94 0f0c 	teqne	r4, ip
 8008218:	ea95 0f0c 	teqne	r5, ip
 800821c:	f000 f8de 	bleq	80083dc <__aeabi_dmul+0x1dc>
 8008220:	442c      	add	r4, r5
 8008222:	ea81 0603 	eor.w	r6, r1, r3
 8008226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800822a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800822e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008232:	bf18      	it	ne
 8008234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800823c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008240:	d038      	beq.n	80082b4 <__aeabi_dmul+0xb4>
 8008242:	fba0 ce02 	umull	ip, lr, r0, r2
 8008246:	f04f 0500 	mov.w	r5, #0
 800824a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800824e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008256:	f04f 0600 	mov.w	r6, #0
 800825a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800825e:	f09c 0f00 	teq	ip, #0
 8008262:	bf18      	it	ne
 8008264:	f04e 0e01 	orrne.w	lr, lr, #1
 8008268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800826c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008274:	d204      	bcs.n	8008280 <__aeabi_dmul+0x80>
 8008276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800827a:	416d      	adcs	r5, r5
 800827c:	eb46 0606 	adc.w	r6, r6, r6
 8008280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800828c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008298:	bf88      	it	hi
 800829a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800829e:	d81e      	bhi.n	80082de <__aeabi_dmul+0xde>
 80082a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80082a4:	bf08      	it	eq
 80082a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80082aa:	f150 0000 	adcs.w	r0, r0, #0
 80082ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80082b8:	ea46 0101 	orr.w	r1, r6, r1
 80082bc:	ea40 0002 	orr.w	r0, r0, r2
 80082c0:	ea81 0103 	eor.w	r1, r1, r3
 80082c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80082c8:	bfc2      	ittt	gt
 80082ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80082ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80082d2:	bd70      	popgt	{r4, r5, r6, pc}
 80082d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80082d8:	f04f 0e00 	mov.w	lr, #0
 80082dc:	3c01      	subs	r4, #1
 80082de:	f300 80ab 	bgt.w	8008438 <__aeabi_dmul+0x238>
 80082e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80082e6:	bfde      	ittt	le
 80082e8:	2000      	movle	r0, #0
 80082ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80082ee:	bd70      	pople	{r4, r5, r6, pc}
 80082f0:	f1c4 0400 	rsb	r4, r4, #0
 80082f4:	3c20      	subs	r4, #32
 80082f6:	da35      	bge.n	8008364 <__aeabi_dmul+0x164>
 80082f8:	340c      	adds	r4, #12
 80082fa:	dc1b      	bgt.n	8008334 <__aeabi_dmul+0x134>
 80082fc:	f104 0414 	add.w	r4, r4, #20
 8008300:	f1c4 0520 	rsb	r5, r4, #32
 8008304:	fa00 f305 	lsl.w	r3, r0, r5
 8008308:	fa20 f004 	lsr.w	r0, r0, r4
 800830c:	fa01 f205 	lsl.w	r2, r1, r5
 8008310:	ea40 0002 	orr.w	r0, r0, r2
 8008314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800831c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008320:	fa21 f604 	lsr.w	r6, r1, r4
 8008324:	eb42 0106 	adc.w	r1, r2, r6
 8008328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800832c:	bf08      	it	eq
 800832e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	f1c4 040c 	rsb	r4, r4, #12
 8008338:	f1c4 0520 	rsb	r5, r4, #32
 800833c:	fa00 f304 	lsl.w	r3, r0, r4
 8008340:	fa20 f005 	lsr.w	r0, r0, r5
 8008344:	fa01 f204 	lsl.w	r2, r1, r4
 8008348:	ea40 0002 	orr.w	r0, r0, r2
 800834c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008354:	f141 0100 	adc.w	r1, r1, #0
 8008358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800835c:	bf08      	it	eq
 800835e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	f1c4 0520 	rsb	r5, r4, #32
 8008368:	fa00 f205 	lsl.w	r2, r0, r5
 800836c:	ea4e 0e02 	orr.w	lr, lr, r2
 8008370:	fa20 f304 	lsr.w	r3, r0, r4
 8008374:	fa01 f205 	lsl.w	r2, r1, r5
 8008378:	ea43 0302 	orr.w	r3, r3, r2
 800837c:	fa21 f004 	lsr.w	r0, r1, r4
 8008380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008384:	fa21 f204 	lsr.w	r2, r1, r4
 8008388:	ea20 0002 	bic.w	r0, r0, r2
 800838c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008394:	bf08      	it	eq
 8008396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	f094 0f00 	teq	r4, #0
 80083a0:	d10f      	bne.n	80083c2 <__aeabi_dmul+0x1c2>
 80083a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80083a6:	0040      	lsls	r0, r0, #1
 80083a8:	eb41 0101 	adc.w	r1, r1, r1
 80083ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80083b0:	bf08      	it	eq
 80083b2:	3c01      	subeq	r4, #1
 80083b4:	d0f7      	beq.n	80083a6 <__aeabi_dmul+0x1a6>
 80083b6:	ea41 0106 	orr.w	r1, r1, r6
 80083ba:	f095 0f00 	teq	r5, #0
 80083be:	bf18      	it	ne
 80083c0:	4770      	bxne	lr
 80083c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80083c6:	0052      	lsls	r2, r2, #1
 80083c8:	eb43 0303 	adc.w	r3, r3, r3
 80083cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80083d0:	bf08      	it	eq
 80083d2:	3d01      	subeq	r5, #1
 80083d4:	d0f7      	beq.n	80083c6 <__aeabi_dmul+0x1c6>
 80083d6:	ea43 0306 	orr.w	r3, r3, r6
 80083da:	4770      	bx	lr
 80083dc:	ea94 0f0c 	teq	r4, ip
 80083e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80083e4:	bf18      	it	ne
 80083e6:	ea95 0f0c 	teqne	r5, ip
 80083ea:	d00c      	beq.n	8008406 <__aeabi_dmul+0x206>
 80083ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80083f0:	bf18      	it	ne
 80083f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80083f6:	d1d1      	bne.n	800839c <__aeabi_dmul+0x19c>
 80083f8:	ea81 0103 	eor.w	r1, r1, r3
 80083fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008400:	f04f 0000 	mov.w	r0, #0
 8008404:	bd70      	pop	{r4, r5, r6, pc}
 8008406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800840a:	bf06      	itte	eq
 800840c:	4610      	moveq	r0, r2
 800840e:	4619      	moveq	r1, r3
 8008410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008414:	d019      	beq.n	800844a <__aeabi_dmul+0x24a>
 8008416:	ea94 0f0c 	teq	r4, ip
 800841a:	d102      	bne.n	8008422 <__aeabi_dmul+0x222>
 800841c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008420:	d113      	bne.n	800844a <__aeabi_dmul+0x24a>
 8008422:	ea95 0f0c 	teq	r5, ip
 8008426:	d105      	bne.n	8008434 <__aeabi_dmul+0x234>
 8008428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800842c:	bf1c      	itt	ne
 800842e:	4610      	movne	r0, r2
 8008430:	4619      	movne	r1, r3
 8008432:	d10a      	bne.n	800844a <__aeabi_dmul+0x24a>
 8008434:	ea81 0103 	eor.w	r1, r1, r3
 8008438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800843c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008444:	f04f 0000 	mov.w	r0, #0
 8008448:	bd70      	pop	{r4, r5, r6, pc}
 800844a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800844e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008452:	bd70      	pop	{r4, r5, r6, pc}

08008454 <__aeabi_ddiv>:
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800845a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800845e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008462:	bf1d      	ittte	ne
 8008464:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008468:	ea94 0f0c 	teqne	r4, ip
 800846c:	ea95 0f0c 	teqne	r5, ip
 8008470:	f000 f8a7 	bleq	80085c2 <__aeabi_ddiv+0x16e>
 8008474:	eba4 0405 	sub.w	r4, r4, r5
 8008478:	ea81 0e03 	eor.w	lr, r1, r3
 800847c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008480:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008484:	f000 8088 	beq.w	8008598 <__aeabi_ddiv+0x144>
 8008488:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800848c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008490:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008494:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008498:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800849c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80084a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80084a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80084a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80084ac:	429d      	cmp	r5, r3
 80084ae:	bf08      	it	eq
 80084b0:	4296      	cmpeq	r6, r2
 80084b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80084b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80084ba:	d202      	bcs.n	80084c2 <__aeabi_ddiv+0x6e>
 80084bc:	085b      	lsrs	r3, r3, #1
 80084be:	ea4f 0232 	mov.w	r2, r2, rrx
 80084c2:	1ab6      	subs	r6, r6, r2
 80084c4:	eb65 0503 	sbc.w	r5, r5, r3
 80084c8:	085b      	lsrs	r3, r3, #1
 80084ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80084ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80084d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80084d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80084da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80084de:	bf22      	ittt	cs
 80084e0:	1ab6      	subcs	r6, r6, r2
 80084e2:	4675      	movcs	r5, lr
 80084e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80084e8:	085b      	lsrs	r3, r3, #1
 80084ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80084ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80084f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80084f6:	bf22      	ittt	cs
 80084f8:	1ab6      	subcs	r6, r6, r2
 80084fa:	4675      	movcs	r5, lr
 80084fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008500:	085b      	lsrs	r3, r3, #1
 8008502:	ea4f 0232 	mov.w	r2, r2, rrx
 8008506:	ebb6 0e02 	subs.w	lr, r6, r2
 800850a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800850e:	bf22      	ittt	cs
 8008510:	1ab6      	subcs	r6, r6, r2
 8008512:	4675      	movcs	r5, lr
 8008514:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	ea4f 0232 	mov.w	r2, r2, rrx
 800851e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008522:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008526:	bf22      	ittt	cs
 8008528:	1ab6      	subcs	r6, r6, r2
 800852a:	4675      	movcs	r5, lr
 800852c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008530:	ea55 0e06 	orrs.w	lr, r5, r6
 8008534:	d018      	beq.n	8008568 <__aeabi_ddiv+0x114>
 8008536:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800853a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800853e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008542:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008546:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800854a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800854e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008552:	d1c0      	bne.n	80084d6 <__aeabi_ddiv+0x82>
 8008554:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008558:	d10b      	bne.n	8008572 <__aeabi_ddiv+0x11e>
 800855a:	ea41 0100 	orr.w	r1, r1, r0
 800855e:	f04f 0000 	mov.w	r0, #0
 8008562:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008566:	e7b6      	b.n	80084d6 <__aeabi_ddiv+0x82>
 8008568:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800856c:	bf04      	itt	eq
 800856e:	4301      	orreq	r1, r0
 8008570:	2000      	moveq	r0, #0
 8008572:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008576:	bf88      	it	hi
 8008578:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800857c:	f63f aeaf 	bhi.w	80082de <__aeabi_dmul+0xde>
 8008580:	ebb5 0c03 	subs.w	ip, r5, r3
 8008584:	bf04      	itt	eq
 8008586:	ebb6 0c02 	subseq.w	ip, r6, r2
 800858a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800858e:	f150 0000 	adcs.w	r0, r0, #0
 8008592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008596:	bd70      	pop	{r4, r5, r6, pc}
 8008598:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800859c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80085a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80085a4:	bfc2      	ittt	gt
 80085a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80085aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80085ae:	bd70      	popgt	{r4, r5, r6, pc}
 80085b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085b4:	f04f 0e00 	mov.w	lr, #0
 80085b8:	3c01      	subs	r4, #1
 80085ba:	e690      	b.n	80082de <__aeabi_dmul+0xde>
 80085bc:	ea45 0e06 	orr.w	lr, r5, r6
 80085c0:	e68d      	b.n	80082de <__aeabi_dmul+0xde>
 80085c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80085c6:	ea94 0f0c 	teq	r4, ip
 80085ca:	bf08      	it	eq
 80085cc:	ea95 0f0c 	teqeq	r5, ip
 80085d0:	f43f af3b 	beq.w	800844a <__aeabi_dmul+0x24a>
 80085d4:	ea94 0f0c 	teq	r4, ip
 80085d8:	d10a      	bne.n	80085f0 <__aeabi_ddiv+0x19c>
 80085da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80085de:	f47f af34 	bne.w	800844a <__aeabi_dmul+0x24a>
 80085e2:	ea95 0f0c 	teq	r5, ip
 80085e6:	f47f af25 	bne.w	8008434 <__aeabi_dmul+0x234>
 80085ea:	4610      	mov	r0, r2
 80085ec:	4619      	mov	r1, r3
 80085ee:	e72c      	b.n	800844a <__aeabi_dmul+0x24a>
 80085f0:	ea95 0f0c 	teq	r5, ip
 80085f4:	d106      	bne.n	8008604 <__aeabi_ddiv+0x1b0>
 80085f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80085fa:	f43f aefd 	beq.w	80083f8 <__aeabi_dmul+0x1f8>
 80085fe:	4610      	mov	r0, r2
 8008600:	4619      	mov	r1, r3
 8008602:	e722      	b.n	800844a <__aeabi_dmul+0x24a>
 8008604:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008608:	bf18      	it	ne
 800860a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800860e:	f47f aec5 	bne.w	800839c <__aeabi_dmul+0x19c>
 8008612:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8008616:	f47f af0d 	bne.w	8008434 <__aeabi_dmul+0x234>
 800861a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800861e:	f47f aeeb 	bne.w	80083f8 <__aeabi_dmul+0x1f8>
 8008622:	e712      	b.n	800844a <__aeabi_dmul+0x24a>

08008624 <__gedf2>:
 8008624:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008628:	e006      	b.n	8008638 <__cmpdf2+0x4>
 800862a:	bf00      	nop

0800862c <__ledf2>:
 800862c:	f04f 0c01 	mov.w	ip, #1
 8008630:	e002      	b.n	8008638 <__cmpdf2+0x4>
 8008632:	bf00      	nop

08008634 <__cmpdf2>:
 8008634:	f04f 0c01 	mov.w	ip, #1
 8008638:	f84d cd04 	str.w	ip, [sp, #-4]!
 800863c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008640:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008644:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008648:	bf18      	it	ne
 800864a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800864e:	d01b      	beq.n	8008688 <__cmpdf2+0x54>
 8008650:	b001      	add	sp, #4
 8008652:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008656:	bf0c      	ite	eq
 8008658:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800865c:	ea91 0f03 	teqne	r1, r3
 8008660:	bf02      	ittt	eq
 8008662:	ea90 0f02 	teqeq	r0, r2
 8008666:	2000      	moveq	r0, #0
 8008668:	4770      	bxeq	lr
 800866a:	f110 0f00 	cmn.w	r0, #0
 800866e:	ea91 0f03 	teq	r1, r3
 8008672:	bf58      	it	pl
 8008674:	4299      	cmppl	r1, r3
 8008676:	bf08      	it	eq
 8008678:	4290      	cmpeq	r0, r2
 800867a:	bf2c      	ite	cs
 800867c:	17d8      	asrcs	r0, r3, #31
 800867e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008682:	f040 0001 	orr.w	r0, r0, #1
 8008686:	4770      	bx	lr
 8008688:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800868c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008690:	d102      	bne.n	8008698 <__cmpdf2+0x64>
 8008692:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008696:	d107      	bne.n	80086a8 <__cmpdf2+0x74>
 8008698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800869c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80086a0:	d1d6      	bne.n	8008650 <__cmpdf2+0x1c>
 80086a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80086a6:	d0d3      	beq.n	8008650 <__cmpdf2+0x1c>
 80086a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop

080086b0 <__aeabi_cdrcmple>:
 80086b0:	4684      	mov	ip, r0
 80086b2:	4610      	mov	r0, r2
 80086b4:	4662      	mov	r2, ip
 80086b6:	468c      	mov	ip, r1
 80086b8:	4619      	mov	r1, r3
 80086ba:	4663      	mov	r3, ip
 80086bc:	e000      	b.n	80086c0 <__aeabi_cdcmpeq>
 80086be:	bf00      	nop

080086c0 <__aeabi_cdcmpeq>:
 80086c0:	b501      	push	{r0, lr}
 80086c2:	f7ff ffb7 	bl	8008634 <__cmpdf2>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	bf48      	it	mi
 80086ca:	f110 0f00 	cmnmi.w	r0, #0
 80086ce:	bd01      	pop	{r0, pc}

080086d0 <__aeabi_dcmpeq>:
 80086d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80086d4:	f7ff fff4 	bl	80086c0 <__aeabi_cdcmpeq>
 80086d8:	bf0c      	ite	eq
 80086da:	2001      	moveq	r0, #1
 80086dc:	2000      	movne	r0, #0
 80086de:	f85d fb08 	ldr.w	pc, [sp], #8
 80086e2:	bf00      	nop

080086e4 <__aeabi_dcmplt>:
 80086e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80086e8:	f7ff ffea 	bl	80086c0 <__aeabi_cdcmpeq>
 80086ec:	bf34      	ite	cc
 80086ee:	2001      	movcc	r0, #1
 80086f0:	2000      	movcs	r0, #0
 80086f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80086f6:	bf00      	nop

080086f8 <__aeabi_dcmple>:
 80086f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80086fc:	f7ff ffe0 	bl	80086c0 <__aeabi_cdcmpeq>
 8008700:	bf94      	ite	ls
 8008702:	2001      	movls	r0, #1
 8008704:	2000      	movhi	r0, #0
 8008706:	f85d fb08 	ldr.w	pc, [sp], #8
 800870a:	bf00      	nop

0800870c <__aeabi_dcmpge>:
 800870c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008710:	f7ff ffce 	bl	80086b0 <__aeabi_cdrcmple>
 8008714:	bf94      	ite	ls
 8008716:	2001      	movls	r0, #1
 8008718:	2000      	movhi	r0, #0
 800871a:	f85d fb08 	ldr.w	pc, [sp], #8
 800871e:	bf00      	nop

08008720 <__aeabi_dcmpgt>:
 8008720:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008724:	f7ff ffc4 	bl	80086b0 <__aeabi_cdrcmple>
 8008728:	bf34      	ite	cc
 800872a:	2001      	movcc	r0, #1
 800872c:	2000      	movcs	r0, #0
 800872e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008732:	bf00      	nop

08008734 <__aeabi_d2iz>:
 8008734:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008738:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800873c:	d215      	bcs.n	800876a <__aeabi_d2iz+0x36>
 800873e:	d511      	bpl.n	8008764 <__aeabi_d2iz+0x30>
 8008740:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008744:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008748:	d912      	bls.n	8008770 <__aeabi_d2iz+0x3c>
 800874a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800874e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008752:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800875a:	fa23 f002 	lsr.w	r0, r3, r2
 800875e:	bf18      	it	ne
 8008760:	4240      	negne	r0, r0
 8008762:	4770      	bx	lr
 8008764:	f04f 0000 	mov.w	r0, #0
 8008768:	4770      	bx	lr
 800876a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800876e:	d105      	bne.n	800877c <__aeabi_d2iz+0x48>
 8008770:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008774:	bf08      	it	eq
 8008776:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800877a:	4770      	bx	lr
 800877c:	f04f 0000 	mov.w	r0, #0
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop

08008784 <main>:
/**
 * @brief  Main program.
 * @param  None
 * @retval : None
 */
int main(void) {
 8008784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	b088      	sub	sp, #32

	// Configure board specific setting
//  BoardInit();
	// Setting up COM port for Print function
//  COM_Configuration();
	SysTick_Start();
 800878a:	f7f7 ff0d 	bl	80005a8 <SysTick_Start>
	usart_begin(USART3Serial, PD9, PD8, 19200);
 800878e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8008792:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8008796:	2002      	movs	r0, #2
 8008798:	f240 4109 	movw	r1, #1033	; 0x409
 800879c:	f7f7 ff84 	bl	80006a8 <usart_begin>

	//Send welcome messages
	usart_print(USART3Serial, (char *) Welcome_Message);
 80087a0:	4990      	ldr	r1, [pc, #576]	; (80089e4 <main+0x260>)
 80087a2:	4c91      	ldr	r4, [pc, #580]	; (80089e8 <main+0x264>)
 80087a4:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8008a10 <main+0x28c>
 80087a8:	4f90      	ldr	r7, [pc, #576]	; (80089ec <main+0x268>)
 80087aa:	4e91      	ldr	r6, [pc, #580]	; (80089f0 <main+0x26c>)
 80087ac:	2002      	movs	r0, #2
 80087ae:	f7f8 f8a3 	bl	80008f8 <usart_print>
//  cprintf(Welcome_Message);

	i2c_begin(400000);
 80087b2:	f44f 50d4 	mov.w	r0, #6784	; 0x1a80
 80087b6:	f2c0 0006 	movt	r0, #6
 80087ba:	f7f7 fe35 	bl	8000428 <i2c_begin>
	ST7032i_Init();
 80087be:	f7fa fd2b 	bl	8003218 <ST7032i_Init>

	//Show message on first line
	ST7032i_Print_String(LCD_Message);
 80087c2:	488c      	ldr	r0, [pc, #560]	; (80089f4 <main+0x270>)
 80087c4:	f7fa fe46 	bl	8003454 <ST7032i_Print_String>
 * @param  None
 * @retval : None
 */
int main(void) {
	uint8_t i = 0;
	uint8_t icon_num = 12;
 80087c8:	f04f 080c 	mov.w	r8, #12

	//Receive character from COM and put it on LCD
	while (1) {
		if (usart_available(USART3Serial) > 0) // RX_BUFFER_IS_NOT_EMPTY)
				{
			RxData = usart_read(USART3Serial); //RECEIVE_DATA;
 80087cc:	4625      	mov	r5, r4
	//Show message on first line
	ST7032i_Print_String(LCD_Message);

	//Receive character from COM and put it on LCD
	while (1) {
		if (usart_available(USART3Serial) > 0) // RX_BUFFER_IS_NOT_EMPTY)
 80087ce:	2002      	movs	r0, #2
 80087d0:	f7f8 f930 	bl	8000a34 <usart_available>
 80087d4:	b9d0      	cbnz	r0, 800880c <main+0x88>
					break;
				}
			}
		} else {
			//Clear
			ST7032i_Command_Write(0x80 | 0x40);
 80087d6:	20c0      	movs	r0, #192	; 0xc0
 80087d8:	f7fa fbe6 	bl	8002fa8 <ST7032i_Command_Write>
			ST7032i_print("        ");
 80087dc:	4886      	ldr	r0, [pc, #536]	; (80089f8 <main+0x274>)
 80087de:	f7fa faaf 	bl	8002d40 <ST7032i_print>
			ST7032i_Command_Write(0x80 | 0x40);
 80087e2:	20c0      	movs	r0, #192	; 0xc0
 80087e4:	f7fa fbe0 	bl	8002fa8 <ST7032i_Command_Write>
			sprintf(tmp, "%lx", SysTick_count());
 80087e8:	f7f7 fefe 	bl	80005e8 <SysTick_count>
 80087ec:	4983      	ldr	r1, [pc, #524]	; (80089fc <main+0x278>)
 80087ee:	4602      	mov	r2, r0
 80087f0:	4668      	mov	r0, sp
 80087f2:	f7fb f815 	bl	8003820 <sprintf>
			ST7032i_print(tmp);
 80087f6:	4668      	mov	r0, sp
 80087f8:	f7fa faa2 	bl	8002d40 <ST7032i_print>
			delay_ms(10);
 80087fc:	200a      	movs	r0, #10
 80087fe:	f7f7 fcef 	bl	80001e0 <delay_ms>
	//Show message on first line
	ST7032i_Print_String(LCD_Message);

	//Receive character from COM and put it on LCD
	while (1) {
		if (usart_available(USART3Serial) > 0) // RX_BUFFER_IS_NOT_EMPTY)
 8008802:	2002      	movs	r0, #2
 8008804:	f7f8 f916 	bl	8000a34 <usart_available>
 8008808:	2800      	cmp	r0, #0
 800880a:	d0e4      	beq.n	80087d6 <main+0x52>
				{
			RxData = usart_read(USART3Serial); //RECEIVE_DATA;
 800880c:	2002      	movs	r0, #2
 800880e:	f7f8 f889 	bl	8000924 <usart_read>
 8008812:	b2c0      	uxtb	r0, r0
 8008814:	7020      	strb	r0, [r4, #0]
			if ((RxData >= 0x20 && RxData <= 0x3F)
 8008816:	7823      	ldrb	r3, [r4, #0]
 8008818:	2b1f      	cmp	r3, #31
 800881a:	d910      	bls.n	800883e <main+0xba>
 800881c:	782b      	ldrb	r3, [r5, #0]
 800881e:	2b3f      	cmp	r3, #63	; 0x3f
 8008820:	d80d      	bhi.n	800883e <main+0xba>
					|| (RxData >= 0x60 && RxData <= 0x7F)) {
//              cputchar(RxData);
				sprintf(tmp, "%c", RxData);
 8008822:	7822      	ldrb	r2, [r4, #0]
 8008824:	4976      	ldr	r1, [pc, #472]	; (8008a00 <main+0x27c>)
 8008826:	4668      	mov	r0, sp
 8008828:	f7fa fffa 	bl	8003820 <sprintf>
				usart_print(USART3Serial, tmp);
 800882c:	2002      	movs	r0, #2
 800882e:	4669      	mov	r1, sp
 8008830:	f7f8 f862 	bl	80008f8 <usart_print>
				ST7032i_Putchar(RxData);
 8008834:	7820      	ldrb	r0, [r4, #0]
 8008836:	b240      	sxtb	r0, r0
 8008838:	f7fa fd3e 	bl	80032b8 <ST7032i_Putchar>
 800883c:	e7c7      	b.n	80087ce <main+0x4a>
	while (1) {
		if (usart_available(USART3Serial) > 0) // RX_BUFFER_IS_NOT_EMPTY)
				{
			RxData = usart_read(USART3Serial); //RECEIVE_DATA;
			if ((RxData >= 0x20 && RxData <= 0x3F)
					|| (RxData >= 0x60 && RxData <= 0x7F)) {
 800883e:	7823      	ldrb	r3, [r4, #0]
 8008840:	2b5f      	cmp	r3, #95	; 0x5f
 8008842:	d902      	bls.n	800884a <main+0xc6>
 8008844:	782b      	ldrb	r3, [r5, #0]
 8008846:	061b      	lsls	r3, r3, #24
 8008848:	d5eb      	bpl.n	8008822 <main+0x9e>
//              cputchar(RxData);
				sprintf(tmp, "%c", RxData);
				usart_print(USART3Serial, tmp);
				ST7032i_Putchar(RxData);
			} else {
				switch (RxData) {
 800884a:	7823      	ldrb	r3, [r4, #0]
 800884c:	3b41      	subs	r3, #65	; 0x41
 800884e:	2b19      	cmp	r3, #25
 8008850:	d8bd      	bhi.n	80087ce <main+0x4a>
 8008852:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <main+0xd4>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	08008997 	.word	0x08008997
 800885c:	08008991 	.word	0x08008991
 8008860:	0800898b 	.word	0x0800898b
 8008864:	08008985 	.word	0x08008985
 8008868:	0800897d 	.word	0x0800897d
 800886c:	080087cf 	.word	0x080087cf
 8008870:	080087cf 	.word	0x080087cf
 8008874:	08008977 	.word	0x08008977
 8008878:	08008971 	.word	0x08008971
 800887c:	0800895b 	.word	0x0800895b
 8008880:	08008945 	.word	0x08008945
 8008884:	08008925 	.word	0x08008925
 8008888:	08008919 	.word	0x08008919
 800888c:	08008913 	.word	0x08008913
 8008890:	0800890d 	.word	0x0800890d
 8008894:	08008907 	.word	0x08008907
 8008898:	08008901 	.word	0x08008901
 800889c:	080088fb 	.word	0x080088fb
 80088a0:	080088f5 	.word	0x080088f5
 80088a4:	080087cf 	.word	0x080087cf
 80088a8:	080087cf 	.word	0x080087cf
 80088ac:	080088ef 	.word	0x080088ef
 80088b0:	080088cd 	.word	0x080088cd
 80088b4:	080088c7 	.word	0x080088c7
 80088b8:	080087cf 	.word	0x080087cf
 80088bc:	080088c1 	.word	0x080088c1
					break;
				case 'H':
					ST7032i_Shift_Disable();
					break;
				case 'Z':
					ST7032i_Display_On();
 80088c0:	f7fa fc22 	bl	8003108 <ST7032i_Display_On>
					break;
 80088c4:	e783      	b.n	80087ce <main+0x4a>
				case 'X':
					ST7032i_Display_Off();
 80088c6:	f7fa fc0f 	bl	80030e8 <ST7032i_Display_Off>
					break;
 80088ca:	e780      	b.n	80087ce <main+0x4a>
				case 'K':
					DDRAM_Address++;
					ST7032i_Set_DDRAM(DDRAM_Address);
					break;
				case 'W':
					Contrast++;
 80088cc:	783b      	ldrb	r3, [r7, #0]
					sprintf(tmp, "Contrast is :%u\r\n", Contrast);
 80088ce:	494d      	ldr	r1, [pc, #308]	; (8008a04 <main+0x280>)
				case 'K':
					DDRAM_Address++;
					ST7032i_Set_DDRAM(DDRAM_Address);
					break;
				case 'W':
					Contrast++;
 80088d0:	3301      	adds	r3, #1
					sprintf(tmp, "Contrast is :%u\r\n", Contrast);
					usart_print(USART3Serial, tmp);
					ST7032i_Set_Contrast(Contrast);
					break;
				case 'E':
					Contrast--;
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	703b      	strb	r3, [r7, #0]
					sprintf(tmp, "Contrast is :%u\r\n", Contrast);
 80088d6:	783a      	ldrb	r2, [r7, #0]
 80088d8:	4668      	mov	r0, sp
 80088da:	f7fa ffa1 	bl	8003820 <sprintf>
					usart_print(USART3Serial, tmp);
 80088de:	2002      	movs	r0, #2
 80088e0:	4669      	mov	r1, sp
 80088e2:	f7f8 f809 	bl	80008f8 <usart_print>
					ST7032i_Set_Contrast(Contrast);
 80088e6:	7838      	ldrb	r0, [r7, #0]
 80088e8:	f7fa fb94 	bl	8003014 <ST7032i_Set_Contrast>
					break;
 80088ec:	e76f      	b.n	80087ce <main+0x4a>
					break;
				case 'C':
					ST7032i_Cursor_On();
					break;
				case 'V':
					ST7032i_Cursor_Off();
 80088ee:	f7fa fbdb 	bl	80030a8 <ST7032i_Cursor_Off>
					break;
 80088f2:	e76c      	b.n	80087ce <main+0x4a>
					break;
				case 'D':
					ST7032i_Decrement();
					break;
				case 'S':
					ST7032i_Shift_Enable();
 80088f4:	f7fa fc2e 	bl	8003154 <ST7032i_Shift_Enable>
					break;
 80088f8:	e769      	b.n	80087ce <main+0x4a>
				switch (RxData) {
				case 'Q':
					ST7032i_Clear();
					break;
				case 'R':
					ST7032i_Return();
 80088fa:	f7fa fc65 	bl	80031c8 <ST7032i_Return>
					break;
 80088fe:	e766      	b.n	80087ce <main+0x4a>
				usart_print(USART3Serial, tmp);
				ST7032i_Putchar(RxData);
			} else {
				switch (RxData) {
				case 'Q':
					ST7032i_Clear();
 8008900:	f7fa fc72 	bl	80031e8 <ST7032i_Clear>
					break;
 8008904:	e763      	b.n	80087ce <main+0x4a>
					break;
				case 'O':
					ST7032i_Icon_On();
					break;
				case 'P':
					ST7032i_Icon_Off();
 8008906:	f7fa fb5d 	bl	8002fc4 <ST7032i_Icon_Off>
					break;
 800890a:	e760      	b.n	80087ce <main+0x4a>
					sprintf(tmp, "Contrast is :%u\r\n", Contrast);
					usart_print(USART3Serial, tmp);
					ST7032i_Set_Contrast(Contrast);
					break;
				case 'O':
					ST7032i_Icon_On();
 800890c:	f7fa fb6e 	bl	8002fec <ST7032i_Icon_On>
					break;
 8008910:	e75d      	b.n	80087ce <main+0x4a>
					break;
				case 'B':
					ST7032i_Cursor_Blink_On();
					break;
				case 'N':
					ST7032i_Cursor_Blink_Off();
 8008912:	f7fa fba9 	bl	8003068 <ST7032i_Cursor_Blink_Off>
					break;
 8008916:	e75a      	b.n	80087ce <main+0x4a>
				case 'M':
					ST7032i_Clear();
 8008918:	f7fa fc66 	bl	80031e8 <ST7032i_Clear>
					ST7032i_Set_DDRAM(0x40);
 800891c:	2040      	movs	r0, #64	; 0x40
 800891e:	f7fa fb93 	bl	8003048 <ST7032i_Set_DDRAM>
					break;
 8008922:	e754      	b.n	80087ce <main+0x4a>
					break;
				case 'P':
					ST7032i_Icon_Off();
					break;
				case 'L':
					ST7032i_Icon_Clear(icon_num);
 8008924:	4640      	mov	r0, r8
					icon_num++;
 8008926:	f108 0801 	add.w	r8, r8, #1
 800892a:	fa5f f888 	uxtb.w	r8, r8
					if (icon_num > 12) {
						icon_num = 0;
 800892e:	f1b8 0f0d 	cmp.w	r8, #13
 8008932:	bf08      	it	eq
 8008934:	f04f 0800 	moveq.w	r8, #0
					break;
				case 'P':
					ST7032i_Icon_Off();
					break;
				case 'L':
					ST7032i_Icon_Clear(icon_num);
 8008938:	f7fa fd9a 	bl	8003470 <ST7032i_Icon_Clear>
					icon_num++;
					if (icon_num > 12) {
						icon_num = 0;
					}
					ST7032i_Icon_Set(icon_num);
 800893c:	4640      	mov	r0, r8
 800893e:	f7fa fdc3 	bl	80034c8 <ST7032i_Icon_Set>
					break;
 8008942:	e744      	b.n	80087ce <main+0x4a>
				case 'J':
					DDRAM_Address--;
					ST7032i_Set_DDRAM(DDRAM_Address);
					break;
				case 'K':
					DDRAM_Address++;
 8008944:	f899 3000 	ldrb.w	r3, [r9]
 8008948:	3301      	adds	r3, #1
 800894a:	b2db      	uxtb	r3, r3
 800894c:	f889 3000 	strb.w	r3, [r9]
					ST7032i_Set_DDRAM(DDRAM_Address);
 8008950:	f899 0000 	ldrb.w	r0, [r9]
 8008954:	f7fa fb78 	bl	8003048 <ST7032i_Set_DDRAM>
					break;
 8008958:	e739      	b.n	80087ce <main+0x4a>
				case 'M':
					ST7032i_Clear();
					ST7032i_Set_DDRAM(0x40);
					break;
				case 'J':
					DDRAM_Address--;
 800895a:	f899 3000 	ldrb.w	r3, [r9]
 800895e:	3b01      	subs	r3, #1
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f889 3000 	strb.w	r3, [r9]
					ST7032i_Set_DDRAM(DDRAM_Address);
 8008966:	f899 0000 	ldrb.w	r0, [r9]
 800896a:	f7fa fb6d 	bl	8003048 <ST7032i_Set_DDRAM>
					break;
 800896e:	e72e      	b.n	80087ce <main+0x4a>
					break;
				case 'R':
					ST7032i_Return();
					break;
				case 'I':
					ST7032i_Increment();
 8008970:	f7fa fc18 	bl	80031a4 <ST7032i_Increment>
					break;
 8008974:	e72b      	b.n	80087ce <main+0x4a>
					break;
				case 'S':
					ST7032i_Shift_Enable();
					break;
				case 'H':
					ST7032i_Shift_Disable();
 8008976:	f7fa fbd7 	bl	8003128 <ST7032i_Shift_Disable>
					break;
 800897a:	e728      	b.n	80087ce <main+0x4a>
					sprintf(tmp, "Contrast is :%u\r\n", Contrast);
					usart_print(USART3Serial, tmp);
					ST7032i_Set_Contrast(Contrast);
					break;
				case 'E':
					Contrast--;
 800897c:	783b      	ldrb	r3, [r7, #0]
					sprintf(tmp, "Contrast is :%u\r\n", Contrast);
 800897e:	4921      	ldr	r1, [pc, #132]	; (8008a04 <main+0x280>)
					sprintf(tmp, "Contrast is :%u\r\n", Contrast);
					usart_print(USART3Serial, tmp);
					ST7032i_Set_Contrast(Contrast);
					break;
				case 'E':
					Contrast--;
 8008980:	3b01      	subs	r3, #1
 8008982:	e7a6      	b.n	80088d2 <main+0x14e>
					break;
				case 'I':
					ST7032i_Increment();
					break;
				case 'D':
					ST7032i_Decrement();
 8008984:	f7fa fbfc 	bl	8003180 <ST7032i_Decrement>
					break;
 8008988:	e721      	b.n	80087ce <main+0x4a>
					break;
				case 'X':
					ST7032i_Display_Off();
					break;
				case 'C':
					ST7032i_Cursor_On();
 800898a:	f7fa fb9d 	bl	80030c8 <ST7032i_Cursor_On>
					break;
 800898e:	e71e      	b.n	80087ce <main+0x4a>
				case 'V':
					ST7032i_Cursor_Off();
					break;
				case 'B':
					ST7032i_Cursor_Blink_On();
 8008990:	f7fa fb7a 	bl	8003088 <ST7032i_Cursor_Blink_On>
					break;
 8008994:	e71b      	b.n	80087ce <main+0x4a>
						icon_num = 0;
					}
					ST7032i_Icon_Set(icon_num);
					break;
				case 'A':
					usart_print(USART3Serial,
 8008996:	2002      	movs	r0, #2
 8008998:	491b      	ldr	r1, [pc, #108]	; (8008a08 <main+0x284>)
 800899a:	f7f7 ffad 	bl	80008f8 <usart_print>
 800899e:	f04f 0a00 	mov.w	sl, #0
							"\r\nData stored in DDRAM is :\r\n");
					for (i = 0; i < 16; i++) {
						usart_write(USART3Serial, (uint8_t) DDRAM_Data[0][i]);
 80089a2:	f816 100a 	ldrb.w	r1, [r6, sl]
 80089a6:	2002      	movs	r0, #2
 80089a8:	f10a 0a01 	add.w	sl, sl, #1
 80089ac:	f7f7 ff74 	bl	8000898 <usart_write>
					ST7032i_Icon_Set(icon_num);
					break;
				case 'A':
					usart_print(USART3Serial,
							"\r\nData stored in DDRAM is :\r\n");
					for (i = 0; i < 16; i++) {
 80089b0:	f1ba 0f10 	cmp.w	sl, #16
 80089b4:	d1f5      	bne.n	80089a2 <main+0x21e>
						usart_write(USART3Serial, (uint8_t) DDRAM_Data[0][i]);
					}
					usart_print(USART3Serial, "\r\n");
 80089b6:	2002      	movs	r0, #2
 80089b8:	4914      	ldr	r1, [pc, #80]	; (8008a0c <main+0x288>)
 80089ba:	f7f7 ff9d 	bl	80008f8 <usart_print>
 80089be:	f04f 0a00 	mov.w	sl, #0
					for (i = 0; i < 16; i++) {
						usart_write(USART3Serial, (uint8_t) DDRAM_Data[1][i]);
 80089c2:	eb06 030a 	add.w	r3, r6, sl
 80089c6:	2002      	movs	r0, #2
 80089c8:	7c19      	ldrb	r1, [r3, #16]
 80089ca:	f10a 0a01 	add.w	sl, sl, #1
 80089ce:	f7f7 ff63 	bl	8000898 <usart_write>
							"\r\nData stored in DDRAM is :\r\n");
					for (i = 0; i < 16; i++) {
						usart_write(USART3Serial, (uint8_t) DDRAM_Data[0][i]);
					}
					usart_print(USART3Serial, "\r\n");
					for (i = 0; i < 16; i++) {
 80089d2:	f1ba 0f10 	cmp.w	sl, #16
 80089d6:	d1f4      	bne.n	80089c2 <main+0x23e>
						usart_write(USART3Serial, (uint8_t) DDRAM_Data[1][i]);
					}
					usart_print(USART3Serial, "\r\n");
 80089d8:	2002      	movs	r0, #2
 80089da:	490c      	ldr	r1, [pc, #48]	; (8008a0c <main+0x288>)
 80089dc:	f7f7 ff8c 	bl	80008f8 <usart_print>
					break;
 80089e0:	e6f5      	b.n	80087ce <main+0x4a>
 80089e2:	bf00      	nop
 80089e4:	08008a5c 	.word	0x08008a5c
 80089e8:	2000165c 	.word	0x2000165c
 80089ec:	200000cc 	.word	0x200000cc
 80089f0:	20001660 	.word	0x20001660
 80089f4:	200000b4 	.word	0x200000b4
 80089f8:	08008ccc 	.word	0x08008ccc
 80089fc:	08008cd8 	.word	0x08008cd8
 8008a00:	08008c90 	.word	0x08008c90
 8008a04:	08008c94 	.word	0x08008c94
 8008a08:	08008ca8 	.word	0x08008ca8
 8008a0c:	08008cc8 	.word	0x08008cc8
 8008a10:	200009cc 	.word	0x200009cc

08008a14 <Reset_Handler>:
 8008a14:	2100      	movs	r1, #0
 8008a16:	e003      	b.n	8008a20 <LoopCopyDataInit>

08008a18 <CopyDataInit>:
 8008a18:	4b0a      	ldr	r3, [pc, #40]	; (8008a44 <LoopFillZerobss+0x10>)
 8008a1a:	585b      	ldr	r3, [r3, r1]
 8008a1c:	5043      	str	r3, [r0, r1]
 8008a1e:	3104      	adds	r1, #4

08008a20 <LoopCopyDataInit>:
 8008a20:	4809      	ldr	r0, [pc, #36]	; (8008a48 <LoopFillZerobss+0x14>)
 8008a22:	4b0a      	ldr	r3, [pc, #40]	; (8008a4c <LoopFillZerobss+0x18>)
 8008a24:	1842      	adds	r2, r0, r1
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d3f6      	bcc.n	8008a18 <CopyDataInit>
 8008a2a:	4a09      	ldr	r2, [pc, #36]	; (8008a50 <LoopFillZerobss+0x1c>)
 8008a2c:	e002      	b.n	8008a34 <LoopFillZerobss>

08008a2e <FillZerobss>:
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f842 3b04 	str.w	r3, [r2], #4

08008a34 <LoopFillZerobss>:
 8008a34:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <LoopFillZerobss+0x20>)
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d3f9      	bcc.n	8008a2e <FillZerobss>
 8008a3a:	f7fa fd89 	bl	8003550 <SystemInit>
 8008a3e:	f7ff fea1 	bl	8008784 <main>
 8008a42:	4770      	bx	lr
 8008a44:	08008d64 	.word	0x08008d64
 8008a48:	20000000 	.word	0x20000000
 8008a4c:	200009c4 	.word	0x200009c4
 8008a50:	200009c4 	.word	0x200009c4
 8008a54:	20001694 	.word	0x20001694

08008a58 <ADC_IRQHandler>:
 8008a58:	e7fe      	b.n	8008a58 <ADC_IRQHandler>
	...

08008a5c <Welcome_Message>:
 8008a5c:	0a0d 6548 6c6c 776f 4320 726f 6574 2d78     ..Hellow Cortex-
 8008a6c:	334d 532f 4d54 3233 5720 726f 646c 0d21     M3/STM32 World!.
 8008a7c:	450a 7078 6e61 2064 6f79 7275 6320 6572     .Expand your cre
 8008a8c:	7461 7669 7469 2079 6e61 2064 6e65 6f6a     ativity and enjo
 8008a9c:	2079 616d 696b 676e 0d2e 0d0a 490a 7220     y making.....I r
 8008aac:	6365 6965 6576 6320 6168 6172 7463 7265     eceive character
 8008abc:	6620 6f72 206d 4f43 204d 6e61 2064 7570      from COM and pu
 8008acc:	2074 7469 6f20 206e 434c 2e44 0a0d 6143     t it on LCD...Ca
 8008adc:	6970 6174 206c 656c 7474 7265 6920 2073     pital letter is 
 8008aec:	2061 7073 6365 6169 206c 6964 6572 7463     a special direct
 8008afc:	6f69 206e 6f74 4c20 4443 202e 6552 6566     ion to LCD. Refe
 8008b0c:	2072 6f73 7275 6563 6320 646f 2e65 0a0d     r source code...
 8008b1c:	0a0d 0000                                   ....

08008b20 <blanks.3927>:
 8008b20:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008b30 <zeroes.3928>:
 8008b30:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08008b40 <_global_impure_ptr>:
 8008b40:	0110 2000 0000 0000                         ... ....

08008b48 <p05.2449>:
 8008b48:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

08008b58 <__mprec_tens>:
 8008b58:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008b68:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008b78:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008b88:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008b98:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8008ba8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8008bb8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8008bc8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8008bd8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8008be8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8008bf8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8008c08:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8008c18:	9db4 79d9 7843 44ea                         ...yCx.D

08008c20 <__mprec_tinytens>:
 8008c20:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8008c30:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8008c40:	6f43 64ac 0628 0ac8                         Co.d(...

08008c48 <__mprec_bigtens>:
 8008c48:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8008c58:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8008c68:	bf3c 7f73 4fdd 7515                         <.s..O.u

08008c70 <blanks.3871>:
 8008c70:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008c80 <zeroes.3872>:
 8008c80:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 8008c90:	6325 0000 6f43 746e 6172 7473 6920 2073     %c..Contrast is 
 8008ca0:	253a 0d75 000a 0000 0a0d 6144 6174 7320     :%u.......Data s
 8008cb0:	6f74 6572 2064 6e69 4420 5244 4d41 6920     tored in DDRAM i
 8008cc0:	2073 0d3a 000a 0000 0a0d 0000 2020 2020     s :.........    
 8008cd0:	2020 2020 0000 0000 6c25 0078 6548 7061         ....%lx.Heap
 8008ce0:	6120 646e 7320 6174 6b63 6320 6c6f 696c      and stack colli
 8008cf0:	6973 6e6f 000a 0000 7865 7469 0000 0000     sion....exit....
 8008d00:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
 8008d10:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
 8008d20:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
 8008d30:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..
 8008d40:	0030 0000 6e49 6966 696e 7974 0000 0000     0...Infinity....
 8008d50:	614e 004e 0043 0000 4f50 4953 0058 0000     NaN.C...POSIX...
 8008d60:	002e 0000                                   ....
