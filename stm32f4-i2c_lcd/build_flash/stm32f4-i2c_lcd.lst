
stm32f4-i2c_lcd.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <TIM2_timer_start>:
/**
 * @brief  millisecond
 * @param  none
 * @retval None
 */
void TIM2_timer_start(void) {
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	b089      	sub	sp, #36	; 0x24
	// TIM_TimeBaseInitTypeDef's order is {uint16_t TIM_Prescaler, uint16_t TIM_CounterMode, uint16_t TIM_Period, uint16_t TIM_ClockDivision, uint8_t TIM_RepetitionCounter}
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
 800018c:	4668      	mov	r0, sp
 800018e:	f001 fba5 	bl	80018dc <RCC_GetClocksFreq>
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 8000192:	9b00      	ldr	r3, [sp, #0]
 8000194:	4a1e      	ldr	r2, [pc, #120]	; (8000210 <TIM2_timer_start+0x88>)
 8000196:	085b      	lsrs	r3, r3, #1
 8000198:	fbb3 f3f2 	udiv	r3, r3, r2
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800019c:	2001      	movs	r0, #1
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800019e:	2400      	movs	r4, #0
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TimeBaseStructure.TIM_RepetitionCounter = 0;

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001a0:	4601      	mov	r1, r0
	TIM_TimeBaseInitTypeDef TimeBaseStructure;
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
 80001a2:	f8ad 3010 	strh.w	r3, [sp, #16]
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TimeBaseStructure.TIM_Period = 1000 - 1;
 80001a6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80001aa:	9305      	str	r3, [sp, #20]
//			= { 84, TIM_CounterMode_Up, 999, TIM_CKD_DIV1, 0 };

	RCC_ClocksTypeDef RCC_Clocks;
	RCC_GetClocksFreq(&RCC_Clocks);
	TimeBaseStructure.TIM_Prescaler = (RCC_Clocks.SYSCLK_Frequency>>1)/1000000L ;
	TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80001ac:	f8ad 4012 	strh.w	r4, [sp, #18]
	TimeBaseStructure.TIM_Period = 1000 - 1;
	TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80001b0:	f8ad 4018 	strh.w	r4, [sp, #24]
	TimeBaseStructure.TIM_RepetitionCounter = 0;
 80001b4:	f88d 401a 	strb.w	r4, [sp, #26]

	//Supply APB1 Clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80001b8:	f001 fc24 	bl	8001a04 <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseInit(TIM2, &TimeBaseStructure);
 80001bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001c0:	a904      	add	r1, sp, #16
 80001c2:	f001 ffc7 	bl	8002154 <TIM_TimeBaseInit>
//  TIM_SelectOnePulseMode(TIM2, TIM_OPMode_Repetitive);
	TIM_SetCounter(TIM2, 0);
 80001c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001ca:	4621      	mov	r1, r4
 80001cc:	f002 f814 	bl	80021f8 <TIM_SetCounter>
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 80001d0:	2101      	movs	r1, #1
 80001d2:	460a      	mov	r2, r1
 80001d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001d8:	f002 fb81 	bl	80028de <TIM_ITConfig>

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001dc:	231c      	movs	r3, #28
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80001de:	eb0d 0003 	add.w	r0, sp, r3

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001e2:	2501      	movs	r5, #1
	TIM_SetCounter(TIM2, 0);
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);

	NVIC_InitTypeDef NVIC_InitStructure;
	/* Enable the TIM2 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80001e4:	f88d 301c 	strb.w	r3, [sp, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80001e8:	f88d 401d 	strb.w	r4, [sp, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 80001ec:	f88d 501e 	strb.w	r5, [sp, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80001f0:	f88d 501f 	strb.w	r5, [sp, #31]
	NVIC_Init(&NVIC_InitStructure);
 80001f4:	f000 ff76 	bl	80010e4 <NVIC_Init>

	/* TIM enable counter */
	TIM_Cmd(TIM2, ENABLE);
 80001f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001fc:	4629      	mov	r1, r5
 80001fe:	f002 f83e 	bl	800227e <TIM_Cmd>

	__counter_micros = 0;
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <TIM2_timer_start+0x8c>)
 8000204:	601c      	str	r4, [r3, #0]
	__counter_millis = 0;
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <TIM2_timer_start+0x90>)
 8000208:	601c      	str	r4, [r3, #0]
}
 800020a:	b009      	add	sp, #36	; 0x24
 800020c:	bd30      	pop	{r4, r5, pc}
 800020e:	bf00      	nop
 8000210:	000f4240 	.word	0x000f4240
 8000214:	200009d8 	.word	0x200009d8
 8000218:	200009dc 	.word	0x200009dc

0800021c <micros>:

uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <micros+0x14>)

	__counter_micros = 0;
	__counter_millis = 0;
}

uint32_t micros(void) {
 800021e:	b510      	push	{r4, lr}
	return __counter_micros + TIM_GetCounter(TIM2 );
 8000220:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000224:	681c      	ldr	r4, [r3, #0]
 8000226:	f001 ffeb 	bl	8002200 <TIM_GetCounter>
}
 800022a:	1900      	adds	r0, r0, r4
 800022c:	bd10      	pop	{r4, pc}
 800022e:	bf00      	nop
 8000230:	200009d8 	.word	0x200009d8

08000234 <millis>:

uint32_t millis(void) {
	return __counter_millis;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <millis+0x8>)
 8000236:	6818      	ldr	r0, [r3, #0]
}
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	200009dc 	.word	0x200009dc

08000240 <delay_ms>:
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <delay_ms+0x10>)
 8000242:	681a      	ldr	r2, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
 8000244:	1882      	adds	r2, r0, r2
uint32_t micros(void) {
	return __counter_micros + TIM_GetCounter(TIM2 );
}

uint32_t millis(void) {
	return __counter_millis;
 8000246:	6819      	ldr	r1, [r3, #0]
}

void delay_ms(uint32_t w) {
	uint32_t wtill = millis() + w;
	while (millis() < wtill)
 8000248:	4291      	cmp	r1, r2
 800024a:	d3fc      	bcc.n	8000246 <delay_ms+0x6>
		;
}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	200009dc 	.word	0x200009dc

08000254 <delay_us>:

void delay_us(uint32_t w) {
 8000254:	b510      	push	{r4, lr}
 8000256:	4604      	mov	r4, r0
	uint32_t wtill = micros() + w;
 8000258:	f7ff ffe0 	bl	800021c <micros>
 800025c:	1904      	adds	r4, r0, r4
	while (micros() < wtill)
 800025e:	f7ff ffdd 	bl	800021c <micros>
 8000262:	42a0      	cmp	r0, r4
 8000264:	d3fb      	bcc.n	800025e <delay_us+0xa>
		;
}
 8000266:	bd10      	pop	{r4, pc}

08000268 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000268:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM2, TIM_IT_Update ) != RESET) {
 800026a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800026e:	2101      	movs	r1, #1
 8000270:	f002 fb4a 	bl	8002908 <TIM_GetITStatus>
 8000274:	b168      	cbz	r0, 8000292 <TIM2_IRQHandler+0x2a>
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update );
 8000276:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800027a:	2101      	movs	r1, #1
 800027c:	f002 fb4f 	bl	800291e <TIM_ClearITPendingBit>
		__counter_micros += 1000;
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <TIM2_IRQHandler+0x2c>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000288:	601a      	str	r2, [r3, #0]
		__counter_millis += 1;
 800028a:	4b03      	ldr	r3, [pc, #12]	; (8000298 <TIM2_IRQHandler+0x30>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	3201      	adds	r2, #1
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	bd08      	pop	{r3, pc}
 8000294:	200009d8 	.word	0x200009d8
 8000298:	200009dc 	.word	0x200009dc

0800029c <pinMode>:
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 800029c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 800029e:	f3c0 2503 	ubfx	r5, r0, #8, #4
 80002a2:	4c10      	ldr	r4, [pc, #64]	; (80002e4 <pinMode+0x48>)
	}
	return 16;
}
*/

void pinMode(GPIOPin portpin, GPIOMode_TypeDef mode) {
 80002a4:	460f      	mov	r7, r1
 80002a6:	4606      	mov	r6, r0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80002ae:	f001 fb85 	bl	80019bc <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002b2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002b6:	2301      	movs	r3, #1
 80002b8:	f006 060f 	and.w	r6, r6, #15
 80002bc:	fa13 f606 	lsls.w	r6, r3, r6

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002c0:	2300      	movs	r3, #0

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002c2:	b2b6      	uxth	r6, r6
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002c4:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80002c8:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
 80002ce:	9600      	str	r6, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002d0:	2302      	movs	r3, #2
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002d2:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(PortPeriph[portpin>>8 & 0x0f], ENABLE);

	GPIO_InitStructure.GPIO_Pin = PinBit(portpin);
	GPIO_InitStructure.GPIO_Mode = mode;
 80002d4:	f88d 7004 	strb.w	r7, [sp, #4]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80002d8:	f88d 3005 	strb.w	r3, [sp, #5]
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
 80002dc:	f000 ffc6 	bl	800126c <GPIO_Init>
}
 80002e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000000 	.word	0x20000000

080002e8 <digitalWrite>:

void digitalWrite(GPIOPin portpin, uint8_t bit) {
 80002e8:	0a02      	lsrs	r2, r0, #8
 80002ea:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <digitalWrite+0x2c>)
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80002ec:	f002 020f 	and.w	r2, r2, #15
 80002f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002f4:	f000 000f 	and.w	r0, r0, #15
	//
	GPIO_Init(Port[portpin>>8 & 0x0f], &GPIO_InitStructure);
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
 80002f8:	b129      	cbz	r1, 8000306 <digitalWrite+0x1e>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 80002fa:	2101      	movs	r1, #1
 80002fc:	4081      	lsls	r1, r0
}

void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 80002fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000300:	b289      	uxth	r1, r1
 8000302:	f001 b824 	b.w	800134e <GPIO_SetBits>
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000306:	2101      	movs	r1, #1
 8000308:	4081      	lsls	r1, r0
void digitalWrite(GPIOPin portpin, uint8_t bit) {
	if (bit) {
		//? Bit_SET : Bit_RESET ));
		GPIO_SetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
 800030a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800030c:	b289      	uxth	r1, r1
 800030e:	f001 b820 	b.w	8001352 <GPIO_ResetBits>
 8000312:	bf00      	nop
 8000314:	20000000 	.word	0x20000000

08000318 <digitalRead>:
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000318:	b508      	push	{r3, lr}
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <digitalRead+0x44>)
 800031c:	f3c0 2203 	ubfx	r2, r0, #8, #4
 8000320:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	} else {
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
 8000324:	4601      	mov	r1, r0
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000326:	f001 010f 	and.w	r1, r1, #15
		GPIO_ResetBits(Port[portpin >>8 & 0x0f], PinBit(portpin));
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
 800032a:	6a98      	ldr	r0, [r3, #40]	; 0x28
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 800032c:	2301      	movs	r3, #1
 800032e:	fa13 f101 	lsls.w	r1, r3, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000332:	6802      	ldr	r2, [r0, #0]
GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
}

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000334:	b289      	uxth	r1, r1
	}
}

uint8_t digitalRead(GPIOPin portpin) {
	GPIO_TypeDef * port = Port[portpin>>8 & 0x0f];
	uint8_t mode = (port->MODER) >> (PinBit(portpin) * 2);
 8000336:	fa11 f303 	lsls.w	r3, r1, r3
 800033a:	fa32 f303 	lsrs.w	r3, r2, r3
	if (mode == GPIO_Mode_OUT)
 800033e:	b2db      	uxtb	r3, r3
 8000340:	2b01      	cmp	r3, #1
 8000342:	d105      	bne.n	8000350 <digitalRead+0x38>
		return (GPIO_ReadOutputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000344:	f000 fffa 	bl	800133c <GPIO_ReadOutputDataBit>
 8000348:	3000      	adds	r0, #0
 800034a:	bf18      	it	ne
 800034c:	2001      	movne	r0, #1
 800034e:	bd08      	pop	{r3, pc}
	return (GPIO_ReadInputDataBit(port, PinBit(portpin)) ? SET : RESET);
 8000350:	f000 ffeb 	bl	800132a <GPIO_ReadInputDataBit>
 8000354:	3000      	adds	r0, #0
 8000356:	bf18      	it	ne
 8000358:	2001      	movne	r0, #1
}
 800035a:	bd08      	pop	{r3, pc}
 800035c:	20000000 	.word	0x20000000

08000360 <PinPort>:

GPIO_TypeDef * PinPort(GPIOPin portpin) {
	return Port[portpin >> 8 & 0x0f];
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <PinPort+0x10>)
 8000362:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8000366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
 800036a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	20000000 	.word	0x20000000

08000374 <PinBit>:

uint16_t PinBit(GPIOPin portpin) {
	return ((uint16_t)1)<<(portpin &0x0f);
 8000374:	2301      	movs	r3, #1
 8000376:	f000 000f 	and.w	r0, r0, #15
 800037a:	fa13 f000 	lsls.w	r0, r3, r0
}
 800037e:	b280      	uxth	r0, r0
 8000380:	4770      	bx	lr

08000382 <PinSource>:

uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}
 8000382:	f000 000f 	and.w	r0, r0, #15
 8000386:	4770      	bx	lr

08000388 <GPIOMode>:

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800038a:	461f      	mov	r7, r3
	if ( port == GPIOB ) {
 800038c:	4b22      	ldr	r3, [pc, #136]	; (8000418 <GPIOMode+0x90>)
 800038e:	4298      	cmp	r0, r3
uint8_t PinSource(GPIOPin portpin) {
	return portpin & 0x0f;
}

void GPIOMode(GPIO_TypeDef * port, uint16_t pinbit, GPIOMode_TypeDef mode,
              GPIOSpeed_TypeDef clk, GPIOOType_TypeDef otype, GPIOPuPd_TypeDef pupd) {
 8000390:	4604      	mov	r4, r0
 8000392:	460d      	mov	r5, r1
 8000394:	4616      	mov	r6, r2
	if ( port == GPIOB ) {
 8000396:	d101      	bne.n	800039c <GPIOMode+0x14>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000398:	2002      	movs	r0, #2
 800039a:	e022      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOC ) {
 800039c:	4b1f      	ldr	r3, [pc, #124]	; (800041c <GPIOMode+0x94>)
 800039e:	4298      	cmp	r0, r3
 80003a0:	d101      	bne.n	80003a6 <GPIOMode+0x1e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80003a2:	2004      	movs	r0, #4
 80003a4:	e01d      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOD ) {
 80003a6:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <GPIOMode+0x98>)
 80003a8:	4298      	cmp	r0, r3
 80003aa:	d101      	bne.n	80003b0 <GPIOMode+0x28>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80003ac:	2008      	movs	r0, #8
 80003ae:	e018      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOE ) {
 80003b0:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <GPIOMode+0x9c>)
 80003b2:	4298      	cmp	r0, r3
 80003b4:	d101      	bne.n	80003ba <GPIOMode+0x32>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80003b6:	2010      	movs	r0, #16
 80003b8:	e013      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOF ) {
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <GPIOMode+0xa0>)
 80003bc:	4298      	cmp	r0, r3
 80003be:	d101      	bne.n	80003c4 <GPIOMode+0x3c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80003c0:	2020      	movs	r0, #32
 80003c2:	e00e      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOG ) {
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <GPIOMode+0xa4>)
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d101      	bne.n	80003ce <GPIOMode+0x46>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80003ca:	2040      	movs	r0, #64	; 0x40
 80003cc:	e009      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOH ) {
 80003ce:	4b18      	ldr	r3, [pc, #96]	; (8000430 <GPIOMode+0xa8>)
 80003d0:	4298      	cmp	r0, r3
 80003d2:	d101      	bne.n	80003d8 <GPIOMode+0x50>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80003d4:	2080      	movs	r0, #128	; 0x80
 80003d6:	e004      	b.n	80003e2 <GPIOMode+0x5a>
	} else if ( port == GPIOI ) {
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <GPIOMode+0xac>)
 80003da:	4298      	cmp	r0, r3
 80003dc:	d103      	bne.n	80003e6 <GPIOMode+0x5e>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80003de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80003e2:	2101      	movs	r1, #1
 80003e4:	e004      	b.n	80003f0 <GPIOMode+0x68>
	} else if ( port == GPIOA ) {
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <GPIOMode+0xb0>)
 80003e8:	4298      	cmp	r0, r3
 80003ea:	d103      	bne.n	80003f4 <GPIOMode+0x6c>
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80003ec:	2001      	movs	r0, #1
 80003ee:	4601      	mov	r1, r0
 80003f0:	f001 fae4 	bl	80019bc <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80003f4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	}
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
 80003f8:	9500      	str	r5, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
 80003fa:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStructure.GPIO_PuPd = pupd;
 80003fe:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	// assumes port is already waked up.

	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
 8000402:	f88d 6004 	strb.w	r6, [sp, #4]
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
	GPIO_InitStructure.GPIO_Speed = clk;
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8000406:	4620      	mov	r0, r4
 8000408:	4669      	mov	r1, sp
	GPIO_InitTypeDef GPIO_InitStructure;
        
	GPIO_InitStructure.GPIO_Pin = pinbit;
	GPIO_InitStructure.GPIO_Mode = mode;
	GPIO_InitStructure.GPIO_OType = otype;
	GPIO_InitStructure.GPIO_PuPd = pupd;
 800040a:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStructure.GPIO_Speed = clk;
 800040e:	f88d 7005 	strb.w	r7, [sp, #5]
	//
	GPIO_Init(port, &GPIO_InitStructure);
 8000412:	f000 ff2b 	bl	800126c <GPIO_Init>
}
 8000416:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000418:	40020400 	.word	0x40020400
 800041c:	40020800 	.word	0x40020800
 8000420:	40020c00 	.word	0x40020c00
 8000424:	40021000 	.word	0x40021000
 8000428:	40021400 	.word	0x40021400
 800042c:	40021800 	.word	0x40021800
 8000430:	40021c00 	.word	0x40021c00
 8000434:	40022000 	.word	0x40022000
 8000438:	40020000 	.word	0x40020000

0800043c <GPIOWrite>:


inline void GPIOWrite(GPIO_TypeDef * port, uint16_t bits) {
	GPIO_Write(port, bits);
 800043c:	f000 bf90 	b.w	8001360 <GPIO_Write>

08000440 <i2c_begin>:
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

void i2c_begin(uint32_t clkspeed) {
 8000440:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000442:	2101      	movs	r1, #1
} CommDirection;

I2C_Status i2c1_status;
CommDirection i2c1_direction;

void i2c_begin(uint32_t clkspeed) {
 8000444:	b087      	sub	sp, #28
 8000446:	4604      	mov	r4, r0
	GPIO_InitTypeDef GPIO_InitStructure;
	I2C_InitTypeDef I2C_InitStructure;

	/* I2C Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8000448:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800044c:	f001 fada 	bl	8001a04 <RCC_APB1PeriphClockCmd>
	/* GPIO Periph clock enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 8000450:	2002      	movs	r0, #2
 8000452:	2101      	movs	r1, #1
 8000454:	f001 fab2 	bl	80019bc <RCC_AHB1PeriphClockCmd>

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
 8000458:	2106      	movs	r1, #6
 800045a:	2204      	movs	r2, #4
 800045c:	4821      	ldr	r0, [pc, #132]	; (80004e4 <i2c_begin+0xa4>)
 800045e:	f000 ff85 	bl	800136c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );
 8000462:	2109      	movs	r1, #9
 8000464:	2204      	movs	r2, #4
 8000466:	481f      	ldr	r0, [pc, #124]	; (80004e4 <i2c_begin+0xa4>)
 8000468:	f000 ff80 	bl	800136c <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 800046c:	f44f 7310 	mov.w	r3, #576	; 0x240
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8000470:	2201      	movs	r2, #1

	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
 8000472:	9304      	str	r3, [sp, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000474:	481b      	ldr	r0, [pc, #108]	; (80004e4 <i2c_begin+0xa4>)
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8000476:	f88d 2016 	strb.w	r2, [sp, #22]
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800047a:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800047c:	a904      	add	r1, sp, #16
	/* Configure I2C pins: SCL and SDA */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1 );
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800047e:	f88d 3015 	strb.w	r3, [sp, #21]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000482:	f88d 3014 	strb.w	r3, [sp, #20]
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1 );

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000486:	f88d 2017 	strb.w	r2, [sp, #23]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800048a:	f000 feef 	bl	800126c <GPIO_Init>

//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

	switch (clkspeed) {
 800048e:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <i2c_begin+0xa8>)
 8000490:	429c      	cmp	r4, r3
 8000492:	d004      	beq.n	800049e <i2c_begin+0x5e>
 8000494:	4a15      	ldr	r2, [pc, #84]	; (80004ec <i2c_begin+0xac>)
	case 100000:
	case 400000:
		break;
	default:
		clkspeed = 100000;
 8000496:	4294      	cmp	r4, r2
 8000498:	bf0c      	ite	eq
 800049a:	4614      	moveq	r4, r2
 800049c:	461c      	movne	r4, r3
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800049e:	2300      	movs	r3, #0
 80004a0:	461d      	mov	r5, r3
 80004a2:	f8ad 3004 	strh.w	r3, [sp, #4]
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80004a6:	a906      	add	r1, sp, #24
		clkspeed = 100000;
		break;
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 80004a8:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80004ac:	f8ad 3006 	strh.w	r3, [sp, #6]
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 80004b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b4:	f8ad 300a 	strh.w	r3, [sp, #10]
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;
 80004b8:	f841 4d18 	str.w	r4, [r1, #-24]!
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80004bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <i2c_begin+0xb0>)
	}
	/* I2C configuration */
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80004c2:	f8ad 300c 	strh.w	r3, [sp, #12]
	I2C_InitStructure.I2C_ClockSpeed = clkspeed;

	/* Apply I2C configuration after enabling it */
	I2C_Init(I2C1, &I2C_InitStructure);
 80004c6:	4669      	mov	r1, sp
 80004c8:	f000 ff94 	bl	80013f4 <I2C_Init>
	/* I2C Peripheral Enable */
	I2C_Cmd(I2C1, ENABLE);
 80004cc:	4808      	ldr	r0, [pc, #32]	; (80004f0 <i2c_begin+0xb0>)
 80004ce:	2101      	movs	r1, #1
 80004d0:	f001 f804 	bl	80014dc <I2C_Cmd>

	i2c1_status = NOT_READY;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <i2c_begin+0xb4>)
 80004d6:	22ff      	movs	r2, #255	; 0xff
 80004d8:	701a      	strb	r2, [r3, #0]
	i2c1_direction = NOT_DEFINED;
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <i2c_begin+0xb8>)
 80004dc:	701d      	strb	r5, [r3, #0]
}
 80004de:	b007      	add	sp, #28
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	bf00      	nop
 80004e4:	40020400 	.word	0x40020400
 80004e8:	000186a0 	.word	0x000186a0
 80004ec:	00061a80 	.word	0x00061a80
 80004f0:	40005400 	.word	0x40005400
 80004f4:	200009e1 	.word	0x200009e1
 80004f8:	200009e0 	.word	0x200009e0

080004fc <i2c_transmit>:

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
	uint16_t i;

	i2c1_direction = TRANSMITTER;
 80004fc:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <i2c_transmit+0xac>)

	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 80004fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000502:	4616      	mov	r6, r2
	uint16_t i;

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
 8000504:	4c29      	ldr	r4, [pc, #164]	; (80005ac <i2c_transmit+0xb0>)
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
	uint16_t i;

	i2c1_direction = TRANSMITTER;
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
	//
	i2c1_status = NOT_READY;
 800050a:	23ff      	movs	r3, #255	; 0xff

	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}

void i2c_transmit(uint8_t addr, uint8_t * data, uint16_t length) {
 800050c:	4607      	mov	r7, r0
 800050e:	460d      	mov	r5, r1
	uint16_t i;

	i2c1_direction = TRANSMITTER;
	//
	i2c1_status = NOT_READY;
 8000510:	7023      	strb	r3, [r4, #0]
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
 8000512:	4827      	ldr	r0, [pc, #156]	; (80005b0 <i2c_transmit+0xb4>)
 8000514:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000518:	f001 f8f8 	bl	800170c <I2C_GetFlagStatus>
 800051c:	2800      	cmp	r0, #0
 800051e:	d1f8      	bne.n	8000512 <i2c_transmit+0x16>
		;
	i2c1_status = READY;
 8000520:	7020      	strb	r0, [r4, #0]

	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000522:	2101      	movs	r1, #1
 8000524:	4822      	ldr	r0, [pc, #136]	; (80005b0 <i2c_transmit+0xb4>)
 8000526:	f000 ffe5 	bl	80014f4 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 800052a:	4821      	ldr	r0, [pc, #132]	; (80005b0 <i2c_transmit+0xb4>)
 800052c:	4921      	ldr	r1, [pc, #132]	; (80005b4 <i2c_transmit+0xb8>)
 800052e:	f001 f8d8 	bl	80016e2 <I2C_CheckEvent>
 8000532:	2800      	cmp	r0, #0
 8000534:	d0f9      	beq.n	800052a <i2c_transmit+0x2e>
		;
	i2c1_status = START_ISSUED;
 8000536:	2301      	movs	r3, #1
 8000538:	4c1c      	ldr	r4, [pc, #112]	; (80005ac <i2c_transmit+0xb0>)

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 800053a:	481d      	ldr	r0, [pc, #116]	; (80005b0 <i2c_transmit+0xb4>)
	/* Send STRAT condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 800053c:	7023      	strb	r3, [r4, #0]

	/* Send address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 800053e:	fa17 f103 	lsls.w	r1, r7, r3
 8000542:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8000546:	2200      	movs	r2, #0
 8000548:	f000 ffec 	bl	8001524 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
 800054c:	4818      	ldr	r0, [pc, #96]	; (80005b0 <i2c_transmit+0xb4>)
 800054e:	491a      	ldr	r1, [pc, #104]	; (80005b8 <i2c_transmit+0xbc>)
 8000550:	f001 f8c7 	bl	80016e2 <I2C_CheckEvent>
 8000554:	2800      	cmp	r0, #0
 8000556:	d0f9      	beq.n	800054c <i2c_transmit+0x50>
		;
	i2c1_status = DST_ADDRESS_SENT;
 8000558:	2302      	movs	r3, #2
 800055a:	7023      	strb	r3, [r4, #0]
 800055c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80005ac <i2c_transmit+0xb0>

	for (i = 0; i < length; i++) {
 8000560:	2400      	movs	r4, #0
 8000562:	e010      	b.n	8000586 <i2c_transmit+0x8a>
		I2C_SendData(I2C1, data[i]);
 8000564:	4812      	ldr	r0, [pc, #72]	; (80005b0 <i2c_transmit+0xb4>)
 8000566:	5d29      	ldrb	r1, [r5, r4]
 8000568:	f001 f85f 	bl	800162a <I2C_SendData>
		i2c1_status = BYTE_TRANSMITTING;
 800056c:	2304      	movs	r3, #4
 800056e:	f888 3000 	strb.w	r3, [r8]
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 8000572:	480f      	ldr	r0, [pc, #60]	; (80005b0 <i2c_transmit+0xb4>)
 8000574:	4911      	ldr	r1, [pc, #68]	; (80005bc <i2c_transmit+0xc0>)
 8000576:	f001 f8b4 	bl	80016e2 <I2C_CheckEvent>
 800057a:	2800      	cmp	r0, #0
 800057c:	d0f9      	beq.n	8000572 <i2c_transmit+0x76>
			;
		i2c1_status = BYTE_TRANSMITTED;
 800057e:	2305      	movs	r3, #5
 8000580:	f888 3000 	strb.w	r3, [r8]
 8000584:	3401      	adds	r4, #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ))
		;
	i2c1_status = DST_ADDRESS_SENT;

	for (i = 0; i < length; i++) {
 8000586:	b2a3      	uxth	r3, r4
 8000588:	42b3      	cmp	r3, r6
 800058a:	4f08      	ldr	r7, [pc, #32]	; (80005ac <i2c_transmit+0xb0>)
 800058c:	d3ea      	bcc.n	8000564 <i2c_transmit+0x68>
		/* Test on EV8 and clear it */
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
			;
		i2c1_status = BYTE_TRANSMITTED;
	}
	i2c1_status = TRANSMISSION_COMPLETED;
 800058e:	2306      	movs	r3, #6
 8000590:	703b      	strb	r3, [r7, #0]

	I2C_GenerateSTOP(I2C1, ENABLE);
 8000592:	4807      	ldr	r0, [pc, #28]	; (80005b0 <i2c_transmit+0xb4>)
 8000594:	2101      	movs	r1, #1
 8000596:	f000 ffb9 	bl	800150c <I2C_GenerateSTOP>
	i2c1_status = NOT_READY;
 800059a:	23ff      	movs	r3, #255	; 0xff
 800059c:	703b      	strb	r3, [r7, #0]
	i2c1_direction = NOT_DEFINED;
 800059e:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <i2c_transmit+0xac>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
}
 80005a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80005a8:	200009e0 	.word	0x200009e0
 80005ac:	200009e1 	.word	0x200009e1
 80005b0:	40005400 	.word	0x40005400
 80005b4:	00030001 	.word	0x00030001
 80005b8:	00070082 	.word	0x00070082
 80005bc:	00070084 	.word	0x00070084

080005c0 <i2c_requestFrom>:


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80005c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005c4:	4698      	mov	r8, r3
	uint16_t i;
	i2c1_direction = RECEIVER;
 80005c6:	4b46      	ldr	r3, [pc, #280]	; (80006e0 <i2c_requestFrom+0x120>)
	//
	i2c1_status = NOT_READY;
 80005c8:	4f46      	ldr	r7, [pc, #280]	; (80006e4 <i2c_requestFrom+0x124>)
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80005ca:	4614      	mov	r4, r2
	uint16_t i;
	i2c1_direction = RECEIVER;
 80005cc:	2202      	movs	r2, #2
 80005ce:	701a      	strb	r2, [r3, #0]
	//
	i2c1_status = NOT_READY;
 80005d0:	23ff      	movs	r3, #255	; 0xff
	i2c1_status = NOT_READY;
	i2c1_direction = NOT_DEFINED;
}


void i2c_requestFrom(uint8_t addr, uint8_t req, uint8_t * recv, uint16_t lim) {
 80005d2:	4606      	mov	r6, r0
 80005d4:	460d      	mov	r5, r1
	uint16_t i;
	i2c1_direction = RECEIVER;
	//
	i2c1_status = NOT_READY;
 80005d6:	703b      	strb	r3, [r7, #0]
	/* While the bus is busy */
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY ))
 80005d8:	4843      	ldr	r0, [pc, #268]	; (80006e8 <i2c_requestFrom+0x128>)
 80005da:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80005de:	f001 f895 	bl	800170c <I2C_GetFlagStatus>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	d1f8      	bne.n	80005d8 <i2c_requestFrom+0x18>
		;
	i2c1_status = READY;
 80005e6:	7038      	strb	r0, [r7, #0]

	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
 80005e8:	2101      	movs	r1, #1
 80005ea:	483f      	ldr	r0, [pc, #252]	; (80006e8 <i2c_requestFrom+0x128>)
 80005ec:	f000 ff82 	bl	80014f4 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 80005f0:	483d      	ldr	r0, [pc, #244]	; (80006e8 <i2c_requestFrom+0x128>)
 80005f2:	493e      	ldr	r1, [pc, #248]	; (80006ec <i2c_requestFrom+0x12c>)
 80005f4:	f001 f875 	bl	80016e2 <I2C_CheckEvent>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d0f9      	beq.n	80005f0 <i2c_requestFrom+0x30>
		;
	i2c1_status = START_ISSUED;
 80005fc:	2301      	movs	r3, #1
 80005fe:	4f39      	ldr	r7, [pc, #228]	; (80006e4 <i2c_requestFrom+0x124>)

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000600:	4839      	ldr	r0, [pc, #228]	; (80006e8 <i2c_requestFrom+0x128>)
	/* Send START condition */
	I2C_GenerateSTART(I2C1, ENABLE);
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
		;
	i2c1_status = START_ISSUED;
 8000602:	703b      	strb	r3, [r7, #0]

	/* Send EEPROM address for write */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Transmitter );
 8000604:	409e      	lsls	r6, r3
 8000606:	b2f6      	uxtb	r6, r6
 8000608:	4631      	mov	r1, r6
 800060a:	2200      	movs	r2, #0
 800060c:	f000 ff8a 	bl	8001524 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED )) {
 8000610:	4835      	ldr	r0, [pc, #212]	; (80006e8 <i2c_requestFrom+0x128>)
 8000612:	4937      	ldr	r1, [pc, #220]	; (80006f0 <i2c_requestFrom+0x130>)
 8000614:	f001 f865 	bl	80016e2 <I2C_CheckEvent>
 8000618:	2800      	cmp	r0, #0
 800061a:	d0f9      	beq.n	8000610 <i2c_requestFrom+0x50>
	}
	i2c1_status = DST_ADDRESS_SENT;
 800061c:	2302      	movs	r3, #2
 800061e:	703b      	strb	r3, [r7, #0]

	/* Send the EEPROM's internal address to read from: MSB of the address first */
	I2C_SendData(I2C1, req);
 8000620:	4831      	ldr	r0, [pc, #196]	; (80006e8 <i2c_requestFrom+0x128>)
 8000622:	4629      	mov	r1, r5
 8000624:	f001 f801 	bl	800162a <I2C_SendData>
	i2c1_status = BYTE_TRANSMITTING;
 8000628:	2304      	movs	r3, #4
 800062a:	703b      	strb	r3, [r7, #0]
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
 800062c:	482e      	ldr	r0, [pc, #184]	; (80006e8 <i2c_requestFrom+0x128>)
 800062e:	4931      	ldr	r1, [pc, #196]	; (80006f4 <i2c_requestFrom+0x134>)
 8000630:	f001 f857 	bl	80016e2 <I2C_CheckEvent>
 8000634:	2800      	cmp	r0, #0
 8000636:	d0f9      	beq.n	800062c <i2c_requestFrom+0x6c>
		;
	i2c1_status = TRANSMISSION_COMPLETED;
 8000638:	4d2a      	ldr	r5, [pc, #168]	; (80006e4 <i2c_requestFrom+0x124>)

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 800063a:	482b      	ldr	r0, [pc, #172]	; (80006e8 <i2c_requestFrom+0x128>)
	I2C_SendData(I2C1, req);
	i2c1_status = BYTE_TRANSMITTING;
	/* Test on EV8 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED ))
		;
	i2c1_status = TRANSMISSION_COMPLETED;
 800063c:	2306      	movs	r3, #6
 800063e:	702b      	strb	r3, [r5, #0]

	//	  I2C_GenerateSTOP(I2C1, ENABLE);

	/* Send STRAT condition a second time */
	I2C_GenerateSTART(I2C1, ENABLE);
 8000640:	2101      	movs	r1, #1
 8000642:	f000 ff57 	bl	80014f4 <I2C_GenerateSTART>
	/* Test on EV5 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT ))
 8000646:	4828      	ldr	r0, [pc, #160]	; (80006e8 <i2c_requestFrom+0x128>)
 8000648:	4928      	ldr	r1, [pc, #160]	; (80006ec <i2c_requestFrom+0x12c>)
 800064a:	f001 f84a 	bl	80016e2 <I2C_CheckEvent>
 800064e:	2800      	cmp	r0, #0
 8000650:	d0f9      	beq.n	8000646 <i2c_requestFrom+0x86>
		;
	i2c1_status = RESTART_ISSUED;
 8000652:	2307      	movs	r3, #7
 8000654:	702b      	strb	r3, [r5, #0]

	/* Send EEPROM address for read */
	I2C_Send7bitAddress(I2C1, addr << 1, I2C_Direction_Receiver );
 8000656:	4824      	ldr	r0, [pc, #144]	; (80006e8 <i2c_requestFrom+0x128>)
 8000658:	4631      	mov	r1, r6
 800065a:	2201      	movs	r2, #1
 800065c:	f000 ff62 	bl	8001524 <I2C_Send7bitAddress>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
 8000660:	4821      	ldr	r0, [pc, #132]	; (80006e8 <i2c_requestFrom+0x128>)
 8000662:	4925      	ldr	r1, [pc, #148]	; (80006f8 <i2c_requestFrom+0x138>)
 8000664:	f001 f83d 	bl	80016e2 <I2C_CheckEvent>
 8000668:	2800      	cmp	r0, #0
 800066a:	d0f9      	beq.n	8000660 <i2c_requestFrom+0xa0>
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 800066c:	2501      	movs	r5, #1
 800066e:	4f1d      	ldr	r7, [pc, #116]	; (80006e4 <i2c_requestFrom+0x124>)
 8000670:	e00e      	b.n	8000690 <i2c_requestFrom+0xd0>
		i2c1_status = RECEIVE_BYTE_READY;
 8000672:	2308      	movs	r3, #8
 8000674:	703b      	strb	r3, [r7, #0]
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 8000676:	481c      	ldr	r0, [pc, #112]	; (80006e8 <i2c_requestFrom+0x128>)
 8000678:	4920      	ldr	r1, [pc, #128]	; (80006fc <i2c_requestFrom+0x13c>)
 800067a:	f001 f832 	bl	80016e2 <I2C_CheckEvent>
 800067e:	2800      	cmp	r0, #0
 8000680:	d0f9      	beq.n	8000676 <i2c_requestFrom+0xb6>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 8000682:	4819      	ldr	r0, [pc, #100]	; (80006e8 <i2c_requestFrom+0x128>)
 8000684:	f000 ffd3 	bl	800162e <I2C_ReceiveData>
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 8000688:	3501      	adds	r5, #1
		i2c1_status = RECEIVE_BYTE_READY;
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
 800068a:	f804 0b01 	strb.w	r0, [r4], #1
	/* Test on EV6 and clear it */
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ))
		;
	i2c1_status = SRC_ADDRESS_SENT;

	for (i = 1; i < lim; i++) {
 800068e:	b2ad      	uxth	r5, r5
 8000690:	4545      	cmp	r5, r8
 8000692:	4e14      	ldr	r6, [pc, #80]	; (80006e4 <i2c_requestFrom+0x124>)
 8000694:	d3ed      	bcc.n	8000672 <i2c_requestFrom+0xb2>
		}
		/* Read a byte from the EEPROM */
		*recv++ = I2C_ReceiveData(I2C1 );
		i2c1_status = BYTE_RECEIVED;
	}
	i2c1_status = BEFORELAST_BYTE_RECEIVED;
 8000696:	230a      	movs	r3, #10
 8000698:	7033      	strb	r3, [r6, #0]

	/* Disable Acknowledgement */
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 800069a:	4813      	ldr	r0, [pc, #76]	; (80006e8 <i2c_requestFrom+0x128>)
 800069c:	2100      	movs	r1, #0
 800069e:	f000 ff49 	bl	8001534 <I2C_AcknowledgeConfig>
	/* Send STOP Condition */
	I2C_GenerateSTOP(I2C1, ENABLE);
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <i2c_requestFrom+0x128>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	f000 ff31 	bl	800150c <I2C_GenerateSTOP>
	i2c1_status = LAST_BYTE_READY;
 80006aa:	230b      	movs	r3, #11
 80006ac:	7033      	strb	r3, [r6, #0]

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <i2c_requestFrom+0x128>)
 80006b0:	4912      	ldr	r1, [pc, #72]	; (80006fc <i2c_requestFrom+0x13c>)
 80006b2:	f001 f816 	bl	80016e2 <I2C_CheckEvent>
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d0f9      	beq.n	80006ae <i2c_requestFrom+0xee>
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <i2c_requestFrom+0x128>)
 80006bc:	f000 ffb7 	bl	800162e <I2C_ReceiveData>
 80006c0:	7020      	strb	r0, [r4, #0]
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 80006c2:	4c08      	ldr	r4, [pc, #32]	; (80006e4 <i2c_requestFrom+0x124>)

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <i2c_requestFrom+0x128>)

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED )) {
	}
	/* Read a byte from the EEPROM */
	*recv = I2C_ReceiveData(I2C1 );
	i2c1_status = RECEIVE_BYTE_COMPLETED;
 80006c6:	230c      	movs	r3, #12
 80006c8:	7023      	strb	r3, [r4, #0]

	/* Enable Acknowledgement to be ready for another reception */
	I2C_AcknowledgeConfig(I2C1, ENABLE);
 80006ca:	2101      	movs	r1, #1
 80006cc:	f000 ff32 	bl	8001534 <I2C_AcknowledgeConfig>
	i2c1_status = NOT_READY;
 80006d0:	23ff      	movs	r3, #255	; 0xff
 80006d2:	7023      	strb	r3, [r4, #0]
	i2c1_direction = NOT_DEFINED;
 80006d4:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <i2c_requestFrom+0x120>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
}
 80006da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006de:	bf00      	nop
 80006e0:	200009e0 	.word	0x200009e0
 80006e4:	200009e1 	.word	0x200009e1
 80006e8:	40005400 	.word	0x40005400
 80006ec:	00030001 	.word	0x00030001
 80006f0:	00070082 	.word	0x00070082
 80006f4:	00070084 	.word	0x00070084
 80006f8:	00030002 	.word	0x00030002
 80006fc:	00030040 	.word	0x00030040

08000700 <i2c_send>:

void i2c_send(uint8_t addr, uint8_t * data, uint16_t length) {

}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <spi_begin>:
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000708:	4699      	mov	r9, r3
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800070a:	4b57      	ldr	r3, [pc, #348]	; (8000868 <spi_begin+0x164>)
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 800070c:	b08b      	sub	sp, #44	; 0x2c
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800070e:	4298      	cmp	r0, r3
#include "spi.h"

//SPI_TypeDef * spix[] = { SPI1, SPI2, SPI3 };

void spi_begin(SPI_TypeDef * SPIx,/*SPIBus spibus,*/ GPIOPin sck, GPIOPin miso, GPIOPin mosi,
		GPIOPin nss) {
 8000710:	4682      	mov	sl, r0
 8000712:	460f      	mov	r7, r1
 8000714:	4690      	mov	r8, r2
 8000716:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
//	GPIOPin sck, miso, mosi, nss;

	/* PCLK2 = HCLK/2 */
	//RCC_PCLK2Config(RCC_HCLK_Div2);
//	SPIx = spix[spibus];
	if (SPIx == SPI1) {
 800071a:	d105      	bne.n	8000728 <spi_begin+0x24>
//	case SPI1Bus:
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800071c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000720:	2101      	movs	r1, #1
 8000722:	f001 f97b 	bl	8001a1c <RCC_APB2PeriphClockCmd>
 8000726:	e007      	b.n	8000738 <spi_begin+0x34>
//		 sck = PA5; // PB3
//		 miso = PA6; // PB4
//		 mosi = PA7; // PB5
//		 nss = PA4; // PA15
//		break;
	} else if ( SPIx == SPI2 ) {
 8000728:	4b50      	ldr	r3, [pc, #320]	; (800086c <spi_begin+0x168>)
 800072a:	4298      	cmp	r0, r3
 800072c:	d106      	bne.n	800073c <spi_begin+0x38>
//	case SPI2Bus:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
 800072e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000732:	2101      	movs	r1, #1
 8000734:	f001 f966 	bl	8001a04 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_SPI2;
 8000738:	2605      	movs	r6, #5
 800073a:	e005      	b.n	8000748 <spi_begin+0x44>
		// PB12, 13, 14, 15
//		break;
	} else {
//	case SPI3Bus:
//	default:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800073c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000740:	2101      	movs	r1, #1
 8000742:	f001 f99b 	bl	8001a7c <RCC_APB1PeriphResetCmd>
		af = GPIO_AF_SPI3;
 8000746:	2606      	movs	r6, #6
//		 mosi = PB5;
//		 nss = PA15; // PA4;
//		break;
	}

	GPIOMode(PinPort(sck), PinBit(sck), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000748:	4638      	mov	r0, r7
 800074a:	f7ff fe09 	bl	8000360 <PinPort>
 800074e:	4603      	mov	r3, r0
 8000750:	4638      	mov	r0, r7
 8000752:	9303      	str	r3, [sp, #12]
 8000754:	f7ff fe0e 	bl	8000374 <PinBit>
 8000758:	9b03      	ldr	r3, [sp, #12]
 800075a:	2401      	movs	r4, #1
 800075c:	2500      	movs	r5, #0
 800075e:	4601      	mov	r1, r0
 8000760:	2202      	movs	r2, #2
 8000762:	4618      	mov	r0, r3
 8000764:	4623      	mov	r3, r4
 8000766:	9500      	str	r5, [sp, #0]
 8000768:	9401      	str	r4, [sp, #4]
 800076a:	f7ff fe0d 	bl	8000388 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(miso), PinBit(miso), GPIO_Mode_AF, GPIO_Speed_25MHz,
 800076e:	4640      	mov	r0, r8
 8000770:	f7ff fdf6 	bl	8000360 <PinPort>
 8000774:	4603      	mov	r3, r0
 8000776:	4640      	mov	r0, r8
 8000778:	9303      	str	r3, [sp, #12]
 800077a:	f7ff fdfb 	bl	8000374 <PinBit>
 800077e:	9b03      	ldr	r3, [sp, #12]
 8000780:	9500      	str	r5, [sp, #0]
 8000782:	4601      	mov	r1, r0
 8000784:	2202      	movs	r2, #2
 8000786:	4618      	mov	r0, r3
 8000788:	4623      	mov	r3, r4
 800078a:	9401      	str	r4, [sp, #4]
 800078c:	f7ff fdfc 	bl	8000388 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIOMode(PinPort(mosi), PinBit(mosi), GPIO_Mode_AF, GPIO_Speed_25MHz,
 8000790:	4648      	mov	r0, r9
 8000792:	f7ff fde5 	bl	8000360 <PinPort>
 8000796:	4603      	mov	r3, r0
 8000798:	4648      	mov	r0, r9
 800079a:	9303      	str	r3, [sp, #12]
 800079c:	f7ff fdea 	bl	8000374 <PinBit>
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	9500      	str	r5, [sp, #0]
 80007a4:	4601      	mov	r1, r0
 80007a6:	2202      	movs	r2, #2
 80007a8:	4618      	mov	r0, r3
 80007aa:	4623      	mov	r3, r4
 80007ac:	9401      	str	r4, [sp, #4]
 80007ae:	f7ff fdeb 	bl	8000388 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	GPIO_PinAFConfig(PinPort(sck), PinSource(sck), af);
 80007b2:	4638      	mov	r0, r7
 80007b4:	f7ff fdd4 	bl	8000360 <PinPort>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4638      	mov	r0, r7
 80007bc:	9303      	str	r3, [sp, #12]
 80007be:	f7ff fde0 	bl	8000382 <PinSource>
 80007c2:	9b03      	ldr	r3, [sp, #12]
 80007c4:	4601      	mov	r1, r0
 80007c6:	4632      	mov	r2, r6
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fdcf 	bl	800136c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(miso), PinSource(miso), af);
 80007ce:	4640      	mov	r0, r8
 80007d0:	f7ff fdc6 	bl	8000360 <PinPort>
 80007d4:	4607      	mov	r7, r0
 80007d6:	4640      	mov	r0, r8
 80007d8:	f7ff fdd3 	bl	8000382 <PinSource>
 80007dc:	4632      	mov	r2, r6
 80007de:	4601      	mov	r1, r0
 80007e0:	4638      	mov	r0, r7
 80007e2:	f000 fdc3 	bl	800136c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(mosi), PinSource(mosi), af);
 80007e6:	4648      	mov	r0, r9
 80007e8:	f7ff fdba 	bl	8000360 <PinPort>
 80007ec:	4607      	mov	r7, r0
 80007ee:	4648      	mov	r0, r9
 80007f0:	f7ff fdc7 	bl	8000382 <PinSource>
 80007f4:	4632      	mov	r2, r6
 80007f6:	4601      	mov	r1, r0
 80007f8:	4638      	mov	r0, r7
 80007fa:	f000 fdb7 	bl	800136c <GPIO_PinAFConfig>
	// nSS by software
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
 80007fe:	4658      	mov	r0, fp
 8000800:	f7ff fdae 	bl	8000360 <PinPort>
 8000804:	4606      	mov	r6, r0
 8000806:	4658      	mov	r0, fp
 8000808:	f7ff fdb4 	bl	8000374 <PinBit>
 800080c:	4622      	mov	r2, r4
 800080e:	4623      	mov	r3, r4
 8000810:	4601      	mov	r1, r0
 8000812:	4630      	mov	r0, r6
 8000814:	9500      	str	r5, [sp, #0]
 8000816:	9401      	str	r4, [sp, #4]
 8000818:	f7ff fdb6 	bl	8000388 <GPIOMode>
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
 800081c:	4658      	mov	r0, fp
 800081e:	4621      	mov	r1, r4
 8000820:	f7ff fd62 	bl	80002e8 <digitalWrite>
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
 8000824:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000828:	f8ad 3016 	strh.w	r3, [sp, #22]
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
 800082c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000830:	f8ad 301e 	strh.w	r3, [sp, #30]
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000834:	4650      	mov	r0, sl
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 8000836:	2310      	movs	r3, #16
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;

	SPI_Init(SPIx, &SPI_InitStruct);
 8000838:	a905      	add	r1, sp, #20
	GPIOMode(PinPort(nss), PinBit(nss), GPIO_Mode_OUT, GPIO_Speed_25MHz,
			GPIO_OType_PP, GPIO_PuPd_UP);
	digitalWrite(nss, HIGH);
	//GPIO_PinAFConfig(PinPort(nss), PinSource(nss), af);

	SPI_InitStruct.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800083a:	f8ad 5014 	strh.w	r5, [sp, #20]
	SPI_InitStruct.SPI_Mode = SPI_Mode_Master;
	SPI_InitStruct.SPI_DataSize = SPI_DataSize_8b;
 800083e:	f8ad 5018 	strh.w	r5, [sp, #24]
	SPI_InitStruct.SPI_CPOL = SPI_CPOL_Low;
 8000842:	f8ad 501a 	strh.w	r5, [sp, #26]
	SPI_InitStruct.SPI_CPHA = SPI_CPHA_1Edge;
 8000846:	f8ad 501c 	strh.w	r5, [sp, #28]
	SPI_InitStruct.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStruct.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800084a:	f8ad 3020 	strh.w	r3, [sp, #32]
	SPI_InitStruct.SPI_FirstBit = SPI_FirstBit_MSB;
 800084e:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	SPI_InitStruct.SPI_CRCPolynomial = SPI_CRC_Rx;
 8000852:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24

	SPI_Init(SPIx, &SPI_InitStruct);
 8000856:	f001 f9e5 	bl	8001c24 <SPI_Init>

	SPI_Cmd(SPIx, ENABLE);
 800085a:	4650      	mov	r0, sl
 800085c:	4621      	mov	r1, r4
 800085e:	f001 fa7c 	bl	8001d5a <SPI_Cmd>
	 *              - Enable or disable the SS output using the SPI_SSOutputCmd() function
	 *
	 *          10. To use the CRC Hardware calculation feature refer to the Peripheral
	 *              CRC hardware Calculation subsection.
	 */
}
 8000862:	b00b      	add	sp, #44	; 0x2c
 8000864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000868:	40013000 	.word	0x40013000
 800086c:	40003800 	.word	0x40003800

08000870 <spi_transfer>:

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
 8000870:	b570      	push	{r4, r5, r6, lr}
 8000872:	4604      	mov	r4, r0
 8000874:	4616      	mov	r6, r2
 8000876:	460d      	mov	r5, r1
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 8000878:	e017      	b.n	80008aa <spi_transfer+0x3a>
		/* Wait for SPIx Tx buffer empty */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_TXE ) == RESET)
 800087a:	4620      	mov	r0, r4
 800087c:	2102      	movs	r1, #2
 800087e:	f001 fb23 	bl	8001ec8 <SPI_I2S_GetFlagStatus>
 8000882:	2800      	cmp	r0, #0
 8000884:	d0f9      	beq.n	800087a <spi_transfer+0xa>
			;
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
 8000886:	4620      	mov	r0, r4
 8000888:	f815 1b01 	ldrb.w	r1, [r5], #1
 800088c:	f001 fae5 	bl	8001e5a <SPI_I2S_SendData>
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
 8000890:	4620      	mov	r0, r4
 8000892:	2101      	movs	r1, #1
 8000894:	f001 fb18 	bl	8001ec8 <SPI_I2S_GetFlagStatus>
 8000898:	2800      	cmp	r0, #0
 800089a:	d0f9      	beq.n	8000890 <spi_transfer+0x20>
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 800089c:	4620      	mov	r0, r4
 800089e:	f001 fad9 	bl	8001e54 <SPI_I2S_ReceiveData>

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80008a2:	3e01      	subs	r6, #1
		SPI_I2S_SendData(SPIx, (uint16_t) *data);
		/* Wait for SPIx data reception */
		while (SPI_I2S_GetFlagStatus(SPIx, SPI_I2S_FLAG_RXNE ) == RESET)
			;
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
 80008a4:	f805 0c01 	strb.w	r0, [r5, #-1]

void spi_transfer(SPI_TypeDef * SPIx, /*SPIBus spibus,*/ uint8_t * data, uint16_t nbytes) {
//	SPI_TypeDef * SPIx = spix[spibus];
	uint8_t rcvdata;

	for (; nbytes; nbytes--) {
 80008a8:	b2b6      	uxth	r6, r6
 80008aa:	2e00      	cmp	r6, #0
 80008ac:	d1e5      	bne.n	800087a <spi_transfer+0xa>
		/* Read SPIy received data */
		rcvdata = SPI_I2S_ReceiveData(SPIx);
		*data = rcvdata;
		data++;
	}
}
 80008ae:	bd70      	pop	{r4, r5, r6, pc}

080008b0 <SysTick_Handler>:
#include "systick.h"

volatile uint32_t _systick_counter;

void SysTick_Handler(void) {
	_systick_counter++; /* increment timeTicks counter */
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <SysTick_Handler+0xc>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	3201      	adds	r2, #1
 80008b6:	601a      	str	r2, [r3, #0]
}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	200009e4 	.word	0x200009e4

080008c0 <SysTick_delay>:

void SysTick_delay(const uint32_t dlyTicks) {
	uint32_t currTicks = _systick_counter;
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <SysTick_delay+0x10>)
 80008c2:	681a      	ldr	r2, [r3, #0]

	while ((_systick_counter - currTicks) < dlyTicks)
 80008c4:	6819      	ldr	r1, [r3, #0]
 80008c6:	1a89      	subs	r1, r1, r2
 80008c8:	4281      	cmp	r1, r0
 80008ca:	d3fb      	bcc.n	80008c4 <SysTick_delay+0x4>
		;
}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	200009e4 	.word	0x200009e4

080008d4 <SysTick_Start>:

void SysTick_Start(void) {
 80008d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	RCC_ClocksTypeDef RCC_Clocks;
	  /* SysTick end of count event each 1ms */
	  RCC_GetClocksFreq(&RCC_Clocks);
 80008d6:	4668      	mov	r0, sp
 80008d8:	f001 f800 	bl	80018dc <RCC_GetClocksFreq>
	  SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);
 80008dc:	9a01      	ldr	r2, [sp, #4]
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	fbb2 f2f3 	udiv	r2, r2, r3
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <SysTick_Start+0x2c>)
 80008e8:	3a01      	subs	r2, #1
 80008ea:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80008ec:	4a05      	ldr	r2, [pc, #20]	; (8000904 <SysTick_Start+0x30>)
 80008ee:	21f0      	movs	r1, #240	; 0xf0
 80008f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
		// Handle Error
		while (1)
			;
	}
*/
}
 80008fc:	b005      	add	sp, #20
 80008fe:	bd00      	pop	{pc}
 8000900:	e000e010 	.word	0xe000e010
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <SysTick_count>:

uint32_t SysTick_count() {
	return _systick_counter;
 8000908:	4b01      	ldr	r3, [pc, #4]	; (8000910 <SysTick_count+0x8>)
 800090a:	6818      	ldr	r0, [r3, #0]
}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200009e4 	.word	0x200009e4

08000914 <buffer_clear>:
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
	r->tail = 0;
 800091a:	f8a0 3102 	strh.w	r3, [r0, #258]	; 0x102
	r->count = 0;
 800091e:	f8a0 3104 	strh.w	r3, [r0, #260]	; 0x104
}
 8000922:	4770      	bx	lr

08000924 <buffer_count>:

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}
 8000924:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000928:	4770      	bx	lr

0800092a <buffer_is_full>:

uint8_t buffer_is_full(USARTRing * r) {
	if ( (r->head == r->tail) && (r->count > 0) ) {
 800092a:	f9b0 2100 	ldrsh.w	r2, [r0, #256]	; 0x100
 800092e:	f9b0 3102 	ldrsh.w	r3, [r0, #258]	; 0x102
 8000932:	429a      	cmp	r2, r3
 8000934:	d105      	bne.n	8000942 <buffer_is_full+0x18>

uint16_t buffer_count(USARTRing * r) {
	return r->count;
}

uint8_t buffer_is_full(USARTRing * r) {
 8000936:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
	if ( (r->head == r->tail) && (r->count > 0) ) {
		return 1;
 800093a:	3000      	adds	r0, #0
 800093c:	bf18      	it	ne
 800093e:	2001      	movne	r0, #1
 8000940:	4770      	bx	lr
	}
	return 0;
 8000942:	2000      	movs	r0, #0
}
 8000944:	4770      	bx	lr

08000946 <buffer_enque>:

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
 8000946:	b538      	push	{r3, r4, r5, lr}
 8000948:	4604      	mov	r4, r0
 800094a:	460d      	mov	r5, r1
	if ( buffer_is_full(r) )
 800094c:	f7ff ffed 	bl	800092a <buffer_is_full>
 8000950:	b9b0      	cbnz	r0, 8000980 <buffer_enque+0x3a>
		return 0xffff;
	r->buf[r->head++] = w;
 8000952:	f8b4 3100 	ldrh.w	r3, [r4, #256]	; 0x100
 8000956:	b21a      	sxth	r2, r3
 8000958:	3301      	adds	r3, #1
 800095a:	f824 5012 	strh.w	r5, [r4, r2, lsl #1]
	r->count++;
 800095e:	f8b4 2104 	ldrh.w	r2, [r4, #260]	; 0x104
 8000962:	3201      	adds	r2, #1
 8000964:	f8a4 2104 	strh.w	r2, [r4, #260]	; 0x104
	r->head %= USART_BUFFER_SIZE;
 8000968:	b21a      	sxth	r2, r3
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <buffer_enque+0x42>)
 800096c:	4013      	ands	r3, r2
 800096e:	2b00      	cmp	r3, #0
 8000970:	da03      	bge.n	800097a <buffer_enque+0x34>
 8000972:	3b01      	subs	r3, #1
 8000974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000978:	3301      	adds	r3, #1
 800097a:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 800097e:	e001      	b.n	8000984 <buffer_enque+0x3e>
	return 0;
}

uint16_t buffer_enque(USARTRing * r, uint16_t w) {
	if ( buffer_is_full(r) )
		return 0xffff;
 8000980:	f64f 75ff 	movw	r5, #65535	; 0xffff
	r->buf[r->head++] = w;
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}
 8000984:	4628      	mov	r0, r5
 8000986:	bd38      	pop	{r3, r4, r5, pc}
 8000988:	8000007f 	.word	0x8000007f

0800098c <buffer_deque>:
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 800098c:	f8b0 1104 	ldrh.w	r1, [r0, #260]	; 0x104
	r->count++;
	r->head %= USART_BUFFER_SIZE;
	return w;
}

uint16_t buffer_deque(USARTRing * r) {
 8000990:	4602      	mov	r2, r0
	uint16_t w;
	if ( buffer_count(r) == 0 )
 8000992:	b1a1      	cbz	r1, 80009be <buffer_deque+0x32>
		return 0xffff;
	w = r->buf[r->tail++];
 8000994:	f8b0 3102 	ldrh.w	r3, [r0, #258]	; 0x102
	r->count--;
 8000998:	3901      	subs	r1, #1

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 800099a:	b218      	sxth	r0, r3
 800099c:	3301      	adds	r3, #1
	r->count--;
 800099e:	f8a2 1104 	strh.w	r1, [r2, #260]	; 0x104
	r->tail %= USART_BUFFER_SIZE;
 80009a2:	b219      	sxth	r1, r3
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <buffer_deque+0x38>)

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
	w = r->buf[r->tail++];
 80009a6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
 80009aa:	400b      	ands	r3, r1
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	da03      	bge.n	80009b8 <buffer_deque+0x2c>
 80009b0:	3b01      	subs	r3, #1
 80009b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009b6:	3301      	adds	r3, #1
 80009b8:	f8a2 3102 	strh.w	r3, [r2, #258]	; 0x102
 80009bc:	4770      	bx	lr
}

uint16_t buffer_deque(USARTRing * r) {
	uint16_t w;
	if ( buffer_count(r) == 0 )
		return 0xffff;
 80009be:	f64f 70ff 	movw	r0, #65535	; 0xffff
	w = r->buf[r->tail++];
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}
 80009c2:	4770      	bx	lr
 80009c4:	8000007f 	.word	0x8000007f

080009c8 <usart_begin>:

void usart_begin(USART_TypeDef * /*USARTSerial*/ USARTx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 80009c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009cc:	469b      	mov	fp, r3
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
 80009ce:	4b66      	ldr	r3, [pc, #408]	; (8000b68 <usart_begin+0x1a0>)
 80009d0:	4298      	cmp	r0, r3
	r->count--;
	r->tail %= USART_BUFFER_SIZE;
	return w;
}

void usart_begin(USART_TypeDef * /*USARTSerial*/ USARTx, GPIOPin rx, GPIOPin tx, uint32_t baud) {
 80009d2:	b08b      	sub	sp, #44	; 0x2c
 80009d4:	4605      	mov	r5, r0
 80009d6:	4689      	mov	r9, r1
 80009d8:	4692      	mov	sl, r2
	uint8_t af = GPIO_AF_USART1;
	IRQn_Type irq = USART1_IRQn;

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
 80009da:	d108      	bne.n	80009ee <usart_begin+0x26>
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 80009dc:	2010      	movs	r0, #16
 80009de:	2101      	movs	r1, #1
 80009e0:	f001 f81c 	bl	8001a1c <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART1;
		irq = USART1_IRQn;
 80009e4:	2725      	movs	r7, #37	; 0x25

//	switch(usx) {
//	case USART1Serial:
	if ( USARTx == USART1 ) {
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
		af = GPIO_AF_USART1;
 80009e6:	2607      	movs	r6, #7
		irq = USART1_IRQn;
		usx = 0;
 80009e8:	f04f 0800 	mov.w	r8, #0
 80009ec:	e03b      	b.n	8000a66 <usart_begin+0x9e>
//	break;
	} else if ( USARTx == USART2 ) {
 80009ee:	4b5f      	ldr	r3, [pc, #380]	; (8000b6c <usart_begin+0x1a4>)
 80009f0:	4298      	cmp	r0, r3
 80009f2:	d109      	bne.n	8000a08 <usart_begin+0x40>
//	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80009f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80009f8:	2101      	movs	r1, #1
 80009fa:	f001 f803 	bl	8001a04 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART2;
		irq = USART2_IRQn;
 80009fe:	2726      	movs	r7, #38	; 0x26
		usx = 0;
//	break;
	} else if ( USARTx == USART2 ) {
//	case USART2Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
		af = GPIO_AF_USART2;
 8000a00:	2607      	movs	r6, #7
		irq = USART2_IRQn;
		usx = 1;
 8000a02:	f04f 0801 	mov.w	r8, #1
 8000a06:	e02e      	b.n	8000a66 <usart_begin+0x9e>
//	break;
	} else if ( USARTx == USART3 ) {
 8000a08:	4b59      	ldr	r3, [pc, #356]	; (8000b70 <usart_begin+0x1a8>)
 8000a0a:	4298      	cmp	r0, r3
 8000a0c:	d109      	bne.n	8000a22 <usart_begin+0x5a>
//	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000a0e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000a12:	2101      	movs	r1, #1
 8000a14:	f000 fff6 	bl	8001a04 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_USART3;
		irq = USART3_IRQn;
 8000a18:	2727      	movs	r7, #39	; 0x27
		usx = 1;
//	break;
	} else if ( USARTx == USART3 ) {
//	case USART3Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
		af = GPIO_AF_USART3;
 8000a1a:	2607      	movs	r6, #7
		irq = USART3_IRQn;
		usx = 2;
 8000a1c:	f04f 0802 	mov.w	r8, #2
 8000a20:	e021      	b.n	8000a66 <usart_begin+0x9e>
//	break;
	} else if ( USARTx == UART4 ) {
 8000a22:	4b54      	ldr	r3, [pc, #336]	; (8000b74 <usart_begin+0x1ac>)
 8000a24:	4298      	cmp	r0, r3
 8000a26:	d109      	bne.n	8000a3c <usart_begin+0x74>
//	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
 8000a28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	f000 ffe9 	bl	8001a04 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART4;
		irq = UART4_IRQn;
 8000a32:	2734      	movs	r7, #52	; 0x34
		usx = 2;
//	break;
	} else if ( USARTx == UART4 ) {
//	case UART4Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
		af = GPIO_AF_UART4;
 8000a34:	2608      	movs	r6, #8
		irq = UART4_IRQn;
		usx = 3;
 8000a36:	f04f 0803 	mov.w	r8, #3
 8000a3a:	e014      	b.n	8000a66 <usart_begin+0x9e>
//	break;
	} else if ( USARTx == UART5 ) {
 8000a3c:	4b4e      	ldr	r3, [pc, #312]	; (8000b78 <usart_begin+0x1b0>)
 8000a3e:	4298      	cmp	r0, r3
 8000a40:	d109      	bne.n	8000a56 <usart_begin+0x8e>
//	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
 8000a42:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a46:	2101      	movs	r1, #1
 8000a48:	f000 ffdc 	bl	8001a04 <RCC_APB1PeriphClockCmd>
		af = GPIO_AF_UART5;
		irq = UART5_IRQn;
 8000a4c:	2735      	movs	r7, #53	; 0x35
		usx = 3;
//	break;
	} else if ( USARTx == UART5 ) {
//	case UART5Serial:
		RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
		af = GPIO_AF_UART5;
 8000a4e:	2608      	movs	r6, #8
		irq = UART5_IRQn;
		usx = 4;
 8000a50:	f04f 0804 	mov.w	r8, #4
 8000a54:	e007      	b.n	8000a66 <usart_begin+0x9e>
//		break;
	} else { //if ( USARTx == USART6 ) {
//	case USART6Serial:
//	default:
//		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
 8000a56:	2020      	movs	r0, #32
 8000a58:	2101      	movs	r1, #1
 8000a5a:	f000 ffdf 	bl	8001a1c <RCC_APB2PeriphClockCmd>
		af = GPIO_AF_USART6;
		irq = USART6_IRQn;
 8000a5e:	2747      	movs	r7, #71	; 0x47
	} else { //if ( USARTx == USART6 ) {
//	case USART6Serial:
//	default:
//		usx = USART6Serial;
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
		af = GPIO_AF_USART6;
 8000a60:	2608      	movs	r6, #8
		irq = USART6_IRQn;
		usx = 5;
 8000a62:	f04f 0805 	mov.w	r8, #5
//		break;
	}
	GPIOMode(PinPort(rx), PinBit(rx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000a66:	4648      	mov	r0, r9
 8000a68:	f7ff fc7a 	bl	8000360 <PinPort>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4648      	mov	r0, r9
 8000a70:	9303      	str	r3, [sp, #12]
 8000a72:	f7ff fc7f 	bl	8000374 <PinBit>
 8000a76:	9b03      	ldr	r3, [sp, #12]
 8000a78:	2202      	movs	r2, #2
 8000a7a:	2400      	movs	r4, #0
 8000a7c:	4601      	mov	r1, r0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	4613      	mov	r3, r2
 8000a82:	9400      	str	r4, [sp, #0]
 8000a84:	9401      	str	r4, [sp, #4]
 8000a86:	f7ff fc7f 	bl	8000388 <GPIOMode>
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);
 8000a8a:	4650      	mov	r0, sl
 8000a8c:	f7ff fc68 	bl	8000360 <PinPort>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4650      	mov	r0, sl
 8000a94:	9303      	str	r3, [sp, #12]
 8000a96:	f7ff fc6d 	bl	8000374 <PinBit>
 8000a9a:	9b03      	ldr	r3, [sp, #12]
 8000a9c:	9400      	str	r4, [sp, #0]
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	4601      	mov	r1, r0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	9401      	str	r4, [sp, #4]
 8000aa8:	f7ff fc6e 	bl	8000388 <GPIOMode>

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
 8000aac:	4648      	mov	r0, r9
 8000aae:	f7ff fc57 	bl	8000360 <PinPort>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4648      	mov	r0, r9
 8000ab6:	9303      	str	r3, [sp, #12]
 8000ab8:	f7ff fc63 	bl	8000382 <PinSource>
 8000abc:	9b03      	ldr	r3, [sp, #12]
 8000abe:	4601      	mov	r1, r0
 8000ac0:	4632      	mov	r2, r6
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fc52 	bl	800136c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );
 8000ac8:	4650      	mov	r0, sl
 8000aca:	f7ff fc49 	bl	8000360 <PinPort>
 8000ace:	4681      	mov	r9, r0
 8000ad0:	4650      	mov	r0, sl
 8000ad2:	f7ff fc56 	bl	8000382 <PinSource>
 8000ad6:	4632      	mov	r2, r6
 8000ad8:	4601      	mov	r1, r0
 8000ada:	4648      	mov	r0, r9
 8000adc:	f000 fc46 	bl	800136c <GPIO_PinAFConfig>
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000ae0:	230c      	movs	r3, #12

	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	a905      	add	r1, sp, #20
	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000ae6:	f8ad 301e 	strh.w	r3, [sp, #30]
	GPIOMode(PinPort(tx), PinBit(tx), GPIO_Mode_AF, GPIO_Speed_50MHz, GPIO_OType_PP, GPIO_PuPd_NOPULL);

	GPIO_PinAFConfig(PinPort(rx), PinSource(rx), af );
	GPIO_PinAFConfig(PinPort(tx), PinSource(tx), af );

	USART_InitStruct.USART_BaudRate = baud;	// the baudrate is set to the value we passed into this init function
 8000aea:	f8cd b014 	str.w	fp, [sp, #20]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000aee:	f8ad 4018 	strh.w	r4, [sp, #24]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;	// we want 1 stop bit (standard)
 8000af2:	f8ad 401a 	strh.w	r4, [sp, #26]
	USART_InitStruct.USART_Parity = USART_Parity_No;// we don't want a parity bit (standard)
 8000af6:	f8ad 401c 	strh.w	r4, [sp, #28]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000afa:	f8ad 4020 	strh.w	r4, [sp, #32]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver

	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000afe:	f002 f823 	bl	8002b48 <USART_Init>

	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000b02:	4628      	mov	r0, r5
 8000b04:	2201      	movs	r2, #1
 8000b06:	f240 5125 	movw	r1, #1317	; 0x525
 8000b0a:	f002 f95b 	bl	8002dc4 <USART_ITConfig>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
 8000b0e:	4622      	mov	r2, r4
 8000b10:	4628      	mov	r0, r5
 8000b12:	f240 7127 	movw	r1, #1831	; 0x727
 8000b16:	f002 f955 	bl	8002dc4 <USART_ITConfig>

	NVIC_InitStructure.NVIC_IRQChannel = irq;
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000b1a:	2601      	movs	r6, #1
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000b1c:	a809      	add	r0, sp, #36	; 0x24
	USART_Init(USARTx /*usartx[usx]*/, &USART_InitStruct); // again all the properties are passed to the USART_Init function which takes care of all the bit setting

	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);

	NVIC_InitStructure.NVIC_IRQChannel = irq;
 8000b1e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
	// we want to configure the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
 8000b22:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
 8000b26:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
 8000b2a:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000b2e:	f000 fad9 	bl	80010e4 <NVIC_Init>
	//
	buffer_clear(&rxring[usx]);
 8000b32:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000b36:	fb03 f808 	mul.w	r8, r3, r8
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <usart_begin+0x1b4>)
	buffer_clear(&txring[usx]);
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <usart_begin+0x1b8>)
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; // this sets the priority group of the USART3 interrupts
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; // this sets the subpriority inside the group
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;	// the USART3 interrupts are globally enabled
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
 8000b3e:	4442      	add	r2, r8
	buffer_clear(&txring[usx]);
 8000b40:	4443      	add	r3, r8
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000b42:	f8a2 4100 	strh.w	r4, [r2, #256]	; 0x100
	r->tail = 0;
 8000b46:	f8a2 4102 	strh.w	r4, [r2, #258]	; 0x102
	r->count = 0;
 8000b4a:	f8a2 4104 	strh.w	r4, [r2, #260]	; 0x104
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000b4e:	f8a3 4100 	strh.w	r4, [r3, #256]	; 0x100
	r->tail = 0;
 8000b52:	f8a3 4102 	strh.w	r4, [r3, #258]	; 0x102
	r->count = 0;
 8000b56:	f8a3 4104 	strh.w	r4, [r3, #260]	; 0x104
	NVIC_Init(&NVIC_InitStructure);	// the properties are passed to the NVIC_Init function which takes care of the low level stuff
	//
	buffer_clear(&rxring[usx]);
	buffer_clear(&txring[usx]);
	// finally this enables the complete USART3 peripheral
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	f002 f870 	bl	8002c42 <USART_Cmd>
}
 8000b62:	b00b      	add	sp, #44	; 0x2c
 8000b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40004800 	.word	0x40004800
 8000b74:	40004c00 	.word	0x40004c00
 8000b78:	40005000 	.word	0x40005000
 8000b7c:	2000100c 	.word	0x2000100c
 8000b80:	200009e8 	.word	0x200009e8

08000b84 <usart_bare_write>:

void usart_bare_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000b84:	b538      	push	{r3, r4, r5, lr}
 8000b86:	4604      	mov	r4, r0
 8000b88:	460d      	mov	r5, r1
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	f002 f932 	bl	8002df6 <USART_GetFlagStatus>
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d0f9      	beq.n	8000b8a <usart_bare_write+0x6>
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
 8000b96:	4620      	mov	r0, r4
 8000b98:	4629      	mov	r1, r5
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}
 8000b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART_Cmd(USARTx /*usartx[usx]*/, ENABLE);
}

void usart_bare_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
 8000b9e:	f002 b87d 	b.w	8002c9c <USART_SendData>

08000ba2 <usart_write>:
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <usart_write+0x7e>)
 8000ba4:	4298      	cmp	r0, r3
	while (USART_GetFlagStatus(USARTx /*usartx[usx]*/, USART_FLAG_TXE ) == RESET) ;
	USART_SendData(USARTx /*usartx[usx]*/, w) ;
//	while (USART_GetFlagStatus(USART3, USART_FLAG_TC ) == RESET) ;
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
 8000ba6:	b570      	push	{r4, r5, r6, lr}
 8000ba8:	4604      	mov	r4, r0
 8000baa:	460e      	mov	r6, r1
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000bac:	d012      	beq.n	8000bd4 <usart_write+0x32>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000bae:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d010      	beq.n	8000bd8 <usart_write+0x36>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bba:	4298      	cmp	r0, r3
 8000bbc:	d00e      	beq.n	8000bdc <usart_write+0x3a>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d00c      	beq.n	8000be0 <usart_write+0x3e>
		usx = 3;
	} else if ( USARTx == UART5 ) {
		usx = 4;
 8000bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	bf14      	ite	ne
 8000bce:	2305      	movne	r3, #5
 8000bd0:	2304      	moveq	r3, #4
 8000bd2:	e006      	b.n	8000be2 <usart_write+0x40>
}

void usart_write(USART_TypeDef * USARTx /*usartx[usx]*/, const uint16_t w) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
		usx = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e004      	b.n	8000be2 <usart_write+0x40>
	} else if ( USARTx == USART2 ) {
		usx = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e002      	b.n	8000be2 <usart_write+0x40>
	} else if ( USARTx == USART3 ) {
		usx = 2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e000      	b.n	8000be2 <usart_write+0x40>
	} else if ( USARTx == UART4 ) {
		usx = 3;
 8000be0:	2303      	movs	r3, #3
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <usart_write+0x82>)
 8000be4:	f44f 7583 	mov.w	r5, #262	; 0x106
 8000be8:	fb05 2503 	mla	r5, r5, r3, r2
 8000bec:	4628      	mov	r0, r5
 8000bee:	f7ff fe9c 	bl	800092a <buffer_is_full>
 8000bf2:	b118      	cbz	r0, 8000bfc <usart_write+0x5a>
		delay_us(833);
 8000bf4:	f240 3041 	movw	r0, #833	; 0x341
 8000bf8:	f7ff fb2c 	bl	8000254 <delay_us>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f240 7127 	movw	r1, #1831	; 0x727
 8000c04:	f002 f8de 	bl	8002dc4 <USART_ITConfig>
	buffer_enque(&txring[usx], w);
 8000c08:	4631      	mov	r1, r6
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f7ff fe9b 	bl	8000946 <buffer_enque>
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
 8000c10:	4620      	mov	r0, r4
 8000c12:	f240 7127 	movw	r1, #1831	; 0x727
 8000c16:	2201      	movs	r2, #1
}
 8000c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//	uint16_t waitcount = 1000;
	if ( buffer_is_full(&txring[usx]) )
		delay_us(833);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, DISABLE);
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
 8000c1c:	f002 b8d2 	b.w	8002dc4 <USART_ITConfig>
 8000c20:	40011000 	.word	0x40011000
 8000c24:	200009e8 	.word	0x200009e8

08000c28 <usart_print>:
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	4605      	mov	r5, r0
 8000c2c:	460c      	mov	r4, r1
	while (*s)
 8000c2e:	e002      	b.n	8000c36 <usart_print+0xe>
		usart_write(USARTx /*usartx[usx]*/, (uint16_t) *s++);
 8000c30:	4628      	mov	r0, r5
 8000c32:	f7ff ffb6 	bl	8000ba2 <usart_write>
	buffer_enque(&txring[usx], w);
	USART_ITConfig(USARTx /*usartx[usx]*/, USART_IT_TXE, ENABLE);
}

void usart_print(USART_TypeDef * USARTx /*usartx[usx]*/, const char * s) {
	while (*s)
 8000c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d1f8      	bne.n	8000c30 <usart_print+0x8>
		usart_write(USARTx /*usartx[usx]*/, (uint16_t) *s++);
}
 8000c3e:	bd38      	pop	{r3, r4, r5, pc}

08000c40 <usart_bare_read>:

uint16_t usart_bare_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	return USART_ReceiveData(USARTx);
 8000c40:	f002 b830 	b.w	8002ca4 <USART_ReceiveData>

08000c44 <usart_read>:
}

uint16_t usart_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000c44:	b508      	push	{r3, lr}
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <usart_read+0x58>)
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	d012      	beq.n	8000c72 <usart_read+0x2e>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000c4c:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8000c50:	4298      	cmp	r0, r3
 8000c52:	d010      	beq.n	8000c76 <usart_read+0x32>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	d00e      	beq.n	8000c7a <usart_read+0x36>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c60:	4298      	cmp	r0, r3
 8000c62:	d00c      	beq.n	8000c7e <usart_read+0x3a>
		usx = 3;
	} else if ( USARTx == UART5 ) {
		usx = 4;
 8000c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000c68:	4298      	cmp	r0, r3
 8000c6a:	bf14      	ite	ne
 8000c6c:	2305      	movne	r3, #5
 8000c6e:	2304      	moveq	r3, #4
 8000c70:	e006      	b.n	8000c80 <usart_read+0x3c>
}

uint16_t usart_read(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
		usx = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e004      	b.n	8000c80 <usart_read+0x3c>
	} else if ( USARTx == USART2 ) {
		usx = 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e002      	b.n	8000c80 <usart_read+0x3c>
	} else if ( USARTx == USART3 ) {
		usx = 2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e000      	b.n	8000c80 <usart_read+0x3c>
	} else if ( USARTx == UART4 ) {
		usx = 3;
 8000c7e:	2303      	movs	r3, #3
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	uint16_t w = buffer_deque(&rxring[usx]);
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <usart_read+0x5c>)
 8000c82:	f44f 7083 	mov.w	r0, #262	; 0x106
 8000c86:	fb00 2003 	mla	r0, r0, r3, r2
 8000c8a:	f7ff fe7f 	bl	800098c <buffer_deque>
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}
 8000c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c92:	4298      	cmp	r0, r3
 8000c94:	bf08      	it	eq
 8000c96:	2000      	moveq	r0, #0
 8000c98:	bd08      	pop	{r3, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	2000100c 	.word	0x2000100c

08000ca4 <usart_flush>:

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000ca4:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <usart_flush+0xd0>)
 8000ca6:	4298      	cmp	r0, r3
	uint16_t w = buffer_deque(&rxring[usx]);
	if ( w == 0xffff ) return 0; // buffer is empty
	return w;
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	4604      	mov	r4, r0
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000cac:	d011      	beq.n	8000cd2 <usart_flush+0x2e>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000cae:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d00f      	beq.n	8000cd6 <usart_flush+0x32>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cba:	4298      	cmp	r0, r3
 8000cbc:	d00d      	beq.n	8000cda <usart_flush+0x36>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cc2:	4298      	cmp	r0, r3
 8000cc4:	d00b      	beq.n	8000cde <usart_flush+0x3a>
		usx = 3;
	} else if ( USARTx == UART5 ) {
		usx = 4;
 8000cc6:	4d2c      	ldr	r5, [pc, #176]	; (8000d78 <usart_flush+0xd4>)
 8000cc8:	42a8      	cmp	r0, r5
 8000cca:	bf14      	ite	ne
 8000ccc:	2505      	movne	r5, #5
 8000cce:	2504      	moveq	r5, #4
 8000cd0:	e006      	b.n	8000ce0 <usart_flush+0x3c>
}

void usart_flush(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
		usx = 0;
 8000cd2:	2500      	movs	r5, #0
 8000cd4:	e004      	b.n	8000ce0 <usart_flush+0x3c>
	} else if ( USARTx == USART2 ) {
		usx = 1;
 8000cd6:	2501      	movs	r5, #1
 8000cd8:	e002      	b.n	8000ce0 <usart_flush+0x3c>
	} else if ( USARTx == USART3 ) {
		usx = 2;
 8000cda:	2502      	movs	r5, #2
 8000cdc:	e000      	b.n	8000ce0 <usart_flush+0x3c>
	} else if ( USARTx == UART4 ) {
		usx = 3;
 8000cde:	2503      	movs	r5, #3
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f240 5125 	movw	r1, #1317	; 0x525
 8000ce8:	f002 f86c 	bl	8002dc4 <USART_ITConfig>
	buffer_clear(&rxring[usx]);
 8000cec:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000cf0:	435d      	muls	r5, r3
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <usart_flush+0xd8>)
 8000cf4:	18eb      	adds	r3, r5, r3
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	f8a3 6100 	strh.w	r6, [r3, #256]	; 0x100
	r->tail = 0;
 8000cfc:	f8a3 6102 	strh.w	r6, [r3, #258]	; 0x102
	r->count = 0;
 8000d00:	f8a3 6104 	strh.w	r6, [r3, #260]	; 0x104
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
 8000d04:	4620      	mov	r0, r4
 8000d06:	f240 5125 	movw	r1, #1317	; 0x525
 8000d0a:	f002 f89d 	bl	8002e48 <USART_ClearITPendingBit>
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f240 5125 	movw	r1, #1317	; 0x525
 8000d14:	2201      	movs	r2, #1
 8000d16:	f002 f855 	bl	8002dc4 <USART_ITConfig>
	USART_ITConfig(USARTx, USART_IT_TXE, DISABLE);
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f240 7127 	movw	r1, #1831	; 0x727
 8000d20:	4632      	mov	r2, r6
 8000d22:	f002 f84f 	bl	8002dc4 <USART_ITConfig>
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <usart_flush+0xdc>)
 8000d28:	195d      	adds	r5, r3, r5
 8000d2a:	e012      	b.n	8000d52 <usart_flush+0xae>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	f002 f861 	bl	8002df6 <USART_GetFlagStatus>
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d0f9      	beq.n	8000d2c <usart_flush+0x88>
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f7ff fe27 	bl	800098c <buffer_deque>
 8000d3e:	4601      	mov	r1, r0
 8000d40:	4620      	mov	r0, r4
 8000d42:	f001 ffab 	bl	8002c9c <USART_SendData>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
 8000d46:	4620      	mov	r0, r4
 8000d48:	2140      	movs	r1, #64	; 0x40
 8000d4a:	f002 f854 	bl	8002df6 <USART_GetFlagStatus>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d0f9      	beq.n	8000d46 <usart_flush+0xa2>
	USART_ITConfig(USARTx, USART_IT_RXNE, DISABLE); // enable the USART3 receive interrupt
	buffer_clear(&rxring[usx]);
	USART_ClearITPendingBit(USARTx, USART_IT_RXNE );
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART3 receive interrupt
	USART_ITConfig(USARTx, USART_IT_TXE, DISABLE);
	while ( buffer_count(&txring[usx]) > 0 ) {
 8000d52:	f8b5 6104 	ldrh.w	r6, [r5, #260]	; 0x104
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d1e8      	bne.n	8000d2c <usart_flush+0x88>
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TXE ) == RESET);
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f240 7127 	movw	r1, #1831	; 0x727
 8000d60:	f002 f872 	bl	8002e48 <USART_ClearITPendingBit>
*/

USARTRing rxring[6], txring[6];

void buffer_clear(USARTRing * r) {
	r->head = 0;
 8000d64:	f8a5 6100 	strh.w	r6, [r5, #256]	; 0x100
	r->tail = 0;
 8000d68:	f8a5 6102 	strh.w	r6, [r5, #258]	; 0x102
	r->count = 0;
 8000d6c:	f8a5 6104 	strh.w	r6, [r5, #260]	; 0x104
		USART_SendData(USARTx, buffer_deque(&txring[usx]));
		while (USART_GetFlagStatus(USARTx, USART_FLAG_TC ) == RESET);
	}
	USART_ClearITPendingBit(USARTx, USART_IT_TXE );
	buffer_clear(&txring[usx]);
}
 8000d70:	bd70      	pop	{r4, r5, r6, pc}
 8000d72:	bf00      	nop
 8000d74:	40011000 	.word	0x40011000
 8000d78:	40005000 	.word	0x40005000
 8000d7c:	2000100c 	.word	0x2000100c
 8000d80:	200009e8 	.word	0x200009e8

08000d84 <usart_peek>:

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <usart_peek+0x60>)
 8000d86:	4298      	cmp	r0, r3
 8000d88:	d012      	beq.n	8000db0 <usart_peek+0x2c>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000d8a:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d010      	beq.n	8000db4 <usart_peek+0x30>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d00e      	beq.n	8000db8 <usart_peek+0x34>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d00c      	beq.n	8000dbc <usart_peek+0x38>
		usx = 3;
	} else if ( USARTx == UART5 ) {
		usx = 4;
 8000da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000da6:	4298      	cmp	r0, r3
 8000da8:	bf14      	ite	ne
 8000daa:	2005      	movne	r0, #5
 8000dac:	2004      	moveq	r0, #4
 8000dae:	e006      	b.n	8000dbe <usart_peek+0x3a>
}

uint16_t usart_peek(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
		usx = 0;
 8000db0:	2000      	movs	r0, #0
 8000db2:	e004      	b.n	8000dbe <usart_peek+0x3a>
	} else if ( USARTx == USART2 ) {
		usx = 1;
 8000db4:	2001      	movs	r0, #1
 8000db6:	e002      	b.n	8000dbe <usart_peek+0x3a>
	} else if ( USARTx == USART3 ) {
		usx = 2;
 8000db8:	2002      	movs	r0, #2
 8000dba:	e000      	b.n	8000dbe <usart_peek+0x3a>
	} else if ( USARTx == UART4 ) {
		usx = 3;
 8000dbc:	2003      	movs	r0, #3
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <usart_peek+0x64>)
 8000dc0:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000dc4:	fb02 3200 	mla	r2, r2, r0, r3
	} else if ( USARTx == UART5 ) {
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	if ( ! buffer_count(&rxring[usx]) == 0 )
 8000dc8:	f8b2 1104 	ldrh.w	r1, [r2, #260]	; 0x104
 8000dcc:	b139      	cbz	r1, 8000dde <usart_peek+0x5a>
		return rxring[usx].buf[rxring[usx].tail];
 8000dce:	f9b2 2102 	ldrsh.w	r2, [r2, #258]	; 0x102
 8000dd2:	2183      	movs	r1, #131	; 0x83
 8000dd4:	fb01 2000 	mla	r0, r1, r0, r2
 8000dd8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000ddc:	4770      	bx	lr
	return 0xffff;
 8000dde:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8000de2:	4770      	bx	lr
 8000de4:	40011000 	.word	0x40011000
 8000de8:	2000100c 	.word	0x2000100c

08000dec <usart_available>:

uint16_t usart_available(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <usart_available+0x4c>)
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d012      	beq.n	8000e18 <usart_available+0x2c>
		usx = 0;
	} else if ( USARTx == USART2 ) {
 8000df2:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8000df6:	4298      	cmp	r0, r3
 8000df8:	d010      	beq.n	8000e1c <usart_available+0x30>
		usx = 1;
	} else if ( USARTx == USART3 ) {
 8000dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d00e      	beq.n	8000e20 <usart_available+0x34>
		usx = 2;
	} else if ( USARTx == UART4 ) {
 8000e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e06:	4298      	cmp	r0, r3
 8000e08:	d00c      	beq.n	8000e24 <usart_available+0x38>
		usx = 3;
	} else if ( USARTx == UART5 ) {
		usx = 4;
 8000e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	bf14      	ite	ne
 8000e12:	2005      	movne	r0, #5
 8000e14:	2004      	moveq	r0, #4
 8000e16:	e006      	b.n	8000e26 <usart_available+0x3a>
}

uint16_t usart_available(USART_TypeDef * USARTx /*usartx[usx]*/) {
	uint8_t usx;
	if ( USARTx == USART1 ) {
		usx = 0;
 8000e18:	2000      	movs	r0, #0
 8000e1a:	e004      	b.n	8000e26 <usart_available+0x3a>
	} else if ( USARTx == USART2 ) {
		usx = 1;
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	e002      	b.n	8000e26 <usart_available+0x3a>
	} else if ( USARTx == USART3 ) {
		usx = 2;
 8000e20:	2002      	movs	r0, #2
 8000e22:	e000      	b.n	8000e26 <usart_available+0x3a>
	} else if ( USARTx == UART4 ) {
		usx = 3;
 8000e24:	2003      	movs	r0, #3
	r->tail = 0;
	r->count = 0;
}

uint16_t buffer_count(USARTRing * r) {
	return r->count;
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <usart_available+0x50>)
 8000e28:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000e2c:	fb02 3000 	mla	r0, r2, r0, r3
		usx = 4;
	} else { //if ( USARTx == USART6 ) {
		usx = 5;
	}
	return buffer_count(&rxring[usx]);
}
 8000e30:	f8b0 0104 	ldrh.w	r0, [r0, #260]	; 0x104
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	2000100c 	.word	0x2000100c

08000e40 <USART1_IRQHandler>:


// this is the interrupt request handler (IRQ) for ALL USART3 interrupts

void USART1_IRQHandler(void) {
 8000e40:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_RXNE )) {
 8000e42:	4816      	ldr	r0, [pc, #88]	; (8000e9c <USART1_IRQHandler+0x5c>)
 8000e44:	f240 5125 	movw	r1, #1317	; 0x525
 8000e48:	f001 ffdf 	bl	8002e0a <USART_GetITStatus>
 8000e4c:	b130      	cbz	r0, 8000e5c <USART1_IRQHandler+0x1c>
		buffer_enque(&rxring[USART1Serial], USART_ReceiveData(USART1) );
 8000e4e:	4813      	ldr	r0, [pc, #76]	; (8000e9c <USART1_IRQHandler+0x5c>)
 8000e50:	f001 ff28 	bl	8002ca4 <USART_ReceiveData>
 8000e54:	4601      	mov	r1, r0
 8000e56:	4812      	ldr	r0, [pc, #72]	; (8000ea0 <USART1_IRQHandler+0x60>)
 8000e58:	f7ff fd75 	bl	8000946 <buffer_enque>
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <USART1_IRQHandler+0x5c>)
 8000e5e:	f240 7127 	movw	r1, #1831	; 0x727
 8000e62:	f001 ffd2 	bl	8002e0a <USART_GetITStatus>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d017      	beq.n	8000e9a <USART1_IRQHandler+0x5a>
		if (txring[USART1Serial].count == 0) {
 8000e6a:	480e      	ldr	r0, [pc, #56]	; (8000ea4 <USART1_IRQHandler+0x64>)
 8000e6c:	f8b0 2104 	ldrh.w	r2, [r0, #260]	; 0x104
 8000e70:	b95a      	cbnz	r2, 8000e8a <USART1_IRQHandler+0x4a>
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
 8000e72:	480a      	ldr	r0, [pc, #40]	; (8000e9c <USART1_IRQHandler+0x5c>)
 8000e74:	f240 7127 	movw	r1, #1831	; 0x727
 8000e78:	f001 ffa4 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000e7c:	4807      	ldr	r0, [pc, #28]	; (8000e9c <USART1_IRQHandler+0x5c>)
 8000e7e:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
		}
	}
}
 8000e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
 8000e86:	f001 bfdf 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8000e8a:	f7ff fd7f 	bl	800098c <buffer_deque>
 8000e8e:	4601      	mov	r1, r0
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <USART1_IRQHandler+0x5c>)
		}
	}
}
 8000e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART1, USART_IT_TXE )) {
		if (txring[USART1Serial].count == 0) {
			USART_ITConfig(USART1, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART1, USART_IT_TXE );
		} else {
			USART_SendData(USART1, buffer_deque(&txring[USART1Serial]));
 8000e96:	f001 bf01 	b.w	8002c9c <USART_SendData>
 8000e9a:	bd08      	pop	{r3, pc}
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	2000100c 	.word	0x2000100c
 8000ea4:	200009e8 	.word	0x200009e8

08000ea8 <USART2_IRQHandler>:
		}
	}
}

void USART2_IRQHandler(void) {
 8000ea8:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_RXNE )) {
 8000eaa:	4817      	ldr	r0, [pc, #92]	; (8000f08 <USART2_IRQHandler+0x60>)
 8000eac:	f240 5125 	movw	r1, #1317	; 0x525
 8000eb0:	f001 ffab 	bl	8002e0a <USART_GetITStatus>
 8000eb4:	b130      	cbz	r0, 8000ec4 <USART2_IRQHandler+0x1c>
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
 8000eb6:	4814      	ldr	r0, [pc, #80]	; (8000f08 <USART2_IRQHandler+0x60>)
 8000eb8:	f001 fef4 	bl	8002ca4 <USART_ReceiveData>
 8000ebc:	4601      	mov	r1, r0
 8000ebe:	4813      	ldr	r0, [pc, #76]	; (8000f0c <USART2_IRQHandler+0x64>)
 8000ec0:	f7ff fd41 	bl	8000946 <buffer_enque>
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
 8000ec4:	4810      	ldr	r0, [pc, #64]	; (8000f08 <USART2_IRQHandler+0x60>)
 8000ec6:	f240 7127 	movw	r1, #1831	; 0x727
 8000eca:	f001 ff9e 	bl	8002e0a <USART_GetITStatus>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d019      	beq.n	8000f06 <USART2_IRQHandler+0x5e>
		if (txring[USART2Serial].count == 0) {
 8000ed2:	480f      	ldr	r0, [pc, #60]	; (8000f10 <USART2_IRQHandler+0x68>)
 8000ed4:	f8b0 220a 	ldrh.w	r2, [r0, #522]	; 0x20a
 8000ed8:	b95a      	cbnz	r2, 8000ef2 <USART2_IRQHandler+0x4a>
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <USART2_IRQHandler+0x60>)
 8000edc:	f240 7127 	movw	r1, #1831	; 0x727
 8000ee0:	f001 ff70 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <USART2_IRQHandler+0x60>)
 8000ee6:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
		}
	}
}
 8000eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		buffer_enque(&rxring[USART2Serial], USART_ReceiveData(USART2) );
	}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
 8000eee:	f001 bfab 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8000ef2:	f500 7083 	add.w	r0, r0, #262	; 0x106
 8000ef6:	f7ff fd49 	bl	800098c <buffer_deque>
 8000efa:	4601      	mov	r1, r0
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <USART2_IRQHandler+0x60>)
		}
	}
}
 8000efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART2, USART_IT_TXE )) {
		if (txring[USART2Serial].count == 0) {
			USART_ITConfig(USART2, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART2, USART_IT_TXE );
		} else {
			USART_SendData(USART2, buffer_deque(&txring[USART2Serial]));
 8000f02:	f001 becb 	b.w	8002c9c <USART_SendData>
 8000f06:	bd08      	pop	{r3, pc}
 8000f08:	40004400 	.word	0x40004400
 8000f0c:	20001112 	.word	0x20001112
 8000f10:	200009e8 	.word	0x200009e8

08000f14 <USART3_IRQHandler>:
		}
	}
}

void USART3_IRQHandler(void) {
 8000f14:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_RXNE )) {
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <USART3_IRQHandler+0x60>)
 8000f18:	f240 5125 	movw	r1, #1317	; 0x525
 8000f1c:	f001 ff75 	bl	8002e0a <USART_GetITStatus>
 8000f20:	b130      	cbz	r0, 8000f30 <USART3_IRQHandler+0x1c>
		buffer_enque(&rxring[USART3Serial], USART_ReceiveData(USART3) );
 8000f22:	4814      	ldr	r0, [pc, #80]	; (8000f74 <USART3_IRQHandler+0x60>)
 8000f24:	f001 febe 	bl	8002ca4 <USART_ReceiveData>
 8000f28:	4601      	mov	r1, r0
 8000f2a:	4813      	ldr	r0, [pc, #76]	; (8000f78 <USART3_IRQHandler+0x64>)
 8000f2c:	f7ff fd0b 	bl	8000946 <buffer_enque>
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <USART3_IRQHandler+0x60>)
 8000f32:	f240 7127 	movw	r1, #1831	; 0x727
 8000f36:	f001 ff68 	bl	8002e0a <USART_GetITStatus>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d019      	beq.n	8000f72 <USART3_IRQHandler+0x5e>
		if (txring[USART3Serial].count == 0) {
 8000f3e:	480f      	ldr	r0, [pc, #60]	; (8000f7c <USART3_IRQHandler+0x68>)
 8000f40:	f8b0 2310 	ldrh.w	r2, [r0, #784]	; 0x310
 8000f44:	b95a      	cbnz	r2, 8000f5e <USART3_IRQHandler+0x4a>
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <USART3_IRQHandler+0x60>)
 8000f48:	f240 7127 	movw	r1, #1831	; 0x727
 8000f4c:	f001 ff3a 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <USART3_IRQHandler+0x60>)
 8000f52:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
		}
	}
}
 8000f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
 8000f5a:	f001 bf75 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8000f5e:	f500 7003 	add.w	r0, r0, #524	; 0x20c
 8000f62:	f7ff fd13 	bl	800098c <buffer_deque>
 8000f66:	4601      	mov	r1, r0
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART3_IRQHandler+0x60>)
		}
	}
}
 8000f6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[USART3Serial].count == 0) {
			USART_ITConfig(USART3, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART3, USART_IT_TXE );
		} else {
			USART_SendData(USART3, buffer_deque(&txring[USART3Serial]));
 8000f6e:	f001 be95 	b.w	8002c9c <USART_SendData>
 8000f72:	bd08      	pop	{r3, pc}
 8000f74:	40004800 	.word	0x40004800
 8000f78:	20001218 	.word	0x20001218
 8000f7c:	200009e8 	.word	0x200009e8

08000f80 <UART4_IRQHandler>:
		}
	}
}

void UART4_IRQHandler(void) {
 8000f80:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_RXNE )) {
 8000f82:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <UART4_IRQHandler+0x60>)
 8000f84:	f240 5125 	movw	r1, #1317	; 0x525
 8000f88:	f001 ff3f 	bl	8002e0a <USART_GetITStatus>
 8000f8c:	b130      	cbz	r0, 8000f9c <UART4_IRQHandler+0x1c>
		buffer_enque(&rxring[UART4Serial], USART_ReceiveData(UART4) );
 8000f8e:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <UART4_IRQHandler+0x60>)
 8000f90:	f001 fe88 	bl	8002ca4 <USART_ReceiveData>
 8000f94:	4601      	mov	r1, r0
 8000f96:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <UART4_IRQHandler+0x64>)
 8000f98:	f7ff fcd5 	bl	8000946 <buffer_enque>
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
 8000f9c:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <UART4_IRQHandler+0x60>)
 8000f9e:	f240 7127 	movw	r1, #1831	; 0x727
 8000fa2:	f001 ff32 	bl	8002e0a <USART_GetITStatus>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d018      	beq.n	8000fdc <UART4_IRQHandler+0x5c>
		if (txring[UART4Serial].count == 0) {
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <UART4_IRQHandler+0x68>)
 8000fac:	f8b3 2416 	ldrh.w	r2, [r3, #1046]	; 0x416
 8000fb0:	b95a      	cbnz	r2, 8000fca <UART4_IRQHandler+0x4a>
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
 8000fb2:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <UART4_IRQHandler+0x60>)
 8000fb4:	f240 7127 	movw	r1, #1831	; 0x727
 8000fb8:	f001 ff04 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000fbc:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <UART4_IRQHandler+0x60>)
 8000fbe:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
		}
	}
}
 8000fc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
 8000fc6:	f001 bf3f 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8000fca:	4808      	ldr	r0, [pc, #32]	; (8000fec <UART4_IRQHandler+0x6c>)
 8000fcc:	f7ff fcde 	bl	800098c <buffer_deque>
 8000fd0:	4601      	mov	r1, r0
 8000fd2:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <UART4_IRQHandler+0x60>)
		}
	}
}
 8000fd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(UART4, USART_IT_TXE )) {
		if (txring[UART4Serial].count == 0) {
			USART_ITConfig(UART4, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART4, USART_IT_TXE );
		} else {
			USART_SendData(UART4, buffer_deque(&txring[UART4Serial]));
 8000fd8:	f001 be60 	b.w	8002c9c <USART_SendData>
 8000fdc:	bd08      	pop	{r3, pc}
 8000fde:	bf00      	nop
 8000fe0:	40004c00 	.word	0x40004c00
 8000fe4:	2000131e 	.word	0x2000131e
 8000fe8:	200009e8 	.word	0x200009e8
 8000fec:	20000cfa 	.word	0x20000cfa

08000ff0 <UART5_IRQHandler>:
		}
	}
}

void UART5_IRQHandler(void) {
 8000ff0:	b508      	push	{r3, lr}
	if (USART_GetITStatus(UART5, USART_IT_RXNE )) {
 8000ff2:	4817      	ldr	r0, [pc, #92]	; (8001050 <UART5_IRQHandler+0x60>)
 8000ff4:	f240 5125 	movw	r1, #1317	; 0x525
 8000ff8:	f001 ff07 	bl	8002e0a <USART_GetITStatus>
 8000ffc:	b130      	cbz	r0, 800100c <UART5_IRQHandler+0x1c>
		buffer_enque(&rxring[UART5Serial], USART_ReceiveData(UART5) );
 8000ffe:	4814      	ldr	r0, [pc, #80]	; (8001050 <UART5_IRQHandler+0x60>)
 8001000:	f001 fe50 	bl	8002ca4 <USART_ReceiveData>
 8001004:	4601      	mov	r1, r0
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <UART5_IRQHandler+0x64>)
 8001008:	f7ff fc9d 	bl	8000946 <buffer_enque>
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
 800100c:	4812      	ldr	r0, [pc, #72]	; (8001058 <UART5_IRQHandler+0x68>)
 800100e:	f240 7127 	movw	r1, #1831	; 0x727
 8001012:	f001 fefa 	bl	8002e0a <USART_GetITStatus>
 8001016:	2800      	cmp	r0, #0
 8001018:	d019      	beq.n	800104e <UART5_IRQHandler+0x5e>
		if (txring[UART5Serial].count == 0) {
 800101a:	4810      	ldr	r0, [pc, #64]	; (800105c <UART5_IRQHandler+0x6c>)
 800101c:	f8b0 251c 	ldrh.w	r2, [r0, #1308]	; 0x51c
 8001020:	b95a      	cbnz	r2, 800103a <UART5_IRQHandler+0x4a>
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <UART5_IRQHandler+0x60>)
 8001024:	f240 7127 	movw	r1, #1831	; 0x727
 8001028:	f001 fecc 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 800102c:	4808      	ldr	r0, [pc, #32]	; (8001050 <UART5_IRQHandler+0x60>)
 800102e:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
		}
	}
}
 8001032:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
 8001036:	f001 bf07 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 800103a:	f500 6083 	add.w	r0, r0, #1048	; 0x418
 800103e:	f7ff fca5 	bl	800098c <buffer_deque>
 8001042:	4601      	mov	r1, r0
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <UART5_IRQHandler+0x60>)
		}
	}
}
 8001046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART3, USART_IT_TXE )) {
		if (txring[UART5Serial].count == 0) {
			USART_ITConfig(UART5, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(UART5, USART_IT_TXE );
		} else {
			USART_SendData(UART5, buffer_deque(&txring[UART5Serial]));
 800104a:	f001 be27 	b.w	8002c9c <USART_SendData>
 800104e:	bd08      	pop	{r3, pc}
 8001050:	40005000 	.word	0x40005000
 8001054:	20001424 	.word	0x20001424
 8001058:	40004800 	.word	0x40004800
 800105c:	200009e8 	.word	0x200009e8

08001060 <USART6_IRQHandler>:
		}
	}
}

void USART6_IRQHandler(void) {
 8001060:	b508      	push	{r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_RXNE )) {
 8001062:	4817      	ldr	r0, [pc, #92]	; (80010c0 <USART6_IRQHandler+0x60>)
 8001064:	f240 5125 	movw	r1, #1317	; 0x525
 8001068:	f001 fecf 	bl	8002e0a <USART_GetITStatus>
 800106c:	b130      	cbz	r0, 800107c <USART6_IRQHandler+0x1c>
		buffer_enque(&rxring[USART6Serial], USART_ReceiveData(USART6) );
 800106e:	4814      	ldr	r0, [pc, #80]	; (80010c0 <USART6_IRQHandler+0x60>)
 8001070:	f001 fe18 	bl	8002ca4 <USART_ReceiveData>
 8001074:	4601      	mov	r1, r0
 8001076:	4813      	ldr	r0, [pc, #76]	; (80010c4 <USART6_IRQHandler+0x64>)
 8001078:	f7ff fc65 	bl	8000946 <buffer_enque>
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
 800107c:	4810      	ldr	r0, [pc, #64]	; (80010c0 <USART6_IRQHandler+0x60>)
 800107e:	f240 7127 	movw	r1, #1831	; 0x727
 8001082:	f001 fec2 	bl	8002e0a <USART_GetITStatus>
 8001086:	2800      	cmp	r0, #0
 8001088:	d018      	beq.n	80010bc <USART6_IRQHandler+0x5c>
		if (txring[USART6Serial].count == 0) {
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <USART6_IRQHandler+0x68>)
 800108c:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 8001090:	b95a      	cbnz	r2, 80010aa <USART6_IRQHandler+0x4a>
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <USART6_IRQHandler+0x60>)
 8001094:	f240 7127 	movw	r1, #1831	; 0x727
 8001098:	f001 fe94 	bl	8002dc4 <USART_ITConfig>
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <USART6_IRQHandler+0x60>)
 800109e:	f240 7127 	movw	r1, #1831	; 0x727
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
		}
	}
}
 80010a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	}

	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
 80010a6:	f001 becf 	b.w	8002e48 <USART_ClearITPendingBit>
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 80010aa:	4808      	ldr	r0, [pc, #32]	; (80010cc <USART6_IRQHandler+0x6c>)
 80010ac:	f7ff fc6e 	bl	800098c <buffer_deque>
 80010b0:	4601      	mov	r1, r0
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <USART6_IRQHandler+0x60>)
		}
	}
}
 80010b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (USART_GetITStatus(USART6, USART_IT_TXE )) {
		if (txring[USART6Serial].count == 0) {
			USART_ITConfig(USART6, USART_IT_TXE, (FunctionalState) DISABLE);
			USART_ClearITPendingBit(USART6, USART_IT_TXE );
		} else {
			USART_SendData(USART6, buffer_deque(&txring[USART6Serial]));
 80010b8:	f001 bdf0 	b.w	8002c9c <USART_SendData>
 80010bc:	bd08      	pop	{r3, pc}
 80010be:	bf00      	nop
 80010c0:	40011400 	.word	0x40011400
 80010c4:	2000152a 	.word	0x2000152a
 80010c8:	200009e8 	.word	0x200009e8
 80010cc:	20000f06 	.word	0x20000f06

080010d0 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80010d0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80010d4:	4b02      	ldr	r3, [pc, #8]	; (80010e0 <NVIC_PriorityGroupConfig+0x10>)
 80010d6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80010da:	60d8      	str	r0, [r3, #12]
}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80010e4:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80010e6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80010e8:	b30b      	cbz	r3, 800112e <NVIC_Init+0x4a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <NVIC_Init+0x64>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80010ec:	7842      	ldrb	r2, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80010ee:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80010f0:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80010f2:	43db      	mvns	r3, r3
 80010f4:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 80010f8:	f1c3 0104 	rsb	r1, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80010fc:	b2c9      	uxtb	r1, r1
 80010fe:	fa12 f101 	lsls.w	r1, r2, r1
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8001102:	220f      	movs	r2, #15
 8001104:	411a      	asrs	r2, r3
    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001106:	7803      	ldrb	r3, [r0, #0]
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001108:	b2c9      	uxtb	r1, r1
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800110a:	4022      	ands	r2, r4
 800110c:	430a      	orrs	r2, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800110e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001112:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800111a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800111e:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001120:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001122:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	fa12 f303 	lsls.w	r3, r2, r3
 800112c:	e007      	b.n	800113e <NVIC_Init+0x5a>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800112e:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001130:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001132:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800113c:	3120      	adds	r1, #32
 800113e:	4a03      	ldr	r2, [pc, #12]	; (800114c <NVIC_Init+0x68>)
 8001140:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001144:	bd10      	pop	{r4, pc}
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00
 800114c:	e000e100 	.word	0xe000e100

08001150 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8001150:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8001154:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001158:	4b01      	ldr	r3, [pc, #4]	; (8001160 <NVIC_SetVectorTable+0x10>)
 800115a:	4301      	orrs	r1, r0
 800115c:	6099      	str	r1, [r3, #8]
}
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <NVIC_SystemLPConfig+0x14>)
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8001166:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8001168:	b109      	cbz	r1, 800116e <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 800116a:	4310      	orrs	r0, r2
 800116c:	e001      	b.n	8001172 <NVIC_SystemLPConfig+0xe>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800116e:	ea22 0000 	bic.w	r0, r2, r0
 8001172:	6118      	str	r0, [r3, #16]
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800117e:	681a      	ldr	r2, [r3, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8001180:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8001182:	bf0c      	ite	eq
 8001184:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8001188:	f022 0204 	bicne.w	r2, r2, #4
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	4770      	bx	lr
 8001190:	e000e010 	.word	0xe000e010

08001194 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8001194:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <GPIO_DeInit+0xb4>)
 8001198:	4298      	cmp	r0, r3
 800119a:	d105      	bne.n	80011a8 <GPIO_DeInit+0x14>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800119c:	2001      	movs	r0, #1
 800119e:	4601      	mov	r1, r0
 80011a0:	f000 fc48 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80011a4:	2001      	movs	r0, #1
 80011a6:	e048      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOB)
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <GPIO_DeInit+0xb8>)
 80011aa:	4298      	cmp	r0, r3
 80011ac:	d105      	bne.n	80011ba <GPIO_DeInit+0x26>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80011ae:	2002      	movs	r0, #2
 80011b0:	2101      	movs	r1, #1
 80011b2:	f000 fc3f 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80011b6:	2002      	movs	r0, #2
 80011b8:	e03f      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOC)
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <GPIO_DeInit+0xbc>)
 80011bc:	4298      	cmp	r0, r3
 80011be:	d105      	bne.n	80011cc <GPIO_DeInit+0x38>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80011c0:	2004      	movs	r0, #4
 80011c2:	2101      	movs	r1, #1
 80011c4:	f000 fc36 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80011c8:	2004      	movs	r0, #4
 80011ca:	e036      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOD)
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <GPIO_DeInit+0xc0>)
 80011ce:	4298      	cmp	r0, r3
 80011d0:	d105      	bne.n	80011de <GPIO_DeInit+0x4a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80011d2:	2008      	movs	r0, #8
 80011d4:	2101      	movs	r1, #1
 80011d6:	f000 fc2d 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80011da:	2008      	movs	r0, #8
 80011dc:	e02d      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOE)
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <GPIO_DeInit+0xc4>)
 80011e0:	4298      	cmp	r0, r3
 80011e2:	d105      	bne.n	80011f0 <GPIO_DeInit+0x5c>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80011e4:	2010      	movs	r0, #16
 80011e6:	2101      	movs	r1, #1
 80011e8:	f000 fc24 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80011ec:	2010      	movs	r0, #16
 80011ee:	e024      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOF)
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <GPIO_DeInit+0xc8>)
 80011f2:	4298      	cmp	r0, r3
 80011f4:	d105      	bne.n	8001202 <GPIO_DeInit+0x6e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80011f6:	2020      	movs	r0, #32
 80011f8:	2101      	movs	r1, #1
 80011fa:	f000 fc1b 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 80011fe:	2020      	movs	r0, #32
 8001200:	e01b      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOG)
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <GPIO_DeInit+0xcc>)
 8001204:	4298      	cmp	r0, r3
 8001206:	d105      	bne.n	8001214 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001208:	2040      	movs	r0, #64	; 0x40
 800120a:	2101      	movs	r1, #1
 800120c:	f000 fc12 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8001210:	2040      	movs	r0, #64	; 0x40
 8001212:	e012      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else if (GPIOx == GPIOH)
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <GPIO_DeInit+0xd0>)
 8001216:	4298      	cmp	r0, r3
 8001218:	d105      	bne.n	8001226 <GPIO_DeInit+0x92>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800121a:	2080      	movs	r0, #128	; 0x80
 800121c:	2101      	movs	r1, #1
 800121e:	f000 fc09 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8001222:	2080      	movs	r0, #128	; 0x80
 8001224:	e009      	b.n	800123a <GPIO_DeInit+0xa6>
  }
  else
  {
    if (GPIOx == GPIOI)
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <GPIO_DeInit+0xd4>)
 8001228:	4298      	cmp	r0, r3
 800122a:	d10b      	bne.n	8001244 <GPIO_DeInit+0xb0>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800122c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001230:	2101      	movs	r1, #1
 8001232:	f000 fbff 	bl	8001a34 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001236:	f44f 7080 	mov.w	r0, #256	; 0x100
 800123a:	2100      	movs	r1, #0
    }
  }
}
 800123c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOI)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8001240:	f000 bbf8 	b.w	8001a34 <RCC_AHB1PeriphResetCmd>
 8001244:	bd08      	pop	{r3, pc}
 8001246:	bf00      	nop
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40021400 	.word	0x40021400
 8001260:	40021800 	.word	0x40021800
 8001264:	40021c00 	.word	0x40021c00
 8001268:	40022000 	.word	0x40022000

0800126c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001270:	2300      	movs	r3, #0
 8001272:	f8d1 8000 	ldr.w	r8, [r1]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001276:	461a      	mov	r2, r3
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001278:	f04f 0c01 	mov.w	ip, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800127c:	2703      	movs	r7, #3

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
  {
    pos = ((uint32_t)0x01) << pinpos;
 800127e:	fa0c f402 	lsl.w	r4, ip, r2
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001282:	ea04 0508 	and.w	r5, r4, r8

    if (currentpin == pos)
 8001286:	42a5      	cmp	r5, r4
 8001288:	d12e      	bne.n	80012e8 <GPIO_Init+0x7c>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800128a:	6806      	ldr	r6, [r0, #0]
 800128c:	fa17 f403 	lsls.w	r4, r7, r3
 8001290:	43e4      	mvns	r4, r4
 8001292:	4026      	ands	r6, r4
 8001294:	6006      	str	r6, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001296:	790e      	ldrb	r6, [r1, #4]
 8001298:	f8d0 9000 	ldr.w	r9, [r0]
 800129c:	fa06 fa03 	lsl.w	sl, r6, r3

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012a0:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80012a2:	ea4a 0909 	orr.w	r9, sl, r9

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012a6:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80012a8:	f8c0 9000 	str.w	r9, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012ac:	d814      	bhi.n	80012d8 <GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80012ae:	6886      	ldr	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80012b0:	f891 9005 	ldrb.w	r9, [r1, #5]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80012b4:	4026      	ands	r6, r4
 80012b6:	6086      	str	r6, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80012b8:	6886      	ldr	r6, [r0, #8]
 80012ba:	fa09 f903 	lsl.w	r9, r9, r3
 80012be:	ea49 0606 	orr.w	r6, r9, r6
 80012c2:	6086      	str	r6, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80012c4:	6846      	ldr	r6, [r0, #4]
 80012c6:	ea26 0505 	bic.w	r5, r6, r5
 80012ca:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80012cc:	798d      	ldrb	r5, [r1, #6]
 80012ce:	6846      	ldr	r6, [r0, #4]
 80012d0:	4095      	lsls	r5, r2
 80012d2:	b2ad      	uxth	r5, r5
 80012d4:	4335      	orrs	r5, r6
 80012d6:	6045      	str	r5, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80012d8:	68c5      	ldr	r5, [r0, #12]
 80012da:	402c      	ands	r4, r5
 80012dc:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80012de:	79cc      	ldrb	r4, [r1, #7]
 80012e0:	68c5      	ldr	r5, [r0, #12]
 80012e2:	409c      	lsls	r4, r3
 80012e4:	432c      	orrs	r4, r5
 80012e6:	60c4      	str	r4, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80012e8:	3201      	adds	r2, #1
 80012ea:	3302      	adds	r3, #2
 80012ec:	2a10      	cmp	r2, #16
 80012ee:	d1c6      	bne.n	800127e <GPIO_Init+0x12>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80012f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080012f4 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80012f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f8:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80012fa:	2300      	movs	r3, #0
 80012fc:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80012fe:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8001300:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001302:	71c3      	strb	r3, [r0, #7]
}
 8001304:	4770      	bx	lr

08001306 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001306:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8001308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130c:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800130e:	9b01      	ldr	r3, [sp, #4]
 8001310:	430b      	orrs	r3, r1
 8001312:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8001314:	9b01      	ldr	r3, [sp, #4]
 8001316:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8001318:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800131a:	9b01      	ldr	r3, [sp, #4]
 800131c:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800131e:	69c3      	ldr	r3, [r0, #28]
 8001320:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8001322:	69c3      	ldr	r3, [r0, #28]
 8001324:	9301      	str	r3, [sp, #4]
}
 8001326:	b002      	add	sp, #8
 8001328:	4770      	bx	lr

0800132a <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800132a:	6903      	ldr	r3, [r0, #16]
  {
    bitstatus = (uint8_t)Bit_SET;
 800132c:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800132e:	bf0c      	ite	eq
 8001330:	2000      	moveq	r0, #0
 8001332:	2001      	movne	r0, #1
 8001334:	4770      	bx	lr

08001336 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8001336:	6900      	ldr	r0, [r0, #16]
}
 8001338:	b280      	uxth	r0, r0
 800133a:	4770      	bx	lr

0800133c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800133c:	6943      	ldr	r3, [r0, #20]
  {
    bitstatus = (uint8_t)Bit_SET;
 800133e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001340:	bf0c      	ite	eq
 8001342:	2000      	moveq	r0, #0
 8001344:	2001      	movne	r0, #1
 8001346:	4770      	bx	lr

08001348 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8001348:	6940      	ldr	r0, [r0, #20]
}
 800134a:	b280      	uxth	r0, r0
 800134c:	4770      	bx	lr

0800134e <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800134e:	8301      	strh	r1, [r0, #24]
}
 8001350:	4770      	bx	lr

08001352 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001352:	8341      	strh	r1, [r0, #26]
}
 8001354:	4770      	bx	lr

08001356 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8001356:	b10a      	cbz	r2, 800135c <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8001358:	8301      	strh	r1, [r0, #24]
 800135a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800135c:	8341      	strh	r1, [r0, #26]
 800135e:	4770      	bx	lr

08001360 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8001360:	6141      	str	r1, [r0, #20]
}
 8001362:	4770      	bx	lr

08001364 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8001364:	6943      	ldr	r3, [r0, #20]
 8001366:	404b      	eors	r3, r1
 8001368:	6143      	str	r3, [r0, #20]
}
 800136a:	4770      	bx	lr

0800136c <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800136c:	f001 0307 	and.w	r3, r1, #7
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001370:	08c9      	lsrs	r1, r1, #3
 8001372:	3108      	adds	r1, #8
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001374:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001376:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001378:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 800137c:	240f      	movs	r4, #15
 800137e:	409c      	lsls	r4, r3
 8001380:	ea25 0404 	bic.w	r4, r5, r4
 8001384:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001388:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800138c:	fa12 f303 	lsls.w	r3, r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001390:	431c      	orrs	r4, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001392:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
 8001396:	bd30      	pop	{r4, r5, pc}

08001398 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8001398:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <I2C_DeInit+0x50>)
 800139c:	4298      	cmp	r0, r3
 800139e:	d107      	bne.n	80013b0 <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 80013a0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013a4:	2101      	movs	r1, #1
 80013a6:	f000 fb69 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 80013aa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013ae:	e014      	b.n	80013da <I2C_DeInit+0x42>
  }
  else if (I2Cx == I2C2)
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <I2C_DeInit+0x54>)
 80013b2:	4298      	cmp	r0, r3
 80013b4:	d107      	bne.n	80013c6 <I2C_DeInit+0x2e>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 80013b6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80013ba:	2101      	movs	r1, #1
 80013bc:	f000 fb5e 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 80013c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80013c4:	e009      	b.n	80013da <I2C_DeInit+0x42>
  }
  else 
  {
    if (I2Cx == I2C3)
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <I2C_DeInit+0x58>)
 80013c8:	4298      	cmp	r0, r3
 80013ca:	d10b      	bne.n	80013e4 <I2C_DeInit+0x4c>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 80013cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80013d0:	2101      	movs	r1, #1
 80013d2:	f000 fb53 	bl	8001a7c <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80013d6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80013da:	2100      	movs	r1, #0
    }
  }
}
 80013dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (I2Cx == I2C3)
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 80013e0:	f000 bb4c 	b.w	8001a7c <RCC_APB1PeriphResetCmd>
 80013e4:	bd08      	pop	{r3, pc}
 80013e6:	bf00      	nop
 80013e8:	40005400 	.word	0x40005400
 80013ec:	40005800 	.word	0x40005800
 80013f0:	40005c00 	.word	0x40005c00

080013f4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80013f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80013f6:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80013f8:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80013fa:	4668      	mov	r0, sp
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80013fc:	460d      	mov	r5, r1
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80013fe:	f000 fa6d 	bl	80018dc <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8001402:	9902      	ldr	r1, [sp, #8]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001404:	482c      	ldr	r0, [pc, #176]	; (80014b8 <I2C_Init+0xc4>)
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001406:	682b      	ldr	r3, [r5, #0]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001408:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800140c:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800140e:	fbb1 f0f0 	udiv	r0, r1, r0

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8001412:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001414:	b280      	uxth	r0, r0
  tmpreg |= freqrange;
 8001416:	4306      	orrs	r6, r0
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001418:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800141a:	8822      	ldrh	r2, [r4, #0]
 800141c:	f022 0201 	bic.w	r2, r2, #1
 8001420:	0412      	lsls	r2, r2, #16
 8001422:	0c12      	lsrs	r2, r2, #16
 8001424:	8022      	strh	r2, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001426:	4a25      	ldr	r2, [pc, #148]	; (80014bc <I2C_Init+0xc8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d80a      	bhi.n	8001442 <I2C_Init+0x4e>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fbb1 f3f3 	udiv	r3, r1, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001432:	3001      	adds	r0, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8001434:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8001436:	b280      	uxth	r0, r0
 8001438:	8420      	strh	r0, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800143a:	2b03      	cmp	r3, #3
 800143c:	bf98      	it	ls
 800143e:	2304      	movls	r3, #4
 8001440:	e021      	b.n	8001486 <I2C_Init+0x92>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001442:	88ee      	ldrh	r6, [r5, #6]
 8001444:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8001448:	4296      	cmp	r6, r2
 800144a:	d105      	bne.n	8001458 <I2C_Init+0x64>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800144c:	2203      	movs	r2, #3
 800144e:	4353      	muls	r3, r2
 8001450:	fbb1 f3f3 	udiv	r3, r1, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	e006      	b.n	8001466 <I2C_Init+0x72>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001458:	2219      	movs	r2, #25
 800145a:	4353      	muls	r3, r2
 800145c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001460:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8001462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8001466:	051a      	lsls	r2, r3, #20
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001468:	f44f 7296 	mov.w	r2, #300	; 0x12c

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800146c:	bf08      	it	eq
 800146e:	f043 0301 	orreq.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001472:	4350      	muls	r0, r2
 8001474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001478:	fb90 f0f2 	sdiv	r0, r0, r2
 800147c:	3001      	adds	r0, #1
 800147e:	b280      	uxth	r0, r0
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001484:	8420      	strh	r0, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001486:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8001488:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800148a:	8969      	ldrh	r1, [r5, #10]
 800148c:	88aa      	ldrh	r2, [r5, #4]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800148e:	b29b      	uxth	r3, r3
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001496:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001498:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800149c:	f023 0302 	bic.w	r3, r3, #2
 80014a0:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80014a2:	430a      	orrs	r2, r1

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 80014a4:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80014aa:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80014ac:	892a      	ldrh	r2, [r5, #8]
 80014ae:	89ab      	ldrh	r3, [r5, #12]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	8123      	strh	r3, [r4, #8]
}
 80014b6:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80014b8:	000f4240 	.word	0x000f4240
 80014bc:	000186a0 	.word	0x000186a0

080014c0 <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 80014c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80014c4:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 80014c6:	2300      	movs	r3, #0
 80014c8:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80014ca:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 80014ce:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 80014d0:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80014d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 80014d6:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80014d8:	8183      	strh	r3, [r0, #12]
}
 80014da:	4770      	bx	lr

080014dc <I2C_Cmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80014dc:	8803      	ldrh	r3, [r0, #0]
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014de:	b119      	cbz	r1, 80014e8 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	e003      	b.n	80014f0 <I2C_Cmd+0x14>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	0c1b      	lsrs	r3, r3, #16
 80014f0:	8003      	strh	r3, [r0, #0]
 80014f2:	4770      	bx	lr

080014f4 <I2C_GenerateSTART>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80014f4:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014f6:	b119      	cbz	r1, 8001500 <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fe:	e003      	b.n	8001508 <I2C_GenerateSTART+0x14>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 8001500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001504:	041b      	lsls	r3, r3, #16
 8001506:	0c1b      	lsrs	r3, r3, #16
 8001508:	8003      	strh	r3, [r0, #0]
 800150a:	4770      	bx	lr

0800150c <I2C_GenerateSTOP>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800150c:	8803      	ldrh	r3, [r0, #0]
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800150e:	b119      	cbz	r1, 8001518 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8001510:	b29b      	uxth	r3, r3
 8001512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001516:	e003      	b.n	8001520 <I2C_GenerateSTOP+0x14>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8001518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	0c1b      	lsrs	r3, r3, #16
 8001520:	8003      	strh	r3, [r0, #0]
 8001522:	4770      	bx	lr

08001524 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001524:	b112      	cbz	r2, 800152c <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 8001526:	f041 0101 	orr.w	r1, r1, #1
 800152a:	e001      	b.n	8001530 <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800152c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8001530:	8201      	strh	r1, [r0, #16]
}
 8001532:	4770      	bx	lr

08001534 <I2C_AcknowledgeConfig>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001534:	8803      	ldrh	r3, [r0, #0]
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001536:	b119      	cbz	r1, 8001540 <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8001538:	b29b      	uxth	r3, r3
 800153a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153e:	e003      	b.n	8001548 <I2C_AcknowledgeConfig+0x14>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8001540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	0c1b      	lsrs	r3, r3, #16
 8001548:	8003      	strh	r3, [r0, #0]
 800154a:	4770      	bx	lr

0800154c <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800154c:	8983      	ldrh	r3, [r0, #12]
 800154e:	b29b      	uxth	r3, r3

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001550:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 8001554:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8001558:	430b      	orrs	r3, r1

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800155a:	8183      	strh	r3, [r0, #12]
}
 800155c:	4770      	bx	lr

0800155e <I2C_DualAddressCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800155e:	8983      	ldrh	r3, [r0, #12]
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001560:	b119      	cbz	r1, 800156a <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 8001562:	b29b      	uxth	r3, r3
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	e003      	b.n	8001572 <I2C_DualAddressCmd+0x14>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	041b      	lsls	r3, r3, #16
 8001570:	0c1b      	lsrs	r3, r3, #16
 8001572:	8183      	strh	r3, [r0, #12]
 8001574:	4770      	bx	lr

08001576 <I2C_GeneralCallCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 8001576:	8803      	ldrh	r3, [r0, #0]
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001578:	b119      	cbz	r1, 8001582 <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800157a:	b29b      	uxth	r3, r3
 800157c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001580:	e003      	b.n	800158a <I2C_GeneralCallCmd+0x14>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 8001582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001586:	041b      	lsls	r3, r3, #16
 8001588:	0c1b      	lsrs	r3, r3, #16
 800158a:	8003      	strh	r3, [r0, #0]
 800158c:	4770      	bx	lr

0800158e <I2C_SoftwareResetCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800158e:	8803      	ldrh	r3, [r0, #0]
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001590:	b129      	cbz	r1, 800159e <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 8001592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800159a:	b29b      	uxth	r3, r3
 800159c:	e001      	b.n	80015a2 <I2C_SoftwareResetCmd+0x14>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800159e:	045b      	lsls	r3, r3, #17
 80015a0:	0c5b      	lsrs	r3, r3, #17
 80015a2:	8003      	strh	r3, [r0, #0]
 80015a4:	4770      	bx	lr

080015a6 <I2C_StretchClockCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80015a6:	8803      	ldrh	r3, [r0, #0]
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80015a8:	b919      	cbnz	r1, 80015b2 <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b0:	e003      	b.n	80015ba <I2C_StretchClockCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80015b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015b6:	041b      	lsls	r3, r3, #16
 80015b8:	0c1b      	lsrs	r3, r3, #16
 80015ba:	8003      	strh	r3, [r0, #0]
 80015bc:	4770      	bx	lr

080015be <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80015be:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80015c2:	8b83      	ldrh	r3, [r0, #28]
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 80015c4:	d004      	beq.n	80015d0 <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 80015c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ca:	041b      	lsls	r3, r3, #16
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	e002      	b.n	80015d6 <I2C_FastModeDutyCycleConfig+0x18>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d6:	8383      	strh	r3, [r0, #28]
 80015d8:	4770      	bx	lr

080015da <I2C_NACKPositionConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80015da:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80015de:	8803      	ldrh	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 80015e0:	d103      	bne.n	80015ea <I2C_NACKPositionConfig+0x10>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e8:	e003      	b.n	80015f2 <I2C_NACKPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 80015ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	8003      	strh	r3, [r0, #0]
 80015f4:	4770      	bx	lr

080015f6 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80015f6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80015fa:	8803      	ldrh	r3, [r0, #0]
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 80015fc:	d103      	bne.n	8001606 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001604:	e003      	b.n	800160e <I2C_SMBusAlertConfig+0x18>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8001606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	0c1b      	lsrs	r3, r3, #16
 800160e:	8003      	strh	r3, [r0, #0]
 8001610:	4770      	bx	lr

08001612 <I2C_ARPCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001612:	8803      	ldrh	r3, [r0, #0]
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001614:	b119      	cbz	r1, 800161e <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 8001616:	b29b      	uxth	r3, r3
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	e003      	b.n	8001626 <I2C_ARPCmd+0x14>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800161e:	f023 0310 	bic.w	r3, r3, #16
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	0c1b      	lsrs	r3, r3, #16
 8001626:	8003      	strh	r3, [r0, #0]
 8001628:	4770      	bx	lr

0800162a <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800162a:	8201      	strh	r1, [r0, #16]
}
 800162c:	4770      	bx	lr

0800162e <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800162e:	8a00      	ldrh	r0, [r0, #16]
}
 8001630:	b2c0      	uxtb	r0, r0
 8001632:	4770      	bx	lr

08001634 <I2C_TransmitPEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001634:	8803      	ldrh	r3, [r0, #0]
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001636:	b119      	cbz	r1, 8001640 <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8001638:	b29b      	uxth	r3, r3
 800163a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800163e:	e003      	b.n	8001648 <I2C_TransmitPEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8001640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	8003      	strh	r3, [r0, #0]
 800164a:	4770      	bx	lr

0800164c <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800164c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001650:	8803      	ldrh	r3, [r0, #0]
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8001652:	d103      	bne.n	800165c <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8001654:	b29b      	uxth	r3, r3
 8001656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800165a:	e003      	b.n	8001664 <I2C_PECPositionConfig+0x18>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800165c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001660:	041b      	lsls	r3, r3, #16
 8001662:	0c1b      	lsrs	r3, r3, #16
 8001664:	8003      	strh	r3, [r0, #0]
 8001666:	4770      	bx	lr

08001668 <I2C_CalculatePEC>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8001668:	8803      	ldrh	r3, [r0, #0]
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800166a:	b119      	cbz	r1, 8001674 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800166c:	b29b      	uxth	r3, r3
 800166e:	f043 0320 	orr.w	r3, r3, #32
 8001672:	e003      	b.n	800167c <I2C_CalculatePEC+0x14>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8001674:	f023 0320 	bic.w	r3, r3, #32
 8001678:	041b      	lsls	r3, r3, #16
 800167a:	0c1b      	lsrs	r3, r3, #16
 800167c:	8003      	strh	r3, [r0, #0]
 800167e:	4770      	bx	lr

08001680 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8001680:	8b00      	ldrh	r0, [r0, #24]
}
 8001682:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001686:	4770      	bx	lr

08001688 <I2C_DMACmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8001688:	8883      	ldrh	r3, [r0, #4]
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800168a:	b119      	cbz	r1, 8001694 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800168c:	b29b      	uxth	r3, r3
 800168e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001692:	e003      	b.n	800169c <I2C_DMACmd+0x14>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8001694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	0c1b      	lsrs	r3, r3, #16
 800169c:	8083      	strh	r3, [r0, #4]
 800169e:	4770      	bx	lr

080016a0 <I2C_DMALastTransferCmd>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80016a0:	8883      	ldrh	r3, [r0, #4]
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016a2:	b119      	cbz	r1, 80016ac <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016aa:	e003      	b.n	80016b4 <I2C_DMALastTransferCmd+0x14>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 80016ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	0c1b      	lsrs	r3, r3, #16
 80016b4:	8083      	strh	r3, [r0, #4]
 80016b6:	4770      	bx	lr

080016b8 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 80016b8:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 80016be:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 80016c0:	9b01      	ldr	r3, [sp, #4]
 80016c2:	18cb      	adds	r3, r1, r3
 80016c4:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 80016c6:	9b01      	ldr	r3, [sp, #4]
 80016c8:	8818      	ldrh	r0, [r3, #0]
}
 80016ca:	b280      	uxth	r0, r0
 80016cc:	b002      	add	sp, #8
 80016ce:	4770      	bx	lr

080016d0 <I2C_ITConfig>:
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80016d0:	8883      	ldrh	r3, [r0, #4]
 80016d2:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 80016d4:	b10a      	cbz	r2, 80016da <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 80016d6:	4319      	orrs	r1, r3
 80016d8:	e001      	b.n	80016de <I2C_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 80016da:	ea23 0101 	bic.w	r1, r3, r1
 80016de:	8081      	strh	r1, [r0, #4]
 80016e0:	4770      	bx	lr

080016e2 <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80016e2:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80016e4:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80016e6:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 80016e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80016ec:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80016ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 80016f2:	1a43      	subs	r3, r0, r1
 80016f4:	4258      	negs	r0, r3
 80016f6:	eb40 0003 	adc.w	r0, r0, r3
 80016fa:	4770      	bx	lr

080016fc <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80016fc:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 80016fe:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001700:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8001702:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8001706:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800170a:	4770      	bx	lr

0800170c <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800170c:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001714:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8001716:	9001      	str	r0, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8001718:	9300      	str	r3, [sp, #0]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
  
  if(i2creg != 0)
 800171a:	9b00      	ldr	r3, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800171c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8001720:	b113      	cbz	r3, 8001728 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8001722:	9b01      	ldr	r3, [sp, #4]
 8001724:	3314      	adds	r3, #20
 8001726:	e002      	b.n	800172e <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8001728:	9b01      	ldr	r3, [sp, #4]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800172a:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800172c:	3318      	adds	r3, #24
 800172e:	9301      	str	r3, [sp, #4]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8001730:	9b01      	ldr	r3, [sp, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8001734:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8001736:	bf0c      	ite	eq
 8001738:	2000      	moveq	r0, #0
 800173a:	2001      	movne	r0, #1
 800173c:	b002      	add	sp, #8
 800173e:	4770      	bx	lr

08001740 <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001740:	43c9      	mvns	r1, r1
 8001742:	b289      	uxth	r1, r1
 8001744:	8281      	strh	r1, [r0, #20]
}
 8001746:	4770      	bx	lr

08001748 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001748:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800174a:	8a80      	ldrh	r0, [r0, #20]
 800174c:	b280      	uxth	r0, r0
 800174e:	4008      	ands	r0, r1
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001750:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8001752:	d006      	beq.n	8001762 <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8001754:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8001758:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800175c:	bf0c      	ite	eq
 800175e:	2000      	moveq	r0, #0
 8001760:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8001762:	4770      	bx	lr

08001764 <I2C_ClearITPendingBit>:

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001764:	43c9      	mvns	r1, r1
 8001766:	b289      	uxth	r1, r1
 8001768:	8281      	strh	r1, [r0, #20]
}
 800176a:	4770      	bx	lr

0800176c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <RCC_DeInit+0x2c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8001780:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001784:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001786:	4905      	ldr	r1, [pc, #20]	; (800179c <RCC_DeInit+0x30>)
 8001788:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001790:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001792:	60da      	str	r2, [r3, #12]
}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	24003010 	.word	0x24003010

080017a0 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <RCC_HSEConfig+0xc>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80017a6:	7018      	strb	r0, [r3, #0]
}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023802 	.word	0x40023802

080017b0 <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <RCC_AdjustHSICalibrationValue+0x10>)
 80017b2:	681a      	ldr	r2, [r3, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80017b4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80017b8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80017bc:	601a      	str	r2, [r3, #0]
}
 80017be:	4770      	bx	lr
 80017c0:	40023800 	.word	0x40023800

080017c4 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80017c4:	4b01      	ldr	r3, [pc, #4]	; (80017cc <RCC_HSICmd+0x8>)
 80017c6:	6018      	str	r0, [r3, #0]
}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	42470000 	.word	0x42470000

080017d0 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <RCC_LSEConfig+0x1c>)
 80017d2:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80017d4:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80017d6:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80017d8:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80017da:	d002      	beq.n	80017e2 <RCC_LSEConfig+0x12>
 80017dc:	2804      	cmp	r0, #4
 80017de:	d104      	bne.n	80017ea <RCC_LSEConfig+0x1a>
 80017e0:	e001      	b.n	80017e6 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80017e2:	7018      	strb	r0, [r3, #0]
      break;
 80017e4:	4770      	bx	lr
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80017e6:	2205      	movs	r2, #5
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	4770      	bx	lr
 80017ec:	40023870 	.word	0x40023870

080017f0 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80017f0:	4b01      	ldr	r3, [pc, #4]	; (80017f8 <RCC_LSICmd+0x8>)
 80017f2:	6018      	str	r0, [r3, #0]
}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	42470e80 	.word	0x42470e80

080017fc <RCC_PLLConfig>:
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80017fc:	4301      	orrs	r1, r0
 80017fe:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8001802:	9900      	ldr	r1, [sp, #0]
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	3b01      	subs	r3, #1
 8001808:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800180c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001810:	4b01      	ldr	r3, [pc, #4]	; (8001818 <RCC_PLLConfig+0x1c>)
 8001812:	6059      	str	r1, [r3, #4]
                 (PLLQ << 24);
}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800181c:	4b01      	ldr	r3, [pc, #4]	; (8001824 <RCC_PLLCmd+0x8>)
 800181e:	6018      	str	r0, [r3, #0]
}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	42470060 	.word	0x42470060

08001828 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8001828:	0180      	lsls	r0, r0, #6
 800182a:	4b03      	ldr	r3, [pc, #12]	; (8001838 <RCC_PLLI2SConfig+0x10>)
 800182c:	ea40 7101 	orr.w	r1, r0, r1, lsl #28
 8001830:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800183c:	4b01      	ldr	r3, [pc, #4]	; (8001844 <RCC_PLLI2SCmd+0x8>)
 800183e:	6018      	str	r0, [r3, #0]
}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	42470068 	.word	0x42470068

08001848 <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8001848:	4b01      	ldr	r3, [pc, #4]	; (8001850 <RCC_ClockSecuritySystemCmd+0x8>)
 800184a:	6018      	str	r0, [r3, #0]
}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	4247004c 	.word	0x4247004c

08001854 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <RCC_MCO1Config+0x10>)
 8001856:	689a      	ldr	r2, [r3, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8001858:	f022 62ec 	bic.w	r2, r2, #123731968	; 0x7600000

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800185c:	4302      	orrs	r2, r0
 800185e:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001860:	609a      	str	r2, [r3, #8]
}
 8001862:	4770      	bx	lr
 8001864:	40023800 	.word	0x40023800

08001868 <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <RCC_MCO2Config+0x10>)
 800186a:	689a      	ldr	r2, [r3, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800186c:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8001870:	4302      	orrs	r2, r0
 8001872:	430a      	orrs	r2, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8001874:	609a      	str	r2, [r3, #8]
}
 8001876:	4770      	bx	lr
 8001878:	40023800 	.word	0x40023800

0800187c <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <RCC_SYSCLKConfig+0x10>)
 800187e:	689a      	ldr	r2, [r3, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001880:	f022 0203 	bic.w	r2, r2, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8001884:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800

08001890 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <RCC_GetSYSCLKSource+0xc>)
 8001892:	6898      	ldr	r0, [r3, #8]
}
 8001894:	f000 000c 	and.w	r0, r0, #12
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <RCC_HCLKConfig+0x10>)
 80018a2:	689a      	ldr	r2, [r3, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80018a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80018a8:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80018aa:	609a      	str	r2, [r3, #8]
}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <RCC_PCLK1Config+0x10>)
 80018b6:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80018b8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80018bc:	4302      	orrs	r2, r0

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80018be:	609a      	str	r2, [r3, #8]
}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800

080018c8 <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <RCC_PCLK2Config+0x10>)
 80018ca:	689a      	ldr	r2, [r3, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80018cc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80018d0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80018d4:	609a      	str	r2, [r3, #8]
}
 80018d6:	4770      	bx	lr
 80018d8:	40023800 	.word	0x40023800

080018dc <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <RCC_GetClocksFreq+0x7c>)
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	f002 020c 	and.w	r2, r2, #12

  switch (tmp)
 80018e4:	2a04      	cmp	r2, #4
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80018e6:	b510      	push	{r4, lr}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;

  switch (tmp)
 80018e8:	d003      	beq.n	80018f2 <RCC_GetClocksFreq+0x16>
 80018ea:	2a08      	cmp	r2, #8
 80018ec:	d003      	beq.n	80018f6 <RCC_GetClocksFreq+0x1a>
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <RCC_GetClocksFreq+0x80>)
 80018f0:	e018      	b.n	8001924 <RCC_GetClocksFreq+0x48>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <RCC_GetClocksFreq+0x84>)
 80018f4:	e016      	b.n	8001924 <RCC_GetClocksFreq+0x48>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80018f6:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018f8:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80018fa:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	bf14      	ite	ne
 8001902:	4b17      	ldrne	r3, [pc, #92]	; (8001960 <RCC_GetClocksFreq+0x84>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001904:	4b15      	ldreq	r3, [pc, #84]	; (800195c <RCC_GetClocksFreq+0x80>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001906:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800190a:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <RCC_GetClocksFreq+0x7c>)
 8001910:	6852      	ldr	r2, [r2, #4]
 8001912:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001916:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800191a:	3201      	adds	r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800191c:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800191e:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001920:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <RCC_GetClocksFreq+0x7c>)
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001926:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001928:	688b      	ldr	r3, [r1, #8]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <RCC_GetClocksFreq+0x88>)
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800192c:	6804      	ldr	r4, [r0, #0]
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
  tmp = tmp >> 4;
 800192e:	f3c3 1303 	ubfx	r3, r3, #4, #4
  presc = APBAHBPrescTable[tmp];
 8001932:	5cd3      	ldrb	r3, [r2, r3]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001934:	fa34 f303 	lsrs.w	r3, r4, r3
 8001938:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800193a:	688c      	ldr	r4, [r1, #8]
  tmp = tmp >> 10;
 800193c:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8001940:	5d14      	ldrb	r4, [r2, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001942:	fa33 f404 	lsrs.w	r4, r3, r4
 8001946:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001948:	6889      	ldr	r1, [r1, #8]
  tmp = tmp >> 13;
 800194a:	f3c1 3142 	ubfx	r1, r1, #13, #3
  presc = APBAHBPrescTable[tmp];
 800194e:	5c52      	ldrb	r2, [r2, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001950:	40d3      	lsrs	r3, r2
 8001952:	60c3      	str	r3, [r0, #12]
}
 8001954:	bd10      	pop	{r4, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	00f42400 	.word	0x00f42400
 8001960:	007a1200 	.word	0x007a1200
 8001964:	20000074 	.word	0x20000074

08001968 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8001968:	f400 7340 	and.w	r3, r0, #768	; 0x300
 800196c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <RCC_RTCCLKConfig+0x2c>)
 8001972:	d108      	bne.n	8001986 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8001974:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8001976:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800197a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800197e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001982:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8001984:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8001986:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001988:	0500      	lsls	r0, r0, #20
 800198a:	ea42 5010 	orr.w	r0, r2, r0, lsr #20
 800198e:	6718      	str	r0, [r3, #112]	; 0x70
}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800

08001998 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001998:	4b01      	ldr	r3, [pc, #4]	; (80019a0 <RCC_RTCCLKCmd+0x8>)
 800199a:	6018      	str	r0, [r3, #0]
}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	42470e3c 	.word	0x42470e3c

080019a4 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <RCC_BackupResetCmd+0x8>)
 80019a6:	6018      	str	r0, [r3, #0]
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	42470e40 	.word	0x42470e40

080019b0 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80019b0:	4b01      	ldr	r3, [pc, #4]	; (80019b8 <RCC_I2SCLKConfig+0x8>)
 80019b2:	6018      	str	r0, [r3, #0]
}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	4247015c 	.word	0x4247015c

080019bc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <RCC_AHB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80019be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80019c0:	b109      	cbz	r1, 80019c6 <RCC_AHB1PeriphClockCmd+0xa>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80019c2:	4310      	orrs	r0, r2
 80019c4:	e001      	b.n	80019ca <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80019c6:	ea22 0000 	bic.w	r0, r2, r0
 80019ca:	6318      	str	r0, [r3, #48]	; 0x30
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80019d4:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <RCC_AHB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80019d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80019d8:	b109      	cbz	r1, 80019de <RCC_AHB2PeriphClockCmd+0xa>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 80019da:	4310      	orrs	r0, r2
 80019dc:	e001      	b.n	80019e2 <RCC_AHB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 80019de:	ea22 0000 	bic.w	r0, r2, r0
 80019e2:	6358      	str	r0, [r3, #52]	; 0x34
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800

080019ec <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <RCC_AHB3PeriphClockCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80019ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80019f0:	b109      	cbz	r1, 80019f6 <RCC_AHB3PeriphClockCmd+0xa>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80019f2:	4310      	orrs	r0, r2
 80019f4:	e001      	b.n	80019fa <RCC_AHB3PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 80019f6:	ea22 0000 	bic.w	r0, r2, r0
 80019fa:	6398      	str	r0, [r3, #56]	; 0x38
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800

08001a04 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <RCC_APB1PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a08:	b109      	cbz	r1, 8001a0e <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001a0a:	4310      	orrs	r0, r2
 8001a0c:	e001      	b.n	8001a12 <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001a0e:	ea22 0000 	bic.w	r0, r2, r0
 8001a12:	6418      	str	r0, [r3, #64]	; 0x40
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <RCC_APB2PeriphClockCmd+0x14>)
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001a1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a20:	b109      	cbz	r1, 8001a26 <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001a22:	4310      	orrs	r0, r2
 8001a24:	e001      	b.n	8001a2a <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001a26:	ea22 0000 	bic.w	r0, r2, r0
 8001a2a:	6458      	str	r0, [r3, #68]	; 0x44
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <RCC_AHB1PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001a36:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a38:	b109      	cbz	r1, 8001a3e <RCC_AHB1PeriphResetCmd+0xa>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8001a3a:	4310      	orrs	r0, r2
 8001a3c:	e001      	b.n	8001a42 <RCC_AHB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8001a3e:	ea22 0000 	bic.w	r0, r2, r0
 8001a42:	6118      	str	r0, [r3, #16]
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800

08001a4c <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <RCC_AHB2PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001a4e:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a50:	b109      	cbz	r1, 8001a56 <RCC_AHB2PeriphResetCmd+0xa>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8001a52:	4310      	orrs	r0, r2
 8001a54:	e001      	b.n	8001a5a <RCC_AHB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8001a56:	ea22 0000 	bic.w	r0, r2, r0
 8001a5a:	6158      	str	r0, [r3, #20]
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800

08001a64 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <RCC_AHB3PeriphResetCmd+0x14>)
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001a66:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001a68:	b109      	cbz	r1, 8001a6e <RCC_AHB3PeriphResetCmd+0xa>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8001a6a:	4310      	orrs	r0, r2
 8001a6c:	e001      	b.n	8001a72 <RCC_AHB3PeriphResetCmd+0xe>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8001a6e:	ea22 0000 	bic.w	r0, r2, r0
 8001a72:	6198      	str	r0, [r3, #24]
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800

08001a7c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001a7e:	6a1a      	ldr	r2, [r3, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a80:	b109      	cbz	r1, 8001a86 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8001a82:	4310      	orrs	r0, r2
 8001a84:	e001      	b.n	8001a8a <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001a86:	ea22 0000 	bic.w	r0, r2, r0
 8001a8a:	6218      	str	r0, [r3, #32]
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800

08001a94 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001a98:	b109      	cbz	r1, 8001a9e <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8001a9a:	4310      	orrs	r0, r2
 8001a9c:	e001      	b.n	8001aa2 <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8001a9e:	ea22 0000 	bic.w	r0, r2, r0
 8001aa2:	6258      	str	r0, [r3, #36]	; 0x24
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ab0:	b109      	cbz	r1, 8001ab6 <RCC_AHB1PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8001ab2:	4310      	orrs	r0, r2
 8001ab4:	e001      	b.n	8001aba <RCC_AHB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8001ab6:	ea22 0000 	bic.w	r0, r2, r0
 8001aba:	6518      	str	r0, [r3, #80]	; 0x50
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001ac6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ac8:	b109      	cbz	r1, 8001ace <RCC_AHB2PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8001aca:	4310      	orrs	r0, r2
 8001acc:	e001      	b.n	8001ad2 <RCC_AHB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8001ace:	ea22 0000 	bic.w	r0, r2, r0
 8001ad2:	6558      	str	r0, [r3, #84]	; 0x54
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001ade:	6d9a      	ldr	r2, [r3, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ae0:	b109      	cbz	r1, 8001ae6 <RCC_AHB3PeriphClockLPModeCmd+0xa>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8001ae2:	4310      	orrs	r0, r2
 8001ae4:	e001      	b.n	8001aea <RCC_AHB3PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8001ae6:	ea22 0000 	bic.w	r0, r2, r0
 8001aea:	6598      	str	r0, [r3, #88]	; 0x58
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <RCC_APB1PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001af6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001af8:	b109      	cbz	r1, 8001afe <RCC_APB1PeriphClockLPModeCmd+0xa>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8001afa:	4310      	orrs	r0, r2
 8001afc:	e001      	b.n	8001b02 <RCC_APB1PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8001afe:	ea22 0000 	bic.w	r0, r2, r0
 8001b02:	6618      	str	r0, [r3, #96]	; 0x60
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800

08001b0c <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <RCC_APB2PeriphClockLPModeCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001b0e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b10:	b109      	cbz	r1, 8001b16 <RCC_APB2PeriphClockLPModeCmd+0xa>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8001b12:	4310      	orrs	r0, r2
 8001b14:	e001      	b.n	8001b1a <RCC_APB2PeriphClockLPModeCmd+0xe>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8001b16:	ea22 0000 	bic.w	r0, r2, r0
 8001b1a:	6658      	str	r0, [r3, #100]	; 0x64
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <RCC_ITConfig+0x14>)
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001b26:	781a      	ldrb	r2, [r3, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001b28:	b109      	cbz	r1, 8001b2e <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8001b2a:	4310      	orrs	r0, r2
 8001b2c:	e001      	b.n	8001b32 <RCC_ITConfig+0xe>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8001b2e:	ea22 0000 	bic.w	r0, r2, r0
 8001b32:	7018      	strb	r0, [r3, #0]
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	4002380d 	.word	0x4002380d

08001b3c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001b3c:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <RCC_GetFlagStatus+0x24>)
 8001b42:	d101      	bne.n	8001b48 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	e003      	b.n	8001b50 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001b48:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8001b4a:	bf0c      	ite	eq
 8001b4c:	6f13      	ldreq	r3, [r2, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001b4e:	6f53      	ldrne	r3, [r2, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001b50:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001b54:	fa33 f000 	lsrs.w	r0, r3, r0
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8001b58:	f000 0001 	and.w	r0, r0, #1
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8001b64:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t startupcounter = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8001b6a:	2031      	movs	r0, #49	; 0x31
 8001b6c:	f7ff ffe6 	bl	8001b3c <RCC_GetFlagStatus>
    startupcounter++;
 8001b70:	9b01      	ldr	r3, [sp, #4]
 8001b72:	3301      	adds	r3, #1
 8001b74:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8001b76:	9b01      	ldr	r3, [sp, #4]
 8001b78:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b7c:	d001      	beq.n	8001b82 <RCC_WaitForHSEStartUp+0x1e>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d0f3      	beq.n	8001b6a <RCC_WaitForHSEStartUp+0x6>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001b82:	2031      	movs	r0, #49	; 0x31
 8001b84:	f7ff ffda 	bl	8001b3c <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }
  return (status);
}
 8001b88:	3000      	adds	r0, #0
 8001b8a:	bf18      	it	ne
 8001b8c:	2001      	movne	r0, #1
 8001b8e:	bd0e      	pop	{r1, r2, r3, pc}

08001b90 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <RCC_ClearFlag+0xc>)
 8001b92:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001b94:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001b98:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001b9a:	4770      	bx	lr
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <RCC_GetITStatus+0x10>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
  {
    bitstatus = SET;
 8001ba4:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8001ba6:	bf0c      	ite	eq
 8001ba8:	2000      	moveq	r0, #0
 8001baa:	2001      	movne	r0, #1
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8001bb4:	4b01      	ldr	r3, [pc, #4]	; (8001bbc <RCC_ClearITPendingBit+0x8>)
 8001bb6:	7018      	strb	r0, [r3, #0]
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	4002380e 	.word	0x4002380e

08001bc0 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 8001bc0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <SPI_I2S_DeInit+0x58>)
 8001bc4:	4298      	cmp	r0, r3
 8001bc6:	d10b      	bne.n	8001be0 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bce:	f7ff ff61 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001bd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bd6:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 8001bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001bdc:	f7ff bf5a 	b.w	8001a94 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <SPI_I2S_DeInit+0x5c>)
 8001be2:	4298      	cmp	r0, r3
 8001be4:	d107      	bne.n	8001bf6 <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 8001be6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bea:	2101      	movs	r1, #1
 8001bec:	f7ff ff46 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001bf0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bf4:	e009      	b.n	8001c0a <SPI_I2S_DeInit+0x4a>
    }
  else
  {
    if (SPIx == SPI3)
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <SPI_I2S_DeInit+0x60>)
 8001bf8:	4298      	cmp	r0, r3
 8001bfa:	d10b      	bne.n	8001c14 <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001bfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c00:	2101      	movs	r1, #1
 8001c02:	f7ff ff3b 	bl	8001a7c <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001c06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c0a:	2100      	movs	r1, #0
    }
  }
}
 8001c0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8001c10:	f7ff bf34 	b.w	8001a7c <RCC_APB1PeriphResetCmd>
 8001c14:	bd08      	pop	{r3, pc}
 8001c16:	bf00      	nop
 8001c18:	40013000 	.word	0x40013000
 8001c1c:	40003800 	.word	0x40003800
 8001c20:	40003c00 	.word	0x40003c00

08001c24 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c24:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001c26:	8802      	ldrh	r2, [r0, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001c28:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c2a:	884c      	ldrh	r4, [r1, #2]
 8001c2c:	4323      	orrs	r3, r4
 8001c2e:	888c      	ldrh	r4, [r1, #4]
 8001c30:	4323      	orrs	r3, r4
 8001c32:	88cc      	ldrh	r4, [r1, #6]
 8001c34:	4323      	orrs	r3, r4
 8001c36:	890c      	ldrh	r4, [r1, #8]
 8001c38:	4323      	orrs	r3, r4
 8001c3a:	894c      	ldrh	r4, [r1, #10]
 8001c3c:	4323      	orrs	r3, r4
 8001c3e:	898c      	ldrh	r4, [r1, #12]
 8001c40:	4323      	orrs	r3, r4
 8001c42:	89cc      	ldrh	r4, [r1, #14]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8001c44:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001c48:	4323      	orrs	r3, r4
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001c4e:	8003      	strh	r3, [r0, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8001c50:	8b83      	ldrh	r3, [r0, #28]
 8001c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	8383      	strh	r3, [r0, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001c5c:	8a0b      	ldrh	r3, [r1, #16]
 8001c5e:	8203      	strh	r3, [r0, #16]
}
 8001c60:	bd10      	pop	{r4, pc}

08001c62 <I2S_Init>:
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001c62:	8b83      	ldrh	r3, [r0, #28]
 8001c64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c68:	f023 030f 	bic.w	r3, r3, #15
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 8001c72:	2302      	movs	r3, #2
 8001c74:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001c76:	688b      	ldr	r3, [r1, #8]
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001c7a:	8b85      	ldrh	r5, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001c7c:	2b02      	cmp	r3, #2
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8001c7e:	b2ad      	uxth	r5, r5
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 8001c80:	d038      	beq.n	8001cf4 <I2S_Init+0x92>
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001c82:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <I2S_Init+0xc6>)
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8001c84:	888e      	ldrh	r6, [r1, #4]
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001c86:	6894      	ldr	r4, [r2, #8]
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8001c88:	2e00      	cmp	r6, #0
 8001c8a:	bf14      	ite	ne
 8001c8c:	2602      	movne	r6, #2
 8001c8e:	2601      	moveq	r6, #1
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8001c90:	0224      	lsls	r4, r4, #8
 8001c92:	d503      	bpl.n	8001c9c <I2S_Init+0x3a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 8001c94:	6894      	ldr	r4, [r2, #8]
 8001c96:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
 8001c9a:	6094      	str	r4, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001c9c:	f8d2 4084 	ldr.w	r4, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001ca0:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001ca4:	6852      	ldr	r2, [r2, #4]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001ca6:	f8df c084 	ldr.w	ip, [pc, #132]	; 8001d2c <I2S_Init+0xca>
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8001caa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001cae:	fbbc f2f2 	udiv	r2, ip, r2
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 8001cb2:	f3c4 1488 	ubfx	r4, r4, #6, #9
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001cb6:	4354      	muls	r4, r2
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8001cb8:	f3c7 7202 	ubfx	r2, r7, #28, #3
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8001cbc:	fbb4 f4f2 	udiv	r4, r4, r2
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 8001cc0:	88ca      	ldrh	r2, [r1, #6]
 8001cc2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001cc6:	f04f 020a 	mov.w	r2, #10
 8001cca:	d101      	bne.n	8001cd0 <I2S_Init+0x6e>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001ccc:	0a24      	lsrs	r4, r4, #8
 8001cce:	e002      	b.n	8001cd6 <I2S_Init+0x74>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001cd0:	0176      	lsls	r6, r6, #5
 8001cd2:	fbb4 f4f6 	udiv	r4, r4, r6
 8001cd6:	4362      	muls	r2, r4
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	3305      	adds	r3, #5
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001cde:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 8001ce0:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 8001ce2:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001ce6:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001cea:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 8001cec:	f3c3 034f 	ubfx	r3, r3, #1, #16
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8001cf0:	b292      	uxth	r2, r2
 8001cf2:	e000      	b.n	8001cf6 <I2S_Init+0x94>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 8001cf4:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 8001cf6:	1e9c      	subs	r4, r3, #2
 8001cf8:	b2a4      	uxth	r4, r4
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001cfa:	2cfe      	cmp	r4, #254	; 0xfe
 8001cfc:	bf28      	it	cs
 8001cfe:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001d00:	88cc      	ldrh	r4, [r1, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8001d02:	bf28      	it	cs
 8001d04:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8001d06:	4313      	orrs	r3, r2
 8001d08:	4323      	orrs	r3, r4
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	8403      	strh	r3, [r0, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001d0e:	880b      	ldrh	r3, [r1, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001d10:	884a      	ldrh	r2, [r1, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001d12:	432b      	orrs	r3, r5
 8001d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	888a      	ldrh	r2, [r1, #4]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	898a      	ldrh	r2, [r1, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 8001d24:	8383      	strh	r3, [r0, #28]
}
 8001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001d30:	2300      	movs	r3, #0
 8001d32:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8001d34:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8001d36:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8001d38:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8001d3a:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8001d3c:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8001d3e:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8001d40:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8001d42:	2307      	movs	r3, #7
 8001d44:	8203      	strh	r3, [r0, #16]
}
 8001d46:	4770      	bx	lr

08001d48 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001d48:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001d4a:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8001d4c:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 8001d4e:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8001d50:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8001d52:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8001d54:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8001d56:	8183      	strh	r3, [r0, #12]
}
 8001d58:	4770      	bx	lr

08001d5a <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001d5a:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001d5c:	b119      	cbz	r1, 8001d66 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d64:	e003      	b.n	8001d6e <SPI_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8001d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d6a:	041b      	lsls	r3, r3, #16
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	8003      	strh	r3, [r0, #0]
 8001d70:	4770      	bx	lr

08001d72 <I2S_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001d72:	8b83      	ldrh	r3, [r0, #28]
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d74:	b119      	cbz	r1, 8001d7e <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7c:	e003      	b.n	8001d86 <I2S_Cmd+0x14>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8001d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d82:	041b      	lsls	r3, r3, #16
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	8383      	strh	r3, [r0, #28]
 8001d88:	4770      	bx	lr

08001d8a <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8001d8a:	8803      	ldrh	r3, [r0, #0]
 8001d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8001d96:	8803      	ldrh	r3, [r0, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	430b      	orrs	r3, r1
 8001d9c:	8003      	strh	r3, [r0, #0]
}
 8001d9e:	4770      	bx	lr

08001da0 <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001da0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001da4:	8803      	ldrh	r3, [r0, #0]
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8001da6:	d103      	bne.n	8001db0 <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dae:	e003      	b.n	8001db8 <SPI_BiDirectionalLineConfig+0x18>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 8001db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	0c1b      	lsrs	r3, r3, #16
 8001db8:	8003      	strh	r3, [r0, #0]
 8001dba:	4770      	bx	lr

08001dbc <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001dbc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8001dc0:	4299      	cmp	r1, r3
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001dc2:	8803      	ldrh	r3, [r0, #0]
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8001dc4:	d003      	beq.n	8001dce <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dcc:	e003      	b.n	8001dd6 <SPI_NSSInternalSoftwareConfig+0x1a>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8001dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	8003      	strh	r3, [r0, #0]
 8001dd8:	4770      	bx	lr

08001dda <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001dda:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001ddc:	b119      	cbz	r1, 8001de6 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	e003      	b.n	8001dee <SPI_SSOutputCmd+0x14>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8001de6:	f023 0304 	bic.w	r3, r3, #4
 8001dea:	041b      	lsls	r3, r3, #16
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	8083      	strh	r3, [r0, #4]
 8001df0:	4770      	bx	lr

08001df2 <SPI_TIModeCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001df2:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001df4:	b119      	cbz	r1, 8001dfe <SPI_TIModeCmd+0xc>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	e003      	b.n	8001e06 <SPI_TIModeCmd+0x14>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8001dfe:	f023 0310 	bic.w	r3, r3, #16
 8001e02:	041b      	lsls	r3, r3, #16
 8001e04:	0c1b      	lsrs	r3, r3, #16
 8001e06:	8083      	strh	r3, [r0, #4]
 8001e08:	4770      	bx	lr

08001e0a <I2S_FullDuplexConfig>:
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8001e0a:	8b83      	ldrh	r3, [r0, #28]
 8001e0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e10:	f023 030f 	bic.w	r3, r3, #15
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	0c1b      	lsrs	r3, r3, #16
 8001e18:	8383      	strh	r3, [r0, #28]
  I2Sxext->I2SPR = 0x0002;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001e1e:	880b      	ldrh	r3, [r1, #0]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001e20:	8b82      	ldrh	r2, [r0, #28]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8001e26:	b510      	push	{r4, lr}
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
  I2Sxext->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8001e28:	b292      	uxth	r2, r2
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8001e2a:	d005      	beq.n	8001e38 <I2S_FullDuplexConfig+0x2e>
  {
    tmp = I2S_Mode_SlaveRx;
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001e34:	2300      	movne	r3, #0
 8001e36:	e001      	b.n	8001e3c <I2S_FullDuplexConfig+0x32>
 8001e38:	f44f 7380 	mov.w	r3, #256	; 0x100
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e3c:	884c      	ldrh	r4, [r1, #2]
 8001e3e:	4322      	orrs	r2, r4
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001e40:	888c      	ldrh	r4, [r1, #4]
 8001e42:	8989      	ldrh	r1, [r1, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8001e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001e48:	4322      	orrs	r2, r4
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	4313      	orrs	r3, r2
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8001e50:	8383      	strh	r3, [r0, #28]
}
 8001e52:	bd10      	pop	{r4, pc}

08001e54 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8001e54:	8980      	ldrh	r0, [r0, #12]
}
 8001e56:	b280      	uxth	r0, r0
 8001e58:	4770      	bx	lr

08001e5a <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001e5a:	8181      	strh	r1, [r0, #12]
}
 8001e5c:	4770      	bx	lr

08001e5e <SPI_CalculateCRC>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001e5e:	8803      	ldrh	r3, [r0, #0]
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001e60:	b119      	cbz	r1, 8001e6a <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e68:	e003      	b.n	8001e72 <SPI_CalculateCRC+0x14>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8001e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e6e:	041b      	lsls	r3, r3, #16
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	8003      	strh	r3, [r0, #0]
 8001e74:	4770      	bx	lr

08001e76 <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8001e76:	8803      	ldrh	r3, [r0, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e7e:	8003      	strh	r3, [r0, #0]
}
 8001e80:	4770      	bx	lr

08001e82 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8001e82:	2901      	cmp	r1, #1
 8001e84:	d002      	beq.n	8001e8c <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8001e86:	8b00      	ldrh	r0, [r0, #24]
 8001e88:	b280      	uxth	r0, r0
 8001e8a:	4770      	bx	lr
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8001e8c:	8a80      	ldrh	r0, [r0, #20]
 8001e8e:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8001e90:	4770      	bx	lr

08001e92 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8001e92:	8a00      	ldrh	r0, [r0, #16]
}
 8001e94:	b280      	uxth	r0, r0
 8001e96:	4770      	bx	lr

08001e98 <SPI_I2S_DMACmd>:
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001e98:	8883      	ldrh	r3, [r0, #4]
 8001e9a:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8001e9c:	b10a      	cbz	r2, 8001ea2 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8001e9e:	4319      	orrs	r1, r3
 8001ea0:	e001      	b.n	8001ea6 <SPI_I2S_DMACmd+0xe>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8001ea2:	ea23 0101 	bic.w	r1, r3, r1
 8001ea6:	8081      	strh	r1, [r0, #4]
 8001ea8:	4770      	bx	lr

08001eaa <SPI_I2S_ITConfig>:

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8001eaa:	0909      	lsrs	r1, r1, #4
 8001eac:	2301      	movs	r3, #1
 8001eae:	408b      	lsls	r3, r1
 8001eb0:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8001eb2:	b11a      	cbz	r2, 8001ebc <SPI_I2S_ITConfig+0x12>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8001eb4:	8882      	ldrh	r2, [r0, #4]
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	e003      	b.n	8001ec4 <SPI_I2S_ITConfig+0x1a>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8001ebc:	8882      	ldrh	r2, [r0, #4]
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	ea22 0303 	bic.w	r3, r2, r3
 8001ec4:	8083      	strh	r3, [r0, #4]
 8001ec6:	4770      	bx	lr

08001ec8 <SPI_I2S_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001ec8:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001eca:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 8001ecc:	bf0c      	ite	eq
 8001ece:	2000      	moveq	r0, #0
 8001ed0:	2001      	movne	r0, #1
 8001ed2:	4770      	bx	lr

08001ed4 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8001ed4:	43c9      	mvns	r1, r1
 8001ed6:	b289      	uxth	r1, r1
 8001ed8:	8101      	strh	r1, [r0, #8]
}
 8001eda:	4770      	bx	lr

08001edc <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8001edc:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001ede:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ee0:	8900      	ldrh	r0, [r0, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f001 020f 	and.w	r2, r1, #15

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ee8:	b280      	uxth	r0, r0
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001eea:	fa13 f202 	lsls.w	r2, r3, r2

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001eee:	4010      	ands	r0, r2

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001ef0:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001ef2:	d005      	beq.n	8001f00 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8001ef4:	0909      	lsrs	r1, r1, #4
 8001ef6:	408b      	lsls	r3, r1
  *            @arg SPI_IT_CRCERR: CRC Error interrupt.
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 8001ef8:	421c      	tst	r4, r3

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8001efa:	bf0c      	ite	eq
 8001efc:	2000      	moveq	r0, #0
 8001efe:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8001f00:	bd10      	pop	{r4, pc}

08001f02 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001f02:	f001 010f 	and.w	r1, r1, #15
 8001f06:	2301      	movs	r3, #1
 8001f08:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	8103      	strh	r3, [r0, #8]
}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8001f14:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001f16:	2101      	movs	r1, #1
 8001f18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f1c:	f7ff fdba 	bl	8001a94 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001f20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f24:	2100      	movs	r1, #0
}
 8001f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8001f2a:	f7ff bdb3 	b.w	8001a94 <RCC_APB2PeriphResetCmd>

08001f2e <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8001f2e:	4b01      	ldr	r3, [pc, #4]	; (8001f34 <SYSCFG_MemoryRemapConfig+0x6>)
 8001f30:	6018      	str	r0, [r3, #0]
}
 8001f32:	4770      	bx	lr
 8001f34:	40013800 	.word	0x40013800

08001f38 <SYSCFG_EXTILineConfig>:

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001f38:	f001 0203 	and.w	r2, r1, #3
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001f3c:	0889      	lsrs	r1, r1, #2
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <SYSCFG_EXTILineConfig+0x30>)
 8001f40:	3102      	adds	r1, #2
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8001f42:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001f44:	0092      	lsls	r2, r2, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001f46:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8001f4a:	240f      	movs	r4, #15
 8001f4c:	4094      	lsls	r4, r2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8001f4e:	ea25 0404 	bic.w	r4, r5, r4
 8001f52:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8001f56:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8001f5a:	fa10 f202 	lsls.w	r2, r0, r2
 8001f5e:	4314      	orrs	r4, r2
 8001f60:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
}
 8001f64:	bd30      	pop	{r4, r5, pc}
 8001f66:	bf00      	nop
 8001f68:	40013800 	.word	0x40013800

08001f6c <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8001f6c:	4b01      	ldr	r3, [pc, #4]	; (8001f74 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 8001f6e:	6018      	str	r0, [r3, #0]
}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	422700dc 	.word	0x422700dc

08001f78 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8001f78:	4b01      	ldr	r3, [pc, #4]	; (8001f80 <SYSCFG_CompensationCellCmd+0x8>)
 8001f7a:	6018      	str	r0, [r3, #0]
}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	42270400 	.word	0x42270400

08001f84 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8001f84:	4b02      	ldr	r3, [pc, #8]	; (8001f90 <SYSCFG_GetCompensationCellStatus+0xc>)
 8001f86:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8001f88:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40013800 	.word	0x40013800

08001f94 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001f94:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001f96:	8c04      	ldrh	r4, [r0, #32]
 8001f98:	f024 0401 	bic.w	r4, r4, #1
 8001f9c:	0424      	lsls	r4, r4, #16
 8001f9e:	0c24      	lsrs	r4, r4, #16
 8001fa0:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fa2:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fa4:	8c04      	ldrh	r4, [r0, #32]
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;
 8001fa6:	b2ad      	uxth	r5, r5
  tmpccer = TIMx->CCER;
 8001fa8:	b2a4      	uxth	r4, r4

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8001faa:	f025 05f3 	bic.w	r5, r5, #243	; 0xf3
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fae:	4315      	orrs	r5, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fb0:	f024 040a 	bic.w	r4, r4, #10
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fb4:	ea45 1503 	orr.w	r5, r5, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001fb8:	f044 0401 	orr.w	r4, r4, #1
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001fbc:	b2ad      	uxth	r5, r5

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001fbe:	430c      	orrs	r4, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fc0:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fc2:	8404      	strh	r4, [r0, #32]
}
 8001fc4:	bd30      	pop	{r4, r5, pc}

08001fc6 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001fc6:	b530      	push	{r4, r5, lr}
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001fc8:	8c04      	ldrh	r4, [r0, #32]
 8001fca:	f024 0410 	bic.w	r4, r4, #16
 8001fce:	0424      	lsls	r4, r4, #16
 8001fd0:	0c24      	lsrs	r4, r4, #16
 8001fd2:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fd4:	8b04      	ldrh	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fd6:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001fd8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001fdc:	b2ad      	uxth	r5, r5
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8001fde:	0524      	lsls	r4, r4, #20
 8001fe0:	0d24      	lsrs	r4, r4, #20
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fe2:	f025 05a0 	bic.w	r5, r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001fe6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001fea:	f045 0510 	orr.w	r5, r5, #16
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001fee:	ea44 3403 	orr.w	r4, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001ff2:	ea45 1501 	orr.w	r5, r5, r1, lsl #4
  tmp = (uint16_t)(TIM_ICPolarity << 4);

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001ff6:	b2a4      	uxth	r4, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8001ff8:	b2ad      	uxth	r5, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ffa:	8304      	strh	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ffc:	8405      	strh	r5, [r0, #32]
}
 8001ffe:	bd30      	pop	{r4, r5, pc}

08002000 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8002000:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8002002:	4b47      	ldr	r3, [pc, #284]	; (8002120 <TIM_DeInit+0x120>)
 8002004:	4298      	cmp	r0, r3
 8002006:	d105      	bne.n	8002014 <TIM_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002008:	2001      	movs	r0, #1
 800200a:	4601      	mov	r1, r0
 800200c:	f7ff fd42 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8002010:	2001      	movs	r0, #1
 8002012:	e03d      	b.n	8002090 <TIM_DeInit+0x90>
  } 
  else if (TIMx == TIM2) 
 8002014:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002018:	d105      	bne.n	8002026 <TIM_DeInit+0x26>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800201a:	2001      	movs	r0, #1
 800201c:	4601      	mov	r1, r0
 800201e:	f7ff fd2d 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8002022:	2001      	movs	r0, #1
 8002024:	e076      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM3)
 8002026:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <TIM_DeInit+0x124>)
 8002028:	4298      	cmp	r0, r3
 800202a:	d105      	bne.n	8002038 <TIM_DeInit+0x38>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800202c:	2002      	movs	r0, #2
 800202e:	2101      	movs	r1, #1
 8002030:	f7ff fd24 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8002034:	2002      	movs	r0, #2
 8002036:	e06d      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM4)
 8002038:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <TIM_DeInit+0x128>)
 800203a:	4298      	cmp	r0, r3
 800203c:	d105      	bne.n	800204a <TIM_DeInit+0x4a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800203e:	2004      	movs	r0, #4
 8002040:	2101      	movs	r1, #1
 8002042:	f7ff fd1b 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8002046:	2004      	movs	r0, #4
 8002048:	e064      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM5)
 800204a:	4b38      	ldr	r3, [pc, #224]	; (800212c <TIM_DeInit+0x12c>)
 800204c:	4298      	cmp	r0, r3
 800204e:	d105      	bne.n	800205c <TIM_DeInit+0x5c>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8002050:	2008      	movs	r0, #8
 8002052:	2101      	movs	r1, #1
 8002054:	f7ff fd12 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8002058:	2008      	movs	r0, #8
 800205a:	e05b      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM6)  
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <TIM_DeInit+0x130>)
 800205e:	4298      	cmp	r0, r3
 8002060:	d105      	bne.n	800206e <TIM_DeInit+0x6e>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8002062:	2010      	movs	r0, #16
 8002064:	2101      	movs	r1, #1
 8002066:	f7ff fd09 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800206a:	2010      	movs	r0, #16
 800206c:	e052      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM7)
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <TIM_DeInit+0x134>)
 8002070:	4298      	cmp	r0, r3
 8002072:	d105      	bne.n	8002080 <TIM_DeInit+0x80>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8002074:	2020      	movs	r0, #32
 8002076:	2101      	movs	r1, #1
 8002078:	f7ff fd00 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800207c:	2020      	movs	r0, #32
 800207e:	e049      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM8)
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <TIM_DeInit+0x138>)
 8002082:	4298      	cmp	r0, r3
 8002084:	d109      	bne.n	800209a <TIM_DeInit+0x9a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8002086:	2002      	movs	r0, #2
 8002088:	2101      	movs	r1, #1
 800208a:	f7ff fd03 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800208e:	2002      	movs	r0, #2
 8002090:	2100      	movs	r1, #0
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8002092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8002096:	f7ff bcfd 	b.w	8001a94 <RCC_APB2PeriphResetCmd>
  }  
  else if (TIMx == TIM9)
 800209a:	4b28      	ldr	r3, [pc, #160]	; (800213c <TIM_DeInit+0x13c>)
 800209c:	4298      	cmp	r0, r3
 800209e:	d107      	bne.n	80020b0 <TIM_DeInit+0xb0>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 80020a0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80020a4:	2101      	movs	r1, #1
 80020a6:	f7ff fcf5 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 80020aa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80020ae:	e7ef      	b.n	8002090 <TIM_DeInit+0x90>
   }  
  else if (TIMx == TIM10)
 80020b0:	4b23      	ldr	r3, [pc, #140]	; (8002140 <TIM_DeInit+0x140>)
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d107      	bne.n	80020c6 <TIM_DeInit+0xc6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 80020b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020ba:	2101      	movs	r1, #1
 80020bc:	f7ff fcea 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 80020c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020c4:	e7e4      	b.n	8002090 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM11) 
 80020c6:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <TIM_DeInit+0x144>)
 80020c8:	4298      	cmp	r0, r3
 80020ca:	d107      	bne.n	80020dc <TIM_DeInit+0xdc>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 80020cc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80020d0:	2101      	movs	r1, #1
 80020d2:	f7ff fcdf 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 80020d6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80020da:	e7d9      	b.n	8002090 <TIM_DeInit+0x90>
  }  
  else if (TIMx == TIM12)
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <TIM_DeInit+0x148>)
 80020de:	4298      	cmp	r0, r3
 80020e0:	d105      	bne.n	80020ee <TIM_DeInit+0xee>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 80020e2:	2040      	movs	r0, #64	; 0x40
 80020e4:	2101      	movs	r1, #1
 80020e6:	f7ff fcc9 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 80020ea:	2040      	movs	r0, #64	; 0x40
 80020ec:	e012      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else if (TIMx == TIM13) 
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <TIM_DeInit+0x14c>)
 80020f0:	4298      	cmp	r0, r3
 80020f2:	d105      	bne.n	8002100 <TIM_DeInit+0x100>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 80020f4:	2080      	movs	r0, #128	; 0x80
 80020f6:	2101      	movs	r1, #1
 80020f8:	f7ff fcc0 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 80020fc:	2080      	movs	r0, #128	; 0x80
 80020fe:	e009      	b.n	8002114 <TIM_DeInit+0x114>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <TIM_DeInit+0x150>)
 8002102:	4298      	cmp	r0, r3
 8002104:	d10b      	bne.n	800211e <TIM_DeInit+0x11e>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8002106:	f44f 7080 	mov.w	r0, #256	; 0x100
 800210a:	2101      	movs	r1, #1
 800210c:	f7ff fcb6 	bl	8001a7c <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8002110:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002114:	2100      	movs	r1, #0
    }   
  }
}
 8002116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  { 
    if (TIMx == TIM14) 
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800211a:	f7ff bcaf 	b.w	8001a7c <RCC_APB1PeriphResetCmd>
 800211e:	bd08      	pop	{r3, pc}
 8002120:	40010000 	.word	0x40010000
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800
 800212c:	40000c00 	.word	0x40000c00
 8002130:	40001000 	.word	0x40001000
 8002134:	40001400 	.word	0x40001400
 8002138:	40010400 	.word	0x40010400
 800213c:	40014000 	.word	0x40014000
 8002140:	40014400 	.word	0x40014400
 8002144:	40014800 	.word	0x40014800
 8002148:	40001800 	.word	0x40001800
 800214c:	40001c00 	.word	0x40001c00
 8002150:	40002000 	.word	0x40002000

08002154 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <TIM_TimeBaseInit+0x74>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8002156:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002158:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800215a:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800215c:	d012      	beq.n	8002184 <TIM_TimeBaseInit+0x30>
 800215e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002162:	4290      	cmp	r0, r2
 8002164:	d00e      	beq.n	8002184 <TIM_TimeBaseInit+0x30>
 8002166:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800216a:	d00b      	beq.n	8002184 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800216c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8002170:	4290      	cmp	r0, r2
 8002172:	d007      	beq.n	8002184 <TIM_TimeBaseInit+0x30>
 8002174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002178:	4290      	cmp	r0, r2
 800217a:	d003      	beq.n	8002184 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800217c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002180:	4290      	cmp	r0, r2
 8002182:	d103      	bne.n	800218c <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002184:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800218a:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800218c:	4a0f      	ldr	r2, [pc, #60]	; (80021cc <TIM_TimeBaseInit+0x78>)
 800218e:	4290      	cmp	r0, r2
 8002190:	d008      	beq.n	80021a4 <TIM_TimeBaseInit+0x50>
 8002192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002196:	4290      	cmp	r0, r2
 8002198:	d004      	beq.n	80021a4 <TIM_TimeBaseInit+0x50>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800219a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800219e:	890a      	ldrh	r2, [r1, #8]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80021a0:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80021a2:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80021a4:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80021a6:	684b      	ldr	r3, [r1, #4]
 80021a8:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80021aa:	880b      	ldrh	r3, [r1, #0]
 80021ac:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <TIM_TimeBaseInit+0x74>)
 80021b0:	4298      	cmp	r0, r3
 80021b2:	d003      	beq.n	80021bc <TIM_TimeBaseInit+0x68>
 80021b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b8:	4298      	cmp	r0, r3
 80021ba:	d101      	bne.n	80021c0 <TIM_TimeBaseInit+0x6c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80021bc:	7a8b      	ldrb	r3, [r1, #10]
 80021be:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80021c0:	2301      	movs	r3, #1
 80021c2:	8283      	strh	r3, [r0, #20]
}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40001000 	.word	0x40001000

080021d0 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d4:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80021d6:	2300      	movs	r3, #0
 80021d8:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80021da:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80021dc:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80021de:	7283      	strb	r3, [r0, #10]
}
 80021e0:	4770      	bx	lr

080021e2 <TIM_PrescalerConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 80021e2:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 80021e4:	8282      	strh	r2, [r0, #20]
}
 80021e6:	4770      	bx	lr

080021e8 <TIM_CounterModeConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80021e8:	8803      	ldrh	r3, [r0, #0]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	0c1b      	lsrs	r3, r3, #16

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80021f2:	430b      	orrs	r3, r1

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80021f4:	8003      	strh	r3, [r0, #0]
}
 80021f6:	4770      	bx	lr

080021f8 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80021f8:	6241      	str	r1, [r0, #36]	; 0x24
}
 80021fa:	4770      	bx	lr

080021fc <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 80021fc:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 80021fe:	4770      	bx	lr

08002200 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8002200:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8002202:	4770      	bx	lr

08002204 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8002204:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8002206:	b280      	uxth	r0, r0
 8002208:	4770      	bx	lr

0800220a <TIM_UpdateDisableConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800220a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800220c:	b119      	cbz	r1, 8002216 <TIM_UpdateDisableConfig+0xc>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800220e:	b29b      	uxth	r3, r3
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	e003      	b.n	800221e <TIM_UpdateDisableConfig+0x14>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8002216:	f023 0302 	bic.w	r3, r3, #2
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	8003      	strh	r3, [r0, #0]
 8002220:	4770      	bx	lr

08002222 <TIM_UpdateRequestConfig>:
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002222:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8002224:	b119      	cbz	r1, 800222e <TIM_UpdateRequestConfig+0xc>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8002226:	b29b      	uxth	r3, r3
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	e003      	b.n	8002236 <TIM_UpdateRequestConfig+0x14>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800222e:	f023 0304 	bic.w	r3, r3, #4
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	8003      	strh	r3, [r0, #0]
 8002238:	4770      	bx	lr

0800223a <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800223a:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800223c:	b119      	cbz	r1, 8002246 <TIM_ARRPreloadConfig+0xc>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800223e:	b29b      	uxth	r3, r3
 8002240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002244:	e003      	b.n	800224e <TIM_ARRPreloadConfig+0x14>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8002246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	8003      	strh	r3, [r0, #0]
 8002250:	4770      	bx	lr

08002252 <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8002252:	8803      	ldrh	r3, [r0, #0]
 8002254:	f023 0308 	bic.w	r3, r3, #8
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	8003      	strh	r3, [r0, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800225e:	8803      	ldrh	r3, [r0, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	430b      	orrs	r3, r1
 8002264:	8003      	strh	r3, [r0, #0]
}
 8002266:	4770      	bx	lr

08002268 <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8002268:	8803      	ldrh	r3, [r0, #0]
 800226a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800226e:	041b      	lsls	r3, r3, #16
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	8003      	strh	r3, [r0, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8002274:	8803      	ldrh	r3, [r0, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	430b      	orrs	r3, r1
 800227a:	8003      	strh	r3, [r0, #0]
}
 800227c:	4770      	bx	lr

0800227e <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800227e:	8803      	ldrh	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002280:	b119      	cbz	r1, 800228a <TIM_Cmd+0xc>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002282:	b29b      	uxth	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	e003      	b.n	8002292 <TIM_Cmd+0x14>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800228a:	f023 0301 	bic.w	r3, r3, #1
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	0c1b      	lsrs	r3, r3, #16
 8002292:	8003      	strh	r3, [r0, #0]
 8002294:	4770      	bx	lr

08002296 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8002296:	8c03      	ldrh	r3, [r0, #32]
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	041b      	lsls	r3, r3, #16
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	8403      	strh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80022a2:	b570      	push	{r4, r5, r6, lr}

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022a4:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a6:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a8:	8b02      	ldrh	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80022aa:	880d      	ldrh	r5, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80022ac:	884e      	ldrh	r6, [r1, #2]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80022ae:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80022b2:	0412      	lsls	r2, r2, #16
 80022b4:	0c12      	lsrs	r2, r2, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80022b6:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80022b8:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80022ba:	f023 0302 	bic.w	r3, r3, #2
 80022be:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80022c0:	4335      	orrs	r5, r6
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 80022c2:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80022c4:	b2ad      	uxth	r5, r5
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80022c6:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80022c8:	4d0e      	ldr	r5, [pc, #56]	; (8002304 <TIM_OC1Init+0x6e>)
 80022ca:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022cc:	b2a4      	uxth	r4, r4
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80022ce:	d003      	beq.n	80022d8 <TIM_OC1Init+0x42>
 80022d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022d4:	42a8      	cmp	r0, r5
 80022d6:	d10e      	bne.n	80022f6 <TIM_OC1Init+0x60>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80022d8:	89cd      	ldrh	r5, [r1, #14]
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80022da:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80022dc:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80022e0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80022e2:	888d      	ldrh	r5, [r1, #4]
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80022e4:	f023 0304 	bic.w	r3, r3, #4
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80022e8:	432b      	orrs	r3, r5
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80022ea:	8a0d      	ldrh	r5, [r1, #16]
 80022ec:	4335      	orrs	r5, r6
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80022ee:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80022f2:	b2ad      	uxth	r5, r5
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80022f4:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f6:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022f8:	8302      	strh	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80022fa:	688a      	ldr	r2, [r1, #8]
 80022fc:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022fe:	8403      	strh	r3, [r0, #32]
}
 8002300:	bd70      	pop	{r4, r5, r6, pc}
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000

08002308 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8002308:	8c03      	ldrh	r3, [r0, #32]
 800230a:	f023 0310 	bic.w	r3, r3, #16
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8002314:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002316:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002318:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800231a:	8b04      	ldrh	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800231c:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800231e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002322:	0424      	lsls	r4, r4, #16
 8002324:	0c24      	lsrs	r4, r4, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8002326:	f023 0320 	bic.w	r3, r3, #32
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800232a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800232e:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002330:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8002332:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8002334:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002338:	884d      	ldrh	r5, [r1, #2]
 800233a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800233e:	4d13      	ldr	r5, [pc, #76]	; (800238c <TIM_OC2Init+0x84>)
 8002340:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002342:	b292      	uxth	r2, r2
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002344:	b2a4      	uxth	r4, r4
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8002346:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002348:	d003      	beq.n	8002352 <TIM_OC2Init+0x4a>
 800234a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800234e:	42a8      	cmp	r0, r5
 8002350:	d115      	bne.n	800237e <TIM_OC2Init+0x76>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8002352:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002358:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800235a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800235e:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 8002362:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8002364:	888b      	ldrh	r3, [r1, #4]
 8002366:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800236a:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800236c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8002370:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8002374:	8a4d      	ldrh	r5, [r1, #18]
 8002376:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800237a:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800237c:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800237e:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002380:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002382:	8304      	strh	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8002384:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002386:	8403      	strh	r3, [r0, #32]
}
 8002388:	bd30      	pop	{r4, r5, pc}
 800238a:	bf00      	nop
 800238c:	40010000 	.word	0x40010000

08002390 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8002390:	8c03      	ldrh	r3, [r0, #32]
 8002392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002396:	041b      	lsls	r3, r3, #16
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239c:	8c03      	ldrh	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800239e:	8882      	ldrh	r2, [r0, #4]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80023a0:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023a2:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80023a4:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80023a6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80023aa:	0424      	lsls	r4, r4, #16
 80023ac:	0c24      	lsrs	r4, r4, #16
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80023ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023b2:	041b      	lsls	r3, r3, #16
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80023b4:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80023b6:	898d      	ldrh	r5, [r1, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80023b8:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80023ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80023be:	884d      	ldrh	r5, [r1, #2]
 80023c0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80023c4:	4d12      	ldr	r5, [pc, #72]	; (8002410 <TIM_OC3Init+0x80>)
 80023c6:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c8:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80023ca:	b29b      	uxth	r3, r3
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80023cc:	d003      	beq.n	80023d6 <TIM_OC3Init+0x46>
 80023ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023d2:	42a8      	cmp	r0, r5
 80023d4:	d115      	bne.n	8002402 <TIM_OC3Init+0x72>
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80023d6:	89cd      	ldrh	r5, [r1, #14]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80023d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023dc:	b29b      	uxth	r3, r3
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80023de:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80023e2:	f64f 35ff 	movw	r5, #64511	; 0xfbff
 80023e6:	401d      	ands	r5, r3
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80023e8:	888b      	ldrh	r3, [r1, #4]
 80023ea:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80023ee:	8a0d      	ldrh	r5, [r1, #16]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80023f0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80023f4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80023f8:	8a4d      	ldrh	r5, [r1, #18]
 80023fa:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80023fe:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002400:	b292      	uxth	r2, r2
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002402:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002404:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002406:	8384      	strh	r4, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002408:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800240a:	8403      	strh	r3, [r0, #32]
}
 800240c:	bd30      	pop	{r4, r5, pc}
 800240e:	bf00      	nop
 8002410:	40010000 	.word	0x40010000

08002414 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002414:	8c03      	ldrh	r3, [r0, #32]
 8002416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002420:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002422:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002424:	8884      	ldrh	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002426:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002428:	880d      	ldrh	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800242a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800242e:	0412      	lsls	r2, r2, #16
 8002430:	0c12      	lsrs	r2, r2, #16
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002436:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800243a:	041b      	lsls	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800243c:	898d      	ldrh	r5, [r1, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800243e:	0c1b      	lsrs	r3, r3, #16
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002440:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002444:	884d      	ldrh	r5, [r1, #2]
 8002446:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800244a:	4d0b      	ldr	r5, [pc, #44]	; (8002478 <TIM_OC4Init+0x64>)
 800244c:	42a8      	cmp	r0, r5
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800244e:	b2a4      	uxth	r4, r4
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8002450:	b292      	uxth	r2, r2
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8002452:	b29b      	uxth	r3, r3
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8002454:	d003      	beq.n	800245e <TIM_OC4Init+0x4a>
 8002456:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800245a:	42a8      	cmp	r0, r5
 800245c:	d105      	bne.n	800246a <TIM_OC4Init+0x56>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800245e:	8a0d      	ldrh	r5, [r1, #16]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8002460:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002464:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002468:	b2a4      	uxth	r4, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800246a:	8084      	strh	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800246c:	8382      	strh	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800246e:	688a      	ldr	r2, [r1, #8]
 8002470:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002472:	8403      	strh	r3, [r0, #32]
}
 8002474:	bd30      	pop	{r4, r5, pc}
 8002476:	bf00      	nop
 8002478:	40010000 	.word	0x40010000

0800247c <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800247c:	2300      	movs	r3, #0
 800247e:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8002480:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8002482:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8002484:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8002486:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8002488:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800248a:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800248c:	8243      	strh	r3, [r0, #18]
}
 800248e:	4770      	bx	lr

08002490 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8002490:	b530      	push	{r4, r5, lr}
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002492:	8c05      	ldrh	r5, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002494:	2401      	movs	r4, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8002496:	b2ad      	uxth	r5, r5
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8002498:	408c      	lsls	r4, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800249a:	ea25 0404 	bic.w	r4, r5, r4
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 800249e:	f100 0318 	add.w	r3, r0, #24

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80024a2:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80024a4:	b109      	cbz	r1, 80024aa <TIM_SelectOCxM+0x1a>
 80024a6:	2908      	cmp	r1, #8
 80024a8:	d107      	bne.n	80024ba <TIM_SelectOCxM+0x2a>
  {
    tmp += (TIM_Channel>>1);
 80024aa:	0849      	lsrs	r1, r1, #1

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80024ac:	f64f 708f 	movw	r0, #65423	; 0xff8f
 80024b0:	58cc      	ldr	r4, [r1, r3]
 80024b2:	4020      	ands	r0, r4
 80024b4:	50c8      	str	r0, [r1, r3]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80024b6:	58c8      	ldr	r0, [r1, r3]
 80024b8:	e00a      	b.n	80024d0 <TIM_SelectOCxM+0x40>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80024ba:	3904      	subs	r1, #4
 80024bc:	f3c1 014e 	ubfx	r1, r1, #1, #15

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80024c0:	f648 70ff 	movw	r0, #36863	; 0x8fff
 80024c4:	58cc      	ldr	r4, [r1, r3]
 80024c6:	4020      	ands	r0, r4
 80024c8:	50c8      	str	r0, [r1, r3]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80024ca:	0212      	lsls	r2, r2, #8
 80024cc:	58c8      	ldr	r0, [r1, r3]
 80024ce:	b292      	uxth	r2, r2
 80024d0:	4302      	orrs	r2, r0
 80024d2:	50ca      	str	r2, [r1, r3]
 80024d4:	bd30      	pop	{r4, r5, pc}

080024d6 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80024d6:	6341      	str	r1, [r0, #52]	; 0x34
}
 80024d8:	4770      	bx	lr

080024da <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 80024da:	6381      	str	r1, [r0, #56]	; 0x38
}
 80024dc:	4770      	bx	lr

080024de <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 80024de:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80024e0:	4770      	bx	lr

080024e2 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 80024e2:	6401      	str	r1, [r0, #64]	; 0x40
}
 80024e4:	4770      	bx	lr

080024e6 <TIM_ForcedOC1Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80024e6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 80024e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80024f0:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80024f2:	8303      	strh	r3, [r0, #24]
}
 80024f4:	4770      	bx	lr

080024f6 <TIM_ForcedOC2Config>:
  uint16_t tmpccmr1 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80024f6:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 80024f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8002500:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002504:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8002506:	8303      	strh	r3, [r0, #24]
}
 8002508:	4770      	bx	lr

0800250a <TIM_ForcedOC3Config>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800250a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800250c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8002514:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002516:	8383      	strh	r3, [r0, #28]
}
 8002518:	4770      	bx	lr

0800251a <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800251a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800251c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	0c1b      	lsrs	r3, r3, #16

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8002524:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002528:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800252a:	8383      	strh	r3, [r0, #28]
}
 800252c:	4770      	bx	lr

0800252e <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800252e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8002530:	f023 0308 	bic.w	r3, r3, #8
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8002538:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800253a:	8303      	strh	r3, [r0, #24]
}
 800253c:	4770      	bx	lr

0800253e <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800253e:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8002540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8002548:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800254c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800254e:	8303      	strh	r3, [r0, #24]
}
 8002550:	4770      	bx	lr

08002552 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002552:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002554:	f023 0308 	bic.w	r3, r3, #8
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800255c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800255e:	8383      	strh	r3, [r0, #28]
}
 8002560:	4770      	bx	lr

08002562 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002562:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800256c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002570:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002572:	8383      	strh	r3, [r0, #28]
}
 8002574:	4770      	bx	lr

08002576 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002576:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8002580:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002582:	8303      	strh	r3, [r0, #24]
}
 8002584:	4770      	bx	lr

08002586 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002586:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8002588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8002590:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002594:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002596:	8303      	strh	r3, [r0, #24]
}
 8002598:	4770      	bx	lr

0800259a <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800259a:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 80025a4:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80025a6:	8383      	strh	r3, [r0, #28]
}
 80025a8:	4770      	bx	lr

080025aa <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 80025aa:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 80025ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 80025b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025b8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 80025ba:	8383      	strh	r3, [r0, #28]
}
 80025bc:	4770      	bx	lr

080025be <TIM_ClearOC1Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80025be:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 80025c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80025c8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025ca:	8303      	strh	r3, [r0, #24]
}
 80025cc:	4770      	bx	lr

080025ce <TIM_ClearOC2Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80025ce:	8b03      	ldrh	r3, [r0, #24]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80025d0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 80025d2:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80025d4:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 80025d8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80025da:	8303      	strh	r3, [r0, #24]
}
 80025dc:	4770      	bx	lr

080025de <TIM_ClearOC3Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80025de:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 80025e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025e4:	041b      	lsls	r3, r3, #16
 80025e6:	0c1b      	lsrs	r3, r3, #16

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 80025e8:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025ea:	8383      	strh	r3, [r0, #28]
}
 80025ec:	4770      	bx	lr

080025ee <TIM_ClearOC4Ref>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 80025ee:	8b83      	ldrh	r3, [r0, #28]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80025f0:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 80025f2:	045b      	lsls	r3, r3, #17

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 80025f4:	ea41 4353 	orr.w	r3, r1, r3, lsr #17
 80025f8:	b29b      	uxth	r3, r3

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80025fa:	8383      	strh	r3, [r0, #28]
}
 80025fc:	4770      	bx	lr

080025fe <TIM_OC1PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80025fe:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8002600:	f023 0302 	bic.w	r3, r3, #2
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCPolarity;
 8002608:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800260a:	8403      	strh	r3, [r0, #32]
}
 800260c:	4770      	bx	lr

0800260e <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800260e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8002610:	f023 0308 	bic.w	r3, r3, #8
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= TIM_OCNPolarity;
 8002618:	430b      	orrs	r3, r1

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800261a:	8403      	strh	r3, [r0, #32]
}
 800261c:	4770      	bx	lr

0800261e <TIM_OC2PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800261e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8002620:	f023 0320 	bic.w	r3, r3, #32
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8002628:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800262c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800262e:	8403      	strh	r3, [r0, #32]
}
 8002630:	4770      	bx	lr

08002632 <TIM_OC2NPolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8002632:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8002634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800263c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8002640:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002642:	8403      	strh	r3, [r0, #32]
}
 8002644:	4770      	bx	lr

08002646 <TIM_OC3PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8002646:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8002648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8002650:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002654:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8002656:	8403      	strh	r3, [r0, #32]
}
 8002658:	4770      	bx	lr

0800265a <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800265a:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800265c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8002664:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002668:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800266a:	8403      	strh	r3, [r0, #32]
}
 800266c:	4770      	bx	lr

0800266e <TIM_OC4PolarityConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800266e:	8c03      	ldrh	r3, [r0, #32]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8002670:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002674:	041b      	lsls	r3, r3, #16
 8002676:	0c1b      	lsrs	r3, r3, #16
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8002678:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800267c:	b29b      	uxth	r3, r3

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800267e:	8403      	strh	r3, [r0, #32]
}
 8002680:	4770      	bx	lr

08002682 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8002682:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8002684:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8002686:	2301      	movs	r3, #1
 8002688:	408b      	lsls	r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800268a:	b2a4      	uxth	r4, r4
 800268c:	ea24 0303 	bic.w	r3, r4, r3
 8002690:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8002692:	8c03      	ldrh	r3, [r0, #32]
 8002694:	fa12 f101 	lsls.w	r1, r2, r1
 8002698:	430b      	orrs	r3, r1
 800269a:	b29b      	uxth	r3, r3
 800269c:	8403      	strh	r3, [r0, #32]
}
 800269e:	bd10      	pop	{r4, pc}

080026a0 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 80026a0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80026a2:	8c04      	ldrh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 80026a4:	2304      	movs	r3, #4
 80026a6:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80026a8:	b2a4      	uxth	r4, r4
 80026aa:	ea24 0303 	bic.w	r3, r4, r3
 80026ae:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80026b0:	8c03      	ldrh	r3, [r0, #32]
 80026b2:	fa12 f101 	lsls.w	r1, r2, r1
 80026b6:	430b      	orrs	r3, r1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	8403      	strh	r3, [r0, #32]
}
 80026bc:	bd10      	pop	{r4, pc}

080026be <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80026be:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80026c0:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80026c2:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80026c4:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80026c6:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80026c8:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80026ca:	8103      	strh	r3, [r0, #8]
}
 80026cc:	4770      	bx	lr

080026ce <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80026ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 80026d0:	4770      	bx	lr

080026d2 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80026d2:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 80026d4:	4770      	bx	lr

080026d6 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80026d6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 80026d8:	4770      	bx	lr

080026da <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80026da:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 80026dc:	4770      	bx	lr

080026de <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80026de:	8b03      	ldrh	r3, [r0, #24]
 80026e0:	f023 030c 	bic.w	r3, r3, #12
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	0c1b      	lsrs	r3, r3, #16
 80026e8:	8303      	strh	r3, [r0, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80026ea:	8b03      	ldrh	r3, [r0, #24]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	430b      	orrs	r3, r1
 80026f0:	8303      	strh	r3, [r0, #24]
}
 80026f2:	4770      	bx	lr

080026f4 <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80026f4:	8b03      	ldrh	r3, [r0, #24]
 80026f6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	0c1b      	lsrs	r3, r3, #16
 80026fe:	8303      	strh	r3, [r0, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8002700:	8b03      	ldrh	r3, [r0, #24]
 8002702:	b29b      	uxth	r3, r3
 8002704:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002708:	b29b      	uxth	r3, r3
 800270a:	8303      	strh	r3, [r0, #24]
}
 800270c:	4770      	bx	lr

0800270e <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800270e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002710:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8002712:	8849      	ldrh	r1, [r1, #2]
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8002714:	88a2      	ldrh	r2, [r4, #4]
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8002716:	f8b4 e000 	ldrh.w	lr, [r4]
 800271a:	8923      	ldrh	r3, [r4, #8]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800271c:	4605      	mov	r5, r0
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800271e:	2900      	cmp	r1, #0
 8002720:	bf0c      	ite	eq
 8002722:	2702      	moveq	r7, #2
 8002724:	2700      	movne	r7, #0
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8002726:	2a01      	cmp	r2, #1
 8002728:	bf14      	ite	ne
 800272a:	2601      	movne	r6, #1
 800272c:	2602      	moveq	r6, #2
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800272e:	f1be 0f00 	cmp.w	lr, #0
 8002732:	d110      	bne.n	8002756 <TIM_PWMIConfig+0x48>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002734:	f7ff fc2e 	bl	8001f94 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002738:	4628      	mov	r0, r5
 800273a:	88e1      	ldrh	r1, [r4, #6]
 800273c:	f7ff ffcf 	bl	80026de <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002740:	4628      	mov	r0, r5
 8002742:	4639      	mov	r1, r7
 8002744:	4632      	mov	r2, r6
 8002746:	8923      	ldrh	r3, [r4, #8]
 8002748:	f7ff fc3d 	bl	8001fc6 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800274c:	88e1      	ldrh	r1, [r4, #6]
 800274e:	4628      	mov	r0, r5
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002750:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002754:	e7ce      	b.n	80026f4 <TIM_SetIC2Prescaler>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8002756:	f7ff fc36 	bl	8001fc6 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800275a:	4628      	mov	r0, r5
 800275c:	88e1      	ldrh	r1, [r4, #6]
 800275e:	f7ff ffc9 	bl	80026f4 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8002762:	4628      	mov	r0, r5
 8002764:	4639      	mov	r1, r7
 8002766:	4632      	mov	r2, r6
 8002768:	8923      	ldrh	r3, [r4, #8]
 800276a:	f7ff fc13 	bl	8001f94 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800276e:	88e1      	ldrh	r1, [r4, #6]
 8002770:	4628      	mov	r0, r5
  }
}
 8002772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002776:	e7b2      	b.n	80026de <TIM_SetIC1Prescaler>

08002778 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8002778:	8b83      	ldrh	r3, [r0, #28]
 800277a:	f023 030c 	bic.w	r3, r3, #12
 800277e:	041b      	lsls	r3, r3, #16
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	8383      	strh	r3, [r0, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8002784:	8b83      	ldrh	r3, [r0, #28]
 8002786:	b29b      	uxth	r3, r3
 8002788:	430b      	orrs	r3, r1
 800278a:	8383      	strh	r3, [r0, #28]
}
 800278c:	4770      	bx	lr

0800278e <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800278e:	8b83      	ldrh	r3, [r0, #28]
 8002790:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002794:	041b      	lsls	r3, r3, #16
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	8383      	strh	r3, [r0, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800279a:	8b83      	ldrh	r3, [r0, #28]
 800279c:	b29b      	uxth	r3, r3
 800279e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8383      	strh	r3, [r0, #28]
}
 80027a6:	4770      	bx	lr

080027a8 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	460d      	mov	r5, r1
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80027ac:	880b      	ldrh	r3, [r1, #0]
 80027ae:	88aa      	ldrh	r2, [r5, #4]
 80027b0:	8849      	ldrh	r1, [r1, #2]
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80027b2:	4604      	mov	r4, r0
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80027b4:	b93b      	cbnz	r3, 80027c6 <TIM_ICInit+0x1e>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80027b6:	892b      	ldrh	r3, [r5, #8]
 80027b8:	f7ff fbec 	bl	8001f94 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027bc:	88e9      	ldrh	r1, [r5, #6]
 80027be:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80027c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027c4:	e78b      	b.n	80026de <TIM_SetIC1Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d107      	bne.n	80027da <TIM_ICInit+0x32>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80027ca:	892b      	ldrh	r3, [r5, #8]
 80027cc:	f7ff fbfb 	bl	8001fc6 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027d0:	88e9      	ldrh	r1, [r5, #6]
 80027d2:	4620      	mov	r0, r4
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80027d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80027d8:	e78c      	b.n	80026f4 <TIM_SetIC2Prescaler>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80027da:	2b08      	cmp	r3, #8
 80027dc:	f8b5 c008 	ldrh.w	ip, [r5, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80027e0:	8c07      	ldrh	r7, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80027e2:	d11d      	bne.n	8002820 <TIM_ICInit+0x78>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80027e4:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 80027e8:	043f      	lsls	r7, r7, #16
 80027ea:	0c3f      	lsrs	r7, r7, #16
 80027ec:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027ee:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 80027f0:	8c03      	ldrh	r3, [r0, #32]
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
 80027f2:	b2b6      	uxth	r6, r6
  tmpccer = TIMx->CCER;
 80027f4:	b29b      	uxth	r3, r3
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80027f6:	f026 06f3 	bic.w	r6, r6, #243	; 0xf3
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80027fa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80027fe:	ea46 1c0c 	orr.w	ip, r6, ip, lsl #4

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002802:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8002806:	fa1f fc8c 	uxth.w	ip, ip

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800280a:	b289      	uxth	r1, r1
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800280c:	ea4c 0202 	orr.w	r2, ip, r2

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8002810:	f441 7180 	orr.w	r1, r1, #256	; 0x100

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002814:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8002816:	8401      	strh	r1, [r0, #32]
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8002818:	88e9      	ldrh	r1, [r5, #6]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800281a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800281e:	e7ab      	b.n	8002778 <TIM_SetIC3Prescaler>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002820:	f427 5780 	bic.w	r7, r7, #4096	; 0x1000
 8002824:	043f      	lsls	r7, r7, #16
 8002826:	0c3f      	lsrs	r7, r7, #16
 8002828:	8407      	strh	r7, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 800282a:	8b86      	ldrh	r6, [r0, #28]
  tmpccer = TIMx->CCER;
 800282c:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800282e:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8002836:	0536      	lsls	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002838:	045b      	lsls	r3, r3, #17
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800283a:	0d36      	lsrs	r6, r6, #20
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800283c:	0c5b      	lsrs	r3, r3, #17
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800283e:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002842:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8002846:	ea42 320c 	orr.w	r2, r2, ip, lsl #12

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800284a:	b29b      	uxth	r3, r3
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800284c:	88e9      	ldrh	r1, [r5, #6]
  tmp = (uint16_t)(TIM_ICPolarity << 12);

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800284e:	b292      	uxth	r2, r2

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8002850:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002854:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
 8002856:	8403      	strh	r3, [r0, #32]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8002858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800285c:	e797      	b.n	800278e <TIM_SetIC4Prescaler>

0800285e <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800285e:	884a      	ldrh	r2, [r1, #2]
 8002860:	880b      	ldrh	r3, [r1, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	888a      	ldrh	r2, [r1, #4]
 8002866:	4313      	orrs	r3, r2
 8002868:	88ca      	ldrh	r2, [r1, #6]
 800286a:	4313      	orrs	r3, r2
 800286c:	890a      	ldrh	r2, [r1, #8]
 800286e:	4313      	orrs	r3, r2
 8002870:	894a      	ldrh	r2, [r1, #10]
 8002872:	4313      	orrs	r3, r2
 8002874:	898a      	ldrh	r2, [r1, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 800287e:	4770      	bx	lr

08002880 <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8002880:	2300      	movs	r3, #0
 8002882:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8002884:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8002886:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8002888:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800288a:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800288c:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800288e:	8183      	strh	r3, [r0, #12]
}
 8002890:	4770      	bx	lr

08002892 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002892:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002896:	b129      	cbz	r1, 80028a4 <TIM_CtrlPWMOutputs+0x12>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8002898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800289c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	e001      	b.n	80028a8 <TIM_CtrlPWMOutputs+0x16>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80028a4:	045b      	lsls	r3, r3, #17
 80028a6:	0c5b      	lsrs	r3, r3, #17
 80028a8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
 80028ac:	4770      	bx	lr

080028ae <TIM_SelectCOM>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80028ae:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80028b0:	b119      	cbz	r1, 80028ba <TIM_SelectCOM+0xc>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	e003      	b.n	80028c2 <TIM_SelectCOM+0x14>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 80028ba:	f023 0304 	bic.w	r3, r3, #4
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	8083      	strh	r3, [r0, #4]
 80028c4:	4770      	bx	lr

080028c6 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80028c6:	8883      	ldrh	r3, [r0, #4]
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80028c8:	b119      	cbz	r1, 80028d2 <TIM_CCPreloadControl+0xc>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	e003      	b.n	80028da <TIM_CCPreloadControl+0x14>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	8083      	strh	r3, [r0, #4]
 80028dc:	4770      	bx	lr

080028de <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80028de:	8983      	ldrh	r3, [r0, #12]
 80028e0:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80028e2:	b10a      	cbz	r2, 80028e8 <TIM_ITConfig+0xa>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80028e4:	4319      	orrs	r1, r3
 80028e6:	e001      	b.n	80028ec <TIM_ITConfig+0xe>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80028e8:	ea23 0101 	bic.w	r1, r3, r1
 80028ec:	8181      	strh	r1, [r0, #12]
 80028ee:	4770      	bx	lr

080028f0 <TIM_GenerateEvent>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80028f0:	8281      	strh	r1, [r0, #20]
}
 80028f2:	4770      	bx	lr

080028f4 <TIM_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 80028f4:	8a03      	ldrh	r3, [r0, #16]
  {
    bitstatus = SET;
 80028f6:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80028f8:	bf0c      	ite	eq
 80028fa:	2000      	moveq	r0, #0
 80028fc:	2001      	movne	r0, #1
 80028fe:	4770      	bx	lr

08002900 <TIM_ClearFlag>:
{  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8002900:	43c9      	mvns	r1, r1
 8002902:	b289      	uxth	r1, r1
 8002904:	8201      	strh	r1, [r0, #16]
}
 8002906:	4770      	bx	lr

08002908 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8002908:	8a03      	ldrh	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 800290a:	8982      	ldrh	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800290c:	ea11 0003 	ands.w	r0, r1, r3
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  
  itenable = TIMx->DIER & TIM_IT;
 8002910:	b292      	uxth	r2, r2
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8002912:	d003      	beq.n	800291c <TIM_GetITStatus+0x14>
  {
    bitstatus = SET;
 8002914:	4211      	tst	r1, r2
 8002916:	bf0c      	ite	eq
 8002918:	2000      	moveq	r0, #0
 800291a:	2001      	movne	r0, #1
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 800291c:	4770      	bx	lr

0800291e <TIM_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800291e:	43c9      	mvns	r1, r1
 8002920:	b289      	uxth	r1, r1
 8002922:	8201      	strh	r1, [r0, #16]
}
 8002924:	4770      	bx	lr

08002926 <TIM_DMAConfig>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8002926:	430a      	orrs	r2, r1
 8002928:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
}
 800292c:	4770      	bx	lr

0800292e <TIM_DMACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800292e:	8983      	ldrh	r3, [r0, #12]
 8002930:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002932:	b10a      	cbz	r2, 8002938 <TIM_DMACmd+0xa>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002934:	4319      	orrs	r1, r3
 8002936:	e001      	b.n	800293c <TIM_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002938:	ea23 0101 	bic.w	r1, r3, r1
 800293c:	8181      	strh	r1, [r0, #12]
 800293e:	4770      	bx	lr

08002940 <TIM_SelectCCDMA>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002940:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002942:	b119      	cbz	r1, 800294c <TIM_SelectCCDMA+0xc>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8002944:	b29b      	uxth	r3, r3
 8002946:	f043 0308 	orr.w	r3, r3, #8
 800294a:	e003      	b.n	8002954 <TIM_SelectCCDMA+0x14>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800294c:	f023 0308 	bic.w	r3, r3, #8
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	0c1b      	lsrs	r3, r3, #16
 8002954:	8083      	strh	r3, [r0, #4]
 8002956:	4770      	bx	lr

08002958 <TIM_InternalClockConfig>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8002958:	8903      	ldrh	r3, [r0, #8]
 800295a:	f023 0307 	bic.w	r3, r3, #7
 800295e:	041b      	lsls	r3, r3, #16
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	8103      	strh	r3, [r0, #8]
}
 8002964:	4770      	bx	lr

08002966 <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002966:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8002968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8002970:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002972:	8103      	strh	r3, [r0, #8]

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8002974:	8903      	ldrh	r3, [r0, #8]
 8002976:	b29b      	uxth	r3, r3
 8002978:	f043 0307 	orr.w	r3, r3, #7
 800297c:	8103      	strh	r3, [r0, #8]
}
 800297e:	4770      	bx	lr

08002980 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8002980:	b538      	push	{r3, r4, r5, lr}
 8002982:	460d      	mov	r5, r1
 8002984:	4611      	mov	r1, r2
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002986:	2201      	movs	r2, #1
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8002988:	2d60      	cmp	r5, #96	; 0x60
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800298a:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800298c:	d102      	bne.n	8002994 <TIM_TIxExternalClockConfig+0x14>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800298e:	f7ff fb1a 	bl	8001fc6 <TI2_Config>
 8002992:	e001      	b.n	8002998 <TIM_TIxExternalClockConfig+0x18>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8002994:	f7ff fafe 	bl	8001f94 <TI1_Config>
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002998:	8923      	ldrh	r3, [r4, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800299a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80029a2:	431d      	orrs	r5, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a4:	8125      	strh	r5, [r4, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80029a6:	8923      	ldrh	r3, [r4, #8]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f043 0307 	orr.w	r3, r3, #7
 80029ae:	8123      	strh	r3, [r4, #8]
}
 80029b0:	bd38      	pop	{r3, r4, r5, pc}

080029b2 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029b2:	8903      	ldrh	r3, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80029b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b8:	041b      	lsls	r3, r3, #16
 80029ba:	0c1b      	lsrs	r3, r3, #16

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80029bc:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029be:	8103      	strh	r3, [r0, #8]
}
 80029c0:	4770      	bx	lr

080029c2 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 80029c2:	8883      	ldrh	r3, [r0, #4]
 80029c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	0c1b      	lsrs	r3, r3, #16
 80029cc:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80029ce:	8883      	ldrh	r3, [r0, #4]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	430b      	orrs	r3, r1
 80029d4:	8083      	strh	r3, [r0, #4]
}
 80029d6:	4770      	bx	lr

080029d8 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80029d8:	8903      	ldrh	r3, [r0, #8]
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	8103      	strh	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80029e4:	8903      	ldrh	r3, [r0, #8]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	430b      	orrs	r3, r1
 80029ea:	8103      	strh	r3, [r0, #8]
}
 80029ec:	4770      	bx	lr

080029ee <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80029ee:	8903      	ldrh	r3, [r0, #8]
 80029f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80029fa:	8903      	ldrh	r3, [r0, #8]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	430b      	orrs	r3, r1
 8002a00:	8103      	strh	r3, [r0, #8]
}
 8002a02:	4770      	bx	lr

08002a04 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a04:	b510      	push	{r4, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8002a06:	8904      	ldrh	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8002a08:	b2e4      	uxtb	r4, r4

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8002a0a:	430c      	orrs	r4, r1
 8002a0c:	4314      	orrs	r4, r2
 8002a0e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002a12:	b2a4      	uxth	r4, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a14:	8104      	strh	r4, [r0, #8]
}
 8002a16:	bd10      	pop	{r4, pc}

08002a18 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	4604      	mov	r4, r0
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002a1c:	f7ff fff2 	bl	8002a04 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8002a20:	8923      	ldrh	r3, [r4, #8]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a28:	8123      	strh	r3, [r4, #8]
}
 8002a2a:	bd10      	pop	{r4, pc}

08002a2c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	4604      	mov	r4, r0
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8002a30:	f7ff ffe8 	bl	8002a04 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a34:	8923      	ldrh	r3, [r4, #8]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8002a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a3a:	041b      	lsls	r3, r3, #16
 8002a3c:	0c1b      	lsrs	r3, r3, #16

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  tmpsmcr |= TIM_TS_ETRF;
 8002a3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a42:	8123      	strh	r3, [r4, #8]
}
 8002a44:	bd10      	pop	{r4, pc}

08002a46 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8002a46:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a48:	8904      	ldrh	r4, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8002a4a:	8b06      	ldrh	r6, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4c:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002a4e:	f426 7640 	bic.w	r6, r6, #768	; 0x300

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	b2ad      	uxth	r5, r5
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002a54:	f026 0603 	bic.w	r6, r6, #3

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002a58:	f024 0407 	bic.w	r4, r4, #7
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002a5c:	0436      	lsls	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8002a5e:	f025 0522 	bic.w	r5, r5, #34	; 0x22

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002a62:	0424      	lsls	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8002a64:	0c36      	lsrs	r6, r6, #16
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002a66:	4315      	orrs	r5, r2

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8002a68:	0c24      	lsrs	r4, r4, #16
  tmpsmcr |= TIM_EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002a6a:	f446 7680 	orr.w	r6, r6, #256	; 0x100

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002a6e:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  tmpsmcr |= TIM_EncoderMode;
 8002a72:	4321      	orrs	r1, r4

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8002a74:	f046 0601 	orr.w	r6, r6, #1

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8002a78:	b2ad      	uxth	r5, r5

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7a:	8101      	strh	r1, [r0, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8002a7c:	8306      	strh	r6, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7e:	8405      	strh	r5, [r0, #32]
}
 8002a80:	bd70      	pop	{r4, r5, r6, pc}

08002a82 <TIM_SelectHallSensor>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002a82:	8883      	ldrh	r3, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002a84:	b119      	cbz	r1, 8002a8e <TIM_SelectHallSensor+0xc>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8c:	e003      	b.n	8002a96 <TIM_SelectHallSensor+0x14>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8002a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	8083      	strh	r3, [r0, #4]
 8002a98:	4770      	bx	lr

08002a9a <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8002a9a:	f8a0 1050 	strh.w	r1, [r0, #80]	; 0x50
}
 8002a9e:	4770      	bx	lr

08002aa0 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8002aa0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <USART_DeInit+0x90>)
 8002aa4:	4298      	cmp	r0, r3
 8002aa6:	d105      	bne.n	8002ab4 <USART_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8002aa8:	2010      	movs	r0, #16
 8002aaa:	2101      	movs	r1, #1
 8002aac:	f7fe fff2 	bl	8001a94 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8002ab0:	2010      	movs	r0, #16
 8002ab2:	e037      	b.n	8002b24 <USART_DeInit+0x84>
  }
  else if (USARTx == USART2)
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <USART_DeInit+0x94>)
 8002ab6:	4298      	cmp	r0, r3
 8002ab8:	d107      	bne.n	8002aca <USART_DeInit+0x2a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8002aba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002abe:	2101      	movs	r1, #1
 8002ac0:	f7fe ffdc 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8002ac4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ac8:	e009      	b.n	8002ade <USART_DeInit+0x3e>
  }
  else if (USARTx == USART3)
 8002aca:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <USART_DeInit+0x98>)
 8002acc:	4298      	cmp	r0, r3
 8002ace:	d10b      	bne.n	8002ae8 <USART_DeInit+0x48>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8002ad0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	f7fe ffd1 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002ada:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002ade:	2100      	movs	r1, #0
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
    }
  }
}
 8002ae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  }
  else if (USARTx == USART3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8002ae4:	f7fe bfca 	b.w	8001a7c <RCC_APB1PeriphResetCmd>
  }    
  else if (USARTx == UART4)
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <USART_DeInit+0x9c>)
 8002aea:	4298      	cmp	r0, r3
 8002aec:	d107      	bne.n	8002afe <USART_DeInit+0x5e>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8002aee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002af2:	2101      	movs	r1, #1
 8002af4:	f7fe ffc2 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8002af8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002afc:	e7ef      	b.n	8002ade <USART_DeInit+0x3e>
  }
  else if (USARTx == UART5)
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <USART_DeInit+0xa0>)
 8002b00:	4298      	cmp	r0, r3
 8002b02:	d107      	bne.n	8002b14 <USART_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8002b04:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b08:	2101      	movs	r1, #1
 8002b0a:	f7fe ffb7 	bl	8001a7c <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8002b0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b12:	e7e4      	b.n	8002ade <USART_DeInit+0x3e>
  }     
  else
  {
    if (USARTx == USART6)
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <USART_DeInit+0xa4>)
 8002b16:	4298      	cmp	r0, r3
 8002b18:	d109      	bne.n	8002b2e <USART_DeInit+0x8e>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8002b1a:	2020      	movs	r0, #32
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	f7fe ffb9 	bl	8001a94 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002b22:	2020      	movs	r0, #32
 8002b24:	2100      	movs	r1, #0
    }
  }
}
 8002b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (USARTx == USART6)
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8002b2a:	f7fe bfb3 	b.w	8001a94 <RCC_APB2PeriphResetCmd>
 8002b2e:	bd08      	pop	{r3, pc}
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40004400 	.word	0x40004400
 8002b38:	40004800 	.word	0x40004800
 8002b3c:	40004c00 	.word	0x40004c00
 8002b40:	40005000 	.word	0x40005000
 8002b44:	40011400 	.word	0x40011400

08002b48 <USART_Init>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002b48:	8a03      	ldrh	r3, [r0, #16]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8002b4a:	88ca      	ldrh	r2, [r1, #6]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002b4c:	b29b      	uxth	r3, r3

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002b4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002b52:	b530      	push	{r4, r5, lr}
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002b54:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002b56:	460d      	mov	r5, r1
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002b58:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8002b5a:	8983      	ldrh	r3, [r0, #12]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002b5c:	8909      	ldrh	r1, [r1, #8]
 8002b5e:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002b60:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002b64:	430a      	orrs	r2, r1
 8002b66:	8969      	ldrh	r1, [r5, #10]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002b68:	f023 030c 	bic.w	r3, r3, #12
 8002b6c:	041b      	lsls	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002b6e:	430a      	orrs	r2, r1

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8002b70:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8002b72:	b292      	uxth	r2, r2
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8002b74:	4313      	orrs	r3, r2
 8002b76:	8183      	strh	r3, [r0, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002b78:	8a83      	ldrh	r3, [r0, #20]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002b7a:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002b7c:	b29b      	uxth	r3, r3

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8002b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002b82:	4313      	orrs	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002b84:	b085      	sub	sp, #20
  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002b86:	8283      	strh	r3, [r0, #20]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8002b88:	4604      	mov	r4, r0
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8002b8a:	4668      	mov	r0, sp
 8002b8c:	f7fe fea6 	bl	80018dc <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002b90:	4b1a      	ldr	r3, [pc, #104]	; (8002bfc <USART_Init+0xb4>)
 8002b92:	429c      	cmp	r4, r3
 8002b94:	d003      	beq.n	8002b9e <USART_Init+0x56>
 8002b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b9a:	429c      	cmp	r4, r3
 8002b9c:	d101      	bne.n	8002ba2 <USART_Init+0x5a>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002b9e:	9b03      	ldr	r3, [sp, #12]
 8002ba0:	e000      	b.n	8002ba4 <USART_Init+0x5c>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8002ba2:	9b02      	ldr	r3, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002ba4:	89a2      	ldrh	r2, [r4, #12]
 8002ba6:	b212      	sxth	r2, r2
 8002ba8:	2a00      	cmp	r2, #0
 8002baa:	f04f 0119 	mov.w	r1, #25
 8002bae:	682a      	ldr	r2, [r5, #0]
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002bb0:	fb01 f103 	mul.w	r1, r1, r3
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002bb4:	da01      	bge.n	8002bba <USART_Init+0x72>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8002bb6:	0052      	lsls	r2, r2, #1
 8002bb8:	e000      	b.n	8002bbc <USART_Init+0x74>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002bba:	0092      	lsls	r2, r2, #2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002bbc:	2364      	movs	r3, #100	; 0x64
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002bbe:	fbb1 f1f2 	udiv	r1, r1, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8002bc2:	fbb1 f2f3 	udiv	r2, r1, r3
 8002bc6:	0112      	lsls	r2, r2, #4

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002bc8:	0910      	lsrs	r0, r2, #4
 8002bca:	fb03 1110 	mls	r1, r3, r0, r1

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8002bce:	89a0      	ldrh	r0, [r4, #12]
 8002bd0:	b200      	sxth	r0, r0
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	da06      	bge.n	8002be4 <USART_Init+0x9c>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002bd6:	00c9      	lsls	r1, r1, #3
 8002bd8:	3132      	adds	r1, #50	; 0x32
 8002bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	e005      	b.n	8002bf0 <USART_Init+0xa8>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002be4:	0109      	lsls	r1, r1, #4
 8002be6:	3132      	adds	r1, #50	; 0x32
 8002be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	431a      	orrs	r2, r3
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8002bf2:	b292      	uxth	r2, r2
 8002bf4:	8122      	strh	r2, [r4, #8]
}
 8002bf6:	b005      	add	sp, #20
 8002bf8:	bd30      	pop	{r4, r5, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40011000 	.word	0x40011000

08002c00 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8002c00:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002c04:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c06:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	8083      	strh	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8002c0c:	80c3      	strh	r3, [r0, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8002c0e:	8103      	strh	r3, [r0, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c10:	8142      	strh	r2, [r0, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8002c12:	8183      	strh	r3, [r0, #12]
}
 8002c14:	4770      	bx	lr

08002c16 <USART_ClockInit>:
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c16:	880b      	ldrh	r3, [r1, #0]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002c18:	8a02      	ldrh	r2, [r0, #16]
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8002c1a:	b510      	push	{r4, lr}
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c1c:	884c      	ldrh	r4, [r1, #2]
 8002c1e:	4323      	orrs	r3, r4
 8002c20:	888c      	ldrh	r4, [r1, #4]
 8002c22:	88c9      	ldrh	r1, [r1, #6]
 8002c24:	4323      	orrs	r3, r4
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8002c26:	b292      	uxth	r2, r2
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c28:	430b      	orrs	r3, r1
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8002c2a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8002c2e:	b29b      	uxth	r3, r3
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8002c30:	4313      	orrs	r3, r2
 8002c32:	8203      	strh	r3, [r0, #16]
}
 8002c34:	bd10      	pop	{r4, pc}

08002c36 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8002c36:	2300      	movs	r3, #0
 8002c38:	8003      	strh	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8002c3a:	8043      	strh	r3, [r0, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8002c3c:	8083      	strh	r3, [r0, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8002c3e:	80c3      	strh	r3, [r0, #6]
}
 8002c40:	4770      	bx	lr

08002c42 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002c42:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002c44:	b119      	cbz	r1, 8002c4e <USART_Cmd+0xc>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c4c:	e003      	b.n	8002c56 <USART_Cmd+0x14>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c52:	041b      	lsls	r3, r3, #16
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	8183      	strh	r3, [r0, #12]
 8002c58:	4770      	bx	lr

08002c5a <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8002c5a:	8b03      	ldrh	r3, [r0, #24]
 8002c5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c60:	8303      	strh	r3, [r0, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8002c62:	8b03      	ldrh	r3, [r0, #24]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	430b      	orrs	r3, r1
 8002c68:	8303      	strh	r3, [r0, #24]
}
 8002c6a:	4770      	bx	lr

08002c6c <USART_OverSampling8Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002c6c:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002c6e:	b129      	cbz	r1, 8002c7c <USART_OverSampling8Cmd+0x10>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8002c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	e001      	b.n	8002c80 <USART_OverSampling8Cmd+0x14>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8002c7c:	045b      	lsls	r3, r3, #17
 8002c7e:	0c5b      	lsrs	r3, r3, #17
 8002c80:	8183      	strh	r3, [r0, #12]
 8002c82:	4770      	bx	lr

08002c84 <USART_OneBitMethodCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002c84:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002c86:	b119      	cbz	r1, 8002c90 <USART_OneBitMethodCmd+0xc>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c8e:	e003      	b.n	8002c98 <USART_OneBitMethodCmd+0x14>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8002c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	0c1b      	lsrs	r3, r3, #16
 8002c98:	8283      	strh	r3, [r0, #20]
 8002c9a:	4770      	bx	lr

08002c9c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002c9c:	05c9      	lsls	r1, r1, #23
 8002c9e:	0dc9      	lsrs	r1, r1, #23
 8002ca0:	8081      	strh	r1, [r0, #4]
}
 8002ca2:	4770      	bx	lr

08002ca4 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002ca4:	8880      	ldrh	r0, [r0, #4]
 8002ca6:	05c0      	lsls	r0, r0, #23
}
 8002ca8:	0dc0      	lsrs	r0, r0, #23
 8002caa:	4770      	bx	lr

08002cac <USART_SetAddress>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8002cac:	8a03      	ldrh	r3, [r0, #16]
 8002cae:	f023 030f 	bic.w	r3, r3, #15
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	8203      	strh	r3, [r0, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8002cb8:	8a03      	ldrh	r3, [r0, #16]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	8203      	strh	r3, [r0, #16]
}
 8002cc0:	4770      	bx	lr

08002cc2 <USART_ReceiverWakeUpCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002cc2:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8002cc4:	b119      	cbz	r1, 8002cce <USART_ReceiverWakeUpCmd+0xc>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	e003      	b.n	8002cd6 <USART_ReceiverWakeUpCmd+0x14>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8002cce:	f023 0302 	bic.w	r3, r3, #2
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	8183      	strh	r3, [r0, #12]
 8002cd8:	4770      	bx	lr

08002cda <USART_WakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8002cda:	8983      	ldrh	r3, [r0, #12]
 8002cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	8183      	strh	r3, [r0, #12]
  USARTx->CR1 |= USART_WakeUp;
 8002ce6:	8983      	ldrh	r3, [r0, #12]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	430b      	orrs	r3, r1
 8002cec:	8183      	strh	r3, [r0, #12]
}
 8002cee:	4770      	bx	lr

08002cf0 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8002cf0:	8a03      	ldrh	r3, [r0, #16]
 8002cf2:	f023 0320 	bic.w	r3, r3, #32
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	8203      	strh	r3, [r0, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8002cfc:	8a03      	ldrh	r3, [r0, #16]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	430b      	orrs	r3, r1
 8002d02:	8203      	strh	r3, [r0, #16]
}
 8002d04:	4770      	bx	lr

08002d06 <USART_LINCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002d06:	8a03      	ldrh	r3, [r0, #16]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d08:	b119      	cbz	r1, 8002d12 <USART_LINCmd+0xc>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d10:	e003      	b.n	8002d1a <USART_LINCmd+0x14>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8002d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	8203      	strh	r3, [r0, #16]
 8002d1c:	4770      	bx	lr

08002d1e <USART_SendBreak>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8002d1e:	8983      	ldrh	r3, [r0, #12]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	8183      	strh	r3, [r0, #12]
}
 8002d28:	4770      	bx	lr

08002d2a <USART_HalfDuplexCmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002d2a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002d2c:	b119      	cbz	r1, 8002d36 <USART_HalfDuplexCmd+0xc>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	f043 0308 	orr.w	r3, r3, #8
 8002d34:	e003      	b.n	8002d3e <USART_HalfDuplexCmd+0x14>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8002d36:	f023 0308 	bic.w	r3, r3, #8
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	8283      	strh	r3, [r0, #20]
 8002d40:	4770      	bx	lr

08002d42 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8002d42:	8b03      	ldrh	r3, [r0, #24]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	8303      	strh	r3, [r0, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8002d48:	8b03      	ldrh	r3, [r0, #24]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d50:	8303      	strh	r3, [r0, #24]
}
 8002d52:	4770      	bx	lr

08002d54 <USART_SmartCardCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002d54:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d56:	b119      	cbz	r1, 8002d60 <USART_SmartCardCmd+0xc>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f043 0320 	orr.w	r3, r3, #32
 8002d5e:	e003      	b.n	8002d68 <USART_SmartCardCmd+0x14>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8002d60:	f023 0320 	bic.w	r3, r3, #32
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	8283      	strh	r3, [r0, #20]
 8002d6a:	4770      	bx	lr

08002d6c <USART_SmartCardNACKCmd>:
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002d6c:	8a83      	ldrh	r3, [r0, #20]
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002d6e:	b119      	cbz	r1, 8002d78 <USART_SmartCardNACKCmd+0xc>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f043 0310 	orr.w	r3, r3, #16
 8002d76:	e003      	b.n	8002d80 <USART_SmartCardNACKCmd+0x14>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8002d78:	f023 0310 	bic.w	r3, r3, #16
 8002d7c:	041b      	lsls	r3, r3, #16
 8002d7e:	0c1b      	lsrs	r3, r3, #16
 8002d80:	8283      	strh	r3, [r0, #20]
 8002d82:	4770      	bx	lr

08002d84 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8002d84:	8a83      	ldrh	r3, [r0, #20]
 8002d86:	f023 0304 	bic.w	r3, r3, #4
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	8283      	strh	r3, [r0, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8002d90:	8a83      	ldrh	r3, [r0, #20]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	430b      	orrs	r3, r1
 8002d96:	8283      	strh	r3, [r0, #20]
}
 8002d98:	4770      	bx	lr

08002d9a <USART_IrDACmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002d9a:	8a83      	ldrh	r3, [r0, #20]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8002d9c:	b119      	cbz	r1, 8002da6 <USART_IrDACmd+0xc>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f043 0302 	orr.w	r3, r3, #2
 8002da4:	e003      	b.n	8002dae <USART_IrDACmd+0x14>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8002da6:	f023 0302 	bic.w	r3, r3, #2
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	0c1b      	lsrs	r3, r3, #16
 8002dae:	8283      	strh	r3, [r0, #20]
 8002db0:	4770      	bx	lr

08002db2 <USART_DMACmd>:

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002db2:	8a83      	ldrh	r3, [r0, #20]
 8002db4:	b29b      	uxth	r3, r3
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8002db6:	b10a      	cbz	r2, 8002dbc <USART_DMACmd+0xa>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8002db8:	4319      	orrs	r1, r3
 8002dba:	e001      	b.n	8002dc0 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8002dbc:	ea23 0101 	bic.w	r1, r3, r1
 8002dc0:	8281      	strh	r1, [r0, #20]
 8002dc2:	4770      	bx	lr

08002dc4 <USART_ITConfig>:
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002dc4:	f3c1 1342 	ubfx	r3, r1, #5, #3
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8002dc8:	b510      	push	{r4, lr}

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8002dca:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 8002dce:	2401      	movs	r4, #1
 8002dd0:	fa14 f101 	lsls.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002dd4:	42a3      	cmp	r3, r4
 8002dd6:	d101      	bne.n	8002ddc <USART_ITConfig+0x18>
  {
    usartxbase += 0x0C;
 8002dd8:	300c      	adds	r0, #12
 8002dda:	e004      	b.n	8002de6 <USART_ITConfig+0x22>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d101      	bne.n	8002de4 <USART_ITConfig+0x20>
  {
    usartxbase += 0x10;
 8002de0:	3010      	adds	r0, #16
 8002de2:	e000      	b.n	8002de6 <USART_ITConfig+0x22>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002de4:	3014      	adds	r0, #20
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002de6:	6803      	ldr	r3, [r0, #0]
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
 8002de8:	b10a      	cbz	r2, 8002dee <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002dea:	4319      	orrs	r1, r3
 8002dec:	e001      	b.n	8002df2 <USART_ITConfig+0x2e>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8002dee:	ea23 0101 	bic.w	r1, r3, r1
 8002df2:	6001      	str	r1, [r0, #0]
 8002df4:	bd10      	pop	{r4, pc}

08002df6 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002df6:	8803      	ldrh	r3, [r0, #0]
  {
    bitstatus = SET;
 8002df8:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2000      	moveq	r0, #0
 8002dfe:	2001      	movne	r0, #1
 8002e00:	4770      	bx	lr

08002e02 <USART_ClearFlag>:
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8002e02:	43c9      	mvns	r1, r1
 8002e04:	b289      	uxth	r1, r1
 8002e06:	8001      	strh	r1, [r0, #0]
}
 8002e08:	4770      	bx	lr

08002e0a <USART_GetITStatus>:
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002e0a:	2201      	movs	r2, #1
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002e0c:	b510      	push	{r4, lr}
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002e0e:	f001 031f 	and.w	r3, r1, #31
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002e12:	f3c1 1442 	ubfx	r4, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8002e16:	409a      	lsls	r2, r3
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002e18:	2c01      	cmp	r4, #1
 8002e1a:	d101      	bne.n	8002e20 <USART_GetITStatus+0x16>
  {
    itmask &= USARTx->CR1;
 8002e1c:	8983      	ldrh	r3, [r0, #12]
 8002e1e:	e003      	b.n	8002e28 <USART_GetITStatus+0x1e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002e20:	2c02      	cmp	r4, #2
  {
    itmask &= USARTx->CR2;
 8002e22:	bf0c      	ite	eq
 8002e24:	8a03      	ldrheq	r3, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002e26:	8a83      	ldrhne	r3, [r0, #20]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8002e2c:	8802      	ldrh	r2, [r0, #0]
 8002e2e:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002e30:	b143      	cbz	r3, 8002e44 <USART_GetITStatus+0x3a>
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8002e32:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8002e34:	2301      	movs	r3, #1
 8002e36:	fa13 f101 	lsls.w	r1, r3, r1
  *            @arg USART_IT_NE:   Noise Error interrupt
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 8002e3a:	4211      	tst	r1, r2
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2000      	moveq	r0, #0
 8002e40:	2001      	movne	r0, #1
 8002e42:	bd10      	pop	{r4, pc}
  }
  else
  {
    bitstatus = RESET;
 8002e44:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8002e46:	bd10      	pop	{r4, pc}

08002e48 <USART_ClearITPendingBit>:
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002e48:	0a09      	lsrs	r1, r1, #8
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	408b      	lsls	r3, r1
  USARTx->SR = (uint16_t)~itmask;
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	8003      	strh	r3, [r0, #0]
}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop

08002e58 <ST7032i_print>:
			delay_ms(100);
		}
	}
}

void ST7032i_print(char * str) {
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	4604      	mov	r4, r0
	while (*str)
 8002e5c:	e001      	b.n	8002e62 <ST7032i_print+0xa>
		ST7032i_Data_Write(*str++);
 8002e5e:	f000 fa71 	bl	8003344 <ST7032i_Data_Write>
		}
	}
}

void ST7032i_print(char * str) {
	while (*str)
 8002e62:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d1f9      	bne.n	8002e5e <ST7032i_print+0x6>
		ST7032i_Data_Write(*str++);
}
 8002e6a:	bd10      	pop	{r4, pc}

08002e6c <_close>:
	}
}

int _close(int file) {
	return -1;
}
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e70:	4770      	bx	lr

08002e72 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
	errno = ENOMEM;
 8002e72:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <_execve+0xe>)
 8002e74:	220c      	movs	r2, #12
 8002e76:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20001664 	.word	0x20001664

08002e84 <_fork>:
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
	errno = EAGAIN;
 8002e84:	4b02      	ldr	r3, [pc, #8]	; (8002e90 <_fork+0xc>)
 8002e86:	220b      	movs	r2, #11
 8002e88:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e8e:	4770      	bx	lr
 8002e90:	20001664 	.word	0x20001664

08002e94 <_fstat>:
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e98:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	4770      	bx	lr

08002e9e <_getpid>:
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
	return 1;
}
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	4770      	bx	lr

08002ea2 <_isatty>:
/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
	switch (file) {
 8002ea2:	2802      	cmp	r0, #2
 8002ea4:	d904      	bls.n	8002eb0 <_isatty+0xe>
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
	default:
		//errno = ENOTTY;
		errno = EBADF;
 8002ea6:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <_isatty+0x12>)
 8002ea8:	2209      	movs	r2, #9
 8002eaa:	601a      	str	r2, [r3, #0]
		return 0;
 8002eac:	2000      	movs	r0, #0
 8002eae:	4770      	bx	lr
int _isatty(int file) {
	switch (file) {
	case STDOUT_FILENO:
	case STDERR_FILENO:
	case STDIN_FILENO:
		return 1;
 8002eb0:	2001      	movs	r0, #1
	default:
		//errno = ENOTTY;
		errno = EBADF;
		return 0;
	}
}
 8002eb2:	4770      	bx	lr
 8002eb4:	20001664 	.word	0x20001664

08002eb8 <_kill>:
/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
	errno = EINVAL;
 8002eb8:	4b02      	ldr	r3, [pc, #8]	; (8002ec4 <_kill+0xc>)
 8002eba:	2216      	movs	r2, #22
 8002ebc:	601a      	str	r2, [r3, #0]
	return (-1);
}
 8002ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec2:	4770      	bx	lr
 8002ec4:	20001664 	.word	0x20001664

08002ec8 <_link>:
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
	errno = EMLINK;
 8002ec8:	4b02      	ldr	r3, [pc, #8]	; (8002ed4 <_link+0xc>)
 8002eca:	221f      	movs	r2, #31
 8002ecc:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ed2:	4770      	bx	lr
 8002ed4:	20001664 	.word	0x20001664

08002ed8 <_lseek>:
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8002ed8:	2000      	movs	r0, #0
 8002eda:	4770      	bx	lr

08002edc <_read>:
 read
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */

int _read(int file, char *ptr, int len) {
 8002edc:	b530      	push	{r4, r5, lr}
	int n;
	int num = 0;
	switch (file) {
 8002ede:	b138      	cbz	r0, 8002ef0 <_read+0x14>
 8002ee0:	e00d      	b.n	8002efe <_read+0x22>
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002ee2:	881d      	ldrh	r5, [r3, #0]
 8002ee4:	06ad      	lsls	r5, r5, #26
 8002ee6:	d5fc      	bpl.n	8002ee2 <_read+0x6>
			char c = (char)(USART1->DR & (uint16_t)0x01FF);
 8002ee8:	88a5      	ldrh	r5, [r4, #4]
 8002eea:	540d      	strb	r5, [r1, r0]
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002eec:	3001      	adds	r0, #1
 8002eee:	e001      	b.n	8002ef4 <_read+0x18>
#if   STDIN_USART == 1
			while ((USART1->SR & USART_FLAG_RXNE) == (uint16_t)RESET) {}
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <_read+0x30>)
 8002ef2:	461c      	mov	r4, r3
int _read(int file, char *ptr, int len) {
	int n;
	int num = 0;
	switch (file) {
	case STDIN_FILENO:
		for (n = 0; n < len; n++) {
 8002ef4:	4290      	cmp	r0, r2
 8002ef6:	dbf4      	blt.n	8002ee2 <_read+0x6>
 8002ef8:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8002efc:	bd30      	pop	{r4, r5, pc}
					*ptr++ = c;
					num++;
				}
				break;
				default:
				errno = EBADF;
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <_read+0x34>)
 8002f00:	2209      	movs	r2, #9
 8002f02:	601a      	str	r2, [r3, #0]
				return -1;
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			}
	return num;
}
 8002f08:	bd30      	pop	{r4, r5, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40011000 	.word	0x40011000
 8002f10:	20001664 	.word	0x20001664

08002f14 <_stat>:
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
	st->st_mode = S_IFCHR;
 8002f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f18:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	4770      	bx	lr

08002f1e <_times>:
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
	return -1;
}
 8002f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f22:	4770      	bx	lr

08002f24 <_unlink>:
/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
	errno = ENOENT;
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <_unlink+0xc>)
 8002f26:	2202      	movs	r2, #2
 8002f28:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f2e:	4770      	bx	lr
 8002f30:	20001664 	.word	0x20001664

08002f34 <_wait>:
/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
	errno = ECHILD;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <_wait+0xc>)
 8002f36:	220a      	movs	r2, #10
 8002f38:	601a      	str	r2, [r3, #0]
	return -1;
}
 8002f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f3e:	4770      	bx	lr
 8002f40:	20001664 	.word	0x20001664

08002f44 <_write>:
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002f44:	2801      	cmp	r0, #1
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
 8002f46:	b530      	push	{r4, r5, lr}
	int n;
	switch (file) {
 8002f48:	d009      	beq.n	8002f5e <_write+0x1a>
 8002f4a:	2802      	cmp	r0, #2
 8002f4c:	d11a      	bne.n	8002f84 <_write+0x40>
 8002f4e:	e013      	b.n	8002f78 <_write+0x34>
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f50:	8805      	ldrh	r5, [r0, #0]
 8002f52:	066d      	lsls	r5, r5, #25
 8002f54:	d5fc      	bpl.n	8002f50 <_write+0xc>
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002f56:	5ccd      	ldrb	r5, [r1, r3]
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002f58:	3301      	adds	r3, #1
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
			USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002f5a:	80a5      	strh	r5, [r4, #4]
 8002f5c:	e002      	b.n	8002f64 <_write+0x20>
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f5e:	480d      	ldr	r0, [pc, #52]	; (8002f94 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002f60:	2300      	movs	r3, #0
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
#if STDOUT_USART == 1
			while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f62:	4604      	mov	r4, r0
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
	case STDOUT_FILENO: /*stdout*/
		for (n = 0; n < len; n++) {
 8002f64:	4293      	cmp	r3, r2
 8002f66:	dbf3      	blt.n	8002f50 <_write+0xc>
 8002f68:	e011      	b.n	8002f8e <_write+0x4a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f6a:	8805      	ldrh	r5, [r0, #0]
 8002f6c:	066d      	lsls	r5, r5, #25
 8002f6e:	d5fc      	bpl.n	8002f6a <_write+0x26>
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002f70:	5ccd      	ldrb	r5, [r1, r3]
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002f72:	3301      	adds	r3, #1
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
					USART1->DR = (*ptr++ & (uint16_t)0x01FF);
 8002f74:	80a5      	strh	r5, [r4, #4]
 8002f76:	e002      	b.n	8002f7e <_write+0x3a>
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f78:	4806      	ldr	r0, [pc, #24]	; (8002f94 <_write+0x50>)
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
	int n;
	switch (file) {
 8002f7a:	2300      	movs	r3, #0
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
#if STDERR_USART == 1
					while ((USART1->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
 8002f7c:	4604      	mov	r4, r0
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				case STDERR_FILENO: /* stderr */
				for (n = 0; n < len; n++) {
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	dbf3      	blt.n	8002f6a <_write+0x26>
 8002f82:	e004      	b.n	8002f8e <_write+0x4a>
					USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
				}
				break;
				default:
				errno = EBADF;
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <_write+0x54>)
 8002f86:	2209      	movs	r2, #9
 8002f88:	601a      	str	r2, [r3, #0]
				return -1;
 8002f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			}
	return len;
}
 8002f8e:	4610      	mov	r0, r2
 8002f90:	bd30      	pop	{r4, r5, pc}
 8002f92:	bf00      	nop
 8002f94:	40011000 	.word	0x40011000
 8002f98:	20001664 	.word	0x20001664

08002f9c <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
 8002f9c:	b508      	push	{r3, lr}

	extern char _ebss; // Defined by the linker
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0) {
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <_sbrk+0x38>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	b90a      	cbnz	r2, 8002fa8 <_sbrk+0xc>
		heap_end = &_ebss;
 8002fa4:	4a0c      	ldr	r2, [pc, #48]	; (8002fd8 <_sbrk+0x3c>)
 8002fa6:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
 8002fa8:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8002faa:	f3ef 8208 	mrs	r2, MSP

	char * stack = (char*) __get_MSP();
	if (heap_end + incr > stack) {
 8002fae:	1818      	adds	r0, r3, r0
 8002fb0:	4290      	cmp	r0, r2
 8002fb2:	d90a      	bls.n	8002fca <_sbrk+0x2e>
		_write(STDERR_FILENO, "Heap and stack collision\n", 25);
 8002fb4:	2219      	movs	r2, #25
 8002fb6:	2002      	movs	r0, #2
 8002fb8:	4908      	ldr	r1, [pc, #32]	; (8002fdc <_sbrk+0x40>)
 8002fba:	f7ff ffc3 	bl	8002f44 <_write>
		errno = ENOMEM;
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <_sbrk+0x44>)
 8002fc0:	220c      	movs	r2, #12
 8002fc2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fc8:	e001      	b.n	8002fce <_sbrk+0x32>
		//abort ();
	}

	heap_end += incr;
 8002fca:	4a02      	ldr	r2, [pc, #8]	; (8002fd4 <_sbrk+0x38>)
 8002fcc:	6010      	str	r0, [r2, #0]
	return (caddr_t) prev_heap_end;

}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	bd08      	pop	{r3, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2000098c 	.word	0x2000098c
 8002fd8:	20001668 	.word	0x20001668
 8002fdc:	08008cab 	.word	0x08008cab
 8002fe0:	20001664 	.word	0x20001664

08002fe4 <_exit>:
char *__env[1] = { 0 };
char **environ = __env;

int _write(int file, char *ptr, int len);

void _exit(int status) {
 8002fe4:	b508      	push	{r3, lr}
	_write(1, "exit", 4);
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	4902      	ldr	r1, [pc, #8]	; (8002ff4 <_exit+0x10>)
 8002fea:	2204      	movs	r2, #4
 8002fec:	f7ff ffaa 	bl	8002f44 <_write>
 8002ff0:	e7fe      	b.n	8002ff0 <_exit+0xc>
 8002ff2:	bf00      	nop
 8002ff4:	08008cc5 	.word	0x08008cc5

08002ff8 <I2C_Configuration>:
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8002ff8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8002ffa:	2101      	movs	r1, #1
  * @brief  I2C Configuration
  * @param  None
  * @retval None
  */
void I2C_Configuration(void)
{
 8002ffc:	b087      	sub	sp, #28
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8002ffe:	4c21      	ldr	r4, [pc, #132]	; (8003084 <I2C_Configuration+0x8c>)
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  I2C_InitTypeDef  I2C_InitStructure;

  /* I2C Periph clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);  //  RCC_APB1PeriphClockCmd(I2C1_RCC, ENABLE);
 8003000:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003004:	f7fe fcfe 	bl	8001a04 <RCC_APB1PeriphClockCmd>
  /* GPIO Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE); // PB5 (SMBA), PB6 (SCL), PB9 (SDA)  // RCC_APB2PeriphClockCmd(I2C1_GPIO_RCC, ENABLE);
 8003008:	2002      	movs	r0, #2
 800300a:	2101      	movs	r1, #1
 800300c:	f7fe fcd6 	bl	80019bc <RCC_AHB1PeriphClockCmd>

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
 8003010:	4620      	mov	r0, r4
 8003012:	2106      	movs	r1, #6
 8003014:	2204      	movs	r2, #4
 8003016:	f7fe f9a9 	bl	800136c <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
 800301a:	2204      	movs	r2, #4
 800301c:	4620      	mov	r0, r4
 800301e:	2109      	movs	r1, #9
 8003020:	f7fe f9a4 	bl	800136c <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
 8003024:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8003028:	2501      	movs	r5, #1

  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
 800302a:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800302c:	4620      	mov	r0, r4
  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800302e:	2302      	movs	r3, #2
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003030:	a904      	add	r1, sp, #16
  /* Configure I2C pins: SCL and SDA */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003032:	f88d 3015 	strb.w	r3, [sp, #21]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003036:	f88d 3014 	strb.w	r3, [sp, #20]
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 800303a:	f88d 5016 	strb.w	r5, [sp, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800303e:	f88d 5017 	strb.w	r5, [sp, #23]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003042:	f7fe f913 	bl	800126c <GPIO_Init>
//#if defined (REMAP_I2C1)
//Remap_I2C1_Configuration();
//#endif

  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 8003046:	2300      	movs	r3, #0
 8003048:	f8ad 3004 	strh.w	r3, [sp, #4]
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 800304c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8003050:	f8ad 3006 	strh.w	r3, [sp, #6]
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 8003054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003058:	f8ad 300a 	strh.w	r3, [sp, #10]
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800305c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003060:	f8ad 300c 	strh.w	r3, [sp, #12]
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 8003064:	a906      	add	r1, sp, #24
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <I2C_Configuration+0x90>)

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 8003068:	f5a4 34d8 	sub.w	r4, r4, #110592	; 0x1b000
  /* I2C configuration */
  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  I2C_InitStructure.I2C_ClockSpeed = I2C_CLOCK;
 800306c:	f841 3d18 	str.w	r3, [r1, #-24]!

  /* Apply I2C configuration after enabling it */
  I2C_Init(I2C1, &I2C_InitStructure);
 8003070:	4620      	mov	r0, r4
 8003072:	4669      	mov	r1, sp
 8003074:	f7fe f9be 	bl	80013f4 <I2C_Init>
  /* I2C Peripheral Enable */
  I2C_Cmd(I2C1, ENABLE);
 8003078:	4620      	mov	r0, r4
 800307a:	4629      	mov	r1, r5
 800307c:	f7fe fa2e 	bl	80014dc <I2C_Cmd>
}
 8003080:	b007      	add	sp, #28
 8003082:	bd30      	pop	{r4, r5, pc}
 8003084:	40020400 	.word	0x40020400
 8003088:	000186a0 	.word	0x000186a0

0800308c <ST7032i_Command_Write>:
  * @brief  Write Command to ST7032i
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
 800308c:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[] = { 0b00000000, Data };
 800308e:	2300      	movs	r3, #0
 8003090:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8003094:	a901      	add	r1, sp, #4
 8003096:	203e      	movs	r0, #62	; 0x3e
 8003098:	2202      	movs	r2, #2
  * @param  Data : Command Data
  * @retval None
  */
void ST7032i_Command_Write(uint8_t Data)
{
	uint8_t data[] = { 0b00000000, Data };
 800309a:	f88d 3004 	strb.w	r3, [sp, #4]
	i2c_transmit(ST7032I_ADDR, data, 2);
 800309e:	f7fd fa2d 	bl	80004fc <i2c_transmit>
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
}
 80030a2:	bd0e      	pop	{r1, r2, r3, pc}

080030a4 <ST7032i_Icon_Off>:
  * @brief  Put off icon whili Icon RAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Icon_Off(void)
{
 80030a4:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <ST7032i_Icon_Off+0x20>)
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	7858      	ldrb	r0, [r3, #1]
 80030ac:	f3c0 1001 	ubfx	r0, r0, #4, #2
 80030b0:	4310      	orrs	r0, r2
 80030b2:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 80030b6:	f7ff ffe9 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 80030ba:	201b      	movs	r0, #27
}
 80030bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_Off(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write( (Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 )) & 0b11110111);
  delay_us(27);
 80030c0:	f7fd b8c8 	b.w	8000254 <delay_us>
 80030c4:	2000009c 	.word	0x2000009c

080030c8 <ST7032i_Icon_On>:
  * @brief  Display icon
  * @param  None
  * @retval None
  */
void ST7032i_Icon_On(void)
{
 80030c8:	b508      	push	{r3, lr}
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <ST7032i_Icon_On+0x20>)
 80030cc:	7818      	ldrb	r0, [r3, #0]
 80030ce:	785b      	ldrb	r3, [r3, #1]
 80030d0:	f040 0008 	orr.w	r0, r0, #8
 80030d4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80030d8:	4318      	orrs	r0, r3
 80030da:	f7ff ffd7 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 80030de:	201b      	movs	r0, #27
}
 80030e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Icon_On(void)
{
  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (Contrast >> 4) & 0b00000011 ) | 0b00001000 );
  delay_us(27);
 80030e4:	f7fd b8b6 	b.w	8000254 <delay_us>
 80030e8:	2000009c 	.word	0x2000009c

080030ec <ST7032i_Set_Contrast>:
  * @brief  Set display contrast. value is to be 0 - 63
  * @param  contrast: contrast
  * @retval None
  */
void ST7032i_Set_Contrast(uint8_t contrast)
{
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4604      	mov	r4, r0
  //Contrast set
  ST7032i_Command_Write(0b01110000 | (contrast & 0b00001111));
 80030f0:	f000 000f 	and.w	r0, r0, #15
 80030f4:	f040 0070 	orr.w	r0, r0, #112	; 0x70
 80030f8:	f7ff ffc8 	bl	800308c <ST7032i_Command_Write>

  delay_us(27);
 80030fc:	201b      	movs	r0, #27
 80030fe:	f7fd f8a9 	bl	8000254 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <ST7032i_Set_Contrast+0x30>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	f3c4 1001 	ubfx	r0, r4, #4, #2
 800310a:	4318      	orrs	r0, r3
 800310c:	f7ff ffbe 	bl	800308c <ST7032i_Command_Write>

  delay_us(27);
 8003110:	201b      	movs	r0, #27
}
 8003112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast | ( (contrast >> 4) & 0b00000011 ) );

  delay_us(27);
 8003116:	f7fd b89d 	b.w	8000254 <delay_us>
 800311a:	bf00      	nop
 800311c:	2000009c 	.word	0x2000009c

08003120 <ST7032i_Set_DDRAM>:
  * @brief  set DDRAM address
  * @param  address : DDRAM address
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
 8003120:	b510      	push	{r4, lr}
 8003122:	4604      	mov	r4, r0
  ST7032i_Command_Write(0b10000000 | address);
 8003124:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003128:	f7ff ffb0 	bl	800308c <ST7032i_Command_Write>
  DDRAM_Address = address;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <ST7032i_Set_DDRAM+0x1c>)
  delay_us(27);
 800312e:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
 8003130:	701c      	strb	r4, [r3, #0]
  delay_us(27);
}
 8003132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Set_DDRAM(uint8_t address)
{
  ST7032i_Command_Write(0b10000000 | address);
  DDRAM_Address = address;
  delay_us(27);
 8003136:	f7fd b88d 	b.w	8000254 <delay_us>
 800313a:	bf00      	nop
 800313c:	20000994 	.word	0x20000994

08003140 <ST7032i_Cursor_Blink_Off>:
  * @brief  display square cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
 8003140:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <ST7032i_Cursor_Blink_Off+0x18>)
 8003144:	7898      	ldrb	r0, [r3, #2]
 8003146:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 800314a:	f7ff ff9f 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 800314e:	201b      	movs	r0, #27
}
 8003150:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000000);
  delay_us(27);
 8003154:	f7fd b87e 	b.w	8000254 <delay_us>
 8003158:	2000009c 	.word	0x2000009c

0800315c <ST7032i_Cursor_Blink_On>:
  * @brief  make square cursor brink
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
 800315c:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <ST7032i_Cursor_Blink_On+0x18>)
 8003160:	7898      	ldrb	r0, [r3, #2]
 8003162:	f040 0001 	orr.w	r0, r0, #1
 8003166:	f7ff ff91 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 800316a:	201b      	movs	r0, #27
}
 800316c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Blink_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111110) | 0b00000001);
  delay_us(27);
 8003170:	f7fd b870 	b.w	8000254 <delay_us>
 8003174:	2000009c 	.word	0x2000009c

08003178 <ST7032i_Cursor_Off>:
  * @brief  put off cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
 8003178:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
 800317a:	4b05      	ldr	r3, [pc, #20]	; (8003190 <ST7032i_Cursor_Off+0x18>)
 800317c:	7898      	ldrb	r0, [r3, #2]
 800317e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8003182:	f7ff ff83 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 8003186:	201b      	movs	r0, #27
}
 8003188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000000);
  delay_us(27);
 800318c:	f7fd b862 	b.w	8000254 <delay_us>
 8003190:	2000009c 	.word	0x2000009c

08003194 <ST7032i_Cursor_On>:
  * @brief  display under line cursor
  * @param  None
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
 8003194:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <ST7032i_Cursor_On+0x18>)
 8003198:	7898      	ldrb	r0, [r3, #2]
 800319a:	f040 0002 	orr.w	r0, r0, #2
 800319e:	f7ff ff75 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 80031a2:	201b      	movs	r0, #27
}
 80031a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Cursor_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111101) | 0b00000010);
  delay_us(27);
 80031a8:	f7fd b854 	b.w	8000254 <delay_us>
 80031ac:	2000009c 	.word	0x2000009c

080031b0 <ST7032i_Display_Off>:
  * @brief  put off display while DDRAM is kept
  * @param  None
  * @retval None
  */
void ST7032i_Display_Off(void)
{
 80031b0:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <ST7032i_Display_Off+0x18>)
 80031b4:	7898      	ldrb	r0, [r3, #2]
 80031b6:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
 80031ba:	f7ff ff67 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 80031be:	201b      	movs	r0, #27
}
 80031c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_Off(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000000);
  delay_us(27);
 80031c4:	f7fd b846 	b.w	8000254 <delay_us>
 80031c8:	2000009c 	.word	0x2000009c

080031cc <ST7032i_Display_On>:
  * @brief  put on display
  * @param  None
  * @retval None
  */
void ST7032i_Display_On(void)
{
 80031cc:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <ST7032i_Display_On+0x18>)
 80031d0:	7898      	ldrb	r0, [r3, #2]
 80031d2:	f040 0004 	orr.w	r0, r0, #4
 80031d6:	f7ff ff59 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 80031da:	201b      	movs	r0, #27
}
 80031dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void ST7032i_Display_On(void)
{
  ST7032i_Command_Write(( Display & 0b11111011) | 0b00000100);
  delay_us(27);
 80031e0:	f7fd b838 	b.w	8000254 <delay_us>
 80031e4:	2000009c 	.word	0x2000009c

080031e8 <ST7032i_Shift_Disable>:
  * @brief  disables shift fucntion
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
 80031e8:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <ST7032i_Shift_Disable+0x20>)
 80031ec:	78d8      	ldrb	r0, [r3, #3]
 80031ee:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 80031f2:	f7ff ff4b 	bl	800308c <ST7032i_Command_Write>
  Shift = 0;
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <ST7032i_Shift_Disable+0x24>)
 80031f8:	2200      	movs	r2, #0
  delay_us(27);
 80031fa:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
 80031fc:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 80031fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Disable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000000);
  Shift = 0;
  delay_us(27);
 8003202:	f7fd b827 	b.w	8000254 <delay_us>
 8003206:	bf00      	nop
 8003208:	2000009c 	.word	0x2000009c
 800320c:	20000994 	.word	0x20000994

08003210 <ST7032i_Shift_Enable>:
  * @brief  shift entire display data is send
  * @param  None
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
 8003210:	b508      	push	{r3, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <ST7032i_Shift_Enable+0x20>)
 8003214:	78d8      	ldrb	r0, [r3, #3]
 8003216:	f040 0001 	orr.w	r0, r0, #1
 800321a:	f7ff ff37 	bl	800308c <ST7032i_Command_Write>
  Shift = 1;
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <ST7032i_Shift_Enable+0x24>)
 8003220:	2201      	movs	r2, #1
  delay_us(27);
 8003222:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
 8003224:	705a      	strb	r2, [r3, #1]
  delay_us(27);
}
 8003226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Shift_Enable(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111110) | 0b00000001);
  Shift = 1;
  delay_us(27);
 800322a:	f7fd b813 	b.w	8000254 <delay_us>
 800322e:	bf00      	nop
 8003230:	2000009c 	.word	0x2000009c
 8003234:	20000994 	.word	0x20000994

08003238 <ST7032i_Decrement>:
  * @brief  decrement address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Decrement(void)
{
 8003238:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
 800323a:	4c06      	ldr	r4, [pc, #24]	; (8003254 <ST7032i_Decrement+0x1c>)
 800323c:	78e0      	ldrb	r0, [r4, #3]
 800323e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
 8003242:	f7ff ff23 	bl	800308c <ST7032i_Command_Write>
  Increment = -1;
 8003246:	23ff      	movs	r3, #255	; 0xff
  delay_us(27);
 8003248:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
 800324a:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 800324c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Decrement(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000000);
  Increment = -1;
  delay_us(27);
 8003250:	f7fd b800 	b.w	8000254 <delay_us>
 8003254:	2000009c 	.word	0x2000009c

08003258 <ST7032i_Increment>:
  * @brief  increment address when data is send and put
  * @param  None
  * @retval None
  */
void ST7032i_Increment(void)
{
 8003258:	b510      	push	{r4, lr}
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
 800325a:	4c06      	ldr	r4, [pc, #24]	; (8003274 <ST7032i_Increment+0x1c>)
 800325c:	78e0      	ldrb	r0, [r4, #3]
 800325e:	f040 0002 	orr.w	r0, r0, #2
 8003262:	f7ff ff13 	bl	800308c <ST7032i_Command_Write>
  Increment = 1;
 8003266:	2301      	movs	r3, #1
  delay_us(27);
 8003268:	201b      	movs	r0, #27
  * @retval None
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
 800326a:	7123      	strb	r3, [r4, #4]
  delay_us(27);
}
 800326c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void ST7032i_Increment(void)
{
  ST7032i_Command_Write(( Entry_Mode & 0b11111101) | 0b00000010);
  Increment = 1;
  delay_us(27);
 8003270:	f7fc bff0 	b.w	8000254 <delay_us>
 8003274:	2000009c 	.word	0x2000009c

08003278 <ST7032i_Return>:
  * @brief  Return to home position
  * @param  None
  * @retval None
  */
void ST7032i_Return(void)
{
 8003278:	b508      	push	{r3, lr}
  ST7032i_Command_Write(0b00000010);
 800327a:	2002      	movs	r0, #2
 800327c:	f7ff ff06 	bl	800308c <ST7032i_Command_Write>
  DDRAM_Address = 0;
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <ST7032i_Return+0x18>)
 8003282:	2200      	movs	r2, #0
  delay_ms(2);
 8003284:	2002      	movs	r0, #2
  * @retval None
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
 8003286:	701a      	strb	r2, [r3, #0]
  delay_ms(2);
}
 8003288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  */
void ST7032i_Return(void)
{
  ST7032i_Command_Write(0b00000010);
  DDRAM_Address = 0;
  delay_ms(2);
 800328c:	f7fc bfd8 	b.w	8000240 <delay_ms>
 8003290:	20000994 	.word	0x20000994

08003294 <ST7032i_Clear>:
  * @brief  Clear Display
  * @param  None
  * @retval None
  */
void ST7032i_Clear(void)
{
 8003294:	b508      	push	{r3, lr}
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
 8003296:	2001      	movs	r0, #1
 8003298:	f7ff fef8 	bl	800308c <ST7032i_Command_Write>
  DDRAM_Address = 0;
 800329c:	4a07      	ldr	r2, [pc, #28]	; (80032bc <ST7032i_Clear+0x28>)
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 800329e:	4908      	ldr	r1, [pc, #32]	; (80032c0 <ST7032i_Clear+0x2c>)
void ST7032i_Clear(void)
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	7013      	strb	r3, [r2, #0]
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
 80032a4:	2220      	movs	r2, #32
 80032a6:	54ca      	strb	r2, [r1, r3]
      DDRAM_Data[1][i] =  ' ';
 80032a8:	18c8      	adds	r0, r1, r3
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 80032aa:	3301      	adds	r3, #1
 80032ac:	2b10      	cmp	r3, #16
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
 80032ae:	7402      	strb	r2, [r0, #16]
{
  uint32_t i;

  ST7032i_Command_Write(0b00000001);
  DDRAM_Address = 0;
  for(i=0;i<16;i++)
 80032b0:	d1f9      	bne.n	80032a6 <ST7032i_Clear+0x12>
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 80032b2:	2002      	movs	r0, #2
}
 80032b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  for(i=0;i<16;i++)
    {
      DDRAM_Data[0][i] =  ' ';
      DDRAM_Data[1][i] =  ' ';
    }
  delay_ms(2);
 80032b8:	f7fc bfc2 	b.w	8000240 <delay_ms>
 80032bc:	20000994 	.word	0x20000994
 80032c0:	20001631 	.word	0x20001631

080032c4 <ST7032i_Init>:
  * @brief  Initialize ST7032i LCD and I2C interface
  * @param  None
  * @retval None
  */
void ST7032i_Init(void)
{
 80032c4:	b510      	push	{r4, lr}
//  delay_ms(40);

//  I2C_Configuration();

  //Function Set
  ST7032i_Command_Write(0b00111000);
 80032c6:	2038      	movs	r0, #56	; 0x38
 80032c8:	f7ff fee0 	bl	800308c <ST7032i_Command_Write>

  delay_us(27);
 80032cc:	201b      	movs	r0, #27
 80032ce:	f7fc ffc1 	bl	8000254 <delay_us>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 80032d2:	2039      	movs	r0, #57	; 0x39
 80032d4:	f7ff feda 	bl	800308c <ST7032i_Command_Write>

  delay_us(27);
 80032d8:	201b      	movs	r0, #27
 80032da:	f7fc ffbb 	bl	8000254 <delay_us>

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);
 80032de:	2014      	movs	r0, #20
 80032e0:	f7ff fed4 	bl	800308c <ST7032i_Command_Write>

  delay_us(27);
 80032e4:	201b      	movs	r0, #27
  ST7032i_Command_Write(0b01110000);

  delay_us(27);

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 80032e6:	4c16      	ldr	r4, [pc, #88]	; (8003340 <ST7032i_Init+0x7c>)
  delay_us(27);

  //Bias and OSC frequency
  ST7032i_Command_Write(0b00010100);

  delay_us(27);
 80032e8:	f7fc ffb4 	bl	8000254 <delay_us>

  //Contrast set
  ST7032i_Command_Write(0b01110000);
 80032ec:	2070      	movs	r0, #112	; 0x70
 80032ee:	f7ff fecd 	bl	800308c <ST7032i_Command_Write>

  delay_us(27);
 80032f2:	201b      	movs	r0, #27
 80032f4:	f7fc ffae 	bl	8000254 <delay_us>

  //Power/Icon/Contrast control
  ST7032i_Command_Write(Power_Icon_Contrast);
 80032f8:	7820      	ldrb	r0, [r4, #0]
 80032fa:	f7ff fec7 	bl	800308c <ST7032i_Command_Write>

  delay_us(27);
 80032fe:	201b      	movs	r0, #27
 8003300:	f7fc ffa8 	bl	8000254 <delay_us>

  //Contrast set
  ST7032i_Set_Contrast(Contrast);
 8003304:	7860      	ldrb	r0, [r4, #1]
 8003306:	f7ff fef1 	bl	80030ec <ST7032i_Set_Contrast>

  //Follower control
  ST7032i_Command_Write(0b01101100);
 800330a:	206c      	movs	r0, #108	; 0x6c
 800330c:	f7ff febe 	bl	800308c <ST7032i_Command_Write>

  delay_ms(200);
 8003310:	20c8      	movs	r0, #200	; 0xc8
 8003312:	f7fc ff95 	bl	8000240 <delay_ms>

  //Function Set
  ST7032i_Command_Write(0b00111001);
 8003316:	2039      	movs	r0, #57	; 0x39
 8003318:	f7ff feb8 	bl	800308c <ST7032i_Command_Write>

  delay_us(27);
 800331c:	201b      	movs	r0, #27
 800331e:	f7fc ff99 	bl	8000254 <delay_us>

  //Entry mode
  ST7032i_Command_Write(Entry_Mode);
 8003322:	78e0      	ldrb	r0, [r4, #3]
 8003324:	f7ff feb2 	bl	800308c <ST7032i_Command_Write>

  delay_us(27);
 8003328:	201b      	movs	r0, #27
 800332a:	f7fc ff93 	bl	8000254 <delay_us>

  //Display control : on
  ST7032i_Command_Write(Display);
 800332e:	78a0      	ldrb	r0, [r4, #2]
 8003330:	f7ff feac 	bl	800308c <ST7032i_Command_Write>

  delay_us(27);
 8003334:	201b      	movs	r0, #27
 8003336:	f7fc ff8d 	bl	8000254 <delay_us>

  //Clear
  ST7032i_Clear();
}
 800333a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ST7032i_Command_Write(Display);

  delay_us(27);

  //Clear
  ST7032i_Clear();
 800333e:	e7a9      	b.n	8003294 <ST7032i_Clear>
 8003340:	2000009c 	.word	0x2000009c

08003344 <ST7032i_Data_Write>:
  * @brief  Write Data to ST7032i
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
 8003344:	b507      	push	{r0, r1, r2, lr}
	uint8_t data[] = { 0b01000000, Data };
 8003346:	2340      	movs	r3, #64	; 0x40
 8003348:	f88d 0005 	strb.w	r0, [sp, #5]
	i2c_transmit(ST7032I_ADDR, data, 2);
 800334c:	a901      	add	r1, sp, #4
 800334e:	203e      	movs	r0, #62	; 0x3e
 8003350:	2202      	movs	r2, #2
  * @param  Data : "Data" Data
  * @retval None
  */
void ST7032i_Data_Write(uint8_t Data)
{
	uint8_t data[] = { 0b01000000, Data };
 8003352:	f88d 3004 	strb.w	r3, [sp, #4]
	i2c_transmit(ST7032I_ADDR, data, 2);
 8003356:	f7fd f8d1 	bl	80004fc <i2c_transmit>
  I2C_SendData(I2C1, Data);
  /* Test on EV8 and clear it */
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
  /* Send STOP condition */
  I2C_GenerateSTOP(I2C1, ENABLE);
}
 800335a:	bd0e      	pop	{r1, r2, r3, pc}

0800335c <ST7032i_Putchar>:
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
{
 800335c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003360:	4604      	mov	r4, r0
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
 8003362:	b2c0      	uxtb	r0, r0
 8003364:	f7ff ffee 	bl	8003344 <ST7032i_Data_Write>
  delay_us(27);
 8003368:	201b      	movs	r0, #27
 800336a:	f7fc ff73 	bl	8000254 <delay_us>
  if(DDRAM_Address < 0x10)
 800336e:	4b57      	ldr	r3, [pc, #348]	; (80034cc <ST7032i_Putchar+0x170>)
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	2a0f      	cmp	r2, #15
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 8003374:	781a      	ldrb	r2, [r3, #0]
{
  uint32_t i;

  ST7032i_Data_Write((uint8_t)chardata);
  delay_us(27);
  if(DDRAM_Address < 0x10)
 8003376:	d802      	bhi.n	800337e <ST7032i_Putchar+0x22>
    {
      DDRAM_Data[0][DDRAM_Address] = chardata;
 8003378:	4955      	ldr	r1, [pc, #340]	; (80034d0 <ST7032i_Putchar+0x174>)
 800337a:	548c      	strb	r4, [r1, r2]
 800337c:	e008      	b.n	8003390 <ST7032i_Putchar+0x34>
    }
  else if (DDRAM_Address >= 0x40 && DDRAM_Address < 0x50)
 800337e:	2a3f      	cmp	r2, #63	; 0x3f
 8003380:	d906      	bls.n	8003390 <ST7032i_Putchar+0x34>
 8003382:	781a      	ldrb	r2, [r3, #0]
 8003384:	2a4f      	cmp	r2, #79	; 0x4f
 8003386:	d803      	bhi.n	8003390 <ST7032i_Putchar+0x34>
    {
      DDRAM_Data[1][DDRAM_Address - 0x40] = chardata;
 8003388:	7819      	ldrb	r1, [r3, #0]
 800338a:	4a52      	ldr	r2, [pc, #328]	; (80034d4 <ST7032i_Putchar+0x178>)
 800338c:	188a      	adds	r2, r1, r2
 800338e:	7414      	strb	r4, [r2, #16]
    }
  if (Shift == 0)
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	4a4e      	ldr	r2, [pc, #312]	; (80034cc <ST7032i_Putchar+0x170>)
 8003394:	b933      	cbnz	r3, 80033a4 <ST7032i_Putchar+0x48>
    {
      DDRAM_Address = DDRAM_Address + Increment;
 8003396:	4b50      	ldr	r3, [pc, #320]	; (80034d8 <ST7032i_Putchar+0x17c>)
 8003398:	7811      	ldrb	r1, [r2, #0]
 800339a:	791b      	ldrb	r3, [r3, #4]
 800339c:	18cb      	adds	r3, r1, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	7013      	strb	r3, [r2, #0]
 80033a2:	e032      	b.n	800340a <ST7032i_Putchar+0xae>
    }
  else if (Shift == 1 && Increment == 1)
 80033a4:	7853      	ldrb	r3, [r2, #1]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d116      	bne.n	80033d8 <ST7032i_Putchar+0x7c>
 80033aa:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <ST7032i_Putchar+0x17c>)
 80033ac:	791b      	ldrb	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d112      	bne.n	80033d8 <ST7032i_Putchar+0x7c>
 80033b2:	2200      	movs	r2, #0
    {
      for (i = 0 ; i< 15; i++)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80033b4:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <ST7032i_Putchar+0x174>)
 80033b6:	e000      	b.n	80033ba <ST7032i_Putchar+0x5e>
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80033b8:	460a      	mov	r2, r1
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80033ba:	1c51      	adds	r1, r2, #1
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80033bc:	290f      	cmp	r1, #15
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
 80033be:	5c5c      	ldrb	r4, [r3, r1]
 80033c0:	4843      	ldr	r0, [pc, #268]	; (80034d0 <ST7032i_Putchar+0x174>)
 80033c2:	549c      	strb	r4, [r3, r2]
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
 80033c4:	eb03 0401 	add.w	r4, r3, r1
 80033c8:	441a      	add	r2, r3
 80033ca:	7c24      	ldrb	r4, [r4, #16]
 80033cc:	7414      	strb	r4, [r2, #16]
    {
      DDRAM_Address = DDRAM_Address + Increment;
    }
  else if (Shift == 1 && Increment == 1)
    {
      for (i = 0 ; i< 15; i++)
 80033ce:	d1f3      	bne.n	80033b8 <ST7032i_Putchar+0x5c>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i+1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
 80033d0:	2320      	movs	r3, #32
 80033d2:	73c3      	strb	r3, [r0, #15]
      DDRAM_Data[1][15] = ' ';
 80033d4:	77c3      	strb	r3, [r0, #31]
 80033d6:	e018      	b.n	800340a <ST7032i_Putchar+0xae>
    }
  else if (Shift == 1 && Increment == -1)
 80033d8:	4b3c      	ldr	r3, [pc, #240]	; (80034cc <ST7032i_Putchar+0x170>)
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d114      	bne.n	800340a <ST7032i_Putchar+0xae>
 80033e0:	4b3d      	ldr	r3, [pc, #244]	; (80034d8 <ST7032i_Putchar+0x17c>)
 80033e2:	791b      	ldrb	r3, [r3, #4]
 80033e4:	b25b      	sxtb	r3, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	d10f      	bne.n	800340a <ST7032i_Putchar+0xae>
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 80033ea:	4a39      	ldr	r2, [pc, #228]	; (80034d0 <ST7032i_Putchar+0x174>)
          DDRAM_Data[1][i] = DDRAM_Data[1][i+1];
        }
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
 80033ec:	230f      	movs	r3, #15
/**
  * @brief  put character on st7032i lcd
  * @param  None
  * @retval None
  */
void ST7032i_Putchar(int8_t chardata)
 80033ee:	1e59      	subs	r1, r3, #1
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
 80033f0:	4837      	ldr	r0, [pc, #220]	; (80034d0 <ST7032i_Putchar+0x174>)
 80033f2:	5c54      	ldrb	r4, [r2, r1]
 80033f4:	54d4      	strb	r4, [r2, r3]
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
 80033f6:	1854      	adds	r4, r2, r1
 80033f8:	18d3      	adds	r3, r2, r3
 80033fa:	7c24      	ldrb	r4, [r4, #16]
 80033fc:	741c      	strb	r4, [r3, #16]
      DDRAM_Data[0][15] = ' ';
      DDRAM_Data[1][15] = ' ';
    }
  else if (Shift == 1 && Increment == -1)
    {
      for (i = 15 ; i> 0; i--)
 80033fe:	460b      	mov	r3, r1
 8003400:	2900      	cmp	r1, #0
 8003402:	d1f4      	bne.n	80033ee <ST7032i_Putchar+0x92>
        {
          DDRAM_Data[0][i] = DDRAM_Data[0][i-1];
          DDRAM_Data[1][i] = DDRAM_Data[1][i-1];
        }
      DDRAM_Data[0][0] = ' ';
 8003404:	2320      	movs	r3, #32
 8003406:	7003      	strb	r3, [r0, #0]
      DDRAM_Data[1][0] = ' ';
 8003408:	7403      	strb	r3, [r0, #16]
    }

  if (DDRAM_Address == 0x10)
 800340a:	4b30      	ldr	r3, [pc, #192]	; (80034cc <ST7032i_Putchar+0x170>)
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	2a10      	cmp	r2, #16
 8003410:	d109      	bne.n	8003426 <ST7032i_Putchar+0xca>
    {
      DDRAM_Address = 0x40;
 8003412:	2240      	movs	r2, #64	; 0x40
 8003414:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003416:	7818      	ldrb	r0, [r3, #0]
 8003418:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800341c:	f7ff fe36 	bl	800308c <ST7032i_Command_Write>
      delay_us(27);
 8003420:	201b      	movs	r0, #27
 8003422:	f7fc ff17 	bl	8000254 <delay_us>
    }

  if (DDRAM_Address == 0x3F)
 8003426:	4b29      	ldr	r3, [pc, #164]	; (80034cc <ST7032i_Putchar+0x170>)
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	2a3f      	cmp	r2, #63	; 0x3f
 800342c:	d109      	bne.n	8003442 <ST7032i_Putchar+0xe6>
    {
      DDRAM_Address = 0x0F;
 800342e:	220f      	movs	r2, #15
 8003430:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003432:	7818      	ldrb	r0, [r3, #0]
 8003434:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003438:	f7ff fe28 	bl	800308c <ST7032i_Command_Write>
      delay_us(27);
 800343c:	201b      	movs	r0, #27
 800343e:	f7fc ff09 	bl	8000254 <delay_us>
    }

  if (DDRAM_Address == 0xFF)
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <ST7032i_Putchar+0x170>)
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	2aff      	cmp	r2, #255	; 0xff
 8003448:	d109      	bne.n	800345e <ST7032i_Putchar+0x102>
    {
      DDRAM_Address = 0x0;
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 800344e:	7818      	ldrb	r0, [r3, #0]
 8003450:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8003454:	f7ff fe1a 	bl	800308c <ST7032i_Command_Write>
      delay_us(27);
 8003458:	201b      	movs	r0, #27
 800345a:	f7fc fefb 	bl	8000254 <delay_us>
    }

  if (DDRAM_Address == 0x50)
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <ST7032i_Putchar+0x170>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b50      	cmp	r3, #80	; 0x50
 8003464:	d130      	bne.n	80034c8 <ST7032i_Putchar+0x16c>
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8003466:	4d1a      	ldr	r5, [pc, #104]	; (80034d0 <ST7032i_Putchar+0x174>)
      DDRAM_Address = 0x0;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
 8003468:	2400      	movs	r4, #0
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 800346a:	192b      	adds	r3, r5, r4
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 800346c:	f064 007f 	orn	r0, r4, #127	; 0x7f

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8003470:	7c1b      	ldrb	r3, [r3, #16]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8003472:	b2c0      	uxtb	r0, r0

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
 8003474:	552b      	strb	r3, [r5, r4]
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
 8003476:	f7ff fe09 	bl	800308c <ST7032i_Command_Write>
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 800347a:	5d28      	ldrb	r0, [r5, r4]
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 800347c:	3401      	adds	r4, #1
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
 800347e:	f7ff ff61 	bl	8003344 <ST7032i_Data_Write>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 8003482:	2c10      	cmp	r4, #16
 8003484:	d1f1      	bne.n	800346a <ST7032i_Putchar+0x10e>
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8003486:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80034d0 <ST7032i_Putchar+0x174>
      delay_us(27);
    }

  if (DDRAM_Address == 0x50)
    {
      for(i=0;i<16;i++)
 800348a:	2540      	movs	r5, #64	; 0x40
 800348c:	2400      	movs	r4, #0
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 800348e:	2720      	movs	r7, #32
 8003490:	eb08 0604 	add.w	r6, r8, r4
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 8003494:	f045 0080 	orr.w	r0, r5, #128	; 0x80
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
        {
          DDRAM_Data[1][i] =  ' ';
 8003498:	7437      	strb	r7, [r6, #16]
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
 800349a:	f7ff fdf7 	bl	800308c <ST7032i_Command_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 800349e:	3401      	adds	r4, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 80034a0:	7c30      	ldrb	r0, [r6, #16]
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 80034a2:	3501      	adds	r5, #1
        {
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
 80034a4:	f7ff ff4e 	bl	8003344 <ST7032i_Data_Write>
        {
          DDRAM_Data[0][i] =  DDRAM_Data[1][i];
          ST7032i_Command_Write(0b10000000 | (0x00 + i));
          ST7032i_Data_Write(DDRAM_Data[0][i]);
        }
      for(i=0;i<16;i++)
 80034a8:	2c10      	cmp	r4, #16
 80034aa:	b2ed      	uxtb	r5, r5
 80034ac:	d1f0      	bne.n	8003490 <ST7032i_Putchar+0x134>
          DDRAM_Data[1][i] =  ' ';
          ST7032i_Command_Write(0b10000000 | (0x40 + i));
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <ST7032i_Putchar+0x170>)
 80034b0:	2240      	movs	r2, #64	; 0x40
 80034b2:	701a      	strb	r2, [r3, #0]
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 80034b4:	7818      	ldrb	r0, [r3, #0]
 80034b6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80034ba:	f7ff fde7 	bl	800308c <ST7032i_Command_Write>
      delay_us(27);
 80034be:	201b      	movs	r0, #27
    }
}
 80034c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          ST7032i_Data_Write(DDRAM_Data[1][i]);
        }

      DDRAM_Address = 0x40;
      ST7032i_Command_Write(0b10000000 | DDRAM_Address);
      delay_us(27);
 80034c4:	f7fc bec6 	b.w	8000254 <delay_us>
 80034c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034cc:	20000994 	.word	0x20000994
 80034d0:	20001631 	.word	0x20001631
 80034d4:	200015f1 	.word	0x200015f1
 80034d8:	2000009c 	.word	0x2000009c

080034dc <ST7032i_Print_String>:
  * @brief  Print string to LCD
  * @param  String: Array which contain string
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	4605      	mov	r5, r0
  uint8_t i = 0;
 80034e0:	2400      	movs	r4, #0
  while(String[i] != '\0')
 80034e2:	e004      	b.n	80034ee <ST7032i_Print_String+0x12>
    {
      ST7032i_Putchar(String[i]);
 80034e4:	b240      	sxtb	r0, r0
 80034e6:	f7ff ff39 	bl	800335c <ST7032i_Putchar>
      i++;
 80034ea:	3401      	adds	r4, #1
 80034ec:	b2e4      	uxtb	r4, r4
  * @retval None
  */
void ST7032i_Print_String(const int8_t String[])
{
  uint8_t i = 0;
  while(String[i] != '\0')
 80034ee:	5d28      	ldrb	r0, [r5, r4]
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d1f7      	bne.n	80034e4 <ST7032i_Print_String+0x8>
    {
      ST7032i_Putchar(String[i]);
      i++;
    }
}
 80034f4:	bd38      	pop	{r3, r4, r5, pc}

080034f6 <ST7032i_Icon_Clear>:
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 80034f6:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 80034f8:	4c10      	ldr	r4, [pc, #64]	; (800353c <ST7032i_Icon_Clear+0x46>)
 80034fa:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Clear icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Clear(uint8_t number)
{
 80034fe:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8003500:	7960      	ldrb	r0, [r4, #5]
 8003502:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003506:	f7ff fdc1 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 800350a:	201b      	movs	r0, #27
 800350c:	f7fc fea2 	bl	8000254 <delay_us>

  //icon data reset
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <ST7032i_Icon_Clear+0x4a>)
 8003512:	5d5b      	ldrb	r3, [r3, r5]
 8003514:	79a0      	ldrb	r0, [r4, #6]
 8003516:	ea23 0000 	bic.w	r0, r3, r0
 800351a:	f7ff ff13 	bl	8003344 <ST7032i_Data_Write>
  delay_us(27);
 800351e:	201b      	movs	r0, #27
 8003520:	f7fc fe98 	bl	8000254 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003524:	4b07      	ldr	r3, [pc, #28]	; (8003544 <ST7032i_Icon_Clear+0x4e>)
 8003526:	7818      	ldrb	r0, [r3, #0]
 8003528:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800352c:	f7ff fdae 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 8003530:	201b      	movs	r0, #27

}
 8003532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] & (~Icon_Table[number][1]));
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 8003536:	f7fc be8d 	b.w	8000254 <delay_us>
 800353a:	bf00      	nop
 800353c:	2000009c 	.word	0x2000009c
 8003540:	20001651 	.word	0x20001651
 8003544:	20000994 	.word	0x20000994

08003548 <ST7032i_Icon_Set>:
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 8003548:	b538      	push	{r3, r4, r5, lr}
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 800354a:	4c10      	ldr	r4, [pc, #64]	; (800358c <ST7032i_Icon_Set+0x44>)
 800354c:	eb04 0440 	add.w	r4, r4, r0, lsl #1
  * @brief  Put icon. value is to be 0 - 12
  * @param  numbet : icon number
  * @retval None
  */
void ST7032i_Icon_Set(uint8_t number)
{
 8003550:	4605      	mov	r5, r0
  //icon address set
  ST7032i_Command_Write(0b01000000 | Icon_Table[number][0] );
 8003552:	7960      	ldrb	r0, [r4, #5]
 8003554:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003558:	f7ff fd98 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 800355c:	201b      	movs	r0, #27
 800355e:	f7fc fe79 	bl	8000254 <delay_us>

  //icon data set
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <ST7032i_Icon_Set+0x48>)
 8003564:	5d58      	ldrb	r0, [r3, r5]
 8003566:	79a3      	ldrb	r3, [r4, #6]
 8003568:	4318      	orrs	r0, r3
 800356a:	f7ff feeb 	bl	8003344 <ST7032i_Data_Write>
  delay_us(27);
 800356e:	201b      	movs	r0, #27
 8003570:	f7fc fe70 	bl	8000254 <delay_us>

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <ST7032i_Icon_Set+0x4c>)
 8003576:	7818      	ldrb	r0, [r3, #0]
 8003578:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 800357c:	f7ff fd86 	bl	800308c <ST7032i_Command_Write>
  delay_us(27);
 8003580:	201b      	movs	r0, #27
}
 8003582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ST7032i_Data_Write(IconRAM[number] | Icon_Table[number][1]);
  delay_us(27);

  //restore DDRAM address to ac
  ST7032i_Command_Write(0b10000000 | DDRAM_Address);
  delay_us(27);
 8003586:	f7fc be65 	b.w	8000254 <delay_us>
 800358a:	bf00      	nop
 800358c:	2000009c 	.word	0x2000009c
 8003590:	20001651 	.word	0x20001651
 8003594:	20000994 	.word	0x20000994
 8003598:	08008d30 	.word	0x08008d30
 800359c:	20000000 	.word	0x20000000
 80035a0:	2000098c 	.word	0x2000098c
 80035a4:	2000098c 	.word	0x2000098c
 80035a8:	20001668 	.word	0x20001668

080035ac <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80035ac:	4770      	bx	lr

080035ae <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80035ae:	e7fe      	b.n	80035ae <HardFault_Handler>

080035b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80035b0:	e7fe      	b.n	80035b0 <MemManage_Handler>

080035b2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80035b2:	e7fe      	b.n	80035b2 <BusFault_Handler>

080035b4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80035b4:	e7fe      	b.n	80035b4 <UsageFault_Handler>

080035b6 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80035b6:	4770      	bx	lr

080035b8 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80035b8:	4770      	bx	lr

080035ba <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80035ba:	4770      	bx	lr

080035bc <SystemInit>:
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80035bc:	4b33      	ldr	r3, [pc, #204]	; (800368c <SystemInit+0xd0>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035c6:	2200      	movs	r2, #0
 80035c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80035d0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80035d4:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80035d6:	492e      	ldr	r1, [pc, #184]	; (8003690 <SystemInit+0xd4>)
 80035d8:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035da:	6819      	ldr	r1, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035dc:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035de:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80035e2:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80035e4:	60da      	str	r2, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80035e6:	9200      	str	r2, [sp, #0]
 80035e8:	9201      	str	r2, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80035f0:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80035f8:	9201      	str	r2, [sp, #4]
    StartUpCounter++;
 80035fa:	9a00      	ldr	r2, [sp, #0]
 80035fc:	3201      	adds	r2, #1
 80035fe:	9200      	str	r2, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003600:	9a01      	ldr	r2, [sp, #4]
 8003602:	b91a      	cbnz	r2, 800360c <SystemInit+0x50>
 8003604:	9a00      	ldr	r2, [sp, #0]
 8003606:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800360a:	d1f2      	bne.n	80035f2 <SystemInit+0x36>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800360c:	4b1f      	ldr	r3, [pc, #124]	; (800368c <SystemInit+0xd0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8003614:	bf18      	it	ne
 8003616:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003618:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 800361a:	9b01      	ldr	r3, [sp, #4]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d12e      	bne.n	800367e <SystemInit+0xc2>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <SystemInit+0xd0>)
 8003622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003624:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800362a:	4a1a      	ldr	r2, [pc, #104]	; (8003694 <SystemInit+0xd8>)
 800362c:	6811      	ldr	r1, [r2, #0]
 800362e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003632:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800363e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003646:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003648:	4a13      	ldr	r2, [pc, #76]	; (8003698 <SystemInit+0xdc>)
 800364a:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003652:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	4a0d      	ldr	r2, [pc, #52]	; (800368c <SystemInit+0xd0>)
 8003658:	0189      	lsls	r1, r1, #6
 800365a:	d5fb      	bpl.n	8003654 <SystemInit+0x98>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <SystemInit+0xe0>)
 800365e:	f240 6105 	movw	r1, #1541	; 0x605
 8003662:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003664:	6893      	ldr	r3, [r2, #8]
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800366c:	6893      	ldr	r3, [r2, #8]
 800366e:	f043 0302 	orr.w	r3, r3, #2
 8003672:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003674:	6893      	ldr	r3, [r2, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b08      	cmp	r3, #8
 800367c:	d1fa      	bne.n	8003674 <SystemInit+0xb8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <SystemInit+0xe4>)
 8003680:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003684:	609a      	str	r2, [r3, #8]
#endif
}
 8003686:	b002      	add	sp, #8
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800
 8003690:	24003010 	.word	0x24003010
 8003694:	40007000 	.word	0x40007000
 8003698:	07405419 	.word	0x07405419
 800369c:	40023c00 	.word	0x40023c00
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <SystemCoreClockUpdate+0x64>)
 80036a6:	4a19      	ldr	r2, [pc, #100]	; (800370c <SystemCoreClockUpdate+0x68>)
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	f001 010c 	and.w	r1, r1, #12

  switch (tmp)
 80036ae:	2904      	cmp	r1, #4
 80036b0:	d003      	beq.n	80036ba <SystemCoreClockUpdate+0x16>
 80036b2:	2908      	cmp	r1, #8
 80036b4:	d003      	beq.n	80036be <SystemCoreClockUpdate+0x1a>
 80036b6:	4b16      	ldr	r3, [pc, #88]	; (8003710 <SystemCoreClockUpdate+0x6c>)
 80036b8:	e019      	b.n	80036ee <SystemCoreClockUpdate+0x4a>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80036ba:	4b16      	ldr	r3, [pc, #88]	; (8003714 <SystemCoreClockUpdate+0x70>)
 80036bc:	e017      	b.n	80036ee <SystemCoreClockUpdate+0x4a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80036be:	6859      	ldr	r1, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c0:	685a      	ldr	r2, [r3, #4]
      
      if (pllsource != 0)
 80036c2:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	bf14      	ite	ne
 80036ca:	4b12      	ldrne	r3, [pc, #72]	; (8003714 <SystemCoreClockUpdate+0x70>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036cc:	4b10      	ldreq	r3, [pc, #64]	; (8003710 <SystemCoreClockUpdate+0x6c>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036d2:	fbb3 f3f2 	udiv	r3, r3, r2
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80036d6:	4a0c      	ldr	r2, [pc, #48]	; (8003708 <SystemCoreClockUpdate+0x64>)
 80036d8:	6852      	ldr	r2, [r2, #4]
 80036da:	f3c2 4201 	ubfx	r2, r2, #16, #2
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80036de:	f3c1 1188 	ubfx	r1, r1, #6, #9
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80036e2:	3201      	adds	r2, #1
 80036e4:	0052      	lsls	r2, r2, #1
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80036e6:	434b      	muls	r3, r1
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      SystemCoreClock = pllvco/pllp;
 80036e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <SystemCoreClockUpdate+0x68>)
 80036ee:	6013      	str	r3, [r2, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <SystemCoreClockUpdate+0x64>)
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <SystemCoreClockUpdate+0x68>)
 80036f6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80036fa:	189a      	adds	r2, r3, r2
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80036fc:	6819      	ldr	r1, [r3, #0]
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80036fe:	7912      	ldrb	r2, [r2, #4]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003700:	fa31 f202 	lsrs.w	r2, r1, r2
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	4770      	bx	lr
 8003708:	40023800 	.word	0x40023800
 800370c:	200000bc 	.word	0x200000bc
 8003710:	00f42400 	.word	0x00f42400
 8003714:	007a1200 	.word	0x007a1200

08003718 <cleanup_glue>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	460c      	mov	r4, r1
 800371c:	6809      	ldr	r1, [r1, #0]
 800371e:	4605      	mov	r5, r0
 8003720:	b109      	cbz	r1, 8003726 <cleanup_glue+0xe>
 8003722:	f7ff fff9 	bl	8003718 <cleanup_glue>
 8003726:	4628      	mov	r0, r5
 8003728:	4621      	mov	r1, r4
 800372a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800372e:	f002 ba23 	b.w	8005b78 <_free_r>
 8003732:	bf00      	nop

08003734 <_reclaim_reent>:
 8003734:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <_reclaim_reent+0x8c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4298      	cmp	r0, r3
 800373a:	b570      	push	{r4, r5, r6, lr}
 800373c:	4605      	mov	r5, r0
 800373e:	d032      	beq.n	80037a6 <_reclaim_reent+0x72>
 8003740:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003742:	b1ab      	cbz	r3, 8003770 <_reclaim_reent+0x3c>
 8003744:	2200      	movs	r2, #0
 8003746:	4616      	mov	r6, r2
 8003748:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800374c:	b909      	cbnz	r1, 8003752 <_reclaim_reent+0x1e>
 800374e:	e007      	b.n	8003760 <_reclaim_reent+0x2c>
 8003750:	4621      	mov	r1, r4
 8003752:	680c      	ldr	r4, [r1, #0]
 8003754:	4628      	mov	r0, r5
 8003756:	f002 fa0f 	bl	8005b78 <_free_r>
 800375a:	2c00      	cmp	r4, #0
 800375c:	d1f8      	bne.n	8003750 <_reclaim_reent+0x1c>
 800375e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003760:	3601      	adds	r6, #1
 8003762:	2e20      	cmp	r6, #32
 8003764:	4632      	mov	r2, r6
 8003766:	d1ef      	bne.n	8003748 <_reclaim_reent+0x14>
 8003768:	4628      	mov	r0, r5
 800376a:	4619      	mov	r1, r3
 800376c:	f002 fa04 	bl	8005b78 <_free_r>
 8003770:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003772:	b111      	cbz	r1, 800377a <_reclaim_reent+0x46>
 8003774:	4628      	mov	r0, r5
 8003776:	f002 f9ff 	bl	8005b78 <_free_r>
 800377a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 800377e:	b159      	cbz	r1, 8003798 <_reclaim_reent+0x64>
 8003780:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8003784:	42b1      	cmp	r1, r6
 8003786:	d101      	bne.n	800378c <_reclaim_reent+0x58>
 8003788:	e006      	b.n	8003798 <_reclaim_reent+0x64>
 800378a:	4621      	mov	r1, r4
 800378c:	680c      	ldr	r4, [r1, #0]
 800378e:	4628      	mov	r0, r5
 8003790:	f002 f9f2 	bl	8005b78 <_free_r>
 8003794:	42a6      	cmp	r6, r4
 8003796:	d1f8      	bne.n	800378a <_reclaim_reent+0x56>
 8003798:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800379a:	b111      	cbz	r1, 80037a2 <_reclaim_reent+0x6e>
 800379c:	4628      	mov	r0, r5
 800379e:	f002 f9eb 	bl	8005b78 <_free_r>
 80037a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80037a4:	b903      	cbnz	r3, 80037a8 <_reclaim_reent+0x74>
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80037aa:	4628      	mov	r0, r5
 80037ac:	4798      	blx	r3
 80037ae:	f8d5 12e0 	ldr.w	r1, [r5, #736]	; 0x2e0
 80037b2:	2900      	cmp	r1, #0
 80037b4:	d0f7      	beq.n	80037a6 <_reclaim_reent+0x72>
 80037b6:	4628      	mov	r0, r5
 80037b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80037bc:	e7ac      	b.n	8003718 <cleanup_glue>
 80037be:	bf00      	nop
 80037c0:	200000d0 	.word	0x200000d0

080037c4 <_wrapup_reent>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	4607      	mov	r7, r0
 80037c8:	b1b0      	cbz	r0, 80037f8 <_wrapup_reent+0x34>
 80037ca:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 80037ce:	b176      	cbz	r6, 80037ee <_wrapup_reent+0x2a>
 80037d0:	6875      	ldr	r5, [r6, #4]
 80037d2:	1e6c      	subs	r4, r5, #1
 80037d4:	d408      	bmi.n	80037e8 <_wrapup_reent+0x24>
 80037d6:	3502      	adds	r5, #2
 80037d8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80037dc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80037e0:	3c01      	subs	r4, #1
 80037e2:	4798      	blx	r3
 80037e4:	1c63      	adds	r3, r4, #1
 80037e6:	d1f9      	bne.n	80037dc <_wrapup_reent+0x18>
 80037e8:	6836      	ldr	r6, [r6, #0]
 80037ea:	2e00      	cmp	r6, #0
 80037ec:	d1f0      	bne.n	80037d0 <_wrapup_reent+0xc>
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	b10b      	cbz	r3, 80037f6 <_wrapup_reent+0x32>
 80037f2:	4638      	mov	r0, r7
 80037f4:	4798      	blx	r3
 80037f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f8:	4b01      	ldr	r3, [pc, #4]	; (8003800 <_wrapup_reent+0x3c>)
 80037fa:	681f      	ldr	r7, [r3, #0]
 80037fc:	e7e5      	b.n	80037ca <_wrapup_reent+0x6>
 80037fe:	bf00      	nop
 8003800:	200000d0 	.word	0x200000d0

08003804 <_sprintf_r>:
 8003804:	b40c      	push	{r2, r3}
 8003806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003808:	b09d      	sub	sp, #116	; 0x74
 800380a:	ac22      	add	r4, sp, #136	; 0x88
 800380c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003810:	f854 2b04 	ldr.w	r2, [r4], #4
 8003814:	9101      	str	r1, [sp, #4]
 8003816:	460e      	mov	r6, r1
 8003818:	4623      	mov	r3, r4
 800381a:	9503      	str	r5, [sp, #12]
 800381c:	9506      	str	r5, [sp, #24]
 800381e:	a901      	add	r1, sp, #4
 8003820:	f44f 7702 	mov.w	r7, #520	; 0x208
 8003824:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003828:	f8ad 7010 	strh.w	r7, [sp, #16]
 800382c:	9605      	str	r6, [sp, #20]
 800382e:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003832:	941b      	str	r4, [sp, #108]	; 0x6c
 8003834:	f000 f830 	bl	8003898 <_svfprintf_r>
 8003838:	9b01      	ldr	r3, [sp, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	b01d      	add	sp, #116	; 0x74
 8003840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003844:	b002      	add	sp, #8
 8003846:	4770      	bx	lr

08003848 <sprintf>:
 8003848:	b40e      	push	{r1, r2, r3}
 800384a:	b570      	push	{r4, r5, r6, lr}
 800384c:	b09d      	sub	sp, #116	; 0x74
 800384e:	ac21      	add	r4, sp, #132	; 0x84
 8003850:	f240 03d0 	movw	r3, #208	; 0xd0
 8003854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003858:	f854 2b04 	ldr.w	r2, [r4], #4
 800385c:	4606      	mov	r6, r0
 800385e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	9503      	str	r5, [sp, #12]
 8003866:	f44f 7302 	mov.w	r3, #520	; 0x208
 800386a:	f8ad 3010 	strh.w	r3, [sp, #16]
 800386e:	9506      	str	r5, [sp, #24]
 8003870:	4623      	mov	r3, r4
 8003872:	a901      	add	r1, sp, #4
 8003874:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003878:	9601      	str	r6, [sp, #4]
 800387a:	9605      	str	r6, [sp, #20]
 800387c:	f8ad 5012 	strh.w	r5, [sp, #18]
 8003880:	941b      	str	r4, [sp, #108]	; 0x6c
 8003882:	f000 f809 	bl	8003898 <_svfprintf_r>
 8003886:	9b01      	ldr	r3, [sp, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	b01d      	add	sp, #116	; 0x74
 800388e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003892:	b003      	add	sp, #12
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop

08003898 <_svfprintf_r>:
 8003898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800389c:	b0c5      	sub	sp, #276	; 0x114
 800389e:	468a      	mov	sl, r1
 80038a0:	4614      	mov	r4, r2
 80038a2:	930e      	str	r3, [sp, #56]	; 0x38
 80038a4:	900f      	str	r0, [sp, #60]	; 0x3c
 80038a6:	f002 fa5f 	bl	8005d68 <_localeconv_r>
 80038aa:	6800      	ldr	r0, [r0, #0]
 80038ac:	9017      	str	r0, [sp, #92]	; 0x5c
 80038ae:	f003 fb35 	bl	8006f1c <strlen>
 80038b2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80038b6:	901a      	str	r0, [sp, #104]	; 0x68
 80038b8:	2100      	movs	r1, #0
 80038ba:	2000      	movs	r0, #0
 80038bc:	061a      	lsls	r2, r3, #24
 80038be:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80038c2:	d504      	bpl.n	80038ce <_svfprintf_r+0x36>
 80038c4:	f8da 3010 	ldr.w	r3, [sl, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f001 8004 	beq.w	80048d6 <_svfprintf_r+0x103e>
 80038ce:	2300      	movs	r3, #0
 80038d0:	f10d 00e3 	add.w	r0, sp, #227	; 0xe3
 80038d4:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80038d8:	a91f      	add	r1, sp, #124	; 0x7c
 80038da:	9310      	str	r3, [sp, #64]	; 0x40
 80038dc:	933b      	str	r3, [sp, #236]	; 0xec
 80038de:	933a      	str	r3, [sp, #232]	; 0xe8
 80038e0:	931c      	str	r3, [sp, #112]	; 0x70
 80038e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80038e4:	930c      	str	r3, [sp, #48]	; 0x30
 80038e6:	ebc0 030b 	rsb	r3, r0, fp
 80038ea:	9007      	str	r0, [sp, #28]
 80038ec:	9139      	str	r1, [sp, #228]	; 0xe4
 80038ee:	9409      	str	r4, [sp, #36]	; 0x24
 80038f0:	460e      	mov	r6, r1
 80038f2:	931d      	str	r3, [sp, #116]	; 0x74
 80038f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038f6:	7803      	ldrb	r3, [r0, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf18      	it	ne
 80038fc:	2b25      	cmpne	r3, #37	; 0x25
 80038fe:	f000 80af 	beq.w	8003a60 <_svfprintf_r+0x1c8>
 8003902:	4607      	mov	r7, r0
 8003904:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8003908:	2b25      	cmp	r3, #37	; 0x25
 800390a:	bf18      	it	ne
 800390c:	2b00      	cmpne	r3, #0
 800390e:	d1f9      	bne.n	8003904 <_svfprintf_r+0x6c>
 8003910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003912:	ebb7 0801 	subs.w	r8, r7, r1
 8003916:	d00e      	beq.n	8003936 <_svfprintf_r+0x9e>
 8003918:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800391a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800391c:	6031      	str	r1, [r6, #0]
 800391e:	3401      	adds	r4, #1
 8003920:	4445      	add	r5, r8
 8003922:	2c07      	cmp	r4, #7
 8003924:	f8c6 8004 	str.w	r8, [r6, #4]
 8003928:	953b      	str	r5, [sp, #236]	; 0xec
 800392a:	943a      	str	r4, [sp, #232]	; 0xe8
 800392c:	dc7c      	bgt.n	8003a28 <_svfprintf_r+0x190>
 800392e:	3608      	adds	r6, #8
 8003930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003932:	4442      	add	r2, r8
 8003934:	920c      	str	r2, [sp, #48]	; 0x30
 8003936:	783b      	ldrb	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d07d      	beq.n	8003a38 <_svfprintf_r+0x1a0>
 800393c:	3701      	adds	r7, #1
 800393e:	9709      	str	r7, [sp, #36]	; 0x24
 8003940:	2300      	movs	r3, #0
 8003942:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003944:	930b      	str	r3, [sp, #44]	; 0x2c
 8003946:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 800394a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800394e:	9308      	str	r3, [sp, #32]
 8003950:	2720      	movs	r7, #32
 8003952:	252b      	movs	r5, #43	; 0x2b
 8003954:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003958:	f1a3 0220 	sub.w	r2, r3, #32
 800395c:	2a58      	cmp	r2, #88	; 0x58
 800395e:	f200 823b 	bhi.w	8003dd8 <_svfprintf_r+0x540>
 8003962:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003966:	024c      	.short	0x024c
 8003968:	02390239 	.word	0x02390239
 800396c:	02390254 	.word	0x02390254
 8003970:	02390239 	.word	0x02390239
 8003974:	02390239 	.word	0x02390239
 8003978:	02590239 	.word	0x02590239
 800397c:	0239007f 	.word	0x0239007f
 8003980:	0082005c 	.word	0x0082005c
 8003984:	009d0239 	.word	0x009d0239
 8003988:	00a200a2 	.word	0x00a200a2
 800398c:	00a200a2 	.word	0x00a200a2
 8003990:	00a200a2 	.word	0x00a200a2
 8003994:	00a200a2 	.word	0x00a200a2
 8003998:	023900a2 	.word	0x023900a2
 800399c:	02390239 	.word	0x02390239
 80039a0:	02390239 	.word	0x02390239
 80039a4:	02390239 	.word	0x02390239
 80039a8:	02390239 	.word	0x02390239
 80039ac:	00b50239 	.word	0x00b50239
 80039b0:	02390154 	.word	0x02390154
 80039b4:	02390154 	.word	0x02390154
 80039b8:	02390239 	.word	0x02390239
 80039bc:	018b0239 	.word	0x018b0239
 80039c0:	02390239 	.word	0x02390239
 80039c4:	02390190 	.word	0x02390190
 80039c8:	02390239 	.word	0x02390239
 80039cc:	02390239 	.word	0x02390239
 80039d0:	023901a7 	.word	0x023901a7
 80039d4:	01ba0239 	.word	0x01ba0239
 80039d8:	02390239 	.word	0x02390239
 80039dc:	02390239 	.word	0x02390239
 80039e0:	02390239 	.word	0x02390239
 80039e4:	02390239 	.word	0x02390239
 80039e8:	02390239 	.word	0x02390239
 80039ec:	02780293 	.word	0x02780293
 80039f0:	01540154 	.word	0x01540154
 80039f4:	028e0154 	.word	0x028e0154
 80039f8:	02390278 	.word	0x02390278
 80039fc:	02130239 	.word	0x02130239
 8003a00:	02180239 	.word	0x02180239
 8003a04:	02a50224 	.word	0x02a50224
 8003a08:	023901de 	.word	0x023901de
 8003a0c:	023901e3 	.word	0x023901e3
 8003a10:	02390264 	.word	0x02390264
 8003a14:	02c70239 	.word	0x02c70239
 8003a18:	4252      	negs	r2, r2
 8003a1a:	920b      	str	r2, [sp, #44]	; 0x2c
 8003a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8003a1e:	9b08      	ldr	r3, [sp, #32]
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	9308      	str	r3, [sp, #32]
 8003a26:	e795      	b.n	8003954 <_svfprintf_r+0xbc>
 8003a28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a2a:	4651      	mov	r1, sl
 8003a2c:	465a      	mov	r2, fp
 8003a2e:	f003 faa5 	bl	8006f7c <__ssprint_r>
 8003a32:	b940      	cbnz	r0, 8003a46 <_svfprintf_r+0x1ae>
 8003a34:	ae1f      	add	r6, sp, #124	; 0x7c
 8003a36:	e77b      	b.n	8003930 <_svfprintf_r+0x98>
 8003a38:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8003a3a:	b123      	cbz	r3, 8003a46 <_svfprintf_r+0x1ae>
 8003a3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8003a3e:	4651      	mov	r1, sl
 8003a40:	aa39      	add	r2, sp, #228	; 0xe4
 8003a42:	f003 fa9b 	bl	8006f7c <__ssprint_r>
 8003a46:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003a4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a50:	bf18      	it	ne
 8003a52:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003a56:	930c      	str	r3, [sp, #48]	; 0x30
 8003a58:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003a5a:	b045      	add	sp, #276	; 0x114
 8003a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a60:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003a62:	e768      	b.n	8003936 <_svfprintf_r+0x9e>
 8003a64:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003a68:	e774      	b.n	8003954 <_svfprintf_r+0xbc>
 8003a6a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a70:	f001 804c 	beq.w	8004b0c <_svfprintf_r+0x1274>
 8003a74:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a78:	2400      	movs	r4, #0
 8003a7a:	2a09      	cmp	r2, #9
 8003a7c:	f63f af6c 	bhi.w	8003958 <_svfprintf_r+0xc0>
 8003a80:	4601      	mov	r1, r0
 8003a82:	2400      	movs	r4, #0
 8003a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a88:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003a8c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8003a90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003a94:	2a09      	cmp	r2, #9
 8003a96:	4608      	mov	r0, r1
 8003a98:	d9f4      	bls.n	8003a84 <_svfprintf_r+0x1ec>
 8003a9a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8003a9e:	e75b      	b.n	8003958 <_svfprintf_r+0xc0>
 8003aa0:	9a08      	ldr	r2, [sp, #32]
 8003aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aa6:	9208      	str	r2, [sp, #32]
 8003aa8:	e754      	b.n	8003954 <_svfprintf_r+0xbc>
 8003aaa:	4601      	mov	r1, r0
 8003aac:	2200      	movs	r2, #0
 8003aae:	46b4      	mov	ip, r6
 8003ab0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8003ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ab8:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003abc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003ac0:	2e09      	cmp	r6, #9
 8003ac2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003ac6:	4608      	mov	r0, r1
 8003ac8:	d9f2      	bls.n	8003ab0 <_svfprintf_r+0x218>
 8003aca:	4666      	mov	r6, ip
 8003acc:	920b      	str	r2, [sp, #44]	; 0x2c
 8003ace:	e743      	b.n	8003958 <_svfprintf_r+0xc0>
 8003ad0:	9315      	str	r3, [sp, #84]	; 0x54
 8003ad2:	9b08      	ldr	r3, [sp, #32]
 8003ad4:	9009      	str	r0, [sp, #36]	; 0x24
 8003ad6:	f043 0310 	orr.w	r3, r3, #16
 8003ada:	9308      	str	r3, [sp, #32]
 8003adc:	9808      	ldr	r0, [sp, #32]
 8003ade:	06c3      	lsls	r3, r0, #27
 8003ae0:	f100 81bf 	bmi.w	8003e62 <_svfprintf_r+0x5ca>
 8003ae4:	9a08      	ldr	r2, [sp, #32]
 8003ae6:	0655      	lsls	r5, r2, #25
 8003ae8:	f140 81bb 	bpl.w	8003e62 <_svfprintf_r+0x5ca>
 8003aec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003aee:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003af2:	3004      	adds	r0, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	900e      	str	r0, [sp, #56]	; 0x38
 8003af8:	f2c0 81ba 	blt.w	8003e70 <_svfprintf_r+0x5d8>
 8003afc:	bf0c      	ite	eq
 8003afe:	2100      	moveq	r1, #0
 8003b00:	2101      	movne	r1, #1
 8003b02:	2201      	movs	r2, #1
 8003b04:	2c00      	cmp	r4, #0
 8003b06:	bfa2      	ittt	ge
 8003b08:	9808      	ldrge	r0, [sp, #32]
 8003b0a:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8003b0e:	9008      	strge	r0, [sp, #32]
 8003b10:	2c00      	cmp	r4, #0
 8003b12:	bf18      	it	ne
 8003b14:	f041 0101 	orrne.w	r1, r1, #1
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	f000 8323 	beq.w	8004164 <_svfprintf_r+0x8cc>
 8003b1e:	2a01      	cmp	r2, #1
 8003b20:	f000 845f 	beq.w	80043e2 <_svfprintf_r+0xb4a>
 8003b24:	2a02      	cmp	r2, #2
 8003b26:	bf18      	it	ne
 8003b28:	465a      	movne	r2, fp
 8003b2a:	d102      	bne.n	8003b32 <_svfprintf_r+0x29a>
 8003b2c:	f000 bc48 	b.w	80043c0 <_svfprintf_r+0xb28>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f003 0107 	and.w	r1, r3, #7
 8003b36:	3130      	adds	r1, #48	; 0x30
 8003b38:	1e50      	subs	r0, r2, #1
 8003b3a:	08db      	lsrs	r3, r3, #3
 8003b3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003b40:	d1f6      	bne.n	8003b30 <_svfprintf_r+0x298>
 8003b42:	9b08      	ldr	r3, [sp, #32]
 8003b44:	9011      	str	r0, [sp, #68]	; 0x44
 8003b46:	07dd      	lsls	r5, r3, #31
 8003b48:	d507      	bpl.n	8003b5a <_svfprintf_r+0x2c2>
 8003b4a:	2930      	cmp	r1, #48	; 0x30
 8003b4c:	f000 8733 	beq.w	80049b6 <_svfprintf_r+0x111e>
 8003b50:	1e90      	subs	r0, r2, #2
 8003b52:	2330      	movs	r3, #48	; 0x30
 8003b54:	9011      	str	r0, [sp, #68]	; 0x44
 8003b56:	f802 3c02 	strb.w	r3, [r2, #-2]
 8003b5a:	ebc0 030b 	rsb	r3, r0, fp
 8003b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8003b60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b62:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003b66:	9412      	str	r4, [sp, #72]	; 0x48
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	bfb8      	it	lt
 8003b6c:	4623      	movlt	r3, r4
 8003b6e:	2000      	movs	r0, #0
 8003b70:	930a      	str	r3, [sp, #40]	; 0x28
 8003b72:	9016      	str	r0, [sp, #88]	; 0x58
 8003b74:	b111      	cbz	r1, 8003b7c <_svfprintf_r+0x2e4>
 8003b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b78:	3301      	adds	r3, #1
 8003b7a:	930a      	str	r3, [sp, #40]	; 0x28
 8003b7c:	9b08      	ldr	r3, [sp, #32]
 8003b7e:	f013 0302 	ands.w	r3, r3, #2
 8003b82:	9313      	str	r3, [sp, #76]	; 0x4c
 8003b84:	d002      	beq.n	8003b8c <_svfprintf_r+0x2f4>
 8003b86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003b88:	3002      	adds	r0, #2
 8003b8a:	900a      	str	r0, [sp, #40]	; 0x28
 8003b8c:	9b08      	ldr	r3, [sp, #32]
 8003b8e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8003b92:	9314      	str	r3, [sp, #80]	; 0x50
 8003b94:	f040 81bb 	bne.w	8003f0e <_svfprintf_r+0x676>
 8003b98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003b9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003b9c:	1a47      	subs	r7, r0, r1
 8003b9e:	2f00      	cmp	r7, #0
 8003ba0:	f340 81b5 	ble.w	8003f0e <_svfprintf_r+0x676>
 8003ba4:	2f10      	cmp	r7, #16
 8003ba6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003ba8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003baa:	f8df 8344 	ldr.w	r8, [pc, #836]	; 8003ef0 <_svfprintf_r+0x658>
 8003bae:	dd22      	ble.n	8003bf6 <_svfprintf_r+0x35e>
 8003bb0:	4623      	mov	r3, r4
 8003bb2:	f04f 0910 	mov.w	r9, #16
 8003bb6:	4644      	mov	r4, r8
 8003bb8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003bbc:	e003      	b.n	8003bc6 <_svfprintf_r+0x32e>
 8003bbe:	3f10      	subs	r7, #16
 8003bc0:	3608      	adds	r6, #8
 8003bc2:	2f10      	cmp	r7, #16
 8003bc4:	dd15      	ble.n	8003bf2 <_svfprintf_r+0x35a>
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	3510      	adds	r5, #16
 8003bca:	2b07      	cmp	r3, #7
 8003bcc:	e886 0210 	stmia.w	r6, {r4, r9}
 8003bd0:	953b      	str	r5, [sp, #236]	; 0xec
 8003bd2:	933a      	str	r3, [sp, #232]	; 0xe8
 8003bd4:	ddf3      	ble.n	8003bbe <_svfprintf_r+0x326>
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	4651      	mov	r1, sl
 8003bda:	465a      	mov	r2, fp
 8003bdc:	f003 f9ce 	bl	8006f7c <__ssprint_r>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	f47f af30 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8003be6:	3f10      	subs	r7, #16
 8003be8:	2f10      	cmp	r7, #16
 8003bea:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003bec:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003bee:	ae1f      	add	r6, sp, #124	; 0x7c
 8003bf0:	dce9      	bgt.n	8003bc6 <_svfprintf_r+0x32e>
 8003bf2:	46a0      	mov	r8, r4
 8003bf4:	461c      	mov	r4, r3
 8003bf6:	3401      	adds	r4, #1
 8003bf8:	19ed      	adds	r5, r5, r7
 8003bfa:	2c07      	cmp	r4, #7
 8003bfc:	f8c6 8000 	str.w	r8, [r6]
 8003c00:	6077      	str	r7, [r6, #4]
 8003c02:	953b      	str	r5, [sp, #236]	; 0xec
 8003c04:	943a      	str	r4, [sp, #232]	; 0xe8
 8003c06:	f300 8414 	bgt.w	8004432 <_svfprintf_r+0xb9a>
 8003c0a:	3608      	adds	r6, #8
 8003c0c:	e180      	b.n	8003f10 <_svfprintf_r+0x678>
 8003c0e:	9009      	str	r0, [sp, #36]	; 0x24
 8003c10:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c12:	9315      	str	r3, [sp, #84]	; 0x54
 8003c14:	1dc3      	adds	r3, r0, #7
 8003c16:	f023 0307 	bic.w	r3, r3, #7
 8003c1a:	f103 0108 	add.w	r1, r3, #8
 8003c1e:	910e      	str	r1, [sp, #56]	; 0x38
 8003c20:	f8d3 8000 	ldr.w	r8, [r3]
 8003c24:	685d      	ldr	r5, [r3, #4]
 8003c26:	4642      	mov	r2, r8
 8003c28:	462b      	mov	r3, r5
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	4640      	mov	r0, r8
 8003c2e:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8003c32:	f003 f83b 	bl	8006cac <__fpclassifyd>
 8003c36:	2801      	cmp	r0, #1
 8003c38:	4629      	mov	r1, r5
 8003c3a:	4640      	mov	r0, r8
 8003c3c:	f040 84d0 	bne.w	80045e0 <_svfprintf_r+0xd48>
 8003c40:	2200      	movs	r2, #0
 8003c42:	2300      	movs	r3, #0
 8003c44:	f004 fd62 	bl	800870c <__aeabi_dcmplt>
 8003c48:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8003c4c:	b110      	cbz	r0, 8003c54 <_svfprintf_r+0x3bc>
 8003c4e:	212d      	movs	r1, #45	; 0x2d
 8003c50:	f88d 110f 	strb.w	r1, [sp, #271]	; 0x10f
 8003c54:	2303      	movs	r3, #3
 8003c56:	930a      	str	r3, [sp, #40]	; 0x28
 8003c58:	2300      	movs	r3, #0
 8003c5a:	9312      	str	r3, [sp, #72]	; 0x48
 8003c5c:	4aa0      	ldr	r2, [pc, #640]	; (8003ee0 <_svfprintf_r+0x648>)
 8003c5e:	4ba1      	ldr	r3, [pc, #644]	; (8003ee4 <_svfprintf_r+0x64c>)
 8003c60:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003c62:	2847      	cmp	r0, #71	; 0x47
 8003c64:	bfd8      	it	le
 8003c66:	461a      	movle	r2, r3
 8003c68:	9211      	str	r2, [sp, #68]	; 0x44
 8003c6a:	9a08      	ldr	r2, [sp, #32]
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c72:	930d      	str	r3, [sp, #52]	; 0x34
 8003c74:	2300      	movs	r3, #0
 8003c76:	9208      	str	r2, [sp, #32]
 8003c78:	9316      	str	r3, [sp, #88]	; 0x58
 8003c7a:	e77b      	b.n	8003b74 <_svfprintf_r+0x2dc>
 8003c7c:	9b08      	ldr	r3, [sp, #32]
 8003c7e:	f043 0308 	orr.w	r3, r3, #8
 8003c82:	9308      	str	r3, [sp, #32]
 8003c84:	e666      	b.n	8003954 <_svfprintf_r+0xbc>
 8003c86:	9908      	ldr	r1, [sp, #32]
 8003c88:	9009      	str	r0, [sp, #36]	; 0x24
 8003c8a:	f041 0110 	orr.w	r1, r1, #16
 8003c8e:	9108      	str	r1, [sp, #32]
 8003c90:	9a08      	ldr	r2, [sp, #32]
 8003c92:	9315      	str	r3, [sp, #84]	; 0x54
 8003c94:	f012 0110 	ands.w	r1, r2, #16
 8003c98:	f000 8090 	beq.w	8003dbc <_svfprintf_r+0x524>
 8003c9c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003c9e:	6803      	ldr	r3, [r0, #0]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	1a99      	subs	r1, r3, r2
 8003ca4:	bf18      	it	ne
 8003ca6:	2101      	movne	r1, #1
 8003ca8:	3004      	adds	r0, #4
 8003caa:	900e      	str	r0, [sp, #56]	; 0x38
 8003cac:	2000      	movs	r0, #0
 8003cae:	f88d 010f 	strb.w	r0, [sp, #271]	; 0x10f
 8003cb2:	e727      	b.n	8003b04 <_svfprintf_r+0x26c>
 8003cb4:	9908      	ldr	r1, [sp, #32]
 8003cb6:	9009      	str	r0, [sp, #36]	; 0x24
 8003cb8:	f041 0110 	orr.w	r1, r1, #16
 8003cbc:	9108      	str	r1, [sp, #32]
 8003cbe:	9a08      	ldr	r2, [sp, #32]
 8003cc0:	9315      	str	r3, [sp, #84]	; 0x54
 8003cc2:	06d0      	lsls	r0, r2, #27
 8003cc4:	f140 80b9 	bpl.w	8003e3a <_svfprintf_r+0x5a2>
 8003cc8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003cca:	6803      	ldr	r3, [r0, #0]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	1c19      	adds	r1, r3, #0
 8003cd0:	bf18      	it	ne
 8003cd2:	2101      	movne	r1, #1
 8003cd4:	3004      	adds	r0, #4
 8003cd6:	900e      	str	r0, [sp, #56]	; 0x38
 8003cd8:	e7e8      	b.n	8003cac <_svfprintf_r+0x414>
 8003cda:	4a83      	ldr	r2, [pc, #524]	; (8003ee8 <_svfprintf_r+0x650>)
 8003cdc:	9315      	str	r3, [sp, #84]	; 0x54
 8003cde:	9b08      	ldr	r3, [sp, #32]
 8003ce0:	921c      	str	r2, [sp, #112]	; 0x70
 8003ce2:	06da      	lsls	r2, r3, #27
 8003ce4:	9009      	str	r0, [sp, #36]	; 0x24
 8003ce6:	f100 810d 	bmi.w	8003f04 <_svfprintf_r+0x66c>
 8003cea:	9908      	ldr	r1, [sp, #32]
 8003cec:	064b      	lsls	r3, r1, #25
 8003cee:	f140 8109 	bpl.w	8003f04 <_svfprintf_r+0x66c>
 8003cf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cf4:	8813      	ldrh	r3, [r2, #0]
 8003cf6:	3204      	adds	r2, #4
 8003cf8:	920e      	str	r2, [sp, #56]	; 0x38
 8003cfa:	1c19      	adds	r1, r3, #0
 8003cfc:	9a08      	ldr	r2, [sp, #32]
 8003cfe:	bf18      	it	ne
 8003d00:	2101      	movne	r1, #1
 8003d02:	420a      	tst	r2, r1
 8003d04:	f000 83ca 	beq.w	800449c <_svfprintf_r+0xc04>
 8003d08:	9908      	ldr	r1, [sp, #32]
 8003d0a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8003d0c:	2230      	movs	r2, #48	; 0x30
 8003d0e:	f041 0102 	orr.w	r1, r1, #2
 8003d12:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003d16:	9108      	str	r1, [sp, #32]
 8003d18:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	2202      	movs	r2, #2
 8003d20:	e7c4      	b.n	8003cac <_svfprintf_r+0x414>
 8003d22:	9b08      	ldr	r3, [sp, #32]
 8003d24:	f043 0310 	orr.w	r3, r3, #16
 8003d28:	9308      	str	r3, [sp, #32]
 8003d2a:	e613      	b.n	8003954 <_svfprintf_r+0xbc>
 8003d2c:	2500      	movs	r5, #0
 8003d2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d30:	f88d 510f 	strb.w	r5, [sp, #271]	; 0x10f
 8003d34:	9315      	str	r3, [sp, #84]	; 0x54
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d3a:	9009      	str	r0, [sp, #36]	; 0x24
 8003d3c:	9211      	str	r2, [sp, #68]	; 0x44
 8003d3e:	1d1f      	adds	r7, r3, #4
 8003d40:	2a00      	cmp	r2, #0
 8003d42:	f000 864b 	beq.w	80049dc <_svfprintf_r+0x1144>
 8003d46:	2c00      	cmp	r4, #0
 8003d48:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003d4a:	f2c0 8602 	blt.w	8004952 <_svfprintf_r+0x10ba>
 8003d4e:	4629      	mov	r1, r5
 8003d50:	4622      	mov	r2, r4
 8003d52:	f002 fad1 	bl	80062f8 <memchr>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	f000 866f 	beq.w	8004a3a <_svfprintf_r+0x11a2>
 8003d5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d5e:	9512      	str	r5, [sp, #72]	; 0x48
 8003d60:	1ac0      	subs	r0, r0, r3
 8003d62:	42a0      	cmp	r0, r4
 8003d64:	900d      	str	r0, [sp, #52]	; 0x34
 8003d66:	bfd1      	iteee	le
 8003d68:	9b0d      	ldrle	r3, [sp, #52]	; 0x34
 8003d6a:	f89d 110f 	ldrbgt.w	r1, [sp, #271]	; 0x10f
 8003d6e:	970e      	strgt	r7, [sp, #56]	; 0x38
 8003d70:	ea24 70e4 	bicgt.w	r0, r4, r4, asr #31
 8003d74:	bfd3      	iteet	le
 8003d76:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8003d7a:	900a      	strgt	r0, [sp, #40]	; 0x28
 8003d7c:	940d      	strgt	r4, [sp, #52]	; 0x34
 8003d7e:	930a      	strle	r3, [sp, #40]	; 0x28
 8003d80:	bfdc      	itt	le
 8003d82:	f89d 110f 	ldrble.w	r1, [sp, #271]	; 0x10f
 8003d86:	970e      	strle	r7, [sp, #56]	; 0x38
 8003d88:	9516      	str	r5, [sp, #88]	; 0x58
 8003d8a:	e6f3      	b.n	8003b74 <_svfprintf_r+0x2dc>
 8003d8c:	9a08      	ldr	r2, [sp, #32]
 8003d8e:	f042 0210 	orr.w	r2, r2, #16
 8003d92:	9208      	str	r2, [sp, #32]
 8003d94:	e5de      	b.n	8003954 <_svfprintf_r+0xbc>
 8003d96:	9009      	str	r0, [sp, #36]	; 0x24
 8003d98:	9808      	ldr	r0, [sp, #32]
 8003d9a:	06c3      	lsls	r3, r0, #27
 8003d9c:	f140 843f 	bpl.w	800461e <_svfprintf_r+0xd86>
 8003da0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003da2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003da4:	680b      	ldr	r3, [r1, #0]
 8003da6:	3104      	adds	r1, #4
 8003da8:	910e      	str	r1, [sp, #56]	; 0x38
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e5a2      	b.n	80038f4 <_svfprintf_r+0x5c>
 8003dae:	9a08      	ldr	r2, [sp, #32]
 8003db0:	9009      	str	r0, [sp, #36]	; 0x24
 8003db2:	f012 0110 	ands.w	r1, r2, #16
 8003db6:	9315      	str	r3, [sp, #84]	; 0x54
 8003db8:	f47f af70 	bne.w	8003c9c <_svfprintf_r+0x404>
 8003dbc:	9b08      	ldr	r3, [sp, #32]
 8003dbe:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8003dc2:	f000 8437 	beq.w	8004634 <_svfprintf_r+0xd9c>
 8003dc6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003dc8:	8803      	ldrh	r3, [r0, #0]
 8003dca:	460a      	mov	r2, r1
 8003dcc:	1c19      	adds	r1, r3, #0
 8003dce:	bf18      	it	ne
 8003dd0:	2101      	movne	r1, #1
 8003dd2:	3004      	adds	r0, #4
 8003dd4:	900e      	str	r0, [sp, #56]	; 0x38
 8003dd6:	e769      	b.n	8003cac <_svfprintf_r+0x414>
 8003dd8:	9009      	str	r0, [sp, #36]	; 0x24
 8003dda:	9315      	str	r3, [sp, #84]	; 0x54
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f43f ae2b 	beq.w	8003a38 <_svfprintf_r+0x1a0>
 8003de2:	2101      	movs	r1, #1
 8003de4:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003de8:	aa2f      	add	r2, sp, #188	; 0xbc
 8003dea:	2300      	movs	r3, #0
 8003dec:	910a      	str	r1, [sp, #40]	; 0x28
 8003dee:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 8003df2:	910d      	str	r1, [sp, #52]	; 0x34
 8003df4:	9211      	str	r2, [sp, #68]	; 0x44
 8003df6:	2300      	movs	r3, #0
 8003df8:	9312      	str	r3, [sp, #72]	; 0x48
 8003dfa:	9316      	str	r3, [sp, #88]	; 0x58
 8003dfc:	e6be      	b.n	8003b7c <_svfprintf_r+0x2e4>
 8003dfe:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f47f ada6 	bne.w	8003954 <_svfprintf_r+0xbc>
 8003e08:	f88d 710f 	strb.w	r7, [sp, #271]	; 0x10f
 8003e0c:	e5a2      	b.n	8003954 <_svfprintf_r+0xbc>
 8003e0e:	9a08      	ldr	r2, [sp, #32]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	9208      	str	r2, [sp, #32]
 8003e16:	e59d      	b.n	8003954 <_svfprintf_r+0xbc>
 8003e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e22:	1d0b      	adds	r3, r1, #4
 8003e24:	2a00      	cmp	r2, #0
 8003e26:	f6ff adf7 	blt.w	8003a18 <_svfprintf_r+0x180>
 8003e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8003e2c:	e592      	b.n	8003954 <_svfprintf_r+0xbc>
 8003e2e:	9a08      	ldr	r2, [sp, #32]
 8003e30:	9009      	str	r0, [sp, #36]	; 0x24
 8003e32:	06d0      	lsls	r0, r2, #27
 8003e34:	9315      	str	r3, [sp, #84]	; 0x54
 8003e36:	f53f af47 	bmi.w	8003cc8 <_svfprintf_r+0x430>
 8003e3a:	9908      	ldr	r1, [sp, #32]
 8003e3c:	0649      	lsls	r1, r1, #25
 8003e3e:	f140 83ea 	bpl.w	8004616 <_svfprintf_r+0xd7e>
 8003e42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e44:	8813      	ldrh	r3, [r2, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003e4a:	1c19      	adds	r1, r3, #0
 8003e4c:	bf18      	it	ne
 8003e4e:	2101      	movne	r1, #1
 8003e50:	3004      	adds	r0, #4
 8003e52:	900e      	str	r0, [sp, #56]	; 0x38
 8003e54:	e72a      	b.n	8003cac <_svfprintf_r+0x414>
 8003e56:	9009      	str	r0, [sp, #36]	; 0x24
 8003e58:	9808      	ldr	r0, [sp, #32]
 8003e5a:	9315      	str	r3, [sp, #84]	; 0x54
 8003e5c:	06c3      	lsls	r3, r0, #27
 8003e5e:	f57f ae41 	bpl.w	8003ae4 <_svfprintf_r+0x24c>
 8003e62:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003e64:	680b      	ldr	r3, [r1, #0]
 8003e66:	3104      	adds	r1, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	910e      	str	r1, [sp, #56]	; 0x38
 8003e6c:	f6bf ae46 	bge.w	8003afc <_svfprintf_r+0x264>
 8003e70:	425b      	negs	r3, r3
 8003e72:	222d      	movs	r2, #45	; 0x2d
 8003e74:	1c19      	adds	r1, r3, #0
 8003e76:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003e7a:	bf18      	it	ne
 8003e7c:	2101      	movne	r1, #1
 8003e7e:	2201      	movs	r2, #1
 8003e80:	e640      	b.n	8003b04 <_svfprintf_r+0x26c>
 8003e82:	9908      	ldr	r1, [sp, #32]
 8003e84:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003e88:	9108      	str	r1, [sp, #32]
 8003e8a:	e563      	b.n	8003954 <_svfprintf_r+0xbc>
 8003e8c:	9315      	str	r3, [sp, #84]	; 0x54
 8003e8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	9009      	str	r0, [sp, #36]	; 0x24
 8003e96:	2200      	movs	r2, #0
 8003e98:	2001      	movs	r0, #1
 8003e9a:	f88d 210f 	strb.w	r2, [sp, #271]	; 0x10f
 8003e9e:	3104      	adds	r1, #4
 8003ea0:	aa2f      	add	r2, sp, #188	; 0xbc
 8003ea2:	900a      	str	r0, [sp, #40]	; 0x28
 8003ea4:	910e      	str	r1, [sp, #56]	; 0x38
 8003ea6:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
 8003eaa:	900d      	str	r0, [sp, #52]	; 0x34
 8003eac:	9211      	str	r2, [sp, #68]	; 0x44
 8003eae:	e7a2      	b.n	8003df6 <_svfprintf_r+0x55e>
 8003eb0:	490e      	ldr	r1, [pc, #56]	; (8003eec <_svfprintf_r+0x654>)
 8003eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003eb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003eb6:	911c      	str	r1, [sp, #112]	; 0x70
 8003eb8:	9908      	ldr	r1, [sp, #32]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	9009      	str	r0, [sp, #36]	; 0x24
 8003ebe:	3204      	adds	r2, #4
 8003ec0:	f041 0102 	orr.w	r1, r1, #2
 8003ec4:	2078      	movs	r0, #120	; 0x78
 8003ec6:	920e      	str	r2, [sp, #56]	; 0x38
 8003ec8:	9108      	str	r1, [sp, #32]
 8003eca:	2230      	movs	r2, #48	; 0x30
 8003ecc:	1c19      	adds	r1, r3, #0
 8003ece:	f88d 210c 	strb.w	r2, [sp, #268]	; 0x10c
 8003ed2:	bf18      	it	ne
 8003ed4:	2101      	movne	r1, #1
 8003ed6:	f88d 010d 	strb.w	r0, [sp, #269]	; 0x10d
 8003eda:	2202      	movs	r2, #2
 8003edc:	9015      	str	r0, [sp, #84]	; 0x54
 8003ede:	e6e5      	b.n	8003cac <_svfprintf_r+0x414>
 8003ee0:	08008cd0 	.word	0x08008cd0
 8003ee4:	08008ccc 	.word	0x08008ccc
 8003ee8:	08008cdc 	.word	0x08008cdc
 8003eec:	08008cf0 	.word	0x08008cf0
 8003ef0:	08008b0c 	.word	0x08008b0c
 8003ef4:	9315      	str	r3, [sp, #84]	; 0x54
 8003ef6:	9b08      	ldr	r3, [sp, #32]
 8003ef8:	49a4      	ldr	r1, [pc, #656]	; (800418c <_svfprintf_r+0x8f4>)
 8003efa:	9009      	str	r0, [sp, #36]	; 0x24
 8003efc:	06da      	lsls	r2, r3, #27
 8003efe:	911c      	str	r1, [sp, #112]	; 0x70
 8003f00:	f57f aef3 	bpl.w	8003cea <_svfprintf_r+0x452>
 8003f04:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003f06:	6803      	ldr	r3, [r0, #0]
 8003f08:	3004      	adds	r0, #4
 8003f0a:	900e      	str	r0, [sp, #56]	; 0x38
 8003f0c:	e6f5      	b.n	8003cfa <_svfprintf_r+0x462>
 8003f0e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003f10:	f89d 310f 	ldrb.w	r3, [sp, #271]	; 0x10f
 8003f14:	b16b      	cbz	r3, 8003f32 <_svfprintf_r+0x69a>
 8003f16:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f18:	f20d 130f 	addw	r3, sp, #271	; 0x10f
 8003f1c:	3401      	adds	r4, #1
 8003f1e:	6033      	str	r3, [r6, #0]
 8003f20:	3501      	adds	r5, #1
 8003f22:	2301      	movs	r3, #1
 8003f24:	2c07      	cmp	r4, #7
 8003f26:	6073      	str	r3, [r6, #4]
 8003f28:	953b      	str	r5, [sp, #236]	; 0xec
 8003f2a:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f2c:	f300 81f5 	bgt.w	800431a <_svfprintf_r+0xa82>
 8003f30:	3608      	adds	r6, #8
 8003f32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003f34:	b163      	cbz	r3, 8003f50 <_svfprintf_r+0x6b8>
 8003f36:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f38:	ab43      	add	r3, sp, #268	; 0x10c
 8003f3a:	3401      	adds	r4, #1
 8003f3c:	6033      	str	r3, [r6, #0]
 8003f3e:	3502      	adds	r5, #2
 8003f40:	2302      	movs	r3, #2
 8003f42:	2c07      	cmp	r4, #7
 8003f44:	6073      	str	r3, [r6, #4]
 8003f46:	953b      	str	r5, [sp, #236]	; 0xec
 8003f48:	943a      	str	r4, [sp, #232]	; 0xe8
 8003f4a:	f300 81db 	bgt.w	8004304 <_svfprintf_r+0xa6c>
 8003f4e:	3608      	adds	r6, #8
 8003f50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f52:	2b80      	cmp	r3, #128	; 0x80
 8003f54:	f000 8122 	beq.w	800419c <_svfprintf_r+0x904>
 8003f58:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f5c:	1ac7      	subs	r7, r0, r3
 8003f5e:	2f00      	cmp	r7, #0
 8003f60:	dd32      	ble.n	8003fc8 <_svfprintf_r+0x730>
 8003f62:	2f10      	cmp	r7, #16
 8003f64:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003f66:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8004194 <_svfprintf_r+0x8fc>
 8003f6a:	dd22      	ble.n	8003fb2 <_svfprintf_r+0x71a>
 8003f6c:	4623      	mov	r3, r4
 8003f6e:	f04f 0910 	mov.w	r9, #16
 8003f72:	4644      	mov	r4, r8
 8003f74:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8003f78:	e003      	b.n	8003f82 <_svfprintf_r+0x6ea>
 8003f7a:	3f10      	subs	r7, #16
 8003f7c:	3608      	adds	r6, #8
 8003f7e:	2f10      	cmp	r7, #16
 8003f80:	dd15      	ble.n	8003fae <_svfprintf_r+0x716>
 8003f82:	3301      	adds	r3, #1
 8003f84:	3510      	adds	r5, #16
 8003f86:	2b07      	cmp	r3, #7
 8003f88:	e886 0210 	stmia.w	r6, {r4, r9}
 8003f8c:	953b      	str	r5, [sp, #236]	; 0xec
 8003f8e:	933a      	str	r3, [sp, #232]	; 0xe8
 8003f90:	ddf3      	ble.n	8003f7a <_svfprintf_r+0x6e2>
 8003f92:	4640      	mov	r0, r8
 8003f94:	4651      	mov	r1, sl
 8003f96:	465a      	mov	r2, fp
 8003f98:	f002 fff0 	bl	8006f7c <__ssprint_r>
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	f47f ad52 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8003fa2:	3f10      	subs	r7, #16
 8003fa4:	2f10      	cmp	r7, #16
 8003fa6:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8003fa8:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8003faa:	ae1f      	add	r6, sp, #124	; 0x7c
 8003fac:	dce9      	bgt.n	8003f82 <_svfprintf_r+0x6ea>
 8003fae:	46a0      	mov	r8, r4
 8003fb0:	461c      	mov	r4, r3
 8003fb2:	3401      	adds	r4, #1
 8003fb4:	19ed      	adds	r5, r5, r7
 8003fb6:	2c07      	cmp	r4, #7
 8003fb8:	f8c6 8000 	str.w	r8, [r6]
 8003fbc:	6077      	str	r7, [r6, #4]
 8003fbe:	953b      	str	r5, [sp, #236]	; 0xec
 8003fc0:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fc2:	f300 8194 	bgt.w	80042ee <_svfprintf_r+0xa56>
 8003fc6:	3608      	adds	r6, #8
 8003fc8:	9908      	ldr	r1, [sp, #32]
 8003fca:	05ca      	lsls	r2, r1, #23
 8003fcc:	d472      	bmi.n	80040b4 <_svfprintf_r+0x81c>
 8003fce:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003fd4:	6073      	str	r3, [r6, #4]
 8003fd6:	3401      	adds	r4, #1
 8003fd8:	18ed      	adds	r5, r5, r3
 8003fda:	2c07      	cmp	r4, #7
 8003fdc:	6032      	str	r2, [r6, #0]
 8003fde:	953b      	str	r5, [sp, #236]	; 0xec
 8003fe0:	943a      	str	r4, [sp, #232]	; 0xe8
 8003fe2:	dc5c      	bgt.n	800409e <_svfprintf_r+0x806>
 8003fe4:	3608      	adds	r6, #8
 8003fe6:	9908      	ldr	r1, [sp, #32]
 8003fe8:	074b      	lsls	r3, r1, #29
 8003fea:	d53e      	bpl.n	800406a <_svfprintf_r+0x7d2>
 8003fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ff0:	1ad7      	subs	r7, r2, r3
 8003ff2:	2f00      	cmp	r7, #0
 8003ff4:	dd39      	ble.n	800406a <_svfprintf_r+0x7d2>
 8003ff6:	2f10      	cmp	r7, #16
 8003ff8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8003ffa:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004198 <_svfprintf_r+0x900>
 8003ffe:	dd22      	ble.n	8004046 <_svfprintf_r+0x7ae>
 8004000:	4623      	mov	r3, r4
 8004002:	f04f 0910 	mov.w	r9, #16
 8004006:	4644      	mov	r4, r8
 8004008:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800400c:	e003      	b.n	8004016 <_svfprintf_r+0x77e>
 800400e:	3f10      	subs	r7, #16
 8004010:	3608      	adds	r6, #8
 8004012:	2f10      	cmp	r7, #16
 8004014:	dd15      	ble.n	8004042 <_svfprintf_r+0x7aa>
 8004016:	3301      	adds	r3, #1
 8004018:	3510      	adds	r5, #16
 800401a:	2b07      	cmp	r3, #7
 800401c:	e886 0210 	stmia.w	r6, {r4, r9}
 8004020:	953b      	str	r5, [sp, #236]	; 0xec
 8004022:	933a      	str	r3, [sp, #232]	; 0xe8
 8004024:	ddf3      	ble.n	800400e <_svfprintf_r+0x776>
 8004026:	4640      	mov	r0, r8
 8004028:	4651      	mov	r1, sl
 800402a:	465a      	mov	r2, fp
 800402c:	f002 ffa6 	bl	8006f7c <__ssprint_r>
 8004030:	2800      	cmp	r0, #0
 8004032:	f47f ad08 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004036:	3f10      	subs	r7, #16
 8004038:	2f10      	cmp	r7, #16
 800403a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800403c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800403e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004040:	dce9      	bgt.n	8004016 <_svfprintf_r+0x77e>
 8004042:	46a0      	mov	r8, r4
 8004044:	461c      	mov	r4, r3
 8004046:	3401      	adds	r4, #1
 8004048:	197d      	adds	r5, r7, r5
 800404a:	2c07      	cmp	r4, #7
 800404c:	f8c6 8000 	str.w	r8, [r6]
 8004050:	6077      	str	r7, [r6, #4]
 8004052:	953b      	str	r5, [sp, #236]	; 0xec
 8004054:	943a      	str	r4, [sp, #232]	; 0xe8
 8004056:	dd08      	ble.n	800406a <_svfprintf_r+0x7d2>
 8004058:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800405a:	4651      	mov	r1, sl
 800405c:	465a      	mov	r2, fp
 800405e:	f002 ff8d 	bl	8006f7c <__ssprint_r>
 8004062:	2800      	cmp	r0, #0
 8004064:	f47f acef 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004068:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800406a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800406c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800406e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004070:	428a      	cmp	r2, r1
 8004072:	bfac      	ite	ge
 8004074:	1880      	addge	r0, r0, r2
 8004076:	1840      	addlt	r0, r0, r1
 8004078:	900c      	str	r0, [sp, #48]	; 0x30
 800407a:	2d00      	cmp	r5, #0
 800407c:	f040 8129 	bne.w	80042d2 <_svfprintf_r+0xa3a>
 8004080:	2300      	movs	r3, #0
 8004082:	933a      	str	r3, [sp, #232]	; 0xe8
 8004084:	ae1f      	add	r6, sp, #124	; 0x7c
 8004086:	e435      	b.n	80038f4 <_svfprintf_r+0x5c>
 8004088:	46a0      	mov	r8, r4
 800408a:	461c      	mov	r4, r3
 800408c:	3401      	adds	r4, #1
 800408e:	19ed      	adds	r5, r5, r7
 8004090:	2c07      	cmp	r4, #7
 8004092:	f8c6 8000 	str.w	r8, [r6]
 8004096:	6077      	str	r7, [r6, #4]
 8004098:	953b      	str	r5, [sp, #236]	; 0xec
 800409a:	943a      	str	r4, [sp, #232]	; 0xe8
 800409c:	dda2      	ble.n	8003fe4 <_svfprintf_r+0x74c>
 800409e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80040a0:	4651      	mov	r1, sl
 80040a2:	465a      	mov	r2, fp
 80040a4:	f002 ff6a 	bl	8006f7c <__ssprint_r>
 80040a8:	2800      	cmp	r0, #0
 80040aa:	f47f accc 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80040ae:	ae1f      	add	r6, sp, #124	; 0x7c
 80040b0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80040b2:	e798      	b.n	8003fe6 <_svfprintf_r+0x74e>
 80040b4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80040b6:	2865      	cmp	r0, #101	; 0x65
 80040b8:	f340 80aa 	ble.w	8004210 <_svfprintf_r+0x978>
 80040bc:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80040c0:	2200      	movs	r2, #0
 80040c2:	2300      	movs	r3, #0
 80040c4:	f004 fb18 	bl	80086f8 <__aeabi_dcmpeq>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	f000 8131 	beq.w	8004330 <_svfprintf_r+0xa98>
 80040ce:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040d0:	4b2f      	ldr	r3, [pc, #188]	; (8004190 <_svfprintf_r+0x8f8>)
 80040d2:	3401      	adds	r4, #1
 80040d4:	6033      	str	r3, [r6, #0]
 80040d6:	3501      	adds	r5, #1
 80040d8:	2301      	movs	r3, #1
 80040da:	2c07      	cmp	r4, #7
 80040dc:	6073      	str	r3, [r6, #4]
 80040de:	953b      	str	r5, [sp, #236]	; 0xec
 80040e0:	943a      	str	r4, [sp, #232]	; 0xe8
 80040e2:	f300 82b8 	bgt.w	8004656 <_svfprintf_r+0xdbe>
 80040e6:	3608      	adds	r6, #8
 80040e8:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80040ea:	9910      	ldr	r1, [sp, #64]	; 0x40
 80040ec:	4299      	cmp	r1, r3
 80040ee:	dc03      	bgt.n	80040f8 <_svfprintf_r+0x860>
 80040f0:	9a08      	ldr	r2, [sp, #32]
 80040f2:	07d3      	lsls	r3, r2, #31
 80040f4:	f57f af77 	bpl.w	8003fe6 <_svfprintf_r+0x74e>
 80040f8:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80040fa:	981a      	ldr	r0, [sp, #104]	; 0x68
 80040fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040fe:	6070      	str	r0, [r6, #4]
 8004100:	3401      	adds	r4, #1
 8004102:	182d      	adds	r5, r5, r0
 8004104:	2c07      	cmp	r4, #7
 8004106:	6033      	str	r3, [r6, #0]
 8004108:	953b      	str	r5, [sp, #236]	; 0xec
 800410a:	943a      	str	r4, [sp, #232]	; 0xe8
 800410c:	f300 8300 	bgt.w	8004710 <_svfprintf_r+0xe78>
 8004110:	3608      	adds	r6, #8
 8004112:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004114:	1e4f      	subs	r7, r1, #1
 8004116:	2f00      	cmp	r7, #0
 8004118:	f77f af65 	ble.w	8003fe6 <_svfprintf_r+0x74e>
 800411c:	2f10      	cmp	r7, #16
 800411e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004120:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8004194 <_svfprintf_r+0x8fc>
 8004124:	ddb2      	ble.n	800408c <_svfprintf_r+0x7f4>
 8004126:	4623      	mov	r3, r4
 8004128:	f04f 0910 	mov.w	r9, #16
 800412c:	4644      	mov	r4, r8
 800412e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004132:	e003      	b.n	800413c <_svfprintf_r+0x8a4>
 8004134:	3608      	adds	r6, #8
 8004136:	3f10      	subs	r7, #16
 8004138:	2f10      	cmp	r7, #16
 800413a:	dda5      	ble.n	8004088 <_svfprintf_r+0x7f0>
 800413c:	3301      	adds	r3, #1
 800413e:	3510      	adds	r5, #16
 8004140:	2b07      	cmp	r3, #7
 8004142:	e886 0210 	stmia.w	r6, {r4, r9}
 8004146:	953b      	str	r5, [sp, #236]	; 0xec
 8004148:	933a      	str	r3, [sp, #232]	; 0xe8
 800414a:	ddf3      	ble.n	8004134 <_svfprintf_r+0x89c>
 800414c:	4640      	mov	r0, r8
 800414e:	4651      	mov	r1, sl
 8004150:	465a      	mov	r2, fp
 8004152:	f002 ff13 	bl	8006f7c <__ssprint_r>
 8004156:	2800      	cmp	r0, #0
 8004158:	f47f ac75 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 800415c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800415e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004160:	ae1f      	add	r6, sp, #124	; 0x7c
 8004162:	e7e8      	b.n	8004136 <_svfprintf_r+0x89e>
 8004164:	2a00      	cmp	r2, #0
 8004166:	f040 80be 	bne.w	80042e6 <_svfprintf_r+0xa4e>
 800416a:	9808      	ldr	r0, [sp, #32]
 800416c:	07c1      	lsls	r1, r0, #31
 800416e:	bf5c      	itt	pl
 8004170:	920d      	strpl	r2, [sp, #52]	; 0x34
 8004172:	f8cd b044 	strpl.w	fp, [sp, #68]	; 0x44
 8004176:	f57f acf3 	bpl.w	8003b60 <_svfprintf_r+0x2c8>
 800417a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800417c:	2330      	movs	r3, #48	; 0x30
 800417e:	f10d 02e3 	add.w	r2, sp, #227	; 0xe3
 8004182:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8004186:	910d      	str	r1, [sp, #52]	; 0x34
 8004188:	9211      	str	r2, [sp, #68]	; 0x44
 800418a:	e4e9      	b.n	8003b60 <_svfprintf_r+0x2c8>
 800418c:	08008cf0 	.word	0x08008cf0
 8004190:	08008d0c 	.word	0x08008d0c
 8004194:	08008b1c 	.word	0x08008b1c
 8004198:	08008b0c 	.word	0x08008b0c
 800419c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800419e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80041a0:	1a47      	subs	r7, r0, r1
 80041a2:	2f00      	cmp	r7, #0
 80041a4:	f77f aed8 	ble.w	8003f58 <_svfprintf_r+0x6c0>
 80041a8:	2f10      	cmp	r7, #16
 80041aa:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80041ac:	f8df 86d8 	ldr.w	r8, [pc, #1752]	; 8004888 <_svfprintf_r+0xff0>
 80041b0:	dd22      	ble.n	80041f8 <_svfprintf_r+0x960>
 80041b2:	4623      	mov	r3, r4
 80041b4:	f04f 0910 	mov.w	r9, #16
 80041b8:	4644      	mov	r4, r8
 80041ba:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80041be:	e003      	b.n	80041c8 <_svfprintf_r+0x930>
 80041c0:	3f10      	subs	r7, #16
 80041c2:	3608      	adds	r6, #8
 80041c4:	2f10      	cmp	r7, #16
 80041c6:	dd15      	ble.n	80041f4 <_svfprintf_r+0x95c>
 80041c8:	3301      	adds	r3, #1
 80041ca:	3510      	adds	r5, #16
 80041cc:	2b07      	cmp	r3, #7
 80041ce:	e886 0210 	stmia.w	r6, {r4, r9}
 80041d2:	953b      	str	r5, [sp, #236]	; 0xec
 80041d4:	933a      	str	r3, [sp, #232]	; 0xe8
 80041d6:	ddf3      	ble.n	80041c0 <_svfprintf_r+0x928>
 80041d8:	4640      	mov	r0, r8
 80041da:	4651      	mov	r1, sl
 80041dc:	465a      	mov	r2, fp
 80041de:	f002 fecd 	bl	8006f7c <__ssprint_r>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	f47f ac2f 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80041e8:	3f10      	subs	r7, #16
 80041ea:	2f10      	cmp	r7, #16
 80041ec:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80041ee:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80041f0:	ae1f      	add	r6, sp, #124	; 0x7c
 80041f2:	dce9      	bgt.n	80041c8 <_svfprintf_r+0x930>
 80041f4:	46a0      	mov	r8, r4
 80041f6:	461c      	mov	r4, r3
 80041f8:	3401      	adds	r4, #1
 80041fa:	19ed      	adds	r5, r5, r7
 80041fc:	2c07      	cmp	r4, #7
 80041fe:	f8c6 8000 	str.w	r8, [r6]
 8004202:	6077      	str	r7, [r6, #4]
 8004204:	953b      	str	r5, [sp, #236]	; 0xec
 8004206:	943a      	str	r4, [sp, #232]	; 0xe8
 8004208:	f300 81df 	bgt.w	80045ca <_svfprintf_r+0xd32>
 800420c:	3608      	adds	r6, #8
 800420e:	e6a3      	b.n	8003f58 <_svfprintf_r+0x6c0>
 8004210:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004212:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004214:	2a01      	cmp	r2, #1
 8004216:	f340 81a5 	ble.w	8004564 <_svfprintf_r+0xccc>
 800421a:	3401      	adds	r4, #1
 800421c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800421e:	3501      	adds	r5, #1
 8004220:	2301      	movs	r3, #1
 8004222:	2c07      	cmp	r4, #7
 8004224:	6030      	str	r0, [r6, #0]
 8004226:	6073      	str	r3, [r6, #4]
 8004228:	953b      	str	r5, [sp, #236]	; 0xec
 800422a:	943a      	str	r4, [sp, #232]	; 0xe8
 800422c:	f300 81c1 	bgt.w	80045b2 <_svfprintf_r+0xd1a>
 8004230:	3608      	adds	r6, #8
 8004232:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004234:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004236:	6071      	str	r1, [r6, #4]
 8004238:	3401      	adds	r4, #1
 800423a:	186d      	adds	r5, r5, r1
 800423c:	2c07      	cmp	r4, #7
 800423e:	6032      	str	r2, [r6, #0]
 8004240:	953b      	str	r5, [sp, #236]	; 0xec
 8004242:	943a      	str	r4, [sp, #232]	; 0xe8
 8004244:	f300 81a9 	bgt.w	800459a <_svfprintf_r+0xd02>
 8004248:	3608      	adds	r6, #8
 800424a:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800424e:	2200      	movs	r2, #0
 8004250:	2300      	movs	r3, #0
 8004252:	f004 fa51 	bl	80086f8 <__aeabi_dcmpeq>
 8004256:	2800      	cmp	r0, #0
 8004258:	f040 80f6 	bne.w	8004448 <_svfprintf_r+0xbb0>
 800425c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800425e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004260:	1e5a      	subs	r2, r3, #1
 8004262:	3401      	adds	r4, #1
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	18ad      	adds	r5, r5, r2
 8004268:	2c07      	cmp	r4, #7
 800426a:	6033      	str	r3, [r6, #0]
 800426c:	6072      	str	r2, [r6, #4]
 800426e:	953b      	str	r5, [sp, #236]	; 0xec
 8004270:	943a      	str	r4, [sp, #232]	; 0xe8
 8004272:	dc22      	bgt.n	80042ba <_svfprintf_r+0xa22>
 8004274:	3608      	adds	r6, #8
 8004276:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004278:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800427a:	3401      	adds	r4, #1
 800427c:	18ed      	adds	r5, r5, r3
 800427e:	2c07      	cmp	r4, #7
 8004280:	ab3c      	add	r3, sp, #240	; 0xf0
 8004282:	6033      	str	r3, [r6, #0]
 8004284:	6070      	str	r0, [r6, #4]
 8004286:	953b      	str	r5, [sp, #236]	; 0xec
 8004288:	943a      	str	r4, [sp, #232]	; 0xe8
 800428a:	f77f aeab 	ble.w	8003fe4 <_svfprintf_r+0x74c>
 800428e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004290:	4651      	mov	r1, sl
 8004292:	465a      	mov	r2, fp
 8004294:	f002 fe72 	bl	8006f7c <__ssprint_r>
 8004298:	2800      	cmp	r0, #0
 800429a:	f47f abd4 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 800429e:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042a0:	ae1f      	add	r6, sp, #124	; 0x7c
 80042a2:	e6a0      	b.n	8003fe6 <_svfprintf_r+0x74e>
 80042a4:	46a0      	mov	r8, r4
 80042a6:	461c      	mov	r4, r3
 80042a8:	3401      	adds	r4, #1
 80042aa:	19ed      	adds	r5, r5, r7
 80042ac:	2c07      	cmp	r4, #7
 80042ae:	f8c6 8000 	str.w	r8, [r6]
 80042b2:	6077      	str	r7, [r6, #4]
 80042b4:	953b      	str	r5, [sp, #236]	; 0xec
 80042b6:	943a      	str	r4, [sp, #232]	; 0xe8
 80042b8:	dddc      	ble.n	8004274 <_svfprintf_r+0x9dc>
 80042ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042bc:	4651      	mov	r1, sl
 80042be:	465a      	mov	r2, fp
 80042c0:	f002 fe5c 	bl	8006f7c <__ssprint_r>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	f47f abbe 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80042ca:	ae1f      	add	r6, sp, #124	; 0x7c
 80042cc:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80042ce:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80042d0:	e7d1      	b.n	8004276 <_svfprintf_r+0x9de>
 80042d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042d4:	4651      	mov	r1, sl
 80042d6:	465a      	mov	r2, fp
 80042d8:	f002 fe50 	bl	8006f7c <__ssprint_r>
 80042dc:	2800      	cmp	r0, #0
 80042de:	f43f aecf 	beq.w	8004080 <_svfprintf_r+0x7e8>
 80042e2:	f7ff bbb0 	b.w	8003a46 <_svfprintf_r+0x1ae>
 80042e6:	910d      	str	r1, [sp, #52]	; 0x34
 80042e8:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80042ec:	e438      	b.n	8003b60 <_svfprintf_r+0x2c8>
 80042ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80042f0:	4651      	mov	r1, sl
 80042f2:	465a      	mov	r2, fp
 80042f4:	f002 fe42 	bl	8006f7c <__ssprint_r>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	f47f aba4 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80042fe:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004300:	ae1f      	add	r6, sp, #124	; 0x7c
 8004302:	e661      	b.n	8003fc8 <_svfprintf_r+0x730>
 8004304:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004306:	4651      	mov	r1, sl
 8004308:	465a      	mov	r2, fp
 800430a:	f002 fe37 	bl	8006f7c <__ssprint_r>
 800430e:	2800      	cmp	r0, #0
 8004310:	f47f ab99 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004314:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004316:	ae1f      	add	r6, sp, #124	; 0x7c
 8004318:	e61a      	b.n	8003f50 <_svfprintf_r+0x6b8>
 800431a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800431c:	4651      	mov	r1, sl
 800431e:	465a      	mov	r2, fp
 8004320:	f002 fe2c 	bl	8006f7c <__ssprint_r>
 8004324:	2800      	cmp	r0, #0
 8004326:	f47f ab8e 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 800432a:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800432c:	ae1f      	add	r6, sp, #124	; 0x7c
 800432e:	e600      	b.n	8003f32 <_svfprintf_r+0x69a>
 8004330:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004332:	2f00      	cmp	r7, #0
 8004334:	f340 819a 	ble.w	800466c <_svfprintf_r+0xdd4>
 8004338:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800433a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800433c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800433e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004340:	4287      	cmp	r7, r0
 8004342:	bfa8      	it	ge
 8004344:	4607      	movge	r7, r0
 8004346:	1889      	adds	r1, r1, r2
 8004348:	2f00      	cmp	r7, #0
 800434a:	910d      	str	r1, [sp, #52]	; 0x34
 800434c:	dd0b      	ble.n	8004366 <_svfprintf_r+0xace>
 800434e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004350:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004352:	6077      	str	r7, [r6, #4]
 8004354:	3401      	adds	r4, #1
 8004356:	19ed      	adds	r5, r5, r7
 8004358:	2c07      	cmp	r4, #7
 800435a:	6032      	str	r2, [r6, #0]
 800435c:	953b      	str	r5, [sp, #236]	; 0xec
 800435e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004360:	f300 8304 	bgt.w	800496c <_svfprintf_r+0x10d4>
 8004364:	3608      	adds	r6, #8
 8004366:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004368:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800436c:	1bdf      	subs	r7, r3, r7
 800436e:	2f00      	cmp	r7, #0
 8004370:	f340 80a0 	ble.w	80044b4 <_svfprintf_r+0xc1c>
 8004374:	2f10      	cmp	r7, #16
 8004376:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004378:	f8df 850c 	ldr.w	r8, [pc, #1292]	; 8004888 <_svfprintf_r+0xff0>
 800437c:	f340 815f 	ble.w	800463e <_svfprintf_r+0xda6>
 8004380:	4623      	mov	r3, r4
 8004382:	f04f 0910 	mov.w	r9, #16
 8004386:	4644      	mov	r4, r8
 8004388:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800438c:	e004      	b.n	8004398 <_svfprintf_r+0xb00>
 800438e:	3608      	adds	r6, #8
 8004390:	3f10      	subs	r7, #16
 8004392:	2f10      	cmp	r7, #16
 8004394:	f340 8151 	ble.w	800463a <_svfprintf_r+0xda2>
 8004398:	3301      	adds	r3, #1
 800439a:	3510      	adds	r5, #16
 800439c:	2b07      	cmp	r3, #7
 800439e:	e886 0210 	stmia.w	r6, {r4, r9}
 80043a2:	953b      	str	r5, [sp, #236]	; 0xec
 80043a4:	933a      	str	r3, [sp, #232]	; 0xe8
 80043a6:	ddf2      	ble.n	800438e <_svfprintf_r+0xaf6>
 80043a8:	4640      	mov	r0, r8
 80043aa:	4651      	mov	r1, sl
 80043ac:	465a      	mov	r2, fp
 80043ae:	f002 fde5 	bl	8006f7c <__ssprint_r>
 80043b2:	2800      	cmp	r0, #0
 80043b4:	f47f ab47 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80043b8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80043ba:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80043bc:	ae1f      	add	r6, sp, #124	; 0x7c
 80043be:	e7e7      	b.n	8004390 <_svfprintf_r+0xaf8>
 80043c0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80043c2:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80043c6:	f003 000f 	and.w	r0, r3, #15
 80043ca:	460a      	mov	r2, r1
 80043cc:	5c28      	ldrb	r0, [r5, r0]
 80043ce:	3901      	subs	r1, #1
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	7010      	strb	r0, [r2, #0]
 80043d4:	d1f7      	bne.n	80043c6 <_svfprintf_r+0xb2e>
 80043d6:	ebc2 030b 	rsb	r3, r2, fp
 80043da:	9211      	str	r2, [sp, #68]	; 0x44
 80043dc:	930d      	str	r3, [sp, #52]	; 0x34
 80043de:	f7ff bbbf 	b.w	8003b60 <_svfprintf_r+0x2c8>
 80043e2:	2b09      	cmp	r3, #9
 80043e4:	bf82      	ittt	hi
 80043e6:	f64c 45cd 	movwhi	r5, #52429	; 0xcccd
 80043ea:	f10d 01e3 	addhi.w	r1, sp, #227	; 0xe3
 80043ee:	f6cc 45cc 	movthi	r5, #52428	; 0xcccc
 80043f2:	d809      	bhi.n	8004408 <_svfprintf_r+0xb70>
 80043f4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80043f6:	3330      	adds	r3, #48	; 0x30
 80043f8:	f10d 01e3 	add.w	r1, sp, #227	; 0xe3
 80043fc:	f88d 30e3 	strb.w	r3, [sp, #227]	; 0xe3
 8004400:	900d      	str	r0, [sp, #52]	; 0x34
 8004402:	9111      	str	r1, [sp, #68]	; 0x44
 8004404:	f7ff bbac 	b.w	8003b60 <_svfprintf_r+0x2c8>
 8004408:	fba5 0203 	umull	r0, r2, r5, r3
 800440c:	08d2      	lsrs	r2, r2, #3
 800440e:	eb02 0782 	add.w	r7, r2, r2, lsl #2
 8004412:	4608      	mov	r0, r1
 8004414:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
 8004418:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800441c:	7001      	strb	r1, [r0, #0]
 800441e:	4613      	mov	r3, r2
 8004420:	1e41      	subs	r1, r0, #1
 8004422:	2a00      	cmp	r2, #0
 8004424:	d1f0      	bne.n	8004408 <_svfprintf_r+0xb70>
 8004426:	ebc0 030b 	rsb	r3, r0, fp
 800442a:	9011      	str	r0, [sp, #68]	; 0x44
 800442c:	930d      	str	r3, [sp, #52]	; 0x34
 800442e:	f7ff bb97 	b.w	8003b60 <_svfprintf_r+0x2c8>
 8004432:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004434:	4651      	mov	r1, sl
 8004436:	465a      	mov	r2, fp
 8004438:	f002 fda0 	bl	8006f7c <__ssprint_r>
 800443c:	2800      	cmp	r0, #0
 800443e:	f47f ab02 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004442:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004444:	ae1f      	add	r6, sp, #124	; 0x7c
 8004446:	e563      	b.n	8003f10 <_svfprintf_r+0x678>
 8004448:	9910      	ldr	r1, [sp, #64]	; 0x40
 800444a:	1e4f      	subs	r7, r1, #1
 800444c:	2f00      	cmp	r7, #0
 800444e:	f77f af12 	ble.w	8004276 <_svfprintf_r+0x9de>
 8004452:	2f10      	cmp	r7, #16
 8004454:	f8df 8430 	ldr.w	r8, [pc, #1072]	; 8004888 <_svfprintf_r+0xff0>
 8004458:	f77f af26 	ble.w	80042a8 <_svfprintf_r+0xa10>
 800445c:	4623      	mov	r3, r4
 800445e:	f04f 0910 	mov.w	r9, #16
 8004462:	4644      	mov	r4, r8
 8004464:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004468:	e004      	b.n	8004474 <_svfprintf_r+0xbdc>
 800446a:	3608      	adds	r6, #8
 800446c:	3f10      	subs	r7, #16
 800446e:	2f10      	cmp	r7, #16
 8004470:	f77f af18 	ble.w	80042a4 <_svfprintf_r+0xa0c>
 8004474:	3301      	adds	r3, #1
 8004476:	3510      	adds	r5, #16
 8004478:	2b07      	cmp	r3, #7
 800447a:	e886 0210 	stmia.w	r6, {r4, r9}
 800447e:	953b      	str	r5, [sp, #236]	; 0xec
 8004480:	933a      	str	r3, [sp, #232]	; 0xe8
 8004482:	ddf2      	ble.n	800446a <_svfprintf_r+0xbd2>
 8004484:	4640      	mov	r0, r8
 8004486:	4651      	mov	r1, sl
 8004488:	465a      	mov	r2, fp
 800448a:	f002 fd77 	bl	8006f7c <__ssprint_r>
 800448e:	2800      	cmp	r0, #0
 8004490:	f47f aad9 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004494:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004496:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004498:	ae1f      	add	r6, sp, #124	; 0x7c
 800449a:	e7e7      	b.n	800446c <_svfprintf_r+0xbd4>
 800449c:	2202      	movs	r2, #2
 800449e:	e405      	b.n	8003cac <_svfprintf_r+0x414>
 80044a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80044a2:	4651      	mov	r1, sl
 80044a4:	465a      	mov	r2, fp
 80044a6:	f002 fd69 	bl	8006f7c <__ssprint_r>
 80044aa:	2800      	cmp	r0, #0
 80044ac:	f47f aacb 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80044b0:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80044b2:	ae1f      	add	r6, sp, #124	; 0x7c
 80044b4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80044b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80044b8:	4298      	cmp	r0, r3
 80044ba:	dc45      	bgt.n	8004548 <_svfprintf_r+0xcb0>
 80044bc:	9908      	ldr	r1, [sp, #32]
 80044be:	07c9      	lsls	r1, r1, #31
 80044c0:	d442      	bmi.n	8004548 <_svfprintf_r+0xcb0>
 80044c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80044c4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80044c6:	180a      	adds	r2, r1, r0
 80044c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80044cc:	1a8f      	subs	r7, r1, r2
 80044ce:	1ac3      	subs	r3, r0, r3
 80044d0:	42bb      	cmp	r3, r7
 80044d2:	bfb8      	it	lt
 80044d4:	461f      	movlt	r7, r3
 80044d6:	2f00      	cmp	r7, #0
 80044d8:	dd0a      	ble.n	80044f0 <_svfprintf_r+0xc58>
 80044da:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80044dc:	6032      	str	r2, [r6, #0]
 80044de:	3401      	adds	r4, #1
 80044e0:	19ed      	adds	r5, r5, r7
 80044e2:	2c07      	cmp	r4, #7
 80044e4:	6077      	str	r7, [r6, #4]
 80044e6:	953b      	str	r5, [sp, #236]	; 0xec
 80044e8:	943a      	str	r4, [sp, #232]	; 0xe8
 80044ea:	f300 8256 	bgt.w	800499a <_svfprintf_r+0x1102>
 80044ee:	3608      	adds	r6, #8
 80044f0:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80044f4:	1bdf      	subs	r7, r3, r7
 80044f6:	2f00      	cmp	r7, #0
 80044f8:	f77f ad75 	ble.w	8003fe6 <_svfprintf_r+0x74e>
 80044fc:	2f10      	cmp	r7, #16
 80044fe:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004500:	f8df 8384 	ldr.w	r8, [pc, #900]	; 8004888 <_svfprintf_r+0xff0>
 8004504:	f77f adc2 	ble.w	800408c <_svfprintf_r+0x7f4>
 8004508:	4623      	mov	r3, r4
 800450a:	f04f 0910 	mov.w	r9, #16
 800450e:	4644      	mov	r4, r8
 8004510:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8004514:	e004      	b.n	8004520 <_svfprintf_r+0xc88>
 8004516:	3608      	adds	r6, #8
 8004518:	3f10      	subs	r7, #16
 800451a:	2f10      	cmp	r7, #16
 800451c:	f77f adb4 	ble.w	8004088 <_svfprintf_r+0x7f0>
 8004520:	3301      	adds	r3, #1
 8004522:	3510      	adds	r5, #16
 8004524:	2b07      	cmp	r3, #7
 8004526:	e886 0210 	stmia.w	r6, {r4, r9}
 800452a:	953b      	str	r5, [sp, #236]	; 0xec
 800452c:	933a      	str	r3, [sp, #232]	; 0xe8
 800452e:	ddf2      	ble.n	8004516 <_svfprintf_r+0xc7e>
 8004530:	4640      	mov	r0, r8
 8004532:	4651      	mov	r1, sl
 8004534:	465a      	mov	r2, fp
 8004536:	f002 fd21 	bl	8006f7c <__ssprint_r>
 800453a:	2800      	cmp	r0, #0
 800453c:	f47f aa83 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004540:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004542:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8004544:	ae1f      	add	r6, sp, #124	; 0x7c
 8004546:	e7e7      	b.n	8004518 <_svfprintf_r+0xc80>
 8004548:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800454a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800454c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800454e:	6070      	str	r0, [r6, #4]
 8004550:	3401      	adds	r4, #1
 8004552:	182d      	adds	r5, r5, r0
 8004554:	2c07      	cmp	r4, #7
 8004556:	6032      	str	r2, [r6, #0]
 8004558:	953b      	str	r5, [sp, #236]	; 0xec
 800455a:	943a      	str	r4, [sp, #232]	; 0xe8
 800455c:	f300 8211 	bgt.w	8004982 <_svfprintf_r+0x10ea>
 8004560:	3608      	adds	r6, #8
 8004562:	e7ae      	b.n	80044c2 <_svfprintf_r+0xc2a>
 8004564:	9b08      	ldr	r3, [sp, #32]
 8004566:	07da      	lsls	r2, r3, #31
 8004568:	f53f ae57 	bmi.w	800421a <_svfprintf_r+0x982>
 800456c:	3401      	adds	r4, #1
 800456e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004570:	3501      	adds	r5, #1
 8004572:	2301      	movs	r3, #1
 8004574:	2c07      	cmp	r4, #7
 8004576:	6032      	str	r2, [r6, #0]
 8004578:	6073      	str	r3, [r6, #4]
 800457a:	953b      	str	r5, [sp, #236]	; 0xec
 800457c:	943a      	str	r4, [sp, #232]	; 0xe8
 800457e:	f77f ae79 	ble.w	8004274 <_svfprintf_r+0x9dc>
 8004582:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004584:	4651      	mov	r1, sl
 8004586:	465a      	mov	r2, fp
 8004588:	f002 fcf8 	bl	8006f7c <__ssprint_r>
 800458c:	2800      	cmp	r0, #0
 800458e:	f47f aa5a 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004592:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004594:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004596:	ae1f      	add	r6, sp, #124	; 0x7c
 8004598:	e66d      	b.n	8004276 <_svfprintf_r+0x9de>
 800459a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800459c:	4651      	mov	r1, sl
 800459e:	465a      	mov	r2, fp
 80045a0:	f002 fcec 	bl	8006f7c <__ssprint_r>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	f47f aa4e 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80045aa:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045ac:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80045ae:	ae1f      	add	r6, sp, #124	; 0x7c
 80045b0:	e64b      	b.n	800424a <_svfprintf_r+0x9b2>
 80045b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045b4:	4651      	mov	r1, sl
 80045b6:	465a      	mov	r2, fp
 80045b8:	f002 fce0 	bl	8006f7c <__ssprint_r>
 80045bc:	2800      	cmp	r0, #0
 80045be:	f47f aa42 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80045c2:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045c4:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 80045c6:	ae1f      	add	r6, sp, #124	; 0x7c
 80045c8:	e633      	b.n	8004232 <_svfprintf_r+0x99a>
 80045ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045cc:	4651      	mov	r1, sl
 80045ce:	465a      	mov	r2, fp
 80045d0:	f002 fcd4 	bl	8006f7c <__ssprint_r>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	f47f aa36 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80045da:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80045dc:	ae1f      	add	r6, sp, #124	; 0x7c
 80045de:	e4bb      	b.n	8003f58 <_svfprintf_r+0x6c0>
 80045e0:	f002 fb64 	bl	8006cac <__fpclassifyd>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	f040 809e 	bne.w	8004726 <_svfprintf_r+0xe8e>
 80045ea:	2203      	movs	r2, #3
 80045ec:	9012      	str	r0, [sp, #72]	; 0x48
 80045ee:	4ba3      	ldr	r3, [pc, #652]	; (800487c <_svfprintf_r+0xfe4>)
 80045f0:	920a      	str	r2, [sp, #40]	; 0x28
 80045f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80045f4:	4aa2      	ldr	r2, [pc, #648]	; (8004880 <_svfprintf_r+0xfe8>)
 80045f6:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80045fa:	2847      	cmp	r0, #71	; 0x47
 80045fc:	bfd8      	it	le
 80045fe:	461a      	movle	r2, r3
 8004600:	9211      	str	r2, [sp, #68]	; 0x44
 8004602:	2303      	movs	r3, #3
 8004604:	9a08      	ldr	r2, [sp, #32]
 8004606:	930d      	str	r3, [sp, #52]	; 0x34
 8004608:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800460a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800460e:	9208      	str	r2, [sp, #32]
 8004610:	9316      	str	r3, [sp, #88]	; 0x58
 8004612:	f7ff baaf 	b.w	8003b74 <_svfprintf_r+0x2dc>
 8004616:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004618:	2201      	movs	r2, #1
 800461a:	680b      	ldr	r3, [r1, #0]
 800461c:	e414      	b.n	8003e48 <_svfprintf_r+0x5b0>
 800461e:	9b08      	ldr	r3, [sp, #32]
 8004620:	065f      	lsls	r7, r3, #25
 8004622:	d56d      	bpl.n	8004700 <_svfprintf_r+0xe68>
 8004624:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004626:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004628:	6803      	ldr	r3, [r0, #0]
 800462a:	3004      	adds	r0, #4
 800462c:	900e      	str	r0, [sp, #56]	; 0x38
 800462e:	8019      	strh	r1, [r3, #0]
 8004630:	f7ff b960 	b.w	80038f4 <_svfprintf_r+0x5c>
 8004634:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004636:	680b      	ldr	r3, [r1, #0]
 8004638:	e406      	b.n	8003e48 <_svfprintf_r+0x5b0>
 800463a:	46a0      	mov	r8, r4
 800463c:	461c      	mov	r4, r3
 800463e:	3401      	adds	r4, #1
 8004640:	19ed      	adds	r5, r5, r7
 8004642:	2c07      	cmp	r4, #7
 8004644:	f8c6 8000 	str.w	r8, [r6]
 8004648:	6077      	str	r7, [r6, #4]
 800464a:	953b      	str	r5, [sp, #236]	; 0xec
 800464c:	943a      	str	r4, [sp, #232]	; 0xe8
 800464e:	f73f af27 	bgt.w	80044a0 <_svfprintf_r+0xc08>
 8004652:	3608      	adds	r6, #8
 8004654:	e72e      	b.n	80044b4 <_svfprintf_r+0xc1c>
 8004656:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004658:	4651      	mov	r1, sl
 800465a:	465a      	mov	r2, fp
 800465c:	f002 fc8e 	bl	8006f7c <__ssprint_r>
 8004660:	2800      	cmp	r0, #0
 8004662:	f47f a9f0 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004666:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004668:	ae1f      	add	r6, sp, #124	; 0x7c
 800466a:	e53d      	b.n	80040e8 <_svfprintf_r+0x850>
 800466c:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 800466e:	4b85      	ldr	r3, [pc, #532]	; (8004884 <_svfprintf_r+0xfec>)
 8004670:	3401      	adds	r4, #1
 8004672:	6033      	str	r3, [r6, #0]
 8004674:	3501      	adds	r5, #1
 8004676:	2301      	movs	r3, #1
 8004678:	2c07      	cmp	r4, #7
 800467a:	6073      	str	r3, [r6, #4]
 800467c:	953b      	str	r5, [sp, #236]	; 0xec
 800467e:	943a      	str	r4, [sp, #232]	; 0xe8
 8004680:	f300 8139 	bgt.w	80048f6 <_svfprintf_r+0x105e>
 8004684:	3608      	adds	r6, #8
 8004686:	b92f      	cbnz	r7, 8004694 <_svfprintf_r+0xdfc>
 8004688:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800468a:	b91a      	cbnz	r2, 8004694 <_svfprintf_r+0xdfc>
 800468c:	9b08      	ldr	r3, [sp, #32]
 800468e:	07d8      	lsls	r0, r3, #31
 8004690:	f57f aca9 	bpl.w	8003fe6 <_svfprintf_r+0x74e>
 8004694:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004696:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004698:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800469a:	6071      	str	r1, [r6, #4]
 800469c:	3401      	adds	r4, #1
 800469e:	186d      	adds	r5, r5, r1
 80046a0:	2c07      	cmp	r4, #7
 80046a2:	6030      	str	r0, [r6, #0]
 80046a4:	953b      	str	r5, [sp, #236]	; 0xec
 80046a6:	943a      	str	r4, [sp, #232]	; 0xe8
 80046a8:	f300 81d2 	bgt.w	8004a50 <_svfprintf_r+0x11b8>
 80046ac:	3608      	adds	r6, #8
 80046ae:	427f      	negs	r7, r7
 80046b0:	2f00      	cmp	r7, #0
 80046b2:	f340 8141 	ble.w	8004938 <_svfprintf_r+0x10a0>
 80046b6:	2f10      	cmp	r7, #16
 80046b8:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8004888 <_svfprintf_r+0xff0>
 80046bc:	f340 8183 	ble.w	80049c6 <_svfprintf_r+0x112e>
 80046c0:	4623      	mov	r3, r4
 80046c2:	f04f 0910 	mov.w	r9, #16
 80046c6:	4644      	mov	r4, r8
 80046c8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80046cc:	e004      	b.n	80046d8 <_svfprintf_r+0xe40>
 80046ce:	3608      	adds	r6, #8
 80046d0:	3f10      	subs	r7, #16
 80046d2:	2f10      	cmp	r7, #16
 80046d4:	f340 8175 	ble.w	80049c2 <_svfprintf_r+0x112a>
 80046d8:	3301      	adds	r3, #1
 80046da:	3510      	adds	r5, #16
 80046dc:	2b07      	cmp	r3, #7
 80046de:	e886 0210 	stmia.w	r6, {r4, r9}
 80046e2:	953b      	str	r5, [sp, #236]	; 0xec
 80046e4:	933a      	str	r3, [sp, #232]	; 0xe8
 80046e6:	ddf2      	ble.n	80046ce <_svfprintf_r+0xe36>
 80046e8:	4640      	mov	r0, r8
 80046ea:	4651      	mov	r1, sl
 80046ec:	465a      	mov	r2, fp
 80046ee:	f002 fc45 	bl	8006f7c <__ssprint_r>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f47f a9a7 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80046f8:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80046fa:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80046fc:	ae1f      	add	r6, sp, #124	; 0x7c
 80046fe:	e7e7      	b.n	80046d0 <_svfprintf_r+0xe38>
 8004700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004702:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004704:	6813      	ldr	r3, [r2, #0]
 8004706:	3204      	adds	r2, #4
 8004708:	920e      	str	r2, [sp, #56]	; 0x38
 800470a:	6018      	str	r0, [r3, #0]
 800470c:	f7ff b8f2 	b.w	80038f4 <_svfprintf_r+0x5c>
 8004710:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004712:	4651      	mov	r1, sl
 8004714:	465a      	mov	r2, fp
 8004716:	f002 fc31 	bl	8006f7c <__ssprint_r>
 800471a:	2800      	cmp	r0, #0
 800471c:	f47f a993 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004720:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004722:	ae1f      	add	r6, sp, #124	; 0x7c
 8004724:	e4f5      	b.n	8004112 <_svfprintf_r+0x87a>
 8004726:	1c60      	adds	r0, r4, #1
 8004728:	f000 80f1 	beq.w	800490e <_svfprintf_r+0x1076>
 800472c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800472e:	2967      	cmp	r1, #103	; 0x67
 8004730:	bf18      	it	ne
 8004732:	2947      	cmpne	r1, #71	; 0x47
 8004734:	bf14      	ite	ne
 8004736:	2300      	movne	r3, #0
 8004738:	2301      	moveq	r3, #1
 800473a:	bf18      	it	ne
 800473c:	930a      	strne	r3, [sp, #40]	; 0x28
 800473e:	d104      	bne.n	800474a <_svfprintf_r+0xeb2>
 8004740:	2c00      	cmp	r4, #0
 8004742:	f000 81ad 	beq.w	8004aa0 <_svfprintf_r+0x1208>
 8004746:	2201      	movs	r2, #1
 8004748:	920a      	str	r2, [sp, #40]	; 0x28
 800474a:	9808      	ldr	r0, [sp, #32]
 800474c:	2d00      	cmp	r5, #0
 800474e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8004752:	9008      	str	r0, [sp, #32]
 8004754:	f2c0 8189 	blt.w	8004a6a <_svfprintf_r+0x11d2>
 8004758:	2200      	movs	r2, #0
 800475a:	9212      	str	r2, [sp, #72]	; 0x48
 800475c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800475e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004760:	f1a3 0166 	sub.w	r1, r3, #102	; 0x66
 8004764:	424b      	negs	r3, r1
 8004766:	eb43 0301 	adc.w	r3, r3, r1
 800476a:	469c      	mov	ip, r3
 800476c:	2846      	cmp	r0, #70	; 0x46
 800476e:	bf08      	it	eq
 8004770:	f04c 0c01 	orreq.w	ip, ip, #1
 8004774:	930d      	str	r3, [sp, #52]	; 0x34
 8004776:	46a1      	mov	r9, r4
 8004778:	2103      	movs	r1, #3
 800477a:	f1bc 0f00 	cmp.w	ip, #0
 800477e:	d107      	bne.n	8004790 <_svfprintf_r+0xef8>
 8004780:	2865      	cmp	r0, #101	; 0x65
 8004782:	bf18      	it	ne
 8004784:	2845      	cmpne	r0, #69	; 0x45
 8004786:	bf0c      	ite	eq
 8004788:	f104 0901 	addeq.w	r9, r4, #1
 800478c:	46a1      	movne	r9, r4
 800478e:	2102      	movs	r1, #2
 8004790:	e88d 0202 	stmia.w	sp, {r1, r9}
 8004794:	a940      	add	r1, sp, #256	; 0x100
 8004796:	9102      	str	r1, [sp, #8]
 8004798:	a941      	add	r1, sp, #260	; 0x104
 800479a:	9103      	str	r1, [sp, #12]
 800479c:	4642      	mov	r2, r8
 800479e:	a942      	add	r1, sp, #264	; 0x108
 80047a0:	462b      	mov	r3, r5
 80047a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80047a4:	9104      	str	r1, [sp, #16]
 80047a6:	f8cd c018 	str.w	ip, [sp, #24]
 80047aa:	f000 fa6d 	bl	8004c88 <_dtoa_r>
 80047ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 80047b0:	9011      	str	r0, [sp, #68]	; 0x44
 80047b2:	2947      	cmp	r1, #71	; 0x47
 80047b4:	bf18      	it	ne
 80047b6:	2967      	cmpne	r1, #103	; 0x67
 80047b8:	f8dd c018 	ldr.w	ip, [sp, #24]
 80047bc:	d104      	bne.n	80047c8 <_svfprintf_r+0xf30>
 80047be:	9a08      	ldr	r2, [sp, #32]
 80047c0:	07d2      	lsls	r2, r2, #31
 80047c2:	bf58      	it	pl
 80047c4:	9f42      	ldrpl	r7, [sp, #264]	; 0x108
 80047c6:	d515      	bpl.n	80047f4 <_svfprintf_r+0xf5c>
 80047c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80047ca:	eb03 0709 	add.w	r7, r3, r9
 80047ce:	f1bc 0f00 	cmp.w	ip, #0
 80047d2:	d005      	beq.n	80047e0 <_svfprintf_r+0xf48>
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b30      	cmp	r3, #48	; 0x30
 80047d8:	f000 8165 	beq.w	8004aa6 <_svfprintf_r+0x120e>
 80047dc:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80047de:	18ff      	adds	r7, r7, r3
 80047e0:	4640      	mov	r0, r8
 80047e2:	4629      	mov	r1, r5
 80047e4:	2200      	movs	r2, #0
 80047e6:	2300      	movs	r3, #0
 80047e8:	f003 ff86 	bl	80086f8 <__aeabi_dcmpeq>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	f000 8117 	beq.w	8004a20 <_svfprintf_r+0x1188>
 80047f2:	9742      	str	r7, [sp, #264]	; 0x108
 80047f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80047f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047f8:	1a3f      	subs	r7, r7, r0
 80047fa:	9710      	str	r7, [sp, #64]	; 0x40
 80047fc:	2900      	cmp	r1, #0
 80047fe:	f000 80f9 	beq.w	80049f4 <_svfprintf_r+0x115c>
 8004802:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004804:	1ccb      	adds	r3, r1, #3
 8004806:	db02      	blt.n	800480e <_svfprintf_r+0xf76>
 8004808:	428c      	cmp	r4, r1
 800480a:	f280 80fa 	bge.w	8004a02 <_svfprintf_r+0x116a>
 800480e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004810:	3a02      	subs	r2, #2
 8004812:	9215      	str	r2, [sp, #84]	; 0x54
 8004814:	3901      	subs	r1, #1
 8004816:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004818:	9140      	str	r1, [sp, #256]	; 0x100
 800481a:	2900      	cmp	r1, #0
 800481c:	f88d 00f0 	strb.w	r0, [sp, #240]	; 0xf0
 8004820:	f2c0 815d 	blt.w	8004ade <_svfprintf_r+0x1246>
 8004824:	232b      	movs	r3, #43	; 0x2b
 8004826:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 800482a:	2909      	cmp	r1, #9
 800482c:	f340 8122 	ble.w	8004a74 <_svfprintf_r+0x11dc>
 8004830:	f10d 07ff 	add.w	r7, sp, #255	; 0xff
 8004834:	f246 6467 	movw	r4, #26215	; 0x6667
 8004838:	4638      	mov	r0, r7
 800483a:	f2c6 6466 	movt	r4, #26214	; 0x6666
 800483e:	fb84 3201 	smull	r3, r2, r4, r1
 8004842:	17cb      	asrs	r3, r1, #31
 8004844:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8004848:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800484c:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
 8004850:	3230      	adds	r2, #48	; 0x30
 8004852:	2b09      	cmp	r3, #9
 8004854:	4605      	mov	r5, r0
 8004856:	4619      	mov	r1, r3
 8004858:	f800 2d01 	strb.w	r2, [r0, #-1]!
 800485c:	dcef      	bgt.n	800483e <_svfprintf_r+0xfa6>
 800485e:	3130      	adds	r1, #48	; 0x30
 8004860:	1eaa      	subs	r2, r5, #2
 8004862:	b2c9      	uxtb	r1, r1
 8004864:	42ba      	cmp	r2, r7
 8004866:	f805 1c02 	strb.w	r1, [r5, #-2]
 800486a:	bf28      	it	cs
 800486c:	f10d 01f2 	addcs.w	r1, sp, #242	; 0xf2
 8004870:	d213      	bcs.n	800489a <_svfprintf_r+0x1002>
 8004872:	f10d 03f2 	add.w	r3, sp, #242	; 0xf2
 8004876:	f10d 00fe 	add.w	r0, sp, #254	; 0xfe
 800487a:	e009      	b.n	8004890 <_svfprintf_r+0xff8>
 800487c:	08008cd4 	.word	0x08008cd4
 8004880:	08008cd8 	.word	0x08008cd8
 8004884:	08008d0c 	.word	0x08008d0c
 8004888:	08008b1c 	.word	0x08008b1c
 800488c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004890:	f803 1b01 	strb.w	r1, [r3], #1
 8004894:	4282      	cmp	r2, r0
 8004896:	4619      	mov	r1, r3
 8004898:	d1f8      	bne.n	800488c <_svfprintf_r+0xff4>
 800489a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800489c:	ab3c      	add	r3, sp, #240	; 0xf0
 800489e:	1acb      	subs	r3, r1, r3
 80048a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80048a2:	2801      	cmp	r0, #1
 80048a4:	4403      	add	r3, r0
 80048a6:	930d      	str	r3, [sp, #52]	; 0x34
 80048a8:	f340 8125 	ble.w	8004af6 <_svfprintf_r+0x125e>
 80048ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ae:	3301      	adds	r3, #1
 80048b0:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 80048b4:	2100      	movs	r1, #0
 80048b6:	930d      	str	r3, [sp, #52]	; 0x34
 80048b8:	900a      	str	r0, [sp, #40]	; 0x28
 80048ba:	9116      	str	r1, [sp, #88]	; 0x58
 80048bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048be:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f43f a956 	beq.w	8003b74 <_svfprintf_r+0x2dc>
 80048c8:	232d      	movs	r3, #45	; 0x2d
 80048ca:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
 80048ce:	2300      	movs	r3, #0
 80048d0:	9312      	str	r3, [sp, #72]	; 0x48
 80048d2:	f7ff b950 	b.w	8003b76 <_svfprintf_r+0x2de>
 80048d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048d8:	2140      	movs	r1, #64	; 0x40
 80048da:	f001 fa59 	bl	8005d90 <_malloc_r>
 80048de:	f8ca 0000 	str.w	r0, [sl]
 80048e2:	f8ca 0010 	str.w	r0, [sl, #16]
 80048e6:	2800      	cmp	r0, #0
 80048e8:	f000 812b 	beq.w	8004b42 <_svfprintf_r+0x12aa>
 80048ec:	2340      	movs	r3, #64	; 0x40
 80048ee:	f8ca 3014 	str.w	r3, [sl, #20]
 80048f2:	f7fe bfec 	b.w	80038ce <_svfprintf_r+0x36>
 80048f6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80048f8:	4651      	mov	r1, sl
 80048fa:	465a      	mov	r2, fp
 80048fc:	f002 fb3e 	bl	8006f7c <__ssprint_r>
 8004900:	2800      	cmp	r0, #0
 8004902:	f47f a8a0 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004906:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004908:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800490a:	ae1f      	add	r6, sp, #124	; 0x7c
 800490c:	e6bb      	b.n	8004686 <_svfprintf_r+0xdee>
 800490e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004910:	2847      	cmp	r0, #71	; 0x47
 8004912:	bf18      	it	ne
 8004914:	2867      	cmpne	r0, #103	; 0x67
 8004916:	bf14      	ite	ne
 8004918:	2000      	movne	r0, #0
 800491a:	2001      	moveq	r0, #1
 800491c:	900a      	str	r0, [sp, #40]	; 0x28
 800491e:	2406      	movs	r4, #6
 8004920:	e713      	b.n	800474a <_svfprintf_r+0xeb2>
 8004922:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004924:	4651      	mov	r1, sl
 8004926:	465a      	mov	r2, fp
 8004928:	f002 fb28 	bl	8006f7c <__ssprint_r>
 800492c:	2800      	cmp	r0, #0
 800492e:	f47f a88a 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004932:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004934:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004936:	ae1f      	add	r6, sp, #124	; 0x7c
 8004938:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800493a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800493c:	6072      	str	r2, [r6, #4]
 800493e:	3401      	adds	r4, #1
 8004940:	18ad      	adds	r5, r5, r2
 8004942:	2c07      	cmp	r4, #7
 8004944:	6033      	str	r3, [r6, #0]
 8004946:	953b      	str	r5, [sp, #236]	; 0xec
 8004948:	943a      	str	r4, [sp, #232]	; 0xe8
 800494a:	f77f ab4b 	ble.w	8003fe4 <_svfprintf_r+0x74c>
 800494e:	f7ff bba6 	b.w	800409e <_svfprintf_r+0x806>
 8004952:	f002 fae3 	bl	8006f1c <strlen>
 8004956:	900d      	str	r0, [sp, #52]	; 0x34
 8004958:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800495c:	9512      	str	r5, [sp, #72]	; 0x48
 800495e:	900a      	str	r0, [sp, #40]	; 0x28
 8004960:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004964:	970e      	str	r7, [sp, #56]	; 0x38
 8004966:	9516      	str	r5, [sp, #88]	; 0x58
 8004968:	f7ff b904 	b.w	8003b74 <_svfprintf_r+0x2dc>
 800496c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800496e:	4651      	mov	r1, sl
 8004970:	465a      	mov	r2, fp
 8004972:	f002 fb03 	bl	8006f7c <__ssprint_r>
 8004976:	2800      	cmp	r0, #0
 8004978:	f47f a865 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 800497c:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 800497e:	ae1f      	add	r6, sp, #124	; 0x7c
 8004980:	e4f1      	b.n	8004366 <_svfprintf_r+0xace>
 8004982:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004984:	4651      	mov	r1, sl
 8004986:	465a      	mov	r2, fp
 8004988:	f002 faf8 	bl	8006f7c <__ssprint_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	f47f a85a 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004992:	9b40      	ldr	r3, [sp, #256]	; 0x100
 8004994:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004996:	ae1f      	add	r6, sp, #124	; 0x7c
 8004998:	e593      	b.n	80044c2 <_svfprintf_r+0xc2a>
 800499a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800499c:	4651      	mov	r1, sl
 800499e:	465a      	mov	r2, fp
 80049a0:	f002 faec 	bl	8006f7c <__ssprint_r>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	f47f a84e 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 80049aa:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80049ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80049ae:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 80049b0:	1acb      	subs	r3, r1, r3
 80049b2:	ae1f      	add	r6, sp, #124	; 0x7c
 80049b4:	e59c      	b.n	80044f0 <_svfprintf_r+0xc58>
 80049b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049b8:	ebc3 030b 	rsb	r3, r3, fp
 80049bc:	930d      	str	r3, [sp, #52]	; 0x34
 80049be:	f7ff b8cf 	b.w	8003b60 <_svfprintf_r+0x2c8>
 80049c2:	46a0      	mov	r8, r4
 80049c4:	461c      	mov	r4, r3
 80049c6:	3401      	adds	r4, #1
 80049c8:	19ed      	adds	r5, r5, r7
 80049ca:	2c07      	cmp	r4, #7
 80049cc:	f8c6 8000 	str.w	r8, [r6]
 80049d0:	6077      	str	r7, [r6, #4]
 80049d2:	953b      	str	r5, [sp, #236]	; 0xec
 80049d4:	943a      	str	r4, [sp, #232]	; 0xe8
 80049d6:	dca4      	bgt.n	8004922 <_svfprintf_r+0x108a>
 80049d8:	3608      	adds	r6, #8
 80049da:	e7ad      	b.n	8004938 <_svfprintf_r+0x10a0>
 80049dc:	2c06      	cmp	r4, #6
 80049de:	bf28      	it	cs
 80049e0:	2406      	movcs	r4, #6
 80049e2:	495f      	ldr	r1, [pc, #380]	; (8004b60 <_svfprintf_r+0x12c8>)
 80049e4:	940d      	str	r4, [sp, #52]	; 0x34
 80049e6:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 80049ea:	900a      	str	r0, [sp, #40]	; 0x28
 80049ec:	970e      	str	r7, [sp, #56]	; 0x38
 80049ee:	9111      	str	r1, [sp, #68]	; 0x44
 80049f0:	f7ff ba01 	b.w	8003df6 <_svfprintf_r+0x55e>
 80049f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80049f6:	2b65      	cmp	r3, #101	; 0x65
 80049f8:	dd6f      	ble.n	8004ada <_svfprintf_r+0x1242>
 80049fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049fc:	9940      	ldr	r1, [sp, #256]	; 0x100
 80049fe:	2a00      	cmp	r2, #0
 8004a00:	d15e      	bne.n	8004ac0 <_svfprintf_r+0x1228>
 8004a02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004a04:	428a      	cmp	r2, r1
 8004a06:	dc3d      	bgt.n	8004a84 <_svfprintf_r+0x11ec>
 8004a08:	9b08      	ldr	r3, [sp, #32]
 8004a0a:	07da      	lsls	r2, r3, #31
 8004a0c:	d56c      	bpl.n	8004ae8 <_svfprintf_r+0x1250>
 8004a0e:	1c4b      	adds	r3, r1, #1
 8004a10:	ea23 70e3 	bic.w	r0, r3, r3, asr #31
 8004a14:	2267      	movs	r2, #103	; 0x67
 8004a16:	930d      	str	r3, [sp, #52]	; 0x34
 8004a18:	900a      	str	r0, [sp, #40]	; 0x28
 8004a1a:	9215      	str	r2, [sp, #84]	; 0x54
 8004a1c:	9116      	str	r1, [sp, #88]	; 0x58
 8004a1e:	e74d      	b.n	80048bc <_svfprintf_r+0x1024>
 8004a20:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8004a22:	429f      	cmp	r7, r3
 8004a24:	bf98      	it	ls
 8004a26:	461f      	movls	r7, r3
 8004a28:	f67f aee4 	bls.w	80047f4 <_svfprintf_r+0xf5c>
 8004a2c:	2230      	movs	r2, #48	; 0x30
 8004a2e:	f803 2b01 	strb.w	r2, [r3], #1
 8004a32:	42bb      	cmp	r3, r7
 8004a34:	9342      	str	r3, [sp, #264]	; 0x108
 8004a36:	d1fa      	bne.n	8004a2e <_svfprintf_r+0x1196>
 8004a38:	e6dc      	b.n	80047f4 <_svfprintf_r+0xf5c>
 8004a3a:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
 8004a3e:	9012      	str	r0, [sp, #72]	; 0x48
 8004a40:	920a      	str	r2, [sp, #40]	; 0x28
 8004a42:	f89d 110f 	ldrb.w	r1, [sp, #271]	; 0x10f
 8004a46:	970e      	str	r7, [sp, #56]	; 0x38
 8004a48:	940d      	str	r4, [sp, #52]	; 0x34
 8004a4a:	9016      	str	r0, [sp, #88]	; 0x58
 8004a4c:	f7ff b892 	b.w	8003b74 <_svfprintf_r+0x2dc>
 8004a50:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004a52:	4651      	mov	r1, sl
 8004a54:	465a      	mov	r2, fp
 8004a56:	f002 fa91 	bl	8006f7c <__ssprint_r>
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	f47e aff3 	bne.w	8003a46 <_svfprintf_r+0x1ae>
 8004a60:	9f40      	ldr	r7, [sp, #256]	; 0x100
 8004a62:	9d3b      	ldr	r5, [sp, #236]	; 0xec
 8004a64:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8004a66:	ae1f      	add	r6, sp, #124	; 0x7c
 8004a68:	e621      	b.n	80046ae <_svfprintf_r+0xe16>
 8004a6a:	212d      	movs	r1, #45	; 0x2d
 8004a6c:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8004a70:	9112      	str	r1, [sp, #72]	; 0x48
 8004a72:	e673      	b.n	800475c <_svfprintf_r+0xec4>
 8004a74:	3130      	adds	r1, #48	; 0x30
 8004a76:	2330      	movs	r3, #48	; 0x30
 8004a78:	f88d 10f3 	strb.w	r1, [sp, #243]	; 0xf3
 8004a7c:	f88d 30f2 	strb.w	r3, [sp, #242]	; 0xf2
 8004a80:	a93d      	add	r1, sp, #244	; 0xf4
 8004a82:	e70a      	b.n	800489a <_svfprintf_r+0x1002>
 8004a84:	2900      	cmp	r1, #0
 8004a86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004a88:	bfd4      	ite	le
 8004a8a:	f1c1 0302 	rsble	r3, r1, #2
 8004a8e:	2301      	movgt	r3, #1
 8004a90:	181b      	adds	r3, r3, r0
 8004a92:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8004a96:	930d      	str	r3, [sp, #52]	; 0x34
 8004a98:	2367      	movs	r3, #103	; 0x67
 8004a9a:	920a      	str	r2, [sp, #40]	; 0x28
 8004a9c:	9315      	str	r3, [sp, #84]	; 0x54
 8004a9e:	e7bd      	b.n	8004a1c <_svfprintf_r+0x1184>
 8004aa0:	2401      	movs	r4, #1
 8004aa2:	940a      	str	r4, [sp, #40]	; 0x28
 8004aa4:	e651      	b.n	800474a <_svfprintf_r+0xeb2>
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2300      	movs	r3, #0
 8004aae:	f003 fe23 	bl	80086f8 <__aeabi_dcmpeq>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	f47f ae92 	bne.w	80047dc <_svfprintf_r+0xf44>
 8004ab8:	f1c9 0301 	rsb	r3, r9, #1
 8004abc:	9340      	str	r3, [sp, #256]	; 0x100
 8004abe:	e68e      	b.n	80047de <_svfprintf_r+0xf46>
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	dd38      	ble.n	8004b36 <_svfprintf_r+0x129e>
 8004ac4:	bb74      	cbnz	r4, 8004b24 <_svfprintf_r+0x128c>
 8004ac6:	9b08      	ldr	r3, [sp, #32]
 8004ac8:	07dd      	lsls	r5, r3, #31
 8004aca:	d42b      	bmi.n	8004b24 <_svfprintf_r+0x128c>
 8004acc:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004ad0:	2266      	movs	r2, #102	; 0x66
 8004ad2:	900a      	str	r0, [sp, #40]	; 0x28
 8004ad4:	910d      	str	r1, [sp, #52]	; 0x34
 8004ad6:	9215      	str	r2, [sp, #84]	; 0x54
 8004ad8:	e7a0      	b.n	8004a1c <_svfprintf_r+0x1184>
 8004ada:	9940      	ldr	r1, [sp, #256]	; 0x100
 8004adc:	e69a      	b.n	8004814 <_svfprintf_r+0xf7c>
 8004ade:	232d      	movs	r3, #45	; 0x2d
 8004ae0:	4249      	negs	r1, r1
 8004ae2:	f88d 30f1 	strb.w	r3, [sp, #241]	; 0xf1
 8004ae6:	e6a0      	b.n	800482a <_svfprintf_r+0xf92>
 8004ae8:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8004aec:	2267      	movs	r2, #103	; 0x67
 8004aee:	900a      	str	r0, [sp, #40]	; 0x28
 8004af0:	910d      	str	r1, [sp, #52]	; 0x34
 8004af2:	9215      	str	r2, [sp, #84]	; 0x54
 8004af4:	e792      	b.n	8004a1c <_svfprintf_r+0x1184>
 8004af6:	9908      	ldr	r1, [sp, #32]
 8004af8:	f011 0301 	ands.w	r3, r1, #1
 8004afc:	f47f aed6 	bne.w	80048ac <_svfprintf_r+0x1014>
 8004b00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b02:	9316      	str	r3, [sp, #88]	; 0x58
 8004b04:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004b08:	920a      	str	r2, [sp, #40]	; 0x28
 8004b0a:	e6d7      	b.n	80048bc <_svfprintf_r+0x1024>
 8004b0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004b0e:	680c      	ldr	r4, [r1, #0]
 8004b10:	1d0b      	adds	r3, r1, #4
 8004b12:	2c00      	cmp	r4, #0
 8004b14:	bfbc      	itt	lt
 8004b16:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004b18:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 8004b1c:	f6bf a985 	bge.w	8003e2a <_svfprintf_r+0x592>
 8004b20:	f7fe bf18 	b.w	8003954 <_svfprintf_r+0xbc>
 8004b24:	3401      	adds	r4, #1
 8004b26:	190c      	adds	r4, r1, r4
 8004b28:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8004b2c:	2066      	movs	r0, #102	; 0x66
 8004b2e:	940d      	str	r4, [sp, #52]	; 0x34
 8004b30:	930a      	str	r3, [sp, #40]	; 0x28
 8004b32:	9015      	str	r0, [sp, #84]	; 0x54
 8004b34:	e772      	b.n	8004a1c <_svfprintf_r+0x1184>
 8004b36:	b914      	cbnz	r4, 8004b3e <_svfprintf_r+0x12a6>
 8004b38:	9a08      	ldr	r2, [sp, #32]
 8004b3a:	07d0      	lsls	r0, r2, #31
 8004b3c:	d509      	bpl.n	8004b52 <_svfprintf_r+0x12ba>
 8004b3e:	3402      	adds	r4, #2
 8004b40:	e7f2      	b.n	8004b28 <_svfprintf_r+0x1290>
 8004b42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b44:	230c      	movs	r3, #12
 8004b46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b4a:	600b      	str	r3, [r1, #0]
 8004b4c:	920c      	str	r2, [sp, #48]	; 0x30
 8004b4e:	f7fe bf83 	b.w	8003a58 <_svfprintf_r+0x1c0>
 8004b52:	2001      	movs	r0, #1
 8004b54:	2266      	movs	r2, #102	; 0x66
 8004b56:	900a      	str	r0, [sp, #40]	; 0x28
 8004b58:	9215      	str	r2, [sp, #84]	; 0x54
 8004b5a:	900d      	str	r0, [sp, #52]	; 0x34
 8004b5c:	e75e      	b.n	8004a1c <_svfprintf_r+0x1184>
 8004b5e:	bf00      	nop
 8004b60:	08008d04 	.word	0x08008d04
 8004b64:	00000000 	.word	0x00000000

08004b68 <quorem>:
 8004b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6c:	6903      	ldr	r3, [r0, #16]
 8004b6e:	690d      	ldr	r5, [r1, #16]
 8004b70:	429d      	cmp	r5, r3
 8004b72:	4681      	mov	r9, r0
 8004b74:	f300 8084 	bgt.w	8004c80 <quorem+0x118>
 8004b78:	1ceb      	adds	r3, r5, #3
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	18cf      	adds	r7, r1, r3
 8004b7e:	18c3      	adds	r3, r0, r3
 8004b80:	687e      	ldr	r6, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	3601      	adds	r6, #1
 8004b86:	fbb3 f6f6 	udiv	r6, r3, r6
 8004b8a:	f101 0414 	add.w	r4, r1, #20
 8004b8e:	3d01      	subs	r5, #1
 8004b90:	3704      	adds	r7, #4
 8004b92:	f100 0814 	add.w	r8, r0, #20
 8004b96:	2e00      	cmp	r6, #0
 8004b98:	d03c      	beq.n	8004c14 <quorem+0xac>
 8004b9a:	f04f 0e00 	mov.w	lr, #0
 8004b9e:	4642      	mov	r2, r8
 8004ba0:	4623      	mov	r3, r4
 8004ba2:	46f4      	mov	ip, lr
 8004ba4:	f853 bb04 	ldr.w	fp, [r3], #4
 8004ba8:	6810      	ldr	r0, [r2, #0]
 8004baa:	fa1f fa8b 	uxth.w	sl, fp
 8004bae:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8004bb2:	fb06 ea0a 	mla	sl, r6, sl, lr
 8004bb6:	fb06 fe0b 	mul.w	lr, r6, fp
 8004bba:	eb0e 4e1a 	add.w	lr, lr, sl, lsr #16
 8004bbe:	fa1c fc80 	uxtah	ip, ip, r0
 8004bc2:	fa1f fb8e 	uxth.w	fp, lr
 8004bc6:	fa1f fa8a 	uxth.w	sl, sl
 8004bca:	ebca 0c0c 	rsb	ip, sl, ip
 8004bce:	ebcb 4010 	rsb	r0, fp, r0, lsr #16
 8004bd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004bd6:	fa1f fc8c 	uxth.w	ip, ip
 8004bda:	ea4c 4c00 	orr.w	ip, ip, r0, lsl #16
 8004bde:	429f      	cmp	r7, r3
 8004be0:	f842 cb04 	str.w	ip, [r2], #4
 8004be4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004be8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004bec:	d2da      	bcs.n	8004ba4 <quorem+0x3c>
 8004bee:	1d2a      	adds	r2, r5, #4
 8004bf0:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004bf4:	6858      	ldr	r0, [r3, #4]
 8004bf6:	b968      	cbnz	r0, 8004c14 <quorem+0xac>
 8004bf8:	4598      	cmp	r8, r3
 8004bfa:	d209      	bcs.n	8004c10 <quorem+0xa8>
 8004bfc:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004c00:	b112      	cbz	r2, 8004c08 <quorem+0xa0>
 8004c02:	e005      	b.n	8004c10 <quorem+0xa8>
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	b91a      	cbnz	r2, 8004c10 <quorem+0xa8>
 8004c08:	3b04      	subs	r3, #4
 8004c0a:	3d01      	subs	r5, #1
 8004c0c:	4598      	cmp	r8, r3
 8004c0e:	d3f9      	bcc.n	8004c04 <quorem+0x9c>
 8004c10:	f8c9 5010 	str.w	r5, [r9, #16]
 8004c14:	4648      	mov	r0, r9
 8004c16:	f001 fe4f 	bl	80068b8 <__mcmp>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	db2d      	blt.n	8004c7a <quorem+0x112>
 8004c1e:	3601      	adds	r6, #1
 8004c20:	4643      	mov	r3, r8
 8004c22:	f04f 0c00 	mov.w	ip, #0
 8004c26:	f854 2b04 	ldr.w	r2, [r4], #4
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	b291      	uxth	r1, r2
 8004c2e:	fa1f fa80 	uxth.w	sl, r0
 8004c32:	0c12      	lsrs	r2, r2, #16
 8004c34:	ebc1 010a 	rsb	r1, r1, sl
 8004c38:	4461      	add	r1, ip
 8004c3a:	ebc2 4210 	rsb	r2, r2, r0, lsr #16
 8004c3e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8004c42:	b289      	uxth	r1, r1
 8004c44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004c48:	42a7      	cmp	r7, r4
 8004c4a:	f843 1b04 	str.w	r1, [r3], #4
 8004c4e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c52:	d2e8      	bcs.n	8004c26 <quorem+0xbe>
 8004c54:	1d2a      	adds	r2, r5, #4
 8004c56:	eb09 0382 	add.w	r3, r9, r2, lsl #2
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	b969      	cbnz	r1, 8004c7a <quorem+0x112>
 8004c5e:	4598      	cmp	r8, r3
 8004c60:	d209      	bcs.n	8004c76 <quorem+0x10e>
 8004c62:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004c66:	b112      	cbz	r2, 8004c6e <quorem+0x106>
 8004c68:	e005      	b.n	8004c76 <quorem+0x10e>
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	b91a      	cbnz	r2, 8004c76 <quorem+0x10e>
 8004c6e:	3b04      	subs	r3, #4
 8004c70:	3d01      	subs	r5, #1
 8004c72:	4598      	cmp	r8, r3
 8004c74:	d3f9      	bcc.n	8004c6a <quorem+0x102>
 8004c76:	f8c9 5010 	str.w	r5, [r9, #16]
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c80:	2000      	movs	r0, #0
 8004c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c86:	bf00      	nop

08004c88 <_dtoa_r>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004c8e:	b09d      	sub	sp, #116	; 0x74
 8004c90:	4607      	mov	r7, r0
 8004c92:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8004c94:	4692      	mov	sl, r2
 8004c96:	469b      	mov	fp, r3
 8004c98:	b141      	cbz	r1, 8004cac <_dtoa_r+0x24>
 8004c9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	409a      	lsls	r2, r3
 8004ca0:	604b      	str	r3, [r1, #4]
 8004ca2:	608a      	str	r2, [r1, #8]
 8004ca4:	f001 fbd4 	bl	8006450 <_Bfree>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	643b      	str	r3, [r7, #64]	; 0x40
 8004cac:	f1bb 0500 	subs.w	r5, fp, #0
 8004cb0:	f2c0 80df 	blt.w	8004e72 <_dtoa_r+0x1ea>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8004cc0:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8004cc4:	402b      	ands	r3, r5
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	f000 80be 	beq.w	8004e48 <_dtoa_r+0x1c0>
 8004ccc:	4650      	mov	r0, sl
 8004cce:	4659      	mov	r1, fp
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	46d0      	mov	r8, sl
 8004cd6:	46d9      	mov	r9, fp
 8004cd8:	2401      	movs	r4, #1
 8004cda:	f003 fd0d 	bl	80086f8 <__aeabi_dcmpeq>
 8004cde:	b978      	cbnz	r0, 8004d00 <_dtoa_r+0x78>
 8004ce0:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004ce4:	d110      	bne.n	8004d08 <_dtoa_r+0x80>
 8004ce6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8004ce8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004cea:	2301      	movs	r3, #1
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	4d78      	ldr	r5, [pc, #480]	; (8004ed0 <_dtoa_r+0x248>)
 8004cf0:	b114      	cbz	r4, 8004cf8 <_dtoa_r+0x70>
 8004cf2:	4d78      	ldr	r5, [pc, #480]	; (8004ed4 <_dtoa_r+0x24c>)
 8004cf4:	6025      	str	r5, [r4, #0]
 8004cf6:	3d01      	subs	r5, #1
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	b01d      	add	sp, #116	; 0x74
 8004cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d00:	2400      	movs	r4, #0
 8004d02:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004d06:	d0ee      	beq.n	8004ce6 <_dtoa_r+0x5e>
 8004d08:	a91b      	add	r1, sp, #108	; 0x6c
 8004d0a:	9100      	str	r1, [sp, #0]
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	a91a      	add	r1, sp, #104	; 0x68
 8004d10:	4642      	mov	r2, r8
 8004d12:	464b      	mov	r3, r9
 8004d14:	9101      	str	r1, [sp, #4]
 8004d16:	f001 fed1 	bl	8006abc <__d2b>
 8004d1a:	f3c5 540a 	ubfx	r4, r5, #20, #11
 8004d1e:	900a      	str	r0, [sp, #40]	; 0x28
 8004d20:	2c00      	cmp	r4, #0
 8004d22:	f040 80b5 	bne.w	8004e90 <_dtoa_r+0x208>
 8004d26:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004d28:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8004d2a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004d2e:	1934      	adds	r4, r6, r4
 8004d30:	429c      	cmp	r4, r3
 8004d32:	f2c0 8281 	blt.w	8005238 <_dtoa_r+0x5b0>
 8004d36:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 8004d3a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 8004d3e:	1b1b      	subs	r3, r3, r4
 8004d40:	f204 4212 	addw	r2, r4, #1042	; 0x412
 8004d44:	fa15 f303 	lsls.w	r3, r5, r3
 8004d48:	fa2a f002 	lsr.w	r0, sl, r2
 8004d4c:	4318      	orrs	r0, r3
 8004d4e:	f003 f9f5 	bl	800813c <__aeabi_ui2d>
 8004d52:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004d56:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004d58:	2501      	movs	r5, #1
 8004d5a:	f1a0 70f8 	sub.w	r0, r0, #32505856	; 0x1f00000
 8004d5e:	900d      	str	r0, [sp, #52]	; 0x34
 8004d60:	3c01      	subs	r4, #1
 8004d62:	9516      	str	r5, [sp, #88]	; 0x58
 8004d64:	2300      	movs	r3, #0
 8004d66:	2200      	movs	r2, #0
 8004d68:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8004d6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d70:	f003 f8a6 	bl	8007ec0 <__aeabi_dsub>
 8004d74:	a350      	add	r3, pc, #320	; (adr r3, 8004eb8 <_dtoa_r+0x230>)
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f003 fa55 	bl	8008228 <__aeabi_dmul>
 8004d7e:	a350      	add	r3, pc, #320	; (adr r3, 8004ec0 <_dtoa_r+0x238>)
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f003 f89e 	bl	8007ec4 <__adddf3>
 8004d88:	4680      	mov	r8, r0
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4689      	mov	r9, r1
 8004d8e:	f003 f9e5 	bl	800815c <__aeabi_i2d>
 8004d92:	a34d      	add	r3, pc, #308	; (adr r3, 8004ec8 <_dtoa_r+0x240>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f003 fa46 	bl	8008228 <__aeabi_dmul>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4640      	mov	r0, r8
 8004da2:	4649      	mov	r1, r9
 8004da4:	f003 f88e 	bl	8007ec4 <__adddf3>
 8004da8:	4680      	mov	r8, r0
 8004daa:	4689      	mov	r9, r1
 8004dac:	f003 fcd6 	bl	800875c <__aeabi_d2iz>
 8004db0:	4649      	mov	r1, r9
 8004db2:	9005      	str	r0, [sp, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	4640      	mov	r0, r8
 8004db8:	2300      	movs	r3, #0
 8004dba:	f003 fca7 	bl	800870c <__aeabi_dcmplt>
 8004dbe:	b150      	cbz	r0, 8004dd6 <_dtoa_r+0x14e>
 8004dc0:	9805      	ldr	r0, [sp, #20]
 8004dc2:	f003 f9cb 	bl	800815c <__aeabi_i2d>
 8004dc6:	4642      	mov	r2, r8
 8004dc8:	464b      	mov	r3, r9
 8004dca:	f003 fc95 	bl	80086f8 <__aeabi_dcmpeq>
 8004dce:	b910      	cbnz	r0, 8004dd6 <_dtoa_r+0x14e>
 8004dd0:	9d05      	ldr	r5, [sp, #20]
 8004dd2:	3d01      	subs	r5, #1
 8004dd4:	9505      	str	r5, [sp, #20]
 8004dd6:	9d05      	ldr	r5, [sp, #20]
 8004dd8:	2d16      	cmp	r5, #22
 8004dda:	f200 815e 	bhi.w	800509a <_dtoa_r+0x412>
 8004dde:	4b3e      	ldr	r3, [pc, #248]	; (8004ed8 <_dtoa_r+0x250>)
 8004de0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004de4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004de8:	4652      	mov	r2, sl
 8004dea:	465b      	mov	r3, fp
 8004dec:	f003 fcac 	bl	8008748 <__aeabi_dcmpgt>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	f000 8229 	beq.w	8005248 <_dtoa_r+0x5c0>
 8004df6:	9d05      	ldr	r5, [sp, #20]
 8004df8:	3d01      	subs	r5, #1
 8004dfa:	9505      	str	r5, [sp, #20]
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	9514      	str	r5, [sp, #80]	; 0x50
 8004e00:	1b34      	subs	r4, r6, r4
 8004e02:	3c01      	subs	r4, #1
 8004e04:	f100 8213 	bmi.w	800522e <_dtoa_r+0x5a6>
 8004e08:	2500      	movs	r5, #0
 8004e0a:	940b      	str	r4, [sp, #44]	; 0x2c
 8004e0c:	950f      	str	r5, [sp, #60]	; 0x3c
 8004e0e:	9c05      	ldr	r4, [sp, #20]
 8004e10:	2c00      	cmp	r4, #0
 8004e12:	f2c0 8203 	blt.w	800521c <_dtoa_r+0x594>
 8004e16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004e18:	9413      	str	r4, [sp, #76]	; 0x4c
 8004e1a:	192d      	adds	r5, r5, r4
 8004e1c:	2400      	movs	r4, #0
 8004e1e:	950b      	str	r5, [sp, #44]	; 0x2c
 8004e20:	9410      	str	r4, [sp, #64]	; 0x40
 8004e22:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004e24:	2d09      	cmp	r5, #9
 8004e26:	d85d      	bhi.n	8004ee4 <_dtoa_r+0x25c>
 8004e28:	2401      	movs	r4, #1
 8004e2a:	2d05      	cmp	r5, #5
 8004e2c:	dd02      	ble.n	8004e34 <_dtoa_r+0x1ac>
 8004e2e:	3d04      	subs	r5, #4
 8004e30:	9526      	str	r5, [sp, #152]	; 0x98
 8004e32:	2400      	movs	r4, #0
 8004e34:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8004e36:	1eab      	subs	r3, r5, #2
 8004e38:	2b03      	cmp	r3, #3
 8004e3a:	d855      	bhi.n	8004ee8 <_dtoa_r+0x260>
 8004e3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e40:	036d0382 	.word	0x036d0382
 8004e44:	03850246 	.word	0x03850246
 8004e48:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8004e4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	f1ba 0f00 	cmp.w	sl, #0
 8004e54:	d013      	beq.n	8004e7e <_dtoa_r+0x1f6>
 8004e56:	4d21      	ldr	r5, [pc, #132]	; (8004edc <_dtoa_r+0x254>)
 8004e58:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004e5a:	2c00      	cmp	r4, #0
 8004e5c:	f43f af4c 	beq.w	8004cf8 <_dtoa_r+0x70>
 8004e60:	78eb      	ldrb	r3, [r5, #3]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8117 	beq.w	8005096 <_dtoa_r+0x40e>
 8004e68:	f105 0308 	add.w	r3, r5, #8
 8004e6c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	e742      	b.n	8004cf8 <_dtoa_r+0x70>
 8004e72:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8004e76:	2301      	movs	r3, #1
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	46ab      	mov	fp, r5
 8004e7c:	e71c      	b.n	8004cb8 <_dtoa_r+0x30>
 8004e7e:	4b17      	ldr	r3, [pc, #92]	; (8004edc <_dtoa_r+0x254>)
 8004e80:	4a17      	ldr	r2, [pc, #92]	; (8004ee0 <_dtoa_r+0x258>)
 8004e82:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004e86:	2d00      	cmp	r5, #0
 8004e88:	bf0c      	ite	eq
 8004e8a:	4615      	moveq	r5, r2
 8004e8c:	461d      	movne	r5, r3
 8004e8e:	e7e3      	b.n	8004e58 <_dtoa_r+0x1d0>
 8004e90:	4649      	mov	r1, r9
 8004e92:	4640      	mov	r0, r8
 8004e94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e9a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8004e9c:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
 8004ea0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ea4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004ea8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004eac:	2500      	movs	r5, #0
 8004eae:	930d      	str	r3, [sp, #52]	; 0x34
 8004eb0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004eb4:	9516      	str	r5, [sp, #88]	; 0x58
 8004eb6:	e755      	b.n	8004d64 <_dtoa_r+0xdc>
 8004eb8:	636f4361 	.word	0x636f4361
 8004ebc:	3fd287a7 	.word	0x3fd287a7
 8004ec0:	8b60c8b3 	.word	0x8b60c8b3
 8004ec4:	3fc68a28 	.word	0x3fc68a28
 8004ec8:	509f79fb 	.word	0x509f79fb
 8004ecc:	3fd34413 	.word	0x3fd34413
 8004ed0:	08008d0c 	.word	0x08008d0c
 8004ed4:	08008d0d 	.word	0x08008d0d
 8004ed8:	08008b40 	.word	0x08008b40
 8004edc:	08008d1c 	.word	0x08008d1c
 8004ee0:	08008d10 	.word	0x08008d10
 8004ee4:	2400      	movs	r4, #0
 8004ee6:	9426      	str	r4, [sp, #152]	; 0x98
 8004ee8:	2400      	movs	r4, #0
 8004eea:	647c      	str	r4, [r7, #68]	; 0x44
 8004eec:	4638      	mov	r0, r7
 8004eee:	4621      	mov	r1, r4
 8004ef0:	f001 fa88 	bl	8006404 <_Balloc>
 8004ef4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004ef8:	950e      	str	r5, [sp, #56]	; 0x38
 8004efa:	2501      	movs	r5, #1
 8004efc:	9512      	str	r5, [sp, #72]	; 0x48
 8004efe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004f02:	9009      	str	r0, [sp, #36]	; 0x24
 8004f04:	6438      	str	r0, [r7, #64]	; 0x40
 8004f06:	9515      	str	r5, [sp, #84]	; 0x54
 8004f08:	9427      	str	r4, [sp, #156]	; 0x9c
 8004f0a:	9c05      	ldr	r4, [sp, #20]
 8004f0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f0e:	2c0e      	cmp	r4, #14
 8004f10:	bfcc      	ite	gt
 8004f12:	2500      	movgt	r5, #0
 8004f14:	2501      	movle	r5, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bfb8      	it	lt
 8004f1a:	2500      	movlt	r5, #0
 8004f1c:	2d00      	cmp	r5, #0
 8004f1e:	f000 80c1 	beq.w	80050a4 <_dtoa_r+0x41c>
 8004f22:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8004f24:	4b5e      	ldr	r3, [pc, #376]	; (80050a0 <_dtoa_r+0x418>)
 8004f26:	0fe5      	lsrs	r5, r4, #31
 8004f28:	9c05      	ldr	r4, [sp, #20]
 8004f2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004f34:	2c00      	cmp	r4, #0
 8004f36:	bfcc      	ite	gt
 8004f38:	2500      	movgt	r5, #0
 8004f3a:	f005 0501 	andle.w	r5, r5, #1
 8004f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	f040 81a8 	bne.w	8005298 <_dtoa_r+0x610>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4650      	mov	r0, sl
 8004f4e:	4659      	mov	r1, fp
 8004f50:	f003 fa94 	bl	800847c <__aeabi_ddiv>
 8004f54:	f003 fc02 	bl	800875c <__aeabi_d2iz>
 8004f58:	4606      	mov	r6, r0
 8004f5a:	f003 f8ff 	bl	800815c <__aeabi_i2d>
 8004f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f62:	f003 f961 	bl	8008228 <__aeabi_dmul>
 8004f66:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	4659      	mov	r1, fp
 8004f6e:	4650      	mov	r0, sl
 8004f70:	f002 ffa6 	bl	8007ec0 <__aeabi_dsub>
 8004f74:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8004f78:	f804 3b01 	strb.w	r3, [r4], #1
 8004f7c:	9411      	str	r4, [sp, #68]	; 0x44
 8004f7e:	46a0      	mov	r8, r4
 8004f80:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004f82:	2c01      	cmp	r4, #1
 8004f84:	4682      	mov	sl, r0
 8004f86:	468b      	mov	fp, r1
 8004f88:	d04c      	beq.n	8005024 <_dtoa_r+0x39c>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8004f92:	f003 f949 	bl	8008228 <__aeabi_dmul>
 8004f96:	2200      	movs	r2, #0
 8004f98:	2300      	movs	r3, #0
 8004f9a:	4682      	mov	sl, r0
 8004f9c:	468b      	mov	fp, r1
 8004f9e:	2401      	movs	r4, #1
 8004fa0:	f003 fbaa 	bl	80086f8 <__aeabi_dcmpeq>
 8004fa4:	b100      	cbz	r0, 8004fa8 <_dtoa_r+0x320>
 8004fa6:	462c      	mov	r4, r5
 8004fa8:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004fac:	f000 8575 	beq.w	8005a9a <_dtoa_r+0xe12>
 8004fb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004fb2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004fb4:	1ca5      	adds	r5, r4, #2
 8004fb6:	eb04 0900 	add.w	r9, r4, r0
 8004fba:	e00d      	b.n	8004fd8 <_dtoa_r+0x350>
 8004fbc:	f003 f934 	bl	8008228 <__aeabi_dmul>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	4682      	mov	sl, r0
 8004fc6:	468b      	mov	fp, r1
 8004fc8:	f003 fb96 	bl	80086f8 <__aeabi_dcmpeq>
 8004fcc:	b100      	cbz	r0, 8004fd0 <_dtoa_r+0x348>
 8004fce:	2400      	movs	r4, #0
 8004fd0:	f014 0fff 	tst.w	r4, #255	; 0xff
 8004fd4:	f000 8423 	beq.w	800581e <_dtoa_r+0xb96>
 8004fd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fdc:	4650      	mov	r0, sl
 8004fde:	4659      	mov	r1, fp
 8004fe0:	f003 fa4c 	bl	800847c <__aeabi_ddiv>
 8004fe4:	f003 fbba 	bl	800875c <__aeabi_d2iz>
 8004fe8:	4606      	mov	r6, r0
 8004fea:	f003 f8b7 	bl	800815c <__aeabi_i2d>
 8004fee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ff2:	f003 f919 	bl	8008228 <__aeabi_dmul>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4650      	mov	r0, sl
 8004ffc:	4659      	mov	r1, fp
 8004ffe:	f002 ff5f 	bl	8007ec0 <__aeabi_dsub>
 8005002:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8005006:	2300      	movs	r3, #0
 8005008:	2200      	movs	r2, #0
 800500a:	454d      	cmp	r5, r9
 800500c:	f805 4c01 	strb.w	r4, [r5, #-1]
 8005010:	46a8      	mov	r8, r5
 8005012:	4682      	mov	sl, r0
 8005014:	468b      	mov	fp, r1
 8005016:	f2c4 0324 	movt	r3, #16420	; 0x4024
 800501a:	f04f 0401 	mov.w	r4, #1
 800501e:	f105 0501 	add.w	r5, r5, #1
 8005022:	d1cb      	bne.n	8004fbc <_dtoa_r+0x334>
 8005024:	4652      	mov	r2, sl
 8005026:	465b      	mov	r3, fp
 8005028:	4650      	mov	r0, sl
 800502a:	4659      	mov	r1, fp
 800502c:	f002 ff4a 	bl	8007ec4 <__adddf3>
 8005030:	4604      	mov	r4, r0
 8005032:	460d      	mov	r5, r1
 8005034:	4622      	mov	r2, r4
 8005036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800503a:	462b      	mov	r3, r5
 800503c:	f003 fb66 	bl	800870c <__aeabi_dcmplt>
 8005040:	b958      	cbnz	r0, 800505a <_dtoa_r+0x3d2>
 8005042:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005046:	4622      	mov	r2, r4
 8005048:	462b      	mov	r3, r5
 800504a:	f003 fb55 	bl	80086f8 <__aeabi_dcmpeq>
 800504e:	2800      	cmp	r0, #0
 8005050:	f000 83e5 	beq.w	800581e <_dtoa_r+0xb96>
 8005054:	07f3      	lsls	r3, r6, #31
 8005056:	f140 83e2 	bpl.w	800581e <_dtoa_r+0xb96>
 800505a:	9c05      	ldr	r4, [sp, #20]
 800505c:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 8005060:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005062:	9417      	str	r4, [sp, #92]	; 0x5c
 8005064:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005066:	e003      	b.n	8005070 <_dtoa_r+0x3e8>
 8005068:	f818 6c02 	ldrb.w	r6, [r8, #-2]
 800506c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005070:	2e39      	cmp	r6, #57	; 0x39
 8005072:	4643      	mov	r3, r8
 8005074:	f040 8489 	bne.w	800598a <_dtoa_r+0xd02>
 8005078:	4590      	cmp	r8, r2
 800507a:	d1f5      	bne.n	8005068 <_dtoa_r+0x3e0>
 800507c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800507e:	9309      	str	r3, [sp, #36]	; 0x24
 8005080:	3401      	adds	r4, #1
 8005082:	9405      	str	r4, [sp, #20]
 8005084:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005086:	2330      	movs	r3, #48	; 0x30
 8005088:	f804 3c01 	strb.w	r3, [r4, #-1]
 800508c:	2231      	movs	r2, #49	; 0x31
 800508e:	4623      	mov	r3, r4
 8005090:	f803 2c01 	strb.w	r2, [r3, #-1]
 8005094:	e0b0      	b.n	80051f8 <_dtoa_r+0x570>
 8005096:	1ceb      	adds	r3, r5, #3
 8005098:	e6e8      	b.n	8004e6c <_dtoa_r+0x1e4>
 800509a:	2501      	movs	r5, #1
 800509c:	9514      	str	r5, [sp, #80]	; 0x50
 800509e:	e6af      	b.n	8004e00 <_dtoa_r+0x178>
 80050a0:	08008b40 	.word	0x08008b40
 80050a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80050a6:	2c00      	cmp	r4, #0
 80050a8:	f040 80d1 	bne.w	800524e <_dtoa_r+0x5c6>
 80050ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80050b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80050b2:	9306      	str	r3, [sp, #24]
 80050b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80050b6:	2800      	cmp	r0, #0
 80050b8:	bfc8      	it	gt
 80050ba:	2c00      	cmpgt	r4, #0
 80050bc:	dd09      	ble.n	80050d2 <_dtoa_r+0x44a>
 80050be:	4603      	mov	r3, r0
 80050c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	bfa8      	it	ge
 80050c6:	4623      	movge	r3, r4
 80050c8:	1ac9      	subs	r1, r1, r3
 80050ca:	1ac0      	subs	r0, r0, r3
 80050cc:	910f      	str	r1, [sp, #60]	; 0x3c
 80050ce:	1ae4      	subs	r4, r4, r3
 80050d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80050d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	dd1a      	ble.n	800510e <_dtoa_r+0x486>
 80050d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 841d 	beq.w	800591a <_dtoa_r+0xc92>
 80050e0:	2d00      	cmp	r5, #0
 80050e2:	dd10      	ble.n	8005106 <_dtoa_r+0x47e>
 80050e4:	9906      	ldr	r1, [sp, #24]
 80050e6:	462a      	mov	r2, r5
 80050e8:	4638      	mov	r0, r7
 80050ea:	f001 fb39 	bl	8006760 <__pow5mult>
 80050ee:	9006      	str	r0, [sp, #24]
 80050f0:	9906      	ldr	r1, [sp, #24]
 80050f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050f4:	4638      	mov	r0, r7
 80050f6:	f001 fa9b 	bl	8006630 <__multiply>
 80050fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050fc:	4606      	mov	r6, r0
 80050fe:	4638      	mov	r0, r7
 8005100:	f001 f9a6 	bl	8006450 <_Bfree>
 8005104:	960a      	str	r6, [sp, #40]	; 0x28
 8005106:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005108:	1b42      	subs	r2, r0, r5
 800510a:	f040 8429 	bne.w	8005960 <_dtoa_r+0xcd8>
 800510e:	2101      	movs	r1, #1
 8005110:	4638      	mov	r0, r7
 8005112:	f001 fa83 	bl	800661c <__i2b>
 8005116:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005118:	2d00      	cmp	r5, #0
 800511a:	4606      	mov	r6, r0
 800511c:	dd05      	ble.n	800512a <_dtoa_r+0x4a2>
 800511e:	4631      	mov	r1, r6
 8005120:	4638      	mov	r0, r7
 8005122:	462a      	mov	r2, r5
 8005124:	f001 fb1c 	bl	8006760 <__pow5mult>
 8005128:	4606      	mov	r6, r0
 800512a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800512c:	2d01      	cmp	r5, #1
 800512e:	f340 820f 	ble.w	8005550 <_dtoa_r+0x8c8>
 8005132:	2500      	movs	r5, #0
 8005134:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005136:	2301      	movs	r3, #1
 8005138:	2800      	cmp	r0, #0
 800513a:	f040 838c 	bne.w	8005856 <_dtoa_r+0xbce>
 800513e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005140:	185b      	adds	r3, r3, r1
 8005142:	f013 031f 	ands.w	r3, r3, #31
 8005146:	f000 82cb 	beq.w	80056e0 <_dtoa_r+0xa58>
 800514a:	f1c3 0220 	rsb	r2, r3, #32
 800514e:	2a04      	cmp	r2, #4
 8005150:	f340 84bf 	ble.w	8005ad2 <_dtoa_r+0xe4a>
 8005154:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005156:	f1c3 031c 	rsb	r3, r3, #28
 800515a:	18d2      	adds	r2, r2, r3
 800515c:	18c9      	adds	r1, r1, r3
 800515e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005160:	18e4      	adds	r4, r4, r3
 8005162:	910b      	str	r1, [sp, #44]	; 0x2c
 8005164:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005166:	2a00      	cmp	r2, #0
 8005168:	dd04      	ble.n	8005174 <_dtoa_r+0x4ec>
 800516a:	4638      	mov	r0, r7
 800516c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800516e:	f001 fb43 	bl	80067f8 <__lshift>
 8005172:	900a      	str	r0, [sp, #40]	; 0x28
 8005174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	dd05      	ble.n	8005186 <_dtoa_r+0x4fe>
 800517a:	4631      	mov	r1, r6
 800517c:	4638      	mov	r0, r7
 800517e:	461a      	mov	r2, r3
 8005180:	f001 fb3a 	bl	80067f8 <__lshift>
 8005184:	4606      	mov	r6, r0
 8005186:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005188:	2800      	cmp	r0, #0
 800518a:	f040 834c 	bne.w	8005826 <_dtoa_r+0xb9e>
 800518e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005190:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005192:	2900      	cmp	r1, #0
 8005194:	bfcc      	ite	gt
 8005196:	2300      	movgt	r3, #0
 8005198:	2301      	movle	r3, #1
 800519a:	2a02      	cmp	r2, #2
 800519c:	bfd8      	it	le
 800519e:	2300      	movle	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8226 	beq.w	80055f2 <_dtoa_r+0x96a>
 80051a6:	2900      	cmp	r1, #0
 80051a8:	f040 808a 	bne.w	80052c0 <_dtoa_r+0x638>
 80051ac:	4631      	mov	r1, r6
 80051ae:	2205      	movs	r2, #5
 80051b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051b2:	4638      	mov	r0, r7
 80051b4:	f001 f956 	bl	8006464 <__multadd>
 80051b8:	4606      	mov	r6, r0
 80051ba:	4631      	mov	r1, r6
 80051bc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051be:	f001 fb7b 	bl	80068b8 <__mcmp>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	dd7c      	ble.n	80052c0 <_dtoa_r+0x638>
 80051c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c8:	9c05      	ldr	r4, [sp, #20]
 80051ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051cc:	2231      	movs	r2, #49	; 0x31
 80051ce:	f803 2b01 	strb.w	r2, [r3], #1
 80051d2:	3401      	adds	r4, #1
 80051d4:	9405      	str	r4, [sp, #20]
 80051d6:	9309      	str	r3, [sp, #36]	; 0x24
 80051d8:	2400      	movs	r4, #0
 80051da:	4638      	mov	r0, r7
 80051dc:	4631      	mov	r1, r6
 80051de:	f001 f937 	bl	8006450 <_Bfree>
 80051e2:	9806      	ldr	r0, [sp, #24]
 80051e4:	b140      	cbz	r0, 80051f8 <_dtoa_r+0x570>
 80051e6:	4284      	cmp	r4, r0
 80051e8:	bf18      	it	ne
 80051ea:	2c00      	cmpne	r4, #0
 80051ec:	f040 8273 	bne.w	80056d6 <_dtoa_r+0xa4e>
 80051f0:	4638      	mov	r0, r7
 80051f2:	9906      	ldr	r1, [sp, #24]
 80051f4:	f001 f92c 	bl	8006450 <_Bfree>
 80051f8:	4638      	mov	r0, r7
 80051fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80051fc:	f001 f928 	bl	8006450 <_Bfree>
 8005200:	9c05      	ldr	r4, [sp, #20]
 8005202:	1c63      	adds	r3, r4, #1
 8005204:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005206:	2200      	movs	r2, #0
 8005208:	7022      	strb	r2, [r4, #0]
 800520a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005210:	2c00      	cmp	r4, #0
 8005212:	f43f ad71 	beq.w	8004cf8 <_dtoa_r+0x70>
 8005216:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005218:	6020      	str	r0, [r4, #0]
 800521a:	e56d      	b.n	8004cf8 <_dtoa_r+0x70>
 800521c:	9c05      	ldr	r4, [sp, #20]
 800521e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005220:	1b2d      	subs	r5, r5, r4
 8005222:	950f      	str	r5, [sp, #60]	; 0x3c
 8005224:	4265      	negs	r5, r4
 8005226:	2400      	movs	r4, #0
 8005228:	9510      	str	r5, [sp, #64]	; 0x40
 800522a:	9413      	str	r4, [sp, #76]	; 0x4c
 800522c:	e5f9      	b.n	8004e22 <_dtoa_r+0x19a>
 800522e:	4264      	negs	r4, r4
 8005230:	940f      	str	r4, [sp, #60]	; 0x3c
 8005232:	2400      	movs	r4, #0
 8005234:	940b      	str	r4, [sp, #44]	; 0x2c
 8005236:	e5ea      	b.n	8004e0e <_dtoa_r+0x186>
 8005238:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 800523c:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8005240:	1b00      	subs	r0, r0, r4
 8005242:	fa0a f000 	lsl.w	r0, sl, r0
 8005246:	e582      	b.n	8004d4e <_dtoa_r+0xc6>
 8005248:	2500      	movs	r5, #0
 800524a:	9514      	str	r5, [sp, #80]	; 0x50
 800524c:	e5d8      	b.n	8004e00 <_dtoa_r+0x178>
 800524e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8005250:	2c01      	cmp	r4, #1
 8005252:	f340 838f 	ble.w	8005974 <_dtoa_r+0xcec>
 8005256:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005258:	1e62      	subs	r2, r4, #1
 800525a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800525c:	4294      	cmp	r4, r2
 800525e:	bfbf      	itttt	lt
 8005260:	9c10      	ldrlt	r4, [sp, #64]	; 0x40
 8005262:	9210      	strlt	r2, [sp, #64]	; 0x40
 8005264:	ebc4 0302 	rsblt	r3, r4, r2
 8005268:	9c13      	ldrlt	r4, [sp, #76]	; 0x4c
 800526a:	bfb6      	itet	lt
 800526c:	18e4      	addlt	r4, r4, r3
 800526e:	ebc2 0504 	rsbge	r5, r2, r4
 8005272:	9413      	strlt	r4, [sp, #76]	; 0x4c
 8005274:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8005276:	2c00      	cmp	r4, #0
 8005278:	f2c0 838f 	blt.w	800599a <_dtoa_r+0xd12>
 800527c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800527e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005282:	18d2      	adds	r2, r2, r3
 8005284:	920f      	str	r2, [sp, #60]	; 0x3c
 8005286:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005288:	4638      	mov	r0, r7
 800528a:	18d2      	adds	r2, r2, r3
 800528c:	2101      	movs	r1, #1
 800528e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005290:	f001 f9c4 	bl	800661c <__i2b>
 8005294:	9006      	str	r0, [sp, #24]
 8005296:	e70d      	b.n	80050b4 <_dtoa_r+0x42c>
 8005298:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800529a:	2d00      	cmp	r5, #0
 800529c:	f040 8367 	bne.w	800596e <_dtoa_r+0xce6>
 80052a0:	2300      	movs	r3, #0
 80052a2:	2200      	movs	r2, #0
 80052a4:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80052a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ac:	f002 ffbc 	bl	8008228 <__aeabi_dmul>
 80052b0:	4652      	mov	r2, sl
 80052b2:	465b      	mov	r3, fp
 80052b4:	f003 fa3e 	bl	8008734 <__aeabi_dcmpge>
 80052b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80052ba:	9606      	str	r6, [sp, #24]
 80052bc:	2800      	cmp	r0, #0
 80052be:	d082      	beq.n	80051c6 <_dtoa_r+0x53e>
 80052c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80052c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80052c4:	43e4      	mvns	r4, r4
 80052c6:	9405      	str	r4, [sp, #20]
 80052c8:	2400      	movs	r4, #0
 80052ca:	e786      	b.n	80051da <_dtoa_r+0x552>
 80052cc:	2501      	movs	r5, #1
 80052ce:	9512      	str	r5, [sp, #72]	; 0x48
 80052d0:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80052d2:	2d00      	cmp	r5, #0
 80052d4:	f340 82d3 	ble.w	800587e <_dtoa_r+0xbf6>
 80052d8:	46a9      	mov	r9, r5
 80052da:	2d0e      	cmp	r5, #14
 80052dc:	bf8c      	ite	hi
 80052de:	2400      	movhi	r4, #0
 80052e0:	f004 0401 	andls.w	r4, r4, #1
 80052e4:	9515      	str	r5, [sp, #84]	; 0x54
 80052e6:	950e      	str	r5, [sp, #56]	; 0x38
 80052e8:	2100      	movs	r1, #0
 80052ea:	f1b9 0f17 	cmp.w	r9, #23
 80052ee:	6479      	str	r1, [r7, #68]	; 0x44
 80052f0:	d909      	bls.n	8005306 <_dtoa_r+0x67e>
 80052f2:	2201      	movs	r2, #1
 80052f4:	2304      	movs	r3, #4
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	f103 0014 	add.w	r0, r3, #20
 80052fc:	4611      	mov	r1, r2
 80052fe:	3201      	adds	r2, #1
 8005300:	4548      	cmp	r0, r9
 8005302:	d9f8      	bls.n	80052f6 <_dtoa_r+0x66e>
 8005304:	6479      	str	r1, [r7, #68]	; 0x44
 8005306:	4638      	mov	r0, r7
 8005308:	f001 f87c 	bl	8006404 <_Balloc>
 800530c:	9009      	str	r0, [sp, #36]	; 0x24
 800530e:	6438      	str	r0, [r7, #64]	; 0x40
 8005310:	2c00      	cmp	r4, #0
 8005312:	f43f adfa 	beq.w	8004f0a <_dtoa_r+0x282>
 8005316:	9c05      	ldr	r4, [sp, #20]
 8005318:	4652      	mov	r2, sl
 800531a:	465b      	mov	r3, fp
 800531c:	2c00      	cmp	r4, #0
 800531e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005322:	f340 81f8 	ble.w	8005716 <_dtoa_r+0xa8e>
 8005326:	4b97      	ldr	r3, [pc, #604]	; (8005584 <_dtoa_r+0x8fc>)
 8005328:	f004 020f 	and.w	r2, r4, #15
 800532c:	1124      	asrs	r4, r4, #4
 800532e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005332:	2602      	movs	r6, #2
 8005334:	06e2      	lsls	r2, r4, #27
 8005336:	e9d3 8900 	ldrd	r8, r9, [r3]
 800533a:	d50b      	bpl.n	8005354 <_dtoa_r+0x6cc>
 800533c:	4b92      	ldr	r3, [pc, #584]	; (8005588 <_dtoa_r+0x900>)
 800533e:	4650      	mov	r0, sl
 8005340:	4659      	mov	r1, fp
 8005342:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005346:	f003 f899 	bl	800847c <__aeabi_ddiv>
 800534a:	f004 040f 	and.w	r4, r4, #15
 800534e:	4682      	mov	sl, r0
 8005350:	468b      	mov	fp, r1
 8005352:	2603      	movs	r6, #3
 8005354:	b174      	cbz	r4, 8005374 <_dtoa_r+0x6ec>
 8005356:	4d8c      	ldr	r5, [pc, #560]	; (8005588 <_dtoa_r+0x900>)
 8005358:	4640      	mov	r0, r8
 800535a:	4649      	mov	r1, r9
 800535c:	07e3      	lsls	r3, r4, #31
 800535e:	d504      	bpl.n	800536a <_dtoa_r+0x6e2>
 8005360:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005364:	f002 ff60 	bl	8008228 <__aeabi_dmul>
 8005368:	3601      	adds	r6, #1
 800536a:	3508      	adds	r5, #8
 800536c:	1064      	asrs	r4, r4, #1
 800536e:	d1f5      	bne.n	800535c <_dtoa_r+0x6d4>
 8005370:	4680      	mov	r8, r0
 8005372:	4689      	mov	r9, r1
 8005374:	4650      	mov	r0, sl
 8005376:	4659      	mov	r1, fp
 8005378:	4642      	mov	r2, r8
 800537a:	464b      	mov	r3, r9
 800537c:	f003 f87e 	bl	800847c <__aeabi_ddiv>
 8005380:	4682      	mov	sl, r0
 8005382:	468b      	mov	fp, r1
 8005384:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005386:	2c00      	cmp	r4, #0
 8005388:	f000 8100 	beq.w	800558c <_dtoa_r+0x904>
 800538c:	2300      	movs	r3, #0
 800538e:	4650      	mov	r0, sl
 8005390:	4659      	mov	r1, fp
 8005392:	2200      	movs	r2, #0
 8005394:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8005398:	2401      	movs	r4, #1
 800539a:	f003 f9b7 	bl	800870c <__aeabi_dcmplt>
 800539e:	b900      	cbnz	r0, 80053a2 <_dtoa_r+0x71a>
 80053a0:	2400      	movs	r4, #0
 80053a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	bfd4      	ite	le
 80053a8:	2400      	movle	r4, #0
 80053aa:	f004 0401 	andgt.w	r4, r4, #1
 80053ae:	2c00      	cmp	r4, #0
 80053b0:	f000 80ec 	beq.w	800558c <_dtoa_r+0x904>
 80053b4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80053b6:	2c00      	cmp	r4, #0
 80053b8:	f340 819b 	ble.w	80056f2 <_dtoa_r+0xa6a>
 80053bc:	2300      	movs	r3, #0
 80053be:	2200      	movs	r2, #0
 80053c0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80053c4:	4650      	mov	r0, sl
 80053c6:	4659      	mov	r1, fp
 80053c8:	f002 ff2e 	bl	8008228 <__aeabi_dmul>
 80053cc:	4682      	mov	sl, r0
 80053ce:	1c70      	adds	r0, r6, #1
 80053d0:	468b      	mov	fp, r1
 80053d2:	f002 fec3 	bl	800815c <__aeabi_i2d>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4650      	mov	r0, sl
 80053dc:	4659      	mov	r1, fp
 80053de:	f002 ff23 	bl	8008228 <__aeabi_dmul>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2200      	movs	r2, #0
 80053e6:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80053ea:	f002 fd6b 	bl	8007ec4 <__adddf3>
 80053ee:	9d05      	ldr	r5, [sp, #20]
 80053f0:	3d01      	subs	r5, #1
 80053f2:	9517      	str	r5, [sp, #92]	; 0x5c
 80053f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80053f6:	4680      	mov	r8, r0
 80053f8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80053fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80053fe:	2c00      	cmp	r4, #0
 8005400:	f000 81b0 	beq.w	8005764 <_dtoa_r+0xadc>
 8005404:	4b5f      	ldr	r3, [pc, #380]	; (8005584 <_dtoa_r+0x8fc>)
 8005406:	2100      	movs	r1, #0
 8005408:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800540c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005410:	2000      	movs	r0, #0
 8005412:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005416:	f003 f831 	bl	800847c <__aeabi_ddiv>
 800541a:	4642      	mov	r2, r8
 800541c:	464b      	mov	r3, r9
 800541e:	f002 fd4f 	bl	8007ec0 <__aeabi_dsub>
 8005422:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005426:	4659      	mov	r1, fp
 8005428:	4650      	mov	r0, sl
 800542a:	f003 f997 	bl	800875c <__aeabi_d2iz>
 800542e:	4606      	mov	r6, r0
 8005430:	f002 fe94 	bl	800815c <__aeabi_i2d>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4650      	mov	r0, sl
 800543a:	4659      	mov	r1, fp
 800543c:	f002 fd40 	bl	8007ec0 <__aeabi_dsub>
 8005440:	3630      	adds	r6, #48	; 0x30
 8005442:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005444:	b2f6      	uxtb	r6, r6
 8005446:	4682      	mov	sl, r0
 8005448:	468b      	mov	fp, r1
 800544a:	f804 6b01 	strb.w	r6, [r4], #1
 800544e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005452:	4652      	mov	r2, sl
 8005454:	465b      	mov	r3, fp
 8005456:	9411      	str	r4, [sp, #68]	; 0x44
 8005458:	46a0      	mov	r8, r4
 800545a:	f003 f975 	bl	8008748 <__aeabi_dcmpgt>
 800545e:	2800      	cmp	r0, #0
 8005460:	f040 8325 	bne.w	8005aae <_dtoa_r+0xe26>
 8005464:	2100      	movs	r1, #0
 8005466:	4652      	mov	r2, sl
 8005468:	465b      	mov	r3, fp
 800546a:	2000      	movs	r0, #0
 800546c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8005470:	f002 fd26 	bl	8007ec0 <__aeabi_dsub>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800547c:	f003 f964 	bl	8008748 <__aeabi_dcmpgt>
 8005480:	2800      	cmp	r0, #0
 8005482:	f040 827f 	bne.w	8005984 <_dtoa_r+0xcfc>
 8005486:	2d01      	cmp	r5, #1
 8005488:	f340 8133 	ble.w	80056f2 <_dtoa_r+0xa6a>
 800548c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800548e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005490:	1945      	adds	r5, r0, r5
 8005492:	e00f      	b.n	80054b4 <_dtoa_r+0x82c>
 8005494:	2100      	movs	r1, #0
 8005496:	2000      	movs	r0, #0
 8005498:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 800549c:	f002 fd10 	bl	8007ec0 <__aeabi_dsub>
 80054a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054a4:	f003 f932 	bl	800870c <__aeabi_dcmplt>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	f040 826b 	bne.w	8005984 <_dtoa_r+0xcfc>
 80054ae:	42ac      	cmp	r4, r5
 80054b0:	f000 811f 	beq.w	80056f2 <_dtoa_r+0xa6a>
 80054b4:	2300      	movs	r3, #0
 80054b6:	2200      	movs	r2, #0
 80054b8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80054bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054c0:	f002 feb2 	bl	8008228 <__aeabi_dmul>
 80054c4:	2300      	movs	r3, #0
 80054c6:	2200      	movs	r2, #0
 80054c8:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80054cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054d0:	4650      	mov	r0, sl
 80054d2:	4659      	mov	r1, fp
 80054d4:	f002 fea8 	bl	8008228 <__aeabi_dmul>
 80054d8:	4680      	mov	r8, r0
 80054da:	4689      	mov	r9, r1
 80054dc:	f003 f93e 	bl	800875c <__aeabi_d2iz>
 80054e0:	4606      	mov	r6, r0
 80054e2:	f002 fe3b 	bl	800815c <__aeabi_i2d>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4640      	mov	r0, r8
 80054ec:	4649      	mov	r1, r9
 80054ee:	f002 fce7 	bl	8007ec0 <__aeabi_dsub>
 80054f2:	3630      	adds	r6, #48	; 0x30
 80054f4:	b2f6      	uxtb	r6, r6
 80054f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054fa:	f804 6b01 	strb.w	r6, [r4], #1
 80054fe:	4682      	mov	sl, r0
 8005500:	468b      	mov	fp, r1
 8005502:	f003 f903 	bl	800870c <__aeabi_dcmplt>
 8005506:	46a0      	mov	r8, r4
 8005508:	4652      	mov	r2, sl
 800550a:	465b      	mov	r3, fp
 800550c:	2800      	cmp	r0, #0
 800550e:	d0c1      	beq.n	8005494 <_dtoa_r+0x80c>
 8005510:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005512:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005514:	9005      	str	r0, [sp, #20]
 8005516:	9409      	str	r4, [sp, #36]	; 0x24
 8005518:	e66e      	b.n	80051f8 <_dtoa_r+0x570>
 800551a:	2500      	movs	r5, #0
 800551c:	9512      	str	r5, [sp, #72]	; 0x48
 800551e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8005520:	9805      	ldr	r0, [sp, #20]
 8005522:	182d      	adds	r5, r5, r0
 8005524:	f105 0901 	add.w	r9, r5, #1
 8005528:	f1b9 0f00 	cmp.w	r9, #0
 800552c:	9515      	str	r5, [sp, #84]	; 0x54
 800552e:	f340 819b 	ble.w	8005868 <_dtoa_r+0xbe0>
 8005532:	f1b9 0f0e 	cmp.w	r9, #14
 8005536:	bf8c      	ite	hi
 8005538:	2400      	movhi	r4, #0
 800553a:	f004 0401 	andls.w	r4, r4, #1
 800553e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005542:	e6d1      	b.n	80052e8 <_dtoa_r+0x660>
 8005544:	2500      	movs	r5, #0
 8005546:	9512      	str	r5, [sp, #72]	; 0x48
 8005548:	e6c2      	b.n	80052d0 <_dtoa_r+0x648>
 800554a:	2501      	movs	r5, #1
 800554c:	9512      	str	r5, [sp, #72]	; 0x48
 800554e:	e7e6      	b.n	800551e <_dtoa_r+0x896>
 8005550:	f1ba 0f00 	cmp.w	sl, #0
 8005554:	f47f aded 	bne.w	8005132 <_dtoa_r+0x4aa>
 8005558:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800555c:	4655      	mov	r5, sl
 800555e:	2b00      	cmp	r3, #0
 8005560:	f47f ade8 	bne.w	8005134 <_dtoa_r+0x4ac>
 8005564:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 8005568:	ea0b 0303 	and.w	r3, fp, r3
 800556c:	461d      	mov	r5, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	f43f ade0 	beq.w	8005134 <_dtoa_r+0x4ac>
 8005574:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005576:	3501      	adds	r5, #1
 8005578:	950f      	str	r5, [sp, #60]	; 0x3c
 800557a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800557c:	3501      	adds	r5, #1
 800557e:	950b      	str	r5, [sp, #44]	; 0x2c
 8005580:	2501      	movs	r5, #1
 8005582:	e5d7      	b.n	8005134 <_dtoa_r+0x4ac>
 8005584:	08008b40 	.word	0x08008b40
 8005588:	08008c30 	.word	0x08008c30
 800558c:	4630      	mov	r0, r6
 800558e:	f002 fde5 	bl	800815c <__aeabi_i2d>
 8005592:	4652      	mov	r2, sl
 8005594:	465b      	mov	r3, fp
 8005596:	f002 fe47 	bl	8008228 <__aeabi_dmul>
 800559a:	2300      	movs	r3, #0
 800559c:	2200      	movs	r2, #0
 800559e:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80055a2:	f002 fc8f 	bl	8007ec4 <__adddf3>
 80055a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80055a8:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
 80055ac:	4680      	mov	r8, r0
 80055ae:	46a1      	mov	r9, r4
 80055b0:	2d00      	cmp	r5, #0
 80055b2:	f040 80ac 	bne.w	800570e <_dtoa_r+0xa86>
 80055b6:	2300      	movs	r3, #0
 80055b8:	2200      	movs	r2, #0
 80055ba:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80055be:	4650      	mov	r0, sl
 80055c0:	4659      	mov	r1, fp
 80055c2:	f002 fc7d 	bl	8007ec0 <__aeabi_dsub>
 80055c6:	4642      	mov	r2, r8
 80055c8:	4623      	mov	r3, r4
 80055ca:	4682      	mov	sl, r0
 80055cc:	468b      	mov	fp, r1
 80055ce:	f003 f8bb 	bl	8008748 <__aeabi_dcmpgt>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	f040 80c3 	bne.w	800575e <_dtoa_r+0xad6>
 80055d8:	4642      	mov	r2, r8
 80055da:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80055de:	4650      	mov	r0, sl
 80055e0:	4659      	mov	r1, fp
 80055e2:	f003 f893 	bl	800870c <__aeabi_dcmplt>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	f000 8083 	beq.w	80056f2 <_dtoa_r+0xa6a>
 80055ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80055ee:	9606      	str	r6, [sp, #24]
 80055f0:	e666      	b.n	80052c0 <_dtoa_r+0x638>
 80055f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80055f4:	2800      	cmp	r0, #0
 80055f6:	f000 8147 	beq.w	8005888 <_dtoa_r+0xc00>
 80055fa:	2c00      	cmp	r4, #0
 80055fc:	dd05      	ble.n	800560a <_dtoa_r+0x982>
 80055fe:	4638      	mov	r0, r7
 8005600:	9906      	ldr	r1, [sp, #24]
 8005602:	4622      	mov	r2, r4
 8005604:	f001 f8f8 	bl	80067f8 <__lshift>
 8005608:	9006      	str	r0, [sp, #24]
 800560a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800560e:	2d00      	cmp	r5, #0
 8005610:	f040 8201 	bne.w	8005a16 <_dtoa_r+0xd8e>
 8005614:	f00a 0001 	and.w	r0, sl, #1
 8005618:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800561a:	9c06      	ldr	r4, [sp, #24]
 800561c:	900b      	str	r0, [sp, #44]	; 0x2c
 800561e:	4631      	mov	r1, r6
 8005620:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005622:	f7ff faa1 	bl	8004b68 <quorem>
 8005626:	4621      	mov	r1, r4
 8005628:	9008      	str	r0, [sp, #32]
 800562a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800562c:	f001 f944 	bl	80068b8 <__mcmp>
 8005630:	4642      	mov	r2, r8
 8005632:	4681      	mov	r9, r0
 8005634:	4631      	mov	r1, r6
 8005636:	4638      	mov	r0, r7
 8005638:	f001 f95e 	bl	80068f8 <__mdiff>
 800563c:	9a08      	ldr	r2, [sp, #32]
 800563e:	68c3      	ldr	r3, [r0, #12]
 8005640:	3230      	adds	r2, #48	; 0x30
 8005642:	4682      	mov	sl, r0
 8005644:	9206      	str	r2, [sp, #24]
 8005646:	f04f 0b01 	mov.w	fp, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d03d      	beq.n	80056ca <_dtoa_r+0xa42>
 800564e:	4638      	mov	r0, r7
 8005650:	4651      	mov	r1, sl
 8005652:	f000 fefd 	bl	8006450 <_Bfree>
 8005656:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005658:	ea5b 0303 	orrs.w	r3, fp, r3
 800565c:	d103      	bne.n	8005666 <_dtoa_r+0x9de>
 800565e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005660:	2800      	cmp	r0, #0
 8005662:	f000 8211 	beq.w	8005a88 <_dtoa_r+0xe00>
 8005666:	f1b9 0f00 	cmp.w	r9, #0
 800566a:	f2c0 819f 	blt.w	80059ac <_dtoa_r+0xd24>
 800566e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8005670:	ea59 0000 	orrs.w	r0, r9, r0
 8005674:	d103      	bne.n	800567e <_dtoa_r+0x9f6>
 8005676:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005678:	2900      	cmp	r1, #0
 800567a:	f000 8197 	beq.w	80059ac <_dtoa_r+0xd24>
 800567e:	f1bb 0f00 	cmp.w	fp, #0
 8005682:	f300 81ea 	bgt.w	8005a5a <_dtoa_r+0xdd2>
 8005686:	9a06      	ldr	r2, [sp, #24]
 8005688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800568a:	f805 2b01 	strb.w	r2, [r5], #1
 800568e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005690:	1a2b      	subs	r3, r5, r0
 8005692:	428b      	cmp	r3, r1
 8005694:	46aa      	mov	sl, r5
 8005696:	f000 81db 	beq.w	8005a50 <_dtoa_r+0xdc8>
 800569a:	220a      	movs	r2, #10
 800569c:	2300      	movs	r3, #0
 800569e:	4638      	mov	r0, r7
 80056a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80056a2:	f000 fedf 	bl	8006464 <__multadd>
 80056a6:	4544      	cmp	r4, r8
 80056a8:	900a      	str	r0, [sp, #40]	; 0x28
 80056aa:	d027      	beq.n	80056fc <_dtoa_r+0xa74>
 80056ac:	4621      	mov	r1, r4
 80056ae:	220a      	movs	r2, #10
 80056b0:	2300      	movs	r3, #0
 80056b2:	4638      	mov	r0, r7
 80056b4:	f000 fed6 	bl	8006464 <__multadd>
 80056b8:	4641      	mov	r1, r8
 80056ba:	4604      	mov	r4, r0
 80056bc:	220a      	movs	r2, #10
 80056be:	4638      	mov	r0, r7
 80056c0:	2300      	movs	r3, #0
 80056c2:	f000 fecf 	bl	8006464 <__multadd>
 80056c6:	4680      	mov	r8, r0
 80056c8:	e7a9      	b.n	800561e <_dtoa_r+0x996>
 80056ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80056cc:	4651      	mov	r1, sl
 80056ce:	f001 f8f3 	bl	80068b8 <__mcmp>
 80056d2:	4683      	mov	fp, r0
 80056d4:	e7bb      	b.n	800564e <_dtoa_r+0x9c6>
 80056d6:	4638      	mov	r0, r7
 80056d8:	4621      	mov	r1, r4
 80056da:	f000 feb9 	bl	8006450 <_Bfree>
 80056de:	e587      	b.n	80051f0 <_dtoa_r+0x568>
 80056e0:	231c      	movs	r3, #28
 80056e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80056e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056e6:	18c0      	adds	r0, r0, r3
 80056e8:	18c9      	adds	r1, r1, r3
 80056ea:	900f      	str	r0, [sp, #60]	; 0x3c
 80056ec:	18e4      	adds	r4, r4, r3
 80056ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80056f0:	e538      	b.n	8005164 <_dtoa_r+0x4dc>
 80056f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056f6:	4682      	mov	sl, r0
 80056f8:	468b      	mov	fp, r1
 80056fa:	e406      	b.n	8004f0a <_dtoa_r+0x282>
 80056fc:	4621      	mov	r1, r4
 80056fe:	4638      	mov	r0, r7
 8005700:	220a      	movs	r2, #10
 8005702:	2300      	movs	r3, #0
 8005704:	f000 feae 	bl	8006464 <__multadd>
 8005708:	4604      	mov	r4, r0
 800570a:	4680      	mov	r8, r0
 800570c:	e787      	b.n	800561e <_dtoa_r+0x996>
 800570e:	9c05      	ldr	r4, [sp, #20]
 8005710:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005712:	9417      	str	r4, [sp, #92]	; 0x5c
 8005714:	e672      	b.n	80053fc <_dtoa_r+0x774>
 8005716:	9d05      	ldr	r5, [sp, #20]
 8005718:	426c      	negs	r4, r5
 800571a:	2c00      	cmp	r4, #0
 800571c:	f000 80fb 	beq.w	8005916 <_dtoa_r+0xc8e>
 8005720:	4ba0      	ldr	r3, [pc, #640]	; (80059a4 <_dtoa_r+0xd1c>)
 8005722:	f004 020f 	and.w	r2, r4, #15
 8005726:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800572a:	4650      	mov	r0, sl
 800572c:	4659      	mov	r1, fp
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f002 fd79 	bl	8008228 <__aeabi_dmul>
 8005736:	1124      	asrs	r4, r4, #4
 8005738:	4682      	mov	sl, r0
 800573a:	468b      	mov	fp, r1
 800573c:	f000 80eb 	beq.w	8005916 <_dtoa_r+0xc8e>
 8005740:	4d99      	ldr	r5, [pc, #612]	; (80059a8 <_dtoa_r+0xd20>)
 8005742:	2602      	movs	r6, #2
 8005744:	07e2      	lsls	r2, r4, #31
 8005746:	d504      	bpl.n	8005752 <_dtoa_r+0xaca>
 8005748:	e9d5 2300 	ldrd	r2, r3, [r5]
 800574c:	f002 fd6c 	bl	8008228 <__aeabi_dmul>
 8005750:	3601      	adds	r6, #1
 8005752:	3508      	adds	r5, #8
 8005754:	1064      	asrs	r4, r4, #1
 8005756:	d1f5      	bne.n	8005744 <_dtoa_r+0xabc>
 8005758:	4682      	mov	sl, r0
 800575a:	468b      	mov	fp, r1
 800575c:	e612      	b.n	8005384 <_dtoa_r+0x6fc>
 800575e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005760:	9606      	str	r6, [sp, #24]
 8005762:	e530      	b.n	80051c6 <_dtoa_r+0x53e>
 8005764:	498f      	ldr	r1, [pc, #572]	; (80059a4 <_dtoa_r+0xd1c>)
 8005766:	1e6c      	subs	r4, r5, #1
 8005768:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005774:	9406      	str	r4, [sp, #24]
 8005776:	f002 fd57 	bl	8008228 <__aeabi_dmul>
 800577a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800577e:	4659      	mov	r1, fp
 8005780:	4650      	mov	r0, sl
 8005782:	f002 ffeb 	bl	800875c <__aeabi_d2iz>
 8005786:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005788:	4604      	mov	r4, r0
 800578a:	9111      	str	r1, [sp, #68]	; 0x44
 800578c:	f002 fce6 	bl	800815c <__aeabi_i2d>
 8005790:	460b      	mov	r3, r1
 8005792:	4602      	mov	r2, r0
 8005794:	4659      	mov	r1, fp
 8005796:	4650      	mov	r0, sl
 8005798:	f002 fb92 	bl	8007ec0 <__aeabi_dsub>
 800579c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80057a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80057a2:	f804 3b01 	strb.w	r3, [r4], #1
 80057a6:	2d01      	cmp	r5, #1
 80057a8:	4682      	mov	sl, r0
 80057aa:	468b      	mov	fp, r1
 80057ac:	9411      	str	r4, [sp, #68]	; 0x44
 80057ae:	46a0      	mov	r8, r4
 80057b0:	d020      	beq.n	80057f4 <_dtoa_r+0xb6c>
 80057b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80057b4:	1e66      	subs	r6, r4, #1
 80057b6:	1976      	adds	r6, r6, r5
 80057b8:	2300      	movs	r3, #0
 80057ba:	2200      	movs	r2, #0
 80057bc:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80057c0:	f002 fd32 	bl	8008228 <__aeabi_dmul>
 80057c4:	4689      	mov	r9, r1
 80057c6:	4680      	mov	r8, r0
 80057c8:	f002 ffc8 	bl	800875c <__aeabi_d2iz>
 80057cc:	4605      	mov	r5, r0
 80057ce:	f002 fcc5 	bl	800815c <__aeabi_i2d>
 80057d2:	3530      	adds	r5, #48	; 0x30
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f002 fb70 	bl	8007ec0 <__aeabi_dsub>
 80057e0:	f804 5f01 	strb.w	r5, [r4, #1]!
 80057e4:	42b4      	cmp	r4, r6
 80057e6:	d1e7      	bne.n	80057b8 <_dtoa_r+0xb30>
 80057e8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80057ea:	9c06      	ldr	r4, [sp, #24]
 80057ec:	4682      	mov	sl, r0
 80057ee:	468b      	mov	fp, r1
 80057f0:	eb05 0804 	add.w	r8, r5, r4
 80057f4:	2300      	movs	r3, #0
 80057f6:	2200      	movs	r2, #0
 80057f8:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 80057fc:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8005800:	f002 fb60 	bl	8007ec4 <__adddf3>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	4650      	mov	r0, sl
 800580a:	4659      	mov	r1, fp
 800580c:	f002 ff9c 	bl	8008748 <__aeabi_dcmpgt>
 8005810:	2800      	cmp	r0, #0
 8005812:	f000 808a 	beq.w	800592a <_dtoa_r+0xca2>
 8005816:	f818 6c01 	ldrb.w	r6, [r8, #-1]
 800581a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800581c:	e422      	b.n	8005064 <_dtoa_r+0x3dc>
 800581e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005820:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005824:	e4e8      	b.n	80051f8 <_dtoa_r+0x570>
 8005826:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005828:	4631      	mov	r1, r6
 800582a:	f001 f845 	bl	80068b8 <__mcmp>
 800582e:	2800      	cmp	r0, #0
 8005830:	f6bf acad 	bge.w	800518e <_dtoa_r+0x506>
 8005834:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005836:	220a      	movs	r2, #10
 8005838:	4638      	mov	r0, r7
 800583a:	2300      	movs	r3, #0
 800583c:	f000 fe12 	bl	8006464 <__multadd>
 8005840:	9905      	ldr	r1, [sp, #20]
 8005842:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005844:	900a      	str	r0, [sp, #40]	; 0x28
 8005846:	3901      	subs	r1, #1
 8005848:	9105      	str	r1, [sp, #20]
 800584a:	2a00      	cmp	r2, #0
 800584c:	f040 8136 	bne.w	8005abc <_dtoa_r+0xe34>
 8005850:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005852:	900e      	str	r0, [sp, #56]	; 0x38
 8005854:	e49b      	b.n	800518e <_dtoa_r+0x506>
 8005856:	6933      	ldr	r3, [r6, #16]
 8005858:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800585c:	6918      	ldr	r0, [r3, #16]
 800585e:	f000 fe91 	bl	8006584 <__hi0bits>
 8005862:	f1c0 0320 	rsb	r3, r0, #32
 8005866:	e46a      	b.n	800513e <_dtoa_r+0x4b6>
 8005868:	f1b9 0f0e 	cmp.w	r9, #14
 800586c:	bf8c      	ite	hi
 800586e:	2300      	movhi	r3, #0
 8005870:	2301      	movls	r3, #1
 8005872:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005876:	2100      	movs	r1, #0
 8005878:	6479      	str	r1, [r7, #68]	; 0x44
 800587a:	401c      	ands	r4, r3
 800587c:	e543      	b.n	8005306 <_dtoa_r+0x67e>
 800587e:	2301      	movs	r3, #1
 8005880:	9315      	str	r3, [sp, #84]	; 0x54
 8005882:	930e      	str	r3, [sp, #56]	; 0x38
 8005884:	9327      	str	r3, [sp, #156]	; 0x9c
 8005886:	e7f6      	b.n	8005876 <_dtoa_r+0xbee>
 8005888:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800588a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800588e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005892:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005894:	e006      	b.n	80058a4 <_dtoa_r+0xc1c>
 8005896:	4651      	mov	r1, sl
 8005898:	4638      	mov	r0, r7
 800589a:	220a      	movs	r2, #10
 800589c:	2300      	movs	r3, #0
 800589e:	f000 fde1 	bl	8006464 <__multadd>
 80058a2:	4682      	mov	sl, r0
 80058a4:	4631      	mov	r1, r6
 80058a6:	4650      	mov	r0, sl
 80058a8:	f7ff f95e 	bl	8004b68 <quorem>
 80058ac:	3030      	adds	r0, #48	; 0x30
 80058ae:	5528      	strb	r0, [r5, r4]
 80058b0:	3401      	adds	r4, #1
 80058b2:	45a0      	cmp	r8, r4
 80058b4:	dcef      	bgt.n	8005896 <_dtoa_r+0xc0e>
 80058b6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80058b8:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80058bc:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80058c0:	4681      	mov	r9, r0
 80058c2:	2c01      	cmp	r4, #1
 80058c4:	bfac      	ite	ge
 80058c6:	44a2      	addge	sl, r4
 80058c8:	f10a 0a01 	addlt.w	sl, sl, #1
 80058cc:	2400      	movs	r4, #0
 80058ce:	2201      	movs	r2, #1
 80058d0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058d2:	4638      	mov	r0, r7
 80058d4:	f000 ff90 	bl	80067f8 <__lshift>
 80058d8:	4631      	mov	r1, r6
 80058da:	900a      	str	r0, [sp, #40]	; 0x28
 80058dc:	f000 ffec 	bl	80068b8 <__mcmp>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	f340 8082 	ble.w	80059ea <_dtoa_r+0xd62>
 80058e6:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 80058ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058ec:	1c6a      	adds	r2, r5, #1
 80058ee:	e003      	b.n	80058f8 <_dtoa_r+0xc70>
 80058f0:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 80058f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80058f8:	2b39      	cmp	r3, #57	; 0x39
 80058fa:	f040 8084 	bne.w	8005a06 <_dtoa_r+0xd7e>
 80058fe:	4592      	cmp	sl, r2
 8005900:	d1f6      	bne.n	80058f0 <_dtoa_r+0xc68>
 8005902:	9805      	ldr	r0, [sp, #20]
 8005904:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005906:	3001      	adds	r0, #1
 8005908:	2331      	movs	r3, #49	; 0x31
 800590a:	9005      	str	r0, [sp, #20]
 800590c:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005910:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005914:	e461      	b.n	80051da <_dtoa_r+0x552>
 8005916:	2602      	movs	r6, #2
 8005918:	e534      	b.n	8005384 <_dtoa_r+0x6fc>
 800591a:	4638      	mov	r0, r7
 800591c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800591e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005920:	f000 ff1e 	bl	8006760 <__pow5mult>
 8005924:	900a      	str	r0, [sp, #40]	; 0x28
 8005926:	f7ff bbf2 	b.w	800510e <_dtoa_r+0x486>
 800592a:	2100      	movs	r1, #0
 800592c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005930:	2000      	movs	r0, #0
 8005932:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8005936:	f002 fac3 	bl	8007ec0 <__aeabi_dsub>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4650      	mov	r0, sl
 8005940:	4659      	mov	r1, fp
 8005942:	f002 fee3 	bl	800870c <__aeabi_dcmplt>
 8005946:	2800      	cmp	r0, #0
 8005948:	f43f aed3 	beq.w	80056f2 <_dtoa_r+0xa6a>
 800594c:	4642      	mov	r2, r8
 800594e:	f818 3d01 	ldrb.w	r3, [r8, #-1]!
 8005952:	2b30      	cmp	r3, #48	; 0x30
 8005954:	d0fa      	beq.n	800594c <_dtoa_r+0xcc4>
 8005956:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005958:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800595a:	9405      	str	r4, [sp, #20]
 800595c:	9209      	str	r2, [sp, #36]	; 0x24
 800595e:	e44b      	b.n	80051f8 <_dtoa_r+0x570>
 8005960:	4638      	mov	r0, r7
 8005962:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005964:	f000 fefc 	bl	8006760 <__pow5mult>
 8005968:	900a      	str	r0, [sp, #40]	; 0x28
 800596a:	f7ff bbd0 	b.w	800510e <_dtoa_r+0x486>
 800596e:	2600      	movs	r6, #0
 8005970:	9606      	str	r6, [sp, #24]
 8005972:	e4a5      	b.n	80052c0 <_dtoa_r+0x638>
 8005974:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005976:	2d00      	cmp	r5, #0
 8005978:	d064      	beq.n	8005a44 <_dtoa_r+0xdbc>
 800597a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800597e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005980:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005982:	e47d      	b.n	8005280 <_dtoa_r+0x5f8>
 8005984:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005986:	f7ff bb6d 	b.w	8005064 <_dtoa_r+0x3dc>
 800598a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800598c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8005990:	1c72      	adds	r2, r6, #1
 8005992:	b2d2      	uxtb	r2, r2
 8005994:	9405      	str	r4, [sp, #20]
 8005996:	f7ff bb7b 	b.w	8005090 <_dtoa_r+0x408>
 800599a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800599c:	2300      	movs	r3, #0
 800599e:	1b04      	subs	r4, r0, r4
 80059a0:	e46e      	b.n	8005280 <_dtoa_r+0x5f8>
 80059a2:	bf00      	nop
 80059a4:	08008b40 	.word	0x08008b40
 80059a8:	08008c30 	.word	0x08008c30
 80059ac:	f1bb 0f00 	cmp.w	fp, #0
 80059b0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80059b4:	dd10      	ble.n	80059d8 <_dtoa_r+0xd50>
 80059b6:	2201      	movs	r2, #1
 80059b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80059ba:	4638      	mov	r0, r7
 80059bc:	f000 ff1c 	bl	80067f8 <__lshift>
 80059c0:	4631      	mov	r1, r6
 80059c2:	900a      	str	r0, [sp, #40]	; 0x28
 80059c4:	f000 ff78 	bl	80068b8 <__mcmp>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	dd6b      	ble.n	8005aa4 <_dtoa_r+0xe1c>
 80059cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059d0:	d053      	beq.n	8005a7a <_dtoa_r+0xdf2>
 80059d2:	9b08      	ldr	r3, [sp, #32]
 80059d4:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80059d8:	462b      	mov	r3, r5
 80059da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059dc:	f803 9b01 	strb.w	r9, [r3], #1
 80059e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80059e4:	9309      	str	r3, [sp, #36]	; 0x24
 80059e6:	f7ff bbf8 	b.w	80051da <_dtoa_r+0x552>
 80059ea:	d103      	bne.n	80059f4 <_dtoa_r+0xd6c>
 80059ec:	f019 0f01 	tst.w	r9, #1
 80059f0:	f47f af79 	bne.w	80058e6 <_dtoa_r+0xc5e>
 80059f4:	4652      	mov	r2, sl
 80059f6:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 80059fa:	2b30      	cmp	r3, #48	; 0x30
 80059fc:	d0fa      	beq.n	80059f4 <_dtoa_r+0xd6c>
 80059fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a00:	9209      	str	r2, [sp, #36]	; 0x24
 8005a02:	f7ff bbea 	b.w	80051da <_dtoa_r+0x552>
 8005a06:	3301      	adds	r3, #1
 8005a08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a0a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8005a0e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8005a12:	f7ff bbe2 	b.w	80051da <_dtoa_r+0x552>
 8005a16:	9c06      	ldr	r4, [sp, #24]
 8005a18:	4638      	mov	r0, r7
 8005a1a:	6861      	ldr	r1, [r4, #4]
 8005a1c:	f000 fcf2 	bl	8006404 <_Balloc>
 8005a20:	9d06      	ldr	r5, [sp, #24]
 8005a22:	692a      	ldr	r2, [r5, #16]
 8005a24:	3202      	adds	r2, #2
 8005a26:	4604      	mov	r4, r0
 8005a28:	0092      	lsls	r2, r2, #2
 8005a2a:	f105 010c 	add.w	r1, r5, #12
 8005a2e:	f100 000c 	add.w	r0, r0, #12
 8005a32:	f000 fc9f 	bl	8006374 <memcpy>
 8005a36:	4638      	mov	r0, r7
 8005a38:	4621      	mov	r1, r4
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f000 fedc 	bl	80067f8 <__lshift>
 8005a40:	4680      	mov	r8, r0
 8005a42:	e5e7      	b.n	8005614 <_dtoa_r+0x98c>
 8005a44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005a46:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005a4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a4e:	e417      	b.n	8005280 <_dtoa_r+0x5f8>
 8005a50:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005a54:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a58:	e739      	b.n	80058ce <_dtoa_r+0xc46>
 8005a5a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005a5e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a62:	d00a      	beq.n	8005a7a <_dtoa_r+0xdf2>
 8005a64:	462b      	mov	r3, r5
 8005a66:	f109 0901 	add.w	r9, r9, #1
 8005a6a:	f803 9b01 	strb.w	r9, [r3], #1
 8005a6e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a70:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a74:	9309      	str	r3, [sp, #36]	; 0x24
 8005a76:	f7ff bbb0 	b.w	80051da <_dtoa_r+0x552>
 8005a7a:	46aa      	mov	sl, r5
 8005a7c:	2339      	movs	r3, #57	; 0x39
 8005a7e:	f80a 3b01 	strb.w	r3, [sl], #1
 8005a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a86:	e730      	b.n	80058ea <_dtoa_r+0xc62>
 8005a88:	464b      	mov	r3, r9
 8005a8a:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005a8e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a92:	d0f2      	beq.n	8005a7a <_dtoa_r+0xdf2>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	dc9c      	bgt.n	80059d2 <_dtoa_r+0xd4a>
 8005a98:	e79e      	b.n	80059d8 <_dtoa_r+0xd50>
 8005a9a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005a9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a9e:	9409      	str	r4, [sp, #36]	; 0x24
 8005aa0:	f7ff bbaa 	b.w	80051f8 <_dtoa_r+0x570>
 8005aa4:	d198      	bne.n	80059d8 <_dtoa_r+0xd50>
 8005aa6:	f019 0f01 	tst.w	r9, #1
 8005aaa:	d095      	beq.n	80059d8 <_dtoa_r+0xd50>
 8005aac:	e78e      	b.n	80059cc <_dtoa_r+0xd44>
 8005aae:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005ab0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005ab2:	9405      	str	r4, [sp, #20]
 8005ab4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005ab6:	9409      	str	r4, [sp, #36]	; 0x24
 8005ab8:	f7ff bb9e 	b.w	80051f8 <_dtoa_r+0x570>
 8005abc:	2300      	movs	r3, #0
 8005abe:	4638      	mov	r0, r7
 8005ac0:	9906      	ldr	r1, [sp, #24]
 8005ac2:	220a      	movs	r2, #10
 8005ac4:	f000 fcce 	bl	8006464 <__multadd>
 8005ac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005aca:	9006      	str	r0, [sp, #24]
 8005acc:	930e      	str	r3, [sp, #56]	; 0x38
 8005ace:	f7ff bb5e 	b.w	800518e <_dtoa_r+0x506>
 8005ad2:	f43f ab47 	beq.w	8005164 <_dtoa_r+0x4dc>
 8005ad6:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8005ada:	e602      	b.n	80056e2 <_dtoa_r+0xa5a>
 8005adc:	f3af 8000 	nop.w

08005ae0 <_malloc_trim_r>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	4d22      	ldr	r5, [pc, #136]	; (8005b6c <_malloc_trim_r+0x8c>)
 8005ae4:	460f      	mov	r7, r1
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	f000 fc88 	bl	80063fc <__malloc_lock>
 8005aec:	68ab      	ldr	r3, [r5, #8]
 8005aee:	685e      	ldr	r6, [r3, #4]
 8005af0:	f026 0603 	bic.w	r6, r6, #3
 8005af4:	f606 73ef 	addw	r3, r6, #4079	; 0xfef
 8005af8:	1bdf      	subs	r7, r3, r7
 8005afa:	0b3f      	lsrs	r7, r7, #12
 8005afc:	3f01      	subs	r7, #1
 8005afe:	033f      	lsls	r7, r7, #12
 8005b00:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005b04:	4620      	mov	r0, r4
 8005b06:	db07      	blt.n	8005b18 <_malloc_trim_r+0x38>
 8005b08:	2100      	movs	r1, #0
 8005b0a:	f001 f907 	bl	8006d1c <_sbrk_r>
 8005b0e:	68ab      	ldr	r3, [r5, #8]
 8005b10:	199b      	adds	r3, r3, r6
 8005b12:	4298      	cmp	r0, r3
 8005b14:	4620      	mov	r0, r4
 8005b16:	d003      	beq.n	8005b20 <_malloc_trim_r+0x40>
 8005b18:	f000 fc72 	bl	8006400 <__malloc_unlock>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b20:	4279      	negs	r1, r7
 8005b22:	f001 f8fb 	bl	8006d1c <_sbrk_r>
 8005b26:	3001      	adds	r0, #1
 8005b28:	d00d      	beq.n	8005b46 <_malloc_trim_r+0x66>
 8005b2a:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <_malloc_trim_r+0x90>)
 8005b2c:	68aa      	ldr	r2, [r5, #8]
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	1bf6      	subs	r6, r6, r7
 8005b32:	f046 0601 	orr.w	r6, r6, #1
 8005b36:	1bcf      	subs	r7, r1, r7
 8005b38:	4620      	mov	r0, r4
 8005b3a:	6056      	str	r6, [r2, #4]
 8005b3c:	601f      	str	r7, [r3, #0]
 8005b3e:	f000 fc5f 	bl	8006400 <__malloc_unlock>
 8005b42:	2001      	movs	r0, #1
 8005b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b46:	2100      	movs	r1, #0
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f001 f8e7 	bl	8006d1c <_sbrk_r>
 8005b4e:	68ab      	ldr	r3, [r5, #8]
 8005b50:	1ac2      	subs	r2, r0, r3
 8005b52:	2a0f      	cmp	r2, #15
 8005b54:	dd07      	ble.n	8005b66 <_malloc_trim_r+0x86>
 8005b56:	4907      	ldr	r1, [pc, #28]	; (8005b74 <_malloc_trim_r+0x94>)
 8005b58:	6809      	ldr	r1, [r1, #0]
 8005b5a:	1a40      	subs	r0, r0, r1
 8005b5c:	4904      	ldr	r1, [pc, #16]	; (8005b70 <_malloc_trim_r+0x90>)
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	6008      	str	r0, [r1, #0]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	4620      	mov	r0, r4
 8005b68:	e7d6      	b.n	8005b18 <_malloc_trim_r+0x38>
 8005b6a:	bf00      	nop
 8005b6c:	2000057c 	.word	0x2000057c
 8005b70:	200009a8 	.word	0x200009a8
 8005b74:	20000984 	.word	0x20000984

08005b78 <_free_r>:
 8005b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7c:	460d      	mov	r5, r1
 8005b7e:	4604      	mov	r4, r0
 8005b80:	2900      	cmp	r1, #0
 8005b82:	d06f      	beq.n	8005c64 <_free_r+0xec>
 8005b84:	f000 fc3a 	bl	80063fc <__malloc_lock>
 8005b88:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8005b8c:	4e58      	ldr	r6, [pc, #352]	; (8005cf0 <_free_r+0x178>)
 8005b8e:	f1a5 0108 	sub.w	r1, r5, #8
 8005b92:	f020 0301 	bic.w	r3, r0, #1
 8005b96:	18ca      	adds	r2, r1, r3
 8005b98:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8005b9c:	6857      	ldr	r7, [r2, #4]
 8005b9e:	4594      	cmp	ip, r2
 8005ba0:	f027 0703 	bic.w	r7, r7, #3
 8005ba4:	d07c      	beq.n	8005ca0 <_free_r+0x128>
 8005ba6:	f010 0001 	ands.w	r0, r0, #1
 8005baa:	6057      	str	r7, [r2, #4]
 8005bac:	d049      	beq.n	8005c42 <_free_r+0xca>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	19d5      	adds	r5, r2, r7
 8005bb2:	686d      	ldr	r5, [r5, #4]
 8005bb4:	f015 0f01 	tst.w	r5, #1
 8005bb8:	d106      	bne.n	8005bc8 <_free_r+0x50>
 8005bba:	19db      	adds	r3, r3, r7
 8005bbc:	6895      	ldr	r5, [r2, #8]
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d062      	beq.n	8005c88 <_free_r+0x110>
 8005bc2:	68d2      	ldr	r2, [r2, #12]
 8005bc4:	60ea      	str	r2, [r5, #12]
 8005bc6:	6095      	str	r5, [r2, #8]
 8005bc8:	f043 0201 	orr.w	r2, r3, #1
 8005bcc:	604a      	str	r2, [r1, #4]
 8005bce:	50cb      	str	r3, [r1, r3]
 8005bd0:	bb90      	cbnz	r0, 8005c38 <_free_r+0xc0>
 8005bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bd6:	d347      	bcc.n	8005c68 <_free_r+0xf0>
 8005bd8:	099d      	lsrs	r5, r3, #6
 8005bda:	3538      	adds	r5, #56	; 0x38
 8005bdc:	0a5a      	lsrs	r2, r3, #9
 8005bde:	00e8      	lsls	r0, r5, #3
 8005be0:	2a04      	cmp	r2, #4
 8005be2:	d916      	bls.n	8005c12 <_free_r+0x9a>
 8005be4:	f102 055b 	add.w	r5, r2, #91	; 0x5b
 8005be8:	00e8      	lsls	r0, r5, #3
 8005bea:	2a14      	cmp	r2, #20
 8005bec:	d911      	bls.n	8005c12 <_free_r+0x9a>
 8005bee:	0b1d      	lsrs	r5, r3, #12
 8005bf0:	356e      	adds	r5, #110	; 0x6e
 8005bf2:	00e8      	lsls	r0, r5, #3
 8005bf4:	2a54      	cmp	r2, #84	; 0x54
 8005bf6:	d90c      	bls.n	8005c12 <_free_r+0x9a>
 8005bf8:	0bdd      	lsrs	r5, r3, #15
 8005bfa:	3577      	adds	r5, #119	; 0x77
 8005bfc:	00e8      	lsls	r0, r5, #3
 8005bfe:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005c02:	d906      	bls.n	8005c12 <_free_r+0x9a>
 8005c04:	f240 5054 	movw	r0, #1364	; 0x554
 8005c08:	4282      	cmp	r2, r0
 8005c0a:	d86d      	bhi.n	8005ce8 <_free_r+0x170>
 8005c0c:	0c9d      	lsrs	r5, r3, #18
 8005c0e:	357c      	adds	r5, #124	; 0x7c
 8005c10:	00e8      	lsls	r0, r5, #3
 8005c12:	1986      	adds	r6, r0, r6
 8005c14:	4836      	ldr	r0, [pc, #216]	; (8005cf0 <_free_r+0x178>)
 8005c16:	68b2      	ldr	r2, [r6, #8]
 8005c18:	42b2      	cmp	r2, r6
 8005c1a:	d103      	bne.n	8005c24 <_free_r+0xac>
 8005c1c:	e05b      	b.n	8005cd6 <_free_r+0x15e>
 8005c1e:	6892      	ldr	r2, [r2, #8]
 8005c20:	4296      	cmp	r6, r2
 8005c22:	d004      	beq.n	8005c2e <_free_r+0xb6>
 8005c24:	6850      	ldr	r0, [r2, #4]
 8005c26:	f020 0003 	bic.w	r0, r0, #3
 8005c2a:	4283      	cmp	r3, r0
 8005c2c:	d3f7      	bcc.n	8005c1e <_free_r+0xa6>
 8005c2e:	68d3      	ldr	r3, [r2, #12]
 8005c30:	60cb      	str	r3, [r1, #12]
 8005c32:	608a      	str	r2, [r1, #8]
 8005c34:	60d1      	str	r1, [r2, #12]
 8005c36:	6099      	str	r1, [r3, #8]
 8005c38:	4620      	mov	r0, r4
 8005c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3e:	f000 bbdf 	b.w	8006400 <__malloc_unlock>
 8005c42:	f855 cc08 	ldr.w	ip, [r5, #-8]
 8005c46:	ebcc 0101 	rsb	r1, ip, r1
 8005c4a:	f106 0808 	add.w	r8, r6, #8
 8005c4e:	688d      	ldr	r5, [r1, #8]
 8005c50:	4545      	cmp	r5, r8
 8005c52:	4463      	add	r3, ip
 8005c54:	d03d      	beq.n	8005cd2 <_free_r+0x15a>
 8005c56:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8005c5a:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005c5e:	f8cc 5008 	str.w	r5, [ip, #8]
 8005c62:	e7a5      	b.n	8005bb0 <_free_r+0x38>
 8005c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c68:	08db      	lsrs	r3, r3, #3
 8005c6a:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8005c6e:	6875      	ldr	r5, [r6, #4]
 8005c70:	6890      	ldr	r0, [r2, #8]
 8005c72:	60ca      	str	r2, [r1, #12]
 8005c74:	109b      	asrs	r3, r3, #2
 8005c76:	2701      	movs	r7, #1
 8005c78:	fa17 f303 	lsls.w	r3, r7, r3
 8005c7c:	432b      	orrs	r3, r5
 8005c7e:	6088      	str	r0, [r1, #8]
 8005c80:	6073      	str	r3, [r6, #4]
 8005c82:	6091      	str	r1, [r2, #8]
 8005c84:	60c1      	str	r1, [r0, #12]
 8005c86:	e7d7      	b.n	8005c38 <_free_r+0xc0>
 8005c88:	4f1a      	ldr	r7, [pc, #104]	; (8005cf4 <_free_r+0x17c>)
 8005c8a:	42bd      	cmp	r5, r7
 8005c8c:	d199      	bne.n	8005bc2 <_free_r+0x4a>
 8005c8e:	f043 0201 	orr.w	r2, r3, #1
 8005c92:	6171      	str	r1, [r6, #20]
 8005c94:	6131      	str	r1, [r6, #16]
 8005c96:	60cd      	str	r5, [r1, #12]
 8005c98:	608d      	str	r5, [r1, #8]
 8005c9a:	604a      	str	r2, [r1, #4]
 8005c9c:	50cb      	str	r3, [r1, r3]
 8005c9e:	e7cb      	b.n	8005c38 <_free_r+0xc0>
 8005ca0:	07c2      	lsls	r2, r0, #31
 8005ca2:	443b      	add	r3, r7
 8005ca4:	d407      	bmi.n	8005cb6 <_free_r+0x13e>
 8005ca6:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005caa:	1a89      	subs	r1, r1, r2
 8005cac:	189b      	adds	r3, r3, r2
 8005cae:	6888      	ldr	r0, [r1, #8]
 8005cb0:	68ca      	ldr	r2, [r1, #12]
 8005cb2:	60c2      	str	r2, [r0, #12]
 8005cb4:	6090      	str	r0, [r2, #8]
 8005cb6:	4a10      	ldr	r2, [pc, #64]	; (8005cf8 <_free_r+0x180>)
 8005cb8:	60b1      	str	r1, [r6, #8]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	f043 0001 	orr.w	r0, r3, #1
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	6048      	str	r0, [r1, #4]
 8005cc4:	d3b8      	bcc.n	8005c38 <_free_r+0xc0>
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <_free_r+0x184>)
 8005cc8:	4620      	mov	r0, r4
 8005cca:	6819      	ldr	r1, [r3, #0]
 8005ccc:	f7ff ff08 	bl	8005ae0 <_malloc_trim_r>
 8005cd0:	e7b2      	b.n	8005c38 <_free_r+0xc0>
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	e76c      	b.n	8005bb0 <_free_r+0x38>
 8005cd6:	6843      	ldr	r3, [r0, #4]
 8005cd8:	10ad      	asrs	r5, r5, #2
 8005cda:	2601      	movs	r6, #1
 8005cdc:	fa16 f505 	lsls.w	r5, r6, r5
 8005ce0:	432b      	orrs	r3, r5
 8005ce2:	6043      	str	r3, [r0, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	e7a3      	b.n	8005c30 <_free_r+0xb8>
 8005ce8:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8005cec:	257e      	movs	r5, #126	; 0x7e
 8005cee:	e790      	b.n	8005c12 <_free_r+0x9a>
 8005cf0:	2000057c 	.word	0x2000057c
 8005cf4:	20000584 	.word	0x20000584
 8005cf8:	20000988 	.word	0x20000988
 8005cfc:	200009a4 	.word	0x200009a4

08005d00 <_setlocale_r>:
 8005d00:	b510      	push	{r4, lr}
 8005d02:	4614      	mov	r4, r2
 8005d04:	b122      	cbz	r2, 8005d10 <_setlocale_r+0x10>
 8005d06:	4610      	mov	r0, r2
 8005d08:	490b      	ldr	r1, [pc, #44]	; (8005d38 <_setlocale_r+0x38>)
 8005d0a:	f001 f819 	bl	8006d40 <strcmp>
 8005d0e:	b908      	cbnz	r0, 8005d14 <_setlocale_r+0x14>
 8005d10:	480a      	ldr	r0, [pc, #40]	; (8005d3c <_setlocale_r+0x3c>)
 8005d12:	bd10      	pop	{r4, pc}
 8005d14:	4620      	mov	r0, r4
 8005d16:	4909      	ldr	r1, [pc, #36]	; (8005d3c <_setlocale_r+0x3c>)
 8005d18:	f001 f812 	bl	8006d40 <strcmp>
 8005d1c:	b908      	cbnz	r0, 8005d22 <_setlocale_r+0x22>
 8005d1e:	4807      	ldr	r0, [pc, #28]	; (8005d3c <_setlocale_r+0x3c>)
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	4620      	mov	r0, r4
 8005d24:	4906      	ldr	r1, [pc, #24]	; (8005d40 <_setlocale_r+0x40>)
 8005d26:	f001 f80b 	bl	8006d40 <strcmp>
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <_setlocale_r+0x3c>)
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	bf0c      	ite	eq
 8005d30:	4618      	moveq	r0, r3
 8005d32:	2000      	movne	r0, #0
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	bf00      	nop
 8005d38:	08008d24 	.word	0x08008d24
 8005d3c:	08008d20 	.word	0x08008d20
 8005d40:	08008cec 	.word	0x08008cec

08005d44 <__locale_charset>:
 8005d44:	f240 5000 	movw	r0, #1280	; 0x500
 8005d48:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop

08005d50 <__locale_mb_cur_max>:
 8005d50:	f240 5300 	movw	r3, #1280	; 0x500
 8005d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d58:	6a18      	ldr	r0, [r3, #32]
 8005d5a:	4770      	bx	lr

08005d5c <__locale_msgcharset>:
 8005d5c:	4800      	ldr	r0, [pc, #0]	; (8005d60 <__locale_msgcharset+0x4>)
 8005d5e:	4770      	bx	lr
 8005d60:	20000524 	.word	0x20000524

08005d64 <__locale_cjk_lang>:
 8005d64:	2000      	movs	r0, #0
 8005d66:	4770      	bx	lr

08005d68 <_localeconv_r>:
 8005d68:	4800      	ldr	r0, [pc, #0]	; (8005d6c <_localeconv_r+0x4>)
 8005d6a:	4770      	bx	lr
 8005d6c:	20000544 	.word	0x20000544

08005d70 <setlocale>:
 8005d70:	b410      	push	{r4}
 8005d72:	f240 03d0 	movw	r3, #208	; 0xd0
 8005d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	460a      	mov	r2, r1
 8005d80:	4621      	mov	r1, r4
 8005d82:	bc10      	pop	{r4}
 8005d84:	e7bc      	b.n	8005d00 <_setlocale_r>
 8005d86:	bf00      	nop

08005d88 <localeconv>:
 8005d88:	4800      	ldr	r0, [pc, #0]	; (8005d8c <localeconv+0x4>)
 8005d8a:	4770      	bx	lr
 8005d8c:	20000544 	.word	0x20000544

08005d90 <_malloc_r>:
 8005d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	f101 040b 	add.w	r4, r1, #11
 8005d98:	2c16      	cmp	r4, #22
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	d92a      	bls.n	8005df4 <_malloc_r+0x64>
 8005d9e:	f024 0407 	bic.w	r4, r4, #7
 8005da2:	0fe3      	lsrs	r3, r4, #31
 8005da4:	428c      	cmp	r4, r1
 8005da6:	bf2c      	ite	cs
 8005da8:	4619      	movcs	r1, r3
 8005daa:	f043 0101 	orrcc.w	r1, r3, #1
 8005dae:	bb51      	cbnz	r1, 8005e06 <_malloc_r+0x76>
 8005db0:	4628      	mov	r0, r5
 8005db2:	f000 fb23 	bl	80063fc <__malloc_lock>
 8005db6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005dba:	d22a      	bcs.n	8005e12 <_malloc_r+0x82>
 8005dbc:	4e7d      	ldr	r6, [pc, #500]	; (8005fb4 <_malloc_r+0x224>)
 8005dbe:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 8005dc2:	eb06 03ce 	add.w	r3, r6, lr, lsl #3
 8005dc6:	68df      	ldr	r7, [r3, #12]
 8005dc8:	429f      	cmp	r7, r3
 8005dca:	f000 8235 	beq.w	8006238 <_malloc_r+0x4a8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	f023 0303 	bic.w	r3, r3, #3
 8005dd8:	18fb      	adds	r3, r7, r3
 8005dda:	60ca      	str	r2, [r1, #12]
 8005ddc:	6858      	ldr	r0, [r3, #4]
 8005dde:	6091      	str	r1, [r2, #8]
 8005de0:	f040 0201 	orr.w	r2, r0, #1
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 fb0a 	bl	8006400 <__malloc_unlock>
 8005dec:	3708      	adds	r7, #8
 8005dee:	4638      	mov	r0, r7
 8005df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df4:	2300      	movs	r3, #0
 8005df6:	2410      	movs	r4, #16
 8005df8:	428c      	cmp	r4, r1
 8005dfa:	bf2c      	ite	cs
 8005dfc:	4619      	movcs	r1, r3
 8005dfe:	f043 0101 	orrcc.w	r1, r3, #1
 8005e02:	2900      	cmp	r1, #0
 8005e04:	d0d4      	beq.n	8005db0 <_malloc_r+0x20>
 8005e06:	230c      	movs	r3, #12
 8005e08:	2700      	movs	r7, #0
 8005e0a:	602b      	str	r3, [r5, #0]
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e12:	ea5f 2e54 	movs.w	lr, r4, lsr #9
 8005e16:	bf04      	itt	eq
 8005e18:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
 8005e1c:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
 8005e20:	f040 8081 	bne.w	8005f26 <_malloc_r+0x196>
 8005e24:	4e63      	ldr	r6, [pc, #396]	; (8005fb4 <_malloc_r+0x224>)
 8005e26:	1871      	adds	r1, r6, r1
 8005e28:	68cf      	ldr	r7, [r1, #12]
 8005e2a:	42b9      	cmp	r1, r7
 8005e2c:	d106      	bne.n	8005e3c <_malloc_r+0xac>
 8005e2e:	e00d      	b.n	8005e4c <_malloc_r+0xbc>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f280 8169 	bge.w	8006108 <_malloc_r+0x378>
 8005e36:	68ff      	ldr	r7, [r7, #12]
 8005e38:	42b9      	cmp	r1, r7
 8005e3a:	d007      	beq.n	8005e4c <_malloc_r+0xbc>
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	f022 0203 	bic.w	r2, r2, #3
 8005e42:	1b13      	subs	r3, r2, r4
 8005e44:	2b0f      	cmp	r3, #15
 8005e46:	ddf3      	ble.n	8005e30 <_malloc_r+0xa0>
 8005e48:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8005e4c:	f10e 0e01 	add.w	lr, lr, #1
 8005e50:	4a58      	ldr	r2, [pc, #352]	; (8005fb4 <_malloc_r+0x224>)
 8005e52:	6937      	ldr	r7, [r6, #16]
 8005e54:	f102 0c08 	add.w	ip, r2, #8
 8005e58:	4567      	cmp	r7, ip
 8005e5a:	bf08      	it	eq
 8005e5c:	6853      	ldreq	r3, [r2, #4]
 8005e5e:	d023      	beq.n	8005ea8 <_malloc_r+0x118>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	1b19      	subs	r1, r3, r4
 8005e68:	290f      	cmp	r1, #15
 8005e6a:	f300 81b4 	bgt.w	80061d6 <_malloc_r+0x446>
 8005e6e:	2900      	cmp	r1, #0
 8005e70:	f8c2 c014 	str.w	ip, [r2, #20]
 8005e74:	f8c2 c010 	str.w	ip, [r2, #16]
 8005e78:	f280 808f 	bge.w	8005f9a <_malloc_r+0x20a>
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e80:	f080 8161 	bcs.w	8006146 <_malloc_r+0x3b6>
 8005e84:	08db      	lsrs	r3, r3, #3
 8005e86:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005e8a:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8005e8e:	6888      	ldr	r0, [r1, #8]
 8005e90:	60f9      	str	r1, [r7, #12]
 8005e92:	109b      	asrs	r3, r3, #2
 8005e94:	f04f 0901 	mov.w	r9, #1
 8005e98:	fa09 f303 	lsl.w	r3, r9, r3
 8005e9c:	ea43 0308 	orr.w	r3, r3, r8
 8005ea0:	60b8      	str	r0, [r7, #8]
 8005ea2:	6053      	str	r3, [r2, #4]
 8005ea4:	608f      	str	r7, [r1, #8]
 8005ea6:	60c7      	str	r7, [r0, #12]
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	ea4f 02ae 	mov.w	r2, lr, asr #2
 8005eae:	4090      	lsls	r0, r2
 8005eb0:	4298      	cmp	r0, r3
 8005eb2:	f200 8081 	bhi.w	8005fb8 <_malloc_r+0x228>
 8005eb6:	4203      	tst	r3, r0
 8005eb8:	d106      	bne.n	8005ec8 <_malloc_r+0x138>
 8005eba:	f02e 0e03 	bic.w	lr, lr, #3
 8005ebe:	0040      	lsls	r0, r0, #1
 8005ec0:	4203      	tst	r3, r0
 8005ec2:	f10e 0e04 	add.w	lr, lr, #4
 8005ec6:	d0fa      	beq.n	8005ebe <_malloc_r+0x12e>
 8005ec8:	eb06 09ce 	add.w	r9, r6, lr, lsl #3
 8005ecc:	464f      	mov	r7, r9
 8005ece:	46f0      	mov	r8, lr
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	429f      	cmp	r7, r3
 8005ed4:	d107      	bne.n	8005ee6 <_malloc_r+0x156>
 8005ed6:	e191      	b.n	80061fc <_malloc_r+0x46c>
 8005ed8:	2a00      	cmp	r2, #0
 8005eda:	f280 81b7 	bge.w	800624c <_malloc_r+0x4bc>
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	429f      	cmp	r7, r3
 8005ee2:	f000 818b 	beq.w	80061fc <_malloc_r+0x46c>
 8005ee6:	6859      	ldr	r1, [r3, #4]
 8005ee8:	f021 0103 	bic.w	r1, r1, #3
 8005eec:	1b0a      	subs	r2, r1, r4
 8005eee:	2a0f      	cmp	r2, #15
 8005ef0:	ddf2      	ble.n	8005ed8 <_malloc_r+0x148>
 8005ef2:	461f      	mov	r7, r3
 8005ef4:	1919      	adds	r1, r3, r4
 8005ef6:	68d8      	ldr	r0, [r3, #12]
 8005ef8:	f857 ef08 	ldr.w	lr, [r7, #8]!
 8005efc:	508a      	str	r2, [r1, r2]
 8005efe:	f044 0401 	orr.w	r4, r4, #1
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	f8ce 000c 	str.w	r0, [lr, #12]
 8005f0a:	f8c0 e008 	str.w	lr, [r0, #8]
 8005f0e:	605c      	str	r4, [r3, #4]
 8005f10:	6171      	str	r1, [r6, #20]
 8005f12:	6131      	str	r1, [r6, #16]
 8005f14:	f8c1 c00c 	str.w	ip, [r1, #12]
 8005f18:	f8c1 c008 	str.w	ip, [r1, #8]
 8005f1c:	604a      	str	r2, [r1, #4]
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f000 fa6e 	bl	8006400 <__malloc_unlock>
 8005f24:	e763      	b.n	8005dee <_malloc_r+0x5e>
 8005f26:	f1be 0f04 	cmp.w	lr, #4
 8005f2a:	bf9e      	ittt	ls
 8005f2c:	ea4f 1e94 	movls.w	lr, r4, lsr #6
 8005f30:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
 8005f34:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f38:	f67f af74 	bls.w	8005e24 <_malloc_r+0x94>
 8005f3c:	f1be 0f14 	cmp.w	lr, #20
 8005f40:	bf9c      	itt	ls
 8005f42:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
 8005f46:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f4a:	f67f af6b 	bls.w	8005e24 <_malloc_r+0x94>
 8005f4e:	f1be 0f54 	cmp.w	lr, #84	; 0x54
 8005f52:	bf9e      	ittt	ls
 8005f54:	ea4f 3e14 	movls.w	lr, r4, lsr #12
 8005f58:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
 8005f5c:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f60:	f67f af60 	bls.w	8005e24 <_malloc_r+0x94>
 8005f64:	f5be 7faa 	cmp.w	lr, #340	; 0x154
 8005f68:	bf9e      	ittt	ls
 8005f6a:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
 8005f6e:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
 8005f72:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f76:	f67f af55 	bls.w	8005e24 <_malloc_r+0x94>
 8005f7a:	f240 5354 	movw	r3, #1364	; 0x554
 8005f7e:	459e      	cmp	lr, r3
 8005f80:	bf9d      	ittte	ls
 8005f82:	ea4f 4e94 	movls.w	lr, r4, lsr #18
 8005f86:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
 8005f8a:	ea4f 01ce 	movls.w	r1, lr, lsl #3
 8005f8e:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
 8005f92:	bf88      	it	hi
 8005f94:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
 8005f98:	e744      	b.n	8005e24 <_malloc_r+0x94>
 8005f9a:	18fb      	adds	r3, r7, r3
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	605a      	str	r2, [r3, #4]
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	f000 fa2a 	bl	8006400 <__malloc_unlock>
 8005fac:	4638      	mov	r0, r7
 8005fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb2:	bf00      	nop
 8005fb4:	2000057c 	.word	0x2000057c
 8005fb8:	68b7      	ldr	r7, [r6, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f023 0803 	bic.w	r8, r3, #3
 8005fc0:	4544      	cmp	r4, r8
 8005fc2:	ebc4 0208 	rsb	r2, r4, r8
 8005fc6:	bf94      	ite	ls
 8005fc8:	2300      	movls	r3, #0
 8005fca:	2301      	movhi	r3, #1
 8005fcc:	2a0f      	cmp	r2, #15
 8005fce:	bfd8      	it	le
 8005fd0:	f043 0301 	orrle.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80a7 	beq.w	8006128 <_malloc_r+0x398>
 8005fda:	4bb3      	ldr	r3, [pc, #716]	; (80062a8 <_malloc_r+0x518>)
 8005fdc:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 80062ac <_malloc_r+0x51c>
 8005fe0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005fe4:	f8da 3000 	ldr.w	r3, [sl]
 8005fe8:	3201      	adds	r2, #1
 8005fea:	4423      	add	r3, r4
 8005fec:	bf08      	it	eq
 8005fee:	f103 0b10 	addeq.w	fp, r3, #16
 8005ff2:	d006      	beq.n	8006002 <_malloc_r+0x272>
 8005ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff8:	330f      	adds	r3, #15
 8005ffa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005ffe:	f023 0b0f 	bic.w	fp, r3, #15
 8006002:	4628      	mov	r0, r5
 8006004:	4659      	mov	r1, fp
 8006006:	f000 fe89 	bl	8006d1c <_sbrk_r>
 800600a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800600e:	4681      	mov	r9, r0
 8006010:	f000 8144 	beq.w	800629c <_malloc_r+0x50c>
 8006014:	eb07 0208 	add.w	r2, r7, r8
 8006018:	4282      	cmp	r2, r0
 800601a:	f200 8126 	bhi.w	800626a <_malloc_r+0x4da>
 800601e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006022:	454a      	cmp	r2, r9
 8006024:	445b      	add	r3, fp
 8006026:	f8ca 3004 	str.w	r3, [sl, #4]
 800602a:	f000 8141 	beq.w	80062b0 <_malloc_r+0x520>
 800602e:	f8d6 1408 	ldr.w	r1, [r6, #1032]	; 0x408
 8006032:	3101      	adds	r1, #1
 8006034:	bf15      	itete	ne
 8006036:	ebc2 0209 	rsbne	r2, r2, r9
 800603a:	4b9b      	ldreq	r3, [pc, #620]	; (80062a8 <_malloc_r+0x518>)
 800603c:	189b      	addne	r3, r3, r2
 800603e:	f8c3 9408 	streq.w	r9, [r3, #1032]	; 0x408
 8006042:	bf18      	it	ne
 8006044:	f8ca 3004 	strne.w	r3, [sl, #4]
 8006048:	f019 0307 	ands.w	r3, r9, #7
 800604c:	bf1f      	itttt	ne
 800604e:	f1c3 0208 	rsbne	r2, r3, #8
 8006052:	4491      	addne	r9, r2
 8006054:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8006058:	f103 0208 	addne.w	r2, r3, #8
 800605c:	eb09 030b 	add.w	r3, r9, fp
 8006060:	bf08      	it	eq
 8006062:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 8006066:	051b      	lsls	r3, r3, #20
 8006068:	0d1b      	lsrs	r3, r3, #20
 800606a:	ebc3 0b02 	rsb	fp, r3, r2
 800606e:	4628      	mov	r0, r5
 8006070:	4659      	mov	r1, fp
 8006072:	f000 fe53 	bl	8006d1c <_sbrk_r>
 8006076:	1c43      	adds	r3, r0, #1
 8006078:	f000 8126 	beq.w	80062c8 <_malloc_r+0x538>
 800607c:	ebc9 0200 	rsb	r2, r9, r0
 8006080:	445a      	add	r2, fp
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	f8da 3004 	ldr.w	r3, [sl, #4]
 800608a:	f8c6 9008 	str.w	r9, [r6, #8]
 800608e:	445b      	add	r3, fp
 8006090:	42b7      	cmp	r7, r6
 8006092:	f8ca 3004 	str.w	r3, [sl, #4]
 8006096:	f8c9 2004 	str.w	r2, [r9, #4]
 800609a:	d015      	beq.n	80060c8 <_malloc_r+0x338>
 800609c:	f1b8 0f0f 	cmp.w	r8, #15
 80060a0:	f240 80f6 	bls.w	8006290 <_malloc_r+0x500>
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f1a8 020c 	sub.w	r2, r8, #12
 80060aa:	f022 0207 	bic.w	r2, r2, #7
 80060ae:	18b9      	adds	r1, r7, r2
 80060b0:	f000 0e01 	and.w	lr, r0, #1
 80060b4:	ea42 0e0e 	orr.w	lr, r2, lr
 80060b8:	2005      	movs	r0, #5
 80060ba:	2a0f      	cmp	r2, #15
 80060bc:	f8c7 e004 	str.w	lr, [r7, #4]
 80060c0:	6048      	str	r0, [r1, #4]
 80060c2:	6088      	str	r0, [r1, #8]
 80060c4:	f200 8104 	bhi.w	80062d0 <_malloc_r+0x540>
 80060c8:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80060cc:	68b7      	ldr	r7, [r6, #8]
 80060ce:	4293      	cmp	r3, r2
 80060d0:	bf84      	itt	hi
 80060d2:	4a76      	ldrhi	r2, [pc, #472]	; (80062ac <_malloc_r+0x51c>)
 80060d4:	62d3      	strhi	r3, [r2, #44]	; 0x2c
 80060d6:	f8da 2030 	ldr.w	r2, [sl, #48]	; 0x30
 80060da:	4293      	cmp	r3, r2
 80060dc:	bf84      	itt	hi
 80060de:	4a73      	ldrhi	r2, [pc, #460]	; (80062ac <_malloc_r+0x51c>)
 80060e0:	6313      	strhi	r3, [r2, #48]	; 0x30
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f023 0303 	bic.w	r3, r3, #3
 80060e8:	429c      	cmp	r4, r3
 80060ea:	ebc4 0203 	rsb	r2, r4, r3
 80060ee:	bf94      	ite	ls
 80060f0:	2300      	movls	r3, #0
 80060f2:	2301      	movhi	r3, #1
 80060f4:	2a0f      	cmp	r2, #15
 80060f6:	bfd8      	it	le
 80060f8:	f043 0301 	orrle.w	r3, r3, #1
 80060fc:	b1a3      	cbz	r3, 8006128 <_malloc_r+0x398>
 80060fe:	4628      	mov	r0, r5
 8006100:	f000 f97e 	bl	8006400 <__malloc_unlock>
 8006104:	2700      	movs	r7, #0
 8006106:	e672      	b.n	8005dee <_malloc_r+0x5e>
 8006108:	18ba      	adds	r2, r7, r2
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6850      	ldr	r0, [r2, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	f040 0001 	orr.w	r0, r0, #1
 8006114:	6050      	str	r0, [r2, #4]
 8006116:	60cb      	str	r3, [r1, #12]
 8006118:	4628      	mov	r0, r5
 800611a:	6099      	str	r1, [r3, #8]
 800611c:	3708      	adds	r7, #8
 800611e:	f000 f96f 	bl	8006400 <__malloc_unlock>
 8006122:	4638      	mov	r0, r7
 8006124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006128:	193b      	adds	r3, r7, r4
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	f044 0401 	orr.w	r4, r4, #1
 8006132:	607c      	str	r4, [r7, #4]
 8006134:	4628      	mov	r0, r5
 8006136:	605a      	str	r2, [r3, #4]
 8006138:	3708      	adds	r7, #8
 800613a:	60b3      	str	r3, [r6, #8]
 800613c:	f000 f960 	bl	8006400 <__malloc_unlock>
 8006140:	4638      	mov	r0, r7
 8006142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006146:	0a5a      	lsrs	r2, r3, #9
 8006148:	2a04      	cmp	r2, #4
 800614a:	bf9e      	ittt	ls
 800614c:	ea4f 1893 	movls.w	r8, r3, lsr #6
 8006150:	f108 0838 	addls.w	r8, r8, #56	; 0x38
 8006154:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006158:	d928      	bls.n	80061ac <_malloc_r+0x41c>
 800615a:	2a14      	cmp	r2, #20
 800615c:	bf9c      	itt	ls
 800615e:	f102 085b 	addls.w	r8, r2, #91	; 0x5b
 8006162:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006166:	d921      	bls.n	80061ac <_malloc_r+0x41c>
 8006168:	2a54      	cmp	r2, #84	; 0x54
 800616a:	bf9e      	ittt	ls
 800616c:	ea4f 3813 	movls.w	r8, r3, lsr #12
 8006170:	f108 086e 	addls.w	r8, r8, #110	; 0x6e
 8006174:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 8006178:	d918      	bls.n	80061ac <_malloc_r+0x41c>
 800617a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800617e:	bf9e      	ittt	ls
 8006180:	ea4f 38d3 	movls.w	r8, r3, lsr #15
 8006184:	f108 0877 	addls.w	r8, r8, #119	; 0x77
 8006188:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 800618c:	d90e      	bls.n	80061ac <_malloc_r+0x41c>
 800618e:	f240 5154 	movw	r1, #1364	; 0x554
 8006192:	428a      	cmp	r2, r1
 8006194:	bf9d      	ittte	ls
 8006196:	ea4f 4893 	movls.w	r8, r3, lsr #18
 800619a:	f108 087c 	addls.w	r8, r8, #124	; 0x7c
 800619e:	ea4f 00c8 	movls.w	r0, r8, lsl #3
 80061a2:	f44f 707c 	movhi.w	r0, #1008	; 0x3f0
 80061a6:	bf88      	it	hi
 80061a8:	f04f 087e 	movhi.w	r8, #126	; 0x7e
 80061ac:	1830      	adds	r0, r6, r0
 80061ae:	493e      	ldr	r1, [pc, #248]	; (80062a8 <_malloc_r+0x518>)
 80061b0:	6882      	ldr	r2, [r0, #8]
 80061b2:	4282      	cmp	r2, r0
 80061b4:	d103      	bne.n	80061be <_malloc_r+0x42e>
 80061b6:	e061      	b.n	800627c <_malloc_r+0x4ec>
 80061b8:	6892      	ldr	r2, [r2, #8]
 80061ba:	4290      	cmp	r0, r2
 80061bc:	d004      	beq.n	80061c8 <_malloc_r+0x438>
 80061be:	6851      	ldr	r1, [r2, #4]
 80061c0:	f021 0103 	bic.w	r1, r1, #3
 80061c4:	428b      	cmp	r3, r1
 80061c6:	d3f7      	bcc.n	80061b8 <_malloc_r+0x428>
 80061c8:	68d1      	ldr	r1, [r2, #12]
 80061ca:	6873      	ldr	r3, [r6, #4]
 80061cc:	60f9      	str	r1, [r7, #12]
 80061ce:	60ba      	str	r2, [r7, #8]
 80061d0:	60d7      	str	r7, [r2, #12]
 80061d2:	608f      	str	r7, [r1, #8]
 80061d4:	e668      	b.n	8005ea8 <_malloc_r+0x118>
 80061d6:	193b      	adds	r3, r7, r4
 80061d8:	f041 0001 	orr.w	r0, r1, #1
 80061dc:	f044 0401 	orr.w	r4, r4, #1
 80061e0:	607c      	str	r4, [r7, #4]
 80061e2:	6153      	str	r3, [r2, #20]
 80061e4:	6113      	str	r3, [r2, #16]
 80061e6:	6058      	str	r0, [r3, #4]
 80061e8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80061ec:	f8c3 c008 	str.w	ip, [r3, #8]
 80061f0:	5059      	str	r1, [r3, r1]
 80061f2:	4628      	mov	r0, r5
 80061f4:	f000 f904 	bl	8006400 <__malloc_unlock>
 80061f8:	3708      	adds	r7, #8
 80061fa:	e5f8      	b.n	8005dee <_malloc_r+0x5e>
 80061fc:	f108 0801 	add.w	r8, r8, #1
 8006200:	3708      	adds	r7, #8
 8006202:	f018 0f03 	tst.w	r8, #3
 8006206:	f47f ae63 	bne.w	8005ed0 <_malloc_r+0x140>
 800620a:	464b      	mov	r3, r9
 800620c:	f01e 0f03 	tst.w	lr, #3
 8006210:	f1a3 0208 	sub.w	r2, r3, #8
 8006214:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006218:	d062      	beq.n	80062e0 <_malloc_r+0x550>
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4293      	cmp	r3, r2
 800621e:	d0f5      	beq.n	800620c <_malloc_r+0x47c>
 8006220:	6873      	ldr	r3, [r6, #4]
 8006222:	0040      	lsls	r0, r0, #1
 8006224:	4298      	cmp	r0, r3
 8006226:	f63f aec7 	bhi.w	8005fb8 <_malloc_r+0x228>
 800622a:	2800      	cmp	r0, #0
 800622c:	f43f aec4 	beq.w	8005fb8 <_malloc_r+0x228>
 8006230:	4218      	tst	r0, r3
 8006232:	d05a      	beq.n	80062ea <_malloc_r+0x55a>
 8006234:	46c6      	mov	lr, r8
 8006236:	e647      	b.n	8005ec8 <_malloc_r+0x138>
 8006238:	f107 0308 	add.w	r3, r7, #8
 800623c:	697f      	ldr	r7, [r7, #20]
 800623e:	42bb      	cmp	r3, r7
 8006240:	bf08      	it	eq
 8006242:	f10e 0e02 	addeq.w	lr, lr, #2
 8006246:	f43f ae03 	beq.w	8005e50 <_malloc_r+0xc0>
 800624a:	e5c0      	b.n	8005dce <_malloc_r+0x3e>
 800624c:	1859      	adds	r1, r3, r1
 800624e:	461f      	mov	r7, r3
 8006250:	6848      	ldr	r0, [r1, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f857 2f08 	ldr.w	r2, [r7, #8]!
 8006258:	f040 0001 	orr.w	r0, r0, #1
 800625c:	6048      	str	r0, [r1, #4]
 800625e:	60d3      	str	r3, [r2, #12]
 8006260:	609a      	str	r2, [r3, #8]
 8006262:	4628      	mov	r0, r5
 8006264:	f000 f8cc 	bl	8006400 <__malloc_unlock>
 8006268:	e5c1      	b.n	8005dee <_malloc_r+0x5e>
 800626a:	42b7      	cmp	r7, r6
 800626c:	f43f aed7 	beq.w	800601e <_malloc_r+0x28e>
 8006270:	4b0d      	ldr	r3, [pc, #52]	; (80062a8 <_malloc_r+0x518>)
 8006272:	689f      	ldr	r7, [r3, #8]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	e735      	b.n	80060e8 <_malloc_r+0x358>
 800627c:	684b      	ldr	r3, [r1, #4]
 800627e:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8006282:	2001      	movs	r0, #1
 8006284:	fa00 f008 	lsl.w	r0, r0, r8
 8006288:	4303      	orrs	r3, r0
 800628a:	604b      	str	r3, [r1, #4]
 800628c:	4611      	mov	r1, r2
 800628e:	e79d      	b.n	80061cc <_malloc_r+0x43c>
 8006290:	2301      	movs	r3, #1
 8006292:	f8c9 3004 	str.w	r3, [r9, #4]
 8006296:	464f      	mov	r7, r9
 8006298:	2300      	movs	r3, #0
 800629a:	e725      	b.n	80060e8 <_malloc_r+0x358>
 800629c:	68b7      	ldr	r7, [r6, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f023 0303 	bic.w	r3, r3, #3
 80062a4:	e720      	b.n	80060e8 <_malloc_r+0x358>
 80062a6:	bf00      	nop
 80062a8:	2000057c 	.word	0x2000057c
 80062ac:	200009a4 	.word	0x200009a4
 80062b0:	0511      	lsls	r1, r2, #20
 80062b2:	0d09      	lsrs	r1, r1, #20
 80062b4:	2900      	cmp	r1, #0
 80062b6:	f47f aeba 	bne.w	800602e <_malloc_r+0x29e>
 80062ba:	68b2      	ldr	r2, [r6, #8]
 80062bc:	eb0b 0108 	add.w	r1, fp, r8
 80062c0:	f041 0101 	orr.w	r1, r1, #1
 80062c4:	6051      	str	r1, [r2, #4]
 80062c6:	e6ff      	b.n	80060c8 <_malloc_r+0x338>
 80062c8:	2201      	movs	r2, #1
 80062ca:	f04f 0b00 	mov.w	fp, #0
 80062ce:	e6da      	b.n	8006086 <_malloc_r+0x2f6>
 80062d0:	4628      	mov	r0, r5
 80062d2:	f107 0108 	add.w	r1, r7, #8
 80062d6:	f7ff fc4f 	bl	8005b78 <_free_r>
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <_malloc_r+0x564>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	e6f3      	b.n	80060c8 <_malloc_r+0x338>
 80062e0:	6873      	ldr	r3, [r6, #4]
 80062e2:	ea23 0300 	bic.w	r3, r3, r0
 80062e6:	6073      	str	r3, [r6, #4]
 80062e8:	e79b      	b.n	8006222 <_malloc_r+0x492>
 80062ea:	0040      	lsls	r0, r0, #1
 80062ec:	f108 0804 	add.w	r8, r8, #4
 80062f0:	e79e      	b.n	8006230 <_malloc_r+0x4a0>
 80062f2:	bf00      	nop
 80062f4:	200009a4 	.word	0x200009a4

080062f8 <memchr>:
 80062f8:	0783      	lsls	r3, r0, #30
 80062fa:	b470      	push	{r4, r5, r6}
 80062fc:	b2c9      	uxtb	r1, r1
 80062fe:	d00f      	beq.n	8006320 <memchr+0x28>
 8006300:	2a00      	cmp	r2, #0
 8006302:	d033      	beq.n	800636c <memchr+0x74>
 8006304:	7803      	ldrb	r3, [r0, #0]
 8006306:	3a01      	subs	r2, #1
 8006308:	428b      	cmp	r3, r1
 800630a:	d106      	bne.n	800631a <memchr+0x22>
 800630c:	e01d      	b.n	800634a <memchr+0x52>
 800630e:	2a00      	cmp	r2, #0
 8006310:	d02c      	beq.n	800636c <memchr+0x74>
 8006312:	7803      	ldrb	r3, [r0, #0]
 8006314:	3a01      	subs	r2, #1
 8006316:	428b      	cmp	r3, r1
 8006318:	d017      	beq.n	800634a <memchr+0x52>
 800631a:	3001      	adds	r0, #1
 800631c:	0783      	lsls	r3, r0, #30
 800631e:	d1f6      	bne.n	800630e <memchr+0x16>
 8006320:	2a03      	cmp	r2, #3
 8006322:	bf84      	itt	hi
 8006324:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
 8006328:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
 800632c:	d80f      	bhi.n	800634e <memchr+0x56>
 800632e:	b1ea      	cbz	r2, 800636c <memchr+0x74>
 8006330:	7803      	ldrb	r3, [r0, #0]
 8006332:	3a01      	subs	r2, #1
 8006334:	428b      	cmp	r3, r1
 8006336:	4402      	add	r2, r0
 8006338:	d104      	bne.n	8006344 <memchr+0x4c>
 800633a:	e006      	b.n	800634a <memchr+0x52>
 800633c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006340:	428b      	cmp	r3, r1
 8006342:	d002      	beq.n	800634a <memchr+0x52>
 8006344:	4290      	cmp	r0, r2
 8006346:	d1f9      	bne.n	800633c <memchr+0x44>
 8006348:	2000      	movs	r0, #0
 800634a:	bc70      	pop	{r4, r5, r6}
 800634c:	4770      	bx	lr
 800634e:	4604      	mov	r4, r0
 8006350:	3004      	adds	r0, #4
 8006352:	6823      	ldr	r3, [r4, #0]
 8006354:	4073      	eors	r3, r6
 8006356:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 800635a:	ea25 0303 	bic.w	r3, r5, r3
 800635e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8006362:	d105      	bne.n	8006370 <memchr+0x78>
 8006364:	3a04      	subs	r2, #4
 8006366:	2a03      	cmp	r2, #3
 8006368:	d8f1      	bhi.n	800634e <memchr+0x56>
 800636a:	e7e0      	b.n	800632e <memchr+0x36>
 800636c:	4610      	mov	r0, r2
 800636e:	e7ec      	b.n	800634a <memchr+0x52>
 8006370:	4620      	mov	r0, r4
 8006372:	e7dc      	b.n	800632e <memchr+0x36>

08006374 <memcpy>:
 8006374:	2a0f      	cmp	r2, #15
 8006376:	b4f0      	push	{r4, r5, r6, r7}
 8006378:	bf98      	it	ls
 800637a:	4603      	movls	r3, r0
 800637c:	d931      	bls.n	80063e2 <memcpy+0x6e>
 800637e:	ea41 0300 	orr.w	r3, r1, r0
 8006382:	079b      	lsls	r3, r3, #30
 8006384:	d137      	bne.n	80063f6 <memcpy+0x82>
 8006386:	460c      	mov	r4, r1
 8006388:	4603      	mov	r3, r0
 800638a:	4615      	mov	r5, r2
 800638c:	6826      	ldr	r6, [r4, #0]
 800638e:	601e      	str	r6, [r3, #0]
 8006390:	6866      	ldr	r6, [r4, #4]
 8006392:	605e      	str	r6, [r3, #4]
 8006394:	68a6      	ldr	r6, [r4, #8]
 8006396:	609e      	str	r6, [r3, #8]
 8006398:	68e6      	ldr	r6, [r4, #12]
 800639a:	3d10      	subs	r5, #16
 800639c:	60de      	str	r6, [r3, #12]
 800639e:	3410      	adds	r4, #16
 80063a0:	3310      	adds	r3, #16
 80063a2:	2d0f      	cmp	r5, #15
 80063a4:	d8f2      	bhi.n	800638c <memcpy+0x18>
 80063a6:	f1a2 0410 	sub.w	r4, r2, #16
 80063aa:	f024 040f 	bic.w	r4, r4, #15
 80063ae:	f002 020f 	and.w	r2, r2, #15
 80063b2:	3410      	adds	r4, #16
 80063b4:	2a03      	cmp	r2, #3
 80063b6:	eb00 0304 	add.w	r3, r0, r4
 80063ba:	4421      	add	r1, r4
 80063bc:	d911      	bls.n	80063e2 <memcpy+0x6e>
 80063be:	1f0e      	subs	r6, r1, #4
 80063c0:	461d      	mov	r5, r3
 80063c2:	4614      	mov	r4, r2
 80063c4:	f856 7f04 	ldr.w	r7, [r6, #4]!
 80063c8:	3c04      	subs	r4, #4
 80063ca:	2c03      	cmp	r4, #3
 80063cc:	f845 7b04 	str.w	r7, [r5], #4
 80063d0:	d8f8      	bhi.n	80063c4 <memcpy+0x50>
 80063d2:	1f14      	subs	r4, r2, #4
 80063d4:	f024 0403 	bic.w	r4, r4, #3
 80063d8:	3404      	adds	r4, #4
 80063da:	f002 0203 	and.w	r2, r2, #3
 80063de:	1909      	adds	r1, r1, r4
 80063e0:	191b      	adds	r3, r3, r4
 80063e2:	b132      	cbz	r2, 80063f2 <memcpy+0x7e>
 80063e4:	3901      	subs	r1, #1
 80063e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80063ea:	3a01      	subs	r2, #1
 80063ec:	f803 4b01 	strb.w	r4, [r3], #1
 80063f0:	d1f9      	bne.n	80063e6 <memcpy+0x72>
 80063f2:	bcf0      	pop	{r4, r5, r6, r7}
 80063f4:	4770      	bx	lr
 80063f6:	4603      	mov	r3, r0
 80063f8:	e7f4      	b.n	80063e4 <memcpy+0x70>
 80063fa:	bf00      	nop

080063fc <__malloc_lock>:
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop

08006400 <__malloc_unlock>:
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop

08006404 <_Balloc>:
 8006404:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006406:	b570      	push	{r4, r5, r6, lr}
 8006408:	4605      	mov	r5, r0
 800640a:	460c      	mov	r4, r1
 800640c:	b14b      	cbz	r3, 8006422 <_Balloc+0x1e>
 800640e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006412:	b178      	cbz	r0, 8006434 <_Balloc+0x30>
 8006414:	6802      	ldr	r2, [r0, #0]
 8006416:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800641a:	2300      	movs	r3, #0
 800641c:	6103      	str	r3, [r0, #16]
 800641e:	60c3      	str	r3, [r0, #12]
 8006420:	bd70      	pop	{r4, r5, r6, pc}
 8006422:	2104      	movs	r1, #4
 8006424:	2221      	movs	r2, #33	; 0x21
 8006426:	f001 fa7f 	bl	8007928 <_calloc_r>
 800642a:	4603      	mov	r3, r0
 800642c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800642e:	2800      	cmp	r0, #0
 8006430:	d1ed      	bne.n	800640e <_Balloc+0xa>
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	2101      	movs	r1, #1
 8006436:	fa11 f604 	lsls.w	r6, r1, r4
 800643a:	1d72      	adds	r2, r6, #5
 800643c:	4628      	mov	r0, r5
 800643e:	0092      	lsls	r2, r2, #2
 8006440:	f001 fa72 	bl	8007928 <_calloc_r>
 8006444:	2800      	cmp	r0, #0
 8006446:	d0f4      	beq.n	8006432 <_Balloc+0x2e>
 8006448:	6044      	str	r4, [r0, #4]
 800644a:	6086      	str	r6, [r0, #8]
 800644c:	e7e5      	b.n	800641a <_Balloc+0x16>
 800644e:	bf00      	nop

08006450 <_Bfree>:
 8006450:	b131      	cbz	r1, 8006460 <_Bfree+0x10>
 8006452:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006454:	684a      	ldr	r2, [r1, #4]
 8006456:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800645a:	6008      	str	r0, [r1, #0]
 800645c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop

08006464 <__multadd>:
 8006464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006466:	460d      	mov	r5, r1
 8006468:	4606      	mov	r6, r0
 800646a:	690c      	ldr	r4, [r1, #16]
 800646c:	f101 0014 	add.w	r0, r1, #20
 8006470:	b083      	sub	sp, #12
 8006472:	2100      	movs	r1, #0
 8006474:	6807      	ldr	r7, [r0, #0]
 8006476:	fa1f fc87 	uxth.w	ip, r7
 800647a:	0c3f      	lsrs	r7, r7, #16
 800647c:	fb02 330c 	mla	r3, r2, ip, r3
 8006480:	fb02 f707 	mul.w	r7, r2, r7
 8006484:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006488:	b29b      	uxth	r3, r3
 800648a:	eb03 4307 	add.w	r3, r3, r7, lsl #16
 800648e:	3101      	adds	r1, #1
 8006490:	f840 3b04 	str.w	r3, [r0], #4
 8006494:	0c3b      	lsrs	r3, r7, #16
 8006496:	428c      	cmp	r4, r1
 8006498:	dcec      	bgt.n	8006474 <__multadd+0x10>
 800649a:	b13b      	cbz	r3, 80064ac <__multadd+0x48>
 800649c:	68aa      	ldr	r2, [r5, #8]
 800649e:	4294      	cmp	r4, r2
 80064a0:	da07      	bge.n	80064b2 <__multadd+0x4e>
 80064a2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 80064a6:	3401      	adds	r4, #1
 80064a8:	6153      	str	r3, [r2, #20]
 80064aa:	612c      	str	r4, [r5, #16]
 80064ac:	4628      	mov	r0, r5
 80064ae:	b003      	add	sp, #12
 80064b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b2:	6869      	ldr	r1, [r5, #4]
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	3101      	adds	r1, #1
 80064b8:	4630      	mov	r0, r6
 80064ba:	f7ff ffa3 	bl	8006404 <_Balloc>
 80064be:	692a      	ldr	r2, [r5, #16]
 80064c0:	3202      	adds	r2, #2
 80064c2:	f105 010c 	add.w	r1, r5, #12
 80064c6:	4607      	mov	r7, r0
 80064c8:	0092      	lsls	r2, r2, #2
 80064ca:	f100 000c 	add.w	r0, r0, #12
 80064ce:	f7ff ff51 	bl	8006374 <memcpy>
 80064d2:	6869      	ldr	r1, [r5, #4]
 80064d4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80064d6:	9b01      	ldr	r3, [sp, #4]
 80064d8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80064dc:	6028      	str	r0, [r5, #0]
 80064de:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80064e2:	463d      	mov	r5, r7
 80064e4:	e7dd      	b.n	80064a2 <__multadd+0x3e>
 80064e6:	bf00      	nop

080064e8 <__s2b>:
 80064e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ec:	461e      	mov	r6, r3
 80064ee:	f648 6339 	movw	r3, #36409	; 0x8e39
 80064f2:	f106 0408 	add.w	r4, r6, #8
 80064f6:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 80064fa:	fb83 5304 	smull	r5, r3, r3, r4
 80064fe:	17e4      	asrs	r4, r4, #31
 8006500:	ebc4 0363 	rsb	r3, r4, r3, asr #1
 8006504:	460f      	mov	r7, r1
 8006506:	2100      	movs	r1, #0
 8006508:	2b01      	cmp	r3, #1
 800650a:	4604      	mov	r4, r0
 800650c:	4690      	mov	r8, r2
 800650e:	dd05      	ble.n	800651c <__s2b+0x34>
 8006510:	2201      	movs	r2, #1
 8006512:	2100      	movs	r1, #0
 8006514:	0052      	lsls	r2, r2, #1
 8006516:	3101      	adds	r1, #1
 8006518:	4293      	cmp	r3, r2
 800651a:	dcfb      	bgt.n	8006514 <__s2b+0x2c>
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff ff71 	bl	8006404 <_Balloc>
 8006522:	9b08      	ldr	r3, [sp, #32]
 8006524:	6143      	str	r3, [r0, #20]
 8006526:	2301      	movs	r3, #1
 8006528:	f1b8 0f09 	cmp.w	r8, #9
 800652c:	4601      	mov	r1, r0
 800652e:	6103      	str	r3, [r0, #16]
 8006530:	dd23      	ble.n	800657a <__s2b+0x92>
 8006532:	f107 0909 	add.w	r9, r7, #9
 8006536:	464d      	mov	r5, r9
 8006538:	4447      	add	r7, r8
 800653a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800653e:	220a      	movs	r2, #10
 8006540:	3b30      	subs	r3, #48	; 0x30
 8006542:	4620      	mov	r0, r4
 8006544:	f7ff ff8e 	bl	8006464 <__multadd>
 8006548:	42bd      	cmp	r5, r7
 800654a:	4601      	mov	r1, r0
 800654c:	d1f5      	bne.n	800653a <__s2b+0x52>
 800654e:	eb09 0708 	add.w	r7, r9, r8
 8006552:	3f08      	subs	r7, #8
 8006554:	4546      	cmp	r6, r8
 8006556:	dd0d      	ble.n	8006574 <__s2b+0x8c>
 8006558:	ebc8 0707 	rsb	r7, r8, r7
 800655c:	f817 3008 	ldrb.w	r3, [r7, r8]
 8006560:	220a      	movs	r2, #10
 8006562:	3b30      	subs	r3, #48	; 0x30
 8006564:	4620      	mov	r0, r4
 8006566:	f7ff ff7d 	bl	8006464 <__multadd>
 800656a:	f108 0801 	add.w	r8, r8, #1
 800656e:	45b0      	cmp	r8, r6
 8006570:	4601      	mov	r1, r0
 8006572:	d1f3      	bne.n	800655c <__s2b+0x74>
 8006574:	4608      	mov	r0, r1
 8006576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657a:	370a      	adds	r7, #10
 800657c:	f04f 0809 	mov.w	r8, #9
 8006580:	e7e8      	b.n	8006554 <__s2b+0x6c>
 8006582:	bf00      	nop

08006584 <__hi0bits>:
 8006584:	4603      	mov	r3, r0
 8006586:	2000      	movs	r0, #0
 8006588:	0c1a      	lsrs	r2, r3, #16
 800658a:	d101      	bne.n	8006590 <__hi0bits+0xc>
 800658c:	041b      	lsls	r3, r3, #16
 800658e:	2010      	movs	r0, #16
 8006590:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006594:	d101      	bne.n	800659a <__hi0bits+0x16>
 8006596:	3008      	adds	r0, #8
 8006598:	021b      	lsls	r3, r3, #8
 800659a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800659e:	d101      	bne.n	80065a4 <__hi0bits+0x20>
 80065a0:	3004      	adds	r0, #4
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80065a8:	d101      	bne.n	80065ae <__hi0bits+0x2a>
 80065aa:	3002      	adds	r0, #2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	db02      	blt.n	80065b8 <__hi0bits+0x34>
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	d401      	bmi.n	80065ba <__hi0bits+0x36>
 80065b6:	2020      	movs	r0, #32
 80065b8:	4770      	bx	lr
 80065ba:	3001      	adds	r0, #1
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop

080065c0 <__lo0bits>:
 80065c0:	6803      	ldr	r3, [r0, #0]
 80065c2:	4602      	mov	r2, r0
 80065c4:	f013 0007 	ands.w	r0, r3, #7
 80065c8:	d007      	beq.n	80065da <__lo0bits+0x1a>
 80065ca:	07d9      	lsls	r1, r3, #31
 80065cc:	d41f      	bmi.n	800660e <__lo0bits+0x4e>
 80065ce:	0798      	lsls	r0, r3, #30
 80065d0:	d41f      	bmi.n	8006612 <__lo0bits+0x52>
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	2002      	movs	r0, #2
 80065d8:	4770      	bx	lr
 80065da:	b299      	uxth	r1, r3
 80065dc:	b909      	cbnz	r1, 80065e2 <__lo0bits+0x22>
 80065de:	0c1b      	lsrs	r3, r3, #16
 80065e0:	2010      	movs	r0, #16
 80065e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80065e6:	d101      	bne.n	80065ec <__lo0bits+0x2c>
 80065e8:	3008      	adds	r0, #8
 80065ea:	0a1b      	lsrs	r3, r3, #8
 80065ec:	0719      	lsls	r1, r3, #28
 80065ee:	d101      	bne.n	80065f4 <__lo0bits+0x34>
 80065f0:	3004      	adds	r0, #4
 80065f2:	091b      	lsrs	r3, r3, #4
 80065f4:	0799      	lsls	r1, r3, #30
 80065f6:	d101      	bne.n	80065fc <__lo0bits+0x3c>
 80065f8:	3002      	adds	r0, #2
 80065fa:	089b      	lsrs	r3, r3, #2
 80065fc:	07d9      	lsls	r1, r3, #31
 80065fe:	d404      	bmi.n	800660a <__lo0bits+0x4a>
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	d101      	bne.n	8006608 <__lo0bits+0x48>
 8006604:	2020      	movs	r0, #32
 8006606:	4770      	bx	lr
 8006608:	3001      	adds	r0, #1
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	4770      	bx	lr
 800660e:	2000      	movs	r0, #0
 8006610:	4770      	bx	lr
 8006612:	085b      	lsrs	r3, r3, #1
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	2001      	movs	r0, #1
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop

0800661c <__i2b>:
 800661c:	b510      	push	{r4, lr}
 800661e:	460c      	mov	r4, r1
 8006620:	2101      	movs	r1, #1
 8006622:	f7ff feef 	bl	8006404 <_Balloc>
 8006626:	2201      	movs	r2, #1
 8006628:	6144      	str	r4, [r0, #20]
 800662a:	6102      	str	r2, [r0, #16]
 800662c:	bd10      	pop	{r4, pc}
 800662e:	bf00      	nop

08006630 <__multiply>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	690f      	ldr	r7, [r1, #16]
 8006636:	6916      	ldr	r6, [r2, #16]
 8006638:	42b7      	cmp	r7, r6
 800663a:	b085      	sub	sp, #20
 800663c:	460d      	mov	r5, r1
 800663e:	4692      	mov	sl, r2
 8006640:	da04      	bge.n	800664c <__multiply+0x1c>
 8006642:	463a      	mov	r2, r7
 8006644:	4655      	mov	r5, sl
 8006646:	4637      	mov	r7, r6
 8006648:	468a      	mov	sl, r1
 800664a:	4616      	mov	r6, r2
 800664c:	68ab      	ldr	r3, [r5, #8]
 800664e:	6869      	ldr	r1, [r5, #4]
 8006650:	19bc      	adds	r4, r7, r6
 8006652:	429c      	cmp	r4, r3
 8006654:	bfc8      	it	gt
 8006656:	3101      	addgt	r1, #1
 8006658:	f7ff fed4 	bl	8006404 <_Balloc>
 800665c:	1d21      	adds	r1, r4, #4
 800665e:	eb00 0b81 	add.w	fp, r0, r1, lsl #2
 8006662:	f100 0914 	add.w	r9, r0, #20
 8006666:	f10b 0b04 	add.w	fp, fp, #4
 800666a:	45d9      	cmp	r9, fp
 800666c:	9000      	str	r0, [sp, #0]
 800666e:	9101      	str	r1, [sp, #4]
 8006670:	d205      	bcs.n	800667e <__multiply+0x4e>
 8006672:	464b      	mov	r3, r9
 8006674:	2200      	movs	r2, #0
 8006676:	f843 2b04 	str.w	r2, [r3], #4
 800667a:	459b      	cmp	fp, r3
 800667c:	d8fb      	bhi.n	8006676 <__multiply+0x46>
 800667e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8006682:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8006686:	f10a 0a14 	add.w	sl, sl, #20
 800668a:	f106 0814 	add.w	r8, r6, #20
 800668e:	3514      	adds	r5, #20
 8006690:	3714      	adds	r7, #20
 8006692:	45c2      	cmp	sl, r8
 8006694:	d24f      	bcs.n	8006736 <__multiply+0x106>
 8006696:	f8cd b008 	str.w	fp, [sp, #8]
 800669a:	9403      	str	r4, [sp, #12]
 800669c:	46ab      	mov	fp, r5
 800669e:	f85a 5b04 	ldr.w	r5, [sl], #4
 80066a2:	b2ac      	uxth	r4, r5
 80066a4:	b1e4      	cbz	r4, 80066e0 <__multiply+0xb0>
 80066a6:	465a      	mov	r2, fp
 80066a8:	464b      	mov	r3, r9
 80066aa:	2100      	movs	r1, #0
 80066ac:	f852 6b04 	ldr.w	r6, [r2], #4
 80066b0:	681d      	ldr	r5, [r3, #0]
 80066b2:	b2b0      	uxth	r0, r6
 80066b4:	fa11 f185 	uxtah	r1, r1, r5
 80066b8:	0c36      	lsrs	r6, r6, #16
 80066ba:	0c2d      	lsrs	r5, r5, #16
 80066bc:	fb04 1000 	mla	r0, r4, r0, r1
 80066c0:	fb04 5106 	mla	r1, r4, r6, r5
 80066c4:	eb01 4110 	add.w	r1, r1, r0, lsr #16
 80066c8:	b280      	uxth	r0, r0
 80066ca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80066ce:	0c09      	lsrs	r1, r1, #16
 80066d0:	4297      	cmp	r7, r2
 80066d2:	461d      	mov	r5, r3
 80066d4:	f843 0b04 	str.w	r0, [r3], #4
 80066d8:	d8e8      	bhi.n	80066ac <__multiply+0x7c>
 80066da:	6069      	str	r1, [r5, #4]
 80066dc:	f85a 5c04 	ldr.w	r5, [sl, #-4]
 80066e0:	0c2d      	lsrs	r5, r5, #16
 80066e2:	d021      	beq.n	8006728 <__multiply+0xf8>
 80066e4:	f8d9 6000 	ldr.w	r6, [r9]
 80066e8:	465b      	mov	r3, fp
 80066ea:	4630      	mov	r0, r6
 80066ec:	4649      	mov	r1, r9
 80066ee:	f04f 0c00 	mov.w	ip, #0
 80066f2:	e000      	b.n	80066f6 <__multiply+0xc6>
 80066f4:	4611      	mov	r1, r2
 80066f6:	881a      	ldrh	r2, [r3, #0]
 80066f8:	eb0c 4c10 	add.w	ip, ip, r0, lsr #16
 80066fc:	fb05 cc02 	mla	ip, r5, r2, ip
 8006700:	b2b6      	uxth	r6, r6
 8006702:	460a      	mov	r2, r1
 8006704:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8006708:	f842 6b04 	str.w	r6, [r2], #4
 800670c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006710:	6848      	ldr	r0, [r1, #4]
 8006712:	0c36      	lsrs	r6, r6, #16
 8006714:	b284      	uxth	r4, r0
 8006716:	fb05 4606 	mla	r6, r5, r6, r4
 800671a:	eb06 461c 	add.w	r6, r6, ip, lsr #16
 800671e:	429f      	cmp	r7, r3
 8006720:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 8006724:	d8e6      	bhi.n	80066f4 <__multiply+0xc4>
 8006726:	604e      	str	r6, [r1, #4]
 8006728:	45d0      	cmp	r8, sl
 800672a:	f109 0904 	add.w	r9, r9, #4
 800672e:	d8b6      	bhi.n	800669e <__multiply+0x6e>
 8006730:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006734:	9c03      	ldr	r4, [sp, #12]
 8006736:	2c00      	cmp	r4, #0
 8006738:	dd0c      	ble.n	8006754 <__multiply+0x124>
 800673a:	e89d 0006 	ldmia.w	sp, {r1, r2}
 800673e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8006742:	b93b      	cbnz	r3, 8006754 <__multiply+0x124>
 8006744:	f1ab 0b04 	sub.w	fp, fp, #4
 8006748:	e002      	b.n	8006750 <__multiply+0x120>
 800674a:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
 800674e:	b90b      	cbnz	r3, 8006754 <__multiply+0x124>
 8006750:	3c01      	subs	r4, #1
 8006752:	d1fa      	bne.n	800674a <__multiply+0x11a>
 8006754:	9a00      	ldr	r2, [sp, #0]
 8006756:	6114      	str	r4, [r2, #16]
 8006758:	4610      	mov	r0, r2
 800675a:	b005      	add	sp, #20
 800675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006760 <__pow5mult>:
 8006760:	f012 0303 	ands.w	r3, r2, #3
 8006764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006768:	4615      	mov	r5, r2
 800676a:	4604      	mov	r4, r0
 800676c:	4688      	mov	r8, r1
 800676e:	d12d      	bne.n	80067cc <__pow5mult+0x6c>
 8006770:	10ad      	asrs	r5, r5, #2
 8006772:	d01d      	beq.n	80067b0 <__pow5mult+0x50>
 8006774:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8006776:	b92f      	cbnz	r7, 8006784 <__pow5mult+0x24>
 8006778:	e031      	b.n	80067de <__pow5mult+0x7e>
 800677a:	106d      	asrs	r5, r5, #1
 800677c:	d018      	beq.n	80067b0 <__pow5mult+0x50>
 800677e:	683e      	ldr	r6, [r7, #0]
 8006780:	b1ce      	cbz	r6, 80067b6 <__pow5mult+0x56>
 8006782:	4637      	mov	r7, r6
 8006784:	07e8      	lsls	r0, r5, #31
 8006786:	d5f8      	bpl.n	800677a <__pow5mult+0x1a>
 8006788:	4641      	mov	r1, r8
 800678a:	463a      	mov	r2, r7
 800678c:	4620      	mov	r0, r4
 800678e:	f7ff ff4f 	bl	8006630 <__multiply>
 8006792:	f1b8 0f00 	cmp.w	r8, #0
 8006796:	d017      	beq.n	80067c8 <__pow5mult+0x68>
 8006798:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800679c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800679e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067a2:	106d      	asrs	r5, r5, #1
 80067a4:	f8c8 1000 	str.w	r1, [r8]
 80067a8:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
 80067ac:	4680      	mov	r8, r0
 80067ae:	d1e6      	bne.n	800677e <__pow5mult+0x1e>
 80067b0:	4640      	mov	r0, r8
 80067b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b6:	4639      	mov	r1, r7
 80067b8:	463a      	mov	r2, r7
 80067ba:	4620      	mov	r0, r4
 80067bc:	f7ff ff38 	bl	8006630 <__multiply>
 80067c0:	6038      	str	r0, [r7, #0]
 80067c2:	6006      	str	r6, [r0, #0]
 80067c4:	4607      	mov	r7, r0
 80067c6:	e7dd      	b.n	8006784 <__pow5mult+0x24>
 80067c8:	4680      	mov	r8, r0
 80067ca:	e7d6      	b.n	800677a <__pow5mult+0x1a>
 80067cc:	1e5e      	subs	r6, r3, #1
 80067ce:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <__pow5mult+0x94>)
 80067d0:	2300      	movs	r3, #0
 80067d2:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80067d6:	f7ff fe45 	bl	8006464 <__multadd>
 80067da:	4680      	mov	r8, r0
 80067dc:	e7c8      	b.n	8006770 <__pow5mult+0x10>
 80067de:	4620      	mov	r0, r4
 80067e0:	f240 2171 	movw	r1, #625	; 0x271
 80067e4:	f7ff ff1a 	bl	800661c <__i2b>
 80067e8:	2300      	movs	r3, #0
 80067ea:	64a0      	str	r0, [r4, #72]	; 0x48
 80067ec:	4607      	mov	r7, r0
 80067ee:	6003      	str	r3, [r0, #0]
 80067f0:	e7c8      	b.n	8006784 <__pow5mult+0x24>
 80067f2:	bf00      	nop
 80067f4:	08008b30 	.word	0x08008b30

080067f8 <__lshift>:
 80067f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	4691      	mov	r9, r2
 80067fe:	690a      	ldr	r2, [r1, #16]
 8006800:	688b      	ldr	r3, [r1, #8]
 8006802:	ea4f 1769 	mov.w	r7, r9, asr #5
 8006806:	eb07 0b02 	add.w	fp, r7, r2
 800680a:	f10b 0501 	add.w	r5, fp, #1
 800680e:	429d      	cmp	r5, r3
 8006810:	460c      	mov	r4, r1
 8006812:	4606      	mov	r6, r0
 8006814:	6849      	ldr	r1, [r1, #4]
 8006816:	dd03      	ble.n	8006820 <__lshift+0x28>
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	3101      	adds	r1, #1
 800681c:	429d      	cmp	r5, r3
 800681e:	dcfb      	bgt.n	8006818 <__lshift+0x20>
 8006820:	4630      	mov	r0, r6
 8006822:	f7ff fdef 	bl	8006404 <_Balloc>
 8006826:	2f00      	cmp	r7, #0
 8006828:	f100 0314 	add.w	r3, r0, #20
 800682c:	dd09      	ble.n	8006842 <__lshift+0x4a>
 800682e:	2200      	movs	r2, #0
 8006830:	4611      	mov	r1, r2
 8006832:	3201      	adds	r2, #1
 8006834:	42ba      	cmp	r2, r7
 8006836:	f843 1b04 	str.w	r1, [r3], #4
 800683a:	d1fa      	bne.n	8006832 <__lshift+0x3a>
 800683c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006840:	3314      	adds	r3, #20
 8006842:	6922      	ldr	r2, [r4, #16]
 8006844:	f019 091f 	ands.w	r9, r9, #31
 8006848:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 800684c:	f104 0114 	add.w	r1, r4, #20
 8006850:	f10c 0c14 	add.w	ip, ip, #20
 8006854:	d022      	beq.n	800689c <__lshift+0xa4>
 8006856:	f1c9 0a20 	rsb	sl, r9, #32
 800685a:	2200      	movs	r2, #0
 800685c:	e000      	b.n	8006860 <__lshift+0x68>
 800685e:	463b      	mov	r3, r7
 8006860:	f8d1 8000 	ldr.w	r8, [r1]
 8006864:	461f      	mov	r7, r3
 8006866:	fa08 f809 	lsl.w	r8, r8, r9
 800686a:	ea48 0202 	orr.w	r2, r8, r2
 800686e:	f847 2b04 	str.w	r2, [r7], #4
 8006872:	f851 2b04 	ldr.w	r2, [r1], #4
 8006876:	458c      	cmp	ip, r1
 8006878:	fa22 f20a 	lsr.w	r2, r2, sl
 800687c:	d8ef      	bhi.n	800685e <__lshift+0x66>
 800687e:	605a      	str	r2, [r3, #4]
 8006880:	b10a      	cbz	r2, 8006886 <__lshift+0x8e>
 8006882:	f10b 0502 	add.w	r5, fp, #2
 8006886:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006888:	6862      	ldr	r2, [r4, #4]
 800688a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800688e:	3d01      	subs	r5, #1
 8006890:	6105      	str	r5, [r0, #16]
 8006892:	6021      	str	r1, [r4, #0]
 8006894:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	f851 2b04 	ldr.w	r2, [r1], #4
 80068a0:	458c      	cmp	ip, r1
 80068a2:	f843 2b04 	str.w	r2, [r3], #4
 80068a6:	d9ee      	bls.n	8006886 <__lshift+0x8e>
 80068a8:	f851 2b04 	ldr.w	r2, [r1], #4
 80068ac:	458c      	cmp	ip, r1
 80068ae:	f843 2b04 	str.w	r2, [r3], #4
 80068b2:	d8f3      	bhi.n	800689c <__lshift+0xa4>
 80068b4:	e7e7      	b.n	8006886 <__lshift+0x8e>
 80068b6:	bf00      	nop

080068b8 <__mcmp>:
 80068b8:	4603      	mov	r3, r0
 80068ba:	690a      	ldr	r2, [r1, #16]
 80068bc:	6900      	ldr	r0, [r0, #16]
 80068be:	1a80      	subs	r0, r0, r2
 80068c0:	b430      	push	{r4, r5}
 80068c2:	d111      	bne.n	80068e8 <__mcmp+0x30>
 80068c4:	3204      	adds	r2, #4
 80068c6:	0094      	lsls	r4, r2, #2
 80068c8:	191a      	adds	r2, r3, r4
 80068ca:	1909      	adds	r1, r1, r4
 80068cc:	3314      	adds	r3, #20
 80068ce:	3204      	adds	r2, #4
 80068d0:	3104      	adds	r1, #4
 80068d2:	f852 5c04 	ldr.w	r5, [r2, #-4]
 80068d6:	f851 4c04 	ldr.w	r4, [r1, #-4]
 80068da:	3a04      	subs	r2, #4
 80068dc:	42a5      	cmp	r5, r4
 80068de:	f1a1 0104 	sub.w	r1, r1, #4
 80068e2:	d103      	bne.n	80068ec <__mcmp+0x34>
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d3f4      	bcc.n	80068d2 <__mcmp+0x1a>
 80068e8:	bc30      	pop	{r4, r5}
 80068ea:	4770      	bx	lr
 80068ec:	bf38      	it	cc
 80068ee:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
 80068f2:	d3f9      	bcc.n	80068e8 <__mcmp+0x30>
 80068f4:	2001      	movs	r0, #1
 80068f6:	e7f7      	b.n	80068e8 <__mcmp+0x30>

080068f8 <__mdiff>:
 80068f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068fc:	460c      	mov	r4, r1
 80068fe:	4606      	mov	r6, r0
 8006900:	4611      	mov	r1, r2
 8006902:	4620      	mov	r0, r4
 8006904:	4615      	mov	r5, r2
 8006906:	f7ff ffd7 	bl	80068b8 <__mcmp>
 800690a:	1e07      	subs	r7, r0, #0
 800690c:	d058      	beq.n	80069c0 <__mdiff+0xc8>
 800690e:	db52      	blt.n	80069b6 <__mdiff+0xbe>
 8006910:	2700      	movs	r7, #0
 8006912:	4630      	mov	r0, r6
 8006914:	6861      	ldr	r1, [r4, #4]
 8006916:	f7ff fd75 	bl	8006404 <_Balloc>
 800691a:	f8d4 c010 	ldr.w	ip, [r4, #16]
 800691e:	692b      	ldr	r3, [r5, #16]
 8006920:	60c7      	str	r7, [r0, #12]
 8006922:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8006926:	eb04 078c 	add.w	r7, r4, ip, lsl #2
 800692a:	3714      	adds	r7, #20
 800692c:	f108 0814 	add.w	r8, r8, #20
 8006930:	3414      	adds	r4, #20
 8006932:	3514      	adds	r5, #20
 8006934:	f100 0914 	add.w	r9, r0, #20
 8006938:	2600      	movs	r6, #0
 800693a:	f854 3b04 	ldr.w	r3, [r4], #4
 800693e:	f855 2b04 	ldr.w	r2, [r5], #4
 8006942:	fa16 f183 	uxtah	r1, r6, r3
 8006946:	fa1f fa82 	uxth.w	sl, r2
 800694a:	0c12      	lsrs	r2, r2, #16
 800694c:	ebc2 4613 	rsb	r6, r2, r3, lsr #16
 8006950:	ebca 0101 	rsb	r1, sl, r1
 8006954:	eb06 4621 	add.w	r6, r6, r1, asr #16
 8006958:	464b      	mov	r3, r9
 800695a:	b289      	uxth	r1, r1
 800695c:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8006960:	f843 1b04 	str.w	r1, [r3], #4
 8006964:	1436      	asrs	r6, r6, #16
 8006966:	45a8      	cmp	r8, r5
 8006968:	4622      	mov	r2, r4
 800696a:	4699      	mov	r9, r3
 800696c:	d8e5      	bhi.n	800693a <__mdiff+0x42>
 800696e:	42a7      	cmp	r7, r4
 8006970:	4698      	mov	r8, r3
 8006972:	d914      	bls.n	800699e <__mdiff+0xa6>
 8006974:	f852 5b04 	ldr.w	r5, [r2], #4
 8006978:	fa16 f685 	uxtah	r6, r6, r5
 800697c:	0c2d      	lsrs	r5, r5, #16
 800697e:	eb05 4526 	add.w	r5, r5, r6, asr #16
 8006982:	b2b6      	uxth	r6, r6
 8006984:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
 8006988:	142e      	asrs	r6, r5, #16
 800698a:	4297      	cmp	r7, r2
 800698c:	f843 1b04 	str.w	r1, [r3], #4
 8006990:	d8f0      	bhi.n	8006974 <__mdiff+0x7c>
 8006992:	43e3      	mvns	r3, r4
 8006994:	19db      	adds	r3, r3, r7
 8006996:	f023 0303 	bic.w	r3, r3, #3
 800699a:	3304      	adds	r3, #4
 800699c:	4443      	add	r3, r8
 800699e:	b931      	cbnz	r1, 80069ae <__mdiff+0xb6>
 80069a0:	3b04      	subs	r3, #4
 80069a2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80069a6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80069aa:	2a00      	cmp	r2, #0
 80069ac:	d0f9      	beq.n	80069a2 <__mdiff+0xaa>
 80069ae:	f8c0 c010 	str.w	ip, [r0, #16]
 80069b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b6:	4623      	mov	r3, r4
 80069b8:	2701      	movs	r7, #1
 80069ba:	462c      	mov	r4, r5
 80069bc:	461d      	mov	r5, r3
 80069be:	e7a8      	b.n	8006912 <__mdiff+0x1a>
 80069c0:	4630      	mov	r0, r6
 80069c2:	4639      	mov	r1, r7
 80069c4:	f7ff fd1e 	bl	8006404 <_Balloc>
 80069c8:	2301      	movs	r3, #1
 80069ca:	6103      	str	r3, [r0, #16]
 80069cc:	6147      	str	r7, [r0, #20]
 80069ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d2:	bf00      	nop

080069d4 <__ulp>:
 80069d4:	2300      	movs	r3, #0
 80069d6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80069da:	400b      	ands	r3, r1
 80069dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	dd02      	ble.n	80069ea <__ulp+0x16>
 80069e4:	4619      	mov	r1, r3
 80069e6:	2000      	movs	r0, #0
 80069e8:	4770      	bx	lr
 80069ea:	425b      	negs	r3, r3
 80069ec:	151b      	asrs	r3, r3, #20
 80069ee:	2100      	movs	r1, #0
 80069f0:	2b13      	cmp	r3, #19
 80069f2:	dd0b      	ble.n	8006a0c <__ulp+0x38>
 80069f4:	2b32      	cmp	r3, #50	; 0x32
 80069f6:	dd02      	ble.n	80069fe <__ulp+0x2a>
 80069f8:	2301      	movs	r3, #1
 80069fa:	4618      	mov	r0, r3
 80069fc:	4770      	bx	lr
 80069fe:	2201      	movs	r2, #1
 8006a00:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
 8006a04:	fa12 f303 	lsls.w	r3, r2, r3
 8006a08:	4618      	mov	r0, r3
 8006a0a:	4770      	bx	lr
 8006a0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006a10:	fa52 f103 	asrs.w	r1, r2, r3
 8006a14:	2000      	movs	r0, #0
 8006a16:	4770      	bx	lr

08006a18 <__b2d>:
 8006a18:	6902      	ldr	r2, [r0, #16]
 8006a1a:	3204      	adds	r2, #4
 8006a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8006a22:	4603      	mov	r3, r0
 8006a24:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8006a28:	4628      	mov	r0, r5
 8006a2a:	460f      	mov	r7, r1
 8006a2c:	f103 0614 	add.w	r6, r3, #20
 8006a30:	f7ff fda8 	bl	8006584 <__hi0bits>
 8006a34:	f1c0 0320 	rsb	r3, r0, #32
 8006a38:	280a      	cmp	r0, #10
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	dc14      	bgt.n	8006a6a <__b2d+0x52>
 8006a40:	f1c0 010b 	rsb	r1, r0, #11
 8006a44:	fa35 f701 	lsrs.w	r7, r5, r1
 8006a48:	f047 577f 	orr.w	r7, r7, #1069547520	; 0x3fc00000
 8006a4c:	42a6      	cmp	r6, r4
 8006a4e:	f447 1340 	orr.w	r3, r7, #3145728	; 0x300000
 8006a52:	d22e      	bcs.n	8006ab2 <__b2d+0x9a>
 8006a54:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006a58:	fa34 f101 	lsrs.w	r1, r4, r1
 8006a5c:	3015      	adds	r0, #21
 8006a5e:	4085      	lsls	r5, r0
 8006a60:	ea41 0205 	orr.w	r2, r1, r5
 8006a64:	4610      	mov	r0, r2
 8006a66:	4619      	mov	r1, r3
 8006a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	42a6      	cmp	r6, r4
 8006a6e:	d202      	bcs.n	8006a76 <__b2d+0x5e>
 8006a70:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8006a74:	3c04      	subs	r4, #4
 8006a76:	f1b0 070b 	subs.w	r7, r0, #11
 8006a7a:	bf02      	ittt	eq
 8006a7c:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
 8006a80:	f445 1340 	orreq.w	r3, r5, #3145728	; 0x300000
 8006a84:	460a      	moveq	r2, r1
 8006a86:	d0ed      	beq.n	8006a64 <__b2d+0x4c>
 8006a88:	40bd      	lsls	r5, r7
 8006a8a:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
 8006a8e:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 8006a92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a96:	fa21 fc00 	lsr.w	ip, r1, r0
 8006a9a:	42b4      	cmp	r4, r6
 8006a9c:	ea45 030c 	orr.w	r3, r5, ip
 8006aa0:	d909      	bls.n	8006ab6 <__b2d+0x9e>
 8006aa2:	f854 4c04 	ldr.w	r4, [r4, #-4]
 8006aa6:	fa34 f000 	lsrs.w	r0, r4, r0
 8006aaa:	40b9      	lsls	r1, r7
 8006aac:	ea40 0201 	orr.w	r2, r0, r1
 8006ab0:	e7d8      	b.n	8006a64 <__b2d+0x4c>
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	e7d2      	b.n	8006a5c <__b2d+0x44>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	e7f7      	b.n	8006aaa <__b2d+0x92>
 8006aba:	bf00      	nop

08006abc <__d2b>:
 8006abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	4614      	mov	r4, r2
 8006ac8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006aca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006acc:	f7ff fc9a 	bl	8006404 <_Balloc>
 8006ad0:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
 8006ad4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ad8:	f3c5 590a 	ubfx	r9, r5, #20, #11
 8006adc:	4680      	mov	r8, r0
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	f1b9 0f00 	cmp.w	r9, #0
 8006ae4:	d002      	beq.n	8006aec <__d2b+0x30>
 8006ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	2c00      	cmp	r4, #0
 8006aee:	d025      	beq.n	8006b3c <__d2b+0x80>
 8006af0:	a802      	add	r0, sp, #8
 8006af2:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006af6:	4668      	mov	r0, sp
 8006af8:	f7ff fd62 	bl	80065c0 <__lo0bits>
 8006afc:	9b01      	ldr	r3, [sp, #4]
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d132      	bne.n	8006b68 <__d2b+0xac>
 8006b02:	9a00      	ldr	r2, [sp, #0]
 8006b04:	f8c8 2014 	str.w	r2, [r8, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bf0c      	ite	eq
 8006b0c:	2401      	moveq	r4, #1
 8006b0e:	2402      	movne	r4, #2
 8006b10:	f8c8 3018 	str.w	r3, [r8, #24]
 8006b14:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b18:	f1b9 0f00 	cmp.w	r9, #0
 8006b1c:	d11b      	bne.n	8006b56 <__d2b+0x9a>
 8006b1e:	eb08 0284 	add.w	r2, r8, r4, lsl #2
 8006b22:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 8006b26:	6910      	ldr	r0, [r2, #16]
 8006b28:	603b      	str	r3, [r7, #0]
 8006b2a:	f7ff fd2b 	bl	8006584 <__hi0bits>
 8006b2e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006b32:	6030      	str	r0, [r6, #0]
 8006b34:	4640      	mov	r0, r8
 8006b36:	b003      	add	sp, #12
 8006b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b3c:	a801      	add	r0, sp, #4
 8006b3e:	f7ff fd3f 	bl	80065c0 <__lo0bits>
 8006b42:	9b01      	ldr	r3, [sp, #4]
 8006b44:	2401      	movs	r4, #1
 8006b46:	f8c8 3014 	str.w	r3, [r8, #20]
 8006b4a:	f8c8 4010 	str.w	r4, [r8, #16]
 8006b4e:	3020      	adds	r0, #32
 8006b50:	f1b9 0f00 	cmp.w	r9, #0
 8006b54:	d0e3      	beq.n	8006b1e <__d2b+0x62>
 8006b56:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8006b5a:	eb09 0300 	add.w	r3, r9, r0
 8006b5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b62:	603b      	str	r3, [r7, #0]
 8006b64:	6030      	str	r0, [r6, #0]
 8006b66:	e7e5      	b.n	8006b34 <__d2b+0x78>
 8006b68:	f1c0 0220 	rsb	r2, r0, #32
 8006b6c:	9900      	ldr	r1, [sp, #0]
 8006b6e:	fa13 f202 	lsls.w	r2, r3, r2
 8006b72:	430a      	orrs	r2, r1
 8006b74:	40c3      	lsrs	r3, r0
 8006b76:	f8c8 2014 	str.w	r2, [r8, #20]
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	e7c4      	b.n	8006b08 <__d2b+0x4c>
 8006b7e:	bf00      	nop

08006b80 <__ratio>:
 8006b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b84:	b083      	sub	sp, #12
 8006b86:	460d      	mov	r5, r1
 8006b88:	4669      	mov	r1, sp
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	f7ff ff44 	bl	8006a18 <__b2d>
 8006b90:	4689      	mov	r9, r1
 8006b92:	4680      	mov	r8, r0
 8006b94:	a901      	add	r1, sp, #4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f7ff ff3e 	bl	8006a18 <__b2d>
 8006b9c:	460f      	mov	r7, r1
 8006b9e:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8006ba2:	692a      	ldr	r2, [r5, #16]
 8006ba4:	6924      	ldr	r4, [r4, #16]
 8006ba6:	1acb      	subs	r3, r1, r3
 8006ba8:	1aa4      	subs	r4, r4, r2
 8006baa:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8006bae:	2c00      	cmp	r4, #0
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	bfcb      	itete	gt
 8006bb8:	eb09 5304 	addgt.w	r3, r9, r4, lsl #20
 8006bbc:	eba7 5104 	suble.w	r1, r7, r4, lsl #20
 8006bc0:	4699      	movgt	r9, r3
 8006bc2:	460f      	movle	r7, r1
 8006bc4:	bfcc      	ite	gt
 8006bc6:	46c0      	nopgt			; (mov r8, r8)
 8006bc8:	4636      	movle	r6, r6
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	4632      	mov	r2, r6
 8006bd0:	463b      	mov	r3, r7
 8006bd2:	f001 fc53 	bl	800847c <__aeabi_ddiv>
 8006bd6:	b003      	add	sp, #12
 8006bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006bdc <_mprec_log10>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4604      	mov	r4, r0
 8006be0:	2100      	movs	r1, #0
 8006be2:	2000      	movs	r0, #0
 8006be4:	2c17      	cmp	r4, #23
 8006be6:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006bea:	dd08      	ble.n	8006bfe <_mprec_log10+0x22>
 8006bec:	2300      	movs	r3, #0
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006bf4:	f001 fb18 	bl	8008228 <__aeabi_dmul>
 8006bf8:	3c01      	subs	r4, #1
 8006bfa:	d1f7      	bne.n	8006bec <_mprec_log10+0x10>
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <_mprec_log10+0x30>)
 8006c00:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006c04:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8006c08:	bd10      	pop	{r4, pc}
 8006c0a:	bf00      	nop
 8006c0c:	08008b30 	.word	0x08008b30

08006c10 <__copybits>:
 8006c10:	6913      	ldr	r3, [r2, #16]
 8006c12:	3901      	subs	r1, #1
 8006c14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c18:	1149      	asrs	r1, r1, #5
 8006c1a:	b470      	push	{r4, r5, r6}
 8006c1c:	3314      	adds	r3, #20
 8006c1e:	f102 0414 	add.w	r4, r2, #20
 8006c22:	3101      	adds	r1, #1
 8006c24:	429c      	cmp	r4, r3
 8006c26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c2a:	d20c      	bcs.n	8006c46 <__copybits+0x36>
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	f854 6b04 	ldr.w	r6, [r4], #4
 8006c32:	42a3      	cmp	r3, r4
 8006c34:	f845 6b04 	str.w	r6, [r5], #4
 8006c38:	d8f9      	bhi.n	8006c2e <__copybits+0x1e>
 8006c3a:	1a9b      	subs	r3, r3, r2
 8006c3c:	3b15      	subs	r3, #21
 8006c3e:	f023 0303 	bic.w	r3, r3, #3
 8006c42:	3304      	adds	r3, #4
 8006c44:	18c0      	adds	r0, r0, r3
 8006c46:	4281      	cmp	r1, r0
 8006c48:	d904      	bls.n	8006c54 <__copybits+0x44>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f840 3b04 	str.w	r3, [r0], #4
 8006c50:	4281      	cmp	r1, r0
 8006c52:	d8fb      	bhi.n	8006c4c <__copybits+0x3c>
 8006c54:	bc70      	pop	{r4, r5, r6}
 8006c56:	4770      	bx	lr

08006c58 <__any_on>:
 8006c58:	6902      	ldr	r2, [r0, #16]
 8006c5a:	114b      	asrs	r3, r1, #5
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	b410      	push	{r4}
 8006c60:	db01      	blt.n	8006c66 <__any_on+0xe>
 8006c62:	461a      	mov	r2, r3
 8006c64:	dc13      	bgt.n	8006c8e <__any_on+0x36>
 8006c66:	3204      	adds	r2, #4
 8006c68:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8006c6c:	f100 0114 	add.w	r1, r0, #20
 8006c70:	1d1c      	adds	r4, r3, #4
 8006c72:	42a1      	cmp	r1, r4
 8006c74:	d218      	bcs.n	8006ca8 <__any_on+0x50>
 8006c76:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006c7a:	b92a      	cbnz	r2, 8006c88 <__any_on+0x30>
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	d213      	bcs.n	8006ca8 <__any_on+0x50>
 8006c80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c84:	2a00      	cmp	r2, #0
 8006c86:	d0f9      	beq.n	8006c7c <__any_on+0x24>
 8006c88:	2001      	movs	r0, #1
 8006c8a:	bc10      	pop	{r4}
 8006c8c:	4770      	bx	lr
 8006c8e:	f011 011f 	ands.w	r1, r1, #31
 8006c92:	d0e8      	beq.n	8006c66 <__any_on+0xe>
 8006c94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	fa33 f401 	lsrs.w	r4, r3, r1
 8006c9e:	fa14 f101 	lsls.w	r1, r4, r1
 8006ca2:	4299      	cmp	r1, r3
 8006ca4:	d1f0      	bne.n	8006c88 <__any_on+0x30>
 8006ca6:	e7de      	b.n	8006c66 <__any_on+0xe>
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e7ee      	b.n	8006c8a <__any_on+0x32>

08006cac <__fpclassifyd>:
 8006cac:	ea50 0201 	orrs.w	r2, r0, r1
 8006cb0:	b410      	push	{r4}
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	d102      	bne.n	8006cbc <__fpclassifyd+0x10>
 8006cb6:	2002      	movs	r0, #2
 8006cb8:	bc10      	pop	{r4}
 8006cba:	4770      	bx	lr
 8006cbc:	f1d0 0101 	rsbs	r1, r0, #1
 8006cc0:	bf38      	it	cc
 8006cc2:	2100      	movcc	r1, #0
 8006cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc8:	bf08      	it	eq
 8006cca:	2800      	cmpeq	r0, #0
 8006ccc:	d0f3      	beq.n	8006cb6 <__fpclassifyd+0xa>
 8006cce:	f103 44ff 	add.w	r4, r3, #2139095040	; 0x7f800000
 8006cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cd6:	f504 04e0 	add.w	r4, r4, #7340032	; 0x700000
 8006cda:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8006cde:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 8006ce2:	4290      	cmp	r0, r2
 8006ce4:	bf88      	it	hi
 8006ce6:	4294      	cmphi	r4, r2
 8006ce8:	d801      	bhi.n	8006cee <__fpclassifyd+0x42>
 8006cea:	2004      	movs	r0, #4
 8006cec:	e7e4      	b.n	8006cb8 <__fpclassifyd+0xc>
 8006cee:	f103 4200 	add.w	r2, r3, #2147483648	; 0x80000000
 8006cf2:	2003      	movs	r0, #3
 8006cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf8:	bf28      	it	cs
 8006cfa:	f5b2 1f80 	cmpcs.w	r2, #1048576	; 0x100000
 8006cfe:	d3db      	bcc.n	8006cb8 <__fpclassifyd+0xc>
 8006d00:	2200      	movs	r2, #0
 8006d02:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006d06:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8006d0a:	bf18      	it	ne
 8006d0c:	4293      	cmpne	r3, r2
 8006d0e:	bf14      	ite	ne
 8006d10:	2300      	movne	r3, #0
 8006d12:	2301      	moveq	r3, #1
 8006d14:	ea01 0003 	and.w	r0, r1, r3
 8006d18:	e7ce      	b.n	8006cb8 <__fpclassifyd+0xc>
 8006d1a:	bf00      	nop

08006d1c <_sbrk_r>:
 8006d1c:	b538      	push	{r3, r4, r5, lr}
 8006d1e:	4c07      	ldr	r4, [pc, #28]	; (8006d3c <_sbrk_r+0x20>)
 8006d20:	2300      	movs	r3, #0
 8006d22:	4605      	mov	r5, r0
 8006d24:	4608      	mov	r0, r1
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	f7fc f938 	bl	8002f9c <_sbrk>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d000      	beq.n	8006d32 <_sbrk_r+0x16>
 8006d30:	bd38      	pop	{r3, r4, r5, pc}
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0fb      	beq.n	8006d30 <_sbrk_r+0x14>
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	20001664 	.word	0x20001664

08006d40 <strcmp>:
 8006d40:	ea80 0201 	eor.w	r2, r0, r1
 8006d44:	f012 0f03 	tst.w	r2, #3
 8006d48:	d13a      	bne.n	8006dc0 <strcmp_unaligned>
 8006d4a:	f010 0203 	ands.w	r2, r0, #3
 8006d4e:	f020 0003 	bic.w	r0, r0, #3
 8006d52:	f021 0103 	bic.w	r1, r1, #3
 8006d56:	f850 cb04 	ldr.w	ip, [r0], #4
 8006d5a:	bf08      	it	eq
 8006d5c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006d60:	d00d      	beq.n	8006d7e <strcmp+0x3e>
 8006d62:	f082 0203 	eor.w	r2, r2, #3
 8006d66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8006d6a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8006d6e:	fa23 f202 	lsr.w	r2, r3, r2
 8006d72:	f851 3b04 	ldr.w	r3, [r1], #4
 8006d76:	ea4c 0c02 	orr.w	ip, ip, r2
 8006d7a:	ea43 0302 	orr.w	r3, r3, r2
 8006d7e:	bf00      	nop
 8006d80:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
 8006d84:	459c      	cmp	ip, r3
 8006d86:	bf01      	itttt	eq
 8006d88:	ea22 020c 	biceq.w	r2, r2, ip
 8006d8c:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
 8006d90:	f850 cb04 	ldreq.w	ip, [r0], #4
 8006d94:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006d98:	d0f2      	beq.n	8006d80 <strcmp+0x40>
 8006d9a:	ea4f 600c 	mov.w	r0, ip, lsl #24
 8006d9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8006da2:	2801      	cmp	r0, #1
 8006da4:	bf28      	it	cs
 8006da6:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 8006daa:	bf08      	it	eq
 8006dac:	0a1b      	lsreq	r3, r3, #8
 8006dae:	d0f4      	beq.n	8006d9a <strcmp+0x5a>
 8006db0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006db4:	ea4f 6010 	mov.w	r0, r0, lsr #24
 8006db8:	eba0 0003 	sub.w	r0, r0, r3
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop

08006dc0 <strcmp_unaligned>:
 8006dc0:	f010 0f03 	tst.w	r0, #3
 8006dc4:	d00a      	beq.n	8006ddc <strcmp_unaligned+0x1c>
 8006dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dce:	2a01      	cmp	r2, #1
 8006dd0:	bf28      	it	cs
 8006dd2:	429a      	cmpcs	r2, r3
 8006dd4:	d0f4      	beq.n	8006dc0 <strcmp_unaligned>
 8006dd6:	eba2 0003 	sub.w	r0, r2, r3
 8006dda:	4770      	bx	lr
 8006ddc:	f84d 5d04 	str.w	r5, [sp, #-4]!
 8006de0:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8006de4:	f04f 0201 	mov.w	r2, #1
 8006de8:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
 8006dec:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
 8006df0:	f001 0c03 	and.w	ip, r1, #3
 8006df4:	f021 0103 	bic.w	r1, r1, #3
 8006df8:	f850 4b04 	ldr.w	r4, [r0], #4
 8006dfc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e00:	f1bc 0f02 	cmp.w	ip, #2
 8006e04:	d026      	beq.n	8006e54 <strcmp_unaligned+0x94>
 8006e06:	d84b      	bhi.n	8006ea0 <strcmp_unaligned+0xe0>
 8006e08:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
 8006e0c:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
 8006e10:	eba4 0302 	sub.w	r3, r4, r2
 8006e14:	ea23 0304 	bic.w	r3, r3, r4
 8006e18:	d10d      	bne.n	8006e36 <strcmp_unaligned+0x76>
 8006e1a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006e1e:	bf08      	it	eq
 8006e20:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006e24:	d10a      	bne.n	8006e3c <strcmp_unaligned+0x7c>
 8006e26:	ea8c 0c04 	eor.w	ip, ip, r4
 8006e2a:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
 8006e2e:	d10c      	bne.n	8006e4a <strcmp_unaligned+0x8a>
 8006e30:	f850 4b04 	ldr.w	r4, [r0], #4
 8006e34:	e7e8      	b.n	8006e08 <strcmp_unaligned+0x48>
 8006e36:	ea4f 2515 	mov.w	r5, r5, lsr #8
 8006e3a:	e05c      	b.n	8006ef6 <strcmp_unaligned+0x136>
 8006e3c:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8006e40:	d152      	bne.n	8006ee8 <strcmp_unaligned+0x128>
 8006e42:	780d      	ldrb	r5, [r1, #0]
 8006e44:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006e48:	e055      	b.n	8006ef6 <strcmp_unaligned+0x136>
 8006e4a:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8006e4e:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8006e52:	e050      	b.n	8006ef6 <strcmp_unaligned+0x136>
 8006e54:	ea4f 4c04 	mov.w	ip, r4, lsl #16
 8006e58:	eba4 0302 	sub.w	r3, r4, r2
 8006e5c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006e60:	ea23 0304 	bic.w	r3, r3, r4
 8006e64:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
 8006e68:	d117      	bne.n	8006e9a <strcmp_unaligned+0xda>
 8006e6a:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006e6e:	bf08      	it	eq
 8006e70:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006e74:	d107      	bne.n	8006e86 <strcmp_unaligned+0xc6>
 8006e76:	ea8c 0c04 	eor.w	ip, ip, r4
 8006e7a:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
 8006e7e:	d108      	bne.n	8006e92 <strcmp_unaligned+0xd2>
 8006e80:	f850 4b04 	ldr.w	r4, [r0], #4
 8006e84:	e7e6      	b.n	8006e54 <strcmp_unaligned+0x94>
 8006e86:	041b      	lsls	r3, r3, #16
 8006e88:	d12e      	bne.n	8006ee8 <strcmp_unaligned+0x128>
 8006e8a:	880d      	ldrh	r5, [r1, #0]
 8006e8c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006e90:	e031      	b.n	8006ef6 <strcmp_unaligned+0x136>
 8006e92:	ea4f 4505 	mov.w	r5, r5, lsl #16
 8006e96:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006e9a:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8006e9e:	e02a      	b.n	8006ef6 <strcmp_unaligned+0x136>
 8006ea0:	f004 0cff 	and.w	ip, r4, #255	; 0xff
 8006ea4:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
 8006ea8:	eba4 0302 	sub.w	r3, r4, r2
 8006eac:	ea23 0304 	bic.w	r3, r3, r4
 8006eb0:	d10d      	bne.n	8006ece <strcmp_unaligned+0x10e>
 8006eb2:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
 8006eb6:	bf08      	it	eq
 8006eb8:	f851 5b04 	ldreq.w	r5, [r1], #4
 8006ebc:	d10a      	bne.n	8006ed4 <strcmp_unaligned+0x114>
 8006ebe:	ea8c 0c04 	eor.w	ip, ip, r4
 8006ec2:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
 8006ec6:	d10a      	bne.n	8006ede <strcmp_unaligned+0x11e>
 8006ec8:	f850 4b04 	ldr.w	r4, [r0], #4
 8006ecc:	e7e8      	b.n	8006ea0 <strcmp_unaligned+0xe0>
 8006ece:	ea4f 6515 	mov.w	r5, r5, lsr #24
 8006ed2:	e010      	b.n	8006ef6 <strcmp_unaligned+0x136>
 8006ed4:	f014 0fff 	tst.w	r4, #255	; 0xff
 8006ed8:	d006      	beq.n	8006ee8 <strcmp_unaligned+0x128>
 8006eda:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ede:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8006ee2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8006ee6:	e006      	b.n	8006ef6 <strcmp_unaligned+0x136>
 8006ee8:	f04f 0000 	mov.w	r0, #0
 8006eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef0:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
 8006efa:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 8006efe:	2801      	cmp	r0, #1
 8006f00:	bf28      	it	cs
 8006f02:	4290      	cmpcs	r0, r2
 8006f04:	bf04      	itt	eq
 8006f06:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
 8006f0a:	0a2d      	lsreq	r5, r5, #8
 8006f0c:	d0f3      	beq.n	8006ef6 <strcmp_unaligned+0x136>
 8006f0e:	eba2 0000 	sub.w	r0, r2, r0
 8006f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f16:	f85d 5b04 	ldr.w	r5, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <strlen>:
 8006f1c:	f020 0103 	bic.w	r1, r0, #3
 8006f20:	f010 0003 	ands.w	r0, r0, #3
 8006f24:	f1c0 0000 	rsb	r0, r0, #0
 8006f28:	f851 3b04 	ldr.w	r3, [r1], #4
 8006f2c:	f100 0c04 	add.w	ip, r0, #4
 8006f30:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006f34:	f06f 0200 	mvn.w	r2, #0
 8006f38:	bf1c      	itt	ne
 8006f3a:	fa22 f20c 	lsrne.w	r2, r2, ip
 8006f3e:	4313      	orrne	r3, r2
 8006f40:	f04f 0c01 	mov.w	ip, #1
 8006f44:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8006f48:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006f4c:	eba3 020c 	sub.w	r2, r3, ip
 8006f50:	ea22 0203 	bic.w	r2, r2, r3
 8006f54:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8006f58:	bf04      	itt	eq
 8006f5a:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006f5e:	3004      	addeq	r0, #4
 8006f60:	d0f4      	beq.n	8006f4c <strlen+0x30>
 8006f62:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f66:	bf1f      	itttt	ne
 8006f68:	3001      	addne	r0, #1
 8006f6a:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8006f6e:	3001      	addne	r0, #1
 8006f70:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8006f74:	bf18      	it	ne
 8006f76:	3001      	addne	r0, #1
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop

08006f7c <__ssprint_r>:
 8006f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f80:	b083      	sub	sp, #12
 8006f82:	4691      	mov	r9, r2
 8006f84:	9001      	str	r0, [sp, #4]
 8006f86:	6890      	ldr	r0, [r2, #8]
 8006f88:	6817      	ldr	r7, [r2, #0]
 8006f8a:	460d      	mov	r5, r1
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d072      	beq.n	8007076 <__ssprint_r+0xfa>
 8006f90:	f04f 0a00 	mov.w	sl, #0
 8006f94:	6808      	ldr	r0, [r1, #0]
 8006f96:	688b      	ldr	r3, [r1, #8]
 8006f98:	4654      	mov	r4, sl
 8006f9a:	2c00      	cmp	r4, #0
 8006f9c:	d048      	beq.n	8007030 <__ssprint_r+0xb4>
 8006f9e:	429c      	cmp	r4, r3
 8006fa0:	461e      	mov	r6, r3
 8006fa2:	4698      	mov	r8, r3
 8006fa4:	bf3c      	itt	cc
 8006fa6:	4626      	movcc	r6, r4
 8006fa8:	46a0      	movcc	r8, r4
 8006faa:	d331      	bcc.n	8007010 <__ssprint_r+0x94>
 8006fac:	89ab      	ldrh	r3, [r5, #12]
 8006fae:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8006fb2:	d02d      	beq.n	8007010 <__ssprint_r+0x94>
 8006fb4:	696e      	ldr	r6, [r5, #20]
 8006fb6:	6929      	ldr	r1, [r5, #16]
 8006fb8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006fbc:	ebc1 0800 	rsb	r8, r1, r0
 8006fc0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8006fc4:	1c60      	adds	r0, r4, #1
 8006fc6:	1076      	asrs	r6, r6, #1
 8006fc8:	4440      	add	r0, r8
 8006fca:	4286      	cmp	r6, r0
 8006fcc:	4632      	mov	r2, r6
 8006fce:	bf3c      	itt	cc
 8006fd0:	4606      	movcc	r6, r0
 8006fd2:	4632      	movcc	r2, r6
 8006fd4:	055b      	lsls	r3, r3, #21
 8006fd6:	9801      	ldr	r0, [sp, #4]
 8006fd8:	d52f      	bpl.n	800703a <__ssprint_r+0xbe>
 8006fda:	4611      	mov	r1, r2
 8006fdc:	f7fe fed8 	bl	8005d90 <_malloc_r>
 8006fe0:	4683      	mov	fp, r0
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d032      	beq.n	800704c <__ssprint_r+0xd0>
 8006fe6:	6929      	ldr	r1, [r5, #16]
 8006fe8:	4642      	mov	r2, r8
 8006fea:	f7ff f9c3 	bl	8006374 <memcpy>
 8006fee:	89ab      	ldrh	r3, [r5, #12]
 8006ff0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff8:	81ab      	strh	r3, [r5, #12]
 8006ffa:	ebc8 0306 	rsb	r3, r8, r6
 8006ffe:	eb0b 0008 	add.w	r0, fp, r8
 8007002:	616e      	str	r6, [r5, #20]
 8007004:	f8c5 b010 	str.w	fp, [r5, #16]
 8007008:	6028      	str	r0, [r5, #0]
 800700a:	4626      	mov	r6, r4
 800700c:	60ab      	str	r3, [r5, #8]
 800700e:	46a0      	mov	r8, r4
 8007010:	4642      	mov	r2, r8
 8007012:	4651      	mov	r1, sl
 8007014:	f000 fcb8 	bl	8007988 <memmove>
 8007018:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800701c:	68ab      	ldr	r3, [r5, #8]
 800701e:	6828      	ldr	r0, [r5, #0]
 8007020:	1b9b      	subs	r3, r3, r6
 8007022:	4440      	add	r0, r8
 8007024:	1b14      	subs	r4, r2, r4
 8007026:	60ab      	str	r3, [r5, #8]
 8007028:	6028      	str	r0, [r5, #0]
 800702a:	f8c9 4008 	str.w	r4, [r9, #8]
 800702e:	b1e4      	cbz	r4, 800706a <__ssprint_r+0xee>
 8007030:	f8d7 a000 	ldr.w	sl, [r7]
 8007034:	687c      	ldr	r4, [r7, #4]
 8007036:	3708      	adds	r7, #8
 8007038:	e7af      	b.n	8006f9a <__ssprint_r+0x1e>
 800703a:	f000 fd47 	bl	8007acc <_realloc_r>
 800703e:	4683      	mov	fp, r0
 8007040:	2800      	cmp	r0, #0
 8007042:	d1da      	bne.n	8006ffa <__ssprint_r+0x7e>
 8007044:	9801      	ldr	r0, [sp, #4]
 8007046:	6929      	ldr	r1, [r5, #16]
 8007048:	f7fe fd96 	bl	8005b78 <_free_r>
 800704c:	9a01      	ldr	r2, [sp, #4]
 800704e:	230c      	movs	r3, #12
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	89aa      	ldrh	r2, [r5, #12]
 8007054:	2300      	movs	r3, #0
 8007056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800705a:	81aa      	strh	r2, [r5, #12]
 800705c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007060:	f8c9 3008 	str.w	r3, [r9, #8]
 8007064:	f8c9 3004 	str.w	r3, [r9, #4]
 8007068:	e002      	b.n	8007070 <__ssprint_r+0xf4>
 800706a:	f8c9 4004 	str.w	r4, [r9, #4]
 800706e:	4620      	mov	r0, r4
 8007070:	b003      	add	sp, #12
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	6050      	str	r0, [r2, #4]
 8007078:	e7fa      	b.n	8007070 <__ssprint_r+0xf4>
 800707a:	bf00      	nop

0800707c <_svfiprintf_r>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	468a      	mov	sl, r1
 8007082:	8989      	ldrh	r1, [r1, #12]
 8007084:	b0ad      	sub	sp, #180	; 0xb4
 8007086:	0609      	lsls	r1, r1, #24
 8007088:	9007      	str	r0, [sp, #28]
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	d504      	bpl.n	8007098 <_svfiprintf_r+0x1c>
 800708e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8422 	beq.w	80078dc <_svfiprintf_r+0x860>
 8007098:	2300      	movs	r3, #0
 800709a:	f10d 009f 	add.w	r0, sp, #159	; 0x9f
 800709e:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
 80070a2:	a90e      	add	r1, sp, #56	; 0x38
 80070a4:	930c      	str	r3, [sp, #48]	; 0x30
 80070a6:	932a      	str	r3, [sp, #168]	; 0xa8
 80070a8:	9329      	str	r3, [sp, #164]	; 0xa4
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	ebc0 0308 	rsb	r3, r0, r8
 80070b0:	9001      	str	r0, [sp, #4]
 80070b2:	9128      	str	r1, [sp, #160]	; 0xa0
 80070b4:	4617      	mov	r7, r2
 80070b6:	460c      	mov	r4, r1
 80070b8:	930d      	str	r3, [sp, #52]	; 0x34
 80070ba:	783b      	ldrb	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf18      	it	ne
 80070c0:	2b25      	cmpne	r3, #37	; 0x25
 80070c2:	463d      	mov	r5, r7
 80070c4:	d016      	beq.n	80070f4 <_svfiprintf_r+0x78>
 80070c6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80070ca:	2b25      	cmp	r3, #37	; 0x25
 80070cc:	bf18      	it	ne
 80070ce:	2b00      	cmpne	r3, #0
 80070d0:	d1f9      	bne.n	80070c6 <_svfiprintf_r+0x4a>
 80070d2:	1bee      	subs	r6, r5, r7
 80070d4:	d00e      	beq.n	80070f4 <_svfiprintf_r+0x78>
 80070d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80070d8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80070da:	6027      	str	r7, [r4, #0]
 80070dc:	3301      	adds	r3, #1
 80070de:	1992      	adds	r2, r2, r6
 80070e0:	2b07      	cmp	r3, #7
 80070e2:	6066      	str	r6, [r4, #4]
 80070e4:	922a      	str	r2, [sp, #168]	; 0xa8
 80070e6:	9329      	str	r3, [sp, #164]	; 0xa4
 80070e8:	f300 832a 	bgt.w	8007740 <_svfiprintf_r+0x6c4>
 80070ec:	3408      	adds	r4, #8
 80070ee:	9b04      	ldr	r3, [sp, #16]
 80070f0:	199b      	adds	r3, r3, r6
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	782b      	ldrb	r3, [r5, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 82c5 	beq.w	8007686 <_svfiprintf_r+0x60a>
 80070fc:	2200      	movs	r2, #0
 80070fe:	1c6f      	adds	r7, r5, #1
 8007100:	4613      	mov	r3, r2
 8007102:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8007106:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800710a:	9206      	str	r2, [sp, #24]
 800710c:	4693      	mov	fp, r2
 800710e:	f817 2b01 	ldrb.w	r2, [r7], #1
 8007112:	f1a2 0120 	sub.w	r1, r2, #32
 8007116:	2958      	cmp	r1, #88	; 0x58
 8007118:	f200 8178 	bhi.w	800740c <_svfiprintf_r+0x390>
 800711c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007120:	01760172 	.word	0x01760172
 8007124:	016f0176 	.word	0x016f0176
 8007128:	01760176 	.word	0x01760176
 800712c:	01760176 	.word	0x01760176
 8007130:	01760176 	.word	0x01760176
 8007134:	01d800af 	.word	0x01d800af
 8007138:	00ba0176 	.word	0x00ba0176
 800713c:	017601da 	.word	0x017601da
 8007140:	01c401d5 	.word	0x01c401d5
 8007144:	01c401c4 	.word	0x01c401c4
 8007148:	01c401c4 	.word	0x01c401c4
 800714c:	01c401c4 	.word	0x01c401c4
 8007150:	01c401c4 	.word	0x01c401c4
 8007154:	01760176 	.word	0x01760176
 8007158:	01760176 	.word	0x01760176
 800715c:	01760176 	.word	0x01760176
 8007160:	01760176 	.word	0x01760176
 8007164:	01760176 	.word	0x01760176
 8007168:	017601a7 	.word	0x017601a7
 800716c:	01760176 	.word	0x01760176
 8007170:	01760176 	.word	0x01760176
 8007174:	01760176 	.word	0x01760176
 8007178:	01760176 	.word	0x01760176
 800717c:	005c0176 	.word	0x005c0176
 8007180:	01760176 	.word	0x01760176
 8007184:	01760176 	.word	0x01760176
 8007188:	00a00176 	.word	0x00a00176
 800718c:	01760176 	.word	0x01760176
 8007190:	0176016a 	.word	0x0176016a
 8007194:	01760176 	.word	0x01760176
 8007198:	01760176 	.word	0x01760176
 800719c:	01760176 	.word	0x01760176
 80071a0:	01760176 	.word	0x01760176
 80071a4:	01170176 	.word	0x01170176
 80071a8:	01760105 	.word	0x01760105
 80071ac:	01760176 	.word	0x01760176
 80071b0:	01050102 	.word	0x01050102
 80071b4:	01760176 	.word	0x01760176
 80071b8:	01760059 	.word	0x01760059
 80071bc:	005e00d1 	.word	0x005e00d1
 80071c0:	005900bd 	.word	0x005900bd
 80071c4:	01870176 	.word	0x01870176
 80071c8:	00a20176 	.word	0x00a20176
 80071cc:	01760176 	.word	0x01760176
 80071d0:	00e2      	.short	0x00e2
 80071d2:	f04b 0b10 	orr.w	fp, fp, #16
 80071d6:	e79a      	b.n	800710e <_svfiprintf_r+0x92>
 80071d8:	f04b 0b10 	orr.w	fp, fp, #16
 80071dc:	f01b 0210 	ands.w	r2, fp, #16
 80071e0:	f000 8313 	beq.w	800780a <_svfiprintf_r+0x78e>
 80071e4:	9805      	ldr	r0, [sp, #20]
 80071e6:	6803      	ldr	r3, [r0, #0]
 80071e8:	2200      	movs	r2, #0
 80071ea:	1a99      	subs	r1, r3, r2
 80071ec:	bf18      	it	ne
 80071ee:	2101      	movne	r1, #1
 80071f0:	3004      	adds	r0, #4
 80071f2:	9005      	str	r0, [sp, #20]
 80071f4:	2000      	movs	r0, #0
 80071f6:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
 80071fa:	2d00      	cmp	r5, #0
 80071fc:	bfa8      	it	ge
 80071fe:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
 8007202:	2d00      	cmp	r5, #0
 8007204:	bf18      	it	ne
 8007206:	f041 0101 	orrne.w	r1, r1, #1
 800720a:	2900      	cmp	r1, #0
 800720c:	f000 8228 	beq.w	8007660 <_svfiprintf_r+0x5e4>
 8007210:	2a01      	cmp	r2, #1
 8007212:	f000 82cf 	beq.w	80077b4 <_svfiprintf_r+0x738>
 8007216:	2a02      	cmp	r2, #2
 8007218:	bf18      	it	ne
 800721a:	4642      	movne	r2, r8
 800721c:	d101      	bne.n	8007222 <_svfiprintf_r+0x1a6>
 800721e:	e2b9      	b.n	8007794 <_svfiprintf_r+0x718>
 8007220:	4602      	mov	r2, r0
 8007222:	f003 0107 	and.w	r1, r3, #7
 8007226:	3130      	adds	r1, #48	; 0x30
 8007228:	1e50      	subs	r0, r2, #1
 800722a:	08db      	lsrs	r3, r3, #3
 800722c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007230:	d1f6      	bne.n	8007220 <_svfiprintf_r+0x1a4>
 8007232:	f01b 0f01 	tst.w	fp, #1
 8007236:	9009      	str	r0, [sp, #36]	; 0x24
 8007238:	f040 831a 	bne.w	8007870 <_svfiprintf_r+0x7f4>
 800723c:	ebc0 0308 	rsb	r3, r0, r8
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	9508      	str	r5, [sp, #32]
 8007244:	9803      	ldr	r0, [sp, #12]
 8007246:	9908      	ldr	r1, [sp, #32]
 8007248:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
 800724c:	4288      	cmp	r0, r1
 800724e:	bfb8      	it	lt
 8007250:	4608      	movlt	r0, r1
 8007252:	9002      	str	r0, [sp, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 808b 	beq.w	8007370 <_svfiprintf_r+0x2f4>
 800725a:	3001      	adds	r0, #1
 800725c:	9002      	str	r0, [sp, #8]
 800725e:	e087      	b.n	8007370 <_svfiprintf_r+0x2f4>
 8007260:	f04b 0b10 	orr.w	fp, fp, #16
 8007264:	f01b 0f10 	tst.w	fp, #16
 8007268:	f000 82c1 	beq.w	80077ee <_svfiprintf_r+0x772>
 800726c:	9805      	ldr	r0, [sp, #20]
 800726e:	6803      	ldr	r3, [r0, #0]
 8007270:	2201      	movs	r2, #1
 8007272:	1c19      	adds	r1, r3, #0
 8007274:	bf18      	it	ne
 8007276:	2101      	movne	r1, #1
 8007278:	3004      	adds	r0, #4
 800727a:	9005      	str	r0, [sp, #20]
 800727c:	e7ba      	b.n	80071f4 <_svfiprintf_r+0x178>
 800727e:	9805      	ldr	r0, [sp, #20]
 8007280:	9905      	ldr	r1, [sp, #20]
 8007282:	6800      	ldr	r0, [r0, #0]
 8007284:	1d0a      	adds	r2, r1, #4
 8007286:	2800      	cmp	r0, #0
 8007288:	9006      	str	r0, [sp, #24]
 800728a:	f280 82e0 	bge.w	800784e <_svfiprintf_r+0x7d2>
 800728e:	4240      	negs	r0, r0
 8007290:	9006      	str	r0, [sp, #24]
 8007292:	9205      	str	r2, [sp, #20]
 8007294:	f04b 0b04 	orr.w	fp, fp, #4
 8007298:	e739      	b.n	800710e <_svfiprintf_r+0x92>
 800729a:	9b05      	ldr	r3, [sp, #20]
 800729c:	9905      	ldr	r1, [sp, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2230      	movs	r2, #48	; 0x30
 80072a2:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
 80072a6:	2278      	movs	r2, #120	; 0x78
 80072a8:	3104      	adds	r1, #4
 80072aa:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 80072ae:	4aaf      	ldr	r2, [pc, #700]	; (800756c <_svfiprintf_r+0x4f0>)
 80072b0:	9105      	str	r1, [sp, #20]
 80072b2:	1c19      	adds	r1, r3, #0
 80072b4:	bf18      	it	ne
 80072b6:	2101      	movne	r1, #1
 80072b8:	920c      	str	r2, [sp, #48]	; 0x30
 80072ba:	f04b 0b02 	orr.w	fp, fp, #2
 80072be:	2202      	movs	r2, #2
 80072c0:	e798      	b.n	80071f4 <_svfiprintf_r+0x178>
 80072c2:	f01b 0f10 	tst.w	fp, #16
 80072c6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80072ca:	f040 82dd 	bne.w	8007888 <_svfiprintf_r+0x80c>
 80072ce:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80072d2:	f000 82fb 	beq.w	80078cc <_svfiprintf_r+0x850>
 80072d6:	9a05      	ldr	r2, [sp, #20]
 80072d8:	9804      	ldr	r0, [sp, #16]
 80072da:	6813      	ldr	r3, [r2, #0]
 80072dc:	3204      	adds	r2, #4
 80072de:	9205      	str	r2, [sp, #20]
 80072e0:	8018      	strh	r0, [r3, #0]
 80072e2:	e6ea      	b.n	80070ba <_svfiprintf_r+0x3e>
 80072e4:	49a1      	ldr	r1, [pc, #644]	; (800756c <_svfiprintf_r+0x4f0>)
 80072e6:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80072ea:	910c      	str	r1, [sp, #48]	; 0x30
 80072ec:	f01b 0f10 	tst.w	fp, #16
 80072f0:	d103      	bne.n	80072fa <_svfiprintf_r+0x27e>
 80072f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80072f6:	f040 82d3 	bne.w	80078a0 <_svfiprintf_r+0x824>
 80072fa:	9805      	ldr	r0, [sp, #20]
 80072fc:	6803      	ldr	r3, [r0, #0]
 80072fe:	3004      	adds	r0, #4
 8007300:	9005      	str	r0, [sp, #20]
 8007302:	1c19      	adds	r1, r3, #0
 8007304:	bf18      	it	ne
 8007306:	2101      	movne	r1, #1
 8007308:	ea1b 0f01 	tst.w	fp, r1
 800730c:	f000 8287 	beq.w	800781e <_svfiprintf_r+0x7a2>
 8007310:	2130      	movs	r1, #48	; 0x30
 8007312:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 8007316:	f88d 20ad 	strb.w	r2, [sp, #173]	; 0xad
 800731a:	f04b 0b02 	orr.w	fp, fp, #2
 800731e:	2101      	movs	r1, #1
 8007320:	2202      	movs	r2, #2
 8007322:	e767      	b.n	80071f4 <_svfiprintf_r+0x178>
 8007324:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 8007328:	e6f1      	b.n	800710e <_svfiprintf_r+0x92>
 800732a:	f01b 0f10 	tst.w	fp, #16
 800732e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007332:	f000 80a4 	beq.w	800747e <_svfiprintf_r+0x402>
 8007336:	9805      	ldr	r0, [sp, #20]
 8007338:	6803      	ldr	r3, [r0, #0]
 800733a:	3004      	adds	r0, #4
 800733c:	9005      	str	r0, [sp, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	f2c0 80a9 	blt.w	8007496 <_svfiprintf_r+0x41a>
 8007344:	bf0c      	ite	eq
 8007346:	2100      	moveq	r1, #0
 8007348:	2101      	movne	r1, #1
 800734a:	2201      	movs	r2, #1
 800734c:	e755      	b.n	80071fa <_svfiprintf_r+0x17e>
 800734e:	9b05      	ldr	r3, [sp, #20]
 8007350:	9905      	ldr	r1, [sp, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2001      	movs	r0, #1
 8007356:	2200      	movs	r2, #0
 8007358:	3104      	adds	r1, #4
 800735a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
 800735e:	ab1e      	add	r3, sp, #120	; 0x78
 8007360:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 8007364:	9002      	str	r0, [sp, #8]
 8007366:	9105      	str	r1, [sp, #20]
 8007368:	9003      	str	r0, [sp, #12]
 800736a:	9309      	str	r3, [sp, #36]	; 0x24
 800736c:	2300      	movs	r3, #0
 800736e:	9308      	str	r3, [sp, #32]
 8007370:	f01b 0302 	ands.w	r3, fp, #2
 8007374:	930a      	str	r3, [sp, #40]	; 0x28
 8007376:	d002      	beq.n	800737e <_svfiprintf_r+0x302>
 8007378:	9b02      	ldr	r3, [sp, #8]
 800737a:	3302      	adds	r3, #2
 800737c:	9302      	str	r3, [sp, #8]
 800737e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8007382:	930b      	str	r3, [sp, #44]	; 0x2c
 8007384:	f040 80c1 	bne.w	800750a <_svfiprintf_r+0x48e>
 8007388:	9b06      	ldr	r3, [sp, #24]
 800738a:	9802      	ldr	r0, [sp, #8]
 800738c:	1a1d      	subs	r5, r3, r0
 800738e:	2d00      	cmp	r5, #0
 8007390:	f340 80bb 	ble.w	800750a <_svfiprintf_r+0x48e>
 8007394:	2d10      	cmp	r5, #16
 8007396:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007398:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800739a:	4e75      	ldr	r6, [pc, #468]	; (8007570 <_svfiprintf_r+0x4f4>)
 800739c:	dd1f      	ble.n	80073de <_svfiprintf_r+0x362>
 800739e:	4621      	mov	r1, r4
 80073a0:	f04f 0910 	mov.w	r9, #16
 80073a4:	9c07      	ldr	r4, [sp, #28]
 80073a6:	e002      	b.n	80073ae <_svfiprintf_r+0x332>
 80073a8:	3d10      	subs	r5, #16
 80073aa:	2d10      	cmp	r5, #16
 80073ac:	dd16      	ble.n	80073dc <_svfiprintf_r+0x360>
 80073ae:	3301      	adds	r3, #1
 80073b0:	3210      	adds	r2, #16
 80073b2:	e881 0240 	stmia.w	r1, {r6, r9}
 80073b6:	3108      	adds	r1, #8
 80073b8:	2b07      	cmp	r3, #7
 80073ba:	922a      	str	r2, [sp, #168]	; 0xa8
 80073bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80073be:	ddf3      	ble.n	80073a8 <_svfiprintf_r+0x32c>
 80073c0:	4620      	mov	r0, r4
 80073c2:	4651      	mov	r1, sl
 80073c4:	4642      	mov	r2, r8
 80073c6:	f7ff fdd9 	bl	8006f7c <__ssprint_r>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f040 8162 	bne.w	8007694 <_svfiprintf_r+0x618>
 80073d0:	3d10      	subs	r5, #16
 80073d2:	2d10      	cmp	r5, #16
 80073d4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80073d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80073d8:	a90e      	add	r1, sp, #56	; 0x38
 80073da:	dce8      	bgt.n	80073ae <_svfiprintf_r+0x332>
 80073dc:	460c      	mov	r4, r1
 80073de:	3301      	adds	r3, #1
 80073e0:	1952      	adds	r2, r2, r5
 80073e2:	2b07      	cmp	r3, #7
 80073e4:	6026      	str	r6, [r4, #0]
 80073e6:	6065      	str	r5, [r4, #4]
 80073e8:	922a      	str	r2, [sp, #168]	; 0xa8
 80073ea:	9329      	str	r3, [sp, #164]	; 0xa4
 80073ec:	f300 8219 	bgt.w	8007822 <_svfiprintf_r+0x7a6>
 80073f0:	3408      	adds	r4, #8
 80073f2:	e08c      	b.n	800750e <_svfiprintf_r+0x492>
 80073f4:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 80073f8:	4b5e      	ldr	r3, [pc, #376]	; (8007574 <_svfiprintf_r+0x4f8>)
 80073fa:	930c      	str	r3, [sp, #48]	; 0x30
 80073fc:	e776      	b.n	80072ec <_svfiprintf_r+0x270>
 80073fe:	f04b 0b01 	orr.w	fp, fp, #1
 8007402:	e684      	b.n	800710e <_svfiprintf_r+0x92>
 8007404:	2b00      	cmp	r3, #0
 8007406:	bf08      	it	eq
 8007408:	2320      	moveq	r3, #32
 800740a:	e680      	b.n	800710e <_svfiprintf_r+0x92>
 800740c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007410:	2a00      	cmp	r2, #0
 8007412:	f000 8138 	beq.w	8007686 <_svfiprintf_r+0x60a>
 8007416:	2301      	movs	r3, #1
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	2300      	movs	r3, #0
 800741c:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 8007420:	2301      	movs	r3, #1
 8007422:	9303      	str	r3, [sp, #12]
 8007424:	ab1e      	add	r3, sp, #120	; 0x78
 8007426:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800742a:	9309      	str	r3, [sp, #36]	; 0x24
 800742c:	e79e      	b.n	800736c <_svfiprintf_r+0x2f0>
 800742e:	9b05      	ldr	r3, [sp, #20]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	9309      	str	r3, [sp, #36]	; 0x24
 8007434:	9b05      	ldr	r3, [sp, #20]
 8007436:	3304      	adds	r3, #4
 8007438:	9305      	str	r3, [sp, #20]
 800743a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800743c:	2600      	movs	r6, #0
 800743e:	f88d 60af 	strb.w	r6, [sp, #175]	; 0xaf
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 8259 	beq.w	80078fa <_svfiprintf_r+0x87e>
 8007448:	2d00      	cmp	r5, #0
 800744a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800744c:	f2c0 822d 	blt.w	80078aa <_svfiprintf_r+0x82e>
 8007450:	4631      	mov	r1, r6
 8007452:	462a      	mov	r2, r5
 8007454:	f7fe ff50 	bl	80062f8 <memchr>
 8007458:	2800      	cmp	r0, #0
 800745a:	f000 8258 	beq.w	800790e <_svfiprintf_r+0x892>
 800745e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007460:	9608      	str	r6, [sp, #32]
 8007462:	1ac0      	subs	r0, r0, r3
 8007464:	42a8      	cmp	r0, r5
 8007466:	9003      	str	r0, [sp, #12]
 8007468:	bfc8      	it	gt
 800746a:	9503      	strgt	r5, [sp, #12]
 800746c:	e6ea      	b.n	8007244 <_svfiprintf_r+0x1c8>
 800746e:	f04b 0b10 	orr.w	fp, fp, #16
 8007472:	f01b 0f10 	tst.w	fp, #16
 8007476:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
 800747a:	f47f af5c 	bne.w	8007336 <_svfiprintf_r+0x2ba>
 800747e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007482:	f000 8208 	beq.w	8007896 <_svfiprintf_r+0x81a>
 8007486:	9905      	ldr	r1, [sp, #20]
 8007488:	f9b1 3000 	ldrsh.w	r3, [r1]
 800748c:	3104      	adds	r1, #4
 800748e:	2b00      	cmp	r3, #0
 8007490:	9105      	str	r1, [sp, #20]
 8007492:	f6bf af57 	bge.w	8007344 <_svfiprintf_r+0x2c8>
 8007496:	425b      	negs	r3, r3
 8007498:	222d      	movs	r2, #45	; 0x2d
 800749a:	1c19      	adds	r1, r3, #0
 800749c:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
 80074a0:	bf18      	it	ne
 80074a2:	2101      	movne	r1, #1
 80074a4:	2201      	movs	r2, #1
 80074a6:	e6a8      	b.n	80071fa <_svfiprintf_r+0x17e>
 80074a8:	4638      	mov	r0, r7
 80074aa:	2100      	movs	r1, #0
 80074ac:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80074b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074b4:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80074b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80074bc:	2e09      	cmp	r6, #9
 80074be:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 80074c2:	4607      	mov	r7, r0
 80074c4:	d9f2      	bls.n	80074ac <_svfiprintf_r+0x430>
 80074c6:	9106      	str	r1, [sp, #24]
 80074c8:	e623      	b.n	8007112 <_svfiprintf_r+0x96>
 80074ca:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 80074ce:	e61e      	b.n	800710e <_svfiprintf_r+0x92>
 80074d0:	232b      	movs	r3, #43	; 0x2b
 80074d2:	e61c      	b.n	800710e <_svfiprintf_r+0x92>
 80074d4:	f817 2b01 	ldrb.w	r2, [r7], #1
 80074d8:	2a2a      	cmp	r2, #42	; 0x2a
 80074da:	f000 81ae 	beq.w	800783a <_svfiprintf_r+0x7be>
 80074de:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074e2:	2500      	movs	r5, #0
 80074e4:	2909      	cmp	r1, #9
 80074e6:	f63f ae14 	bhi.w	8007112 <_svfiprintf_r+0x96>
 80074ea:	4638      	mov	r0, r7
 80074ec:	2500      	movs	r5, #0
 80074ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80074f6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80074fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80074fe:	2909      	cmp	r1, #9
 8007500:	4607      	mov	r7, r0
 8007502:	d9f4      	bls.n	80074ee <_svfiprintf_r+0x472>
 8007504:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8007508:	e603      	b.n	8007112 <_svfiprintf_r+0x96>
 800750a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800750c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800750e:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
 8007512:	b161      	cbz	r1, 800752e <_svfiprintf_r+0x4b2>
 8007514:	3301      	adds	r3, #1
 8007516:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
 800751a:	3201      	adds	r2, #1
 800751c:	6021      	str	r1, [r4, #0]
 800751e:	2101      	movs	r1, #1
 8007520:	2b07      	cmp	r3, #7
 8007522:	6061      	str	r1, [r4, #4]
 8007524:	922a      	str	r2, [sp, #168]	; 0xa8
 8007526:	9329      	str	r3, [sp, #164]	; 0xa4
 8007528:	f300 811e 	bgt.w	8007768 <_svfiprintf_r+0x6ec>
 800752c:	3408      	adds	r4, #8
 800752e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007530:	b159      	cbz	r1, 800754a <_svfiprintf_r+0x4ce>
 8007532:	3301      	adds	r3, #1
 8007534:	a92b      	add	r1, sp, #172	; 0xac
 8007536:	3202      	adds	r2, #2
 8007538:	6021      	str	r1, [r4, #0]
 800753a:	2102      	movs	r1, #2
 800753c:	2b07      	cmp	r3, #7
 800753e:	6061      	str	r1, [r4, #4]
 8007540:	922a      	str	r2, [sp, #168]	; 0xa8
 8007542:	9329      	str	r3, [sp, #164]	; 0xa4
 8007544:	f300 811b 	bgt.w	800777e <_svfiprintf_r+0x702>
 8007548:	3408      	adds	r4, #8
 800754a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800754c:	2880      	cmp	r0, #128	; 0x80
 800754e:	f000 80ae 	beq.w	80076ae <_svfiprintf_r+0x632>
 8007552:	9808      	ldr	r0, [sp, #32]
 8007554:	9903      	ldr	r1, [sp, #12]
 8007556:	1a45      	subs	r5, r0, r1
 8007558:	2d00      	cmp	r5, #0
 800755a:	dd33      	ble.n	80075c4 <_svfiprintf_r+0x548>
 800755c:	2d10      	cmp	r5, #16
 800755e:	4e06      	ldr	r6, [pc, #24]	; (8007578 <_svfiprintf_r+0x4fc>)
 8007560:	dd26      	ble.n	80075b0 <_svfiprintf_r+0x534>
 8007562:	4621      	mov	r1, r4
 8007564:	f04f 0910 	mov.w	r9, #16
 8007568:	9c07      	ldr	r4, [sp, #28]
 800756a:	e00a      	b.n	8007582 <_svfiprintf_r+0x506>
 800756c:	08008cf0 	.word	0x08008cf0
 8007570:	08008c58 	.word	0x08008c58
 8007574:	08008cdc 	.word	0x08008cdc
 8007578:	08008c68 	.word	0x08008c68
 800757c:	3d10      	subs	r5, #16
 800757e:	2d10      	cmp	r5, #16
 8007580:	dd15      	ble.n	80075ae <_svfiprintf_r+0x532>
 8007582:	3301      	adds	r3, #1
 8007584:	3210      	adds	r2, #16
 8007586:	e881 0240 	stmia.w	r1, {r6, r9}
 800758a:	3108      	adds	r1, #8
 800758c:	2b07      	cmp	r3, #7
 800758e:	922a      	str	r2, [sp, #168]	; 0xa8
 8007590:	9329      	str	r3, [sp, #164]	; 0xa4
 8007592:	ddf3      	ble.n	800757c <_svfiprintf_r+0x500>
 8007594:	4620      	mov	r0, r4
 8007596:	4651      	mov	r1, sl
 8007598:	4642      	mov	r2, r8
 800759a:	f7ff fcef 	bl	8006f7c <__ssprint_r>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d178      	bne.n	8007694 <_svfiprintf_r+0x618>
 80075a2:	3d10      	subs	r5, #16
 80075a4:	2d10      	cmp	r5, #16
 80075a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80075a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80075aa:	a90e      	add	r1, sp, #56	; 0x38
 80075ac:	dce9      	bgt.n	8007582 <_svfiprintf_r+0x506>
 80075ae:	460c      	mov	r4, r1
 80075b0:	3301      	adds	r3, #1
 80075b2:	1952      	adds	r2, r2, r5
 80075b4:	2b07      	cmp	r3, #7
 80075b6:	6026      	str	r6, [r4, #0]
 80075b8:	6065      	str	r5, [r4, #4]
 80075ba:	922a      	str	r2, [sp, #168]	; 0xa8
 80075bc:	9329      	str	r3, [sp, #164]	; 0xa4
 80075be:	f300 80c8 	bgt.w	8007752 <_svfiprintf_r+0x6d6>
 80075c2:	3408      	adds	r4, #8
 80075c4:	9903      	ldr	r1, [sp, #12]
 80075c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075c8:	3301      	adds	r3, #1
 80075ca:	1852      	adds	r2, r2, r1
 80075cc:	2b07      	cmp	r3, #7
 80075ce:	e884 0003 	stmia.w	r4, {r0, r1}
 80075d2:	922a      	str	r2, [sp, #168]	; 0xa8
 80075d4:	9329      	str	r3, [sp, #164]	; 0xa4
 80075d6:	bfd8      	it	le
 80075d8:	f104 0108 	addle.w	r1, r4, #8
 80075dc:	f300 809a 	bgt.w	8007714 <_svfiprintf_r+0x698>
 80075e0:	f01b 0f04 	tst.w	fp, #4
 80075e4:	d02e      	beq.n	8007644 <_svfiprintf_r+0x5c8>
 80075e6:	9b06      	ldr	r3, [sp, #24]
 80075e8:	9802      	ldr	r0, [sp, #8]
 80075ea:	1a1d      	subs	r5, r3, r0
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	dd29      	ble.n	8007644 <_svfiprintf_r+0x5c8>
 80075f0:	2d10      	cmp	r5, #16
 80075f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80075f4:	4e97      	ldr	r6, [pc, #604]	; (8007854 <_svfiprintf_r+0x7d8>)
 80075f6:	dd1c      	ble.n	8007632 <_svfiprintf_r+0x5b6>
 80075f8:	2410      	movs	r4, #16
 80075fa:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80075fe:	e002      	b.n	8007606 <_svfiprintf_r+0x58a>
 8007600:	3d10      	subs	r5, #16
 8007602:	2d10      	cmp	r5, #16
 8007604:	dd15      	ble.n	8007632 <_svfiprintf_r+0x5b6>
 8007606:	3301      	adds	r3, #1
 8007608:	3210      	adds	r2, #16
 800760a:	600e      	str	r6, [r1, #0]
 800760c:	604c      	str	r4, [r1, #4]
 800760e:	3108      	adds	r1, #8
 8007610:	2b07      	cmp	r3, #7
 8007612:	922a      	str	r2, [sp, #168]	; 0xa8
 8007614:	9329      	str	r3, [sp, #164]	; 0xa4
 8007616:	ddf3      	ble.n	8007600 <_svfiprintf_r+0x584>
 8007618:	4648      	mov	r0, r9
 800761a:	4651      	mov	r1, sl
 800761c:	4642      	mov	r2, r8
 800761e:	f7ff fcad 	bl	8006f7c <__ssprint_r>
 8007622:	2800      	cmp	r0, #0
 8007624:	d136      	bne.n	8007694 <_svfiprintf_r+0x618>
 8007626:	3d10      	subs	r5, #16
 8007628:	2d10      	cmp	r5, #16
 800762a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800762c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800762e:	a90e      	add	r1, sp, #56	; 0x38
 8007630:	dce9      	bgt.n	8007606 <_svfiprintf_r+0x58a>
 8007632:	3301      	adds	r3, #1
 8007634:	18aa      	adds	r2, r5, r2
 8007636:	2b07      	cmp	r3, #7
 8007638:	600e      	str	r6, [r1, #0]
 800763a:	604d      	str	r5, [r1, #4]
 800763c:	922a      	str	r2, [sp, #168]	; 0xa8
 800763e:	9329      	str	r3, [sp, #164]	; 0xa4
 8007640:	f300 810c 	bgt.w	800785c <_svfiprintf_r+0x7e0>
 8007644:	9b04      	ldr	r3, [sp, #16]
 8007646:	9902      	ldr	r1, [sp, #8]
 8007648:	9806      	ldr	r0, [sp, #24]
 800764a:	4281      	cmp	r1, r0
 800764c:	bfac      	ite	ge
 800764e:	185b      	addge	r3, r3, r1
 8007650:	181b      	addlt	r3, r3, r0
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	2a00      	cmp	r2, #0
 8007656:	d167      	bne.n	8007728 <_svfiprintf_r+0x6ac>
 8007658:	2300      	movs	r3, #0
 800765a:	9329      	str	r3, [sp, #164]	; 0xa4
 800765c:	ac0e      	add	r4, sp, #56	; 0x38
 800765e:	e52c      	b.n	80070ba <_svfiprintf_r+0x3e>
 8007660:	2a00      	cmp	r2, #0
 8007662:	d169      	bne.n	8007738 <_svfiprintf_r+0x6bc>
 8007664:	f01b 0f01 	tst.w	fp, #1
 8007668:	bf04      	itt	eq
 800766a:	9203      	streq	r2, [sp, #12]
 800766c:	f8cd 8024 	streq.w	r8, [sp, #36]	; 0x24
 8007670:	f43f ade7 	beq.w	8007242 <_svfiprintf_r+0x1c6>
 8007674:	2330      	movs	r3, #48	; 0x30
 8007676:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
 800767a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800767c:	9303      	str	r3, [sp, #12]
 800767e:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
 8007682:	9309      	str	r3, [sp, #36]	; 0x24
 8007684:	e5dd      	b.n	8007242 <_svfiprintf_r+0x1c6>
 8007686:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007688:	b123      	cbz	r3, 8007694 <_svfiprintf_r+0x618>
 800768a:	9807      	ldr	r0, [sp, #28]
 800768c:	4651      	mov	r1, sl
 800768e:	aa28      	add	r2, sp, #160	; 0xa0
 8007690:	f7ff fc74 	bl	8006f7c <__ssprint_r>
 8007694:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007698:	f013 0f40 	tst.w	r3, #64	; 0x40
 800769c:	9b04      	ldr	r3, [sp, #16]
 800769e:	bf18      	it	ne
 80076a0:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	9804      	ldr	r0, [sp, #16]
 80076a8:	b02d      	add	sp, #180	; 0xb4
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	9906      	ldr	r1, [sp, #24]
 80076b0:	9802      	ldr	r0, [sp, #8]
 80076b2:	1a0d      	subs	r5, r1, r0
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	f77f af4c 	ble.w	8007552 <_svfiprintf_r+0x4d6>
 80076ba:	2d10      	cmp	r5, #16
 80076bc:	4e66      	ldr	r6, [pc, #408]	; (8007858 <_svfiprintf_r+0x7dc>)
 80076be:	dd1e      	ble.n	80076fe <_svfiprintf_r+0x682>
 80076c0:	4621      	mov	r1, r4
 80076c2:	f04f 0910 	mov.w	r9, #16
 80076c6:	9c07      	ldr	r4, [sp, #28]
 80076c8:	e002      	b.n	80076d0 <_svfiprintf_r+0x654>
 80076ca:	3d10      	subs	r5, #16
 80076cc:	2d10      	cmp	r5, #16
 80076ce:	dd15      	ble.n	80076fc <_svfiprintf_r+0x680>
 80076d0:	3301      	adds	r3, #1
 80076d2:	3210      	adds	r2, #16
 80076d4:	e881 0240 	stmia.w	r1, {r6, r9}
 80076d8:	3108      	adds	r1, #8
 80076da:	2b07      	cmp	r3, #7
 80076dc:	922a      	str	r2, [sp, #168]	; 0xa8
 80076de:	9329      	str	r3, [sp, #164]	; 0xa4
 80076e0:	ddf3      	ble.n	80076ca <_svfiprintf_r+0x64e>
 80076e2:	4620      	mov	r0, r4
 80076e4:	4651      	mov	r1, sl
 80076e6:	4642      	mov	r2, r8
 80076e8:	f7ff fc48 	bl	8006f7c <__ssprint_r>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d1d1      	bne.n	8007694 <_svfiprintf_r+0x618>
 80076f0:	3d10      	subs	r5, #16
 80076f2:	2d10      	cmp	r5, #16
 80076f4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80076f6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80076f8:	a90e      	add	r1, sp, #56	; 0x38
 80076fa:	dce9      	bgt.n	80076d0 <_svfiprintf_r+0x654>
 80076fc:	460c      	mov	r4, r1
 80076fe:	3301      	adds	r3, #1
 8007700:	1952      	adds	r2, r2, r5
 8007702:	2b07      	cmp	r3, #7
 8007704:	6026      	str	r6, [r4, #0]
 8007706:	6065      	str	r5, [r4, #4]
 8007708:	922a      	str	r2, [sp, #168]	; 0xa8
 800770a:	9329      	str	r3, [sp, #164]	; 0xa4
 800770c:	f300 80d2 	bgt.w	80078b4 <_svfiprintf_r+0x838>
 8007710:	3408      	adds	r4, #8
 8007712:	e71e      	b.n	8007552 <_svfiprintf_r+0x4d6>
 8007714:	9807      	ldr	r0, [sp, #28]
 8007716:	4651      	mov	r1, sl
 8007718:	4642      	mov	r2, r8
 800771a:	f7ff fc2f 	bl	8006f7c <__ssprint_r>
 800771e:	2800      	cmp	r0, #0
 8007720:	d1b8      	bne.n	8007694 <_svfiprintf_r+0x618>
 8007722:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007724:	a90e      	add	r1, sp, #56	; 0x38
 8007726:	e75b      	b.n	80075e0 <_svfiprintf_r+0x564>
 8007728:	9807      	ldr	r0, [sp, #28]
 800772a:	4651      	mov	r1, sl
 800772c:	4642      	mov	r2, r8
 800772e:	f7ff fc25 	bl	8006f7c <__ssprint_r>
 8007732:	2800      	cmp	r0, #0
 8007734:	d090      	beq.n	8007658 <_svfiprintf_r+0x5dc>
 8007736:	e7ad      	b.n	8007694 <_svfiprintf_r+0x618>
 8007738:	9103      	str	r1, [sp, #12]
 800773a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800773e:	e580      	b.n	8007242 <_svfiprintf_r+0x1c6>
 8007740:	9807      	ldr	r0, [sp, #28]
 8007742:	4651      	mov	r1, sl
 8007744:	4642      	mov	r2, r8
 8007746:	f7ff fc19 	bl	8006f7c <__ssprint_r>
 800774a:	2800      	cmp	r0, #0
 800774c:	d1a2      	bne.n	8007694 <_svfiprintf_r+0x618>
 800774e:	ac0e      	add	r4, sp, #56	; 0x38
 8007750:	e4cd      	b.n	80070ee <_svfiprintf_r+0x72>
 8007752:	9807      	ldr	r0, [sp, #28]
 8007754:	4651      	mov	r1, sl
 8007756:	4642      	mov	r2, r8
 8007758:	f7ff fc10 	bl	8006f7c <__ssprint_r>
 800775c:	2800      	cmp	r0, #0
 800775e:	d199      	bne.n	8007694 <_svfiprintf_r+0x618>
 8007760:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007762:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007764:	ac0e      	add	r4, sp, #56	; 0x38
 8007766:	e72d      	b.n	80075c4 <_svfiprintf_r+0x548>
 8007768:	9807      	ldr	r0, [sp, #28]
 800776a:	4651      	mov	r1, sl
 800776c:	4642      	mov	r2, r8
 800776e:	f7ff fc05 	bl	8006f7c <__ssprint_r>
 8007772:	2800      	cmp	r0, #0
 8007774:	d18e      	bne.n	8007694 <_svfiprintf_r+0x618>
 8007776:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007778:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800777a:	ac0e      	add	r4, sp, #56	; 0x38
 800777c:	e6d7      	b.n	800752e <_svfiprintf_r+0x4b2>
 800777e:	9807      	ldr	r0, [sp, #28]
 8007780:	4651      	mov	r1, sl
 8007782:	4642      	mov	r2, r8
 8007784:	f7ff fbfa 	bl	8006f7c <__ssprint_r>
 8007788:	2800      	cmp	r0, #0
 800778a:	d183      	bne.n	8007694 <_svfiprintf_r+0x618>
 800778c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800778e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007790:	ac0e      	add	r4, sp, #56	; 0x38
 8007792:	e6da      	b.n	800754a <_svfiprintf_r+0x4ce>
 8007794:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007796:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 800779a:	f003 000f 	and.w	r0, r3, #15
 800779e:	4611      	mov	r1, r2
 80077a0:	5c30      	ldrb	r0, [r6, r0]
 80077a2:	3a01      	subs	r2, #1
 80077a4:	091b      	lsrs	r3, r3, #4
 80077a6:	7008      	strb	r0, [r1, #0]
 80077a8:	d1f7      	bne.n	800779a <_svfiprintf_r+0x71e>
 80077aa:	ebc1 0308 	rsb	r3, r1, r8
 80077ae:	9109      	str	r1, [sp, #36]	; 0x24
 80077b0:	9303      	str	r3, [sp, #12]
 80077b2:	e546      	b.n	8007242 <_svfiprintf_r+0x1c6>
 80077b4:	2b09      	cmp	r3, #9
 80077b6:	bf82      	ittt	hi
 80077b8:	f64c 46cd 	movwhi	r6, #52429	; 0xcccd
 80077bc:	f10d 019f 	addhi.w	r1, sp, #159	; 0x9f
 80077c0:	f6cc 46cc 	movthi	r6, #52428	; 0xcccc
 80077c4:	d801      	bhi.n	80077ca <_svfiprintf_r+0x74e>
 80077c6:	3330      	adds	r3, #48	; 0x30
 80077c8:	e755      	b.n	8007676 <_svfiprintf_r+0x5fa>
 80077ca:	fba6 0203 	umull	r0, r2, r6, r3
 80077ce:	08d2      	lsrs	r2, r2, #3
 80077d0:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80077d4:	eba3 0c4c 	sub.w	ip, r3, ip, lsl #1
 80077d8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 80077dc:	4608      	mov	r0, r1
 80077de:	f881 c000 	strb.w	ip, [r1]
 80077e2:	4613      	mov	r3, r2
 80077e4:	3901      	subs	r1, #1
 80077e6:	2a00      	cmp	r2, #0
 80077e8:	d1ef      	bne.n	80077ca <_svfiprintf_r+0x74e>
 80077ea:	9009      	str	r0, [sp, #36]	; 0x24
 80077ec:	e526      	b.n	800723c <_svfiprintf_r+0x1c0>
 80077ee:	9905      	ldr	r1, [sp, #20]
 80077f0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80077f4:	bf14      	ite	ne
 80077f6:	880b      	ldrhne	r3, [r1, #0]
 80077f8:	680b      	ldreq	r3, [r1, #0]
 80077fa:	2201      	movs	r2, #1
 80077fc:	9805      	ldr	r0, [sp, #20]
 80077fe:	1c19      	adds	r1, r3, #0
 8007800:	bf18      	it	ne
 8007802:	2101      	movne	r1, #1
 8007804:	3004      	adds	r0, #4
 8007806:	9005      	str	r0, [sp, #20]
 8007808:	e4f4      	b.n	80071f4 <_svfiprintf_r+0x178>
 800780a:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 800780e:	bf0b      	itete	eq
 8007810:	9a05      	ldreq	r2, [sp, #20]
 8007812:	9905      	ldrne	r1, [sp, #20]
 8007814:	6813      	ldreq	r3, [r2, #0]
 8007816:	880b      	ldrhne	r3, [r1, #0]
 8007818:	bf08      	it	eq
 800781a:	460a      	moveq	r2, r1
 800781c:	e7ee      	b.n	80077fc <_svfiprintf_r+0x780>
 800781e:	2202      	movs	r2, #2
 8007820:	e4e8      	b.n	80071f4 <_svfiprintf_r+0x178>
 8007822:	9807      	ldr	r0, [sp, #28]
 8007824:	4651      	mov	r1, sl
 8007826:	4642      	mov	r2, r8
 8007828:	f7ff fba8 	bl	8006f7c <__ssprint_r>
 800782c:	2800      	cmp	r0, #0
 800782e:	f47f af31 	bne.w	8007694 <_svfiprintf_r+0x618>
 8007832:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8007834:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007836:	ac0e      	add	r4, sp, #56	; 0x38
 8007838:	e669      	b.n	800750e <_svfiprintf_r+0x492>
 800783a:	9a05      	ldr	r2, [sp, #20]
 800783c:	6815      	ldr	r5, [r2, #0]
 800783e:	3204      	adds	r2, #4
 8007840:	2d00      	cmp	r5, #0
 8007842:	bfbc      	itt	lt
 8007844:	9205      	strlt	r2, [sp, #20]
 8007846:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800784a:	f6ff ac60 	blt.w	800710e <_svfiprintf_r+0x92>
 800784e:	9205      	str	r2, [sp, #20]
 8007850:	e45d      	b.n	800710e <_svfiprintf_r+0x92>
 8007852:	bf00      	nop
 8007854:	08008c58 	.word	0x08008c58
 8007858:	08008c68 	.word	0x08008c68
 800785c:	9807      	ldr	r0, [sp, #28]
 800785e:	4651      	mov	r1, sl
 8007860:	4642      	mov	r2, r8
 8007862:	f7ff fb8b 	bl	8006f7c <__ssprint_r>
 8007866:	2800      	cmp	r0, #0
 8007868:	f47f af14 	bne.w	8007694 <_svfiprintf_r+0x618>
 800786c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800786e:	e6e9      	b.n	8007644 <_svfiprintf_r+0x5c8>
 8007870:	2930      	cmp	r1, #48	; 0x30
 8007872:	d004      	beq.n	800787e <_svfiprintf_r+0x802>
 8007874:	1e93      	subs	r3, r2, #2
 8007876:	9309      	str	r3, [sp, #36]	; 0x24
 8007878:	2330      	movs	r3, #48	; 0x30
 800787a:	f802 3c02 	strb.w	r3, [r2, #-2]
 800787e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007880:	ebc3 0308 	rsb	r3, r3, r8
 8007884:	9303      	str	r3, [sp, #12]
 8007886:	e4dc      	b.n	8007242 <_svfiprintf_r+0x1c6>
 8007888:	9805      	ldr	r0, [sp, #20]
 800788a:	9904      	ldr	r1, [sp, #16]
 800788c:	6803      	ldr	r3, [r0, #0]
 800788e:	3004      	adds	r0, #4
 8007890:	9005      	str	r0, [sp, #20]
 8007892:	6019      	str	r1, [r3, #0]
 8007894:	e411      	b.n	80070ba <_svfiprintf_r+0x3e>
 8007896:	9a05      	ldr	r2, [sp, #20]
 8007898:	6813      	ldr	r3, [r2, #0]
 800789a:	3204      	adds	r2, #4
 800789c:	9205      	str	r2, [sp, #20]
 800789e:	e54e      	b.n	800733e <_svfiprintf_r+0x2c2>
 80078a0:	9905      	ldr	r1, [sp, #20]
 80078a2:	880b      	ldrh	r3, [r1, #0]
 80078a4:	3104      	adds	r1, #4
 80078a6:	9105      	str	r1, [sp, #20]
 80078a8:	e52b      	b.n	8007302 <_svfiprintf_r+0x286>
 80078aa:	f7ff fb37 	bl	8006f1c <strlen>
 80078ae:	9608      	str	r6, [sp, #32]
 80078b0:	9003      	str	r0, [sp, #12]
 80078b2:	e4c7      	b.n	8007244 <_svfiprintf_r+0x1c8>
 80078b4:	9807      	ldr	r0, [sp, #28]
 80078b6:	4651      	mov	r1, sl
 80078b8:	4642      	mov	r2, r8
 80078ba:	f7ff fb5f 	bl	8006f7c <__ssprint_r>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f47f aee8 	bne.w	8007694 <_svfiprintf_r+0x618>
 80078c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80078c6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80078c8:	ac0e      	add	r4, sp, #56	; 0x38
 80078ca:	e642      	b.n	8007552 <_svfiprintf_r+0x4d6>
 80078cc:	9905      	ldr	r1, [sp, #20]
 80078ce:	9a04      	ldr	r2, [sp, #16]
 80078d0:	680b      	ldr	r3, [r1, #0]
 80078d2:	3104      	adds	r1, #4
 80078d4:	9105      	str	r1, [sp, #20]
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	f7ff bbef 	b.w	80070ba <_svfiprintf_r+0x3e>
 80078dc:	2140      	movs	r1, #64	; 0x40
 80078de:	9200      	str	r2, [sp, #0]
 80078e0:	f7fe fa56 	bl	8005d90 <_malloc_r>
 80078e4:	9a00      	ldr	r2, [sp, #0]
 80078e6:	f8ca 0000 	str.w	r0, [sl]
 80078ea:	f8ca 0010 	str.w	r0, [sl, #16]
 80078ee:	b188      	cbz	r0, 8007914 <_svfiprintf_r+0x898>
 80078f0:	2340      	movs	r3, #64	; 0x40
 80078f2:	f8ca 3014 	str.w	r3, [sl, #20]
 80078f6:	f7ff bbcf 	b.w	8007098 <_svfiprintf_r+0x1c>
 80078fa:	2d06      	cmp	r5, #6
 80078fc:	bf28      	it	cs
 80078fe:	2506      	movcs	r5, #6
 8007900:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8007904:	9302      	str	r3, [sp, #8]
 8007906:	4b07      	ldr	r3, [pc, #28]	; (8007924 <_svfiprintf_r+0x8a8>)
 8007908:	9503      	str	r5, [sp, #12]
 800790a:	9309      	str	r3, [sp, #36]	; 0x24
 800790c:	e52e      	b.n	800736c <_svfiprintf_r+0x2f0>
 800790e:	9503      	str	r5, [sp, #12]
 8007910:	9008      	str	r0, [sp, #32]
 8007912:	e497      	b.n	8007244 <_svfiprintf_r+0x1c8>
 8007914:	9807      	ldr	r0, [sp, #28]
 8007916:	230c      	movs	r3, #12
 8007918:	6003      	str	r3, [r0, #0]
 800791a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800791e:	9304      	str	r3, [sp, #16]
 8007920:	e6c1      	b.n	80076a6 <_svfiprintf_r+0x62a>
 8007922:	bf00      	nop
 8007924:	08008d04 	.word	0x08008d04

08007928 <_calloc_r>:
 8007928:	b510      	push	{r4, lr}
 800792a:	fb01 f102 	mul.w	r1, r1, r2
 800792e:	f7fe fa2f 	bl	8005d90 <_malloc_r>
 8007932:	4604      	mov	r4, r0
 8007934:	b300      	cbz	r0, 8007978 <_calloc_r+0x50>
 8007936:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800793a:	f022 0203 	bic.w	r2, r2, #3
 800793e:	3a04      	subs	r2, #4
 8007940:	2a24      	cmp	r2, #36	; 0x24
 8007942:	d81b      	bhi.n	800797c <_calloc_r+0x54>
 8007944:	2a13      	cmp	r2, #19
 8007946:	bf98      	it	ls
 8007948:	4602      	movls	r2, r0
 800794a:	d911      	bls.n	8007970 <_calloc_r+0x48>
 800794c:	2300      	movs	r3, #0
 800794e:	2a1b      	cmp	r2, #27
 8007950:	6003      	str	r3, [r0, #0]
 8007952:	6043      	str	r3, [r0, #4]
 8007954:	bf98      	it	ls
 8007956:	f100 0208 	addls.w	r2, r0, #8
 800795a:	d909      	bls.n	8007970 <_calloc_r+0x48>
 800795c:	2a24      	cmp	r2, #36	; 0x24
 800795e:	6083      	str	r3, [r0, #8]
 8007960:	60c3      	str	r3, [r0, #12]
 8007962:	bf11      	iteee	ne
 8007964:	f100 0210 	addne.w	r2, r0, #16
 8007968:	6103      	streq	r3, [r0, #16]
 800796a:	6143      	streq	r3, [r0, #20]
 800796c:	f100 0218 	addeq.w	r2, r0, #24
 8007970:	2300      	movs	r3, #0
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	6053      	str	r3, [r2, #4]
 8007976:	6093      	str	r3, [r2, #8]
 8007978:	4620      	mov	r0, r4
 800797a:	bd10      	pop	{r4, pc}
 800797c:	2100      	movs	r1, #0
 800797e:	f000 f85b 	bl	8007a38 <memset>
 8007982:	4620      	mov	r0, r4
 8007984:	bd10      	pop	{r4, pc}
 8007986:	bf00      	nop

08007988 <memmove>:
 8007988:	4288      	cmp	r0, r1
 800798a:	b4f0      	push	{r4, r5, r6, r7}
 800798c:	d912      	bls.n	80079b4 <memmove+0x2c>
 800798e:	188d      	adds	r5, r1, r2
 8007990:	42a8      	cmp	r0, r5
 8007992:	d20f      	bcs.n	80079b4 <memmove+0x2c>
 8007994:	b162      	cbz	r2, 80079b0 <memmove+0x28>
 8007996:	4251      	negs	r1, r2
 8007998:	4613      	mov	r3, r2
 800799a:	1882      	adds	r2, r0, r2
 800799c:	186d      	adds	r5, r5, r1
 800799e:	1852      	adds	r2, r2, r1
 80079a0:	18ec      	adds	r4, r5, r3
 80079a2:	18d1      	adds	r1, r2, r3
 80079a4:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	f801 4c01 	strb.w	r4, [r1, #-1]
 80079ae:	d1f7      	bne.n	80079a0 <memmove+0x18>
 80079b0:	bcf0      	pop	{r4, r5, r6, r7}
 80079b2:	4770      	bx	lr
 80079b4:	2a0f      	cmp	r2, #15
 80079b6:	bf98      	it	ls
 80079b8:	4603      	movls	r3, r0
 80079ba:	d931      	bls.n	8007a20 <memmove+0x98>
 80079bc:	ea41 0300 	orr.w	r3, r1, r0
 80079c0:	079b      	lsls	r3, r3, #30
 80079c2:	d137      	bne.n	8007a34 <memmove+0xac>
 80079c4:	460c      	mov	r4, r1
 80079c6:	4603      	mov	r3, r0
 80079c8:	4615      	mov	r5, r2
 80079ca:	6826      	ldr	r6, [r4, #0]
 80079cc:	601e      	str	r6, [r3, #0]
 80079ce:	6866      	ldr	r6, [r4, #4]
 80079d0:	605e      	str	r6, [r3, #4]
 80079d2:	68a6      	ldr	r6, [r4, #8]
 80079d4:	609e      	str	r6, [r3, #8]
 80079d6:	68e6      	ldr	r6, [r4, #12]
 80079d8:	3d10      	subs	r5, #16
 80079da:	60de      	str	r6, [r3, #12]
 80079dc:	3410      	adds	r4, #16
 80079de:	3310      	adds	r3, #16
 80079e0:	2d0f      	cmp	r5, #15
 80079e2:	d8f2      	bhi.n	80079ca <memmove+0x42>
 80079e4:	f1a2 0410 	sub.w	r4, r2, #16
 80079e8:	f024 040f 	bic.w	r4, r4, #15
 80079ec:	f002 020f 	and.w	r2, r2, #15
 80079f0:	3410      	adds	r4, #16
 80079f2:	2a03      	cmp	r2, #3
 80079f4:	eb00 0304 	add.w	r3, r0, r4
 80079f8:	4421      	add	r1, r4
 80079fa:	d911      	bls.n	8007a20 <memmove+0x98>
 80079fc:	1f0e      	subs	r6, r1, #4
 80079fe:	461d      	mov	r5, r3
 8007a00:	4614      	mov	r4, r2
 8007a02:	f856 7f04 	ldr.w	r7, [r6, #4]!
 8007a06:	3c04      	subs	r4, #4
 8007a08:	2c03      	cmp	r4, #3
 8007a0a:	f845 7b04 	str.w	r7, [r5], #4
 8007a0e:	d8f8      	bhi.n	8007a02 <memmove+0x7a>
 8007a10:	1f14      	subs	r4, r2, #4
 8007a12:	f024 0403 	bic.w	r4, r4, #3
 8007a16:	3404      	adds	r4, #4
 8007a18:	f002 0203 	and.w	r2, r2, #3
 8007a1c:	1909      	adds	r1, r1, r4
 8007a1e:	191b      	adds	r3, r3, r4
 8007a20:	2a00      	cmp	r2, #0
 8007a22:	d0c5      	beq.n	80079b0 <memmove+0x28>
 8007a24:	3901      	subs	r1, #1
 8007a26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a2a:	3a01      	subs	r2, #1
 8007a2c:	f803 4b01 	strb.w	r4, [r3], #1
 8007a30:	d1f9      	bne.n	8007a26 <memmove+0x9e>
 8007a32:	e7bd      	b.n	80079b0 <memmove+0x28>
 8007a34:	4603      	mov	r3, r0
 8007a36:	e7f5      	b.n	8007a24 <memmove+0x9c>

08007a38 <memset>:
 8007a38:	f010 0f03 	tst.w	r0, #3
 8007a3c:	b470      	push	{r4, r5, r6}
 8007a3e:	4603      	mov	r3, r0
 8007a40:	d042      	beq.n	8007ac8 <memset+0x90>
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d03e      	beq.n	8007ac4 <memset+0x8c>
 8007a46:	3a01      	subs	r2, #1
 8007a48:	b2cd      	uxtb	r5, r1
 8007a4a:	e003      	b.n	8007a54 <memset+0x1c>
 8007a4c:	1e54      	subs	r4, r2, #1
 8007a4e:	2a00      	cmp	r2, #0
 8007a50:	d038      	beq.n	8007ac4 <memset+0x8c>
 8007a52:	4622      	mov	r2, r4
 8007a54:	f803 5b01 	strb.w	r5, [r3], #1
 8007a58:	f013 0f03 	tst.w	r3, #3
 8007a5c:	461c      	mov	r4, r3
 8007a5e:	d1f5      	bne.n	8007a4c <memset+0x14>
 8007a60:	2a03      	cmp	r2, #3
 8007a62:	d929      	bls.n	8007ab8 <memset+0x80>
 8007a64:	b2cd      	uxtb	r5, r1
 8007a66:	2a0f      	cmp	r2, #15
 8007a68:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007a6c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007a70:	bf84      	itt	hi
 8007a72:	4623      	movhi	r3, r4
 8007a74:	4616      	movhi	r6, r2
 8007a76:	d911      	bls.n	8007a9c <memset+0x64>
 8007a78:	3e10      	subs	r6, #16
 8007a7a:	601d      	str	r5, [r3, #0]
 8007a7c:	605d      	str	r5, [r3, #4]
 8007a7e:	609d      	str	r5, [r3, #8]
 8007a80:	60dd      	str	r5, [r3, #12]
 8007a82:	3310      	adds	r3, #16
 8007a84:	2e0f      	cmp	r6, #15
 8007a86:	d8f7      	bhi.n	8007a78 <memset+0x40>
 8007a88:	f1a2 0310 	sub.w	r3, r2, #16
 8007a8c:	f023 030f 	bic.w	r3, r3, #15
 8007a90:	f002 020f 	and.w	r2, r2, #15
 8007a94:	3310      	adds	r3, #16
 8007a96:	2a03      	cmp	r2, #3
 8007a98:	441c      	add	r4, r3
 8007a9a:	d90d      	bls.n	8007ab8 <memset+0x80>
 8007a9c:	4626      	mov	r6, r4
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	3b04      	subs	r3, #4
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	f846 5b04 	str.w	r5, [r6], #4
 8007aa8:	d8fa      	bhi.n	8007aa0 <memset+0x68>
 8007aaa:	1f13      	subs	r3, r2, #4
 8007aac:	f023 0303 	bic.w	r3, r3, #3
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	f002 0203 	and.w	r2, r2, #3
 8007ab6:	18e4      	adds	r4, r4, r3
 8007ab8:	b2c9      	uxtb	r1, r1
 8007aba:	b11a      	cbz	r2, 8007ac4 <memset+0x8c>
 8007abc:	3a01      	subs	r2, #1
 8007abe:	f804 1b01 	strb.w	r1, [r4], #1
 8007ac2:	d1fb      	bne.n	8007abc <memset+0x84>
 8007ac4:	bc70      	pop	{r4, r5, r6}
 8007ac6:	4770      	bx	lr
 8007ac8:	4604      	mov	r4, r0
 8007aca:	e7c9      	b.n	8007a60 <memset+0x28>

08007acc <_realloc_r>:
 8007acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	4690      	mov	r8, r2
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	f000 80fe 	beq.w	8007cda <_realloc_r+0x20e>
 8007ade:	f108 050b 	add.w	r5, r8, #11
 8007ae2:	f7fe fc8b 	bl	80063fc <__malloc_lock>
 8007ae6:	2d16      	cmp	r5, #22
 8007ae8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007aec:	d87d      	bhi.n	8007bea <_realloc_r+0x11e>
 8007aee:	2210      	movs	r2, #16
 8007af0:	2600      	movs	r6, #0
 8007af2:	4615      	mov	r5, r2
 8007af4:	4545      	cmp	r5, r8
 8007af6:	bf38      	it	cc
 8007af8:	f046 0601 	orrcc.w	r6, r6, #1
 8007afc:	2e00      	cmp	r6, #0
 8007afe:	f040 80f2 	bne.w	8007ce6 <_realloc_r+0x21a>
 8007b02:	f021 0a03 	bic.w	sl, r1, #3
 8007b06:	4592      	cmp	sl, r2
 8007b08:	f1a4 0b08 	sub.w	fp, r4, #8
 8007b0c:	bfa8      	it	ge
 8007b0e:	4656      	movge	r6, sl
 8007b10:	da55      	bge.n	8007bbe <_realloc_r+0xf2>
 8007b12:	4ba0      	ldr	r3, [pc, #640]	; (8007d94 <_realloc_r+0x2c8>)
 8007b14:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007b18:	eb0b 000a 	add.w	r0, fp, sl
 8007b1c:	4584      	cmp	ip, r0
 8007b1e:	f000 80e7 	beq.w	8007cf0 <_realloc_r+0x224>
 8007b22:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8007b26:	f02e 0901 	bic.w	r9, lr, #1
 8007b2a:	4481      	add	r9, r0
 8007b2c:	f8d9 9004 	ldr.w	r9, [r9, #4]
 8007b30:	f019 0f01 	tst.w	r9, #1
 8007b34:	bf1c      	itt	ne
 8007b36:	46b6      	movne	lr, r6
 8007b38:	4670      	movne	r0, lr
 8007b3a:	d05b      	beq.n	8007bf4 <_realloc_r+0x128>
 8007b3c:	07c9      	lsls	r1, r1, #31
 8007b3e:	d479      	bmi.n	8007c34 <_realloc_r+0x168>
 8007b40:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8007b44:	ebc1 090b 	rsb	r9, r1, fp
 8007b48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b4c:	f021 0103 	bic.w	r1, r1, #3
 8007b50:	2800      	cmp	r0, #0
 8007b52:	f000 8097 	beq.w	8007c84 <_realloc_r+0x1b8>
 8007b56:	4560      	cmp	r0, ip
 8007b58:	eb01 0c0a 	add.w	ip, r1, sl
 8007b5c:	eb0e 060c 	add.w	r6, lr, ip
 8007b60:	f000 811a 	beq.w	8007d98 <_realloc_r+0x2cc>
 8007b64:	42b2      	cmp	r2, r6
 8007b66:	f300 808f 	bgt.w	8007c88 <_realloc_r+0x1bc>
 8007b6a:	68c3      	ldr	r3, [r0, #12]
 8007b6c:	6882      	ldr	r2, [r0, #8]
 8007b6e:	46c8      	mov	r8, r9
 8007b70:	609a      	str	r2, [r3, #8]
 8007b72:	60d3      	str	r3, [r2, #12]
 8007b74:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007b78:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8007b7c:	f1aa 0204 	sub.w	r2, sl, #4
 8007b80:	2a24      	cmp	r2, #36	; 0x24
 8007b82:	60cb      	str	r3, [r1, #12]
 8007b84:	6099      	str	r1, [r3, #8]
 8007b86:	f200 8144 	bhi.w	8007e12 <_realloc_r+0x346>
 8007b8a:	2a13      	cmp	r2, #19
 8007b8c:	bf98      	it	ls
 8007b8e:	4643      	movls	r3, r8
 8007b90:	d90b      	bls.n	8007baa <_realloc_r+0xde>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	f8c9 3008 	str.w	r3, [r9, #8]
 8007b98:	6863      	ldr	r3, [r4, #4]
 8007b9a:	2a1b      	cmp	r2, #27
 8007b9c:	f8c9 300c 	str.w	r3, [r9, #12]
 8007ba0:	f200 8140 	bhi.w	8007e24 <_realloc_r+0x358>
 8007ba4:	f109 0310 	add.w	r3, r9, #16
 8007ba8:	3408      	adds	r4, #8
 8007baa:	6822      	ldr	r2, [r4, #0]
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	6862      	ldr	r2, [r4, #4]
 8007bb0:	605a      	str	r2, [r3, #4]
 8007bb2:	68a2      	ldr	r2, [r4, #8]
 8007bb4:	609a      	str	r2, [r3, #8]
 8007bb6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bba:	4644      	mov	r4, r8
 8007bbc:	46cb      	mov	fp, r9
 8007bbe:	1b72      	subs	r2, r6, r5
 8007bc0:	2a0f      	cmp	r2, #15
 8007bc2:	d822      	bhi.n	8007c0a <_realloc_r+0x13e>
 8007bc4:	f001 0101 	and.w	r1, r1, #1
 8007bc8:	eb0b 0306 	add.w	r3, fp, r6
 8007bcc:	430e      	orrs	r6, r1
 8007bce:	f8cb 6004 	str.w	r6, [fp, #4]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	f042 0201 	orr.w	r2, r2, #1
 8007bd8:	605a      	str	r2, [r3, #4]
 8007bda:	4638      	mov	r0, r7
 8007bdc:	f7fe fc10 	bl	8006400 <__malloc_unlock>
 8007be0:	46a0      	mov	r8, r4
 8007be2:	4640      	mov	r0, r8
 8007be4:	b003      	add	sp, #12
 8007be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bea:	f025 0507 	bic.w	r5, r5, #7
 8007bee:	462a      	mov	r2, r5
 8007bf0:	0fee      	lsrs	r6, r5, #31
 8007bf2:	e77f      	b.n	8007af4 <_realloc_r+0x28>
 8007bf4:	f02e 0e03 	bic.w	lr, lr, #3
 8007bf8:	eb0e 060a 	add.w	r6, lr, sl
 8007bfc:	42b2      	cmp	r2, r6
 8007bfe:	dc9d      	bgt.n	8007b3c <_realloc_r+0x70>
 8007c00:	68c3      	ldr	r3, [r0, #12]
 8007c02:	6882      	ldr	r2, [r0, #8]
 8007c04:	60d3      	str	r3, [r2, #12]
 8007c06:	609a      	str	r2, [r3, #8]
 8007c08:	e7d9      	b.n	8007bbe <_realloc_r+0xf2>
 8007c0a:	eb0b 0305 	add.w	r3, fp, r5
 8007c0e:	f001 0101 	and.w	r1, r1, #1
 8007c12:	1898      	adds	r0, r3, r2
 8007c14:	430d      	orrs	r5, r1
 8007c16:	f042 0201 	orr.w	r2, r2, #1
 8007c1a:	f8cb 5004 	str.w	r5, [fp, #4]
 8007c1e:	605a      	str	r2, [r3, #4]
 8007c20:	6842      	ldr	r2, [r0, #4]
 8007c22:	f042 0201 	orr.w	r2, r2, #1
 8007c26:	6042      	str	r2, [r0, #4]
 8007c28:	f103 0108 	add.w	r1, r3, #8
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	f7fd ffa3 	bl	8005b78 <_free_r>
 8007c32:	e7d2      	b.n	8007bda <_realloc_r+0x10e>
 8007c34:	4641      	mov	r1, r8
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7fe f8aa 	bl	8005d90 <_malloc_r>
 8007c3c:	4680      	mov	r8, r0
 8007c3e:	b1e8      	cbz	r0, 8007c7c <_realloc_r+0x1b0>
 8007c40:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007c44:	f021 0301 	bic.w	r3, r1, #1
 8007c48:	f1a0 0208 	sub.w	r2, r0, #8
 8007c4c:	445b      	add	r3, fp
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	f000 80d9 	beq.w	8007e06 <_realloc_r+0x33a>
 8007c54:	f1aa 0204 	sub.w	r2, sl, #4
 8007c58:	2a24      	cmp	r2, #36	; 0x24
 8007c5a:	f200 8096 	bhi.w	8007d8a <_realloc_r+0x2be>
 8007c5e:	2a13      	cmp	r2, #19
 8007c60:	bf9c      	itt	ls
 8007c62:	4603      	movls	r3, r0
 8007c64:	4622      	movls	r2, r4
 8007c66:	d863      	bhi.n	8007d30 <_realloc_r+0x264>
 8007c68:	6811      	ldr	r1, [r2, #0]
 8007c6a:	6019      	str	r1, [r3, #0]
 8007c6c:	6851      	ldr	r1, [r2, #4]
 8007c6e:	6059      	str	r1, [r3, #4]
 8007c70:	6892      	ldr	r2, [r2, #8]
 8007c72:	609a      	str	r2, [r3, #8]
 8007c74:	4638      	mov	r0, r7
 8007c76:	4621      	mov	r1, r4
 8007c78:	f7fd ff7e 	bl	8005b78 <_free_r>
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	f7fe fbbf 	bl	8006400 <__malloc_unlock>
 8007c82:	e7ae      	b.n	8007be2 <_realloc_r+0x116>
 8007c84:	eb01 0c0a 	add.w	ip, r1, sl
 8007c88:	4562      	cmp	r2, ip
 8007c8a:	dcd3      	bgt.n	8007c34 <_realloc_r+0x168>
 8007c8c:	464e      	mov	r6, r9
 8007c8e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007c92:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8007c96:	f1aa 0204 	sub.w	r2, sl, #4
 8007c9a:	2a24      	cmp	r2, #36	; 0x24
 8007c9c:	60cb      	str	r3, [r1, #12]
 8007c9e:	6099      	str	r1, [r3, #8]
 8007ca0:	d865      	bhi.n	8007d6e <_realloc_r+0x2a2>
 8007ca2:	2a13      	cmp	r2, #19
 8007ca4:	bf98      	it	ls
 8007ca6:	4633      	movls	r3, r6
 8007ca8:	d90b      	bls.n	8007cc2 <_realloc_r+0x1f6>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	f8c9 3008 	str.w	r3, [r9, #8]
 8007cb0:	6863      	ldr	r3, [r4, #4]
 8007cb2:	2a1b      	cmp	r2, #27
 8007cb4:	f8c9 300c 	str.w	r3, [r9, #12]
 8007cb8:	f200 80c0 	bhi.w	8007e3c <_realloc_r+0x370>
 8007cbc:	f109 0310 	add.w	r3, r9, #16
 8007cc0:	3408      	adds	r4, #8
 8007cc2:	6822      	ldr	r2, [r4, #0]
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	6862      	ldr	r2, [r4, #4]
 8007cc8:	605a      	str	r2, [r3, #4]
 8007cca:	68a2      	ldr	r2, [r4, #8]
 8007ccc:	609a      	str	r2, [r3, #8]
 8007cce:	4634      	mov	r4, r6
 8007cd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007cd4:	4666      	mov	r6, ip
 8007cd6:	46cb      	mov	fp, r9
 8007cd8:	e771      	b.n	8007bbe <_realloc_r+0xf2>
 8007cda:	4611      	mov	r1, r2
 8007cdc:	b003      	add	sp, #12
 8007cde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce2:	f7fe b855 	b.w	8005d90 <_malloc_r>
 8007ce6:	230c      	movs	r3, #12
 8007ce8:	603b      	str	r3, [r7, #0]
 8007cea:	f04f 0800 	mov.w	r8, #0
 8007cee:	e778      	b.n	8007be2 <_realloc_r+0x116>
 8007cf0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007cf4:	f026 0e03 	bic.w	lr, r6, #3
 8007cf8:	eb0e 000a 	add.w	r0, lr, sl
 8007cfc:	f105 0610 	add.w	r6, r5, #16
 8007d00:	42b0      	cmp	r0, r6
 8007d02:	bfb8      	it	lt
 8007d04:	4660      	movlt	r0, ip
 8007d06:	f6ff af19 	blt.w	8007b3c <_realloc_r+0x70>
 8007d0a:	eb0b 0205 	add.w	r2, fp, r5
 8007d0e:	1b41      	subs	r1, r0, r5
 8007d10:	f041 0101 	orr.w	r1, r1, #1
 8007d14:	6051      	str	r1, [r2, #4]
 8007d16:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8007d1a:	609a      	str	r2, [r3, #8]
 8007d1c:	f001 0301 	and.w	r3, r1, #1
 8007d20:	431d      	orrs	r5, r3
 8007d22:	f844 5c04 	str.w	r5, [r4, #-4]
 8007d26:	4638      	mov	r0, r7
 8007d28:	f7fe fb6a 	bl	8006400 <__malloc_unlock>
 8007d2c:	46a0      	mov	r8, r4
 8007d2e:	e758      	b.n	8007be2 <_realloc_r+0x116>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	6003      	str	r3, [r0, #0]
 8007d34:	6863      	ldr	r3, [r4, #4]
 8007d36:	2a1b      	cmp	r2, #27
 8007d38:	6043      	str	r3, [r0, #4]
 8007d3a:	bf9c      	itt	ls
 8007d3c:	f104 0208 	addls.w	r2, r4, #8
 8007d40:	f100 0308 	addls.w	r3, r0, #8
 8007d44:	d990      	bls.n	8007c68 <_realloc_r+0x19c>
 8007d46:	68a3      	ldr	r3, [r4, #8]
 8007d48:	6083      	str	r3, [r0, #8]
 8007d4a:	68e3      	ldr	r3, [r4, #12]
 8007d4c:	2a24      	cmp	r2, #36	; 0x24
 8007d4e:	60c3      	str	r3, [r0, #12]
 8007d50:	bf03      	ittte	eq
 8007d52:	6923      	ldreq	r3, [r4, #16]
 8007d54:	6103      	streq	r3, [r0, #16]
 8007d56:	6962      	ldreq	r2, [r4, #20]
 8007d58:	f100 0310 	addne.w	r3, r0, #16
 8007d5c:	bf09      	itett	eq
 8007d5e:	6142      	streq	r2, [r0, #20]
 8007d60:	f104 0210 	addne.w	r2, r4, #16
 8007d64:	f100 0318 	addeq.w	r3, r0, #24
 8007d68:	f104 0218 	addeq.w	r2, r4, #24
 8007d6c:	e77c      	b.n	8007c68 <_realloc_r+0x19c>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4630      	mov	r0, r6
 8007d72:	f8cd c004 	str.w	ip, [sp, #4]
 8007d76:	f7ff fe07 	bl	8007988 <memmove>
 8007d7a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007d7e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d82:	4634      	mov	r4, r6
 8007d84:	46cb      	mov	fp, r9
 8007d86:	4666      	mov	r6, ip
 8007d88:	e719      	b.n	8007bbe <_realloc_r+0xf2>
 8007d8a:	4621      	mov	r1, r4
 8007d8c:	f7ff fdfc 	bl	8007988 <memmove>
 8007d90:	e770      	b.n	8007c74 <_realloc_r+0x1a8>
 8007d92:	bf00      	nop
 8007d94:	2000057c 	.word	0x2000057c
 8007d98:	f105 0110 	add.w	r1, r5, #16
 8007d9c:	428e      	cmp	r6, r1
 8007d9e:	f6ff af73 	blt.w	8007c88 <_realloc_r+0x1bc>
 8007da2:	46c8      	mov	r8, r9
 8007da4:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8007da8:	f858 0f08 	ldr.w	r0, [r8, #8]!
 8007dac:	f1aa 0204 	sub.w	r2, sl, #4
 8007db0:	2a24      	cmp	r2, #36	; 0x24
 8007db2:	60c1      	str	r1, [r0, #12]
 8007db4:	6088      	str	r0, [r1, #8]
 8007db6:	d861      	bhi.n	8007e7c <_realloc_r+0x3b0>
 8007db8:	2a13      	cmp	r2, #19
 8007dba:	bf98      	it	ls
 8007dbc:	4642      	movls	r2, r8
 8007dbe:	d90a      	bls.n	8007dd6 <_realloc_r+0x30a>
 8007dc0:	6821      	ldr	r1, [r4, #0]
 8007dc2:	f8c9 1008 	str.w	r1, [r9, #8]
 8007dc6:	6861      	ldr	r1, [r4, #4]
 8007dc8:	2a1b      	cmp	r2, #27
 8007dca:	f8c9 100c 	str.w	r1, [r9, #12]
 8007dce:	d85c      	bhi.n	8007e8a <_realloc_r+0x3be>
 8007dd0:	f109 0210 	add.w	r2, r9, #16
 8007dd4:	3408      	adds	r4, #8
 8007dd6:	6821      	ldr	r1, [r4, #0]
 8007dd8:	6011      	str	r1, [r2, #0]
 8007dda:	6861      	ldr	r1, [r4, #4]
 8007ddc:	6051      	str	r1, [r2, #4]
 8007dde:	68a1      	ldr	r1, [r4, #8]
 8007de0:	6091      	str	r1, [r2, #8]
 8007de2:	eb09 0205 	add.w	r2, r9, r5
 8007de6:	1b71      	subs	r1, r6, r5
 8007de8:	f041 0101 	orr.w	r1, r1, #1
 8007dec:	6051      	str	r1, [r2, #4]
 8007dee:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007df2:	609a      	str	r2, [r3, #8]
 8007df4:	f001 0301 	and.w	r3, r1, #1
 8007df8:	431d      	orrs	r5, r3
 8007dfa:	f8c9 5004 	str.w	r5, [r9, #4]
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f7fe fafe 	bl	8006400 <__malloc_unlock>
 8007e04:	e6ed      	b.n	8007be2 <_realloc_r+0x116>
 8007e06:	f850 6c04 	ldr.w	r6, [r0, #-4]
 8007e0a:	f026 0603 	bic.w	r6, r6, #3
 8007e0e:	4456      	add	r6, sl
 8007e10:	e6d5      	b.n	8007bbe <_realloc_r+0xf2>
 8007e12:	4621      	mov	r1, r4
 8007e14:	4640      	mov	r0, r8
 8007e16:	f7ff fdb7 	bl	8007988 <memmove>
 8007e1a:	4644      	mov	r4, r8
 8007e1c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e20:	46cb      	mov	fp, r9
 8007e22:	e6cc      	b.n	8007bbe <_realloc_r+0xf2>
 8007e24:	68a3      	ldr	r3, [r4, #8]
 8007e26:	f8c9 3010 	str.w	r3, [r9, #16]
 8007e2a:	68e3      	ldr	r3, [r4, #12]
 8007e2c:	2a24      	cmp	r2, #36	; 0x24
 8007e2e:	f8c9 3014 	str.w	r3, [r9, #20]
 8007e32:	d00f      	beq.n	8007e54 <_realloc_r+0x388>
 8007e34:	f109 0318 	add.w	r3, r9, #24
 8007e38:	3410      	adds	r4, #16
 8007e3a:	e6b6      	b.n	8007baa <_realloc_r+0xde>
 8007e3c:	68a3      	ldr	r3, [r4, #8]
 8007e3e:	f8c9 3010 	str.w	r3, [r9, #16]
 8007e42:	68e3      	ldr	r3, [r4, #12]
 8007e44:	2a24      	cmp	r2, #36	; 0x24
 8007e46:	f8c9 3014 	str.w	r3, [r9, #20]
 8007e4a:	d00d      	beq.n	8007e68 <_realloc_r+0x39c>
 8007e4c:	f109 0318 	add.w	r3, r9, #24
 8007e50:	3410      	adds	r4, #16
 8007e52:	e736      	b.n	8007cc2 <_realloc_r+0x1f6>
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	f8c9 3018 	str.w	r3, [r9, #24]
 8007e5a:	6962      	ldr	r2, [r4, #20]
 8007e5c:	f109 0320 	add.w	r3, r9, #32
 8007e60:	f8c9 201c 	str.w	r2, [r9, #28]
 8007e64:	3418      	adds	r4, #24
 8007e66:	e6a0      	b.n	8007baa <_realloc_r+0xde>
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	f8c9 3018 	str.w	r3, [r9, #24]
 8007e6e:	6962      	ldr	r2, [r4, #20]
 8007e70:	f109 0320 	add.w	r3, r9, #32
 8007e74:	f8c9 201c 	str.w	r2, [r9, #28]
 8007e78:	3418      	adds	r4, #24
 8007e7a:	e722      	b.n	8007cc2 <_realloc_r+0x1f6>
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	4621      	mov	r1, r4
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	f7ff fd81 	bl	8007988 <memmove>
 8007e86:	9b01      	ldr	r3, [sp, #4]
 8007e88:	e7ab      	b.n	8007de2 <_realloc_r+0x316>
 8007e8a:	68a1      	ldr	r1, [r4, #8]
 8007e8c:	f8c9 1010 	str.w	r1, [r9, #16]
 8007e90:	68e1      	ldr	r1, [r4, #12]
 8007e92:	2a24      	cmp	r2, #36	; 0x24
 8007e94:	f8c9 1014 	str.w	r1, [r9, #20]
 8007e98:	d003      	beq.n	8007ea2 <_realloc_r+0x3d6>
 8007e9a:	f109 0218 	add.w	r2, r9, #24
 8007e9e:	3410      	adds	r4, #16
 8007ea0:	e799      	b.n	8007dd6 <_realloc_r+0x30a>
 8007ea2:	6922      	ldr	r2, [r4, #16]
 8007ea4:	f8c9 2018 	str.w	r2, [r9, #24]
 8007ea8:	6961      	ldr	r1, [r4, #20]
 8007eaa:	f109 0220 	add.w	r2, r9, #32
 8007eae:	f8c9 101c 	str.w	r1, [r9, #28]
 8007eb2:	3418      	adds	r4, #24
 8007eb4:	e78f      	b.n	8007dd6 <_realloc_r+0x30a>
 8007eb6:	bf00      	nop

08007eb8 <__aeabi_drsub>:
 8007eb8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007ebc:	e002      	b.n	8007ec4 <__adddf3>
 8007ebe:	bf00      	nop

08007ec0 <__aeabi_dsub>:
 8007ec0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007ec4 <__adddf3>:
 8007ec4:	b530      	push	{r4, r5, lr}
 8007ec6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007eca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007ece:	ea94 0f05 	teq	r4, r5
 8007ed2:	bf08      	it	eq
 8007ed4:	ea90 0f02 	teqeq	r0, r2
 8007ed8:	bf1f      	itttt	ne
 8007eda:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007ede:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007ee2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007ee6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007eea:	f000 80e2 	beq.w	80080b2 <__adddf3+0x1ee>
 8007eee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007ef2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007ef6:	bfb8      	it	lt
 8007ef8:	426d      	neglt	r5, r5
 8007efa:	dd0c      	ble.n	8007f16 <__adddf3+0x52>
 8007efc:	442c      	add	r4, r5
 8007efe:	ea80 0202 	eor.w	r2, r0, r2
 8007f02:	ea81 0303 	eor.w	r3, r1, r3
 8007f06:	ea82 0000 	eor.w	r0, r2, r0
 8007f0a:	ea83 0101 	eor.w	r1, r3, r1
 8007f0e:	ea80 0202 	eor.w	r2, r0, r2
 8007f12:	ea81 0303 	eor.w	r3, r1, r3
 8007f16:	2d36      	cmp	r5, #54	; 0x36
 8007f18:	bf88      	it	hi
 8007f1a:	bd30      	pophi	{r4, r5, pc}
 8007f1c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007f20:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007f24:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007f28:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007f2c:	d002      	beq.n	8007f34 <__adddf3+0x70>
 8007f2e:	4240      	negs	r0, r0
 8007f30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007f34:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007f38:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007f3c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007f40:	d002      	beq.n	8007f48 <__adddf3+0x84>
 8007f42:	4252      	negs	r2, r2
 8007f44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007f48:	ea94 0f05 	teq	r4, r5
 8007f4c:	f000 80a7 	beq.w	800809e <__adddf3+0x1da>
 8007f50:	f1a4 0401 	sub.w	r4, r4, #1
 8007f54:	f1d5 0e20 	rsbs	lr, r5, #32
 8007f58:	db0d      	blt.n	8007f76 <__adddf3+0xb2>
 8007f5a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007f5e:	fa22 f205 	lsr.w	r2, r2, r5
 8007f62:	1880      	adds	r0, r0, r2
 8007f64:	f141 0100 	adc.w	r1, r1, #0
 8007f68:	fa03 f20e 	lsl.w	r2, r3, lr
 8007f6c:	1880      	adds	r0, r0, r2
 8007f6e:	fa43 f305 	asr.w	r3, r3, r5
 8007f72:	4159      	adcs	r1, r3
 8007f74:	e00e      	b.n	8007f94 <__adddf3+0xd0>
 8007f76:	f1a5 0520 	sub.w	r5, r5, #32
 8007f7a:	f10e 0e20 	add.w	lr, lr, #32
 8007f7e:	2a01      	cmp	r2, #1
 8007f80:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007f84:	bf28      	it	cs
 8007f86:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007f8a:	fa43 f305 	asr.w	r3, r3, r5
 8007f8e:	18c0      	adds	r0, r0, r3
 8007f90:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007f94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007f98:	d507      	bpl.n	8007faa <__adddf3+0xe6>
 8007f9a:	f04f 0e00 	mov.w	lr, #0
 8007f9e:	f1dc 0c00 	rsbs	ip, ip, #0
 8007fa2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007fa6:	eb6e 0101 	sbc.w	r1, lr, r1
 8007faa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007fae:	d31b      	bcc.n	8007fe8 <__adddf3+0x124>
 8007fb0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007fb4:	d30c      	bcc.n	8007fd0 <__adddf3+0x10c>
 8007fb6:	0849      	lsrs	r1, r1, #1
 8007fb8:	ea5f 0030 	movs.w	r0, r0, rrx
 8007fbc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007fc0:	f104 0401 	add.w	r4, r4, #1
 8007fc4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007fc8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007fcc:	f080 809a 	bcs.w	8008104 <__adddf3+0x240>
 8007fd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007fd4:	bf08      	it	eq
 8007fd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007fda:	f150 0000 	adcs.w	r0, r0, #0
 8007fde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007fe2:	ea41 0105 	orr.w	r1, r1, r5
 8007fe6:	bd30      	pop	{r4, r5, pc}
 8007fe8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007fec:	4140      	adcs	r0, r0
 8007fee:	eb41 0101 	adc.w	r1, r1, r1
 8007ff2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007ff6:	f1a4 0401 	sub.w	r4, r4, #1
 8007ffa:	d1e9      	bne.n	8007fd0 <__adddf3+0x10c>
 8007ffc:	f091 0f00 	teq	r1, #0
 8008000:	bf04      	itt	eq
 8008002:	4601      	moveq	r1, r0
 8008004:	2000      	moveq	r0, #0
 8008006:	fab1 f381 	clz	r3, r1
 800800a:	bf08      	it	eq
 800800c:	3320      	addeq	r3, #32
 800800e:	f1a3 030b 	sub.w	r3, r3, #11
 8008012:	f1b3 0220 	subs.w	r2, r3, #32
 8008016:	da0c      	bge.n	8008032 <__adddf3+0x16e>
 8008018:	320c      	adds	r2, #12
 800801a:	dd08      	ble.n	800802e <__adddf3+0x16a>
 800801c:	f102 0c14 	add.w	ip, r2, #20
 8008020:	f1c2 020c 	rsb	r2, r2, #12
 8008024:	fa01 f00c 	lsl.w	r0, r1, ip
 8008028:	fa21 f102 	lsr.w	r1, r1, r2
 800802c:	e00c      	b.n	8008048 <__adddf3+0x184>
 800802e:	f102 0214 	add.w	r2, r2, #20
 8008032:	bfd8      	it	le
 8008034:	f1c2 0c20 	rsble	ip, r2, #32
 8008038:	fa01 f102 	lsl.w	r1, r1, r2
 800803c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008040:	bfdc      	itt	le
 8008042:	ea41 010c 	orrle.w	r1, r1, ip
 8008046:	4090      	lslle	r0, r2
 8008048:	1ae4      	subs	r4, r4, r3
 800804a:	bfa2      	ittt	ge
 800804c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008050:	4329      	orrge	r1, r5
 8008052:	bd30      	popge	{r4, r5, pc}
 8008054:	ea6f 0404 	mvn.w	r4, r4
 8008058:	3c1f      	subs	r4, #31
 800805a:	da1c      	bge.n	8008096 <__adddf3+0x1d2>
 800805c:	340c      	adds	r4, #12
 800805e:	dc0e      	bgt.n	800807e <__adddf3+0x1ba>
 8008060:	f104 0414 	add.w	r4, r4, #20
 8008064:	f1c4 0220 	rsb	r2, r4, #32
 8008068:	fa20 f004 	lsr.w	r0, r0, r4
 800806c:	fa01 f302 	lsl.w	r3, r1, r2
 8008070:	ea40 0003 	orr.w	r0, r0, r3
 8008074:	fa21 f304 	lsr.w	r3, r1, r4
 8008078:	ea45 0103 	orr.w	r1, r5, r3
 800807c:	bd30      	pop	{r4, r5, pc}
 800807e:	f1c4 040c 	rsb	r4, r4, #12
 8008082:	f1c4 0220 	rsb	r2, r4, #32
 8008086:	fa20 f002 	lsr.w	r0, r0, r2
 800808a:	fa01 f304 	lsl.w	r3, r1, r4
 800808e:	ea40 0003 	orr.w	r0, r0, r3
 8008092:	4629      	mov	r1, r5
 8008094:	bd30      	pop	{r4, r5, pc}
 8008096:	fa21 f004 	lsr.w	r0, r1, r4
 800809a:	4629      	mov	r1, r5
 800809c:	bd30      	pop	{r4, r5, pc}
 800809e:	f094 0f00 	teq	r4, #0
 80080a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80080a6:	bf06      	itte	eq
 80080a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80080ac:	3401      	addeq	r4, #1
 80080ae:	3d01      	subne	r5, #1
 80080b0:	e74e      	b.n	8007f50 <__adddf3+0x8c>
 80080b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80080b6:	bf18      	it	ne
 80080b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80080bc:	d029      	beq.n	8008112 <__adddf3+0x24e>
 80080be:	ea94 0f05 	teq	r4, r5
 80080c2:	bf08      	it	eq
 80080c4:	ea90 0f02 	teqeq	r0, r2
 80080c8:	d005      	beq.n	80080d6 <__adddf3+0x212>
 80080ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80080ce:	bf04      	itt	eq
 80080d0:	4619      	moveq	r1, r3
 80080d2:	4610      	moveq	r0, r2
 80080d4:	bd30      	pop	{r4, r5, pc}
 80080d6:	ea91 0f03 	teq	r1, r3
 80080da:	bf1e      	ittt	ne
 80080dc:	2100      	movne	r1, #0
 80080de:	2000      	movne	r0, #0
 80080e0:	bd30      	popne	{r4, r5, pc}
 80080e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80080e6:	d105      	bne.n	80080f4 <__adddf3+0x230>
 80080e8:	0040      	lsls	r0, r0, #1
 80080ea:	4149      	adcs	r1, r1
 80080ec:	bf28      	it	cs
 80080ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80080f2:	bd30      	pop	{r4, r5, pc}
 80080f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80080f8:	bf3c      	itt	cc
 80080fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80080fe:	bd30      	popcc	{r4, r5, pc}
 8008100:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008104:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008108:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800810c:	f04f 0000 	mov.w	r0, #0
 8008110:	bd30      	pop	{r4, r5, pc}
 8008112:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008116:	bf1a      	itte	ne
 8008118:	4619      	movne	r1, r3
 800811a:	4610      	movne	r0, r2
 800811c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008120:	bf1c      	itt	ne
 8008122:	460b      	movne	r3, r1
 8008124:	4602      	movne	r2, r0
 8008126:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800812a:	bf06      	itte	eq
 800812c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008130:	ea91 0f03 	teqeq	r1, r3
 8008134:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008138:	bd30      	pop	{r4, r5, pc}
 800813a:	bf00      	nop

0800813c <__aeabi_ui2d>:
 800813c:	f090 0f00 	teq	r0, #0
 8008140:	bf04      	itt	eq
 8008142:	2100      	moveq	r1, #0
 8008144:	4770      	bxeq	lr
 8008146:	b530      	push	{r4, r5, lr}
 8008148:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800814c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008150:	f04f 0500 	mov.w	r5, #0
 8008154:	f04f 0100 	mov.w	r1, #0
 8008158:	e750      	b.n	8007ffc <__adddf3+0x138>
 800815a:	bf00      	nop

0800815c <__aeabi_i2d>:
 800815c:	f090 0f00 	teq	r0, #0
 8008160:	bf04      	itt	eq
 8008162:	2100      	moveq	r1, #0
 8008164:	4770      	bxeq	lr
 8008166:	b530      	push	{r4, r5, lr}
 8008168:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800816c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008170:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008174:	bf48      	it	mi
 8008176:	4240      	negmi	r0, r0
 8008178:	f04f 0100 	mov.w	r1, #0
 800817c:	e73e      	b.n	8007ffc <__adddf3+0x138>
 800817e:	bf00      	nop

08008180 <__aeabi_f2d>:
 8008180:	0042      	lsls	r2, r0, #1
 8008182:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008186:	ea4f 0131 	mov.w	r1, r1, rrx
 800818a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800818e:	bf1f      	itttt	ne
 8008190:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008194:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008198:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800819c:	4770      	bxne	lr
 800819e:	f092 0f00 	teq	r2, #0
 80081a2:	bf14      	ite	ne
 80081a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80081a8:	4770      	bxeq	lr
 80081aa:	b530      	push	{r4, r5, lr}
 80081ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80081b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80081b8:	e720      	b.n	8007ffc <__adddf3+0x138>
 80081ba:	bf00      	nop

080081bc <__aeabi_ul2d>:
 80081bc:	ea50 0201 	orrs.w	r2, r0, r1
 80081c0:	bf08      	it	eq
 80081c2:	4770      	bxeq	lr
 80081c4:	b530      	push	{r4, r5, lr}
 80081c6:	f04f 0500 	mov.w	r5, #0
 80081ca:	e00a      	b.n	80081e2 <__aeabi_l2d+0x16>

080081cc <__aeabi_l2d>:
 80081cc:	ea50 0201 	orrs.w	r2, r0, r1
 80081d0:	bf08      	it	eq
 80081d2:	4770      	bxeq	lr
 80081d4:	b530      	push	{r4, r5, lr}
 80081d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80081da:	d502      	bpl.n	80081e2 <__aeabi_l2d+0x16>
 80081dc:	4240      	negs	r0, r0
 80081de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80081e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80081ee:	f43f aedc 	beq.w	8007faa <__adddf3+0xe6>
 80081f2:	f04f 0203 	mov.w	r2, #3
 80081f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80081fa:	bf18      	it	ne
 80081fc:	3203      	addne	r2, #3
 80081fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008202:	bf18      	it	ne
 8008204:	3203      	addne	r2, #3
 8008206:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800820a:	f1c2 0320 	rsb	r3, r2, #32
 800820e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008212:	fa20 f002 	lsr.w	r0, r0, r2
 8008216:	fa01 fe03 	lsl.w	lr, r1, r3
 800821a:	ea40 000e 	orr.w	r0, r0, lr
 800821e:	fa21 f102 	lsr.w	r1, r1, r2
 8008222:	4414      	add	r4, r2
 8008224:	e6c1      	b.n	8007faa <__adddf3+0xe6>
 8008226:	bf00      	nop

08008228 <__aeabi_dmul>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800822e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008236:	bf1d      	ittte	ne
 8008238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800823c:	ea94 0f0c 	teqne	r4, ip
 8008240:	ea95 0f0c 	teqne	r5, ip
 8008244:	f000 f8de 	bleq	8008404 <__aeabi_dmul+0x1dc>
 8008248:	442c      	add	r4, r5
 800824a:	ea81 0603 	eor.w	r6, r1, r3
 800824e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800825a:	bf18      	it	ne
 800825c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008268:	d038      	beq.n	80082dc <__aeabi_dmul+0xb4>
 800826a:	fba0 ce02 	umull	ip, lr, r0, r2
 800826e:	f04f 0500 	mov.w	r5, #0
 8008272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800827a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800827e:	f04f 0600 	mov.w	r6, #0
 8008282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008286:	f09c 0f00 	teq	ip, #0
 800828a:	bf18      	it	ne
 800828c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800829c:	d204      	bcs.n	80082a8 <__aeabi_dmul+0x80>
 800829e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80082a2:	416d      	adcs	r5, r5
 80082a4:	eb46 0606 	adc.w	r6, r6, r6
 80082a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80082ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80082b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80082b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80082b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80082bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80082c0:	bf88      	it	hi
 80082c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80082c6:	d81e      	bhi.n	8008306 <__aeabi_dmul+0xde>
 80082c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80082cc:	bf08      	it	eq
 80082ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80082d2:	f150 0000 	adcs.w	r0, r0, #0
 80082d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80082e0:	ea46 0101 	orr.w	r1, r6, r1
 80082e4:	ea40 0002 	orr.w	r0, r0, r2
 80082e8:	ea81 0103 	eor.w	r1, r1, r3
 80082ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80082f0:	bfc2      	ittt	gt
 80082f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80082f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80082fa:	bd70      	popgt	{r4, r5, r6, pc}
 80082fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008300:	f04f 0e00 	mov.w	lr, #0
 8008304:	3c01      	subs	r4, #1
 8008306:	f300 80ab 	bgt.w	8008460 <__aeabi_dmul+0x238>
 800830a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800830e:	bfde      	ittt	le
 8008310:	2000      	movle	r0, #0
 8008312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008316:	bd70      	pople	{r4, r5, r6, pc}
 8008318:	f1c4 0400 	rsb	r4, r4, #0
 800831c:	3c20      	subs	r4, #32
 800831e:	da35      	bge.n	800838c <__aeabi_dmul+0x164>
 8008320:	340c      	adds	r4, #12
 8008322:	dc1b      	bgt.n	800835c <__aeabi_dmul+0x134>
 8008324:	f104 0414 	add.w	r4, r4, #20
 8008328:	f1c4 0520 	rsb	r5, r4, #32
 800832c:	fa00 f305 	lsl.w	r3, r0, r5
 8008330:	fa20 f004 	lsr.w	r0, r0, r4
 8008334:	fa01 f205 	lsl.w	r2, r1, r5
 8008338:	ea40 0002 	orr.w	r0, r0, r2
 800833c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008348:	fa21 f604 	lsr.w	r6, r1, r4
 800834c:	eb42 0106 	adc.w	r1, r2, r6
 8008350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008354:	bf08      	it	eq
 8008356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800835a:	bd70      	pop	{r4, r5, r6, pc}
 800835c:	f1c4 040c 	rsb	r4, r4, #12
 8008360:	f1c4 0520 	rsb	r5, r4, #32
 8008364:	fa00 f304 	lsl.w	r3, r0, r4
 8008368:	fa20 f005 	lsr.w	r0, r0, r5
 800836c:	fa01 f204 	lsl.w	r2, r1, r4
 8008370:	ea40 0002 	orr.w	r0, r0, r2
 8008374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800837c:	f141 0100 	adc.w	r1, r1, #0
 8008380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008384:	bf08      	it	eq
 8008386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	f1c4 0520 	rsb	r5, r4, #32
 8008390:	fa00 f205 	lsl.w	r2, r0, r5
 8008394:	ea4e 0e02 	orr.w	lr, lr, r2
 8008398:	fa20 f304 	lsr.w	r3, r0, r4
 800839c:	fa01 f205 	lsl.w	r2, r1, r5
 80083a0:	ea43 0302 	orr.w	r3, r3, r2
 80083a4:	fa21 f004 	lsr.w	r0, r1, r4
 80083a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80083ac:	fa21 f204 	lsr.w	r2, r1, r4
 80083b0:	ea20 0002 	bic.w	r0, r0, r2
 80083b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80083b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80083bc:	bf08      	it	eq
 80083be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	f094 0f00 	teq	r4, #0
 80083c8:	d10f      	bne.n	80083ea <__aeabi_dmul+0x1c2>
 80083ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80083ce:	0040      	lsls	r0, r0, #1
 80083d0:	eb41 0101 	adc.w	r1, r1, r1
 80083d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80083d8:	bf08      	it	eq
 80083da:	3c01      	subeq	r4, #1
 80083dc:	d0f7      	beq.n	80083ce <__aeabi_dmul+0x1a6>
 80083de:	ea41 0106 	orr.w	r1, r1, r6
 80083e2:	f095 0f00 	teq	r5, #0
 80083e6:	bf18      	it	ne
 80083e8:	4770      	bxne	lr
 80083ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80083ee:	0052      	lsls	r2, r2, #1
 80083f0:	eb43 0303 	adc.w	r3, r3, r3
 80083f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80083f8:	bf08      	it	eq
 80083fa:	3d01      	subeq	r5, #1
 80083fc:	d0f7      	beq.n	80083ee <__aeabi_dmul+0x1c6>
 80083fe:	ea43 0306 	orr.w	r3, r3, r6
 8008402:	4770      	bx	lr
 8008404:	ea94 0f0c 	teq	r4, ip
 8008408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800840c:	bf18      	it	ne
 800840e:	ea95 0f0c 	teqne	r5, ip
 8008412:	d00c      	beq.n	800842e <__aeabi_dmul+0x206>
 8008414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008418:	bf18      	it	ne
 800841a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800841e:	d1d1      	bne.n	80083c4 <__aeabi_dmul+0x19c>
 8008420:	ea81 0103 	eor.w	r1, r1, r3
 8008424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008428:	f04f 0000 	mov.w	r0, #0
 800842c:	bd70      	pop	{r4, r5, r6, pc}
 800842e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008432:	bf06      	itte	eq
 8008434:	4610      	moveq	r0, r2
 8008436:	4619      	moveq	r1, r3
 8008438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800843c:	d019      	beq.n	8008472 <__aeabi_dmul+0x24a>
 800843e:	ea94 0f0c 	teq	r4, ip
 8008442:	d102      	bne.n	800844a <__aeabi_dmul+0x222>
 8008444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008448:	d113      	bne.n	8008472 <__aeabi_dmul+0x24a>
 800844a:	ea95 0f0c 	teq	r5, ip
 800844e:	d105      	bne.n	800845c <__aeabi_dmul+0x234>
 8008450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008454:	bf1c      	itt	ne
 8008456:	4610      	movne	r0, r2
 8008458:	4619      	movne	r1, r3
 800845a:	d10a      	bne.n	8008472 <__aeabi_dmul+0x24a>
 800845c:	ea81 0103 	eor.w	r1, r1, r3
 8008460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800846c:	f04f 0000 	mov.w	r0, #0
 8008470:	bd70      	pop	{r4, r5, r6, pc}
 8008472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800847a:	bd70      	pop	{r4, r5, r6, pc}

0800847c <__aeabi_ddiv>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008482:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008486:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800848a:	bf1d      	ittte	ne
 800848c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008490:	ea94 0f0c 	teqne	r4, ip
 8008494:	ea95 0f0c 	teqne	r5, ip
 8008498:	f000 f8a7 	bleq	80085ea <__aeabi_ddiv+0x16e>
 800849c:	eba4 0405 	sub.w	r4, r4, r5
 80084a0:	ea81 0e03 	eor.w	lr, r1, r3
 80084a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80084a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80084ac:	f000 8088 	beq.w	80085c0 <__aeabi_ddiv+0x144>
 80084b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80084b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80084b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80084bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80084c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80084c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80084c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80084cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80084d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80084d4:	429d      	cmp	r5, r3
 80084d6:	bf08      	it	eq
 80084d8:	4296      	cmpeq	r6, r2
 80084da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80084de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80084e2:	d202      	bcs.n	80084ea <__aeabi_ddiv+0x6e>
 80084e4:	085b      	lsrs	r3, r3, #1
 80084e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80084ea:	1ab6      	subs	r6, r6, r2
 80084ec:	eb65 0503 	sbc.w	r5, r5, r3
 80084f0:	085b      	lsrs	r3, r3, #1
 80084f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80084f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80084fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80084fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8008502:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008506:	bf22      	ittt	cs
 8008508:	1ab6      	subcs	r6, r6, r2
 800850a:	4675      	movcs	r5, lr
 800850c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	ea4f 0232 	mov.w	r2, r2, rrx
 8008516:	ebb6 0e02 	subs.w	lr, r6, r2
 800851a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800851e:	bf22      	ittt	cs
 8008520:	1ab6      	subcs	r6, r6, r2
 8008522:	4675      	movcs	r5, lr
 8008524:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008528:	085b      	lsrs	r3, r3, #1
 800852a:	ea4f 0232 	mov.w	r2, r2, rrx
 800852e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008532:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008536:	bf22      	ittt	cs
 8008538:	1ab6      	subcs	r6, r6, r2
 800853a:	4675      	movcs	r5, lr
 800853c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008540:	085b      	lsrs	r3, r3, #1
 8008542:	ea4f 0232 	mov.w	r2, r2, rrx
 8008546:	ebb6 0e02 	subs.w	lr, r6, r2
 800854a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800854e:	bf22      	ittt	cs
 8008550:	1ab6      	subcs	r6, r6, r2
 8008552:	4675      	movcs	r5, lr
 8008554:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008558:	ea55 0e06 	orrs.w	lr, r5, r6
 800855c:	d018      	beq.n	8008590 <__aeabi_ddiv+0x114>
 800855e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008562:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008566:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800856a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800856e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8008572:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008576:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800857a:	d1c0      	bne.n	80084fe <__aeabi_ddiv+0x82>
 800857c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008580:	d10b      	bne.n	800859a <__aeabi_ddiv+0x11e>
 8008582:	ea41 0100 	orr.w	r1, r1, r0
 8008586:	f04f 0000 	mov.w	r0, #0
 800858a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800858e:	e7b6      	b.n	80084fe <__aeabi_ddiv+0x82>
 8008590:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008594:	bf04      	itt	eq
 8008596:	4301      	orreq	r1, r0
 8008598:	2000      	moveq	r0, #0
 800859a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800859e:	bf88      	it	hi
 80085a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80085a4:	f63f aeaf 	bhi.w	8008306 <__aeabi_dmul+0xde>
 80085a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80085ac:	bf04      	itt	eq
 80085ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80085b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80085b6:	f150 0000 	adcs.w	r0, r0, #0
 80085ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80085c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80085c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80085cc:	bfc2      	ittt	gt
 80085ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80085d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80085d6:	bd70      	popgt	{r4, r5, r6, pc}
 80085d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085dc:	f04f 0e00 	mov.w	lr, #0
 80085e0:	3c01      	subs	r4, #1
 80085e2:	e690      	b.n	8008306 <__aeabi_dmul+0xde>
 80085e4:	ea45 0e06 	orr.w	lr, r5, r6
 80085e8:	e68d      	b.n	8008306 <__aeabi_dmul+0xde>
 80085ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80085ee:	ea94 0f0c 	teq	r4, ip
 80085f2:	bf08      	it	eq
 80085f4:	ea95 0f0c 	teqeq	r5, ip
 80085f8:	f43f af3b 	beq.w	8008472 <__aeabi_dmul+0x24a>
 80085fc:	ea94 0f0c 	teq	r4, ip
 8008600:	d10a      	bne.n	8008618 <__aeabi_ddiv+0x19c>
 8008602:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008606:	f47f af34 	bne.w	8008472 <__aeabi_dmul+0x24a>
 800860a:	ea95 0f0c 	teq	r5, ip
 800860e:	f47f af25 	bne.w	800845c <__aeabi_dmul+0x234>
 8008612:	4610      	mov	r0, r2
 8008614:	4619      	mov	r1, r3
 8008616:	e72c      	b.n	8008472 <__aeabi_dmul+0x24a>
 8008618:	ea95 0f0c 	teq	r5, ip
 800861c:	d106      	bne.n	800862c <__aeabi_ddiv+0x1b0>
 800861e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008622:	f43f aefd 	beq.w	8008420 <__aeabi_dmul+0x1f8>
 8008626:	4610      	mov	r0, r2
 8008628:	4619      	mov	r1, r3
 800862a:	e722      	b.n	8008472 <__aeabi_dmul+0x24a>
 800862c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008630:	bf18      	it	ne
 8008632:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008636:	f47f aec5 	bne.w	80083c4 <__aeabi_dmul+0x19c>
 800863a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800863e:	f47f af0d 	bne.w	800845c <__aeabi_dmul+0x234>
 8008642:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008646:	f47f aeeb 	bne.w	8008420 <__aeabi_dmul+0x1f8>
 800864a:	e712      	b.n	8008472 <__aeabi_dmul+0x24a>

0800864c <__gedf2>:
 800864c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008650:	e006      	b.n	8008660 <__cmpdf2+0x4>
 8008652:	bf00      	nop

08008654 <__ledf2>:
 8008654:	f04f 0c01 	mov.w	ip, #1
 8008658:	e002      	b.n	8008660 <__cmpdf2+0x4>
 800865a:	bf00      	nop

0800865c <__cmpdf2>:
 800865c:	f04f 0c01 	mov.w	ip, #1
 8008660:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008664:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008668:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800866c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008670:	bf18      	it	ne
 8008672:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008676:	d01b      	beq.n	80086b0 <__cmpdf2+0x54>
 8008678:	b001      	add	sp, #4
 800867a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800867e:	bf0c      	ite	eq
 8008680:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008684:	ea91 0f03 	teqne	r1, r3
 8008688:	bf02      	ittt	eq
 800868a:	ea90 0f02 	teqeq	r0, r2
 800868e:	2000      	moveq	r0, #0
 8008690:	4770      	bxeq	lr
 8008692:	f110 0f00 	cmn.w	r0, #0
 8008696:	ea91 0f03 	teq	r1, r3
 800869a:	bf58      	it	pl
 800869c:	4299      	cmppl	r1, r3
 800869e:	bf08      	it	eq
 80086a0:	4290      	cmpeq	r0, r2
 80086a2:	bf2c      	ite	cs
 80086a4:	17d8      	asrcs	r0, r3, #31
 80086a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80086aa:	f040 0001 	orr.w	r0, r0, #1
 80086ae:	4770      	bx	lr
 80086b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80086b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80086b8:	d102      	bne.n	80086c0 <__cmpdf2+0x64>
 80086ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80086be:	d107      	bne.n	80086d0 <__cmpdf2+0x74>
 80086c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80086c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80086c8:	d1d6      	bne.n	8008678 <__cmpdf2+0x1c>
 80086ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80086ce:	d0d3      	beq.n	8008678 <__cmpdf2+0x1c>
 80086d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop

080086d8 <__aeabi_cdrcmple>:
 80086d8:	4684      	mov	ip, r0
 80086da:	4610      	mov	r0, r2
 80086dc:	4662      	mov	r2, ip
 80086de:	468c      	mov	ip, r1
 80086e0:	4619      	mov	r1, r3
 80086e2:	4663      	mov	r3, ip
 80086e4:	e000      	b.n	80086e8 <__aeabi_cdcmpeq>
 80086e6:	bf00      	nop

080086e8 <__aeabi_cdcmpeq>:
 80086e8:	b501      	push	{r0, lr}
 80086ea:	f7ff ffb7 	bl	800865c <__cmpdf2>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	bf48      	it	mi
 80086f2:	f110 0f00 	cmnmi.w	r0, #0
 80086f6:	bd01      	pop	{r0, pc}

080086f8 <__aeabi_dcmpeq>:
 80086f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80086fc:	f7ff fff4 	bl	80086e8 <__aeabi_cdcmpeq>
 8008700:	bf0c      	ite	eq
 8008702:	2001      	moveq	r0, #1
 8008704:	2000      	movne	r0, #0
 8008706:	f85d fb08 	ldr.w	pc, [sp], #8
 800870a:	bf00      	nop

0800870c <__aeabi_dcmplt>:
 800870c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008710:	f7ff ffea 	bl	80086e8 <__aeabi_cdcmpeq>
 8008714:	bf34      	ite	cc
 8008716:	2001      	movcc	r0, #1
 8008718:	2000      	movcs	r0, #0
 800871a:	f85d fb08 	ldr.w	pc, [sp], #8
 800871e:	bf00      	nop

08008720 <__aeabi_dcmple>:
 8008720:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008724:	f7ff ffe0 	bl	80086e8 <__aeabi_cdcmpeq>
 8008728:	bf94      	ite	ls
 800872a:	2001      	movls	r0, #1
 800872c:	2000      	movhi	r0, #0
 800872e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008732:	bf00      	nop

08008734 <__aeabi_dcmpge>:
 8008734:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008738:	f7ff ffce 	bl	80086d8 <__aeabi_cdrcmple>
 800873c:	bf94      	ite	ls
 800873e:	2001      	movls	r0, #1
 8008740:	2000      	movhi	r0, #0
 8008742:	f85d fb08 	ldr.w	pc, [sp], #8
 8008746:	bf00      	nop

08008748 <__aeabi_dcmpgt>:
 8008748:	f84d ed08 	str.w	lr, [sp, #-8]!
 800874c:	f7ff ffc4 	bl	80086d8 <__aeabi_cdrcmple>
 8008750:	bf34      	ite	cc
 8008752:	2001      	movcc	r0, #1
 8008754:	2000      	movcs	r0, #0
 8008756:	f85d fb08 	ldr.w	pc, [sp], #8
 800875a:	bf00      	nop

0800875c <__aeabi_d2iz>:
 800875c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008760:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008764:	d215      	bcs.n	8008792 <__aeabi_d2iz+0x36>
 8008766:	d511      	bpl.n	800878c <__aeabi_d2iz+0x30>
 8008768:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800876c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008770:	d912      	bls.n	8008798 <__aeabi_d2iz+0x3c>
 8008772:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800877a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800877e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008782:	fa23 f002 	lsr.w	r0, r3, r2
 8008786:	bf18      	it	ne
 8008788:	4240      	negne	r0, r0
 800878a:	4770      	bx	lr
 800878c:	f04f 0000 	mov.w	r0, #0
 8008790:	4770      	bx	lr
 8008792:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008796:	d105      	bne.n	80087a4 <__aeabi_d2iz+0x48>
 8008798:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800879c:	bf08      	it	eq
 800879e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80087a2:	4770      	bx	lr
 80087a4:	f04f 0000 	mov.w	r0, #0
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop

080087ac <main>:
/**
 * @brief  Main program.
 * @param  None
 * @retval : None
 */
int main(void) {
 80087ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	// Configure board specific setting
//  BoardInit();
	// Setting up COM port for Print function
//  COM_Configuration();
	usart_begin(USART3, PD9, PD8, 19200);
 80087b0:	f44f 6281 	mov.w	r2, #1032	; 0x408
/**
 * @brief  Main program.
 * @param  None
 * @retval : None
 */
int main(void) {
 80087b4:	b089      	sub	sp, #36	; 0x24

	// Configure board specific setting
//  BoardInit();
	// Setting up COM port for Print function
//  COM_Configuration();
	usart_begin(USART3, PD9, PD8, 19200);
 80087b6:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 80087ba:	4885      	ldr	r0, [pc, #532]	; (80089d0 <main+0x224>)

	//Receive character from COM and put it on LCD
	while (1) {
		if (usart_available(USART3) > 0) // RX_BUFFER_IS_NOT_EMPTY)
				{
			RxData = usart_read(USART3); //RECEIVE_DATA;
 80087bc:	4d85      	ldr	r5, [pc, #532]	; (80089d4 <main+0x228>)
					break;
				case 'A':
					usart_print(USART3,
							"\r\nData stored in DDRAM is :\r\n");
					for (i = 0; i < 16; i++) {
						usart_write(USART3, (uint8_t) DDRAM_Data[0][i]);
 80087be:	4f86      	ldr	r7, [pc, #536]	; (80089d8 <main+0x22c>)
					sprintf(tmp, "Contrast is :%u\r\n", Contrast);
					usart_print(USART3, tmp);
					ST7032i_Set_Contrast(Contrast);
					break;
				case 'E':
					Contrast--;
 80087c0:	4c86      	ldr	r4, [pc, #536]	; (80089dc <main+0x230>)

	// Configure board specific setting
//  BoardInit();
	// Setting up COM port for Print function
//  COM_Configuration();
	usart_begin(USART3, PD9, PD8, 19200);
 80087c2:	f240 4109 	movw	r1, #1033	; 0x409
 80087c6:	f7f8 f8ff 	bl	80009c8 <usart_begin>

	//Send welcome messages
	usart_print(USART3, (char *) Welcome_Message);
 80087ca:	4985      	ldr	r1, [pc, #532]	; (80089e0 <main+0x234>)
 80087cc:	4880      	ldr	r0, [pc, #512]	; (80089d0 <main+0x224>)
 80087ce:	f7f8 fa2b 	bl	8000c28 <usart_print>
//  cprintf(Welcome_Message);
	delay_ms(100);
 80087d2:	2064      	movs	r0, #100	; 0x64
 80087d4:	f7f7 fd34 	bl	8000240 <delay_ms>

	i2c_begin(100000);
 80087d8:	4882      	ldr	r0, [pc, #520]	; (80089e4 <main+0x238>)
 80087da:	f7f7 fe31 	bl	8000440 <i2c_begin>
	ST7032i_Init();
 80087de:	f7fa fd71 	bl	80032c4 <ST7032i_Init>

	//Show message on first line
	ST7032i_Print_String(LCD_Message);
 80087e2:	4881      	ldr	r0, [pc, #516]	; (80089e8 <main+0x23c>)
 80087e4:	f7fa fe7a 	bl	80034dc <ST7032i_Print_String>
 * @param  None
 * @retval : None
 */
int main(void) {
	uint8_t i = 0;
	uint8_t icon_num = 12;
 80087e8:	260c      	movs	r6, #12
 80087ea:	46a8      	mov	r8, r5
	//Show message on first line
	ST7032i_Print_String(LCD_Message);

	//Receive character from COM and put it on LCD
	while (1) {
		if (usart_available(USART3) > 0) // RX_BUFFER_IS_NOT_EMPTY)
 80087ec:	4878      	ldr	r0, [pc, #480]	; (80089d0 <main+0x224>)
 80087ee:	f7f8 fafd 	bl	8000dec <usart_available>
 80087f2:	4681      	mov	r9, r0
 80087f4:	2800      	cmp	r0, #0
 80087f6:	f000 80dc 	beq.w	80089b2 <main+0x206>
				{
			RxData = usart_read(USART3); //RECEIVE_DATA;
 80087fa:	4875      	ldr	r0, [pc, #468]	; (80089d0 <main+0x224>)
 80087fc:	f7f8 fa22 	bl	8000c44 <usart_read>
 8008800:	b2c0      	uxtb	r0, r0
 8008802:	7028      	strb	r0, [r5, #0]
			if ((RxData >= 0x20 && RxData <= 0x3F)
 8008804:	782b      	ldrb	r3, [r5, #0]
 8008806:	2b1f      	cmp	r3, #31
 8008808:	d902      	bls.n	8008810 <main+0x64>
 800880a:	782b      	ldrb	r3, [r5, #0]
 800880c:	2b3f      	cmp	r3, #63	; 0x3f
 800880e:	d906      	bls.n	800881e <main+0x72>
					|| (RxData >= 0x60 && RxData <= 0x7F)) {
 8008810:	f898 3000 	ldrb.w	r3, [r8]
 8008814:	2b5f      	cmp	r3, #95	; 0x5f
 8008816:	d910      	bls.n	800883a <main+0x8e>
 8008818:	782b      	ldrb	r3, [r5, #0]
 800881a:	061b      	lsls	r3, r3, #24
 800881c:	d40d      	bmi.n	800883a <main+0x8e>
//              cputchar(RxData);
				sprintf(tmp, "%c", RxData);
 800881e:	782a      	ldrb	r2, [r5, #0]
 8008820:	4972      	ldr	r1, [pc, #456]	; (80089ec <main+0x240>)
 8008822:	4668      	mov	r0, sp
 8008824:	f7fb f810 	bl	8003848 <sprintf>
				usart_print(USART3, tmp);
 8008828:	4869      	ldr	r0, [pc, #420]	; (80089d0 <main+0x224>)
 800882a:	4669      	mov	r1, sp
 800882c:	f7f8 f9fc 	bl	8000c28 <usart_print>
				ST7032i_Putchar(RxData);
 8008830:	7828      	ldrb	r0, [r5, #0]
 8008832:	b240      	sxtb	r0, r0
 8008834:	f7fa fd92 	bl	800335c <ST7032i_Putchar>
 8008838:	e7d8      	b.n	80087ec <main+0x40>
			} else {
				switch (RxData) {
 800883a:	782b      	ldrb	r3, [r5, #0]
 800883c:	3b41      	subs	r3, #65	; 0x41
 800883e:	2b19      	cmp	r3, #25
 8008840:	d8d4      	bhi.n	80087ec <main+0x40>
 8008842:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <main+0x9c>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	08008967 	.word	0x08008967
 800884c:	080088ed 	.word	0x080088ed
 8008850:	080088e1 	.word	0x080088e1
 8008854:	080088c3 	.word	0x080088c3
 8008858:	08008921 	.word	0x08008921
 800885c:	080087ed 	.word	0x080087ed
 8008860:	080087ed 	.word	0x080087ed
 8008864:	080088cf 	.word	0x080088cf
 8008868:	080088bd 	.word	0x080088bd
 800886c:	08008901 	.word	0x08008901
 8008870:	08008913 	.word	0x08008913
 8008874:	0800894f 	.word	0x0800894f
 8008878:	080088f9 	.word	0x080088f9
 800887c:	080088f3 	.word	0x080088f3
 8008880:	08008943 	.word	0x08008943
 8008884:	08008949 	.word	0x08008949
 8008888:	080088b1 	.word	0x080088b1
 800888c:	080088b7 	.word	0x080088b7
 8008890:	080088c9 	.word	0x080088c9
 8008894:	080087ed 	.word	0x080087ed
 8008898:	080087ed 	.word	0x080087ed
 800889c:	080088e7 	.word	0x080088e7
 80088a0:	0800891b 	.word	0x0800891b
 80088a4:	080088db 	.word	0x080088db
 80088a8:	080087ed 	.word	0x080087ed
 80088ac:	080088d5 	.word	0x080088d5
				case 'Q':
					ST7032i_Clear();
 80088b0:	f7fa fcf0 	bl	8003294 <ST7032i_Clear>
					break;
 80088b4:	e79a      	b.n	80087ec <main+0x40>
				case 'R':
					ST7032i_Return();
 80088b6:	f7fa fcdf 	bl	8003278 <ST7032i_Return>
					break;
 80088ba:	e797      	b.n	80087ec <main+0x40>
				case 'I':
					ST7032i_Increment();
 80088bc:	f7fa fccc 	bl	8003258 <ST7032i_Increment>
					break;
 80088c0:	e794      	b.n	80087ec <main+0x40>
				case 'D':
					ST7032i_Decrement();
 80088c2:	f7fa fcb9 	bl	8003238 <ST7032i_Decrement>
					break;
 80088c6:	e791      	b.n	80087ec <main+0x40>
				case 'S':
					ST7032i_Shift_Enable();
 80088c8:	f7fa fca2 	bl	8003210 <ST7032i_Shift_Enable>
					break;
 80088cc:	e78e      	b.n	80087ec <main+0x40>
				case 'H':
					ST7032i_Shift_Disable();
 80088ce:	f7fa fc8b 	bl	80031e8 <ST7032i_Shift_Disable>
					break;
 80088d2:	e78b      	b.n	80087ec <main+0x40>
				case 'Z':
					ST7032i_Display_On();
 80088d4:	f7fa fc7a 	bl	80031cc <ST7032i_Display_On>
					break;
 80088d8:	e788      	b.n	80087ec <main+0x40>
				case 'X':
					ST7032i_Display_Off();
 80088da:	f7fa fc69 	bl	80031b0 <ST7032i_Display_Off>
					break;
 80088de:	e785      	b.n	80087ec <main+0x40>
				case 'C':
					ST7032i_Cursor_On();
 80088e0:	f7fa fc58 	bl	8003194 <ST7032i_Cursor_On>
					break;
 80088e4:	e782      	b.n	80087ec <main+0x40>
				case 'V':
					ST7032i_Cursor_Off();
 80088e6:	f7fa fc47 	bl	8003178 <ST7032i_Cursor_Off>
					break;
 80088ea:	e77f      	b.n	80087ec <main+0x40>
				case 'B':
					ST7032i_Cursor_Blink_On();
 80088ec:	f7fa fc36 	bl	800315c <ST7032i_Cursor_Blink_On>
					break;
 80088f0:	e77c      	b.n	80087ec <main+0x40>
				case 'N':
					ST7032i_Cursor_Blink_Off();
 80088f2:	f7fa fc25 	bl	8003140 <ST7032i_Cursor_Blink_Off>
					break;
 80088f6:	e779      	b.n	80087ec <main+0x40>
				case 'M':
					ST7032i_Clear();
 80088f8:	f7fa fccc 	bl	8003294 <ST7032i_Clear>
					ST7032i_Set_DDRAM(0x40);
 80088fc:	2040      	movs	r0, #64	; 0x40
 80088fe:	e005      	b.n	800890c <main+0x160>
					break;
				case 'J':
					DDRAM_Address--;
 8008900:	4b3b      	ldr	r3, [pc, #236]	; (80089f0 <main+0x244>)
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	3a01      	subs	r2, #1
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	701a      	strb	r2, [r3, #0]
					ST7032i_Set_DDRAM(DDRAM_Address);
 800890a:	7818      	ldrb	r0, [r3, #0]
 800890c:	f7fa fc08 	bl	8003120 <ST7032i_Set_DDRAM>
					break;
 8008910:	e76c      	b.n	80087ec <main+0x40>
				case 'K':
					DDRAM_Address++;
 8008912:	4b37      	ldr	r3, [pc, #220]	; (80089f0 <main+0x244>)
 8008914:	781a      	ldrb	r2, [r3, #0]
 8008916:	3201      	adds	r2, #1
 8008918:	e7f5      	b.n	8008906 <main+0x15a>
					ST7032i_Set_DDRAM(DDRAM_Address);
					break;
				case 'W':
					Contrast++;
 800891a:	7823      	ldrb	r3, [r4, #0]
 800891c:	3301      	adds	r3, #1
 800891e:	e001      	b.n	8008924 <main+0x178>
					sprintf(tmp, "Contrast is :%u\r\n", Contrast);
					usart_print(USART3, tmp);
					ST7032i_Set_Contrast(Contrast);
					break;
				case 'E':
					Contrast--;
 8008920:	7823      	ldrb	r3, [r4, #0]
 8008922:	3b01      	subs	r3, #1
 8008924:	b2db      	uxtb	r3, r3
 8008926:	7023      	strb	r3, [r4, #0]
					sprintf(tmp, "Contrast is :%u\r\n", Contrast);
 8008928:	7822      	ldrb	r2, [r4, #0]
 800892a:	4932      	ldr	r1, [pc, #200]	; (80089f4 <main+0x248>)
 800892c:	4668      	mov	r0, sp
 800892e:	f7fa ff8b 	bl	8003848 <sprintf>
					usart_print(USART3, tmp);
 8008932:	4827      	ldr	r0, [pc, #156]	; (80089d0 <main+0x224>)
 8008934:	4669      	mov	r1, sp
 8008936:	f7f8 f977 	bl	8000c28 <usart_print>
					ST7032i_Set_Contrast(Contrast);
 800893a:	7820      	ldrb	r0, [r4, #0]
 800893c:	f7fa fbd6 	bl	80030ec <ST7032i_Set_Contrast>
					break;
 8008940:	e754      	b.n	80087ec <main+0x40>
				case 'O':
					ST7032i_Icon_On();
 8008942:	f7fa fbc1 	bl	80030c8 <ST7032i_Icon_On>
					break;
 8008946:	e751      	b.n	80087ec <main+0x40>
				case 'P':
					ST7032i_Icon_Off();
 8008948:	f7fa fbac 	bl	80030a4 <ST7032i_Icon_Off>
					break;
 800894c:	e74e      	b.n	80087ec <main+0x40>
				case 'L':
					ST7032i_Icon_Clear(icon_num);
 800894e:	4630      	mov	r0, r6
					icon_num++;
 8008950:	3601      	adds	r6, #1
 8008952:	b2f6      	uxtb	r6, r6
					if (icon_num > 12) {
						icon_num = 0;
 8008954:	2e0d      	cmp	r6, #13
 8008956:	bf08      	it	eq
 8008958:	2600      	moveq	r6, #0
					break;
				case 'P':
					ST7032i_Icon_Off();
					break;
				case 'L':
					ST7032i_Icon_Clear(icon_num);
 800895a:	f7fa fdcc 	bl	80034f6 <ST7032i_Icon_Clear>
					icon_num++;
					if (icon_num > 12) {
						icon_num = 0;
					}
					ST7032i_Icon_Set(icon_num);
 800895e:	4630      	mov	r0, r6
 8008960:	f7fa fdf2 	bl	8003548 <ST7032i_Icon_Set>
					break;
 8008964:	e742      	b.n	80087ec <main+0x40>
				case 'A':
					usart_print(USART3,
 8008966:	481a      	ldr	r0, [pc, #104]	; (80089d0 <main+0x224>)
 8008968:	4923      	ldr	r1, [pc, #140]	; (80089f8 <main+0x24c>)
 800896a:	f7f8 f95d 	bl	8000c28 <usart_print>
 800896e:	f04f 0900 	mov.w	r9, #0
							"\r\nData stored in DDRAM is :\r\n");
					for (i = 0; i < 16; i++) {
						usart_write(USART3, (uint8_t) DDRAM_Data[0][i]);
 8008972:	f817 1009 	ldrb.w	r1, [r7, r9]
 8008976:	4816      	ldr	r0, [pc, #88]	; (80089d0 <main+0x224>)
 8008978:	f109 0901 	add.w	r9, r9, #1
 800897c:	f7f8 f911 	bl	8000ba2 <usart_write>
					ST7032i_Icon_Set(icon_num);
					break;
				case 'A':
					usart_print(USART3,
							"\r\nData stored in DDRAM is :\r\n");
					for (i = 0; i < 16; i++) {
 8008980:	f1b9 0f10 	cmp.w	r9, #16
 8008984:	d1f5      	bne.n	8008972 <main+0x1c6>
						usart_write(USART3, (uint8_t) DDRAM_Data[0][i]);
					}
					usart_print(USART3, "\r\n");
 8008986:	4812      	ldr	r0, [pc, #72]	; (80089d0 <main+0x224>)
 8008988:	491c      	ldr	r1, [pc, #112]	; (80089fc <main+0x250>)
 800898a:	f7f8 f94d 	bl	8000c28 <usart_print>
 800898e:	f04f 0900 	mov.w	r9, #0
					for (i = 0; i < 16; i++) {
						usart_write(USART3, (uint8_t) DDRAM_Data[1][i]);
 8008992:	eb07 0309 	add.w	r3, r7, r9
 8008996:	480e      	ldr	r0, [pc, #56]	; (80089d0 <main+0x224>)
 8008998:	7c19      	ldrb	r1, [r3, #16]
 800899a:	f109 0901 	add.w	r9, r9, #1
 800899e:	f7f8 f900 	bl	8000ba2 <usart_write>
							"\r\nData stored in DDRAM is :\r\n");
					for (i = 0; i < 16; i++) {
						usart_write(USART3, (uint8_t) DDRAM_Data[0][i]);
					}
					usart_print(USART3, "\r\n");
					for (i = 0; i < 16; i++) {
 80089a2:	f1b9 0f10 	cmp.w	r9, #16
 80089a6:	d1f4      	bne.n	8008992 <main+0x1e6>
						usart_write(USART3, (uint8_t) DDRAM_Data[1][i]);
					}
					usart_print(USART3, "\r\n");
 80089a8:	4809      	ldr	r0, [pc, #36]	; (80089d0 <main+0x224>)
 80089aa:	4914      	ldr	r1, [pc, #80]	; (80089fc <main+0x250>)
 80089ac:	f7f8 f93c 	bl	8000c28 <usart_print>
					break;
 80089b0:	e71c      	b.n	80087ec <main+0x40>
				}
			}
		} else {
			delay_ms(10);
 80089b2:	200a      	movs	r0, #10
 80089b4:	f7f7 fc44 	bl	8000240 <delay_ms>
			tmp[0] = 0;
			i2c_requestFrom(0b1101000, 0, (uint8_t *) tmp, 4);
 80089b8:	2068      	movs	r0, #104	; 0x68
 80089ba:	4649      	mov	r1, r9
 80089bc:	466a      	mov	r2, sp
 80089be:	2304      	movs	r3, #4
					break;
				}
			}
		} else {
			delay_ms(10);
			tmp[0] = 0;
 80089c0:	f88d 9000 	strb.w	r9, [sp]
			i2c_requestFrom(0b1101000, 0, (uint8_t *) tmp, 4);
 80089c4:	f7f7 fdfc 	bl	80005c0 <i2c_requestFrom>
			delay_ms(100);
 80089c8:	2064      	movs	r0, #100	; 0x64
 80089ca:	f7f7 fc39 	bl	8000240 <delay_ms>
 80089ce:	e70d      	b.n	80087ec <main+0x40>
 80089d0:	40004800 	.word	0x40004800
 80089d4:	20001630 	.word	0x20001630
 80089d8:	20001631 	.word	0x20001631
 80089dc:	2000009d 	.word	0x2000009d
 80089e0:	08008a46 	.word	0x08008a46
 80089e4:	000186a0 	.word	0x000186a0
 80089e8:	20000084 	.word	0x20000084
 80089ec:	08008c78 	.word	0x08008c78
 80089f0:	20000994 	.word	0x20000994
 80089f4:	08008c7b 	.word	0x08008c7b
 80089f8:	08008c8d 	.word	0x08008c8d
 80089fc:	08008ca8 	.word	0x08008ca8

08008a00 <Reset_Handler>:
 8008a00:	2100      	movs	r1, #0
 8008a02:	e003      	b.n	8008a0c <LoopCopyDataInit>

08008a04 <CopyDataInit>:
 8008a04:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <LoopFillZerobss+0x10>)
 8008a06:	585b      	ldr	r3, [r3, r1]
 8008a08:	5043      	str	r3, [r0, r1]
 8008a0a:	3104      	adds	r1, #4

08008a0c <LoopCopyDataInit>:
 8008a0c:	4809      	ldr	r0, [pc, #36]	; (8008a34 <LoopFillZerobss+0x14>)
 8008a0e:	4b0a      	ldr	r3, [pc, #40]	; (8008a38 <LoopFillZerobss+0x18>)
 8008a10:	1842      	adds	r2, r0, r1
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d3f6      	bcc.n	8008a04 <CopyDataInit>
 8008a16:	4a09      	ldr	r2, [pc, #36]	; (8008a3c <LoopFillZerobss+0x1c>)
 8008a18:	e002      	b.n	8008a20 <LoopFillZerobss>

08008a1a <FillZerobss>:
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f842 3b04 	str.w	r3, [r2], #4

08008a20 <LoopFillZerobss>:
 8008a20:	4b07      	ldr	r3, [pc, #28]	; (8008a40 <LoopFillZerobss+0x20>)
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d3f9      	bcc.n	8008a1a <FillZerobss>
 8008a26:	f7fa fdc9 	bl	80035bc <SystemInit>
 8008a2a:	f7ff febf 	bl	80087ac <main>
 8008a2e:	4770      	bx	lr
 8008a30:	08008d30 	.word	0x08008d30
 8008a34:	20000000 	.word	0x20000000
 8008a38:	2000098c 	.word	0x2000098c
 8008a3c:	2000098c 	.word	0x2000098c
 8008a40:	20001668 	.word	0x20001668

08008a44 <ADC_IRQHandler>:
 8008a44:	e7fe      	b.n	8008a44 <ADC_IRQHandler>

08008a46 <Welcome_Message>:
 8008a46:	0a0d 6548 6c6c 776f 4320 726f 6574 2d78     ..Hellow Cortex-
 8008a56:	334d 532f 4d54 3233 5720 726f 646c 0d21     M3/STM32 World!.
 8008a66:	450a 7078 6e61 2064 6f79 7275 6320 6572     .Expand your cre
 8008a76:	7461 7669 7469 2079 6e61 2064 6e65 6f6a     ativity and enjo
 8008a86:	2079 616d 696b 676e 0d2e 0d0a 490a 7220     y making.....I r
 8008a96:	6365 6965 6576 6320 6168 6172 7463 7265     eceive character
 8008aa6:	6620 6f72 206d 4f43 204d 6e61 2064 7570      from COM and pu
 8008ab6:	2074 7469 6f20 206e 434c 2e44 0a0d 6143     t it on LCD...Ca
 8008ac6:	6970 6174 206c 656c 7474 7265 6920 2073     pital letter is 
 8008ad6:	2061 7073 6365 6169 206c 6964 6572 7463     a special direct
 8008ae6:	6f69 206e 6f74 4c20 4443 202e 6552 6566     ion to LCD. Refe
 8008af6:	2072 6f73 7275 6563 6320 646f 2e65 0a0d     r source code...
 8008b06:	0a0d 0000 0000                              ......

08008b0c <blanks.3927>:
 8008b0c:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008b1c <zeroes.3928>:
 8008b1c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

08008b2c <_global_impure_ptr>:
 8008b2c:	00d8 2000                                   ... 

08008b30 <p05.2449>:
 8008b30:	0005 0000 0019 0000 007d 0000 0000 0000     ........}.......

08008b40 <__mprec_tens>:
 8008b40:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8008b50:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8008b60:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8008b70:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8008b80:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8008b90:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8008ba0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8008bb0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8008bc0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8008bd0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8008be0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8008bf0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8008c00:	9db4 79d9 7843 44ea                         ...yCx.D

08008c08 <__mprec_tinytens>:
 8008c08:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8008c18:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8008c28:	6f43 64ac 0628 0ac8                         Co.d(...

08008c30 <__mprec_bigtens>:
 8008c30:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8008c40:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8008c50:	bf3c 7f73 4fdd 7515                         <.s..O.u

08008c58 <blanks.3871>:
 8008c58:	2020 2020 2020 2020 2020 2020 2020 2020                     

08008c68 <zeroes.3872>:
 8008c68:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
 8008c78:	6325 4300 6e6f 7274 7361 2074 7369 3a20     %c.Contrast is :
 8008c88:	7525 0a0d 0d00 440a 7461 2061 7473 726f     %u.....Data stor
 8008c98:	6465 6920 206e 4444 4152 204d 7369 3a20     ed in DDRAM is :
 8008ca8:	0a0d 4800 6165 2070 6e61 2064 7473 6361     ...Heap and stac
 8008cb8:	206b 6f63 6c6c 7369 6f69 0a6e 6500 6978     k collision..exi
 8008cc8:	0074 0000 4e49 0046 6e69 0066 414e 004e     t...INF.inf.NAN.
 8008cd8:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
 8008ce8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
 8008cf8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
 8008d08:	296c 0000 0030 0000 6e49 6966 696e 7974     l)..0...Infinity
 8008d18:	0000 0000 614e 004e 0043 0000 4f50 4953     ....NaN.C...POSI
 8008d28:	0058 0000 002e 0000                         X.......
