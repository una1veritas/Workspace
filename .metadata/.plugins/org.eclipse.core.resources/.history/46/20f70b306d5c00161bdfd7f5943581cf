//============================================================================
// Name        : permutator.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <fstream>
#include <set>

#include <cctype>

#include "Permutation.h"

void load_dict(std::set<std::string> &, std::istream &);
double strdist(const std::string & t, const std::string & p);

int main(const int argc, const char * argv[]) {
	if ( argc == 0 )
		return EXIT_FAILURE;
	std::string str(argv[1]);
	for(int i = 0; i < str.length(); ++i)
		str[i] = tolower(str[i]);
	std::sort(&str[0], &str[str.length()], [](char a, char b) { return a < b; } );

	Permutation perm(str.length());

	//std::cout << "!!!Hello World!!! " << std::endl; // prints !!!Hello World!!!

	std::fstream dictfile;
	std::set<std::string> worddict;
	dictfile.open("/Users/sin/Documents/Workspace/permutator/words.txt", std::fstream::in);
	if ( dictfile.is_open() ) {
		std::cout << "reading words..." << std::endl;
		load_dict(worddict, dictfile);
		dictfile.close();
	} else {
		std::cout << "Failed opening the words file." << std::endl << std::endl;
		return EXIT_FAILURE;
	}

	std::cout << worddict.size() << " words: " << std::endl;
	std::set<std::string>::iterator it;
	for(it = worddict.begin(); it != worddict.end(); it++) {
		std::string word = *it;
		std::cout << word << std::endl;
	}
	std::cout << std::endl;

	std::string matched = "";
	std::cout << perm << std::endl << std::endl;
	double maxval = 0;
	do {
		std::string t = str;
		perm.map(t);
		for(std::set<std::string>::iterator pos = worddict.begin(); pos != worddict.end(); pos++) {
			const double point = strdist(t, *pos);
			if ( point > 0 )
				std::cout << t << ": " << point << std::endl;
			if ( point > maxval ) {
				matched = t;
				maxval = point;
			}
		}
	} while (perm.next());

	if ( matched == "" ) {
		std::cout << std::endl << "No suggestion." << std::endl << std::endl;
	} else {
		std::cout << std::endl  << "Suggestion: " << matched << " with " << maxval << std::endl << std::endl;
	}
	return EXIT_SUCCESS;
}

void load_dict(std::set<std::string> & list, std::istream & indata) {
	list.clear();
	while ( !indata.eof() ) {
		std::string word;
		indata >> word;
		if ( word.length() > 0 ) {
			list.insert(std::string(word));
		}
	}

	return;
}

unsigned int strdist(const std::string & text, const std::string & patt) {

	if ( text.length() < patt.length() )
		return 0.0;

	int pos;
	if ( text.compare(0, patt.length(), patt) == 0 )
		return patt.length() ;
	return 0;
}
