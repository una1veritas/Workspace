//============================================================================
// Name        : permutator.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <algorithm>

#include <cctype>

class Permutator {
	const unsigned int size;
	std::vector<unsigned int> perm;

public:
	Permutator(const unsigned int n) : size(n), perm(size) {
		init();
	}

	void init(void) {
		for(unsigned int i = 0; i < size; i++)
			perm[i] = i;
	}

	const bool next(void) {
		unsigned int boundary = size - 1;
		for ( ; boundary > 0 && perm[boundary-1] > perm[boundary]; --boundary) {}
		// std::cout << "boundary = " << boundary << ", " << *this << std::endl;
		//sort
		std::sort(perm.begin()+boundary, perm.end(), [](int a, int b) { return a < b; } );
		// std::cout << "sorted: " << *this << std::endl;
		// find the next for perm[top-1]
		unsigned int larger;
		for(larger = boundary; larger < size; ++larger) {
			if ( perm[boundary-1] < perm[larger] )
				break;
		}
		if ( !(larger < size) ) {
			//std::cerr << "next error!" << std::endl;
			return false;
		}
		unsigned int t = perm[boundary-1];
		perm[boundary-1] = perm[larger];
		perm[larger] = t;
		//std::cout << *this << std::endl;
		return true;
	}

	std::string & map(std::string & str) const {
		std::string tmp(str);
		str.clear();
		for(int i = 0; i < size; i++) {
			if ( perm[i] < tmp.length() ) {
				str.push_back(tmp[perm[i]]);
			}
		}
		return str;
	}

	std::ostream & printOn(std::ostream & out) const {
		out << "(";
		for(unsigned int i = 0; i < size; i++) {
			out << perm[i];
			if ( i+1 < size )
				out << ", ";
		}
		out << ") ";
		return out;
	}

	friend std::ostream & operator<<(std::ostream & out, const Permutator & p) {
		return p.printOn(out);
	}
};

void load_dict(std::set<std::string> &, std::istream &);

int main(const int argc, const char * argv[]) {
	if ( argc == 0 )
		return EXIT_FAILURE;
	std::string str(argv[1]);
	for(int i = 0; i < str.length(); ++i)
		str[i] = tolower(str[i]);
	Permutator perm(str.length());

	std::cout << "!!!Hello World!!! " << str << std::endl; // prints !!!Hello World!!!

	std::fstream dictfile;
	std::set<std::string> worddict;
	dictfile.open("/Users/sin/Documents/Workspace/permutator/words.txt", std::fstream::in);
	if ( dictfile.is_open() ) {
		std::cout << "word file contents..." << std::endl;
		load_dict(worddict, std::cin);
		dictfile.close();
	} else {
		std::cout << "Failed opening the words file." << std::endl << std::endl;
		return EXIT_FAILURE;
	}

	std::cout << worddict.size() << " words: " << std::endl;
	std::set<std::string>::iterator it;
	for(it = worddict.begin(); it != worddict.end(); it++) {
		std::string word = *it;
		std::cout << word << std::endl;
	}
	std::cout << std::endl;

	unsigned long count = 0;
	std::cout << perm << std::endl << std::endl;
	while (perm.next()) {
		count++;
		std::string t = str;
		std::cout << perm.map(t) << std::endl;
	}

	return EXIT_SUCCESS;
}

void load_dict(std::set<std::string> & list, std::istream & indata) {
	list.clear();
	while ( !indata.eof() ) {
		std::string word;
		indata >> word;
		std::cout << word << std::endl;
		if ( word.length() > 0 ) {
			list.insert(std::string(word));
			std::cout << word<< ", ";
		}
	}

	return;
}
