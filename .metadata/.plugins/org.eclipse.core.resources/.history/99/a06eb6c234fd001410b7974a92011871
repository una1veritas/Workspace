#ifndef _TURINGMACHINE_H_
#define _TURINGMACHINE_H_

#include <cmath>
#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <set>
#include <map>
#include <vector>
#include <stack>


struct Tuple {
	string current, next; // state[0]:現状態、state[1]:次状態
//	char alph[4];		// alph[0]:入力用テープの読み込み、alph[1]:作業用テープの読み込み、
			// alph[2]:書き込み、alph[3]:書き込み
	string read, write, headding; // hder[0]:入力用テープのヘッドの動き、hder[1]:作業用テープの

	Tuple(int tapes) {
		current = "";
		next = "";
		read = string(tapes, ' ');
		write = string(tapes, ' ');
		headding = string(tapes, ' ');
	}

	// input & output ;
	friend ostream & operator <<(ostream & stream, const Tuple & obj) {
		stream << obj.current << ", " << obj.read << ", " << obj.next << ", " << obj.write << ", " << obj.headding;
		return stream;
	}

};

struct TuringMachine {
public:
	static const char BLANK = '_';
	static const char SPECIAL_DONTCARE = '*';
	static const char SPECIAL_THESAME = '*';

private:
	string::iterator * head;
	string * tape;
	string state;

public:
	vector<Tuple> table;
	unsigned int tapes;
	set<string> acceptingStates;

	int step;

	TuringMachine() {
		tapes = 1;
		//step = 0;
		//answ = 0;
	}

public:
	void maketable(const string &);
	void simulate(string, string[]);
	void print(int); //string state);
	bool searchin(string state, char oninput, char onwork);

};


#endif
