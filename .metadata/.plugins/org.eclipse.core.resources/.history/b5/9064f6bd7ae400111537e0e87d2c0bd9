package kaccess;

import java.io.*;
import java.net.*;
import java.util.*;
//import javax.net.ssl.*;
//import javax.net.ssl.SSLSocketFactory;

public class KyomuAccess implements Runnable {
	public static int servicePort = 3409;
	public static HashMap<String, KyomuAccess> accessors = new HashMap<String, KyomuAccess>();

	BufferedWriter output;
	BufferedReader input;
	HashMap<String, String> statdict;
	AccessTool tool;
	Thread myThread;

	public String[] readTokens(String term, long millis) throws IOException {
		int ch = -1;
		int mpoint = 0;
		long timer = System.currentTimeMillis();
		StringBuffer tmp = new StringBuffer();
		do {
			while (input.ready()) {
				if ((ch = input.read()) == -1)
					break;
				if (term.charAt(mpoint) == (char) ch) {
					mpoint++;
					if (!(mpoint < term.length()))
						break;
				} else {
					mpoint = 0;
				}
				tmp.append((char) ch);
				timer = System.currentTimeMillis();
			}
			if (millis > 0 && System.currentTimeMillis() > timer + millis)
				break;
		} while ((tmp.length() == 0) || (ch != -1 && mpoint < term.length()));
		return tmp.toString().trim().split("\\s");
	}

	public String readToken(long millis) throws IOException {
		int ch = -1;
		long timer = System.currentTimeMillis();
		StringBuffer tmp = new StringBuffer();
		do {
			while (input.ready()) {
				if ((ch = input.read()) == -1)
					break;
				if (Character.isWhitespace((char) ch))
					break;
				tmp.append((char) ch);
				timer = System.currentTimeMillis();
			}
			if (millis > 0 && System.currentTimeMillis() > timer + millis)
				break;
		} while ((tmp.length() == 0)
				|| (ch != -1 && !Character.isWhitespace((char) ch)));
		return tmp.toString();
	}

	public String readToken() throws IOException {
		return readToken(10000);
	}

	public KyomuAccess(Socket toclient) throws Exception {
		input = new BufferedReader(new InputStreamReader(
				toclient.getInputStream(), "UTF-8"));
		output = new BufferedWriter(new OutputStreamWriter(
				toclient.getOutputStream(), "UTF-8"));
		statdict = new HashMap<String, String>();
		tool = null; // will be assigned when opened.
		myThread = null;
	}

	public synchronized void reconnect(BufferedReader in, BufferedWriter out) {
		input = in;
		output = out;
	}

	public boolean login(String id, String passwd) throws Exception {
		String toolName;
		String accessid = null;
		if (id.matches("^\\d[A-z.0-9]*$")) {
			// Student ID
			toolName = "StudentTool";
		} else {
			// Staff ID
			toolName = "TeacherTool";
		}
		try {
			open(toolName);
		} catch (Exception x) {
			return false;
		}
		statdict.clear(); // .remove("ACCESSID");
		if (!id.isEmpty() && !passwd.isEmpty()
				&& !(accessid = tool.authenticate(id, passwd)).isEmpty()) {
			statdict.putAll(tool.getAttribute(accessid));
			statdict.put("ACCESSID", accessid);
			statdict.put("LOGINID", id);
			return true;
		}
		return false;
	}

	public void open(String toolname) throws Exception {
		tool = new AccessTool(toolname);
		File tmpfile = File.createTempFile("keyTrust", ".key");
		tmpfile.deleteOnExit();
		tool.copyURLContentsToFile(new URL(AccessTool.KEYTRUST_URL), tmpfile);
		tool.makeSSLConnection(tmpfile.getPath(), AccessTool.STORE_PASSWORD);
		//
		System.err.println(">> connected.");
		accessors.put(thread().getName(), this);
		// processComand("TODAY");
	}

	public void closeBuffer() {
		try {
			output.close();
			input.close();
		} catch (IOException ex) {
			System.err.println(">> Ignoring an exception on closing. " + ex);
		}
	}

	public void close() {
		try {
			output.close();
			input.close();
			if ( tool != null )
				tool.closeConnection();
		} catch (IOException ex) {
			System.err.println(">> Ignoring an exception on closing. " + ex);
		}
	}

	Thread thread(Thread thre) {
		return myThread = thre;
	}

	Thread thread() {
		return myThread;
	}

	void write(String message) throws Exception {
		output.write(message);
		System.out.print(message);
	}

	void writeln(String message) {
		try {
			write(message);
			output.newLine();
			output.flush();
		} catch (Exception ex) {
			System.err.println(">> Error on writeln: " + ex);
		}
		System.out.println();
	}

	void writeln() {
		writeln("");
	}

	public static void main(String args[]) throws Exception {
		try {
			ServerSocket servsocket = new ServerSocket(servicePort);
			// long watchdog = System.currentTimeMillis();
			while (true) {
				KyomuAccess temp = new KyomuAccess(servsocket.accept());
				System.err.println(">> Ready.");
				//
				String cmdstr = temp.readToken();
				if (cmdstr.equals("HALT")) {
					break;
				} else if (!cmdstr.equals("OPEN")) {
					Thread.sleep(50);
					continue;
				}
				String idstring = temp.readToken();
				KyomuAccess acc;
				if ((acc = KyomuAccess.accessors.get(idstring)) != null) {
					if (acc.thread().getState() == Thread.State.TERMINATED) {
						KyomuAccess.accessors.remove(idstring);
						acc = null;
					} else if (acc.statdict != null) {
						if (!acc.statdict.containsKey("ACCESSID")) {
							KyomuAccess.accessors.remove(idstring);
						}
						// acc = null;
					}
				}
				if (acc == null) {
					System.err
							.println(">> starting a new thread and a new connection.");
					temp.writeln("!SUCCEEDED OPEN!");
					(temp.thread(new Thread(temp, idstring))).start();
				} else {
					System.err
							.println(">> waking up the thread and reconnect the connection.");
					acc.reconnect(temp.input, temp.output);
					acc.writeln("!SUCCEEDED RESUME!");
					acc.thread().interrupt();
				}
			}
			//
		} catch (IOException ex) {
			System.err.println(">> Error in main: " + ex);
			System.exit(0);
		}
	}

	public void run() {
		//
		String cmd = "";
		for (;;) {
			try {
				if ((cmd = readToken()).isEmpty()) {
					Thread.sleep(50);
					continue;
				}
				if (!processComand(cmd))
					break;
			} catch (Exception ex) {
				System.err.println(">> Error on command " + cmd + ", " + ex);
			}
			if (cmd.equalsIgnoreCase("suspend")) {
				closeBuffer();
				synchronized (this) {
					try {
						this.wait();
					} catch (InterruptedException ex) {
					}
				}
			}
		}
		System.err.println(">> Closing...");
		writeln("!CLOSING CONNECTION!");
		close();
	}

	//
	public boolean processComand(String cmd) throws Exception {
		if (cmd.isEmpty())
			return false;

		if (cmd.equalsIgnoreCase("LOGIN")) {
			try {
				String id = readToken();
				String pwd = readToken();
				if (statdict.containsKey("ACCESSID")) {
					writeln("!SUCCEEDED LOGIN ALREADY!");
				} else if (!login(id, pwd)) {
					writeln("!FAILED LOGIN!");
					System.err.println(">> login failed.");
					return false;
				} else {
					writeln("!SUCCEEDED LOGIN!");
				}
			} catch (Exception e) {
				writeln("!FAILED COMMUNICATION!");
				System.err.println(">> Error in establishing connection: " + e);
				return false;
			}
		} else if (cmd.equalsIgnoreCase("STATUS")) {
			for (String name : statdict.keySet()) {
				write(name + " = ");
				writeln(statdict.get(name));
			}
			writeln("!SUCCEEDED GET STATUS!");

		} else if (cmd.equalsIgnoreCase("TODAY")) {
			String k = "QUERY|COMMON_QUERY|queryPresentDate";
			String p = "";
			statdict.remove("DATETODAY");
			String res = tool.query(k, p)[0];
			res = res.substring(0, res.length() - 1).replace('|', '/');
			statdict.put("DATETODAY", res);
			writeln(res);
			writeln("!SUCCEEDED GET DATETODAY!");

		} else if (cmd.equalsIgnoreCase("common")) {
			writeln("Tool|Number|UnknownCode > ");
			String tmp = readToken();
			if (!tmp.isEmpty()) {
				String res = tool.query(
						"QUERY|COMMON_QUERY|queryServerQueryParams", tmp)[0];
				for (String s : res.split("\\$")) {
					writeln(s);
				}
			}
			writeln("!SUCCEEDED!");

		} else if (cmd.equalsIgnoreCase("syllabus")) {
			// query = SENDSYLLABUS|SYLLABUS|XML:2011|11316104|82541854
			String schlyear = readToken();
			String subjid = readToken();
			String teacherid = readToken();
			if (schlyear.isEmpty()) {
				writeln("!CANCELED!");
				return true;
			}
			String[] res = tool.query("SENDSYLLABUS|SYLLABUS|XML", schlyear
					+ '|' + subjid + '|' + teacherid);
			statdict.put("SYLLABUS", res[0]);
			writeln(res[0]);
			writeln("!SUCCEEDED!");

		} else if (cmd.equalsIgnoreCase("uploadsyllabus")) {
			// String msg = "SAVESYLLABUS|SYLLABUS|XML:" + paramValues;
			String schlyear = readToken();
			String subjid = readToken();
			String teacherid = readToken();
			if (schlyear.isEmpty() || subjid.isEmpty() || teacherid.isEmpty()) {
				writeln("CANCELED.");
				return true;
			}
			String sylltext = statdict.get("SYLLABUS");
			tool.query("SAVESYLLABUS|SYLLABUS|XML", schlyear + '|' + subjid
					+ '|' + teacherid + "\r\n" + sylltext + "\r\n.");
			writeln("DONE.");

		} else if (cmd.equalsIgnoreCase("filein")) {
			String filename = readToken();
			String propname = readToken();
			FileInputStream fis = new FileInputStream(filename);
			BufferedReader infile = new BufferedReader(new InputStreamReader(
					fis, "SJIS"));
			StringBuffer buf = new StringBuffer(infile.readLine());
			while (infile.ready()) {
				buf.append("\r\n");
				buf.append(infile.readLine());
			}
			infile.close();
			statdict.put(propname, buf.toString());
			writeln("DONE.");

		} else if (cmd.equalsIgnoreCase("fileout")) {
			String filename = readToken();
			String propname = readToken();
			FileOutputStream fos = new FileOutputStream(filename);
			PrintWriter outfile = new PrintWriter(new OutputStreamWriter(fos,
					"SJIS"));
			outfile.write(statdict.get(propname));
			outfile.close();
			writeln("DONE.");
			/*
			 * } else if (cmd.equalsIgnoreCase("GET")) { String obj =
			 * readToken(); String[] res = null; if
			 * (obj.equalsIgnoreCase("COURSE_SUBJECTS")) {
			 * writeln("RESPONCE GET COURSESUBJECTS"); int reqno = 216; String
			 * param1 = readToken(); String param2 = readToken(); res =
			 * tool.query("QUERY|MeiboTool|" + reqno + "#0", param1 + '|' +
			 * param2); } else if (obj.equalsIgnoreCase("KUBUN_SUBJECTS")) {
			 * writeln("RESPONCE GET KUBUN_SUBJECTS"); int reqno = 218; String
			 * param1 = readToken(); String param2 = readToken(); res =
			 * tool.query("QUERY|MeiboTool|" + reqno + "#0", param1 + '|' +
			 * param2); writeln(); } else if
			 * (obj.equalsIgnoreCase("REGISTERED_STUDENTS")) {
			 * writeln("RESPONCE GET REGISTERED_STUDENTS"); int reqno = 219;
			 * String param1 = readToken(); String param2 = readToken(); String
			 * param3 = readToken(); if (param3.isEmpty()) param3 = "01"; res =
			 * tool.query("QUERY|MeiboTool|" + reqno + "#0", param1 + '|' +
			 * param2 + '|' + param3); } else if
			 * (obj.equalsIgnoreCase("JIKANWARI")) { String schlyear =
			 * readToken(); String term = readToken(); String dept =
			 * readToken(); String ord = readToken(); String faculty = "11"; res
			 * = tool.query("QUERY|JikanwariTool|202#8", schlyear + "|" + term +
			 * "|" + faculty + "|" + dept + "|" + ord); } if (res != null) { for
			 * (String s : res) { s = s.replace('|', '\t'); if (s.isEmpty())
			 * continue; writeln(s); } } writeln("DONE.");
			 */
		} else if (cmd.startsWith("QUERY")) {
			String[] qparams = cmd.split(":");
			String res[];
			if ( qparams.length >= 2 ) {
				res = tool.query(qparams[0], qparams[1]);
			} else {
				res = tool.query(qparams[0], "");
			}
			int count = 0;
			for (String s : res) {
				s.replace('|', '\t');
				writeln(s);
				count++;
			}
			writeln("Totally " + count + " lines in this result.");
			writeln("DONE.");
			/*
			 * QUERY|MeiboTool|216#0:2011|205|
			 * QUERY|MeiboTool|219#0:2011|11316139|01| ...
			 * QUERY|MeiboTool|218#0:2011|636| ...
			 * QUERY|ReportTool|221#0:2011|82541854| answer =
			 */
//		} else if ( cmd.startsWith("SQL") ) {

		} else if (cmd.equalsIgnoreCase("suspend")) {
			writeln("!SUSPENDED!");
		} else if (cmd.equalsIgnoreCase("quit")) {
			writeln("!QUIT SESSION AND CLOSING CONNECTION!");
			return false;
		}
		return true;
	}
}
