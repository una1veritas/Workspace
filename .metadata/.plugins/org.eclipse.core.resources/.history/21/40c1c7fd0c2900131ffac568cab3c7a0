#include <Wire.h>
#include "PN532_I2C.h"
#include "ISO14443.h"

#include "main.h"

const int IRQ = 2;
const int RST = 0xff;  
// Not connected by default on the NFC Shield
// tied with CPU RESET

PN532 nfc(PN532::I2C_ADDRESS, IRQ, RST);
byte buff[80];
uint32_t lastMillis;
ISO14443Card lastCard;

const byte IizukaKey_b[] = {
  0xBB, 0x63, 0x45, 0x74, 0x55, 0x79, 0x4B };
const byte factory_a[] = {
  0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

void setup() {
  byte n;

  Wire.begin();
  nfc.begin();

  Serial.begin(9600);
  Serial.println("PN532 via I2C Firmware inspection/FeliCa read test.");

  if ( nfc.GetFirmwareVersion() 
    && nfc.getCommandResponse(buff) ) {
    Serial.print("PN53x firmware ");
    Serial.print(buff[0], HEX);
    Serial.println(' ');
    Serial.print(buff[1], HEX); 
    Serial.println(' ');
    Serial.print(buff[2], HEX);
    Serial.println(' ');
    Serial.print(buff[3], HEX);
    Serial.println(".");
  } 
  else {
    Serial.println("PN532 not found.");
    while (1);
  }

  Serial.println("  SAMConfiguration ");
  if ( nfc.SAMConfiguration() && (0 == nfc.getCommandResponse(buff)) ) {
    Serial.println();
  } 
  else {
    Serial.println(" failed.");
  }
  if ( nfc.GetGeneralStatus() && (cnt = nfc.getCommandResponse(buff)) ) {
    for(int i = 0; i < cnt; i++) {
      Serial.print(buff[i]>>4, HEX);
      Serial.print(buff[i]& 0x0f, HEX);
      Serial.print(' ');
    }
    Serial.println();
    Serial.println("  GetGeneralState >>");
  }
  nfc.PowerDown(0xff);
  Serial.print(nfc.getCommandResponse(buff));
  Serial.println("  PowerDown >>");
}

void loop() {
  byte c;
  byte polling[] = {
    2,
    NFC::BAUDTYPE_106K_A,
    NFC::BAUDTYPE_212K_F
  };

  if ( (millis() > lastCardDetect + 1000) and 
    (c = nfc.InAutoPoll(1, 1, polling+1, polling[0])) and
    (c = nfc.getAutoPollResponse()) ) { // (byte*) buff)) ) {
    //mon << mon.printArray(tmp, 8) << mon.endl;
    // NbTg, type1, length1, [Tg, ...]
    card.set(buff[1], buff+3);
    Serial << "Detected " << nfc.target << nl;
    if ( card != lastcard ) { 
      lastcard = card;
      lastCardDetect = millis();
      if ( card.type == NFC::CARDTYPE_MIFARE ) {
        //tone(4, 1800, 100);
        Serial.println("Mifare: ");
          for(int i = 0; i < card.IDLength; i++) {
            Serial << (byte) card.ID[i] << ' ';
          }
          Serial << nl;
        nfc.targetSet(0x10, card.ID, card.IDLength);
        if ( nfc.mifare_AuthenticateBlock(4, IizukaKey_b) ) {
          Serial.println("Auth Success.");
          nfc.mifare_ReadBlock(4, buff);
          for(int i = 0; i < 16; i++) {
            Serial.print(buff[i], HEX);
            Serial.print(' ');
          }
          Serial.println();
          nfc.mifare_ReadBlock(5, buff);
          for(int i = 0; i < 16; i++) {
            Serial.print(buff[i], HEX);
            Serial.print(' ');
          }
          Serial.println();
          nfc.mifare_ReadBlock(6, buff);
          for(int i = 0; i < 16; i++) {
            Serial.print(buff[i], HEX);
            Serial.print(' ');
          }
          Serial.println();
        } 
        else {
          //tone(4, 1200, 100);
          Serial.println("Failure.");
        }
        Serial.println();
      }
    } 
  }
  else {
    card.clear();
  }

}








