
AVR_TinyBasicPlus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010c8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002e0  00800060  00010c8c  00010d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000043f  00800340  00800340  00011000  2**0
                  ALLOC
  3 .stab         00019794  00000000  00000000  00011000  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000d30b  00000000  00000000  0002a794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00037a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002c9  00000000  00000000  00037cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000285a  00000000  00000000  00037f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001648  00000000  00000000  0003a7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001782  00000000  00000000  0003be2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  0003d5ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004be  00000000  00000000  0003d80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ed2  00000000  00000000  0003dcca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  0003eb9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 9b 50 	jmp	0xa136	; 0xa136 <__vector_1>
       8:	0c 94 ce 50 	jmp	0xa19c	; 0xa19c <__vector_2>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 ad 63 	jmp	0xc75a	; 0xc75a <__vector_9>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 e8 39 	jmp	0x73d0	; 0x73d0 <__vector_11>
      30:	0c 94 1c 3a 	jmp	0x7438	; 0x7438 <__vector_12>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000054 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
      54:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

00000064 <_ZL21tone_pin_to_timer_PGM>:
      64:	02                                                  .

00000065 <port_to_mode_PGM>:
      65:	00 00 00 00 37 00 34 00 31 00                       ....7.4.1.

0000006f <port_to_output_PGM>:
      6f:	00 00 00 00 38 00 35 00 32 00                       ....8.5.2.

00000079 <port_to_input_PGM>:
      79:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

00000083 <digital_pin_to_port_PGM>:
      83:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      93:	03 03 03 03                                         ....

00000097 <digital_pin_to_bit_mask_PGM>:
      97:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      a7:	04 08 10 20                                         ... 

000000ab <digital_pin_to_timer_PGM>:
      ab:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      bb:	00 00 00 00 00                                      .....

000000c0 <__ctors_start>:
      c0:	b1 32       	cpi	r27, 0x21	; 33
      c2:	de 3e       	cpi	r29, 0xEE	; 238
      c4:	87 3f       	cpi	r24, 0xF7	; 247

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf e5       	ldi	r28, 0x5F	; 95
      cc:	d4 e0       	ldi	r29, 0x04	; 4
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	13 e0       	ldi	r17, 0x03	; 3
      d4:	a0 e6       	ldi	r26, 0x60	; 96
      d6:	b0 e0       	ldi	r27, 0x00	; 0
      d8:	ec e8       	ldi	r30, 0x8C	; 140
      da:	fc e0       	ldi	r31, 0x0C	; 12
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <.do_copy_data_start>

000000de <.do_copy_data_loop>:
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0

000000e2 <.do_copy_data_start>:
      e2:	a0 34       	cpi	r26, 0x40	; 64
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <.do_copy_data_loop>

000000e8 <__do_clear_bss>:
      e8:	17 e0       	ldi	r17, 0x07	; 7
      ea:	a0 e4       	ldi	r26, 0x40	; 64
      ec:	b3 e0       	ldi	r27, 0x03	; 3
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	af 37       	cpi	r26, 0x7F	; 127
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <.do_global_ctors_start>

00000100 <.do_global_ctors_loop>:
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 80 82 	call	0x10500	; 0x10500 <__tablejump__>

00000108 <.do_global_ctors_start>:
     108:	c0 3c       	cpi	r28, 0xC0	; 192
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <.do_global_ctors_loop>
     10e:	0e 94 3d 63 	call	0xc67a	; 0xc67a <main>
     112:	0c 94 44 86 	jmp	0x10c88	; 0x10c88 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_ZNK7Sd2Card4typeEv>:
    return readRegister(CMD9, csd);
  }
  void readEnd(void);
  uint8_t setSckRate(uint8_t sckRateID);
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t type(void) const {return type_;}
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	00 d0       	rcall	.+0      	; 0x120 <_ZNK7Sd2Card4typeEv+0x6>
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	9a 83       	std	Y+2, r25	; 0x02
     126:	89 83       	std	Y+1, r24	; 0x01
     128:	e9 81       	ldd	r30, Y+1	; 0x01
     12a:	fa 81       	ldd	r31, Y+2	; 0x02
     12c:	83 85       	ldd	r24, Z+11	; 0x0b
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	cf 91       	pop	r28
     134:	df 91       	pop	r29
     136:	08 95       	ret

00000138 <_ZN7Sd2Card5errorEh>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
     138:	df 93       	push	r29
     13a:	cf 93       	push	r28
     13c:	00 d0       	rcall	.+0      	; 0x13e <_ZN7Sd2Card5errorEh+0x6>
     13e:	0f 92       	push	r0
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	9a 83       	std	Y+2, r25	; 0x02
     146:	89 83       	std	Y+1, r24	; 0x01
     148:	6b 83       	std	Y+3, r22	; 0x03
     14a:	e9 81       	ldd	r30, Y+1	; 0x01
     14c:	fa 81       	ldd	r31, Y+2	; 0x02
     14e:	8b 81       	ldd	r24, Y+3	; 0x03
     150:	85 83       	std	Z+5, r24	; 0x05
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	cf 91       	pop	r28
     15a:	df 91       	pop	r29
     15c:	08 95       	ret

0000015e <_ZN7Sd2Card4typeEh>:
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
     15e:	df 93       	push	r29
     160:	cf 93       	push	r28
     162:	00 d0       	rcall	.+0      	; 0x164 <_ZN7Sd2Card4typeEh+0x6>
     164:	0f 92       	push	r0
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	9a 83       	std	Y+2, r25	; 0x02
     16c:	89 83       	std	Y+1, r24	; 0x01
     16e:	6b 83       	std	Y+3, r22	; 0x03
     170:	e9 81       	ldd	r30, Y+1	; 0x01
     172:	fa 81       	ldd	r31, Y+2	; 0x02
     174:	8b 81       	ldd	r24, Y+3	; 0x03
     176:	83 87       	std	Z+11, r24	; 0x0b
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	cf 91       	pop	r28
     180:	df 91       	pop	r29
     182:	08 95       	ret

00000184 <_ZL7spiSendh>:
#include "Sd2Card.h"
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
     184:	df 93       	push	r29
     186:	cf 93       	push	r28
     188:	00 d0       	rcall	.+0      	; 0x18a <_ZL7spiSendh+0x6>
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	89 83       	std	Y+1, r24	; 0x01
  SPDR = b;
     190:	ef e2       	ldi	r30, 0x2F	; 47
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	80 83       	st	Z, r24
  while (!(SPSR & (1 << SPIF)));
     198:	ee e2       	ldi	r30, 0x2E	; 46
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	1a 82       	std	Y+2, r1	; 0x02
     1a0:	88 23       	and	r24, r24
     1a2:	14 f0       	brlt	.+4      	; 0x1a8 <_ZL7spiSendh+0x24>
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	8a 83       	std	Y+2, r24	; 0x02
     1a8:	8a 81       	ldd	r24, Y+2	; 0x02
     1aa:	88 23       	and	r24, r24
     1ac:	a9 f7       	brne	.-22     	; 0x198 <_ZL7spiSendh+0x14>
}
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	cf 91       	pop	r28
     1b4:	df 91       	pop	r29
     1b6:	08 95       	ret

000001b8 <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
     1b8:	df 93       	push	r29
     1ba:	cf 93       	push	r28
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
  spiSend(0XFF);
     1c0:	8f ef       	ldi	r24, 0xFF	; 255
     1c2:	0e 94 c2 00 	call	0x184	; 0x184 <_ZL7spiSendh>
  return SPDR;
     1c6:	ef e2       	ldi	r30, 0x2F	; 47
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
}
     1cc:	cf 91       	pop	r28
     1ce:	df 91       	pop	r29
     1d0:	08 95       	ret

000001d2 <_ZN7Sd2Card10setSckRateEh>:
 * for \a scsRateID = 6.
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
     1d2:	df 93       	push	r29
     1d4:	cf 93       	push	r28
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
     1da:	29 97       	sbiw	r28, 0x09	; 9
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	9a 83       	std	Y+2, r25	; 0x02
     1e8:	89 83       	std	Y+1, r24	; 0x01
     1ea:	6b 83       	std	Y+3, r22	; 0x03
  if (sckRateID > 6) {
     1ec:	8b 81       	ldd	r24, Y+3	; 0x03
     1ee:	87 30       	cpi	r24, 0x07	; 7
     1f0:	38 f0       	brcs	.+14     	; 0x200 <_ZN7Sd2Card10setSckRateEh+0x2e>
    error(SD_CARD_ERROR_SCK_RATE);
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	9a 81       	ldd	r25, Y+2	; 0x02
     1f6:	66 e1       	ldi	r22, 0x16	; 22
     1f8:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    return false;
     1fc:	19 86       	std	Y+9, r1	; 0x09
     1fe:	48 c0       	rjmp	.+144    	; 0x290 <_ZN7Sd2Card10setSckRateEh+0xbe>
  }
  // see avr processor datasheet for SPI register bit definitions
  if ((sckRateID & 1) || sckRateID == 6) {
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	88 2f       	mov	r24, r24
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	81 70       	andi	r24, 0x01	; 1
     208:	90 70       	andi	r25, 0x00	; 0
     20a:	88 23       	and	r24, r24
     20c:	19 f4       	brne	.+6      	; 0x214 <_ZN7Sd2Card10setSckRateEh+0x42>
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	86 30       	cpi	r24, 0x06	; 6
     212:	41 f4       	brne	.+16     	; 0x224 <_ZN7Sd2Card10setSckRateEh+0x52>
    SPSR &= ~(1 << SPI2X);
     214:	ae e2       	ldi	r26, 0x2E	; 46
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	ee e2       	ldi	r30, 0x2E	; 46
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	8e 7f       	andi	r24, 0xFE	; 254
     220:	8c 93       	st	X, r24
     222:	07 c0       	rjmp	.+14     	; 0x232 <_ZN7Sd2Card10setSckRateEh+0x60>
  } else {
    SPSR |= (1 << SPI2X);
     224:	ae e2       	ldi	r26, 0x2E	; 46
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	ee e2       	ldi	r30, 0x2E	; 46
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	81 60       	ori	r24, 0x01	; 1
     230:	8c 93       	st	X, r24
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
     232:	ad e2       	ldi	r26, 0x2D	; 45
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	ed e2       	ldi	r30, 0x2D	; 45
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8c 7f       	andi	r24, 0xFC	; 252
     23e:	8c 93       	st	X, r24
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
     240:	8d e2       	ldi	r24, 0x2D	; 45
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	98 87       	std	Y+8, r25	; 0x08
     246:	8f 83       	std	Y+7, r24	; 0x07
     248:	ed e2       	ldi	r30, 0x2D	; 45
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	8e 83       	std	Y+6, r24	; 0x06
     250:	8b 81       	ldd	r24, Y+3	; 0x03
     252:	88 2f       	mov	r24, r24
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	84 70       	andi	r24, 0x04	; 4
     258:	90 70       	andi	r25, 0x00	; 0
     25a:	00 97       	sbiw	r24, 0x00	; 0
     25c:	19 f0       	breq	.+6      	; 0x264 <_ZN7Sd2Card10setSckRateEh+0x92>
     25e:	92 e0       	ldi	r25, 0x02	; 2
     260:	9d 83       	std	Y+5, r25	; 0x05
     262:	01 c0       	rjmp	.+2      	; 0x266 <_ZN7Sd2Card10setSckRateEh+0x94>
     264:	1d 82       	std	Y+5, r1	; 0x05
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	88 2f       	mov	r24, r24
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	82 70       	andi	r24, 0x02	; 2
     26e:	90 70       	andi	r25, 0x00	; 0
     270:	00 97       	sbiw	r24, 0x00	; 0
     272:	19 f0       	breq	.+6      	; 0x27a <_ZN7Sd2Card10setSckRateEh+0xa8>
     274:	e1 e0       	ldi	r30, 0x01	; 1
     276:	ec 83       	std	Y+4, r30	; 0x04
     278:	01 c0       	rjmp	.+2      	; 0x27c <_ZN7Sd2Card10setSckRateEh+0xaa>
     27a:	1c 82       	std	Y+4, r1	; 0x04
     27c:	8d 81       	ldd	r24, Y+5	; 0x05
     27e:	fc 81       	ldd	r31, Y+4	; 0x04
     280:	8f 2b       	or	r24, r31
     282:	9e 81       	ldd	r25, Y+6	; 0x06
     284:	89 2b       	or	r24, r25
     286:	ef 81       	ldd	r30, Y+7	; 0x07
     288:	f8 85       	ldd	r31, Y+8	; 0x08
     28a:	80 83       	st	Z, r24
  return true;
     28c:	f1 e0       	ldi	r31, 0x01	; 1
     28e:	f9 87       	std	Y+9, r31	; 0x09
     290:	89 85       	ldd	r24, Y+9	; 0x09
}
     292:	29 96       	adiw	r28, 0x09	; 9
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	cf 91       	pop	r28
     2a0:	df 91       	pop	r29
     2a2:	08 95       	ret

000002a4 <_ZN7Sd2Card11waitNotBusyEj>:
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	29 97       	sbiw	r28, 0x09	; 9
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	9c 83       	std	Y+4, r25	; 0x04
     2ba:	8b 83       	std	Y+3, r24	; 0x03
     2bc:	7e 83       	std	Y+6, r23	; 0x06
     2be:	6d 83       	std	Y+5, r22	; 0x05
  uint16_t t0 = millis();
     2c0:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
     2c4:	dc 01       	movw	r26, r24
     2c6:	cb 01       	movw	r24, r22
     2c8:	9a 83       	std	Y+2, r25	; 0x02
     2ca:	89 83       	std	Y+1, r24	; 0x01
  do {
    if (spiRec() == 0XFF) return true;
     2cc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
     2d0:	18 86       	std	Y+8, r1	; 0x08
     2d2:	8f 3f       	cpi	r24, 0xFF	; 255
     2d4:	11 f4       	brne	.+4      	; 0x2da <_ZN7Sd2Card11waitNotBusyEj+0x36>
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	88 87       	std	Y+8, r24	; 0x08
     2da:	88 85       	ldd	r24, Y+8	; 0x08
     2dc:	88 23       	and	r24, r24
     2de:	19 f0       	breq	.+6      	; 0x2e6 <_ZN7Sd2Card11waitNotBusyEj+0x42>
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	8f 83       	std	Y+7, r24	; 0x07
     2e4:	15 c0       	rjmp	.+42     	; 0x310 <_ZN7Sd2Card11waitNotBusyEj+0x6c>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
     2e6:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
     2ea:	dc 01       	movw	r26, r24
     2ec:	cb 01       	movw	r24, r22
     2ee:	9c 01       	movw	r18, r24
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	9a 81       	ldd	r25, Y+2	; 0x02
     2f4:	28 1b       	sub	r18, r24
     2f6:	39 0b       	sbc	r19, r25
     2f8:	19 86       	std	Y+9, r1	; 0x09
     2fa:	8d 81       	ldd	r24, Y+5	; 0x05
     2fc:	9e 81       	ldd	r25, Y+6	; 0x06
     2fe:	28 17       	cp	r18, r24
     300:	39 07       	cpc	r19, r25
     302:	10 f4       	brcc	.+4      	; 0x308 <_ZN7Sd2Card11waitNotBusyEj+0x64>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	89 87       	std	Y+9, r24	; 0x09
     308:	89 85       	ldd	r24, Y+9	; 0x09
     30a:	88 23       	and	r24, r24
     30c:	f9 f6       	brne	.-66     	; 0x2cc <_ZN7Sd2Card11waitNotBusyEj+0x28>
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
     30e:	1f 82       	std	Y+7, r1	; 0x07
     310:	8f 81       	ldd	r24, Y+7	; 0x07
}
     312:	29 96       	adiw	r28, 0x09	; 9
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	cf 91       	pop	r28
     320:	df 91       	pop	r29
     322:	08 95       	ret

00000324 <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
     324:	df 93       	push	r29
     326:	cf 93       	push	r28
     328:	00 d0       	rcall	.+0      	; 0x32a <_ZN7Sd2Card13chipSelectLowEv+0x6>
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	9a 83       	std	Y+2, r25	; 0x02
     330:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(chipSelectPin_, LOW);
     332:	e9 81       	ldd	r30, Y+1	; 0x01
     334:	fa 81       	ldd	r31, Y+2	; 0x02
     336:	84 81       	ldd	r24, Z+4	; 0x04
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
}
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	cf 91       	pop	r28
     344:	df 91       	pop	r29
     346:	08 95       	ret

00000348 <_ZN7Sd2Card14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
     348:	df 93       	push	r29
     34a:	cf 93       	push	r28
     34c:	00 d0       	rcall	.+0      	; 0x34e <_ZN7Sd2Card14chipSelectHighEv+0x6>
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	9a 83       	std	Y+2, r25	; 0x02
     354:	89 83       	std	Y+1, r24	; 0x01
  digitalWrite(chipSelectPin_, HIGH);
     356:	e9 81       	ldd	r30, Y+1	; 0x01
     358:	fa 81       	ldd	r31, Y+2	; 0x02
     35a:	84 81       	ldd	r24, Z+4	; 0x04
     35c:	61 e0       	ldi	r22, 0x01	; 1
     35e:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
}
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	cf 91       	pop	r28
     368:	df 91       	pop	r29
     36a:	08 95       	ret

0000036c <_ZN7Sd2Card9writeStopEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
     36c:	df 93       	push	r29
     36e:	cf 93       	push	r28
     370:	00 d0       	rcall	.+0      	; 0x372 <_ZN7Sd2Card9writeStopEv+0x6>
     372:	00 d0       	rcall	.+0      	; 0x374 <_ZN7Sd2Card9writeStopEv+0x8>
     374:	0f 92       	push	r0
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	89 83       	std	Y+1, r24	; 0x01
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	9a 81       	ldd	r25, Y+2	; 0x02
     382:	68 e5       	ldi	r22, 0x58	; 88
     384:	72 e0       	ldi	r23, 0x02	; 2
     386:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7Sd2Card11waitNotBusyEj>
     38a:	1d 82       	std	Y+5, r1	; 0x05
     38c:	88 23       	and	r24, r24
     38e:	11 f4       	brne	.+4      	; 0x394 <_ZN7Sd2Card9writeStopEv+0x28>
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	8d 83       	std	Y+5, r24	; 0x05
     394:	8d 81       	ldd	r24, Y+5	; 0x05
     396:	88 23       	and	r24, r24
     398:	c1 f4       	brne	.+48     	; 0x3ca <_ZN7Sd2Card9writeStopEv+0x5e>
  spiSend(STOP_TRAN_TOKEN);
     39a:	8d ef       	ldi	r24, 0xFD	; 253
     39c:	0e 94 c2 00 	call	0x184	; 0x184 <_ZL7spiSendh>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	68 e5       	ldi	r22, 0x58	; 88
     3a6:	72 e0       	ldi	r23, 0x02	; 2
     3a8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7Sd2Card11waitNotBusyEj>
     3ac:	1c 82       	std	Y+4, r1	; 0x04
     3ae:	88 23       	and	r24, r24
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <_ZN7Sd2Card9writeStopEv+0x4a>
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	8c 83       	std	Y+4, r24	; 0x04
     3b6:	8c 81       	ldd	r24, Y+4	; 0x04
     3b8:	88 23       	and	r24, r24
     3ba:	39 f4       	brne	.+14     	; 0x3ca <_ZN7Sd2Card9writeStopEv+0x5e>
  chipSelectHigh();
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	9a 81       	ldd	r25, Y+2	; 0x02
     3c0:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	8b 83       	std	Y+3, r24	; 0x03
     3c8:	0a c0       	rjmp	.+20     	; 0x3de <_ZN7Sd2Card9writeStopEv+0x72>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	60 e1       	ldi	r22, 0x10	; 16
     3d0:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
  chipSelectHigh();
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	9a 81       	ldd	r25, Y+2	; 0x02
     3d8:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     3dc:	1b 82       	std	Y+3, r1	; 0x03
     3de:	8b 81       	ldd	r24, Y+3	; 0x03
}
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	cf 91       	pop	r28
     3ec:	df 91       	pop	r29
     3ee:	08 95       	ret

000003f0 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
     3f0:	df 93       	push	r29
     3f2:	cf 93       	push	r28
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	2b 97       	sbiw	r28, 0x0b	; 11
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	9c 83       	std	Y+4, r25	; 0x04
     406:	8b 83       	std	Y+3, r24	; 0x03
     408:	6d 83       	std	Y+5, r22	; 0x05
     40a:	5f 83       	std	Y+7, r21	; 0x07
     40c:	4e 83       	std	Y+6, r20	; 0x06
#ifdef OPTIMIZE_HARDWARE_SPI

  // send data - optimized loop
  SPDR = token;
     40e:	ef e2       	ldi	r30, 0x2F	; 47
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	8d 81       	ldd	r24, Y+5	; 0x05
     414:	80 83       	st	Z, r24

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
     416:	1a 82       	std	Y+2, r1	; 0x02
     418:	19 82       	std	Y+1, r1	; 0x01
     41a:	34 c0       	rjmp	.+104    	; 0x484 <__stack+0x25>
    while (!(SPSR & (1 << SPIF)));
     41c:	ee e2       	ldi	r30, 0x2E	; 46
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	1b 86       	std	Y+11, r1	; 0x0b
     424:	88 23       	and	r24, r24
     426:	14 f0       	brlt	.+4      	; 0x42c <_ZN7Sd2Card9writeDataEhPKh+0x3c>
     428:	21 e0       	ldi	r18, 0x01	; 1
     42a:	2b 87       	std	Y+11, r18	; 0x0b
     42c:	8b 85       	ldd	r24, Y+11	; 0x0b
     42e:	88 23       	and	r24, r24
     430:	a9 f7       	brne	.-22     	; 0x41c <_ZN7Sd2Card9writeDataEhPKh+0x2c>
    SPDR = src[i];
     432:	af e2       	ldi	r26, 0x2F	; 47
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	2e 81       	ldd	r18, Y+6	; 0x06
     438:	3f 81       	ldd	r19, Y+7	; 0x07
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	9a 81       	ldd	r25, Y+2	; 0x02
     43e:	f9 01       	movw	r30, r18
     440:	e8 0f       	add	r30, r24
     442:	f9 1f       	adc	r31, r25
     444:	80 81       	ld	r24, Z
     446:	8c 93       	st	X, r24
    while (!(SPSR & (1 << SPIF)));
     448:	ee e2       	ldi	r30, 0x2E	; 46
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	1a 86       	std	Y+10, r1	; 0x0a
     450:	88 23       	and	r24, r24
     452:	14 f0       	brlt	.+4      	; 0x458 <_ZN7Sd2Card9writeDataEhPKh+0x68>
     454:	21 e0       	ldi	r18, 0x01	; 1
     456:	2a 87       	std	Y+10, r18	; 0x0a
     458:	8a 85       	ldd	r24, Y+10	; 0x0a
     45a:	88 23       	and	r24, r24
     45c:	a9 f7       	brne	.-22     	; 0x448 <_ZN7Sd2Card9writeDataEhPKh+0x58>
    SPDR = src[i+1];
     45e:	af e2       	ldi	r26, 0x2F	; 47
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	9a 81       	ldd	r25, Y+2	; 0x02
     466:	9c 01       	movw	r18, r24
     468:	2f 5f       	subi	r18, 0xFF	; 255
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	8e 81       	ldd	r24, Y+6	; 0x06
     46e:	9f 81       	ldd	r25, Y+7	; 0x07
     470:	fc 01       	movw	r30, r24
     472:	e2 0f       	add	r30, r18
     474:	f3 1f       	adc	r31, r19
     476:	80 81       	ld	r24, Z
     478:	8c 93       	st	X, r24

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
     47a:	89 81       	ldd	r24, Y+1	; 0x01
     47c:	9a 81       	ldd	r25, Y+2	; 0x02
     47e:	02 96       	adiw	r24, 0x02	; 2
     480:	9a 83       	std	Y+2, r25	; 0x02
     482:	89 83       	std	Y+1, r24	; 0x01
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	9a 81       	ldd	r25, Y+2	; 0x02
     488:	22 e0       	ldi	r18, 0x02	; 2
     48a:	80 30       	cpi	r24, 0x00	; 0
     48c:	92 07       	cpc	r25, r18
     48e:	30 f2       	brcs	.-116    	; 0x41c <_ZN7Sd2Card9writeDataEhPKh+0x2c>
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
  }

  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));
     490:	ee e2       	ldi	r30, 0x2E	; 46
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	19 86       	std	Y+9, r1	; 0x09
     498:	88 23       	and	r24, r24
     49a:	14 f0       	brlt	.+4      	; 0x4a0 <__stack+0x41>
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	89 87       	std	Y+9, r24	; 0x09
     4a0:	29 85       	ldd	r18, Y+9	; 0x09
     4a2:	22 23       	and	r18, r18
     4a4:	a9 f7       	brne	.-22     	; 0x490 <__stack+0x31>
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    spiSend(src[i]);
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
     4a6:	8f ef       	ldi	r24, 0xFF	; 255
     4a8:	0e 94 c2 00 	call	0x184	; 0x184 <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
     4ac:	8f ef       	ldi	r24, 0xFF	; 255
     4ae:	0e 94 c2 00 	call	0x184	; 0x184 <_ZL7spiSendh>

  status_ = spiRec();
     4b2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
     4b6:	eb 81       	ldd	r30, Y+3	; 0x03
     4b8:	fc 81       	ldd	r31, Y+4	; 0x04
     4ba:	82 87       	std	Z+10, r24	; 0x0a
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
     4bc:	eb 81       	ldd	r30, Y+3	; 0x03
     4be:	fc 81       	ldd	r31, Y+4	; 0x04
     4c0:	82 85       	ldd	r24, Z+10	; 0x0a
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	8f 71       	andi	r24, 0x1F	; 31
     4c8:	90 70       	andi	r25, 0x00	; 0
     4ca:	85 30       	cpi	r24, 0x05	; 5
     4cc:	91 05       	cpc	r25, r1
     4ce:	59 f0       	breq	.+22     	; 0x4e6 <__stack+0x87>
    error(SD_CARD_ERROR_WRITE);
     4d0:	8b 81       	ldd	r24, Y+3	; 0x03
     4d2:	9c 81       	ldd	r25, Y+4	; 0x04
     4d4:	61 e1       	ldi	r22, 0x11	; 17
     4d6:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    chipSelectHigh();
     4da:	8b 81       	ldd	r24, Y+3	; 0x03
     4dc:	9c 81       	ldd	r25, Y+4	; 0x04
     4de:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
    return false;
     4e2:	18 86       	std	Y+8, r1	; 0x08
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__stack+0x8b>
  }
  return true;
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	88 87       	std	Y+8, r24	; 0x08
     4ea:	88 85       	ldd	r24, Y+8	; 0x08
}
     4ec:	2b 96       	adiw	r28, 0x0b	; 11
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	cf 91       	pop	r28
     4fa:	df 91       	pop	r29
     4fc:	08 95       	ret

000004fe <_ZN7Sd2Card9writeDataEPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Write one data block in a multiple block write sequence */
uint8_t Sd2Card::writeData(const uint8_t* src) {
     4fe:	df 93       	push	r29
     500:	cf 93       	push	r28
     502:	00 d0       	rcall	.+0      	; 0x504 <_ZN7Sd2Card9writeDataEPKh+0x6>
     504:	00 d0       	rcall	.+0      	; 0x506 <_ZN7Sd2Card9writeDataEPKh+0x8>
     506:	00 d0       	rcall	.+0      	; 0x508 <_ZN7Sd2Card9writeDataEPKh+0xa>
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	9a 83       	std	Y+2, r25	; 0x02
     50e:	89 83       	std	Y+1, r24	; 0x01
     510:	7c 83       	std	Y+4, r23	; 0x04
     512:	6b 83       	std	Y+3, r22	; 0x03
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	9a 81       	ldd	r25, Y+2	; 0x02
     518:	68 e5       	ldi	r22, 0x58	; 88
     51a:	72 e0       	ldi	r23, 0x02	; 2
     51c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7Sd2Card11waitNotBusyEj>
     520:	1e 82       	std	Y+6, r1	; 0x06
     522:	88 23       	and	r24, r24
     524:	11 f4       	brne	.+4      	; 0x52a <_ZN7Sd2Card9writeDataEPKh+0x2c>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	8e 83       	std	Y+6, r24	; 0x06
     52a:	8e 81       	ldd	r24, Y+6	; 0x06
     52c:	88 23       	and	r24, r24
     52e:	59 f0       	breq	.+22     	; 0x546 <_ZN7Sd2Card9writeDataEPKh+0x48>
    error(SD_CARD_ERROR_WRITE_MULTIPLE);
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	63 e1       	ldi	r22, 0x13	; 19
     536:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    chipSelectHigh();
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	9a 81       	ldd	r25, Y+2	; 0x02
     53e:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
    return false;
     542:	1d 82       	std	Y+5, r1	; 0x05
     544:	09 c0       	rjmp	.+18     	; 0x558 <_ZN7Sd2Card9writeDataEPKh+0x5a>
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	2b 81       	ldd	r18, Y+3	; 0x03
     54c:	3c 81       	ldd	r19, Y+4	; 0x04
     54e:	6c ef       	ldi	r22, 0xFC	; 252
     550:	a9 01       	movw	r20, r18
     552:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN7Sd2Card9writeDataEhPKh>
     556:	8d 83       	std	Y+5, r24	; 0x05
     558:	8d 81       	ldd	r24, Y+5	; 0x05
}
     55a:	26 96       	adiw	r28, 0x06	; 6
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	cf 91       	pop	r28
     568:	df 91       	pop	r29
     56a:	08 95       	ret

0000056c <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
     56c:	df 93       	push	r29
     56e:	cf 93       	push	r28
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	27 97       	sbiw	r28, 0x07	; 7
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	9c 83       	std	Y+4, r25	; 0x04
     582:	8b 83       	std	Y+3, r24	; 0x03
  uint16_t t0 = millis();
     584:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	9a 83       	std	Y+2, r25	; 0x02
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	1b c0       	rjmp	.+54     	; 0x5c8 <_ZN7Sd2Card14waitStartBlockEv+0x5c>
  while ((status_ = spiRec()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
     592:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
     596:	dc 01       	movw	r26, r24
     598:	cb 01       	movw	r24, r22
     59a:	9c 01       	movw	r18, r24
     59c:	89 81       	ldd	r24, Y+1	; 0x01
     59e:	9a 81       	ldd	r25, Y+2	; 0x02
     5a0:	a9 01       	movw	r20, r18
     5a2:	48 1b       	sub	r20, r24
     5a4:	59 0b       	sbc	r21, r25
     5a6:	ca 01       	movw	r24, r20
     5a8:	1e 82       	std	Y+6, r1	; 0x06
     5aa:	51 e0       	ldi	r21, 0x01	; 1
     5ac:	8d 32       	cpi	r24, 0x2D	; 45
     5ae:	95 07       	cpc	r25, r21
     5b0:	10 f0       	brcs	.+4      	; 0x5b6 <_ZN7Sd2Card14waitStartBlockEv+0x4a>
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	8e 83       	std	Y+6, r24	; 0x06
     5b6:	2e 81       	ldd	r18, Y+6	; 0x06
     5b8:	22 23       	and	r18, r18
     5ba:	31 f0       	breq	.+12     	; 0x5c8 <_ZN7Sd2Card14waitStartBlockEv+0x5c>
      error(SD_CARD_ERROR_READ_TIMEOUT);
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	9c 81       	ldd	r25, Y+4	; 0x04
     5c0:	6f e0       	ldi	r22, 0x0F	; 15
     5c2:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     5c6:	1e c0       	rjmp	.+60     	; 0x604 <_ZN7Sd2Card14waitStartBlockEv+0x98>
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
     5c8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
     5cc:	eb 81       	ldd	r30, Y+3	; 0x03
     5ce:	fc 81       	ldd	r31, Y+4	; 0x04
     5d0:	82 87       	std	Z+10, r24	; 0x0a
     5d2:	eb 81       	ldd	r30, Y+3	; 0x03
     5d4:	fc 81       	ldd	r31, Y+4	; 0x04
     5d6:	82 85       	ldd	r24, Z+10	; 0x0a
     5d8:	1f 82       	std	Y+7, r1	; 0x07
     5da:	8f 3f       	cpi	r24, 0xFF	; 255
     5dc:	11 f4       	brne	.+4      	; 0x5e2 <_ZN7Sd2Card14waitStartBlockEv+0x76>
     5de:	41 e0       	ldi	r20, 0x01	; 1
     5e0:	4f 83       	std	Y+7, r20	; 0x07
     5e2:	5f 81       	ldd	r21, Y+7	; 0x07
     5e4:	55 23       	and	r21, r21
     5e6:	a9 f6       	brne	.-86     	; 0x592 <_ZN7Sd2Card14waitStartBlockEv+0x26>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
     5e8:	eb 81       	ldd	r30, Y+3	; 0x03
     5ea:	fc 81       	ldd	r31, Y+4	; 0x04
     5ec:	82 85       	ldd	r24, Z+10	; 0x0a
     5ee:	8e 3f       	cpi	r24, 0xFE	; 254
     5f0:	31 f0       	breq	.+12     	; 0x5fe <_ZN7Sd2Card14waitStartBlockEv+0x92>
    error(SD_CARD_ERROR_READ);
     5f2:	8b 81       	ldd	r24, Y+3	; 0x03
     5f4:	9c 81       	ldd	r25, Y+4	; 0x04
     5f6:	6d e0       	ldi	r22, 0x0D	; 13
     5f8:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <_ZN7Sd2Card14waitStartBlockEv+0x98>
    goto fail;
  }
  return true;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	8d 83       	std	Y+5, r24	; 0x05
     602:	05 c0       	rjmp	.+10     	; 0x60e <_ZN7Sd2Card14waitStartBlockEv+0xa2>

 fail:
  chipSelectHigh();
     604:	8b 81       	ldd	r24, Y+3	; 0x03
     606:	9c 81       	ldd	r25, Y+4	; 0x04
     608:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     60c:	1d 82       	std	Y+5, r1	; 0x05
     60e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     610:	27 96       	adiw	r28, 0x07	; 7
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	08 95       	ret

00000622 <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	27 97       	sbiw	r28, 0x07	; 7
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	89 83       	std	Y+1, r24	; 0x01
  if (inBlock_) {
     63a:	e9 81       	ldd	r30, Y+1	; 0x01
     63c:	fa 81       	ldd	r31, Y+2	; 0x02
     63e:	86 81       	ldd	r24, Z+6	; 0x06
     640:	88 23       	and	r24, r24
     642:	09 f4       	brne	.+2      	; 0x646 <_ZN7Sd2Card7readEndEv+0x24>
     644:	3f c0       	rjmp	.+126    	; 0x6c4 <_ZN7Sd2Card7readEndEv+0xa2>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
     646:	ef e2       	ldi	r30, 0x2F	; 47
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	80 83       	st	Z, r24
     64e:	0f c0       	rjmp	.+30     	; 0x66e <_ZN7Sd2Card7readEndEv+0x4c>
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
     650:	ee e2       	ldi	r30, 0x2E	; 46
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	1c 82       	std	Y+4, r1	; 0x04
     658:	88 23       	and	r24, r24
     65a:	14 f0       	brlt	.+4      	; 0x660 <_ZN7Sd2Card7readEndEv+0x3e>
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	2c 83       	std	Y+4, r18	; 0x04
     660:	8c 81       	ldd	r24, Y+4	; 0x04
     662:	88 23       	and	r24, r24
     664:	a9 f7       	brne	.-22     	; 0x650 <_ZN7Sd2Card7readEndEv+0x2e>
      SPDR = 0XFF;
     666:	ef e2       	ldi	r30, 0x2F	; 47
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	8f ef       	ldi	r24, 0xFF	; 255
     66c:	80 83       	st	Z, r24
  if (inBlock_) {
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
     66e:	e9 81       	ldd	r30, Y+1	; 0x01
     670:	fa 81       	ldd	r31, Y+2	; 0x02
     672:	87 81       	ldd	r24, Z+7	; 0x07
     674:	90 85       	ldd	r25, Z+8	; 0x08
     676:	9e 83       	std	Y+6, r25	; 0x06
     678:	8d 83       	std	Y+5, r24	; 0x05
     67a:	1f 82       	std	Y+7, r1	; 0x07
     67c:	8d 81       	ldd	r24, Y+5	; 0x05
     67e:	9e 81       	ldd	r25, Y+6	; 0x06
     680:	22 e0       	ldi	r18, 0x02	; 2
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	92 07       	cpc	r25, r18
     686:	10 f4       	brcc	.+4      	; 0x68c <_ZN7Sd2Card7readEndEv+0x6a>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	8f 83       	std	Y+7, r24	; 0x07
     68c:	8d 81       	ldd	r24, Y+5	; 0x05
     68e:	9e 81       	ldd	r25, Y+6	; 0x06
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	e9 81       	ldd	r30, Y+1	; 0x01
     694:	fa 81       	ldd	r31, Y+2	; 0x02
     696:	90 87       	std	Z+8, r25	; 0x08
     698:	87 83       	std	Z+7, r24	; 0x07
     69a:	9f 81       	ldd	r25, Y+7	; 0x07
     69c:	99 23       	and	r25, r25
     69e:	c1 f6       	brne	.-80     	; 0x650 <_ZN7Sd2Card7readEndEv+0x2e>
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)));
     6a0:	ee e2       	ldi	r30, 0x2E	; 46
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	1b 82       	std	Y+3, r1	; 0x03
     6a8:	88 23       	and	r24, r24
     6aa:	14 f0       	brlt	.+4      	; 0x6b0 <_ZN7Sd2Card7readEndEv+0x8e>
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	2b 83       	std	Y+3, r18	; 0x03
     6b0:	8b 81       	ldd	r24, Y+3	; 0x03
     6b2:	88 23       	and	r24, r24
     6b4:	a9 f7       	brne	.-22     	; 0x6a0 <_ZN7Sd2Card7readEndEv+0x7e>
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
     6be:	e9 81       	ldd	r30, Y+1	; 0x01
     6c0:	fa 81       	ldd	r31, Y+2	; 0x02
     6c2:	16 82       	std	Z+6, r1	; 0x06
  }
}
     6c4:	27 96       	adiw	r28, 0x07	; 7
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	cf 91       	pop	r28
     6d2:	df 91       	pop	r29
     6d4:	08 95       	ret

000006d6 <_ZN7Sd2Card16partialBlockReadEh>:
 *
 * Use this for applications like the Adafruit Wave Shield.
 *
 * \param[in] value The value TRUE (non-zero) or FALSE (zero).)
 */
void Sd2Card::partialBlockRead(uint8_t value) {
     6d6:	df 93       	push	r29
     6d8:	cf 93       	push	r28
     6da:	00 d0       	rcall	.+0      	; 0x6dc <_ZN7Sd2Card16partialBlockReadEh+0x6>
     6dc:	0f 92       	push	r0
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	9a 83       	std	Y+2, r25	; 0x02
     6e4:	89 83       	std	Y+1, r24	; 0x01
     6e6:	6b 83       	std	Y+3, r22	; 0x03
  readEnd();
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	9a 81       	ldd	r25, Y+2	; 0x02
     6ec:	0e 94 11 03 	call	0x622	; 0x622 <_ZN7Sd2Card7readEndEv>
  partialBlockRead_ = value;
     6f0:	e9 81       	ldd	r30, Y+1	; 0x01
     6f2:	fa 81       	ldd	r31, Y+2	; 0x02
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	81 87       	std	Z+9, r24	; 0x09
}
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	cf 91       	pop	r28
     700:	df 91       	pop	r29
     702:	08 95       	ret

00000704 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
     704:	df 93       	push	r29
     706:	cf 93       	push	r28
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	2b 97       	sbiw	r28, 0x0b	; 11
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	9d 83       	std	Y+5, r25	; 0x05
     71a:	8c 83       	std	Y+4, r24	; 0x04
     71c:	6e 83       	std	Y+6, r22	; 0x06
     71e:	2f 83       	std	Y+7, r18	; 0x07
     720:	38 87       	std	Y+8, r19	; 0x08
     722:	49 87       	std	Y+9, r20	; 0x09
     724:	5a 87       	std	Y+10, r21	; 0x0a
  // end read if in partialBlockRead mode
  readEnd();
     726:	8c 81       	ldd	r24, Y+4	; 0x04
     728:	9d 81       	ldd	r25, Y+5	; 0x05
     72a:	0e 94 11 03 	call	0x622	; 0x622 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
     72e:	8c 81       	ldd	r24, Y+4	; 0x04
     730:	9d 81       	ldd	r25, Y+5	; 0x05
     732:	0e 94 92 01 	call	0x324	; 0x324 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
     736:	8c 81       	ldd	r24, Y+4	; 0x04
     738:	9d 81       	ldd	r25, Y+5	; 0x05
     73a:	6c e2       	ldi	r22, 0x2C	; 44
     73c:	71 e0       	ldi	r23, 0x01	; 1
     73e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
     742:	8e 81       	ldd	r24, Y+6	; 0x06
     744:	80 64       	ori	r24, 0x40	; 64
     746:	0e 94 c2 00 	call	0x184	; 0x184 <_ZL7spiSendh>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
     74a:	88 e1       	ldi	r24, 0x18	; 24
     74c:	8a 83       	std	Y+2, r24	; 0x02
     74e:	15 c0       	rjmp	.+42     	; 0x77a <_ZN7Sd2Card11cardCommandEhm+0x76>
     750:	8a 81       	ldd	r24, Y+2	; 0x02
     752:	28 2f       	mov	r18, r24
     754:	33 27       	eor	r19, r19
     756:	27 fd       	sbrc	r18, 7
     758:	30 95       	com	r19
     75a:	8f 81       	ldd	r24, Y+7	; 0x07
     75c:	98 85       	ldd	r25, Y+8	; 0x08
     75e:	a9 85       	ldd	r26, Y+9	; 0x09
     760:	ba 85       	ldd	r27, Y+10	; 0x0a
     762:	04 c0       	rjmp	.+8      	; 0x76c <_ZN7Sd2Card11cardCommandEhm+0x68>
     764:	b6 95       	lsr	r27
     766:	a7 95       	ror	r26
     768:	97 95       	ror	r25
     76a:	87 95       	ror	r24
     76c:	2a 95       	dec	r18
     76e:	d2 f7       	brpl	.-12     	; 0x764 <_ZN7Sd2Card11cardCommandEhm+0x60>
     770:	0e 94 c2 00 	call	0x184	; 0x184 <_ZL7spiSendh>
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	88 50       	subi	r24, 0x08	; 8
     778:	8a 83       	std	Y+2, r24	; 0x02
     77a:	8a 81       	ldd	r24, Y+2	; 0x02
     77c:	88 23       	and	r24, r24
     77e:	44 f7       	brge	.-48     	; 0x750 <_ZN7Sd2Card11cardCommandEhm+0x4c>

  // send CRC
  uint8_t crc = 0XFF;
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	8b 83       	std	Y+3, r24	; 0x03
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
     784:	8e 81       	ldd	r24, Y+6	; 0x06
     786:	88 23       	and	r24, r24
     788:	11 f4       	brne	.+4      	; 0x78e <_ZN7Sd2Card11cardCommandEhm+0x8a>
     78a:	85 e9       	ldi	r24, 0x95	; 149
     78c:	8b 83       	std	Y+3, r24	; 0x03
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
     78e:	8e 81       	ldd	r24, Y+6	; 0x06
     790:	88 30       	cpi	r24, 0x08	; 8
     792:	11 f4       	brne	.+4      	; 0x798 <_ZN7Sd2Card11cardCommandEhm+0x94>
     794:	87 e8       	ldi	r24, 0x87	; 135
     796:	8b 83       	std	Y+3, r24	; 0x03
  spiSend(crc);
     798:	8b 81       	ldd	r24, Y+3	; 0x03
     79a:	0e 94 c2 00 	call	0x184	; 0x184 <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
     79e:	19 82       	std	Y+1, r1	; 0x01
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <_ZN7Sd2Card11cardCommandEhm+0xa4>
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	8f 5f       	subi	r24, 0xFF	; 255
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
     7ac:	ec 81       	ldd	r30, Y+4	; 0x04
     7ae:	fd 81       	ldd	r31, Y+5	; 0x05
     7b0:	82 87       	std	Z+10, r24	; 0x0a
     7b2:	ec 81       	ldd	r30, Y+4	; 0x04
     7b4:	fd 81       	ldd	r31, Y+5	; 0x05
     7b6:	82 85       	ldd	r24, Z+10	; 0x0a
     7b8:	88 23       	and	r24, r24
     7ba:	34 f4       	brge	.+12     	; 0x7c8 <_ZN7Sd2Card11cardCommandEhm+0xc4>
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	8f 3f       	cpi	r24, 0xFF	; 255
     7c0:	19 f0       	breq	.+6      	; 0x7c8 <_ZN7Sd2Card11cardCommandEhm+0xc4>
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	8b 87       	std	Y+11, r24	; 0x0b
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <_ZN7Sd2Card11cardCommandEhm+0xc6>
     7c8:	1b 86       	std	Y+11, r1	; 0x0b
     7ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     7cc:	88 23       	and	r24, r24
     7ce:	49 f7       	brne	.-46     	; 0x7a2 <_ZN7Sd2Card11cardCommandEhm+0x9e>
  return status_;
     7d0:	ec 81       	ldd	r30, Y+4	; 0x04
     7d2:	fd 81       	ldd	r31, Y+5	; 0x05
     7d4:	82 85       	ldd	r24, Z+10	; 0x0a
}
     7d6:	2b 96       	adiw	r28, 0x0b	; 11
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	cf 91       	pop	r28
     7e4:	df 91       	pop	r29
     7e6:	08 95       	ret

000007e8 <_ZN7Sd2Card8cardAcmdEhm>:
  uint16_t offset_;
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	27 97       	sbiw	r28, 0x07	; 7
     7f2:	0f b6       	in	r0, 0x3f	; 63
     7f4:	f8 94       	cli
     7f6:	de bf       	out	0x3e, r29	; 62
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	cd bf       	out	0x3d, r28	; 61
     7fc:	9a 83       	std	Y+2, r25	; 0x02
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	6b 83       	std	Y+3, r22	; 0x03
     802:	2c 83       	std	Y+4, r18	; 0x04
     804:	3d 83       	std	Y+5, r19	; 0x05
     806:	4e 83       	std	Y+6, r20	; 0x06
     808:	5f 83       	std	Y+7, r21	; 0x07
    cardCommand(CMD55, 0);
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	67 e3       	ldi	r22, 0x37	; 55
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	9a 81       	ldd	r25, Y+2	; 0x02
     820:	2c 81       	ldd	r18, Y+4	; 0x04
     822:	3d 81       	ldd	r19, Y+5	; 0x05
     824:	4e 81       	ldd	r20, Y+6	; 0x06
     826:	5f 81       	ldd	r21, Y+7	; 0x07
     828:	6b 81       	ldd	r22, Y+3	; 0x03
     82a:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
  }
     82e:	27 96       	adiw	r28, 0x07	; 7
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	cf 91       	pop	r28
     83c:	df 91       	pop	r29
     83e:	08 95       	ret

00000840 <_ZN7Sd2Card10writeStartEmm>:
 * for optimized multiple block writes.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	2e 97       	sbiw	r28, 0x0e	; 14
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
     858:	9a 83       	std	Y+2, r25	; 0x02
     85a:	89 83       	std	Y+1, r24	; 0x01
     85c:	4b 83       	std	Y+3, r20	; 0x03
     85e:	5c 83       	std	Y+4, r21	; 0x04
     860:	6d 83       	std	Y+5, r22	; 0x05
     862:	7e 83       	std	Y+6, r23	; 0x06
     864:	0f 83       	std	Y+7, r16	; 0x07
     866:	18 87       	std	Y+8, r17	; 0x08
     868:	29 87       	std	Y+9, r18	; 0x09
     86a:	3a 87       	std	Y+10, r19	; 0x0a
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
     86c:	8b 81       	ldd	r24, Y+3	; 0x03
     86e:	9c 81       	ldd	r25, Y+4	; 0x04
     870:	ad 81       	ldd	r26, Y+5	; 0x05
     872:	be 81       	ldd	r27, Y+6	; 0x06
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	a1 05       	cpc	r26, r1
     878:	b1 05       	cpc	r27, r1
     87a:	31 f4       	brne	.+12     	; 0x888 <_ZN7Sd2Card10writeStartEmm+0x48>
    error(SD_CARD_ERROR_WRITE_BLOCK_ZERO);
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	9a 81       	ldd	r25, Y+2	; 0x02
     880:	62 e1       	ldi	r22, 0x12	; 18
     882:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     886:	50 c0       	rjmp	.+160    	; 0x928 <_ZN7Sd2Card10writeStartEmm+0xe8>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	2f 81       	ldd	r18, Y+7	; 0x07
     88e:	38 85       	ldd	r19, Y+8	; 0x08
     890:	49 85       	ldd	r20, Y+9	; 0x09
     892:	5a 85       	ldd	r21, Y+10	; 0x0a
     894:	67 e1       	ldi	r22, 0x17	; 23
     896:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <_ZN7Sd2Card8cardAcmdEhm>
     89a:	8d 87       	std	Y+13, r24	; 0x0d
     89c:	8d 85       	ldd	r24, Y+13	; 0x0d
     89e:	88 23       	and	r24, r24
     8a0:	11 f0       	breq	.+4      	; 0x8a6 <_ZN7Sd2Card10writeStartEmm+0x66>
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	8d 87       	std	Y+13, r24	; 0x0d
     8a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     8a8:	88 23       	and	r24, r24
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <_ZN7Sd2Card10writeStartEmm+0x78>
    error(SD_CARD_ERROR_ACMD23);
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	9a 81       	ldd	r25, Y+2	; 0x02
     8b0:	67 e0       	ldi	r22, 0x07	; 7
     8b2:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     8b6:	38 c0       	rjmp	.+112    	; 0x928 <_ZN7Sd2Card10writeStartEmm+0xe8>
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
     8bc:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZNK7Sd2Card4typeEv>
     8c0:	1c 86       	std	Y+12, r1	; 0x0c
     8c2:	83 30       	cpi	r24, 0x03	; 3
     8c4:	11 f0       	breq	.+4      	; 0x8ca <_ZN7Sd2Card10writeStartEmm+0x8a>
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	8c 87       	std	Y+12, r24	; 0x0c
     8ca:	8c 85       	ldd	r24, Y+12	; 0x0c
     8cc:	88 23       	and	r24, r24
     8ce:	89 f0       	breq	.+34     	; 0x8f2 <_ZN7Sd2Card10writeStartEmm+0xb2>
     8d0:	8b 81       	ldd	r24, Y+3	; 0x03
     8d2:	9c 81       	ldd	r25, Y+4	; 0x04
     8d4:	ad 81       	ldd	r26, Y+5	; 0x05
     8d6:	be 81       	ldd	r27, Y+6	; 0x06
     8d8:	07 2e       	mov	r0, r23
     8da:	79 e0       	ldi	r23, 0x09	; 9
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	aa 1f       	adc	r26, r26
     8e2:	bb 1f       	adc	r27, r27
     8e4:	7a 95       	dec	r23
     8e6:	d1 f7       	brne	.-12     	; 0x8dc <_ZN7Sd2Card10writeStartEmm+0x9c>
     8e8:	70 2d       	mov	r23, r0
     8ea:	8b 83       	std	Y+3, r24	; 0x03
     8ec:	9c 83       	std	Y+4, r25	; 0x04
     8ee:	ad 83       	std	Y+5, r26	; 0x05
     8f0:	be 83       	std	Y+6, r27	; 0x06
  if (cardCommand(CMD25, blockNumber)) {
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	9a 81       	ldd	r25, Y+2	; 0x02
     8f6:	2b 81       	ldd	r18, Y+3	; 0x03
     8f8:	3c 81       	ldd	r19, Y+4	; 0x04
     8fa:	4d 81       	ldd	r20, Y+5	; 0x05
     8fc:	5e 81       	ldd	r21, Y+6	; 0x06
     8fe:	69 e1       	ldi	r22, 0x19	; 25
     900:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
     904:	8e 87       	std	Y+14, r24	; 0x0e
     906:	8e 85       	ldd	r24, Y+14	; 0x0e
     908:	88 23       	and	r24, r24
     90a:	11 f0       	breq	.+4      	; 0x910 <_ZN7Sd2Card10writeStartEmm+0xd0>
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	8e 87       	std	Y+14, r24	; 0x0e
     910:	8e 85       	ldd	r24, Y+14	; 0x0e
     912:	88 23       	and	r24, r24
     914:	31 f0       	breq	.+12     	; 0x922 <_ZN7Sd2Card10writeStartEmm+0xe2>
    error(SD_CARD_ERROR_CMD25);
     916:	89 81       	ldd	r24, Y+1	; 0x01
     918:	9a 81       	ldd	r25, Y+2	; 0x02
     91a:	65 e0       	ldi	r22, 0x05	; 5
     91c:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     920:	03 c0       	rjmp	.+6      	; 0x928 <_ZN7Sd2Card10writeStartEmm+0xe8>
    goto fail;
  }
  return true;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	8b 87       	std	Y+11, r24	; 0x0b
     926:	05 c0       	rjmp	.+10     	; 0x932 <_ZN7Sd2Card10writeStartEmm+0xf2>

 fail:
  chipSelectHigh();
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     930:	1b 86       	std	Y+11, r1	; 0x0b
     932:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     934:	2e 96       	adiw	r28, 0x0e	; 14
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	cf 91       	pop	r28
     942:	df 91       	pop	r29
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	08 95       	ret

0000094a <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	2e 97       	sbiw	r28, 0x0e	; 14
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	9a 83       	std	Y+2, r25	; 0x02
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	4b 83       	std	Y+3, r20	; 0x03
     964:	5c 83       	std	Y+4, r21	; 0x04
     966:	6d 83       	std	Y+5, r22	; 0x05
     968:	7e 83       	std	Y+6, r23	; 0x06
     96a:	38 87       	std	Y+8, r19	; 0x08
     96c:	2f 83       	std	Y+7, r18	; 0x07
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
     96e:	8b 81       	ldd	r24, Y+3	; 0x03
     970:	9c 81       	ldd	r25, Y+4	; 0x04
     972:	ad 81       	ldd	r26, Y+5	; 0x05
     974:	be 81       	ldd	r27, Y+6	; 0x06
     976:	00 97       	sbiw	r24, 0x00	; 0
     978:	a1 05       	cpc	r26, r1
     97a:	b1 05       	cpc	r27, r1
     97c:	31 f4       	brne	.+12     	; 0x98a <_ZN7Sd2Card10writeBlockEmPKh+0x40>
    error(SD_CARD_ERROR_WRITE_BLOCK_ZERO);
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	9a 81       	ldd	r25, Y+2	; 0x02
     982:	62 e1       	ldi	r22, 0x12	; 18
     984:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     988:	7c c0       	rjmp	.+248    	; 0xa82 <_ZN7Sd2Card10writeBlockEmPKh+0x138>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	9a 81       	ldd	r25, Y+2	; 0x02
     98e:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZNK7Sd2Card4typeEv>
     992:	1d 86       	std	Y+13, r1	; 0x0d
     994:	83 30       	cpi	r24, 0x03	; 3
     996:	11 f0       	breq	.+4      	; 0x99c <_ZN7Sd2Card10writeBlockEmPKh+0x52>
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	8d 87       	std	Y+13, r24	; 0x0d
     99c:	8d 85       	ldd	r24, Y+13	; 0x0d
     99e:	88 23       	and	r24, r24
     9a0:	89 f0       	breq	.+34     	; 0x9c4 <_ZN7Sd2Card10writeBlockEmPKh+0x7a>
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	ad 81       	ldd	r26, Y+5	; 0x05
     9a8:	be 81       	ldd	r27, Y+6	; 0x06
     9aa:	07 2e       	mov	r0, r23
     9ac:	79 e0       	ldi	r23, 0x09	; 9
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	aa 1f       	adc	r26, r26
     9b4:	bb 1f       	adc	r27, r27
     9b6:	7a 95       	dec	r23
     9b8:	d1 f7       	brne	.-12     	; 0x9ae <_ZN7Sd2Card10writeBlockEmPKh+0x64>
     9ba:	70 2d       	mov	r23, r0
     9bc:	8b 83       	std	Y+3, r24	; 0x03
     9be:	9c 83       	std	Y+4, r25	; 0x04
     9c0:	ad 83       	std	Y+5, r26	; 0x05
     9c2:	be 83       	std	Y+6, r27	; 0x06
  if (cardCommand(CMD24, blockNumber)) {
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	9a 81       	ldd	r25, Y+2	; 0x02
     9c8:	2b 81       	ldd	r18, Y+3	; 0x03
     9ca:	3c 81       	ldd	r19, Y+4	; 0x04
     9cc:	4d 81       	ldd	r20, Y+5	; 0x05
     9ce:	5e 81       	ldd	r21, Y+6	; 0x06
     9d0:	68 e1       	ldi	r22, 0x18	; 24
     9d2:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
     9d6:	8e 87       	std	Y+14, r24	; 0x0e
     9d8:	8e 85       	ldd	r24, Y+14	; 0x0e
     9da:	88 23       	and	r24, r24
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <_ZN7Sd2Card10writeBlockEmPKh+0x98>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	8e 87       	std	Y+14, r24	; 0x0e
     9e2:	8e 85       	ldd	r24, Y+14	; 0x0e
     9e4:	88 23       	and	r24, r24
     9e6:	31 f0       	breq	.+12     	; 0x9f4 <_ZN7Sd2Card10writeBlockEmPKh+0xaa>
    error(SD_CARD_ERROR_CMD24);
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	9a 81       	ldd	r25, Y+2	; 0x02
     9ec:	64 e0       	ldi	r22, 0x04	; 4
     9ee:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     9f2:	47 c0       	rjmp	.+142    	; 0xa82 <_ZN7Sd2Card10writeBlockEmPKh+0x138>
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	2f 81       	ldd	r18, Y+7	; 0x07
     9fa:	38 85       	ldd	r19, Y+8	; 0x08
     9fc:	6e ef       	ldi	r22, 0xFE	; 254
     9fe:	a9 01       	movw	r20, r18
     a00:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN7Sd2Card9writeDataEhPKh>
     a04:	1c 86       	std	Y+12, r1	; 0x0c
     a06:	88 23       	and	r24, r24
     a08:	11 f4       	brne	.+4      	; 0xa0e <_ZN7Sd2Card10writeBlockEmPKh+0xc4>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	8c 87       	std	Y+12, r24	; 0x0c
     a0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a10:	88 23       	and	r24, r24
     a12:	b9 f5       	brne	.+110    	; 0xa82 <_ZN7Sd2Card10writeBlockEmPKh+0x138>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
     a14:	89 81       	ldd	r24, Y+1	; 0x01
     a16:	9a 81       	ldd	r25, Y+2	; 0x02
     a18:	68 e5       	ldi	r22, 0x58	; 88
     a1a:	72 e0       	ldi	r23, 0x02	; 2
     a1c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7Sd2Card11waitNotBusyEj>
     a20:	1b 86       	std	Y+11, r1	; 0x0b
     a22:	88 23       	and	r24, r24
     a24:	11 f4       	brne	.+4      	; 0xa2a <_ZN7Sd2Card10writeBlockEmPKh+0xe0>
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	8b 87       	std	Y+11, r24	; 0x0b
     a2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a2c:	88 23       	and	r24, r24
     a2e:	31 f0       	breq	.+12     	; 0xa3c <_ZN7Sd2Card10writeBlockEmPKh+0xf2>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	9a 81       	ldd	r25, Y+2	; 0x02
     a34:	65 e1       	ldi	r22, 0x15	; 21
     a36:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     a3a:	23 c0       	rjmp	.+70     	; 0xa82 <_ZN7Sd2Card10writeBlockEmPKh+0x138>
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	9a 81       	ldd	r25, Y+2	; 0x02
     a40:	6d e0       	ldi	r22, 0x0D	; 13
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
     a4e:	88 23       	and	r24, r24
     a50:	21 f4       	brne	.+8      	; 0xa5a <_ZN7Sd2Card10writeBlockEmPKh+0x110>
     a52:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
     a56:	88 23       	and	r24, r24
     a58:	19 f0       	breq	.+6      	; 0xa60 <_ZN7Sd2Card10writeBlockEmPKh+0x116>
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	8a 87       	std	Y+10, r24	; 0x0a
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <_ZN7Sd2Card10writeBlockEmPKh+0x118>
     a60:	1a 86       	std	Y+10, r1	; 0x0a
     a62:	8a 85       	ldd	r24, Y+10	; 0x0a
     a64:	88 23       	and	r24, r24
     a66:	31 f0       	breq	.+12     	; 0xa74 <_ZN7Sd2Card10writeBlockEmPKh+0x12a>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	9a 81       	ldd	r25, Y+2	; 0x02
     a6c:	64 e1       	ldi	r22, 0x14	; 20
     a6e:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     a72:	07 c0       	rjmp	.+14     	; 0xa82 <_ZN7Sd2Card10writeBlockEmPKh+0x138>
    goto fail;
  }
  chipSelectHigh();
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	9a 81       	ldd	r25, Y+2	; 0x02
     a78:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	89 87       	std	Y+9, r24	; 0x09
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <_ZN7Sd2Card10writeBlockEmPKh+0x142>

 fail:
  chipSelectHigh();
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     a8a:	19 86       	std	Y+9, r1	; 0x09
     a8c:	89 85       	ldd	r24, Y+9	; 0x09
}
     a8e:	2e 96       	adiw	r28, 0x0e	; 14
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	cf 91       	pop	r28
     a9c:	df 91       	pop	r29
     a9e:	08 95       	ret

00000aa0 <_ZN7Sd2Card12readRegisterEhPv>:
    inBlock_ = 0;
  }
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
uint8_t Sd2Card::readRegister(uint8_t cmd, void* buf) {
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	df 93       	push	r29
     aa6:	cf 93       	push	r28
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	2c 97       	sbiw	r28, 0x0c	; 12
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	9e 83       	std	Y+6, r25	; 0x06
     aba:	8d 83       	std	Y+5, r24	; 0x05
     abc:	6f 83       	std	Y+7, r22	; 0x07
     abe:	59 87       	std	Y+9, r21	; 0x09
     ac0:	48 87       	std	Y+8, r20	; 0x08
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
     ac2:	88 85       	ldd	r24, Y+8	; 0x08
     ac4:	99 85       	ldd	r25, Y+9	; 0x09
     ac6:	9c 83       	std	Y+4, r25	; 0x04
     ac8:	8b 83       	std	Y+3, r24	; 0x03
  if (cardCommand(cmd, 0)) {
     aca:	8d 81       	ldd	r24, Y+5	; 0x05
     acc:	9e 81       	ldd	r25, Y+6	; 0x06
     ace:	6f 81       	ldd	r22, Y+7	; 0x07
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
     adc:	8c 87       	std	Y+12, r24	; 0x0c
     ade:	8c 85       	ldd	r24, Y+12	; 0x0c
     ae0:	88 23       	and	r24, r24
     ae2:	11 f0       	breq	.+4      	; 0xae8 <_ZN7Sd2Card12readRegisterEhPv+0x48>
     ae4:	e1 e0       	ldi	r30, 0x01	; 1
     ae6:	ec 87       	std	Y+12, r30	; 0x0c
     ae8:	8c 85       	ldd	r24, Y+12	; 0x0c
     aea:	88 23       	and	r24, r24
     aec:	31 f0       	breq	.+12     	; 0xafa <_ZN7Sd2Card12readRegisterEhPv+0x5a>
    error(SD_CARD_ERROR_READ_REG);
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	6e e0       	ldi	r22, 0x0E	; 14
     af4:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     af8:	2f c0       	rjmp	.+94     	; 0xb58 <_ZN7Sd2Card12readRegisterEhPv+0xb8>
    goto fail;
  }
  if (!waitStartBlock()) goto fail;
     afa:	8d 81       	ldd	r24, Y+5	; 0x05
     afc:	9e 81       	ldd	r25, Y+6	; 0x06
     afe:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN7Sd2Card14waitStartBlockEv>
     b02:	1b 86       	std	Y+11, r1	; 0x0b
     b04:	88 23       	and	r24, r24
     b06:	11 f4       	brne	.+4      	; 0xb0c <_ZN7Sd2Card12readRegisterEhPv+0x6c>
     b08:	f1 e0       	ldi	r31, 0x01	; 1
     b0a:	fb 87       	std	Y+11, r31	; 0x0b
     b0c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b0e:	88 23       	and	r24, r24
     b10:	19 f5       	brne	.+70     	; 0xb58 <_ZN7Sd2Card12readRegisterEhPv+0xb8>
  // transfer data
  for (uint16_t i = 0; i < 16; i++) dst[i] = spiRec();
     b12:	1a 82       	std	Y+2, r1	; 0x02
     b14:	19 82       	std	Y+1, r1	; 0x01
     b16:	10 c0       	rjmp	.+32     	; 0xb38 <_ZN7Sd2Card12readRegisterEhPv+0x98>
     b18:	2b 81       	ldd	r18, Y+3	; 0x03
     b1a:	3c 81       	ldd	r19, Y+4	; 0x04
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	9a 81       	ldd	r25, Y+2	; 0x02
     b20:	89 01       	movw	r16, r18
     b22:	08 0f       	add	r16, r24
     b24:	19 1f       	adc	r17, r25
     b26:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
     b2a:	f8 01       	movw	r30, r16
     b2c:	80 83       	st	Z, r24
     b2e:	89 81       	ldd	r24, Y+1	; 0x01
     b30:	9a 81       	ldd	r25, Y+2	; 0x02
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	9a 83       	std	Y+2, r25	; 0x02
     b36:	89 83       	std	Y+1, r24	; 0x01
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	80 31       	cpi	r24, 0x10	; 16
     b3e:	91 05       	cpc	r25, r1
     b40:	58 f3       	brcs	.-42     	; 0xb18 <_ZN7Sd2Card12readRegisterEhPv+0x78>
  spiRec();  // get first crc byte
     b42:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
  spiRec();  // get second crc byte
     b46:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
  chipSelectHigh();
     b4a:	8d 81       	ldd	r24, Y+5	; 0x05
     b4c:	9e 81       	ldd	r25, Y+6	; 0x06
     b4e:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
     b52:	f1 e0       	ldi	r31, 0x01	; 1
     b54:	fa 87       	std	Y+10, r31	; 0x0a
     b56:	05 c0       	rjmp	.+10     	; 0xb62 <_ZN7Sd2Card12readRegisterEhPv+0xc2>

 fail:
  chipSelectHigh();
     b58:	8d 81       	ldd	r24, Y+5	; 0x05
     b5a:	9e 81       	ldd	r25, Y+6	; 0x06
     b5c:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     b60:	1a 86       	std	Y+10, r1	; 0x0a
     b62:	8a 85       	ldd	r24, Y+10	; 0x0a
}
     b64:	2c 96       	adiw	r28, 0x0c	; 12
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <_ZN7Sd2Card7readCSDEP5csd_t>:
    return readRegister(CMD10, cid);
  }
  /**
   * Read a cards CSD register. The CSD contains Card-Specific Data that
   * provides information regarding access to the card's contents. */
  uint8_t readCSD(csd_t* csd) {
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <_ZN7Sd2Card7readCSDEP5csd_t+0x6>
     b80:	00 d0       	rcall	.+0      	; 0xb82 <_ZN7Sd2Card7readCSDEP5csd_t+0x8>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	7c 83       	std	Y+4, r23	; 0x04
     b8c:	6b 83       	std	Y+3, r22	; 0x03
    return readRegister(CMD9, csd);
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	2b 81       	ldd	r18, Y+3	; 0x03
     b94:	3c 81       	ldd	r19, Y+4	; 0x04
     b96:	69 e0       	ldi	r22, 0x09	; 9
     b98:	a9 01       	movw	r20, r18
     b9a:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_ZN7Sd2Card12readRegisterEhPv>
  }
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <_ZN7Sd2Card22eraseSingleBlockEnableEv>:
/** Determine if card supports single block erase.
 *
 * \return The value one, true, is returned if single block erase is supported.
 * The value zero, false, is returned if single block erase is not supported.
 */
uint8_t Sd2Card::eraseSingleBlockEnable(void) {
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	63 97       	sbiw	r28, 0x13	; 19
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	9a 8b       	std	Y+18, r25	; 0x12
     bc2:	89 8b       	std	Y+17, r24	; 0x11
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : 0;
     bc4:	89 89       	ldd	r24, Y+17	; 0x11
     bc6:	9a 89       	ldd	r25, Y+18	; 0x12
     bc8:	9e 01       	movw	r18, r28
     bca:	2f 5f       	subi	r18, 0xFF	; 255
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	b9 01       	movw	r22, r18
     bd0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_ZN7Sd2Card7readCSDEP5csd_t>
     bd4:	88 23       	and	r24, r24
     bd6:	41 f0       	breq	.+16     	; 0xbe8 <_ZN7Sd2Card22eraseSingleBlockEnableEv+0x3c>
     bd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     bda:	82 95       	swap	r24
     bdc:	86 95       	lsr	r24
     bde:	86 95       	lsr	r24
     be0:	83 70       	andi	r24, 0x03	; 3
     be2:	81 70       	andi	r24, 0x01	; 1
     be4:	8b 8b       	std	Y+19, r24	; 0x13
     be6:	01 c0       	rjmp	.+2      	; 0xbea <_ZN7Sd2Card22eraseSingleBlockEnableEv+0x3e>
     be8:	1b 8a       	std	Y+19, r1	; 0x13
     bea:	8b 89       	ldd	r24, Y+19	; 0x13
}
     bec:	63 96       	adiw	r28, 0x13	; 19
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <_ZN7Sd2Card8cardSizeEv>:
 * Determine the size of an SD flash memory card.
 *
 * \return The number of 512 byte data blocks in the card
 *         or zero if an error occurs.
 */
uint32_t Sd2Card::cardSize(void) {
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	6f 97       	sbiw	r28, 0x1f	; 31
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	de bf       	out	0x3e, r29	; 62
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	9a 8f       	std	Y+26, r25	; 0x1a
     c18:	89 8f       	std	Y+25, r24	; 0x19
  csd_t csd;
  if (!readCSD(&csd)) return 0;
     c1a:	89 8d       	ldd	r24, Y+25	; 0x19
     c1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c1e:	9e 01       	movw	r18, r28
     c20:	27 5f       	subi	r18, 0xF7	; 247
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	b9 01       	movw	r22, r18
     c26:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_ZN7Sd2Card7readCSDEP5csd_t>
     c2a:	1f 8e       	std	Y+31, r1	; 0x1f
     c2c:	88 23       	and	r24, r24
     c2e:	11 f4       	brne	.+4      	; 0xc34 <_ZN7Sd2Card8cardSizeEv+0x36>
     c30:	01 e0       	ldi	r16, 0x01	; 1
     c32:	0f 8f       	std	Y+31, r16	; 0x1f
     c34:	1f 8d       	ldd	r17, Y+31	; 0x1f
     c36:	11 23       	and	r17, r17
     c38:	29 f0       	breq	.+10     	; 0xc44 <_ZN7Sd2Card8cardSizeEv+0x46>
     c3a:	1b 8e       	std	Y+27, r1	; 0x1b
     c3c:	1c 8e       	std	Y+28, r1	; 0x1c
     c3e:	1d 8e       	std	Y+29, r1	; 0x1d
     c40:	1e 8e       	std	Y+30, r1	; 0x1e
     c42:	98 c0       	rjmp	.+304    	; 0xd74 <_ZN7Sd2Card8cardSizeEv+0x176>
  if (csd.v1.csd_ver == 0) {
     c44:	89 85       	ldd	r24, Y+9	; 0x09
     c46:	80 7c       	andi	r24, 0xC0	; 192
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <_ZN7Sd2Card8cardSizeEv+0x50>
     c4c:	4b c0       	rjmp	.+150    	; 0xce4 <_ZN7Sd2Card8cardSizeEv+0xe6>
    uint8_t read_bl_len = csd.v1.read_bl_len;
     c4e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c50:	8f 70       	andi	r24, 0x0F	; 15
     c52:	88 87       	std	Y+8, r24	; 0x08
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
     c54:	8f 85       	ldd	r24, Y+15	; 0x0f
     c56:	83 70       	andi	r24, 0x03	; 3
     c58:	88 2f       	mov	r24, r24
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	9c 01       	movw	r18, r24
     c5e:	32 2f       	mov	r19, r18
     c60:	22 27       	eor	r18, r18
     c62:	33 0f       	add	r19, r19
     c64:	33 0f       	add	r19, r19
     c66:	88 89       	ldd	r24, Y+16	; 0x10
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	28 2b       	or	r18, r24
     c76:	39 2b       	or	r19, r25
     c78:	89 89       	ldd	r24, Y+17	; 0x11
     c7a:	82 95       	swap	r24
     c7c:	86 95       	lsr	r24
     c7e:	86 95       	lsr	r24
     c80:	83 70       	andi	r24, 0x03	; 3
     c82:	88 2f       	mov	r24, r24
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	82 2b       	or	r24, r18
     c88:	93 2b       	or	r25, r19
     c8a:	9f 83       	std	Y+7, r25	; 0x07
     c8c:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
     c8e:	8a 89       	ldd	r24, Y+18	; 0x12
     c90:	83 70       	andi	r24, 0x03	; 3
     c92:	88 2f       	mov	r24, r24
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	98 2f       	mov	r25, r24
     c9c:	8b 89       	ldd	r24, Y+19	; 0x13
     c9e:	88 1f       	adc	r24, r24
     ca0:	88 27       	eor	r24, r24
     ca2:	88 1f       	adc	r24, r24
     ca4:	89 2b       	or	r24, r25
     ca6:	8d 83       	std	Y+5, r24	; 0x05
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
     ca8:	8e 81       	ldd	r24, Y+6	; 0x06
     caa:	9f 81       	ldd	r25, Y+7	; 0x07
     cac:	01 96       	adiw	r24, 0x01	; 1
     cae:	ac 01       	movw	r20, r24
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	8d 81       	ldd	r24, Y+5	; 0x05
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	88 85       	ldd	r24, Y+8	; 0x08
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	82 0f       	add	r24, r18
     cc2:	93 1f       	adc	r25, r19
     cc4:	07 97       	sbiw	r24, 0x07	; 7
     cc6:	8a 01       	movw	r16, r20
     cc8:	9b 01       	movw	r18, r22
     cca:	08 2e       	mov	r0, r24
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <_ZN7Sd2Card8cardSizeEv+0xd8>
     cce:	00 0f       	add	r16, r16
     cd0:	11 1f       	adc	r17, r17
     cd2:	22 1f       	adc	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	0a 94       	dec	r0
     cd8:	d2 f7       	brpl	.-12     	; 0xcce <_ZN7Sd2Card8cardSizeEv+0xd0>
     cda:	0b 8f       	std	Y+27, r16	; 0x1b
     cdc:	1c 8f       	std	Y+28, r17	; 0x1c
     cde:	2d 8f       	std	Y+29, r18	; 0x1d
     ce0:	3e 8f       	std	Y+30, r19	; 0x1e
     ce2:	48 c0       	rjmp	.+144    	; 0xd74 <_ZN7Sd2Card8cardSizeEv+0x176>
  } else if (csd.v2.csd_ver == 1) {
     ce4:	89 85       	ldd	r24, Y+9	; 0x09
     ce6:	80 7c       	andi	r24, 0xC0	; 192
     ce8:	80 34       	cpi	r24, 0x40	; 64
     cea:	d9 f5       	brne	.+118    	; 0xd62 <_ZN7Sd2Card8cardSizeEv+0x164>
    uint32_t c_size = ((uint32_t)csd.v2.c_size_high << 16)
                      | (csd.v2.c_size_mid << 8) | csd.v2.c_size_low;
     cec:	88 89       	ldd	r24, Y+16	; 0x10
     cee:	86 95       	lsr	r24
     cf0:	86 95       	lsr	r24
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a0 e0       	ldi	r26, 0x00	; 0
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	ac 01       	movw	r20, r24
     cfc:	33 27       	eor	r19, r19
     cfe:	22 27       	eor	r18, r18
     d00:	89 89       	ldd	r24, Y+17	; 0x11
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	98 2f       	mov	r25, r24
     d08:	88 27       	eor	r24, r24
     d0a:	aa 27       	eor	r26, r26
     d0c:	97 fd       	sbrc	r25, 7
     d0e:	a0 95       	com	r26
     d10:	ba 2f       	mov	r27, r26
     d12:	28 2b       	or	r18, r24
     d14:	39 2b       	or	r19, r25
     d16:	4a 2b       	or	r20, r26
     d18:	5b 2b       	or	r21, r27
     d1a:	8a 89       	ldd	r24, Y+18	; 0x12
     d1c:	88 2f       	mov	r24, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a0 e0       	ldi	r26, 0x00	; 0
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	82 2b       	or	r24, r18
     d26:	93 2b       	or	r25, r19
     d28:	a4 2b       	or	r26, r20
     d2a:	b5 2b       	or	r27, r21
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	ab 83       	std	Y+3, r26	; 0x03
     d32:	bc 83       	std	Y+4, r27	; 0x04
    return (c_size + 1) << 10;
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	ab 81       	ldd	r26, Y+3	; 0x03
     d3a:	bc 81       	ldd	r27, Y+4	; 0x04
     d3c:	01 96       	adiw	r24, 0x01	; 1
     d3e:	a1 1d       	adc	r26, r1
     d40:	b1 1d       	adc	r27, r1
     d42:	9c 01       	movw	r18, r24
     d44:	ad 01       	movw	r20, r26
     d46:	01 2e       	mov	r0, r17
     d48:	1a e0       	ldi	r17, 0x0A	; 10
     d4a:	22 0f       	add	r18, r18
     d4c:	33 1f       	adc	r19, r19
     d4e:	44 1f       	adc	r20, r20
     d50:	55 1f       	adc	r21, r21
     d52:	1a 95       	dec	r17
     d54:	d1 f7       	brne	.-12     	; 0xd4a <_ZN7Sd2Card8cardSizeEv+0x14c>
     d56:	10 2d       	mov	r17, r0
     d58:	2b 8f       	std	Y+27, r18	; 0x1b
     d5a:	3c 8f       	std	Y+28, r19	; 0x1c
     d5c:	4d 8f       	std	Y+29, r20	; 0x1d
     d5e:	5e 8f       	std	Y+30, r21	; 0x1e
     d60:	09 c0       	rjmp	.+18     	; 0xd74 <_ZN7Sd2Card8cardSizeEv+0x176>
  } else {
    error(SD_CARD_ERROR_BAD_CSD);
     d62:	89 8d       	ldd	r24, Y+25	; 0x19
     d64:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d66:	69 e0       	ldi	r22, 0x09	; 9
     d68:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    return 0;
     d6c:	1b 8e       	std	Y+27, r1	; 0x1b
     d6e:	1c 8e       	std	Y+28, r1	; 0x1c
     d70:	1d 8e       	std	Y+29, r1	; 0x1d
     d72:	1e 8e       	std	Y+30, r1	; 0x1e
     d74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d78:	ad 8d       	ldd	r26, Y+29	; 0x1d
     d7a:	be 8d       	ldd	r27, Y+30	; 0x1e
  }
}
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	6f 96       	adiw	r28, 0x1f	; 31
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	08 95       	ret

00000d96 <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	67 97       	sbiw	r28, 0x17	; 23
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	9e 83       	std	Y+6, r25	; 0x06
     db4:	8d 83       	std	Y+5, r24	; 0x05
     db6:	4f 83       	std	Y+7, r20	; 0x07
     db8:	58 87       	std	Y+8, r21	; 0x08
     dba:	69 87       	std	Y+9, r22	; 0x09
     dbc:	7a 87       	std	Y+10, r23	; 0x0a
     dbe:	3c 87       	std	Y+12, r19	; 0x0c
     dc0:	2b 87       	std	Y+11, r18	; 0x0b
     dc2:	1e 87       	std	Y+14, r17	; 0x0e
     dc4:	0d 87       	std	Y+13, r16	; 0x0d
     dc6:	f8 8a       	std	Y+16, r15	; 0x10
     dc8:	ef 86       	std	Y+15, r14	; 0x0f
  uint16_t n;
  if (count == 0) return true;
     dca:	8d 85       	ldd	r24, Y+13	; 0x0d
     dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	19 f4       	brne	.+6      	; 0xdd8 <_ZN7Sd2Card8readDataEmjjPh+0x42>
     dd2:	21 e0       	ldi	r18, 0x01	; 1
     dd4:	2e 8b       	std	Y+22, r18	; 0x16
     dd6:	0c c1       	rjmp	.+536    	; 0xff0 <_ZN7Sd2Card8readDataEmjjPh+0x25a>
  if ((count + offset) > 512) {
     dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dda:	9e 85       	ldd	r25, Y+14	; 0x0e
     ddc:	2b 85       	ldd	r18, Y+11	; 0x0b
     dde:	3c 85       	ldd	r19, Y+12	; 0x0c
     de0:	82 0f       	add	r24, r18
     de2:	93 1f       	adc	r25, r19
     de4:	22 e0       	ldi	r18, 0x02	; 2
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	92 07       	cpc	r25, r18
     dea:	08 f0       	brcs	.+2      	; 0xdee <_ZN7Sd2Card8readDataEmjjPh+0x58>
     dec:	fc c0       	rjmp	.+504    	; 0xfe6 <_ZN7Sd2Card8readDataEmjjPh+0x250>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
     dee:	ed 81       	ldd	r30, Y+5	; 0x05
     df0:	fe 81       	ldd	r31, Y+6	; 0x06
     df2:	86 81       	ldd	r24, Z+6	; 0x06
     df4:	88 23       	and	r24, r24
     df6:	c9 f0       	breq	.+50     	; 0xe2a <_ZN7Sd2Card8readDataEmjjPh+0x94>
     df8:	ed 81       	ldd	r30, Y+5	; 0x05
     dfa:	fe 81       	ldd	r31, Y+6	; 0x06
     dfc:	20 81       	ld	r18, Z
     dfe:	31 81       	ldd	r19, Z+1	; 0x01
     e00:	42 81       	ldd	r20, Z+2	; 0x02
     e02:	53 81       	ldd	r21, Z+3	; 0x03
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
     e06:	98 85       	ldd	r25, Y+8	; 0x08
     e08:	a9 85       	ldd	r26, Y+9	; 0x09
     e0a:	ba 85       	ldd	r27, Y+10	; 0x0a
     e0c:	28 17       	cp	r18, r24
     e0e:	39 07       	cpc	r19, r25
     e10:	4a 07       	cpc	r20, r26
     e12:	5b 07       	cpc	r21, r27
     e14:	51 f4       	brne	.+20     	; 0xe2a <_ZN7Sd2Card8readDataEmjjPh+0x94>
     e16:	ed 81       	ldd	r30, Y+5	; 0x05
     e18:	fe 81       	ldd	r31, Y+6	; 0x06
     e1a:	27 81       	ldd	r18, Z+7	; 0x07
     e1c:	30 85       	ldd	r19, Z+8	; 0x08
     e1e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e20:	9c 85       	ldd	r25, Y+12	; 0x0c
     e22:	82 17       	cp	r24, r18
     e24:	93 07       	cpc	r25, r19
     e26:	08 f0       	brcs	.+2      	; 0xe2a <_ZN7Sd2Card8readDataEmjjPh+0x94>
     e28:	54 c0       	rjmp	.+168    	; 0xed2 <_ZN7Sd2Card8readDataEmjjPh+0x13c>
    block_ = block;
     e2a:	ed 81       	ldd	r30, Y+5	; 0x05
     e2c:	fe 81       	ldd	r31, Y+6	; 0x06
     e2e:	8f 81       	ldd	r24, Y+7	; 0x07
     e30:	98 85       	ldd	r25, Y+8	; 0x08
     e32:	a9 85       	ldd	r26, Y+9	; 0x09
     e34:	ba 85       	ldd	r27, Y+10	; 0x0a
     e36:	80 83       	st	Z, r24
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	a2 83       	std	Z+2, r26	; 0x02
     e3c:	b3 83       	std	Z+3, r27	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZNK7Sd2Card4typeEv>
     e46:	1d 8a       	std	Y+21, r1	; 0x15
     e48:	83 30       	cpi	r24, 0x03	; 3
     e4a:	11 f0       	breq	.+4      	; 0xe50 <_ZN7Sd2Card8readDataEmjjPh+0xba>
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	8d 8b       	std	Y+21, r24	; 0x15
     e50:	2d 89       	ldd	r18, Y+21	; 0x15
     e52:	22 23       	and	r18, r18
     e54:	89 f0       	breq	.+34     	; 0xe78 <_ZN7Sd2Card8readDataEmjjPh+0xe2>
     e56:	8f 81       	ldd	r24, Y+7	; 0x07
     e58:	98 85       	ldd	r25, Y+8	; 0x08
     e5a:	a9 85       	ldd	r26, Y+9	; 0x09
     e5c:	ba 85       	ldd	r27, Y+10	; 0x0a
     e5e:	07 2e       	mov	r0, r23
     e60:	79 e0       	ldi	r23, 0x09	; 9
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	aa 1f       	adc	r26, r26
     e68:	bb 1f       	adc	r27, r27
     e6a:	7a 95       	dec	r23
     e6c:	d1 f7       	brne	.-12     	; 0xe62 <_ZN7Sd2Card8readDataEmjjPh+0xcc>
     e6e:	70 2d       	mov	r23, r0
     e70:	8f 83       	std	Y+7, r24	; 0x07
     e72:	98 87       	std	Y+8, r25	; 0x08
     e74:	a9 87       	std	Y+9, r26	; 0x09
     e76:	ba 87       	std	Y+10, r27	; 0x0a
    if (cardCommand(CMD17, block)) {
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	2f 81       	ldd	r18, Y+7	; 0x07
     e7e:	38 85       	ldd	r19, Y+8	; 0x08
     e80:	49 85       	ldd	r20, Y+9	; 0x09
     e82:	5a 85       	ldd	r21, Y+10	; 0x0a
     e84:	61 e1       	ldi	r22, 0x11	; 17
     e86:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
     e8a:	8f 8b       	std	Y+23, r24	; 0x17
     e8c:	8f 89       	ldd	r24, Y+23	; 0x17
     e8e:	88 23       	and	r24, r24
     e90:	11 f0       	breq	.+4      	; 0xe96 <_ZN7Sd2Card8readDataEmjjPh+0x100>
     e92:	21 e0       	ldi	r18, 0x01	; 1
     e94:	2f 8b       	std	Y+23, r18	; 0x17
     e96:	8f 89       	ldd	r24, Y+23	; 0x17
     e98:	88 23       	and	r24, r24
     e9a:	31 f0       	breq	.+12     	; 0xea8 <_ZN7Sd2Card8readDataEmjjPh+0x112>
      error(SD_CARD_ERROR_CMD17);
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ea0:	63 e0       	ldi	r22, 0x03	; 3
     ea2:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
     ea6:	9f c0       	rjmp	.+318    	; 0xfe6 <_ZN7Sd2Card8readDataEmjjPh+0x250>
      goto fail;
    }
    if (!waitStartBlock()) {
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN7Sd2Card14waitStartBlockEv>
     eb0:	1c 8a       	std	Y+20, r1	; 0x14
     eb2:	88 23       	and	r24, r24
     eb4:	11 f4       	brne	.+4      	; 0xeba <_ZN7Sd2Card8readDataEmjjPh+0x124>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	8c 8b       	std	Y+20, r24	; 0x14
     eba:	2c 89       	ldd	r18, Y+20	; 0x14
     ebc:	22 23       	and	r18, r18
     ebe:	09 f0       	breq	.+2      	; 0xec2 <_ZN7Sd2Card8readDataEmjjPh+0x12c>
     ec0:	92 c0       	rjmp	.+292    	; 0xfe6 <_ZN7Sd2Card8readDataEmjjPh+0x250>
      goto fail;
    }
    offset_ = 0;
     ec2:	ed 81       	ldd	r30, Y+5	; 0x05
     ec4:	fe 81       	ldd	r31, Y+6	; 0x06
     ec6:	10 86       	std	Z+8, r1	; 0x08
     ec8:	17 82       	std	Z+7, r1	; 0x07
    inBlock_ = 1;
     eca:	ed 81       	ldd	r30, Y+5	; 0x05
     ecc:	fe 81       	ldd	r31, Y+6	; 0x06
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	86 83       	std	Z+6, r24	; 0x06
  }

#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;
     ed2:	ef e2       	ldi	r30, 0x2F	; 47
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	80 83       	st	Z, r24
     eda:	18 c0       	rjmp	.+48     	; 0xf0c <_ZN7Sd2Card8readDataEmjjPh+0x176>

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
     edc:	ee e2       	ldi	r30, 0x2E	; 46
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	1b 8a       	std	Y+19, r1	; 0x13
     ee4:	88 23       	and	r24, r24
     ee6:	14 f0       	brlt	.+4      	; 0xeec <_ZN7Sd2Card8readDataEmjjPh+0x156>
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	8b 8b       	std	Y+19, r24	; 0x13
     eec:	2b 89       	ldd	r18, Y+19	; 0x13
     eee:	22 23       	and	r18, r18
     ef0:	a9 f7       	brne	.-22     	; 0xedc <_ZN7Sd2Card8readDataEmjjPh+0x146>
    SPDR = 0XFF;
     ef2:	ef e2       	ldi	r30, 0x2F	; 47
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	80 83       	st	Z, r24
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
     efa:	ed 81       	ldd	r30, Y+5	; 0x05
     efc:	fe 81       	ldd	r31, Y+6	; 0x06
     efe:	87 81       	ldd	r24, Z+7	; 0x07
     f00:	90 85       	ldd	r25, Z+8	; 0x08
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	ed 81       	ldd	r30, Y+5	; 0x05
     f06:	fe 81       	ldd	r31, Y+6	; 0x06
     f08:	90 87       	std	Z+8, r25	; 0x08
     f0a:	87 83       	std	Z+7, r24	; 0x07
     f0c:	ed 81       	ldd	r30, Y+5	; 0x05
     f0e:	fe 81       	ldd	r31, Y+6	; 0x06
     f10:	27 81       	ldd	r18, Z+7	; 0x07
     f12:	30 85       	ldd	r19, Z+8	; 0x08
     f14:	8b 85       	ldd	r24, Y+11	; 0x0b
     f16:	9c 85       	ldd	r25, Y+12	; 0x0c
     f18:	28 17       	cp	r18, r24
     f1a:	39 07       	cpc	r19, r25
     f1c:	f8 f2       	brcs	.-66     	; 0xedc <_ZN7Sd2Card8readDataEmjjPh+0x146>
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
     f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f20:	9e 85       	ldd	r25, Y+14	; 0x0e
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
  for (uint16_t i = 0; i < n; i++) {
     f28:	1a 82       	std	Y+2, r1	; 0x02
     f2a:	19 82       	std	Y+1, r1	; 0x01
     f2c:	1f c0       	rjmp	.+62     	; 0xf6c <_ZN7Sd2Card8readDataEmjjPh+0x1d6>
    while (!(SPSR & (1 << SPIF)));
     f2e:	ee e2       	ldi	r30, 0x2E	; 46
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	1a 8a       	std	Y+18, r1	; 0x12
     f36:	88 23       	and	r24, r24
     f38:	14 f0       	brlt	.+4      	; 0xf3e <_ZN7Sd2Card8readDataEmjjPh+0x1a8>
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	8a 8b       	std	Y+18, r24	; 0x12
     f3e:	2a 89       	ldd	r18, Y+18	; 0x12
     f40:	22 23       	and	r18, r18
     f42:	a9 f7       	brne	.-22     	; 0xf2e <_ZN7Sd2Card8readDataEmjjPh+0x198>
    dst[i] = SPDR;
     f44:	2f 85       	ldd	r18, Y+15	; 0x0f
     f46:	38 89       	ldd	r19, Y+16	; 0x10
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	d9 01       	movw	r26, r18
     f4e:	a8 0f       	add	r26, r24
     f50:	b9 1f       	adc	r27, r25
     f52:	ef e2       	ldi	r30, 0x2F	; 47
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	8c 93       	st	X, r24
    SPDR = 0XFF;
     f5a:	ef e2       	ldi	r30, 0x2F	; 47
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	80 83       	st	Z, r24
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	29 81       	ldd	r18, Y+1	; 0x01
     f6e:	3a 81       	ldd	r19, Y+2	; 0x02
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	d0 f2       	brcs	.-76     	; 0xf2e <_ZN7Sd2Card8readDataEmjjPh+0x198>
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
  }
  // wait for last byte
  while (!(SPSR & (1 << SPIF)));
     f7a:	ee e2       	ldi	r30, 0x2E	; 46
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	19 8a       	std	Y+17, r1	; 0x11
     f82:	88 23       	and	r24, r24
     f84:	14 f0       	brlt	.+4      	; 0xf8a <_ZN7Sd2Card8readDataEmjjPh+0x1f4>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	89 8b       	std	Y+17, r24	; 0x11
     f8a:	29 89       	ldd	r18, Y+17	; 0x11
     f8c:	22 23       	and	r18, r18
     f8e:	a9 f7       	brne	.-22     	; 0xf7a <_ZN7Sd2Card8readDataEmjjPh+0x1e4>
  dst[n] = SPDR;
     f90:	2f 85       	ldd	r18, Y+15	; 0x0f
     f92:	38 89       	ldd	r19, Y+16	; 0x10
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	9c 81       	ldd	r25, Y+4	; 0x04
     f98:	d9 01       	movw	r26, r18
     f9a:	a8 0f       	add	r26, r24
     f9c:	b9 1f       	adc	r27, r25
     f9e:	ef e2       	ldi	r30, 0x2F	; 47
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8c 93       	st	X, r24
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
     fa6:	ed 81       	ldd	r30, Y+5	; 0x05
     fa8:	fe 81       	ldd	r31, Y+6	; 0x06
     faa:	27 81       	ldd	r18, Z+7	; 0x07
     fac:	30 85       	ldd	r19, Z+8	; 0x08
     fae:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb2:	82 0f       	add	r24, r18
     fb4:	93 1f       	adc	r25, r19
     fb6:	ed 81       	ldd	r30, Y+5	; 0x05
     fb8:	fe 81       	ldd	r31, Y+6	; 0x06
     fba:	90 87       	std	Z+8, r25	; 0x08
     fbc:	87 83       	std	Z+7, r24	; 0x07
  if (!partialBlockRead_ || offset_ >= 512) {
     fbe:	ed 81       	ldd	r30, Y+5	; 0x05
     fc0:	fe 81       	ldd	r31, Y+6	; 0x06
     fc2:	81 85       	ldd	r24, Z+9	; 0x09
     fc4:	88 23       	and	r24, r24
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <_ZN7Sd2Card8readDataEmjjPh+0x242>
     fc8:	ed 81       	ldd	r30, Y+5	; 0x05
     fca:	fe 81       	ldd	r31, Y+6	; 0x06
     fcc:	87 81       	ldd	r24, Z+7	; 0x07
     fce:	90 85       	ldd	r25, Z+8	; 0x08
     fd0:	22 e0       	ldi	r18, 0x02	; 2
     fd2:	80 30       	cpi	r24, 0x00	; 0
     fd4:	92 07       	cpc	r25, r18
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <_ZN7Sd2Card8readDataEmjjPh+0x24a>
    // read rest of data, checksum and set chip select high
    readEnd();
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	0e 94 11 03 	call	0x622	; 0x622 <_ZN7Sd2Card7readEndEv>
  }
  return true;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8e 8b       	std	Y+22, r24	; 0x16
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <_ZN7Sd2Card8readDataEmjjPh+0x25a>

 fail:
  chipSelectHigh();
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
     fee:	1e 8a       	std	Y+22, r1	; 0x16
     ff0:	8e 89       	ldd	r24, Y+22	; 0x16
}
     ff2:	67 96       	adiw	r28, 0x17	; 23
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	ef 90       	pop	r14
    100a:	08 95       	ret

0000100c <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    100c:	ef 92       	push	r14
    100e:	ff 92       	push	r15
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	28 97       	sbiw	r28, 0x08	; 8
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	4b 83       	std	Y+3, r20	; 0x03
    102e:	5c 83       	std	Y+4, r21	; 0x04
    1030:	6d 83       	std	Y+5, r22	; 0x05
    1032:	7e 83       	std	Y+6, r23	; 0x06
    1034:	38 87       	std	Y+8, r19	; 0x08
    1036:	2f 83       	std	Y+7, r18	; 0x07
  return readData(block, 0, 512, dst);
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	9a 81       	ldd	r25, Y+2	; 0x02
    103c:	2b 81       	ldd	r18, Y+3	; 0x03
    103e:	3c 81       	ldd	r19, Y+4	; 0x04
    1040:	4d 81       	ldd	r20, Y+5	; 0x05
    1042:	5e 81       	ldd	r21, Y+6	; 0x06
    1044:	ef 81       	ldd	r30, Y+7	; 0x07
    1046:	f8 85       	ldd	r31, Y+8	; 0x08
    1048:	ba 01       	movw	r22, r20
    104a:	a9 01       	movw	r20, r18
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	00 e0       	ldi	r16, 0x00	; 0
    1052:	12 e0       	ldi	r17, 0x02	; 2
    1054:	7f 01       	movw	r14, r30
    1056:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN7Sd2Card8readDataEmjjPh>
}
    105a:	28 96       	adiw	r28, 0x08	; 8
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	08 95       	ret

00001074 <_ZN7Sd2Card5eraseEmm>:
 * single block erase.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::erase(uint32_t firstBlock, uint32_t lastBlock) {
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	2e 97       	sbiw	r28, 0x0e	; 14
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	4b 83       	std	Y+3, r20	; 0x03
    1092:	5c 83       	std	Y+4, r21	; 0x04
    1094:	6d 83       	std	Y+5, r22	; 0x05
    1096:	7e 83       	std	Y+6, r23	; 0x06
    1098:	0f 83       	std	Y+7, r16	; 0x07
    109a:	18 87       	std	Y+8, r17	; 0x08
    109c:	29 87       	std	Y+9, r18	; 0x09
    109e:	3a 87       	std	Y+10, r19	; 0x0a
  if (!eraseSingleBlockEnable()) {
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN7Sd2Card22eraseSingleBlockEnableEv>
    10a8:	1e 86       	std	Y+14, r1	; 0x0e
    10aa:	88 23       	and	r24, r24
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <_ZN7Sd2Card5eraseEmm+0x3e>
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	8e 87       	std	Y+14, r24	; 0x0e
    10b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    10b4:	88 23       	and	r24, r24
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <_ZN7Sd2Card5eraseEmm+0x50>
    error(SD_CARD_ERROR_ERASE_SINGLE_BLOCK);
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	6b e0       	ldi	r22, 0x0B	; 11
    10be:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    10c2:	70 c0       	rjmp	.+224    	; 0x11a4 <_ZN7Sd2Card5eraseEmm+0x130>
    goto fail;
  }
  if (type_ != SD_CARD_TYPE_SDHC) {
    10c4:	e9 81       	ldd	r30, Y+1	; 0x01
    10c6:	fa 81       	ldd	r31, Y+2	; 0x02
    10c8:	83 85       	ldd	r24, Z+11	; 0x0b
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	11 f1       	breq	.+68     	; 0x1112 <_ZN7Sd2Card5eraseEmm+0x9e>
    firstBlock <<= 9;
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	ad 81       	ldd	r26, Y+5	; 0x05
    10d4:	be 81       	ldd	r27, Y+6	; 0x06
    10d6:	07 2e       	mov	r0, r23
    10d8:	79 e0       	ldi	r23, 0x09	; 9
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	aa 1f       	adc	r26, r26
    10e0:	bb 1f       	adc	r27, r27
    10e2:	7a 95       	dec	r23
    10e4:	d1 f7       	brne	.-12     	; 0x10da <_ZN7Sd2Card5eraseEmm+0x66>
    10e6:	70 2d       	mov	r23, r0
    10e8:	8b 83       	std	Y+3, r24	; 0x03
    10ea:	9c 83       	std	Y+4, r25	; 0x04
    10ec:	ad 83       	std	Y+5, r26	; 0x05
    10ee:	be 83       	std	Y+6, r27	; 0x06
    lastBlock <<= 9;
    10f0:	8f 81       	ldd	r24, Y+7	; 0x07
    10f2:	98 85       	ldd	r25, Y+8	; 0x08
    10f4:	a9 85       	ldd	r26, Y+9	; 0x09
    10f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    10f8:	07 2e       	mov	r0, r23
    10fa:	79 e0       	ldi	r23, 0x09	; 9
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	aa 1f       	adc	r26, r26
    1102:	bb 1f       	adc	r27, r27
    1104:	7a 95       	dec	r23
    1106:	d1 f7       	brne	.-12     	; 0x10fc <_ZN7Sd2Card5eraseEmm+0x88>
    1108:	70 2d       	mov	r23, r0
    110a:	8f 83       	std	Y+7, r24	; 0x07
    110c:	98 87       	std	Y+8, r25	; 0x08
    110e:	a9 87       	std	Y+9, r26	; 0x09
    1110:	ba 87       	std	Y+10, r27	; 0x0a
  }
  if (cardCommand(CMD32, firstBlock)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	2b 81       	ldd	r18, Y+3	; 0x03
    1118:	3c 81       	ldd	r19, Y+4	; 0x04
    111a:	4d 81       	ldd	r20, Y+5	; 0x05
    111c:	5e 81       	ldd	r21, Y+6	; 0x06
    111e:	60 e2       	ldi	r22, 0x20	; 32
    1120:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
    1124:	88 23       	and	r24, r24
    1126:	b1 f4       	brne	.+44     	; 0x1154 <_ZN7Sd2Card5eraseEmm+0xe0>
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	2f 81       	ldd	r18, Y+7	; 0x07
    112e:	38 85       	ldd	r19, Y+8	; 0x08
    1130:	49 85       	ldd	r20, Y+9	; 0x09
    1132:	5a 85       	ldd	r21, Y+10	; 0x0a
    1134:	61 e2       	ldi	r22, 0x21	; 33
    1136:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
    113a:	88 23       	and	r24, r24
    113c:	59 f4       	brne	.+22     	; 0x1154 <_ZN7Sd2Card5eraseEmm+0xe0>
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	66 e2       	ldi	r22, 0x26	; 38
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
    1150:	88 23       	and	r24, r24
    1152:	19 f0       	breq	.+6      	; 0x115a <_ZN7Sd2Card5eraseEmm+0xe6>
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	8d 87       	std	Y+13, r24	; 0x0d
    1158:	01 c0       	rjmp	.+2      	; 0x115c <_ZN7Sd2Card5eraseEmm+0xe8>
    115a:	1d 86       	std	Y+13, r1	; 0x0d
    115c:	8d 85       	ldd	r24, Y+13	; 0x0d
    115e:	88 23       	and	r24, r24
    1160:	31 f0       	breq	.+12     	; 0x116e <_ZN7Sd2Card5eraseEmm+0xfa>
    || cardCommand(CMD33, lastBlock)
    || cardCommand(CMD38, 0)) {
      error(SD_CARD_ERROR_ERASE);
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	9a 81       	ldd	r25, Y+2	; 0x02
    1166:	6a e0       	ldi	r22, 0x0A	; 10
    1168:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    116c:	1b c0       	rjmp	.+54     	; 0x11a4 <_ZN7Sd2Card5eraseEmm+0x130>
      goto fail;
  }
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	60 e1       	ldi	r22, 0x10	; 16
    1174:	77 e2       	ldi	r23, 0x27	; 39
    1176:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN7Sd2Card11waitNotBusyEj>
    117a:	1c 86       	std	Y+12, r1	; 0x0c
    117c:	88 23       	and	r24, r24
    117e:	11 f4       	brne	.+4      	; 0x1184 <_ZN7Sd2Card5eraseEmm+0x110>
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	8c 87       	std	Y+12, r24	; 0x0c
    1184:	8c 85       	ldd	r24, Y+12	; 0x0c
    1186:	88 23       	and	r24, r24
    1188:	31 f0       	breq	.+12     	; 0x1196 <_ZN7Sd2Card5eraseEmm+0x122>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	6c e0       	ldi	r22, 0x0C	; 12
    1190:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    1194:	07 c0       	rjmp	.+14     	; 0x11a4 <_ZN7Sd2Card5eraseEmm+0x130>
    goto fail;
  }
  chipSelectHigh();
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	8b 87       	std	Y+11, r24	; 0x0b
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <_ZN7Sd2Card5eraseEmm+0x13a>

 fail:
  chipSelectHigh();
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	9a 81       	ldd	r25, Y+2	; 0x02
    11a8:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    11ac:	1b 86       	std	Y+11, r1	; 0x0b
    11ae:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    11b0:	2e 96       	adiw	r28, 0x0e	; 14
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	08 95       	ret

000011c6 <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	6a 97       	sbiw	r28, 0x1a	; 26
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	cd bf       	out	0x3d, r28	; 61
    11da:	9b 87       	std	Y+11, r25	; 0x0b
    11dc:	8a 87       	std	Y+10, r24	; 0x0a
    11de:	6c 87       	std	Y+12, r22	; 0x0c
    11e0:	4d 87       	std	Y+13, r20	; 0x0d
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    11e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    11e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    11e6:	13 86       	std	Z+11, r1	; 0x0b
    11e8:	ea 85       	ldd	r30, Y+10	; 0x0a
    11ea:	fb 85       	ldd	r31, Y+11	; 0x0b
    11ec:	83 85       	ldd	r24, Z+11	; 0x0b
    11ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    11f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    11f2:	81 87       	std	Z+9, r24	; 0x09
    11f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    11f6:	fb 85       	ldd	r31, Y+11	; 0x0b
    11f8:	81 85       	ldd	r24, Z+9	; 0x09
    11fa:	ea 85       	ldd	r30, Y+10	; 0x0a
    11fc:	fb 85       	ldd	r31, Y+11	; 0x0b
    11fe:	86 83       	std	Z+6, r24	; 0x06
    1200:	ea 85       	ldd	r30, Y+10	; 0x0a
    1202:	fb 85       	ldd	r31, Y+11	; 0x0b
    1204:	86 81       	ldd	r24, Z+6	; 0x06
    1206:	ea 85       	ldd	r30, Y+10	; 0x0a
    1208:	fb 85       	ldd	r31, Y+11	; 0x0b
    120a:	85 83       	std	Z+5, r24	; 0x05
  chipSelectPin_ = chipSelectPin;
    120c:	ea 85       	ldd	r30, Y+10	; 0x0a
    120e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1210:	8d 85       	ldd	r24, Y+13	; 0x0d
    1212:	84 83       	std	Z+4, r24	; 0x04
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
    1214:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	99 87       	std	Y+9, r25	; 0x09
    121e:	88 87       	std	Y+8, r24	; 0x08
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    1220:	ea 85       	ldd	r30, Y+10	; 0x0a
    1222:	fb 85       	ldd	r31, Y+11	; 0x0b
    1224:	84 81       	ldd	r24, Z+4	; 0x04
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	0e 94 6f 66 	call	0xccde	; 0xccde <pinMode>
  chipSelectHigh();
    122c:	8a 85       	ldd	r24, Y+10	; 0x0a
    122e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1230:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  pinMode(SPI_MISO_PIN, INPUT);
    1234:	8c e0       	ldi	r24, 0x0C	; 12
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	0e 94 6f 66 	call	0xccde	; 0xccde <pinMode>
  pinMode(SPI_MOSI_PIN, OUTPUT);
    123c:	8b e0       	ldi	r24, 0x0B	; 11
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	0e 94 6f 66 	call	0xccde	; 0xccde <pinMode>
  pinMode(SPI_SCK_PIN, OUTPUT);
    1244:	8d e0       	ldi	r24, 0x0D	; 13
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	0e 94 6f 66 	call	0xccde	; 0xccde <pinMode>

#ifndef SOFTWARE_SPI
  // SS must be in output mode even it is not chip select
  pinMode(SS_PIN, OUTPUT);
    124c:	8a e0       	ldi	r24, 0x0A	; 10
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	0e 94 6f 66 	call	0xccde	; 0xccde <pinMode>
  digitalWrite(SS_PIN, HIGH); // disable any SPI device using hardware SS pin
    1254:	8a e0       	ldi	r24, 0x0A	; 10
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    125c:	ed e2       	ldi	r30, 0x2D	; 45
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	83 e5       	ldi	r24, 0x53	; 83
    1262:	80 83       	st	Z, r24
  // clear double speed
  SPSR &= ~(1 << SPI2X);
    1264:	ae e2       	ldi	r26, 0x2E	; 46
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ee e2       	ldi	r30, 0x2E	; 46
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8e 7f       	andi	r24, 0xFE	; 254
    1270:	8c 93       	st	X, r24
#endif  // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    1272:	1b 82       	std	Y+3, r1	; 0x03
    1274:	06 c0       	rjmp	.+12     	; 0x1282 <_ZN7Sd2Card4initEhh+0xbc>
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	0e 94 c2 00 	call	0x184	; 0x184 <_ZL7spiSendh>
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	8b 83       	std	Y+3, r24	; 0x03
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	8a 30       	cpi	r24, 0x0A	; 10
    1286:	b8 f3       	brcs	.-18     	; 0x1276 <_ZN7Sd2Card4initEhh+0xb0>

  chipSelectLow();
    1288:	8a 85       	ldd	r24, Y+10	; 0x0a
    128a:	9b 85       	ldd	r25, Y+11	; 0x0b
    128c:	0e 94 92 01 	call	0x324	; 0x324 <_ZN7Sd2Card13chipSelectLowEv>
    1290:	1b c0       	rjmp	.+54     	; 0x12c8 <_ZN7Sd2Card4initEhh+0x102>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    1292:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	9c 01       	movw	r18, r24
    129c:	88 85       	ldd	r24, Y+8	; 0x08
    129e:	99 85       	ldd	r25, Y+9	; 0x09
    12a0:	a9 01       	movw	r20, r18
    12a2:	48 1b       	sub	r20, r24
    12a4:	59 0b       	sbc	r21, r25
    12a6:	ca 01       	movw	r24, r20
    12a8:	1f 8a       	std	Y+23, r1	; 0x17
    12aa:	57 e0       	ldi	r21, 0x07	; 7
    12ac:	81 3d       	cpi	r24, 0xD1	; 209
    12ae:	95 07       	cpc	r25, r21
    12b0:	10 f0       	brcs	.+4      	; 0x12b6 <_ZN7Sd2Card4initEhh+0xf0>
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	8f 8b       	std	Y+23, r24	; 0x17
    12b6:	9f 89       	ldd	r25, Y+23	; 0x17
    12b8:	99 23       	and	r25, r25
    12ba:	31 f0       	breq	.+12     	; 0x12c8 <_ZN7Sd2Card4initEhh+0x102>
      error(SD_CARD_ERROR_CMD0);
    12bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    12be:	9b 85       	ldd	r25, Y+11	; 0x0b
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    12c6:	eb c0       	rjmp	.+470    	; 0x149e <_ZN7Sd2Card4initEhh+0x2d8>
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);

  chipSelectLow();

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    12c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
    12da:	ea 85       	ldd	r30, Y+10	; 0x0a
    12dc:	fb 85       	ldd	r31, Y+11	; 0x0b
    12de:	82 87       	std	Z+10, r24	; 0x0a
    12e0:	ea 85       	ldd	r30, Y+10	; 0x0a
    12e2:	fb 85       	ldd	r31, Y+11	; 0x0b
    12e4:	82 85       	ldd	r24, Z+10	; 0x0a
    12e6:	18 8e       	std	Y+24, r1	; 0x18
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	11 f0       	breq	.+4      	; 0x12f0 <_ZN7Sd2Card4initEhh+0x12a>
    12ec:	a1 e0       	ldi	r26, 0x01	; 1
    12ee:	a8 8f       	std	Y+24, r26	; 0x18
    12f0:	b8 8d       	ldd	r27, Y+24	; 0x18
    12f2:	bb 23       	and	r27, r27
    12f4:	71 f6       	brne	.-100    	; 0x1292 <_ZN7Sd2Card4initEhh+0xcc>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    12f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fa:	68 e0       	ldi	r22, 0x08	; 8
    12fc:	2a ea       	ldi	r18, 0xAA	; 170
    12fe:	31 e0       	ldi	r19, 0x01	; 1
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	84 70       	andi	r24, 0x04	; 4
    130e:	90 70       	andi	r25, 0x00	; 0
    1310:	1e 8a       	std	Y+22, r1	; 0x16
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	11 f0       	breq	.+4      	; 0x131a <_ZN7Sd2Card4initEhh+0x154>
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	2e 8b       	std	Y+22, r18	; 0x16
    131a:	4e 89       	ldd	r20, Y+22	; 0x16
    131c:	44 23       	and	r20, r20
    131e:	31 f0       	breq	.+12     	; 0x132c <_ZN7Sd2Card4initEhh+0x166>
    type(SD_CARD_TYPE_SD1);
    1320:	8a 85       	ldd	r24, Y+10	; 0x0a
    1322:	9b 85       	ldd	r25, Y+11	; 0x0b
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN7Sd2Card4typeEh>
    132a:	1d c0       	rjmp	.+58     	; 0x1366 <_ZN7Sd2Card4initEhh+0x1a0>
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    132c:	1a 82       	std	Y+2, r1	; 0x02
    132e:	08 c0       	rjmp	.+16     	; 0x1340 <_ZN7Sd2Card4initEhh+0x17a>
    1330:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
    1334:	ea 85       	ldd	r30, Y+10	; 0x0a
    1336:	fb 85       	ldd	r31, Y+11	; 0x0b
    1338:	82 87       	std	Z+10, r24	; 0x0a
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	8f 5f       	subi	r24, 0xFF	; 255
    133e:	8a 83       	std	Y+2, r24	; 0x02
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	84 30       	cpi	r24, 0x04	; 4
    1344:	a8 f3       	brcs	.-22     	; 0x1330 <_ZN7Sd2Card4initEhh+0x16a>
    if (status_ != 0XAA) {
    1346:	ea 85       	ldd	r30, Y+10	; 0x0a
    1348:	fb 85       	ldd	r31, Y+11	; 0x0b
    134a:	82 85       	ldd	r24, Z+10	; 0x0a
    134c:	8a 3a       	cpi	r24, 0xAA	; 170
    134e:	31 f0       	breq	.+12     	; 0x135c <_ZN7Sd2Card4initEhh+0x196>
      error(SD_CARD_ERROR_CMD8);
    1350:	8a 85       	ldd	r24, Y+10	; 0x0a
    1352:	9b 85       	ldd	r25, Y+11	; 0x0b
    1354:	62 e0       	ldi	r22, 0x02	; 2
    1356:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    135a:	a1 c0       	rjmp	.+322    	; 0x149e <_ZN7Sd2Card4initEhh+0x2d8>
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
    135c:	8a 85       	ldd	r24, Y+10	; 0x0a
    135e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1360:	62 e0       	ldi	r22, 0x02	; 2
    1362:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN7Sd2Card4typeEh>
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    1366:	8a 85       	ldd	r24, Y+10	; 0x0a
    1368:	9b 85       	ldd	r25, Y+11	; 0x0b
    136a:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZNK7Sd2Card4typeEv>
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	49 f4       	brne	.+18     	; 0x1384 <_ZN7Sd2Card4initEhh+0x1be>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a0 e0       	ldi	r26, 0x00	; 0
    1378:	b0 e4       	ldi	r27, 0x40	; 64
    137a:	8a 8b       	std	Y+18, r24	; 0x12
    137c:	9b 8b       	std	Y+19, r25	; 0x13
    137e:	ac 8b       	std	Y+20, r26	; 0x14
    1380:	bd 8b       	std	Y+21, r27	; 0x15
    1382:	04 c0       	rjmp	.+8      	; 0x138c <_ZN7Sd2Card4initEhh+0x1c6>
    1384:	1a 8a       	std	Y+18, r1	; 0x12
    1386:	1b 8a       	std	Y+19, r1	; 0x13
    1388:	1c 8a       	std	Y+20, r1	; 0x14
    138a:	1d 8a       	std	Y+21, r1	; 0x15
    138c:	8a 89       	ldd	r24, Y+18	; 0x12
    138e:	9b 89       	ldd	r25, Y+19	; 0x13
    1390:	ac 89       	ldd	r26, Y+20	; 0x14
    1392:	bd 89       	ldd	r27, Y+21	; 0x15
    1394:	8c 83       	std	Y+4, r24	; 0x04
    1396:	9d 83       	std	Y+5, r25	; 0x05
    1398:	ae 83       	std	Y+6, r26	; 0x06
    139a:	bf 83       	std	Y+7, r27	; 0x07
    139c:	1b c0       	rjmp	.+54     	; 0x13d4 <_ZN7Sd2Card4initEhh+0x20e>

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    139e:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9c 01       	movw	r18, r24
    13a8:	88 85       	ldd	r24, Y+8	; 0x08
    13aa:	99 85       	ldd	r25, Y+9	; 0x09
    13ac:	d9 01       	movw	r26, r18
    13ae:	a8 1b       	sub	r26, r24
    13b0:	b9 0b       	sbc	r27, r25
    13b2:	cd 01       	movw	r24, r26
    13b4:	19 8a       	std	Y+17, r1	; 0x11
    13b6:	b7 e0       	ldi	r27, 0x07	; 7
    13b8:	81 3d       	cpi	r24, 0xD1	; 209
    13ba:	9b 07       	cpc	r25, r27
    13bc:	10 f0       	brcs	.+4      	; 0x13c2 <_ZN7Sd2Card4initEhh+0x1fc>
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	29 8b       	std	Y+17, r18	; 0x11
    13c2:	49 89       	ldd	r20, Y+17	; 0x11
    13c4:	44 23       	and	r20, r20
    13c6:	31 f0       	breq	.+12     	; 0x13d4 <_ZN7Sd2Card4initEhh+0x20e>
      error(SD_CARD_ERROR_ACMD41);
    13c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    13cc:	68 e0       	ldi	r22, 0x08	; 8
    13ce:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    13d2:	65 c0       	rjmp	.+202    	; 0x149e <_ZN7Sd2Card4initEhh+0x2d8>
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    13d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	4e 81       	ldd	r20, Y+6	; 0x06
    13de:	5f 81       	ldd	r21, Y+7	; 0x07
    13e0:	69 e2       	ldi	r22, 0x29	; 41
    13e2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <_ZN7Sd2Card8cardAcmdEhm>
    13e6:	ea 85       	ldd	r30, Y+10	; 0x0a
    13e8:	fb 85       	ldd	r31, Y+11	; 0x0b
    13ea:	82 87       	std	Z+10, r24	; 0x0a
    13ec:	ea 85       	ldd	r30, Y+10	; 0x0a
    13ee:	fb 85       	ldd	r31, Y+11	; 0x0b
    13f0:	82 85       	ldd	r24, Z+10	; 0x0a
    13f2:	89 8f       	std	Y+25, r24	; 0x19
    13f4:	59 8d       	ldd	r21, Y+25	; 0x19
    13f6:	55 23       	and	r21, r21
    13f8:	11 f0       	breq	.+4      	; 0x13fe <_ZN7Sd2Card4initEhh+0x238>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	89 8f       	std	Y+25, r24	; 0x19
    13fe:	89 8d       	ldd	r24, Y+25	; 0x19
    1400:	88 23       	and	r24, r24
    1402:	69 f6       	brne	.-102    	; 0x139e <_ZN7Sd2Card4initEhh+0x1d8>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    1404:	8a 85       	ldd	r24, Y+10	; 0x0a
    1406:	9b 85       	ldd	r25, Y+11	; 0x0b
    1408:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZNK7Sd2Card4typeEv>
    140c:	18 8a       	std	Y+16, r1	; 0x10
    140e:	82 30       	cpi	r24, 0x02	; 2
    1410:	11 f4       	brne	.+4      	; 0x1416 <_ZN7Sd2Card4initEhh+0x250>
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	98 8b       	std	Y+16, r25	; 0x10
    1416:	a8 89       	ldd	r26, Y+16	; 0x10
    1418:	aa 23       	and	r26, r26
    141a:	b1 f1       	breq	.+108    	; 0x1488 <_ZN7Sd2Card4initEhh+0x2c2>
    if (cardCommand(CMD58, 0)) {
    141c:	8a 85       	ldd	r24, Y+10	; 0x0a
    141e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1420:	6a e3       	ldi	r22, 0x3A	; 58
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	0e 94 82 03 	call	0x704	; 0x704 <_ZN7Sd2Card11cardCommandEhm>
    142e:	8a 8f       	std	Y+26, r24	; 0x1a
    1430:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1432:	bb 23       	and	r27, r27
    1434:	11 f0       	breq	.+4      	; 0x143a <_ZN7Sd2Card4initEhh+0x274>
    1436:	21 e0       	ldi	r18, 0x01	; 1
    1438:	2a 8f       	std	Y+26, r18	; 0x1a
    143a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    143c:	88 23       	and	r24, r24
    143e:	31 f0       	breq	.+12     	; 0x144c <_ZN7Sd2Card4initEhh+0x286>
      error(SD_CARD_ERROR_CMD58);
    1440:	8a 85       	ldd	r24, Y+10	; 0x0a
    1442:	9b 85       	ldd	r25, Y+11	; 0x0b
    1444:	66 e0       	ldi	r22, 0x06	; 6
    1446:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN7Sd2Card5errorEh>
    144a:	29 c0       	rjmp	.+82     	; 0x149e <_ZN7Sd2Card4initEhh+0x2d8>
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    144c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
    1450:	88 2f       	mov	r24, r24
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	80 7c       	andi	r24, 0xC0	; 192
    1456:	90 70       	andi	r25, 0x00	; 0
    1458:	1f 86       	std	Y+15, r1	; 0x0f
    145a:	80 3c       	cpi	r24, 0xC0	; 192
    145c:	91 05       	cpc	r25, r1
    145e:	11 f4       	brne	.+4      	; 0x1464 <_ZN7Sd2Card4initEhh+0x29e>
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	4f 87       	std	Y+15, r20	; 0x0f
    1464:	5f 85       	ldd	r21, Y+15	; 0x0f
    1466:	55 23       	and	r21, r21
    1468:	29 f0       	breq	.+10     	; 0x1474 <_ZN7Sd2Card4initEhh+0x2ae>
    146a:	8a 85       	ldd	r24, Y+10	; 0x0a
    146c:	9b 85       	ldd	r25, Y+11	; 0x0b
    146e:	63 e0       	ldi	r22, 0x03	; 3
    1470:	0e 94 af 00 	call	0x15e	; 0x15e <_ZN7Sd2Card4typeEh>
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    1474:	19 82       	std	Y+1, r1	; 0x01
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <_ZN7Sd2Card4initEhh+0x2bc>
    1478:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZL6spiRecv>
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	8f 5f       	subi	r24, 0xFF	; 255
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	c0 f3       	brcs	.-16     	; 0x1478 <_ZN7Sd2Card4initEhh+0x2b2>
  }
  chipSelectHigh();
    1488:	8a 85       	ldd	r24, Y+10	; 0x0a
    148a:	9b 85       	ldd	r25, Y+11	; 0x0b
    148c:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    1490:	8a 85       	ldd	r24, Y+10	; 0x0a
    1492:	9b 85       	ldd	r25, Y+11	; 0x0b
    1494:	6c 85       	ldd	r22, Y+12	; 0x0c
    1496:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_ZN7Sd2Card10setSckRateEh>
    149a:	8e 87       	std	Y+14, r24	; 0x0e
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <_ZN7Sd2Card4initEhh+0x2e2>
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    149e:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    14a2:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    14a6:	1e 86       	std	Y+14, r1	; 0x0e
    14a8:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    14aa:	6a 96       	adiw	r28, 0x1a	; 26
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <_ZL11DIR_IS_FILEPK14directoryEntry>:
  return (dir->attributes & DIR_ATT_LONG_NAME_MASK) == DIR_ATT_LONG_NAME;
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <_ZL11DIR_IS_FILEPK14directoryEntry+0x6>
    14c2:	0f 92       	push	r0
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	89 83       	std	Y+1, r24	; 0x01
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
    14cc:	e9 81       	ldd	r30, Y+1	; 0x01
    14ce:	fa 81       	ldd	r31, Y+2	; 0x02
    14d0:	83 85       	ldd	r24, Z+11	; 0x0b
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	88 71       	andi	r24, 0x18	; 24
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	1b 82       	std	Y+3, r1	; 0x03
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	11 f4       	brne	.+4      	; 0x14e4 <_ZL11DIR_IS_FILEPK14directoryEntry+0x28>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <_ZL13DIR_IS_SUBDIRPK14directoryEntry>:
/** Directory entry is for a subdirectory */
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <_ZL13DIR_IS_SUBDIRPK14directoryEntry+0x6>
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
    1502:	e9 81       	ldd	r30, Y+1	; 0x01
    1504:	fa 81       	ldd	r31, Y+2	; 0x02
    1506:	83 85       	ldd	r24, Z+11	; 0x0b
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	88 71       	andi	r24, 0x18	; 24
    150e:	90 70       	andi	r25, 0x00	; 0
    1510:	1b 82       	std	Y+3, r1	; 0x03
    1512:	80 31       	cpi	r24, 0x10	; 16
    1514:	91 05       	cpc	r25, r1
    1516:	11 f4       	brne	.+4      	; 0x151c <_ZL13DIR_IS_SUBDIRPK14directoryEntry+0x2a>
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	8b 83       	std	Y+3, r24	; 0x03
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry>:
/** Directory entry is for a file or subdirectory */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0x6>
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
    153a:	e9 81       	ldd	r30, Y+1	; 0x01
    153c:	fa 81       	ldd	r31, Y+2	; 0x02
    153e:	83 85       	ldd	r24, Z+11	; 0x0b
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	88 70       	andi	r24, 0x08	; 8
    1546:	90 70       	andi	r25, 0x00	; 0
    1548:	1b 82       	std	Y+3, r1	; 0x03
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	11 f4       	brne	.+4      	; 0x1552 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0x28>
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	8b 83       	std	Y+3, r24	; 0x03
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <_ZN5Print13setWriteErrorEi>:
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	00 d0       	rcall	.+0      	; 0x1566 <_ZN5Print13setWriteErrorEi+0x6>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <_ZN5Print13setWriteErrorEi+0x8>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	9a 83       	std	Y+2, r25	; 0x02
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	7c 83       	std	Y+4, r23	; 0x04
    1572:	6b 83       	std	Y+3, r22	; 0x03
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	93 83       	std	Z+3, r25	; 0x03
    157e:	82 83       	std	Z+2, r24	; 0x02
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <_ZN5PrintC2Ev>:
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <_ZN5PrintC2Ev+0x6>
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	e9 81       	ldd	r30, Y+1	; 0x01
    159e:	fa 81       	ldd	r31, Y+2	; 0x02
    15a0:	80 ec       	ldi	r24, 0xC0	; 192
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	80 83       	st	Z, r24
    15a8:	e9 81       	ldd	r30, Y+1	; 0x01
    15aa:	fa 81       	ldd	r31, Y+2	; 0x02
    15ac:	13 82       	std	Z+3, r1	; 0x03
    15ae:	12 82       	std	Z+2, r1	; 0x02
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <_ZL8FAT_DATEjhh>:
uint8_t const FAT_FILE_TYPE_SUBDIR = 4;
/** Test value for directory type */
uint8_t const FAT_FILE_TYPE_MIN_DIR = FAT_FILE_TYPE_ROOT16;

/** date field for FAT directory entry */
static inline uint16_t FAT_DATE(uint16_t year, uint8_t month, uint8_t day) {
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <_ZL8FAT_DATEjhh+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <_ZL8FAT_DATEjhh+0x8>
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	6b 83       	std	Y+3, r22	; 0x03
    15cc:	4c 83       	std	Y+4, r20	; 0x04
  return (year - 1980) << 9 | month << 5 | day;
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	8c 5b       	subi	r24, 0xBC	; 188
    15d4:	97 40       	sbci	r25, 0x07	; 7
    15d6:	9c 01       	movw	r18, r24
    15d8:	32 2f       	mov	r19, r18
    15da:	22 27       	eor	r18, r18
    15dc:	33 0f       	add	r19, r19
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	82 95       	swap	r24
    15ea:	92 95       	swap	r25
    15ec:	90 7f       	andi	r25, 0xF0	; 240
    15ee:	98 27       	eor	r25, r24
    15f0:	80 7f       	andi	r24, 0xF0	; 240
    15f2:	98 27       	eor	r25, r24
    15f4:	28 2b       	or	r18, r24
    15f6:	39 2b       	or	r19, r25
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	82 2b       	or	r24, r18
    1600:	93 2b       	or	r25, r19
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <_ZL8FAT_YEARj>:
/** year part of FAT directory date field */
static inline uint16_t FAT_YEAR(uint16_t fatDate) {
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <_ZL8FAT_YEARj+0x6>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	9a 83       	std	Y+2, r25	; 0x02
    161c:	89 83       	std	Y+1, r24	; 0x01
  return 1980 + (fatDate >> 9);
    161e:	89 81       	ldd	r24, Y+1	; 0x01
    1620:	9a 81       	ldd	r25, Y+2	; 0x02
    1622:	89 2f       	mov	r24, r25
    1624:	99 27       	eor	r25, r25
    1626:	86 95       	lsr	r24
    1628:	84 54       	subi	r24, 0x44	; 68
    162a:	98 4f       	sbci	r25, 0xF8	; 248
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <_ZL9FAT_MONTHj>:
/** month part of FAT directory date field */
static inline uint8_t FAT_MONTH(uint16_t fatDate) {
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <_ZL9FAT_MONTHj+0x6>
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
    1640:	9a 83       	std	Y+2, r25	; 0x02
    1642:	89 83       	std	Y+1, r24	; 0x01
  return (fatDate >> 5) & 0XF;
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	9a 81       	ldd	r25, Y+2	; 0x02
    1648:	96 95       	lsr	r25
    164a:	87 95       	ror	r24
    164c:	92 95       	swap	r25
    164e:	82 95       	swap	r24
    1650:	8f 70       	andi	r24, 0x0F	; 15
    1652:	89 27       	eor	r24, r25
    1654:	9f 70       	andi	r25, 0x0F	; 15
    1656:	89 27       	eor	r24, r25
    1658:	8f 70       	andi	r24, 0x0F	; 15
}
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <_ZL7FAT_DAYj>:
/** day part of FAT directory date field */
static inline uint8_t FAT_DAY(uint16_t fatDate) {
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	00 d0       	rcall	.+0      	; 0x166a <_ZL7FAT_DAYj+0x6>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	9a 83       	std	Y+2, r25	; 0x02
    1670:	89 83       	std	Y+1, r24	; 0x01
  return fatDate & 0X1F;
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	8f 71       	andi	r24, 0x1F	; 31
}
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <_ZL8FAT_TIMEhhh>:
/** time field for FAT directory entry */
static inline uint16_t FAT_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <_ZL8FAT_TIMEhhh+0x6>
    1686:	0f 92       	push	r0
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	6a 83       	std	Y+2, r22	; 0x02
    1690:	4b 83       	std	Y+3, r20	; 0x03
  return hour << 11 | minute << 5 | second >> 1;
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9c 01       	movw	r18, r24
    169a:	32 2f       	mov	r19, r18
    169c:	22 27       	eor	r18, r18
    169e:	33 0f       	add	r19, r19
    16a0:	33 0f       	add	r19, r19
    16a2:	33 0f       	add	r19, r19
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	88 0f       	add	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	82 95       	swap	r24
    16b0:	92 95       	swap	r25
    16b2:	90 7f       	andi	r25, 0xF0	; 240
    16b4:	98 27       	eor	r25, r24
    16b6:	80 7f       	andi	r24, 0xF0	; 240
    16b8:	98 27       	eor	r25, r24
    16ba:	28 2b       	or	r18, r24
    16bc:	39 2b       	or	r19, r25
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	88 2f       	mov	r24, r24
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	95 95       	asr	r25
    16c6:	87 95       	ror	r24
    16c8:	82 2b       	or	r24, r18
    16ca:	93 2b       	or	r25, r19
}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <_ZL8FAT_HOURj>:
/** hour part of FAT directory time field */
static inline uint8_t FAT_HOUR(uint16_t fatTime) {
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	00 d0       	rcall	.+0      	; 0x16de <_ZL8FAT_HOURj+0x6>
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01
  return fatTime >> 11;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	89 2f       	mov	r24, r25
    16ec:	99 27       	eor	r25, r25
    16ee:	86 95       	lsr	r24
    16f0:	86 95       	lsr	r24
    16f2:	86 95       	lsr	r24
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <_ZL10FAT_MINUTEj>:
/** minute part of FAT directory time field */
static inline uint8_t FAT_MINUTE(uint16_t fatTime) {
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <_ZL10FAT_MINUTEj+0x6>
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
  return(fatTime >> 5) & 0X3F;
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	96 95       	lsr	r25
    1712:	87 95       	ror	r24
    1714:	92 95       	swap	r25
    1716:	82 95       	swap	r24
    1718:	8f 70       	andi	r24, 0x0F	; 15
    171a:	89 27       	eor	r24, r25
    171c:	9f 70       	andi	r25, 0x0F	; 15
    171e:	89 27       	eor	r24, r25
    1720:	8f 73       	andi	r24, 0x3F	; 63
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <_ZL10FAT_SECONDj>:
/** second part of FAT directory time field */
static inline uint8_t FAT_SECOND(uint16_t fatTime) {
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	00 d0       	rcall	.+0      	; 0x1732 <_ZL10FAT_SECONDj+0x6>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
  return 2*(fatTime & 0X1F);
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
    173e:	8f 71       	andi	r24, 0x1F	; 31
    1740:	90 70       	andi	r25, 0x00	; 0
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
}
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <_ZN6SdFileC1Ev>:
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <_ZN6SdFileC1Ev+0x6>
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
    1762:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN5PrintC2Ev>
    1766:	e9 81       	ldd	r30, Y+1	; 0x01
    1768:	fa 81       	ldd	r31, Y+2	; 0x02
    176a:	84 e6       	ldi	r24, 0x64	; 100
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	91 83       	std	Z+1, r25	; 0x01
    1770:	80 83       	st	Z, r24
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	15 82       	std	Z+5, r1	; 0x05
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <_ZNK6SdFile11curPositionEv>:
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <_ZNK6SdFile11curPositionEv+0x6>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	82 85       	ldd	r24, Z+10	; 0x0a
    1796:	93 85       	ldd	r25, Z+11	; 0x0b
    1798:	a4 85       	ldd	r26, Z+12	; 0x0c
    179a:	b5 85       	ldd	r27, Z+13	; 0x0d
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <_ZNK6SdFile5isDirEv>:
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
  /** \return The first cluster number for a file or directory. */
  uint32_t firstCluster(void) const {return firstCluster_;}
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <_ZNK6SdFile5isDirEv+0x6>
    17b0:	0f 92       	push	r0
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	e9 81       	ldd	r30, Y+1	; 0x01
    17bc:	fa 81       	ldd	r31, Y+2	; 0x02
    17be:	85 81       	ldd	r24, Z+5	; 0x05
    17c0:	1b 82       	std	Y+3, r1	; 0x03
    17c2:	82 30       	cpi	r24, 0x02	; 2
    17c4:	10 f0       	brcs	.+4      	; 0x17ca <_ZNK6SdFile5isDirEv+0x20>
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	8b 83       	std	Y+3, r24	; 0x03
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <_ZNK6SdFile6isFileEv>:
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	00 d0       	rcall	.+0      	; 0x17de <_ZNK6SdFile6isFileEv+0x6>
    17de:	0f 92       	push	r0
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	9a 83       	std	Y+2, r25	; 0x02
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ea:	fa 81       	ldd	r31, Y+2	; 0x02
    17ec:	85 81       	ldd	r24, Z+5	; 0x05
    17ee:	1b 82       	std	Y+3, r1	; 0x03
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	11 f4       	brne	.+4      	; 0x17f8 <_ZNK6SdFile6isFileEv+0x20>
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	8b 83       	std	Y+3, r24	; 0x03
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <_ZNK6SdFile6isOpenEv>:
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <_ZNK6SdFile6isOpenEv+0x6>
    180c:	0f 92       	push	r0
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	9a 83       	std	Y+2, r25	; 0x02
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	e9 81       	ldd	r30, Y+1	; 0x01
    1818:	fa 81       	ldd	r31, Y+2	; 0x02
    181a:	85 81       	ldd	r24, Z+5	; 0x05
    181c:	8b 83       	std	Y+3, r24	; 0x03
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 23       	and	r24, r24
    1822:	11 f0       	breq	.+4      	; 0x1828 <_ZNK6SdFile6isOpenEv+0x22>
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	8b 83       	std	Y+3, r24	; 0x03
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <_ZNK6SdFile8isSubDirEv>:
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
  /** \return True if this is a SdFile for a subdirectory else false. */
  uint8_t isSubDir(void) const {return type_ == FAT_FILE_TYPE_SUBDIR;}
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <_ZNK6SdFile8isSubDirEv+0x6>
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	e9 81       	ldd	r30, Y+1	; 0x01
    1848:	fa 81       	ldd	r31, Y+2	; 0x02
    184a:	85 81       	ldd	r24, Z+5	; 0x05
    184c:	1b 82       	std	Y+3, r1	; 0x03
    184e:	84 30       	cpi	r24, 0x04	; 4
    1850:	11 f4       	brne	.+4      	; 0x1856 <_ZNK6SdFile8isSubDirEv+0x20>
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	8b 83       	std	Y+3, r24	; 0x03
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <_ZNK6SdFile6isRootEv>:
  /** \return True if this is a SdFile for the root directory. */
  uint8_t isRoot(void) const {
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	00 d0       	rcall	.+0      	; 0x186a <_ZNK6SdFile6isRootEv+0x6>
    186a:	0f 92       	push	r0
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
    return type_ == FAT_FILE_TYPE_ROOT16 || type_ == FAT_FILE_TYPE_ROOT32;
    1874:	e9 81       	ldd	r30, Y+1	; 0x01
    1876:	fa 81       	ldd	r31, Y+2	; 0x02
    1878:	85 81       	ldd	r24, Z+5	; 0x05
    187a:	82 30       	cpi	r24, 0x02	; 2
    187c:	29 f0       	breq	.+10     	; 0x1888 <_ZNK6SdFile6isRootEv+0x24>
    187e:	e9 81       	ldd	r30, Y+1	; 0x01
    1880:	fa 81       	ldd	r31, Y+2	; 0x02
    1882:	85 81       	ldd	r24, Z+5	; 0x05
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	19 f4       	brne	.+6      	; 0x188e <_ZNK6SdFile6isRootEv+0x2a>
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	8b 83       	std	Y+3, r24	; 0x03
    188c:	01 c0       	rjmp	.+2      	; 0x1890 <_ZNK6SdFile6isRootEv+0x2c>
    188e:	1b 82       	std	Y+3, r1	; 0x03
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
  }
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <_ZN6SdFile6rewindEv>:
  int16_t read(void* buf, uint16_t nbyte);
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <_ZN6SdFile6rewindEv+0x6>
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
    curPosition_ = curCluster_ = 0;
    18ac:	e9 81       	ldd	r30, Y+1	; 0x01
    18ae:	fa 81       	ldd	r31, Y+2	; 0x02
    18b0:	16 82       	std	Z+6, r1	; 0x06
    18b2:	17 82       	std	Z+7, r1	; 0x07
    18b4:	10 86       	std	Z+8, r1	; 0x08
    18b6:	11 86       	std	Z+9, r1	; 0x09
    18b8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ba:	fa 81       	ldd	r31, Y+2	; 0x02
    18bc:	86 81       	ldd	r24, Z+6	; 0x06
    18be:	97 81       	ldd	r25, Z+7	; 0x07
    18c0:	a0 85       	ldd	r26, Z+8	; 0x08
    18c2:	b1 85       	ldd	r27, Z+9	; 0x09
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	82 87       	std	Z+10, r24	; 0x0a
    18ca:	93 87       	std	Z+11, r25	; 0x0b
    18cc:	a4 87       	std	Z+12, r26	; 0x0c
    18ce:	b5 87       	std	Z+13, r27	; 0x0d
  }
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <_ZNK6SdFile14unbufferedReadEv>:
   * \return The file or directory type.
   */
  uint8_t type(void) const {return type_;}
  uint8_t truncate(uint32_t size);
  /** \return Unbuffered read flag. */
  uint8_t unbufferedRead(void) const {
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <_ZNK6SdFile14unbufferedReadEv+0x6>
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
    return flags_ & F_FILE_UNBUFFERED_READ;
    18e8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ea:	fa 81       	ldd	r31, Y+2	; 0x02
    18ec:	84 81       	ldd	r24, Z+4	; 0x04
    18ee:	80 74       	andi	r24, 0x40	; 64
  }
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <_ZNK8SdVolume7fatTypeEv>:
  /** \return The number of FAT structures on the volume. */
  uint8_t fatCount(void) const {return fatCount_;}
  /** \return The logical block number for the start of the first FAT. */
  uint32_t fatStartBlock(void) const {return fatStartBlock_;}
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType(void) const {return fatType_;}
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <_ZNK8SdVolume7fatTypeEv+0x6>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	9a 83       	std	Y+2, r25	; 0x02
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	e9 81       	ldd	r30, Y+1	; 0x01
    190a:	fa 81       	ldd	r31, Y+2	; 0x02
    190c:	87 89       	ldd	r24, Z+23	; 0x17
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <_ZNK8SdVolume17rootDirEntryCountEv>:
  /** \return The number of entries in the root directory for FAT16 volumes. */
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <_ZNK8SdVolume17rootDirEntryCountEv+0x6>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	9a 83       	std	Y+2, r25	; 0x02
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	80 8d       	ldd	r24, Z+24	; 0x18
    192c:	91 8d       	ldd	r25, Z+25	; 0x19
    192e:	cc 01       	movw	r24, r24
    1930:	a0 e0       	ldi	r26, 0x00	; 0
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	bc 01       	movw	r22, r24
    1936:	cd 01       	movw	r24, r26
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <_ZNK8SdVolume12rootDirStartEv>:
  /** \return The logical block number for the start of the root directory
       on FAT16 volumes or the first cluster number on FAT32 volumes. */
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <_ZNK8SdVolume12rootDirStartEv+0x6>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	82 8d       	ldd	r24, Z+26	; 0x1a
    1956:	93 8d       	ldd	r25, Z+27	; 0x1b
    1958:	a4 8d       	ldd	r26, Z+28	; 0x1c
    195a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <_ZNK8SdVolume14blockOfClusterEm>:
  uint8_t fatType_;             // volume type (12, 16, OR 32)
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	00 d0       	rcall	.+0      	; 0x1970 <_ZNK8SdVolume14blockOfClusterEm+0x6>
    1970:	00 d0       	rcall	.+0      	; 0x1972 <_ZNK8SdVolume14blockOfClusterEm+0x8>
    1972:	00 d0       	rcall	.+0      	; 0x1974 <_ZNK8SdVolume14blockOfClusterEm+0xa>
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	4b 83       	std	Y+3, r20	; 0x03
    197e:	5c 83       	std	Y+4, r21	; 0x04
    1980:	6d 83       	std	Y+5, r22	; 0x05
    1982:	7e 83       	std	Y+6, r23	; 0x06
          return (position >> 9) & (blocksPerCluster_ - 1);}
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	ad 81       	ldd	r26, Y+5	; 0x05
    198a:	be 81       	ldd	r27, Y+6	; 0x06
    198c:	07 2e       	mov	r0, r23
    198e:	79 e0       	ldi	r23, 0x09	; 9
    1990:	b6 95       	lsr	r27
    1992:	a7 95       	ror	r26
    1994:	97 95       	ror	r25
    1996:	87 95       	ror	r24
    1998:	7a 95       	dec	r23
    199a:	d1 f7       	brne	.-12     	; 0x1990 <_ZNK8SdVolume14blockOfClusterEm+0x26>
    199c:	70 2d       	mov	r23, r0
    199e:	98 2f       	mov	r25, r24
    19a0:	e9 81       	ldd	r30, Y+1	; 0x01
    19a2:	fa 81       	ldd	r31, Y+2	; 0x02
    19a4:	84 81       	ldd	r24, Z+4	; 0x04
    19a6:	81 50       	subi	r24, 0x01	; 1
    19a8:	89 23       	and	r24, r25
    19aa:	26 96       	adiw	r28, 0x06	; 6
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <_ZNK8SdVolume17clusterStartBlockEm>:
  uint32_t clusterStartBlock(uint32_t cluster) const {
    19bc:	af 92       	push	r10
    19be:	bf 92       	push	r11
    19c0:	cf 92       	push	r12
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <_ZNK8SdVolume17clusterStartBlockEm+0x16>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <_ZNK8SdVolume17clusterStartBlockEm+0x18>
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <_ZNK8SdVolume17clusterStartBlockEm+0x1a>
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	4b 83       	std	Y+3, r20	; 0x03
    19e0:	5c 83       	std	Y+4, r21	; 0x04
    19e2:	6d 83       	std	Y+5, r22	; 0x05
    19e4:	7e 83       	std	Y+6, r23	; 0x06
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    19e6:	e9 81       	ldd	r30, Y+1	; 0x01
    19e8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ea:	e6 84       	ldd	r14, Z+14	; 0x0e
    19ec:	f7 84       	ldd	r15, Z+15	; 0x0f
    19ee:	00 89       	ldd	r16, Z+16	; 0x10
    19f0:	11 89       	ldd	r17, Z+17	; 0x11
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	ad 81       	ldd	r26, Y+5	; 0x05
    19f8:	be 81       	ldd	r27, Y+6	; 0x06
    19fa:	9c 01       	movw	r18, r24
    19fc:	ad 01       	movw	r20, r26
    19fe:	22 50       	subi	r18, 0x02	; 2
    1a00:	30 40       	sbci	r19, 0x00	; 0
    1a02:	40 40       	sbci	r20, 0x00	; 0
    1a04:	50 40       	sbci	r21, 0x00	; 0
    1a06:	e9 81       	ldd	r30, Y+1	; 0x01
    1a08:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0a:	85 85       	ldd	r24, Z+13	; 0x0d
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	59 01       	movw	r10, r18
    1a12:	6a 01       	movw	r12, r20
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <_ZNK8SdVolume17clusterStartBlockEm+0x62>
    1a16:	aa 0c       	add	r10, r10
    1a18:	bb 1c       	adc	r11, r11
    1a1a:	cc 1c       	adc	r12, r12
    1a1c:	dd 1c       	adc	r13, r13
    1a1e:	8a 95       	dec	r24
    1a20:	d2 f7       	brpl	.-12     	; 0x1a16 <_ZNK8SdVolume17clusterStartBlockEm+0x5a>
    1a22:	d6 01       	movw	r26, r12
    1a24:	c5 01       	movw	r24, r10
    1a26:	8e 0d       	add	r24, r14
    1a28:	9f 1d       	adc	r25, r15
    1a2a:	a0 1f       	adc	r26, r16
    1a2c:	b1 1f       	adc	r27, r17
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	26 96       	adiw	r28, 0x06	; 6
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	ff 90       	pop	r15
    1a48:	ef 90       	pop	r14
    1a4a:	df 90       	pop	r13
    1a4c:	cf 90       	pop	r12
    1a4e:	bf 90       	pop	r11
    1a50:	af 90       	pop	r10
    1a52:	08 95       	ret

00001a54 <_ZN8SdVolume13cacheSetDirtyEv>:
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	80 91 46 05 	lds	r24, 0x0546
    1a60:	81 60       	ori	r24, 0x01	; 1
    1a62:	80 93 46 05 	sts	0x0546, r24
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <_ZNK8SdVolume5isEOCEm>:
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	2b 97       	sbiw	r28, 0x0b	; 11
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	4b 83       	std	Y+3, r20	; 0x03
    1a86:	5c 83       	std	Y+4, r21	; 0x04
    1a88:	6d 83       	std	Y+5, r22	; 0x05
    1a8a:	7e 83       	std	Y+6, r23	; 0x06
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a90:	87 89       	ldd	r24, Z+23	; 0x17
    1a92:	80 31       	cpi	r24, 0x10	; 16
    1a94:	49 f4       	brne	.+18     	; 0x1aa8 <_ZNK8SdVolume5isEOCEm+0x3c>
    1a96:	28 ef       	ldi	r18, 0xF8	; 248
    1a98:	3f ef       	ldi	r19, 0xFF	; 255
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	2f 83       	std	Y+7, r18	; 0x07
    1aa0:	38 87       	std	Y+8, r19	; 0x08
    1aa2:	49 87       	std	Y+9, r20	; 0x09
    1aa4:	5a 87       	std	Y+10, r21	; 0x0a
    1aa6:	08 c0       	rjmp	.+16     	; 0x1ab8 <_ZNK8SdVolume5isEOCEm+0x4c>
    1aa8:	88 ef       	ldi	r24, 0xF8	; 248
    1aaa:	9f ef       	ldi	r25, 0xFF	; 255
    1aac:	af ef       	ldi	r26, 0xFF	; 255
    1aae:	bf e0       	ldi	r27, 0x0F	; 15
    1ab0:	8f 83       	std	Y+7, r24	; 0x07
    1ab2:	98 87       	std	Y+8, r25	; 0x08
    1ab4:	a9 87       	std	Y+9, r26	; 0x09
    1ab6:	ba 87       	std	Y+10, r27	; 0x0a
    1ab8:	1b 86       	std	Y+11, r1	; 0x0b
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	ad 81       	ldd	r26, Y+5	; 0x05
    1ac0:	be 81       	ldd	r27, Y+6	; 0x06
    1ac2:	2f 81       	ldd	r18, Y+7	; 0x07
    1ac4:	38 85       	ldd	r19, Y+8	; 0x08
    1ac6:	49 85       	ldd	r20, Y+9	; 0x09
    1ac8:	5a 85       	ldd	r21, Y+10	; 0x0a
    1aca:	82 17       	cp	r24, r18
    1acc:	93 07       	cpc	r25, r19
    1ace:	a4 07       	cpc	r26, r20
    1ad0:	b5 07       	cpc	r27, r21
    1ad2:	10 f0       	brcs	.+4      	; 0x1ad8 <_ZNK8SdVolume5isEOCEm+0x6c>
    1ad4:	31 e0       	ldi	r19, 0x01	; 1
    1ad6:	3b 87       	std	Y+11, r19	; 0x0b
    1ad8:	8b 85       	ldd	r24, Y+11	; 0x0b
  }
    1ada:	2b 96       	adiw	r28, 0x0b	; 11
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <_ZN6SdFile7dirNameERK14directoryEntryPc>:
 * \a name in standard 8.3 short name format.
 *
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdFile::dirName(const dir_t& dir, char* name) {
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <_ZN6SdFile7dirNameERK14directoryEntryPc+0x6>
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <_ZN6SdFile7dirNameERK14directoryEntryPc+0x8>
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <_ZN6SdFile7dirNameERK14directoryEntryPc+0xa>
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	9c 83       	std	Y+4, r25	; 0x04
    1afc:	8b 83       	std	Y+3, r24	; 0x03
    1afe:	7e 83       	std	Y+6, r23	; 0x06
    1b00:	6d 83       	std	Y+5, r22	; 0x05
  uint8_t j = 0;
    1b02:	1a 82       	std	Y+2, r1	; 0x02
  for (uint8_t i = 0; i < 11; i++) {
    1b04:	19 82       	std	Y+1, r1	; 0x01
    1b06:	33 c0       	rjmp	.+102    	; 0x1b6e <_ZN6SdFile7dirNameERK14directoryEntryPc+0x82>
    if (dir.name[i] == ' ')continue;
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	9c 81       	ldd	r25, Y+4	; 0x04
    1b12:	fc 01       	movw	r30, r24
    1b14:	e2 0f       	add	r30, r18
    1b16:	f3 1f       	adc	r31, r19
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 32       	cpi	r24, 0x20	; 32
    1b1c:	29 f1       	breq	.+74     	; 0x1b68 <_ZN6SdFile7dirNameERK14directoryEntryPc+0x7c>
    if (i == 8) name[j++] = '.';
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	88 30       	cpi	r24, 0x08	; 8
    1b22:	69 f4       	brne	.+26     	; 0x1b3e <_ZN6SdFile7dirNameERK14directoryEntryPc+0x52>
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	fc 01       	movw	r30, r24
    1b30:	e2 0f       	add	r30, r18
    1b32:	f3 1f       	adc	r31, r19
    1b34:	8e e2       	ldi	r24, 0x2E	; 46
    1b36:	80 83       	st	Z, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	8f 5f       	subi	r24, 0xFF	; 255
    1b3c:	8a 83       	std	Y+2, r24	; 0x02
    name[j++] = dir.name[i];
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
    1b46:	9e 81       	ldd	r25, Y+6	; 0x06
    1b48:	dc 01       	movw	r26, r24
    1b4a:	a2 0f       	add	r26, r18
    1b4c:	b3 1f       	adc	r27, r19
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	fc 01       	movw	r30, r24
    1b5a:	e2 0f       	add	r30, r18
    1b5c:	f3 1f       	adc	r31, r19
    1b5e:	80 81       	ld	r24, Z
    1b60:	8c 93       	st	X, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	8a 83       	std	Y+2, r24	; 0x02
 * \param[in] dir The directory structure containing the name.
 * \param[out] name A 13 byte char array for the formatted name.
 */
void SdFile::dirName(const dir_t& dir, char* name) {
  uint8_t j = 0;
  for (uint8_t i = 0; i < 11; i++) {
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	8f 5f       	subi	r24, 0xFF	; 255
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	8b 30       	cpi	r24, 0x0B	; 11
    1b72:	50 f2       	brcs	.-108    	; 0x1b08 <_ZN6SdFile7dirNameERK14directoryEntryPc+0x1c>
    if (dir.name[i] == ' ')continue;
    if (i == 8) name[j++] = '.';
    name[j++] = dir.name[i];
  }
  name[j] = 0;
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e2 0f       	add	r30, r18
    1b82:	f3 1f       	adc	r31, r19
    1b84:	10 82       	st	Z, r1
}
    1b86:	26 96       	adiw	r28, 0x06	; 6
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <_ZN6SdFile10make83NameEPKcPh>:
    }
  }
}
//------------------------------------------------------------------------------
// format directory name field from a 8.3 name string
uint8_t SdFile::make83Name(const char* str, uint8_t* name) {
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	63 97       	sbiw	r28, 0x13	; 19
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	9b 87       	std	Y+11, r25	; 0x0b
    1bae:	8a 87       	std	Y+10, r24	; 0x0a
    1bb0:	7d 87       	std	Y+13, r23	; 0x0d
    1bb2:	6c 87       	std	Y+12, r22	; 0x0c
  uint8_t c;
  uint8_t n = 7;  // max index for part before dot
    1bb4:	87 e0       	ldi	r24, 0x07	; 7
    1bb6:	88 87       	std	Y+8, r24	; 0x08
  uint8_t i = 0;
    1bb8:	1f 82       	std	Y+7, r1	; 0x07
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <_ZN6SdFile10make83NameEPKcPh+0x3e>
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
    1bbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bc4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	e2 0f       	add	r30, r18
    1bca:	f3 1f       	adc	r31, r19
    1bcc:	80 e2       	ldi	r24, 0x20	; 32
    1bce:	80 83       	st	Z, r24
    1bd0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd2:	8f 5f       	subi	r24, 0xFF	; 255
    1bd4:	8f 83       	std	Y+7, r24	; 0x07
    1bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd8:	8b 30       	cpi	r24, 0x0B	; 11
    1bda:	80 f3       	brcs	.-32     	; 0x1bbc <_ZN6SdFile10make83NameEPKcPh+0x24>
  i = 0;
    1bdc:	1f 82       	std	Y+7, r1	; 0x07
    1bde:	5b c0       	rjmp	.+182    	; 0x1c96 <_ZN6SdFile10make83NameEPKcPh+0xfe>
  while ((c = *str++) != '\0') {
    if (c == '.') {
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	8e 32       	cpi	r24, 0x2E	; 46
    1be4:	51 f4       	brne	.+20     	; 0x1bfa <_ZN6SdFile10make83NameEPKcPh+0x62>
      if (n == 10) return false;  // only one dot allowed
    1be6:	88 85       	ldd	r24, Y+8	; 0x08
    1be8:	8a 30       	cpi	r24, 0x0A	; 10
    1bea:	11 f4       	brne	.+4      	; 0x1bf0 <_ZN6SdFile10make83NameEPKcPh+0x58>
    1bec:	19 8a       	std	Y+17, r1	; 0x11
    1bee:	70 c0       	rjmp	.+224    	; 0x1cd0 <_ZN6SdFile10make83NameEPKcPh+0x138>
      n = 10;  // max index for full 8.3 name
    1bf0:	8a e0       	ldi	r24, 0x0A	; 10
    1bf2:	88 87       	std	Y+8, r24	; 0x08
      i = 8;   // place for extension
    1bf4:	88 e0       	ldi	r24, 0x08	; 8
    1bf6:	8f 83       	std	Y+7, r24	; 0x07
    1bf8:	4e c0       	rjmp	.+156    	; 0x1c96 <_ZN6SdFile10make83NameEPKcPh+0xfe>
    } else {
      // illegal FAT characters
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
    1bfa:	84 e5       	ldi	r24, 0x54	; 84
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	06 c0       	rjmp	.+12     	; 0x1c10 <_ZN6SdFile10make83NameEPKcPh+0x78>
      uint8_t b;
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
    1c04:	9c 81       	ldd	r25, Y+4	; 0x04
    1c06:	89 85       	ldd	r24, Y+9	; 0x09
    1c08:	98 17       	cp	r25, r24
    1c0a:	11 f4       	brne	.+4      	; 0x1c10 <_ZN6SdFile10make83NameEPKcPh+0x78>
    1c0c:	19 8a       	std	Y+17, r1	; 0x11
    1c0e:	60 c0       	rjmp	.+192    	; 0x1cd0 <_ZN6SdFile10make83NameEPKcPh+0x138>
    1c10:	8d 81       	ldd	r24, Y+5	; 0x05
    1c12:	9e 81       	ldd	r25, Y+6	; 0x06
    1c14:	9b 83       	std	Y+3, r25	; 0x03
    1c16:	8a 83       	std	Y+2, r24	; 0x02
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
    1c22:	ea 81       	ldd	r30, Y+2	; 0x02
    1c24:	fb 81       	ldd	r31, Y+3	; 0x03
    1c26:	84 91       	lpm	r24, Z+
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	8c 83       	std	Y+4, r24	; 0x04
    1c2e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c30:	4a 8b       	std	Y+18, r20	; 0x12
    1c32:	5a 89       	ldd	r21, Y+18	; 0x12
    1c34:	55 23       	and	r21, r21
    1c36:	11 f0       	breq	.+4      	; 0x1c3c <_ZN6SdFile10make83NameEPKcPh+0xa4>
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	8a 8b       	std	Y+18, r24	; 0x12
    1c3c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c3e:	88 23       	and	r24, r24
    1c40:	09 f7       	brne	.-62     	; 0x1c04 <_ZN6SdFile10make83NameEPKcPh+0x6c>
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    1c42:	9f 81       	ldd	r25, Y+7	; 0x07
    1c44:	88 85       	ldd	r24, Y+8	; 0x08
    1c46:	89 17       	cp	r24, r25
    1c48:	30 f0       	brcs	.+12     	; 0x1c56 <_ZN6SdFile10make83NameEPKcPh+0xbe>
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	81 32       	cpi	r24, 0x21	; 33
    1c4e:	18 f0       	brcs	.+6      	; 0x1c56 <_ZN6SdFile10make83NameEPKcPh+0xbe>
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	8f 37       	cpi	r24, 0x7F	; 127
    1c54:	10 f0       	brcs	.+4      	; 0x1c5a <_ZN6SdFile10make83NameEPKcPh+0xc2>
    1c56:	19 8a       	std	Y+17, r1	; 0x11
    1c58:	3b c0       	rjmp	.+118    	; 0x1cd0 <_ZN6SdFile10make83NameEPKcPh+0x138>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    1c5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c62:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c64:	fc 01       	movw	r30, r24
    1c66:	e2 0f       	add	r30, r18
    1c68:	f3 1f       	adc	r31, r19
    1c6a:	f8 8b       	std	Y+16, r31	; 0x10
    1c6c:	ef 87       	std	Y+15, r30	; 0x0f
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	81 36       	cpi	r24, 0x61	; 97
    1c72:	40 f0       	brcs	.+16     	; 0x1c84 <_ZN6SdFile10make83NameEPKcPh+0xec>
    1c74:	89 85       	ldd	r24, Y+9	; 0x09
    1c76:	8b 37       	cpi	r24, 0x7B	; 123
    1c78:	28 f4       	brcc	.+10     	; 0x1c84 <_ZN6SdFile10make83NameEPKcPh+0xec>
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	f8 2f       	mov	r31, r24
    1c7e:	f0 52       	subi	r31, 0x20	; 32
    1c80:	fe 87       	std	Y+14, r31	; 0x0e
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <_ZN6SdFile10make83NameEPKcPh+0xf0>
    1c84:	49 85       	ldd	r20, Y+9	; 0x09
    1c86:	4e 87       	std	Y+14, r20	; 0x0e
    1c88:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c8a:	ef 85       	ldd	r30, Y+15	; 0x0f
    1c8c:	f8 89       	ldd	r31, Y+16	; 0x10
    1c8e:	40 83       	st	Z, r20
    1c90:	8f 81       	ldd	r24, Y+7	; 0x07
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	8f 83       	std	Y+7, r24	; 0x07
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    1c96:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c98:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c9a:	80 81       	ld	r24, Z
    1c9c:	89 87       	std	Y+9, r24	; 0x09
    1c9e:	59 85       	ldd	r21, Y+9	; 0x09
    1ca0:	5b 8b       	std	Y+19, r21	; 0x13
    1ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca4:	88 23       	and	r24, r24
    1ca6:	11 f0       	breq	.+4      	; 0x1cac <_ZN6SdFile10make83NameEPKcPh+0x114>
    1ca8:	91 e0       	ldi	r25, 0x01	; 1
    1caa:	9b 8b       	std	Y+19, r25	; 0x13
    1cac:	8b 89       	ldd	r24, Y+19	; 0x13
    1cae:	2a 85       	ldd	r18, Y+10	; 0x0a
    1cb0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1cb2:	2f 5f       	subi	r18, 0xFF	; 255
    1cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb6:	3b 87       	std	Y+11, r19	; 0x0b
    1cb8:	2a 87       	std	Y+10, r18	; 0x0a
    1cba:	88 23       	and	r24, r24
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <_ZN6SdFile10make83NameEPKcPh+0x128>
    1cbe:	90 cf       	rjmp	.-224    	; 0x1be0 <_ZN6SdFile10make83NameEPKcPh+0x48>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    }
  }
  // must have a file name, extension is optional
  return name[0] != ' ';
    1cc0:	ec 85       	ldd	r30, Y+12	; 0x0c
    1cc2:	fd 85       	ldd	r31, Y+13	; 0x0d
    1cc4:	80 81       	ld	r24, Z
    1cc6:	19 8a       	std	Y+17, r1	; 0x11
    1cc8:	80 32       	cpi	r24, 0x20	; 32
    1cca:	11 f0       	breq	.+4      	; 0x1cd0 <_ZN6SdFile10make83NameEPKcPh+0x138>
    1ccc:	e1 e0       	ldi	r30, 0x01	; 1
    1cce:	e9 8b       	std	Y+17, r30	; 0x11
    1cd0:	89 89       	ldd	r24, Y+17	; 0x11
}
    1cd2:	63 96       	adiw	r28, 0x13	; 19
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <_ZN6SdFile7write_PEPKc>:
/**
 * Write a PROGMEM string to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::write_P(PGM_P str) {
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	29 97       	sbiw	r28, 0x09	; 9
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	78 87       	std	Y+8, r23	; 0x08
    1cfe:	6f 83       	std	Y+7, r22	; 0x07
    1d00:	11 c0       	rjmp	.+34     	; 0x1d24 <_ZN6SdFile7write_PEPKc+0x40>
  for (uint8_t c; (c = pgm_read_byte(str)); str++) write(c);
    1d02:	ed 81       	ldd	r30, Y+5	; 0x05
    1d04:	fe 81       	ldd	r31, Y+6	; 0x06
    1d06:	01 90       	ld	r0, Z+
    1d08:	f0 81       	ld	r31, Z
    1d0a:	e0 2d       	mov	r30, r0
    1d0c:	01 90       	ld	r0, Z+
    1d0e:	f0 81       	ld	r31, Z
    1d10:	e0 2d       	mov	r30, r0
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	9e 81       	ldd	r25, Y+6	; 0x06
    1d16:	6c 81       	ldd	r22, Y+4	; 0x04
    1d18:	09 95       	icall
    1d1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d1c:	98 85       	ldd	r25, Y+8	; 0x08
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	98 87       	std	Y+8, r25	; 0x08
    1d22:	8f 83       	std	Y+7, r24	; 0x07
    1d24:	8f 81       	ldd	r24, Y+7	; 0x07
    1d26:	98 85       	ldd	r25, Y+8	; 0x08
    1d28:	9b 83       	std	Y+3, r25	; 0x03
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
    1d2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d30:	84 91       	lpm	r24, Z+
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	8c 83       	std	Y+4, r24	; 0x04
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	89 87       	std	Y+9, r24	; 0x09
    1d3c:	89 85       	ldd	r24, Y+9	; 0x09
    1d3e:	88 23       	and	r24, r24
    1d40:	11 f0       	breq	.+4      	; 0x1d46 <_ZN6SdFile7write_PEPKc+0x62>
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	89 87       	std	Y+9, r24	; 0x09
    1d46:	89 85       	ldd	r24, Y+9	; 0x09
    1d48:	88 23       	and	r24, r24
    1d4a:	d9 f6       	brne	.-74     	; 0x1d02 <_ZN6SdFile7write_PEPKc+0x1e>
}
    1d4c:	29 96       	adiw	r28, 0x09	; 9
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <_ZN6SdFile9writeln_PEPKc>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <_ZN6SdFile9writeln_PEPKc+0x6>
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <_ZN6SdFile9writeln_PEPKc+0x8>
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	7c 83       	std	Y+4, r23	; 0x04
    1d70:	6b 83       	std	Y+3, r22	; 0x03
  write_P(str);
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	9a 81       	ldd	r25, Y+2	; 0x02
    1d76:	2b 81       	ldd	r18, Y+3	; 0x03
    1d78:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7a:	b9 01       	movw	r22, r18
    1d7c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <_ZN6SdFile7write_PEPKc>
  println();
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    1d96:	ef 92       	push	r14
    1d98:	ff 92       	push	r15
    1d9a:	0f 93       	push	r16
    1d9c:	1f 93       	push	r17
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	62 97       	sbiw	r28, 0x12	; 18
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	9a 87       	std	Y+10, r25	; 0x0a
    1db4:	89 87       	std	Y+9, r24	; 0x09
    1db6:	4b 87       	std	Y+11, r20	; 0x0b
    1db8:	5c 87       	std	Y+12, r21	; 0x0c
    1dba:	6d 87       	std	Y+13, r22	; 0x0d
    1dbc:	7e 87       	std	Y+14, r23	; 0x0e
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZNK6SdFile6isOpenEv>
    1dc6:	88 23       	and	r24, r24
    1dc8:	79 f0       	breq	.+30     	; 0x1de8 <_ZN6SdFile7seekSetEm+0x52>
    1dca:	e9 85       	ldd	r30, Y+9	; 0x09
    1dcc:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dce:	23 89       	ldd	r18, Z+19	; 0x13
    1dd0:	34 89       	ldd	r19, Z+20	; 0x14
    1dd2:	45 89       	ldd	r20, Z+21	; 0x15
    1dd4:	56 89       	ldd	r21, Z+22	; 0x16
    1dd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1dd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1dda:	ad 85       	ldd	r26, Y+13	; 0x0d
    1ddc:	be 85       	ldd	r27, Y+14	; 0x0e
    1dde:	28 17       	cp	r18, r24
    1de0:	39 07       	cpc	r19, r25
    1de2:	4a 07       	cpc	r20, r26
    1de4:	5b 07       	cpc	r21, r27
    1de6:	18 f4       	brcc	.+6      	; 0x1dee <_ZN6SdFile7seekSetEm+0x58>
    1de8:	01 e0       	ldi	r16, 0x01	; 1
    1dea:	0a 8b       	std	Y+18, r16	; 0x12
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <_ZN6SdFile7seekSetEm+0x5a>
    1dee:	1a 8a       	std	Y+18, r1	; 0x12
    1df0:	8a 89       	ldd	r24, Y+18	; 0x12
    1df2:	88 23       	and	r24, r24
    1df4:	11 f0       	breq	.+4      	; 0x1dfa <_ZN6SdFile7seekSetEm+0x64>
    1df6:	19 8a       	std	Y+17, r1	; 0x11
    1df8:	e7 c0       	rjmp	.+462    	; 0x1fc8 <_ZN6SdFile7seekSetEm+0x232>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    1dfa:	e9 85       	ldd	r30, Y+9	; 0x09
    1dfc:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dfe:	85 81       	ldd	r24, Z+5	; 0x05
    1e00:	82 30       	cpi	r24, 0x02	; 2
    1e02:	69 f4       	brne	.+26     	; 0x1e1e <_ZN6SdFile7seekSetEm+0x88>
    curPosition_ = pos;
    1e04:	e9 85       	ldd	r30, Y+9	; 0x09
    1e06:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e08:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e0c:	ad 85       	ldd	r26, Y+13	; 0x0d
    1e0e:	be 85       	ldd	r27, Y+14	; 0x0e
    1e10:	82 87       	std	Z+10, r24	; 0x0a
    1e12:	93 87       	std	Z+11, r25	; 0x0b
    1e14:	a4 87       	std	Z+12, r26	; 0x0c
    1e16:	b5 87       	std	Z+13, r27	; 0x0d
    return true;
    1e18:	11 e0       	ldi	r17, 0x01	; 1
    1e1a:	19 8b       	std	Y+17, r17	; 0x11
    1e1c:	d5 c0       	rjmp	.+426    	; 0x1fc8 <_ZN6SdFile7seekSetEm+0x232>
  }
  if (pos == 0) {
    1e1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e20:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e22:	ad 85       	ldd	r26, Y+13	; 0x0d
    1e24:	be 85       	ldd	r27, Y+14	; 0x0e
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	a1 05       	cpc	r26, r1
    1e2a:	b1 05       	cpc	r27, r1
    1e2c:	79 f4       	brne	.+30     	; 0x1e4c <_ZN6SdFile7seekSetEm+0xb6>
    // set position to start of file
    curCluster_ = 0;
    1e2e:	e9 85       	ldd	r30, Y+9	; 0x09
    1e30:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e32:	16 82       	std	Z+6, r1	; 0x06
    1e34:	17 82       	std	Z+7, r1	; 0x07
    1e36:	10 86       	std	Z+8, r1	; 0x08
    1e38:	11 86       	std	Z+9, r1	; 0x09
    curPosition_ = 0;
    1e3a:	e9 85       	ldd	r30, Y+9	; 0x09
    1e3c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e3e:	12 86       	std	Z+10, r1	; 0x0a
    1e40:	13 86       	std	Z+11, r1	; 0x0b
    1e42:	14 86       	std	Z+12, r1	; 0x0c
    1e44:	15 86       	std	Z+13, r1	; 0x0d
    return true;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	89 8b       	std	Y+17, r24	; 0x11
    1e4a:	be c0       	rjmp	.+380    	; 0x1fc8 <_ZN6SdFile7seekSetEm+0x232>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    1e4c:	e9 85       	ldd	r30, Y+9	; 0x09
    1e4e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e50:	82 85       	ldd	r24, Z+10	; 0x0a
    1e52:	93 85       	ldd	r25, Z+11	; 0x0b
    1e54:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e56:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e58:	9c 01       	movw	r18, r24
    1e5a:	ad 01       	movw	r20, r26
    1e5c:	21 50       	subi	r18, 0x01	; 1
    1e5e:	30 40       	sbci	r19, 0x00	; 0
    1e60:	40 40       	sbci	r20, 0x00	; 0
    1e62:	50 40       	sbci	r21, 0x00	; 0
    1e64:	e9 85       	ldd	r30, Y+9	; 0x09
    1e66:	fa 85       	ldd	r31, Y+10	; 0x0a
    1e68:	03 8c       	ldd	r0, Z+27	; 0x1b
    1e6a:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1e6c:	e0 2d       	mov	r30, r0
    1e6e:	85 85       	ldd	r24, Z+13	; 0x0d
    1e70:	88 2f       	mov	r24, r24
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	09 96       	adiw	r24, 0x09	; 9
    1e76:	79 01       	movw	r14, r18
    1e78:	8a 01       	movw	r16, r20
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <_ZN6SdFile7seekSetEm+0xee>
    1e7c:	16 95       	lsr	r17
    1e7e:	07 95       	ror	r16
    1e80:	f7 94       	ror	r15
    1e82:	e7 94       	ror	r14
    1e84:	8a 95       	dec	r24
    1e86:	d2 f7       	brpl	.-12     	; 0x1e7c <_ZN6SdFile7seekSetEm+0xe6>
    1e88:	d8 01       	movw	r26, r16
    1e8a:	c7 01       	movw	r24, r14
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	af 83       	std	Y+7, r26	; 0x07
    1e92:	b8 87       	std	Y+8, r27	; 0x08
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    1e94:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e96:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e98:	ad 85       	ldd	r26, Y+13	; 0x0d
    1e9a:	be 85       	ldd	r27, Y+14	; 0x0e
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	ad 01       	movw	r20, r26
    1ea0:	21 50       	subi	r18, 0x01	; 1
    1ea2:	30 40       	sbci	r19, 0x00	; 0
    1ea4:	40 40       	sbci	r20, 0x00	; 0
    1ea6:	50 40       	sbci	r21, 0x00	; 0
    1ea8:	e9 85       	ldd	r30, Y+9	; 0x09
    1eaa:	fa 85       	ldd	r31, Y+10	; 0x0a
    1eac:	03 8c       	ldd	r0, Z+27	; 0x1b
    1eae:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1eb0:	e0 2d       	mov	r30, r0
    1eb2:	85 85       	ldd	r24, Z+13	; 0x0d
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	09 96       	adiw	r24, 0x09	; 9
    1eba:	79 01       	movw	r14, r18
    1ebc:	8a 01       	movw	r16, r20
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <_ZN6SdFile7seekSetEm+0x132>
    1ec0:	16 95       	lsr	r17
    1ec2:	07 95       	ror	r16
    1ec4:	f7 94       	ror	r15
    1ec6:	e7 94       	ror	r14
    1ec8:	8a 95       	dec	r24
    1eca:	d2 f7       	brpl	.-12     	; 0x1ec0 <_ZN6SdFile7seekSetEm+0x12a>
    1ecc:	d8 01       	movw	r26, r16
    1ece:	c7 01       	movw	r24, r14
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	9a 83       	std	Y+2, r25	; 0x02
    1ed4:	ab 83       	std	Y+3, r26	; 0x03
    1ed6:	bc 83       	std	Y+4, r27	; 0x04

  if (nNew < nCur || curPosition_ == 0) {
    1ed8:	29 81       	ldd	r18, Y+1	; 0x01
    1eda:	3a 81       	ldd	r19, Y+2	; 0x02
    1edc:	4b 81       	ldd	r20, Y+3	; 0x03
    1ede:	5c 81       	ldd	r21, Y+4	; 0x04
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	af 81       	ldd	r26, Y+7	; 0x07
    1ee6:	b8 85       	ldd	r27, Y+8	; 0x08
    1ee8:	28 17       	cp	r18, r24
    1eea:	39 07       	cpc	r19, r25
    1eec:	4a 07       	cpc	r20, r26
    1eee:	5b 07       	cpc	r21, r27
    1ef0:	50 f0       	brcs	.+20     	; 0x1f06 <_ZN6SdFile7seekSetEm+0x170>
    1ef2:	e9 85       	ldd	r30, Y+9	; 0x09
    1ef4:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ef6:	82 85       	ldd	r24, Z+10	; 0x0a
    1ef8:	93 85       	ldd	r25, Z+11	; 0x0b
    1efa:	a4 85       	ldd	r26, Z+12	; 0x0c
    1efc:	b5 85       	ldd	r27, Z+13	; 0x0d
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	a1 05       	cpc	r26, r1
    1f02:	b1 05       	cpc	r27, r1
    1f04:	69 f4       	brne	.+26     	; 0x1f20 <_ZN6SdFile7seekSetEm+0x18a>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    1f06:	e9 85       	ldd	r30, Y+9	; 0x09
    1f08:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f0a:	87 89       	ldd	r24, Z+23	; 0x17
    1f0c:	90 8d       	ldd	r25, Z+24	; 0x18
    1f0e:	a1 8d       	ldd	r26, Z+25	; 0x19
    1f10:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1f12:	e9 85       	ldd	r30, Y+9	; 0x09
    1f14:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f16:	86 83       	std	Z+6, r24	; 0x06
    1f18:	97 83       	std	Z+7, r25	; 0x07
    1f1a:	a0 87       	std	Z+8, r26	; 0x08
    1f1c:	b1 87       	std	Z+9, r27	; 0x09
    1f1e:	2f c0       	rjmp	.+94     	; 0x1f7e <_ZN6SdFile7seekSetEm+0x1e8>
  } else {
    // advance from curPosition
    nNew -= nCur;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	ab 81       	ldd	r26, Y+3	; 0x03
    1f26:	bc 81       	ldd	r27, Y+4	; 0x04
    1f28:	2d 81       	ldd	r18, Y+5	; 0x05
    1f2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f2c:	4f 81       	ldd	r20, Y+7	; 0x07
    1f2e:	58 85       	ldd	r21, Y+8	; 0x08
    1f30:	82 1b       	sub	r24, r18
    1f32:	93 0b       	sbc	r25, r19
    1f34:	a4 0b       	sbc	r26, r20
    1f36:	b5 0b       	sbc	r27, r21
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	9a 83       	std	Y+2, r25	; 0x02
    1f3c:	ab 83       	std	Y+3, r26	; 0x03
    1f3e:	bc 83       	std	Y+4, r27	; 0x04
    1f40:	1e c0       	rjmp	.+60     	; 0x1f7e <_ZN6SdFile7seekSetEm+0x1e8>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    1f42:	e9 85       	ldd	r30, Y+9	; 0x09
    1f44:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f46:	63 8d       	ldd	r22, Z+27	; 0x1b
    1f48:	74 8d       	ldd	r23, Z+28	; 0x1c
    1f4a:	e9 85       	ldd	r30, Y+9	; 0x09
    1f4c:	fa 85       	ldd	r31, Y+10	; 0x0a
    1f4e:	26 81       	ldd	r18, Z+6	; 0x06
    1f50:	37 81       	ldd	r19, Z+7	; 0x07
    1f52:	40 85       	ldd	r20, Z+8	; 0x08
    1f54:	51 85       	ldd	r21, Z+9	; 0x09
    1f56:	89 85       	ldd	r24, Y+9	; 0x09
    1f58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	36 96       	adiw	r30, 0x06	; 6
    1f5e:	cb 01       	movw	r24, r22
    1f60:	ba 01       	movw	r22, r20
    1f62:	a9 01       	movw	r20, r18
    1f64:	9f 01       	movw	r18, r30
    1f66:	0e 94 0d 28 	call	0x501a	; 0x501a <_ZNK8SdVolume6fatGetEmPm>
    1f6a:	1f 86       	std	Y+15, r1	; 0x0f
    1f6c:	88 23       	and	r24, r24
    1f6e:	11 f4       	brne	.+4      	; 0x1f74 <_ZN6SdFile7seekSetEm+0x1de>
    1f70:	01 e0       	ldi	r16, 0x01	; 1
    1f72:	0f 87       	std	Y+15, r16	; 0x0f
    1f74:	1f 85       	ldd	r17, Y+15	; 0x0f
    1f76:	11 23       	and	r17, r17
    1f78:	11 f0       	breq	.+4      	; 0x1f7e <_ZN6SdFile7seekSetEm+0x1e8>
    1f7a:	19 8a       	std	Y+17, r1	; 0x11
    1f7c:	25 c0       	rjmp	.+74     	; 0x1fc8 <_ZN6SdFile7seekSetEm+0x232>
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    1f7e:	18 8a       	std	Y+16, r1	; 0x10
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	ab 81       	ldd	r26, Y+3	; 0x03
    1f86:	bc 81       	ldd	r27, Y+4	; 0x04
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	a1 05       	cpc	r26, r1
    1f8c:	b1 05       	cpc	r27, r1
    1f8e:	11 f0       	breq	.+4      	; 0x1f94 <_ZN6SdFile7seekSetEm+0x1fe>
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	88 8b       	std	Y+16, r24	; 0x10
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	ab 81       	ldd	r26, Y+3	; 0x03
    1f9a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	a1 09       	sbc	r26, r1
    1fa0:	b1 09       	sbc	r27, r1
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	9a 83       	std	Y+2, r25	; 0x02
    1fa6:	ab 83       	std	Y+3, r26	; 0x03
    1fa8:	bc 83       	std	Y+4, r27	; 0x04
    1faa:	e8 88       	ldd	r14, Y+16	; 0x10
    1fac:	ee 20       	and	r14, r14
    1fae:	49 f6       	brne	.-110    	; 0x1f42 <_ZN6SdFile7seekSetEm+0x1ac>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
    1fb0:	e9 85       	ldd	r30, Y+9	; 0x09
    1fb2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1fb4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fb6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fb8:	ad 85       	ldd	r26, Y+13	; 0x0d
    1fba:	be 85       	ldd	r27, Y+14	; 0x0e
    1fbc:	82 87       	std	Z+10, r24	; 0x0a
    1fbe:	93 87       	std	Z+11, r25	; 0x0b
    1fc0:	a4 87       	std	Z+12, r26	; 0x0c
    1fc2:	b5 87       	std	Z+13, r27	; 0x0d
  return true;
    1fc4:	01 e0       	ldi	r16, 0x01	; 1
    1fc6:	09 8b       	std	Y+17, r16	; 0x11
    1fc8:	89 89       	ldd	r24, Y+17	; 0x11
}
    1fca:	62 96       	adiw	r28, 0x12	; 18
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	1f 91       	pop	r17
    1fdc:	0f 91       	pop	r16
    1fde:	ff 90       	pop	r15
    1fe0:	ef 90       	pop	r14
    1fe2:	08 95       	ret

00001fe4 <_ZN6SdFile7seekEndEv>:
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <_ZN6SdFile7seekEndEv+0x6>
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff6:	23 89       	ldd	r18, Z+19	; 0x13
    1ff8:	34 89       	ldd	r19, Z+20	; 0x14
    1ffa:	45 89       	ldd	r20, Z+21	; 0x15
    1ffc:	56 89       	ldd	r21, Z+22	; 0x16
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	ba 01       	movw	r22, r20
    2004:	a9 01       	movw	r20, r18
    2006:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN6SdFile7seekSetEm>
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <_ZN6SdFile15contiguousRangeEPmS0_>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is not contiguous, file has zero length
 * or an I/O error occurred.
 */
uint8_t SdFile::contiguousRange(uint32_t* bgnBlock, uint32_t* endBlock) {
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	61 97       	sbiw	r28, 0x11	; 17
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	9a 87       	std	Y+10, r25	; 0x0a
    202a:	89 87       	std	Y+9, r24	; 0x09
    202c:	7c 87       	std	Y+12, r23	; 0x0c
    202e:	6b 87       	std	Y+11, r22	; 0x0b
    2030:	5e 87       	std	Y+14, r21	; 0x0e
    2032:	4d 87       	std	Y+13, r20	; 0x0d
  // error if no blocks
  if (firstCluster_ == 0) return false;
    2034:	e9 85       	ldd	r30, Y+9	; 0x09
    2036:	fa 85       	ldd	r31, Y+10	; 0x0a
    2038:	87 89       	ldd	r24, Z+23	; 0x17
    203a:	90 8d       	ldd	r25, Z+24	; 0x18
    203c:	a1 8d       	ldd	r26, Z+25	; 0x19
    203e:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	a1 05       	cpc	r26, r1
    2044:	b1 05       	cpc	r27, r1
    2046:	11 f4       	brne	.+4      	; 0x204c <_ZN6SdFile15contiguousRangeEPmS0_+0x38>
    2048:	19 8a       	std	Y+17, r1	; 0x11
    204a:	97 c0       	rjmp	.+302    	; 0x217a <_ZN6SdFile15contiguousRangeEPmS0_+0x166>

  for (uint32_t c = firstCluster_; ; c++) {
    204c:	e9 85       	ldd	r30, Y+9	; 0x09
    204e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2050:	87 89       	ldd	r24, Z+23	; 0x17
    2052:	90 8d       	ldd	r25, Z+24	; 0x18
    2054:	a1 8d       	ldd	r26, Z+25	; 0x19
    2056:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	ab 83       	std	Y+3, r26	; 0x03
    205e:	bc 83       	std	Y+4, r27	; 0x04
    uint32_t next;
    if (!vol_->fatGet(c, &next)) return false;
    2060:	e9 85       	ldd	r30, Y+9	; 0x09
    2062:	fa 85       	ldd	r31, Y+10	; 0x0a
    2064:	83 8d       	ldd	r24, Z+27	; 0x1b
    2066:	94 8d       	ldd	r25, Z+28	; 0x1c
    2068:	29 81       	ldd	r18, Y+1	; 0x01
    206a:	3a 81       	ldd	r19, Y+2	; 0x02
    206c:	4b 81       	ldd	r20, Y+3	; 0x03
    206e:	5c 81       	ldd	r21, Y+4	; 0x04
    2070:	fe 01       	movw	r30, r28
    2072:	35 96       	adiw	r30, 0x05	; 5
    2074:	ba 01       	movw	r22, r20
    2076:	a9 01       	movw	r20, r18
    2078:	9f 01       	movw	r18, r30
    207a:	0e 94 0d 28 	call	0x501a	; 0x501a <_ZNK8SdVolume6fatGetEmPm>
    207e:	18 8a       	std	Y+16, r1	; 0x10
    2080:	88 23       	and	r24, r24
    2082:	11 f4       	brne	.+4      	; 0x2088 <_ZN6SdFile15contiguousRangeEPmS0_+0x74>
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	88 8b       	std	Y+16, r24	; 0x10
    2088:	88 89       	ldd	r24, Y+16	; 0x10
    208a:	88 23       	and	r24, r24
    208c:	11 f0       	breq	.+4      	; 0x2092 <_ZN6SdFile15contiguousRangeEPmS0_+0x7e>
    208e:	19 8a       	std	Y+17, r1	; 0x11
    2090:	74 c0       	rjmp	.+232    	; 0x217a <_ZN6SdFile15contiguousRangeEPmS0_+0x166>

    // check for contiguous
    if (next != (c + 1)) {
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	ab 81       	ldd	r26, Y+3	; 0x03
    2098:	bc 81       	ldd	r27, Y+4	; 0x04
    209a:	9c 01       	movw	r18, r24
    209c:	ad 01       	movw	r20, r26
    209e:	2f 5f       	subi	r18, 0xFF	; 255
    20a0:	3f 4f       	sbci	r19, 0xFF	; 255
    20a2:	4f 4f       	sbci	r20, 0xFF	; 255
    20a4:	5f 4f       	sbci	r21, 0xFF	; 255
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	af 81       	ldd	r26, Y+7	; 0x07
    20ac:	b8 85       	ldd	r27, Y+8	; 0x08
    20ae:	28 17       	cp	r18, r24
    20b0:	39 07       	cpc	r19, r25
    20b2:	4a 07       	cpc	r20, r26
    20b4:	5b 07       	cpc	r21, r27
    20b6:	09 f4       	brne	.+2      	; 0x20ba <_ZN6SdFile15contiguousRangeEPmS0_+0xa6>
    20b8:	54 c0       	rjmp	.+168    	; 0x2162 <_ZN6SdFile15contiguousRangeEPmS0_+0x14e>
      // error if not end of chain
      if (!vol_->isEOC(next)) return false;
    20ba:	e9 85       	ldd	r30, Y+9	; 0x09
    20bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    20be:	83 8d       	ldd	r24, Z+27	; 0x1b
    20c0:	94 8d       	ldd	r25, Z+28	; 0x1c
    20c2:	2d 81       	ldd	r18, Y+5	; 0x05
    20c4:	3e 81       	ldd	r19, Y+6	; 0x06
    20c6:	4f 81       	ldd	r20, Y+7	; 0x07
    20c8:	58 85       	ldd	r21, Y+8	; 0x08
    20ca:	ba 01       	movw	r22, r20
    20cc:	a9 01       	movw	r20, r18
    20ce:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZNK8SdVolume5isEOCEm>
    20d2:	1f 86       	std	Y+15, r1	; 0x0f
    20d4:	88 23       	and	r24, r24
    20d6:	11 f4       	brne	.+4      	; 0x20dc <_ZN6SdFile15contiguousRangeEPmS0_+0xc8>
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	8f 87       	std	Y+15, r24	; 0x0f
    20dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20de:	88 23       	and	r24, r24
    20e0:	11 f0       	breq	.+4      	; 0x20e6 <_ZN6SdFile15contiguousRangeEPmS0_+0xd2>
    20e2:	19 8a       	std	Y+17, r1	; 0x11
    20e4:	4a c0       	rjmp	.+148    	; 0x217a <_ZN6SdFile15contiguousRangeEPmS0_+0x166>
      *bgnBlock = vol_->clusterStartBlock(firstCluster_);
    20e6:	e9 85       	ldd	r30, Y+9	; 0x09
    20e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    20ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    20ec:	94 8d       	ldd	r25, Z+28	; 0x1c
    20ee:	e9 85       	ldd	r30, Y+9	; 0x09
    20f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    20f2:	27 89       	ldd	r18, Z+23	; 0x17
    20f4:	30 8d       	ldd	r19, Z+24	; 0x18
    20f6:	41 8d       	ldd	r20, Z+25	; 0x19
    20f8:	52 8d       	ldd	r21, Z+26	; 0x1a
    20fa:	ba 01       	movw	r22, r20
    20fc:	a9 01       	movw	r20, r18
    20fe:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZNK8SdVolume17clusterStartBlockEm>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	eb 85       	ldd	r30, Y+11	; 0x0b
    2108:	fc 85       	ldd	r31, Y+12	; 0x0c
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
      *endBlock = vol_->clusterStartBlock(c)
                  + vol_->blocksPerCluster_ - 1;
    2112:	e9 85       	ldd	r30, Y+9	; 0x09
    2114:	fa 85       	ldd	r31, Y+10	; 0x0a
    2116:	83 8d       	ldd	r24, Z+27	; 0x1b
    2118:	94 8d       	ldd	r25, Z+28	; 0x1c
    211a:	29 81       	ldd	r18, Y+1	; 0x01
    211c:	3a 81       	ldd	r19, Y+2	; 0x02
    211e:	4b 81       	ldd	r20, Y+3	; 0x03
    2120:	5c 81       	ldd	r21, Y+4	; 0x04
    2122:	ba 01       	movw	r22, r20
    2124:	a9 01       	movw	r20, r18
    2126:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZNK8SdVolume17clusterStartBlockEm>
    212a:	9b 01       	movw	r18, r22
    212c:	ac 01       	movw	r20, r24
    212e:	e9 85       	ldd	r30, Y+9	; 0x09
    2130:	fa 85       	ldd	r31, Y+10	; 0x0a
    2132:	03 8c       	ldd	r0, Z+27	; 0x1b
    2134:	f4 8d       	ldd	r31, Z+28	; 0x1c
    2136:	e0 2d       	mov	r30, r0
    2138:	84 81       	ldd	r24, Z+4	; 0x04
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a0 e0       	ldi	r26, 0x00	; 0
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	82 0f       	add	r24, r18
    2144:	93 1f       	adc	r25, r19
    2146:	a4 1f       	adc	r26, r20
    2148:	b5 1f       	adc	r27, r21
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	a1 09       	sbc	r26, r1
    214e:	b1 09       	sbc	r27, r1
    2150:	ed 85       	ldd	r30, Y+13	; 0x0d
    2152:	fe 85       	ldd	r31, Y+14	; 0x0e
    2154:	80 83       	st	Z, r24
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	a2 83       	std	Z+2, r26	; 0x02
    215a:	b3 83       	std	Z+3, r27	; 0x03
      return true;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	89 8b       	std	Y+17, r24	; 0x11
    2160:	0c c0       	rjmp	.+24     	; 0x217a <_ZN6SdFile15contiguousRangeEPmS0_+0x166>
 */
uint8_t SdFile::contiguousRange(uint32_t* bgnBlock, uint32_t* endBlock) {
  // error if no blocks
  if (firstCluster_ == 0) return false;

  for (uint32_t c = firstCluster_; ; c++) {
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	9a 81       	ldd	r25, Y+2	; 0x02
    2166:	ab 81       	ldd	r26, Y+3	; 0x03
    2168:	bc 81       	ldd	r27, Y+4	; 0x04
    216a:	01 96       	adiw	r24, 0x01	; 1
    216c:	a1 1d       	adc	r26, r1
    216e:	b1 1d       	adc	r27, r1
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	9a 83       	std	Y+2, r25	; 0x02
    2174:	ab 83       	std	Y+3, r26	; 0x03
    2176:	bc 83       	std	Y+4, r27	; 0x04
    2178:	73 cf       	rjmp	.-282    	; 0x2060 <_ZN6SdFile15contiguousRangeEPmS0_+0x4c>
    217a:	89 89       	ldd	r24, Y+17	; 0x11
      *endBlock = vol_->clusterStartBlock(c)
                  + vol_->blocksPerCluster_ - 1;
      return true;
    }
  }
}
    217c:	61 96       	adiw	r28, 0x11	; 17
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	f8 94       	cli
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	08 95       	ret

0000218e <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	00 d0       	rcall	.+0      	; 0x2194 <_ZN6SdFile13cacheDirEntryEh+0x6>
    2194:	00 d0       	rcall	.+0      	; 0x2196 <_ZN6SdFile13cacheDirEntryEh+0x8>
    2196:	00 d0       	rcall	.+0      	; 0x2198 <_ZN6SdFile13cacheDirEntryEh+0xa>
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	6b 83       	std	Y+3, r22	; 0x03
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    21a2:	e9 81       	ldd	r30, Y+1	; 0x01
    21a4:	fa 81       	ldd	r31, Y+2	; 0x02
    21a6:	86 85       	ldd	r24, Z+14	; 0x0e
    21a8:	97 85       	ldd	r25, Z+15	; 0x0f
    21aa:	a0 89       	ldd	r26, Z+16	; 0x10
    21ac:	b1 89       	ldd	r27, Z+17	; 0x11
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	4b 81       	ldd	r20, Y+3	; 0x03
    21b4:	0e 94 83 24 	call	0x4906	; 0x4906 <_ZN8SdVolume13cacheRawBlockEmh>
    21b8:	1e 82       	std	Y+6, r1	; 0x06
    21ba:	88 23       	and	r24, r24
    21bc:	11 f4       	brne	.+4      	; 0x21c2 <_ZN6SdFile13cacheDirEntryEh+0x34>
    21be:	21 e0       	ldi	r18, 0x01	; 1
    21c0:	2e 83       	std	Y+6, r18	; 0x06
    21c2:	3e 81       	ldd	r19, Y+6	; 0x06
    21c4:	33 23       	and	r19, r19
    21c6:	19 f0       	breq	.+6      	; 0x21ce <_ZN6SdFile13cacheDirEntryEh+0x40>
    21c8:	1d 82       	std	Y+5, r1	; 0x05
    21ca:	1c 82       	std	Y+4, r1	; 0x04
    21cc:	12 c0       	rjmp	.+36     	; 0x21f2 <_ZN6SdFile13cacheDirEntryEh+0x64>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    21ce:	e9 81       	ldd	r30, Y+1	; 0x01
    21d0:	fa 81       	ldd	r31, Y+2	; 0x02
    21d2:	82 89       	ldd	r24, Z+18	; 0x12
    21d4:	88 2f       	mov	r24, r24
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	82 95       	swap	r24
    21de:	92 95       	swap	r25
    21e0:	90 7f       	andi	r25, 0xF0	; 240
    21e2:	98 27       	eor	r25, r24
    21e4:	80 7f       	andi	r24, 0xF0	; 240
    21e6:	98 27       	eor	r25, r24
    21e8:	9c 01       	movw	r18, r24
    21ea:	2c 5b       	subi	r18, 0xBC	; 188
    21ec:	3c 4f       	sbci	r19, 0xFC	; 252
    21ee:	3d 83       	std	Y+5, r19	; 0x05
    21f0:	2c 83       	std	Y+4, r18	; 0x04
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
}
    21f6:	26 96       	adiw	r28, 0x06	; 6
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	27 97       	sbiw	r28, 0x07	; 7
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	9c 83       	std	Y+4, r25	; 0x04
    221e:	8b 83       	std	Y+3, r24	; 0x03
  // only allow open files and directories
  if (!isOpen()) return false;
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZNK6SdFile6isOpenEv>
    2228:	1f 82       	std	Y+7, r1	; 0x07
    222a:	88 23       	and	r24, r24
    222c:	11 f4       	brne	.+4      	; 0x2232 <_ZN6SdFile4syncEv+0x2a>
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	8f 83       	std	Y+7, r24	; 0x07
    2232:	8f 81       	ldd	r24, Y+7	; 0x07
    2234:	88 23       	and	r24, r24
    2236:	11 f0       	breq	.+4      	; 0x223c <_ZN6SdFile4syncEv+0x34>
    2238:	1e 82       	std	Y+6, r1	; 0x06
    223a:	6b c0       	rjmp	.+214    	; 0x2312 <_ZN6SdFile4syncEv+0x10a>

  if (flags_ & F_FILE_DIR_DIRTY) {
    223c:	eb 81       	ldd	r30, Y+3	; 0x03
    223e:	fc 81       	ldd	r31, Y+4	; 0x04
    2240:	84 81       	ldd	r24, Z+4	; 0x04
    2242:	88 23       	and	r24, r24
    2244:	0c f0       	brlt	.+2      	; 0x2248 <_ZN6SdFile4syncEv+0x40>
    2246:	62 c0       	rjmp	.+196    	; 0x230c <_ZN6SdFile4syncEv+0x104>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	61 e0       	ldi	r22, 0x01	; 1
    224e:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN6SdFile13cacheDirEntryEh>
    2252:	9a 83       	std	Y+2, r25	; 0x02
    2254:	89 83       	std	Y+1, r24	; 0x01
    if (!d) return false;
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	11 f4       	brne	.+4      	; 0x2262 <_ZN6SdFile4syncEv+0x5a>
    225e:	1e 82       	std	Y+6, r1	; 0x06
    2260:	58 c0       	rjmp	.+176    	; 0x2312 <_ZN6SdFile4syncEv+0x10a>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <_ZNK6SdFile5isDirEv>
    226a:	1d 82       	std	Y+5, r1	; 0x05
    226c:	88 23       	and	r24, r24
    226e:	11 f4       	brne	.+4      	; 0x2274 <_ZN6SdFile4syncEv+0x6c>
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	88 23       	and	r24, r24
    2278:	61 f0       	breq	.+24     	; 0x2292 <_ZN6SdFile4syncEv+0x8a>
    227a:	eb 81       	ldd	r30, Y+3	; 0x03
    227c:	fc 81       	ldd	r31, Y+4	; 0x04
    227e:	83 89       	ldd	r24, Z+19	; 0x13
    2280:	94 89       	ldd	r25, Z+20	; 0x14
    2282:	a5 89       	ldd	r26, Z+21	; 0x15
    2284:	b6 89       	ldd	r27, Z+22	; 0x16
    2286:	e9 81       	ldd	r30, Y+1	; 0x01
    2288:	fa 81       	ldd	r31, Y+2	; 0x02
    228a:	84 8f       	std	Z+28, r24	; 0x1c
    228c:	95 8f       	std	Z+29, r25	; 0x1d
    228e:	a6 8f       	std	Z+30, r26	; 0x1e
    2290:	b7 8f       	std	Z+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    2292:	eb 81       	ldd	r30, Y+3	; 0x03
    2294:	fc 81       	ldd	r31, Y+4	; 0x04
    2296:	87 89       	ldd	r24, Z+23	; 0x17
    2298:	90 8d       	ldd	r25, Z+24	; 0x18
    229a:	a1 8d       	ldd	r26, Z+25	; 0x19
    229c:	b2 8d       	ldd	r27, Z+26	; 0x1a
    229e:	e9 81       	ldd	r30, Y+1	; 0x01
    22a0:	fa 81       	ldd	r31, Y+2	; 0x02
    22a2:	93 8f       	std	Z+27, r25	; 0x1b
    22a4:	82 8f       	std	Z+26, r24	; 0x1a
    d->firstClusterHigh = firstCluster_ >> 16;
    22a6:	eb 81       	ldd	r30, Y+3	; 0x03
    22a8:	fc 81       	ldd	r31, Y+4	; 0x04
    22aa:	87 89       	ldd	r24, Z+23	; 0x17
    22ac:	90 8d       	ldd	r25, Z+24	; 0x18
    22ae:	a1 8d       	ldd	r26, Z+25	; 0x19
    22b0:	b2 8d       	ldd	r27, Z+26	; 0x1a
    22b2:	cd 01       	movw	r24, r26
    22b4:	aa 27       	eor	r26, r26
    22b6:	bb 27       	eor	r27, r27
    22b8:	e9 81       	ldd	r30, Y+1	; 0x01
    22ba:	fa 81       	ldd	r31, Y+2	; 0x02
    22bc:	95 8b       	std	Z+21, r25	; 0x15
    22be:	84 8b       	std	Z+20, r24	; 0x14

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    22c0:	80 91 40 03 	lds	r24, 0x0340
    22c4:	90 91 41 03 	lds	r25, 0x0341
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	c9 f0       	breq	.+50     	; 0x22fe <_ZN6SdFile4syncEv+0xf6>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    22cc:	e0 91 40 03 	lds	r30, 0x0340
    22d0:	f0 91 41 03 	lds	r31, 0x0341
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	ac 01       	movw	r20, r24
    22da:	48 5e       	subi	r20, 0xE8	; 232
    22dc:	5f 4f       	sbci	r21, 0xFF	; 255
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	9a 81       	ldd	r25, Y+2	; 0x02
    22e2:	9c 01       	movw	r18, r24
    22e4:	2a 5e       	subi	r18, 0xEA	; 234
    22e6:	3f 4f       	sbci	r19, 0xFF	; 255
    22e8:	ca 01       	movw	r24, r20
    22ea:	b9 01       	movw	r22, r18
    22ec:	09 95       	icall
      d->lastAccessDate = d->lastWriteDate;
    22ee:	e9 81       	ldd	r30, Y+1	; 0x01
    22f0:	fa 81       	ldd	r31, Y+2	; 0x02
    22f2:	80 8d       	ldd	r24, Z+24	; 0x18
    22f4:	91 8d       	ldd	r25, Z+25	; 0x19
    22f6:	e9 81       	ldd	r30, Y+1	; 0x01
    22f8:	fa 81       	ldd	r31, Y+2	; 0x02
    22fa:	93 8b       	std	Z+19, r25	; 0x13
    22fc:	82 8b       	std	Z+18, r24	; 0x12
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    22fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2300:	fc 81       	ldd	r31, Y+4	; 0x04
    2302:	84 81       	ldd	r24, Z+4	; 0x04
    2304:	8f 77       	andi	r24, 0x7F	; 127
    2306:	eb 81       	ldd	r30, Y+3	; 0x03
    2308:	fc 81       	ldd	r31, Y+4	; 0x04
    230a:	84 83       	std	Z+4, r24	; 0x04
  }
  return SdVolume::cacheFlush();
    230c:	0e 94 d7 23 	call	0x47ae	; 0x47ae <_ZN8SdVolume10cacheFlushEv>
    2310:	8e 83       	std	Y+6, r24	; 0x06
    2312:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2314:	27 96       	adiw	r28, 0x07	; 7
    2316:	0f b6       	in	r0, 0x3f	; 63
    2318:	f8 94       	cli
    231a:	de bf       	out	0x3e, r29	; 62
    231c:	0f be       	out	0x3f, r0	; 63
    231e:	cd bf       	out	0x3d, r28	; 61
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <_ZN6SdFile5closeEv>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <_ZN6SdFile5closeEv+0x6>
    232c:	00 d0       	rcall	.+0      	; 0x232e <_ZN6SdFile5closeEv+0x8>
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
  if (!sync())return false;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN6SdFile4syncEv>
    233e:	1c 82       	std	Y+4, r1	; 0x04
    2340:	88 23       	and	r24, r24
    2342:	11 f4       	brne	.+4      	; 0x2348 <_ZN6SdFile5closeEv+0x22>
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	8c 83       	std	Y+4, r24	; 0x04
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	88 23       	and	r24, r24
    234c:	11 f0       	breq	.+4      	; 0x2352 <_ZN6SdFile5closeEv+0x2c>
    234e:	1b 82       	std	Y+3, r1	; 0x03
    2350:	05 c0       	rjmp	.+10     	; 0x235c <_ZN6SdFile5closeEv+0x36>
  type_ = FAT_FILE_TYPE_CLOSED;
    2352:	e9 81       	ldd	r30, Y+1	; 0x01
    2354:	fa 81       	ldd	r31, Y+2	; 0x02
    2356:	15 82       	std	Z+5, r1	; 0x05
  return true;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	8b 83       	std	Y+3, r24	; 0x03
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <_ZN6SdFile9timestampEhjhhhhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
         uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    236c:	af 92       	push	r10
    236e:	cf 92       	push	r12
    2370:	ef 92       	push	r14
    2372:	0f 93       	push	r16
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	63 97       	sbiw	r28, 0x13	; 19
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	98 87       	std	Y+8, r25	; 0x08
    238a:	8f 83       	std	Y+7, r24	; 0x07
    238c:	69 87       	std	Y+9, r22	; 0x09
    238e:	5b 87       	std	Y+11, r21	; 0x0b
    2390:	4a 87       	std	Y+10, r20	; 0x0a
    2392:	2c 87       	std	Y+12, r18	; 0x0c
    2394:	0d 87       	std	Y+13, r16	; 0x0d
    2396:	ee 86       	std	Y+14, r14	; 0x0e
    2398:	cf 86       	std	Y+15, r12	; 0x0f
    239a:	a8 8a       	std	Y+16, r10	; 0x10
  if (!isOpen()
    239c:	8f 81       	ldd	r24, Y+7	; 0x07
    239e:	98 85       	ldd	r25, Y+8	; 0x08
    23a0:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZNK6SdFile6isOpenEv>
    23a4:	88 23       	and	r24, r24
    23a6:	09 f1       	breq	.+66     	; 0x23ea <_ZN6SdFile9timestampEhjhhhhh+0x7e>
    23a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ac:	27 e0       	ldi	r18, 0x07	; 7
    23ae:	8c 3b       	cpi	r24, 0xBC	; 188
    23b0:	92 07       	cpc	r25, r18
    23b2:	d8 f0       	brcs	.+54     	; 0x23ea <_ZN6SdFile9timestampEhjhhhhh+0x7e>
    23b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b8:	28 e0       	ldi	r18, 0x08	; 8
    23ba:	8c 33       	cpi	r24, 0x3C	; 60
    23bc:	92 07       	cpc	r25, r18
    23be:	a8 f4       	brcc	.+42     	; 0x23ea <_ZN6SdFile9timestampEhjhhhhh+0x7e>
    23c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    23c2:	88 23       	and	r24, r24
    23c4:	91 f0       	breq	.+36     	; 0x23ea <_ZN6SdFile9timestampEhjhhhhh+0x7e>
    23c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    23c8:	8d 30       	cpi	r24, 0x0D	; 13
    23ca:	78 f4       	brcc	.+30     	; 0x23ea <_ZN6SdFile9timestampEhjhhhhh+0x7e>
    23cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ce:	88 23       	and	r24, r24
    23d0:	61 f0       	breq	.+24     	; 0x23ea <_ZN6SdFile9timestampEhjhhhhh+0x7e>
    23d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d4:	80 32       	cpi	r24, 0x20	; 32
    23d6:	48 f4       	brcc	.+18     	; 0x23ea <_ZN6SdFile9timestampEhjhhhhh+0x7e>
    23d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23da:	88 31       	cpi	r24, 0x18	; 24
    23dc:	30 f4       	brcc	.+12     	; 0x23ea <_ZN6SdFile9timestampEhjhhhhh+0x7e>
    23de:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e0:	8c 33       	cpi	r24, 0x3C	; 60
    23e2:	18 f4       	brcc	.+6      	; 0x23ea <_ZN6SdFile9timestampEhjhhhhh+0x7e>
    23e4:	88 89       	ldd	r24, Y+16	; 0x10
    23e6:	8c 33       	cpi	r24, 0x3C	; 60
    23e8:	18 f0       	brcs	.+6      	; 0x23f0 <_ZN6SdFile9timestampEhjhhhhh+0x84>
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	8b 8b       	std	Y+19, r24	; 0x13
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <_ZN6SdFile9timestampEhjhhhhh+0x86>
    23f0:	1b 8a       	std	Y+19, r1	; 0x13
    23f2:	8b 89       	ldd	r24, Y+19	; 0x13
    23f4:	88 23       	and	r24, r24
    23f6:	11 f0       	breq	.+4      	; 0x23fc <_ZN6SdFile9timestampEhjhhhhh+0x90>
    || day < 1
    || day > 31
    || hour > 23
    || minute > 59
    || second > 59) {
      return false;
    23f8:	1a 8a       	std	Y+18, r1	; 0x12
    23fa:	65 c0       	rjmp	.+202    	; 0x24c6 <_ZN6SdFile9timestampEhjhhhhh+0x15a>
  }
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    23fc:	8f 81       	ldd	r24, Y+7	; 0x07
    23fe:	98 85       	ldd	r25, Y+8	; 0x08
    2400:	61 e0       	ldi	r22, 0x01	; 1
    2402:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN6SdFile13cacheDirEntryEh>
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
  if (!d) return false;
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	11 f4       	brne	.+4      	; 0x2416 <_ZN6SdFile9timestampEhjhhhhh+0xaa>
    2412:	1a 8a       	std	Y+18, r1	; 0x12
    2414:	58 c0       	rjmp	.+176    	; 0x24c6 <_ZN6SdFile9timestampEhjhhhhh+0x15a>

  uint16_t dirDate = FAT_DATE(year, month, day);
    2416:	8a 85       	ldd	r24, Y+10	; 0x0a
    2418:	9b 85       	ldd	r25, Y+11	; 0x0b
    241a:	6c 85       	ldd	r22, Y+12	; 0x0c
    241c:	4d 85       	ldd	r20, Y+13	; 0x0d
    241e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_ZL8FAT_DATEjhh>
    2422:	9c 83       	std	Y+4, r25	; 0x04
    2424:	8b 83       	std	Y+3, r24	; 0x03
  uint16_t dirTime = FAT_TIME(hour, minute, second);
    2426:	8e 85       	ldd	r24, Y+14	; 0x0e
    2428:	6f 85       	ldd	r22, Y+15	; 0x0f
    242a:	48 89       	ldd	r20, Y+16	; 0x10
    242c:	0e 94 40 0b 	call	0x1680	; 0x1680 <_ZL8FAT_TIMEhhh>
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
  if (flags & T_ACCESS) {
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	81 70       	andi	r24, 0x01	; 1
    243c:	90 70       	andi	r25, 0x00	; 0
    243e:	88 23       	and	r24, r24
    2440:	31 f0       	breq	.+12     	; 0x244e <_ZN6SdFile9timestampEhjhhhhh+0xe2>
    d->lastAccessDate = dirDate;
    2442:	ed 81       	ldd	r30, Y+5	; 0x05
    2444:	fe 81       	ldd	r31, Y+6	; 0x06
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	9c 81       	ldd	r25, Y+4	; 0x04
    244a:	93 8b       	std	Z+19, r25	; 0x13
    244c:	82 8b       	std	Z+18, r24	; 0x12
  }
  if (flags & T_CREATE) {
    244e:	89 85       	ldd	r24, Y+9	; 0x09
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	82 70       	andi	r24, 0x02	; 2
    2456:	90 70       	andi	r25, 0x00	; 0
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	d9 f0       	breq	.+54     	; 0x2492 <_ZN6SdFile9timestampEhjhhhhh+0x126>
    d->creationDate = dirDate;
    245c:	ed 81       	ldd	r30, Y+5	; 0x05
    245e:	fe 81       	ldd	r31, Y+6	; 0x06
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	91 8b       	std	Z+17, r25	; 0x11
    2466:	80 8b       	std	Z+16, r24	; 0x10
    d->creationTime = dirTime;
    2468:	ed 81       	ldd	r30, Y+5	; 0x05
    246a:	fe 81       	ldd	r31, Y+6	; 0x06
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	97 87       	std	Z+15, r25	; 0x0f
    2472:	86 87       	std	Z+14, r24	; 0x0e
    // seems to be units of 1/100 second not 1/10 as Microsoft states
    d->creationTimeTenths = second & 1 ? 100 : 0;
    2474:	88 89       	ldd	r24, Y+16	; 0x10
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	81 70       	andi	r24, 0x01	; 1
    247c:	90 70       	andi	r25, 0x00	; 0
    247e:	88 23       	and	r24, r24
    2480:	19 f0       	breq	.+6      	; 0x2488 <_ZN6SdFile9timestampEhjhhhhh+0x11c>
    2482:	24 e6       	ldi	r18, 0x64	; 100
    2484:	29 8b       	std	Y+17, r18	; 0x11
    2486:	01 c0       	rjmp	.+2      	; 0x248a <_ZN6SdFile9timestampEhjhhhhh+0x11e>
    2488:	19 8a       	std	Y+17, r1	; 0x11
    248a:	ed 81       	ldd	r30, Y+5	; 0x05
    248c:	fe 81       	ldd	r31, Y+6	; 0x06
    248e:	89 89       	ldd	r24, Y+17	; 0x11
    2490:	85 87       	std	Z+13, r24	; 0x0d
  }
  if (flags & T_WRITE) {
    2492:	89 85       	ldd	r24, Y+9	; 0x09
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	84 70       	andi	r24, 0x04	; 4
    249a:	90 70       	andi	r25, 0x00	; 0
    249c:	00 97       	sbiw	r24, 0x00	; 0
    249e:	61 f0       	breq	.+24     	; 0x24b8 <_ZN6SdFile9timestampEhjhhhhh+0x14c>
    d->lastWriteDate = dirDate;
    24a0:	ed 81       	ldd	r30, Y+5	; 0x05
    24a2:	fe 81       	ldd	r31, Y+6	; 0x06
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	9c 81       	ldd	r25, Y+4	; 0x04
    24a8:	91 8f       	std	Z+25, r25	; 0x19
    24aa:	80 8f       	std	Z+24, r24	; 0x18
    d->lastWriteTime = dirTime;
    24ac:	ed 81       	ldd	r30, Y+5	; 0x05
    24ae:	fe 81       	ldd	r31, Y+6	; 0x06
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	97 8b       	std	Z+23, r25	; 0x17
    24b6:	86 8b       	std	Z+22, r24	; 0x16
  }
  SdVolume::cacheSetDirty();
    24b8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN8SdVolume13cacheSetDirtyEv>
  return sync();
    24bc:	8f 81       	ldd	r24, Y+7	; 0x07
    24be:	98 85       	ldd	r25, Y+8	; 0x08
    24c0:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN6SdFile4syncEv>
    24c4:	8a 8b       	std	Y+18, r24	; 0x12
    24c6:	8a 89       	ldd	r24, Y+18	; 0x12
}
    24c8:	63 96       	adiw	r28, 0x13	; 19
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	0f 91       	pop	r16
    24da:	ef 90       	pop	r14
    24dc:	cf 90       	pop	r12
    24de:	af 90       	pop	r10
    24e0:	08 95       	ret

000024e2 <_ZN8SdVolume10writeBlockEmPKh>:
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	28 97       	sbiw	r28, 0x08	; 8
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	9a 83       	std	Y+2, r25	; 0x02
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	4b 83       	std	Y+3, r20	; 0x03
    24fc:	5c 83       	std	Y+4, r21	; 0x04
    24fe:	6d 83       	std	Y+5, r22	; 0x05
    2500:	7e 83       	std	Y+6, r23	; 0x06
    2502:	38 87       	std	Y+8, r19	; 0x08
    2504:	2f 83       	std	Y+7, r18	; 0x07
    return sdCard_->writeBlock(block, dst);
    2506:	80 91 44 05 	lds	r24, 0x0544
    250a:	90 91 45 05 	lds	r25, 0x0545
    250e:	2b 81       	ldd	r18, Y+3	; 0x03
    2510:	3c 81       	ldd	r19, Y+4	; 0x04
    2512:	4d 81       	ldd	r20, Y+5	; 0x05
    2514:	5e 81       	ldd	r21, Y+6	; 0x06
    2516:	ef 81       	ldd	r30, Y+7	; 0x07
    2518:	f8 85       	ldd	r31, Y+8	; 0x08
    251a:	ba 01       	movw	r22, r20
    251c:	a9 01       	movw	r20, r18
    251e:	9f 01       	movw	r18, r30
    2520:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN7Sd2Card10writeBlockEmPKh>
  }
    2524:	28 96       	adiw	r28, 0x08	; 8
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <_ZN8SdVolume9fatPutEOCEm>:
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	00 d0       	rcall	.+0      	; 0x2540 <_ZN8SdVolume9fatPutEOCEm+0xa>
    2540:	00 d0       	rcall	.+0      	; 0x2542 <_ZN8SdVolume9fatPutEOCEm+0xc>
    2542:	00 d0       	rcall	.+0      	; 0x2544 <_ZN8SdVolume9fatPutEOCEm+0xe>
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	4b 83       	std	Y+3, r20	; 0x03
    254e:	5c 83       	std	Y+4, r21	; 0x04
    2550:	6d 83       	std	Y+5, r22	; 0x05
    2552:	7e 83       	std	Y+6, r23	; 0x06
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	2b 81       	ldd	r18, Y+3	; 0x03
    255a:	3c 81       	ldd	r19, Y+4	; 0x04
    255c:	4d 81       	ldd	r20, Y+5	; 0x05
    255e:	5e 81       	ldd	r21, Y+6	; 0x06
    2560:	ba 01       	movw	r22, r20
    2562:	a9 01       	movw	r20, r18
    2564:	0f ef       	ldi	r16, 0xFF	; 255
    2566:	1f ef       	ldi	r17, 0xFF	; 255
    2568:	2f ef       	ldi	r18, 0xFF	; 255
    256a:	3f e0       	ldi	r19, 0x0F	; 15
    256c:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <_ZN8SdVolume6fatPutEmm>
    2570:	26 96       	adiw	r28, 0x06	; 6
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	08 95       	ret

00002586 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	6b 97       	sbiw	r28, 0x1b	; 27
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	9a 87       	std	Y+10, r25	; 0x0a
    259c:	89 87       	std	Y+9, r24	; 0x09
    259e:	4b 87       	std	Y+11, r20	; 0x0b
    25a0:	5c 87       	std	Y+12, r21	; 0x0c
    25a2:	6d 87       	std	Y+13, r22	; 0x0d
    25a4:	7e 87       	std	Y+14, r23	; 0x0e
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    25a6:	89 85       	ldd	r24, Y+9	; 0x09
    25a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25aa:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZNK6SdFile6isFileEv>
    25ae:	88 23       	and	r24, r24
    25b0:	49 f0       	breq	.+18     	; 0x25c4 <_ZN6SdFile8truncateEm+0x3e>
    25b2:	e9 85       	ldd	r30, Y+9	; 0x09
    25b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    25b6:	84 81       	ldd	r24, Z+4	; 0x04
    25b8:	88 2f       	mov	r24, r24
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	82 70       	andi	r24, 0x02	; 2
    25be:	90 70       	andi	r25, 0x00	; 0
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	19 f4       	brne	.+6      	; 0x25ca <_ZN6SdFile8truncateEm+0x44>
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	8b 8f       	std	Y+27, r24	; 0x1b
    25c8:	01 c0       	rjmp	.+2      	; 0x25cc <_ZN6SdFile8truncateEm+0x46>
    25ca:	1b 8e       	std	Y+27, r1	; 0x1b
    25cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ce:	88 23       	and	r24, r24
    25d0:	11 f0       	breq	.+4      	; 0x25d6 <_ZN6SdFile8truncateEm+0x50>
    25d2:	1a 8e       	std	Y+26, r1	; 0x1a
    25d4:	0a c1       	rjmp	.+532    	; 0x27ea <_ZN6SdFile8truncateEm+0x264>

  // error if length is greater than current size
  if (length > fileSize_) return false;
    25d6:	e9 85       	ldd	r30, Y+9	; 0x09
    25d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    25da:	23 89       	ldd	r18, Z+19	; 0x13
    25dc:	34 89       	ldd	r19, Z+20	; 0x14
    25de:	45 89       	ldd	r20, Z+21	; 0x15
    25e0:	56 89       	ldd	r21, Z+22	; 0x16
    25e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    25e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    25e6:	ad 85       	ldd	r26, Y+13	; 0x0d
    25e8:	be 85       	ldd	r27, Y+14	; 0x0e
    25ea:	28 17       	cp	r18, r24
    25ec:	39 07       	cpc	r19, r25
    25ee:	4a 07       	cpc	r20, r26
    25f0:	5b 07       	cpc	r21, r27
    25f2:	10 f4       	brcc	.+4      	; 0x25f8 <_ZN6SdFile8truncateEm+0x72>
    25f4:	1a 8e       	std	Y+26, r1	; 0x1a
    25f6:	f9 c0       	rjmp	.+498    	; 0x27ea <_ZN6SdFile8truncateEm+0x264>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    25f8:	e9 85       	ldd	r30, Y+9	; 0x09
    25fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    25fc:	83 89       	ldd	r24, Z+19	; 0x13
    25fe:	94 89       	ldd	r25, Z+20	; 0x14
    2600:	a5 89       	ldd	r26, Z+21	; 0x15
    2602:	b6 89       	ldd	r27, Z+22	; 0x16
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	a1 05       	cpc	r26, r1
    2608:	b1 05       	cpc	r27, r1
    260a:	19 f4       	brne	.+6      	; 0x2612 <_ZN6SdFile8truncateEm+0x8c>
    260c:	91 e0       	ldi	r25, 0x01	; 1
    260e:	9a 8f       	std	Y+26, r25	; 0x1a
    2610:	ec c0       	rjmp	.+472    	; 0x27ea <_ZN6SdFile8truncateEm+0x264>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
    2612:	e9 85       	ldd	r30, Y+9	; 0x09
    2614:	fa 85       	ldd	r31, Y+10	; 0x0a
    2616:	22 85       	ldd	r18, Z+10	; 0x0a
    2618:	33 85       	ldd	r19, Z+11	; 0x0b
    261a:	44 85       	ldd	r20, Z+12	; 0x0c
    261c:	55 85       	ldd	r21, Z+13	; 0x0d
    261e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2620:	9c 85       	ldd	r25, Y+12	; 0x0c
    2622:	ad 85       	ldd	r26, Y+13	; 0x0d
    2624:	be 85       	ldd	r27, Y+14	; 0x0e
    2626:	82 17       	cp	r24, r18
    2628:	93 07       	cpc	r25, r19
    262a:	a4 07       	cpc	r26, r20
    262c:	b5 07       	cpc	r27, r21
    262e:	58 f0       	brcs	.+22     	; 0x2646 <_ZN6SdFile8truncateEm+0xc0>
    2630:	e9 85       	ldd	r30, Y+9	; 0x09
    2632:	fa 85       	ldd	r31, Y+10	; 0x0a
    2634:	82 85       	ldd	r24, Z+10	; 0x0a
    2636:	93 85       	ldd	r25, Z+11	; 0x0b
    2638:	a4 85       	ldd	r26, Z+12	; 0x0c
    263a:	b5 85       	ldd	r27, Z+13	; 0x0d
    263c:	8e 8b       	std	Y+22, r24	; 0x16
    263e:	9f 8b       	std	Y+23, r25	; 0x17
    2640:	a8 8f       	std	Y+24, r26	; 0x18
    2642:	b9 8f       	std	Y+25, r27	; 0x19
    2644:	08 c0       	rjmp	.+16     	; 0x2656 <_ZN6SdFile8truncateEm+0xd0>
    2646:	8b 85       	ldd	r24, Y+11	; 0x0b
    2648:	9c 85       	ldd	r25, Y+12	; 0x0c
    264a:	ad 85       	ldd	r26, Y+13	; 0x0d
    264c:	be 85       	ldd	r27, Y+14	; 0x0e
    264e:	8e 8b       	std	Y+22, r24	; 0x16
    2650:	9f 8b       	std	Y+23, r25	; 0x17
    2652:	a8 8f       	std	Y+24, r26	; 0x18
    2654:	b9 8f       	std	Y+25, r27	; 0x19
    2656:	8e 89       	ldd	r24, Y+22	; 0x16
    2658:	9f 89       	ldd	r25, Y+23	; 0x17
    265a:	a8 8d       	ldd	r26, Y+24	; 0x18
    265c:	b9 8d       	ldd	r27, Y+25	; 0x19
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	ab 83       	std	Y+3, r26	; 0x03
    2664:	bc 83       	std	Y+4, r27	; 0x04

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	2b 85       	ldd	r18, Y+11	; 0x0b
    266c:	3c 85       	ldd	r19, Y+12	; 0x0c
    266e:	4d 85       	ldd	r20, Y+13	; 0x0d
    2670:	5e 85       	ldd	r21, Y+14	; 0x0e
    2672:	ba 01       	movw	r22, r20
    2674:	a9 01       	movw	r20, r18
    2676:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN6SdFile7seekSetEm>
    267a:	1d 8a       	std	Y+21, r1	; 0x15
    267c:	88 23       	and	r24, r24
    267e:	11 f4       	brne	.+4      	; 0x2684 <_ZN6SdFile8truncateEm+0xfe>
    2680:	91 e0       	ldi	r25, 0x01	; 1
    2682:	9d 8b       	std	Y+21, r25	; 0x15
    2684:	ad 89       	ldd	r26, Y+21	; 0x15
    2686:	aa 23       	and	r26, r26
    2688:	11 f0       	breq	.+4      	; 0x268e <_ZN6SdFile8truncateEm+0x108>
    268a:	1a 8e       	std	Y+26, r1	; 0x1a
    268c:	ae c0       	rjmp	.+348    	; 0x27ea <_ZN6SdFile8truncateEm+0x264>

  if (length == 0) {
    268e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2690:	9c 85       	ldd	r25, Y+12	; 0x0c
    2692:	ad 85       	ldd	r26, Y+13	; 0x0d
    2694:	be 85       	ldd	r27, Y+14	; 0x0e
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	a1 05       	cpc	r26, r1
    269a:	b1 05       	cpc	r27, r1
    269c:	f9 f4       	brne	.+62     	; 0x26dc <_ZN6SdFile8truncateEm+0x156>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    269e:	e9 85       	ldd	r30, Y+9	; 0x09
    26a0:	fa 85       	ldd	r31, Y+10	; 0x0a
    26a2:	83 8d       	ldd	r24, Z+27	; 0x1b
    26a4:	94 8d       	ldd	r25, Z+28	; 0x1c
    26a6:	e9 85       	ldd	r30, Y+9	; 0x09
    26a8:	fa 85       	ldd	r31, Y+10	; 0x0a
    26aa:	27 89       	ldd	r18, Z+23	; 0x17
    26ac:	30 8d       	ldd	r19, Z+24	; 0x18
    26ae:	41 8d       	ldd	r20, Z+25	; 0x19
    26b0:	52 8d       	ldd	r21, Z+26	; 0x1a
    26b2:	ba 01       	movw	r22, r20
    26b4:	a9 01       	movw	r20, r18
    26b6:	0e 94 db 28 	call	0x51b6	; 0x51b6 <_ZN8SdVolume9freeChainEm>
    26ba:	1c 8a       	std	Y+20, r1	; 0x14
    26bc:	88 23       	and	r24, r24
    26be:	11 f4       	brne	.+4      	; 0x26c4 <_ZN6SdFile8truncateEm+0x13e>
    26c0:	b1 e0       	ldi	r27, 0x01	; 1
    26c2:	bc 8b       	std	Y+20, r27	; 0x14
    26c4:	8c 89       	ldd	r24, Y+20	; 0x14
    26c6:	88 23       	and	r24, r24
    26c8:	11 f0       	breq	.+4      	; 0x26ce <_ZN6SdFile8truncateEm+0x148>
    26ca:	1a 8e       	std	Y+26, r1	; 0x1a
    26cc:	8e c0       	rjmp	.+284    	; 0x27ea <_ZN6SdFile8truncateEm+0x264>
    firstCluster_ = 0;
    26ce:	e9 85       	ldd	r30, Y+9	; 0x09
    26d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    26d2:	17 8a       	std	Z+23, r1	; 0x17
    26d4:	10 8e       	std	Z+24, r1	; 0x18
    26d6:	11 8e       	std	Z+25, r1	; 0x19
    26d8:	12 8e       	std	Z+26, r1	; 0x1a
    26da:	5d c0       	rjmp	.+186    	; 0x2796 <_ZN6SdFile8truncateEm+0x210>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
    26dc:	e9 85       	ldd	r30, Y+9	; 0x09
    26de:	fa 85       	ldd	r31, Y+10	; 0x0a
    26e0:	83 8d       	ldd	r24, Z+27	; 0x1b
    26e2:	94 8d       	ldd	r25, Z+28	; 0x1c
    26e4:	e9 85       	ldd	r30, Y+9	; 0x09
    26e6:	fa 85       	ldd	r31, Y+10	; 0x0a
    26e8:	26 81       	ldd	r18, Z+6	; 0x06
    26ea:	37 81       	ldd	r19, Z+7	; 0x07
    26ec:	40 85       	ldd	r20, Z+8	; 0x08
    26ee:	51 85       	ldd	r21, Z+9	; 0x09
    26f0:	fe 01       	movw	r30, r28
    26f2:	35 96       	adiw	r30, 0x05	; 5
    26f4:	ba 01       	movw	r22, r20
    26f6:	a9 01       	movw	r20, r18
    26f8:	9f 01       	movw	r18, r30
    26fa:	0e 94 0d 28 	call	0x501a	; 0x501a <_ZNK8SdVolume6fatGetEmPm>
    26fe:	1b 8a       	std	Y+19, r1	; 0x13
    2700:	88 23       	and	r24, r24
    2702:	11 f4       	brne	.+4      	; 0x2708 <_ZN6SdFile8truncateEm+0x182>
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	9b 8b       	std	Y+19, r25	; 0x13
    2708:	ab 89       	ldd	r26, Y+19	; 0x13
    270a:	aa 23       	and	r26, r26
    270c:	11 f0       	breq	.+4      	; 0x2712 <_ZN6SdFile8truncateEm+0x18c>
    270e:	1a 8e       	std	Y+26, r1	; 0x1a
    2710:	6c c0       	rjmp	.+216    	; 0x27ea <_ZN6SdFile8truncateEm+0x264>

    if (!vol_->isEOC(toFree)) {
    2712:	e9 85       	ldd	r30, Y+9	; 0x09
    2714:	fa 85       	ldd	r31, Y+10	; 0x0a
    2716:	83 8d       	ldd	r24, Z+27	; 0x1b
    2718:	94 8d       	ldd	r25, Z+28	; 0x1c
    271a:	2d 81       	ldd	r18, Y+5	; 0x05
    271c:	3e 81       	ldd	r19, Y+6	; 0x06
    271e:	4f 81       	ldd	r20, Y+7	; 0x07
    2720:	58 85       	ldd	r21, Y+8	; 0x08
    2722:	ba 01       	movw	r22, r20
    2724:	a9 01       	movw	r20, r18
    2726:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZNK8SdVolume5isEOCEm>
    272a:	1a 8a       	std	Y+18, r1	; 0x12
    272c:	88 23       	and	r24, r24
    272e:	11 f4       	brne	.+4      	; 0x2734 <_ZN6SdFile8truncateEm+0x1ae>
    2730:	b1 e0       	ldi	r27, 0x01	; 1
    2732:	ba 8b       	std	Y+18, r27	; 0x12
    2734:	8a 89       	ldd	r24, Y+18	; 0x12
    2736:	88 23       	and	r24, r24
    2738:	71 f1       	breq	.+92     	; 0x2796 <_ZN6SdFile8truncateEm+0x210>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
    273a:	e9 85       	ldd	r30, Y+9	; 0x09
    273c:	fa 85       	ldd	r31, Y+10	; 0x0a
    273e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2740:	94 8d       	ldd	r25, Z+28	; 0x1c
    2742:	2d 81       	ldd	r18, Y+5	; 0x05
    2744:	3e 81       	ldd	r19, Y+6	; 0x06
    2746:	4f 81       	ldd	r20, Y+7	; 0x07
    2748:	58 85       	ldd	r21, Y+8	; 0x08
    274a:	ba 01       	movw	r22, r20
    274c:	a9 01       	movw	r20, r18
    274e:	0e 94 db 28 	call	0x51b6	; 0x51b6 <_ZN8SdVolume9freeChainEm>
    2752:	19 8a       	std	Y+17, r1	; 0x11
    2754:	88 23       	and	r24, r24
    2756:	11 f4       	brne	.+4      	; 0x275c <_ZN6SdFile8truncateEm+0x1d6>
    2758:	91 e0       	ldi	r25, 0x01	; 1
    275a:	99 8b       	std	Y+17, r25	; 0x11
    275c:	a9 89       	ldd	r26, Y+17	; 0x11
    275e:	aa 23       	and	r26, r26
    2760:	11 f0       	breq	.+4      	; 0x2766 <_ZN6SdFile8truncateEm+0x1e0>
    2762:	1a 8e       	std	Y+26, r1	; 0x1a
    2764:	42 c0       	rjmp	.+132    	; 0x27ea <_ZN6SdFile8truncateEm+0x264>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    2766:	e9 85       	ldd	r30, Y+9	; 0x09
    2768:	fa 85       	ldd	r31, Y+10	; 0x0a
    276a:	83 8d       	ldd	r24, Z+27	; 0x1b
    276c:	94 8d       	ldd	r25, Z+28	; 0x1c
    276e:	e9 85       	ldd	r30, Y+9	; 0x09
    2770:	fa 85       	ldd	r31, Y+10	; 0x0a
    2772:	26 81       	ldd	r18, Z+6	; 0x06
    2774:	37 81       	ldd	r19, Z+7	; 0x07
    2776:	40 85       	ldd	r20, Z+8	; 0x08
    2778:	51 85       	ldd	r21, Z+9	; 0x09
    277a:	ba 01       	movw	r22, r20
    277c:	a9 01       	movw	r20, r18
    277e:	0e 94 9b 12 	call	0x2536	; 0x2536 <_ZN8SdVolume9fatPutEOCEm>
    2782:	18 8a       	std	Y+16, r1	; 0x10
    2784:	88 23       	and	r24, r24
    2786:	11 f4       	brne	.+4      	; 0x278c <_ZN6SdFile8truncateEm+0x206>
    2788:	b1 e0       	ldi	r27, 0x01	; 1
    278a:	b8 8b       	std	Y+16, r27	; 0x10
    278c:	88 89       	ldd	r24, Y+16	; 0x10
    278e:	88 23       	and	r24, r24
    2790:	11 f0       	breq	.+4      	; 0x2796 <_ZN6SdFile8truncateEm+0x210>
    2792:	1a 8e       	std	Y+26, r1	; 0x1a
    2794:	2a c0       	rjmp	.+84     	; 0x27ea <_ZN6SdFile8truncateEm+0x264>
    }
  }
  fileSize_ = length;
    2796:	e9 85       	ldd	r30, Y+9	; 0x09
    2798:	fa 85       	ldd	r31, Y+10	; 0x0a
    279a:	8b 85       	ldd	r24, Y+11	; 0x0b
    279c:	9c 85       	ldd	r25, Y+12	; 0x0c
    279e:	ad 85       	ldd	r26, Y+13	; 0x0d
    27a0:	be 85       	ldd	r27, Y+14	; 0x0e
    27a2:	83 8b       	std	Z+19, r24	; 0x13
    27a4:	94 8b       	std	Z+20, r25	; 0x14
    27a6:	a5 8b       	std	Z+21, r26	; 0x15
    27a8:	b6 8b       	std	Z+22, r27	; 0x16

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    27aa:	e9 85       	ldd	r30, Y+9	; 0x09
    27ac:	fa 85       	ldd	r31, Y+10	; 0x0a
    27ae:	84 81       	ldd	r24, Z+4	; 0x04
    27b0:	80 68       	ori	r24, 0x80	; 128
    27b2:	e9 85       	ldd	r30, Y+9	; 0x09
    27b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    27b6:	84 83       	std	Z+4, r24	; 0x04

  if (!sync()) return false;
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN6SdFile4syncEv>
    27c0:	1f 86       	std	Y+15, r1	; 0x0f
    27c2:	88 23       	and	r24, r24
    27c4:	11 f4       	brne	.+4      	; 0x27ca <_ZN6SdFile8truncateEm+0x244>
    27c6:	91 e0       	ldi	r25, 0x01	; 1
    27c8:	9f 87       	std	Y+15, r25	; 0x0f
    27ca:	af 85       	ldd	r26, Y+15	; 0x0f
    27cc:	aa 23       	and	r26, r26
    27ce:	11 f0       	breq	.+4      	; 0x27d4 <_ZN6SdFile8truncateEm+0x24e>
    27d0:	1a 8e       	std	Y+26, r1	; 0x1a
    27d2:	0b c0       	rjmp	.+22     	; 0x27ea <_ZN6SdFile8truncateEm+0x264>

  // set file to correct position
  return seekSet(newPos);
    27d4:	89 85       	ldd	r24, Y+9	; 0x09
    27d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d8:	29 81       	ldd	r18, Y+1	; 0x01
    27da:	3a 81       	ldd	r19, Y+2	; 0x02
    27dc:	4b 81       	ldd	r20, Y+3	; 0x03
    27de:	5c 81       	ldd	r21, Y+4	; 0x04
    27e0:	ba 01       	movw	r22, r20
    27e2:	a9 01       	movw	r20, r18
    27e4:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN6SdFile7seekSetEm>
    27e8:	8a 8f       	std	Y+26, r24	; 0x1a
    27ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
}
    27ec:	6b 96       	adiw	r28, 0x1b	; 27
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	08 95       	ret

000027fe <_ZN6SdFile6removeEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	00 d0       	rcall	.+0      	; 0x2804 <_ZN6SdFile6removeEv+0x6>
    2804:	00 d0       	rcall	.+0      	; 0x2806 <_ZN6SdFile6removeEv+0x8>
    2806:	00 d0       	rcall	.+0      	; 0x2808 <_ZN6SdFile6removeEv+0xa>
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	9c 83       	std	Y+4, r25	; 0x04
    280e:	8b 83       	std	Y+3, r24	; 0x03
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	9c 81       	ldd	r25, Y+4	; 0x04
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	70 e0       	ldi	r23, 0x00	; 0
    281c:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZN6SdFile8truncateEm>
    2820:	1e 82       	std	Y+6, r1	; 0x06
    2822:	88 23       	and	r24, r24
    2824:	11 f4       	brne	.+4      	; 0x282a <_ZN6SdFile6removeEv+0x2c>
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	8e 83       	std	Y+6, r24	; 0x06
    282a:	8e 81       	ldd	r24, Y+6	; 0x06
    282c:	88 23       	and	r24, r24
    282e:	11 f0       	breq	.+4      	; 0x2834 <_ZN6SdFile6removeEv+0x36>
    2830:	1d 82       	std	Y+5, r1	; 0x05
    2832:	17 c0       	rjmp	.+46     	; 0x2862 <_ZN6SdFile6removeEv+0x64>

  // cache directory entry
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	9c 81       	ldd	r25, Y+4	; 0x04
    2838:	61 e0       	ldi	r22, 0x01	; 1
    283a:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN6SdFile13cacheDirEntryEh>
    283e:	9a 83       	std	Y+2, r25	; 0x02
    2840:	89 83       	std	Y+1, r24	; 0x01
  if (!d) return false;
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	11 f4       	brne	.+4      	; 0x284e <_ZN6SdFile6removeEv+0x50>
    284a:	1d 82       	std	Y+5, r1	; 0x05
    284c:	0a c0       	rjmp	.+20     	; 0x2862 <_ZN6SdFile6removeEv+0x64>

  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    284e:	e9 81       	ldd	r30, Y+1	; 0x01
    2850:	fa 81       	ldd	r31, Y+2	; 0x02
    2852:	85 ee       	ldi	r24, 0xE5	; 229
    2854:	80 83       	st	Z, r24

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;
    2856:	eb 81       	ldd	r30, Y+3	; 0x03
    2858:	fc 81       	ldd	r31, Y+4	; 0x04
    285a:	15 82       	std	Z+5, r1	; 0x05

  // write entry to SD
  return SdVolume::cacheFlush();
    285c:	0e 94 d7 23 	call	0x47ae	; 0x47ae <_ZN8SdVolume10cacheFlushEv>
    2860:	8d 83       	std	Y+5, r24	; 0x05
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2864:	26 96       	adiw	r28, 0x06	; 6
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <_ZN8SdVolume8readDataEmjjPh>:
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
    2876:	ef 92       	push	r14
    2878:	ff 92       	push	r15
    287a:	0f 93       	push	r16
    287c:	1f 93       	push	r17
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	2c 97       	sbiw	r28, 0x0c	; 12
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01
    2896:	4b 83       	std	Y+3, r20	; 0x03
    2898:	5c 83       	std	Y+4, r21	; 0x04
    289a:	6d 83       	std	Y+5, r22	; 0x05
    289c:	7e 83       	std	Y+6, r23	; 0x06
    289e:	38 87       	std	Y+8, r19	; 0x08
    28a0:	2f 83       	std	Y+7, r18	; 0x07
    28a2:	1a 87       	std	Y+10, r17	; 0x0a
    28a4:	09 87       	std	Y+9, r16	; 0x09
    28a6:	fc 86       	std	Y+12, r15	; 0x0c
    28a8:	eb 86       	std	Y+11, r14	; 0x0b
      return sdCard_->readData(block, offset, count, dst);
    28aa:	80 91 44 05 	lds	r24, 0x0544
    28ae:	90 91 45 05 	lds	r25, 0x0545
    28b2:	2b 81       	ldd	r18, Y+3	; 0x03
    28b4:	3c 81       	ldd	r19, Y+4	; 0x04
    28b6:	4d 81       	ldd	r20, Y+5	; 0x05
    28b8:	5e 81       	ldd	r21, Y+6	; 0x06
    28ba:	ef 81       	ldd	r30, Y+7	; 0x07
    28bc:	f8 85       	ldd	r31, Y+8	; 0x08
    28be:	a9 85       	ldd	r26, Y+9	; 0x09
    28c0:	ba 85       	ldd	r27, Y+10	; 0x0a
    28c2:	eb 84       	ldd	r14, Y+11	; 0x0b
    28c4:	fc 84       	ldd	r15, Y+12	; 0x0c
    28c6:	ba 01       	movw	r22, r20
    28c8:	a9 01       	movw	r20, r18
    28ca:	9f 01       	movw	r18, r30
    28cc:	8d 01       	movw	r16, r26
    28ce:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN7Sd2Card8readDataEmjjPh>
  }
    28d2:	2c 96       	adiw	r28, 0x0c	; 12
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	1f 91       	pop	r17
    28e4:	0f 91       	pop	r16
    28e6:	ff 90       	pop	r15
    28e8:	ef 90       	pop	r14
    28ea:	08 95       	ret

000028ec <_ZN6SdFile4readEPvj>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    28ec:	af 92       	push	r10
    28ee:	bf 92       	push	r11
    28f0:	cf 92       	push	r12
    28f2:	df 92       	push	r13
    28f4:	ef 92       	push	r14
    28f6:	ff 92       	push	r15
    28f8:	0f 93       	push	r16
    28fa:	1f 93       	push	r17
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	6e 97       	sbiw	r28, 0x1e	; 30
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	9b 8b       	std	Y+19, r25	; 0x13
    2912:	8a 8b       	std	Y+18, r24	; 0x12
    2914:	7d 8b       	std	Y+21, r23	; 0x15
    2916:	6c 8b       	std	Y+20, r22	; 0x14
    2918:	5f 8b       	std	Y+23, r21	; 0x17
    291a:	4e 8b       	std	Y+22, r20	; 0x16
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
    291c:	8c 89       	ldd	r24, Y+20	; 0x14
    291e:	9d 89       	ldd	r25, Y+21	; 0x15
    2920:	99 8b       	std	Y+17, r25	; 0x11
    2922:	88 8b       	std	Y+16, r24	; 0x10

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    2924:	8a 89       	ldd	r24, Y+18	; 0x12
    2926:	9b 89       	ldd	r25, Y+19	; 0x13
    2928:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZNK6SdFile6isOpenEv>
    292c:	88 23       	and	r24, r24
    292e:	61 f0       	breq	.+24     	; 0x2948 <_ZN6SdFile4readEPvj+0x5c>
    2930:	ea 89       	ldd	r30, Y+18	; 0x12
    2932:	fb 89       	ldd	r31, Y+19	; 0x13
    2934:	84 81       	ldd	r24, Z+4	; 0x04
    2936:	88 2f       	mov	r24, r24
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	81 70       	andi	r24, 0x01	; 1
    293c:	90 70       	andi	r25, 0x00	; 0
    293e:	98 2f       	mov	r25, r24
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	89 27       	eor	r24, r25
    2944:	88 23       	and	r24, r24
    2946:	19 f0       	breq	.+6      	; 0x294e <_ZN6SdFile4readEPvj+0x62>
    2948:	21 e0       	ldi	r18, 0x01	; 1
    294a:	2e 8f       	std	Y+30, r18	; 0x1e
    294c:	01 c0       	rjmp	.+2      	; 0x2950 <_ZN6SdFile4readEPvj+0x64>
    294e:	1e 8e       	std	Y+30, r1	; 0x1e
    2950:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2952:	88 23       	and	r24, r24
    2954:	29 f0       	breq	.+10     	; 0x2960 <_ZN6SdFile4readEPvj+0x74>
    2956:	4f ef       	ldi	r20, 0xFF	; 255
    2958:	5f ef       	ldi	r21, 0xFF	; 255
    295a:	5d 8f       	std	Y+29, r21	; 0x1d
    295c:	4c 8f       	std	Y+28, r20	; 0x1c
    295e:	98 c1       	rjmp	.+816    	; 0x2c90 <_ZN6SdFile4readEPvj+0x3a4>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    2960:	8e 89       	ldd	r24, Y+22	; 0x16
    2962:	9f 89       	ldd	r25, Y+23	; 0x17
    2964:	7c 01       	movw	r14, r24
    2966:	00 e0       	ldi	r16, 0x00	; 0
    2968:	10 e0       	ldi	r17, 0x00	; 0
    296a:	ea 89       	ldd	r30, Y+18	; 0x12
    296c:	fb 89       	ldd	r31, Y+19	; 0x13
    296e:	23 89       	ldd	r18, Z+19	; 0x13
    2970:	34 89       	ldd	r19, Z+20	; 0x14
    2972:	45 89       	ldd	r20, Z+21	; 0x15
    2974:	56 89       	ldd	r21, Z+22	; 0x16
    2976:	ea 89       	ldd	r30, Y+18	; 0x12
    2978:	fb 89       	ldd	r31, Y+19	; 0x13
    297a:	82 85       	ldd	r24, Z+10	; 0x0a
    297c:	93 85       	ldd	r25, Z+11	; 0x0b
    297e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2980:	b5 85       	ldd	r27, Z+13	; 0x0d
    2982:	59 01       	movw	r10, r18
    2984:	6a 01       	movw	r12, r20
    2986:	a8 1a       	sub	r10, r24
    2988:	b9 0a       	sbc	r11, r25
    298a:	ca 0a       	sbc	r12, r26
    298c:	db 0a       	sbc	r13, r27
    298e:	d6 01       	movw	r26, r12
    2990:	c5 01       	movw	r24, r10
    2992:	8e 15       	cp	r24, r14
    2994:	9f 05       	cpc	r25, r15
    2996:	a0 07       	cpc	r26, r16
    2998:	b1 07       	cpc	r27, r17
    299a:	98 f4       	brcc	.+38     	; 0x29c2 <_ZN6SdFile4readEPvj+0xd6>
    299c:	ea 89       	ldd	r30, Y+18	; 0x12
    299e:	fb 89       	ldd	r31, Y+19	; 0x13
    29a0:	83 89       	ldd	r24, Z+19	; 0x13
    29a2:	94 89       	ldd	r25, Z+20	; 0x14
    29a4:	a5 89       	ldd	r26, Z+21	; 0x15
    29a6:	b6 89       	ldd	r27, Z+22	; 0x16
    29a8:	9c 01       	movw	r18, r24
    29aa:	ea 89       	ldd	r30, Y+18	; 0x12
    29ac:	fb 89       	ldd	r31, Y+19	; 0x13
    29ae:	82 85       	ldd	r24, Z+10	; 0x0a
    29b0:	93 85       	ldd	r25, Z+11	; 0x0b
    29b2:	a4 85       	ldd	r26, Z+12	; 0x0c
    29b4:	b5 85       	ldd	r27, Z+13	; 0x0d
    29b6:	69 01       	movw	r12, r18
    29b8:	c8 1a       	sub	r12, r24
    29ba:	d9 0a       	sbc	r13, r25
    29bc:	c6 01       	movw	r24, r12
    29be:	9f 8b       	std	Y+23, r25	; 0x17
    29c0:	8e 8b       	std	Y+22, r24	; 0x16

  // amount left to read
  uint16_t toRead = nbyte;
    29c2:	8e 89       	ldd	r24, Y+22	; 0x16
    29c4:	9f 89       	ldd	r25, Y+23	; 0x17
    29c6:	9f 87       	std	Y+15, r25	; 0x0f
    29c8:	8e 87       	std	Y+14, r24	; 0x0e
    29ca:	59 c1       	rjmp	.+690    	; 0x2c7e <_ZN6SdFile4readEPvj+0x392>
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    29cc:	ea 89       	ldd	r30, Y+18	; 0x12
    29ce:	fb 89       	ldd	r31, Y+19	; 0x13
    29d0:	82 85       	ldd	r24, Z+10	; 0x0a
    29d2:	93 85       	ldd	r25, Z+11	; 0x0b
    29d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    29d6:	b5 85       	ldd	r27, Z+13	; 0x0d
    29d8:	91 70       	andi	r25, 0x01	; 1
    29da:	99 87       	std	Y+9, r25	; 0x09
    29dc:	88 87       	std	Y+8, r24	; 0x08
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    29de:	ea 89       	ldd	r30, Y+18	; 0x12
    29e0:	fb 89       	ldd	r31, Y+19	; 0x13
    29e2:	85 81       	ldd	r24, Z+5	; 0x05
    29e4:	82 30       	cpi	r24, 0x02	; 2
    29e6:	01 f5       	brne	.+64     	; 0x2a28 <_ZN6SdFile4readEPvj+0x13c>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    29e8:	ea 89       	ldd	r30, Y+18	; 0x12
    29ea:	fb 89       	ldd	r31, Y+19	; 0x13
    29ec:	83 8d       	ldd	r24, Z+27	; 0x1b
    29ee:	94 8d       	ldd	r25, Z+28	; 0x1c
    29f0:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_ZNK8SdVolume12rootDirStartEv>
    29f4:	9b 01       	movw	r18, r22
    29f6:	ac 01       	movw	r20, r24
    29f8:	ea 89       	ldd	r30, Y+18	; 0x12
    29fa:	fb 89       	ldd	r31, Y+19	; 0x13
    29fc:	82 85       	ldd	r24, Z+10	; 0x0a
    29fe:	93 85       	ldd	r25, Z+11	; 0x0b
    2a00:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a02:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a04:	07 2e       	mov	r0, r23
    2a06:	79 e0       	ldi	r23, 0x09	; 9
    2a08:	b6 95       	lsr	r27
    2a0a:	a7 95       	ror	r26
    2a0c:	97 95       	ror	r25
    2a0e:	87 95       	ror	r24
    2a10:	7a 95       	dec	r23
    2a12:	d1 f7       	brne	.-12     	; 0x2a08 <_ZN6SdFile4readEPvj+0x11c>
    2a14:	70 2d       	mov	r23, r0
    2a16:	82 0f       	add	r24, r18
    2a18:	93 1f       	adc	r25, r19
    2a1a:	a4 1f       	adc	r26, r20
    2a1c:	b5 1f       	adc	r27, r21
    2a1e:	8a 87       	std	Y+10, r24	; 0x0a
    2a20:	9b 87       	std	Y+11, r25	; 0x0b
    2a22:	ac 87       	std	Y+12, r26	; 0x0c
    2a24:	bd 87       	std	Y+13, r27	; 0x0d
    2a26:	6b c0       	rjmp	.+214    	; 0x2afe <_ZN6SdFile4readEPvj+0x212>
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2a28:	ea 89       	ldd	r30, Y+18	; 0x12
    2a2a:	fb 89       	ldd	r31, Y+19	; 0x13
    2a2c:	83 8d       	ldd	r24, Z+27	; 0x1b
    2a2e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2a30:	ea 89       	ldd	r30, Y+18	; 0x12
    2a32:	fb 89       	ldd	r31, Y+19	; 0x13
    2a34:	22 85       	ldd	r18, Z+10	; 0x0a
    2a36:	33 85       	ldd	r19, Z+11	; 0x0b
    2a38:	44 85       	ldd	r20, Z+12	; 0x0c
    2a3a:	55 85       	ldd	r21, Z+13	; 0x0d
    2a3c:	ba 01       	movw	r22, r20
    2a3e:	a9 01       	movw	r20, r18
    2a40:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZNK8SdVolume14blockOfClusterEm>
    2a44:	8d 83       	std	Y+5, r24	; 0x05
      if (offset == 0 && blockOfCluster == 0) {
    2a46:	88 85       	ldd	r24, Y+8	; 0x08
    2a48:	99 85       	ldd	r25, Y+9	; 0x09
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	d9 f5       	brne	.+118    	; 0x2ac4 <_ZN6SdFile4readEPvj+0x1d8>
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	88 23       	and	r24, r24
    2a52:	c1 f5       	brne	.+112    	; 0x2ac4 <_ZN6SdFile4readEPvj+0x1d8>
        // start of new cluster
        if (curPosition_ == 0) {
    2a54:	ea 89       	ldd	r30, Y+18	; 0x12
    2a56:	fb 89       	ldd	r31, Y+19	; 0x13
    2a58:	82 85       	ldd	r24, Z+10	; 0x0a
    2a5a:	93 85       	ldd	r25, Z+11	; 0x0b
    2a5c:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a5e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	a1 05       	cpc	r26, r1
    2a64:	b1 05       	cpc	r27, r1
    2a66:	69 f4       	brne	.+26     	; 0x2a82 <_ZN6SdFile4readEPvj+0x196>
          // use first cluster in file
          curCluster_ = firstCluster_;
    2a68:	ea 89       	ldd	r30, Y+18	; 0x12
    2a6a:	fb 89       	ldd	r31, Y+19	; 0x13
    2a6c:	87 89       	ldd	r24, Z+23	; 0x17
    2a6e:	90 8d       	ldd	r25, Z+24	; 0x18
    2a70:	a1 8d       	ldd	r26, Z+25	; 0x19
    2a72:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2a74:	ea 89       	ldd	r30, Y+18	; 0x12
    2a76:	fb 89       	ldd	r31, Y+19	; 0x13
    2a78:	86 83       	std	Z+6, r24	; 0x06
    2a7a:	97 83       	std	Z+7, r25	; 0x07
    2a7c:	a0 87       	std	Z+8, r26	; 0x08
    2a7e:	b1 87       	std	Z+9, r27	; 0x09
    2a80:	21 c0       	rjmp	.+66     	; 0x2ac4 <_ZN6SdFile4readEPvj+0x1d8>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    2a82:	ea 89       	ldd	r30, Y+18	; 0x12
    2a84:	fb 89       	ldd	r31, Y+19	; 0x13
    2a86:	63 8d       	ldd	r22, Z+27	; 0x1b
    2a88:	74 8d       	ldd	r23, Z+28	; 0x1c
    2a8a:	ea 89       	ldd	r30, Y+18	; 0x12
    2a8c:	fb 89       	ldd	r31, Y+19	; 0x13
    2a8e:	26 81       	ldd	r18, Z+6	; 0x06
    2a90:	37 81       	ldd	r19, Z+7	; 0x07
    2a92:	40 85       	ldd	r20, Z+8	; 0x08
    2a94:	51 85       	ldd	r21, Z+9	; 0x09
    2a96:	8a 89       	ldd	r24, Y+18	; 0x12
    2a98:	9b 89       	ldd	r25, Y+19	; 0x13
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	36 96       	adiw	r30, 0x06	; 6
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	ba 01       	movw	r22, r20
    2aa2:	a9 01       	movw	r20, r18
    2aa4:	9f 01       	movw	r18, r30
    2aa6:	0e 94 0d 28 	call	0x501a	; 0x501a <_ZNK8SdVolume6fatGetEmPm>
    2aaa:	1b 8e       	std	Y+27, r1	; 0x1b
    2aac:	88 23       	and	r24, r24
    2aae:	11 f4       	brne	.+4      	; 0x2ab4 <_ZN6SdFile4readEPvj+0x1c8>
    2ab0:	21 e0       	ldi	r18, 0x01	; 1
    2ab2:	2b 8f       	std	Y+27, r18	; 0x1b
    2ab4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2ab6:	44 23       	and	r20, r20
    2ab8:	29 f0       	breq	.+10     	; 0x2ac4 <_ZN6SdFile4readEPvj+0x1d8>
    2aba:	8f ef       	ldi	r24, 0xFF	; 255
    2abc:	9f ef       	ldi	r25, 0xFF	; 255
    2abe:	9d 8f       	std	Y+29, r25	; 0x1d
    2ac0:	8c 8f       	std	Y+28, r24	; 0x1c
    2ac2:	e6 c0       	rjmp	.+460    	; 0x2c90 <_ZN6SdFile4readEPvj+0x3a4>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2ac4:	ea 89       	ldd	r30, Y+18	; 0x12
    2ac6:	fb 89       	ldd	r31, Y+19	; 0x13
    2ac8:	83 8d       	ldd	r24, Z+27	; 0x1b
    2aca:	94 8d       	ldd	r25, Z+28	; 0x1c
    2acc:	ea 89       	ldd	r30, Y+18	; 0x12
    2ace:	fb 89       	ldd	r31, Y+19	; 0x13
    2ad0:	26 81       	ldd	r18, Z+6	; 0x06
    2ad2:	37 81       	ldd	r19, Z+7	; 0x07
    2ad4:	40 85       	ldd	r20, Z+8	; 0x08
    2ad6:	51 85       	ldd	r21, Z+9	; 0x09
    2ad8:	ba 01       	movw	r22, r20
    2ada:	a9 01       	movw	r20, r18
    2adc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZNK8SdVolume17clusterStartBlockEm>
    2ae0:	9b 01       	movw	r18, r22
    2ae2:	ac 01       	movw	r20, r24
    2ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae6:	88 2f       	mov	r24, r24
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	a0 e0       	ldi	r26, 0x00	; 0
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	82 0f       	add	r24, r18
    2af0:	93 1f       	adc	r25, r19
    2af2:	a4 1f       	adc	r26, r20
    2af4:	b5 1f       	adc	r27, r21
    2af6:	8a 87       	std	Y+10, r24	; 0x0a
    2af8:	9b 87       	std	Y+11, r25	; 0x0b
    2afa:	ac 87       	std	Y+12, r26	; 0x0c
    2afc:	bd 87       	std	Y+13, r27	; 0x0d
    }
    uint16_t n = toRead;
    2afe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b00:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b02:	9f 83       	std	Y+7, r25	; 0x07
    2b04:	8e 83       	std	Y+6, r24	; 0x06

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	32 e0       	ldi	r19, 0x02	; 2
    2b0a:	88 85       	ldd	r24, Y+8	; 0x08
    2b0c:	99 85       	ldd	r25, Y+9	; 0x09
    2b0e:	28 1b       	sub	r18, r24
    2b10:	39 0b       	sbc	r19, r25
    2b12:	8e 81       	ldd	r24, Y+6	; 0x06
    2b14:	9f 81       	ldd	r25, Y+7	; 0x07
    2b16:	28 17       	cp	r18, r24
    2b18:	39 07       	cpc	r19, r25
    2b1a:	40 f4       	brcc	.+16     	; 0x2b2c <_ZN6SdFile4readEPvj+0x240>
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	92 e0       	ldi	r25, 0x02	; 2
    2b20:	28 85       	ldd	r18, Y+8	; 0x08
    2b22:	39 85       	ldd	r19, Y+9	; 0x09
    2b24:	82 1b       	sub	r24, r18
    2b26:	93 0b       	sbc	r25, r19
    2b28:	9f 83       	std	Y+7, r25	; 0x07
    2b2a:	8e 83       	std	Y+6, r24	; 0x06

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    2b2c:	8a 89       	ldd	r24, Y+18	; 0x12
    2b2e:	9b 89       	ldd	r25, Y+19	; 0x13
    2b30:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZNK6SdFile14unbufferedReadEv>
    2b34:	88 23       	and	r24, r24
    2b36:	31 f4       	brne	.+12     	; 0x2b44 <_ZN6SdFile4readEPvj+0x258>
    2b38:	8e 81       	ldd	r24, Y+6	; 0x06
    2b3a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b3c:	22 e0       	ldi	r18, 0x02	; 2
    2b3e:	80 30       	cpi	r24, 0x00	; 0
    2b40:	92 07       	cpc	r25, r18
    2b42:	a1 f4       	brne	.+40     	; 0x2b6c <_ZN6SdFile4readEPvj+0x280>
    2b44:	20 91 68 00 	lds	r18, 0x0068
    2b48:	30 91 69 00 	lds	r19, 0x0069
    2b4c:	40 91 6a 00 	lds	r20, 0x006A
    2b50:	50 91 6b 00 	lds	r21, 0x006B
    2b54:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b56:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b58:	ac 85       	ldd	r26, Y+12	; 0x0c
    2b5a:	bd 85       	ldd	r27, Y+13	; 0x0d
    2b5c:	82 17       	cp	r24, r18
    2b5e:	93 07       	cpc	r25, r19
    2b60:	a4 07       	cpc	r26, r20
    2b62:	b5 07       	cpc	r27, r21
    2b64:	19 f0       	breq	.+6      	; 0x2b6c <_ZN6SdFile4readEPvj+0x280>
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	4a 8f       	std	Y+26, r20	; 0x1a
    2b6a:	01 c0       	rjmp	.+2      	; 0x2b6e <_ZN6SdFile4readEPvj+0x282>
    2b6c:	1a 8e       	std	Y+26, r1	; 0x1a
    2b6e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b70:	88 23       	and	r24, r24
    2b72:	51 f1       	breq	.+84     	; 0x2bc8 <_ZN6SdFile4readEPvj+0x2dc>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
    2b74:	ea 89       	ldd	r30, Y+18	; 0x12
    2b76:	fb 89       	ldd	r31, Y+19	; 0x13
    2b78:	83 8d       	ldd	r24, Z+27	; 0x1b
    2b7a:	94 8d       	ldd	r25, Z+28	; 0x1c
    2b7c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b7e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b80:	4c 85       	ldd	r20, Y+12	; 0x0c
    2b82:	5d 85       	ldd	r21, Y+13	; 0x0d
    2b84:	e8 85       	ldd	r30, Y+8	; 0x08
    2b86:	f9 85       	ldd	r31, Y+9	; 0x09
    2b88:	ae 81       	ldd	r26, Y+6	; 0x06
    2b8a:	bf 81       	ldd	r27, Y+7	; 0x07
    2b8c:	e8 88       	ldd	r14, Y+16	; 0x10
    2b8e:	f9 88       	ldd	r15, Y+17	; 0x11
    2b90:	ba 01       	movw	r22, r20
    2b92:	a9 01       	movw	r20, r18
    2b94:	9f 01       	movw	r18, r30
    2b96:	8d 01       	movw	r16, r26
    2b98:	0e 94 3b 14 	call	0x2876	; 0x2876 <_ZN8SdVolume8readDataEmjjPh>
    2b9c:	19 8e       	std	Y+25, r1	; 0x19
    2b9e:	88 23       	and	r24, r24
    2ba0:	11 f4       	brne	.+4      	; 0x2ba6 <_ZN6SdFile4readEPvj+0x2ba>
    2ba2:	51 e0       	ldi	r21, 0x01	; 1
    2ba4:	59 8f       	std	Y+25, r21	; 0x19
    2ba6:	89 8d       	ldd	r24, Y+25	; 0x19
    2ba8:	88 23       	and	r24, r24
    2baa:	29 f0       	breq	.+10     	; 0x2bb6 <_ZN6SdFile4readEPvj+0x2ca>
    2bac:	4f ef       	ldi	r20, 0xFF	; 255
    2bae:	5f ef       	ldi	r21, 0xFF	; 255
    2bb0:	5d 8f       	std	Y+29, r21	; 0x1d
    2bb2:	4c 8f       	std	Y+28, r20	; 0x1c
    2bb4:	6d c0       	rjmp	.+218    	; 0x2c90 <_ZN6SdFile4readEPvj+0x3a4>
      dst += n;
    2bb6:	88 89       	ldd	r24, Y+16	; 0x10
    2bb8:	99 89       	ldd	r25, Y+17	; 0x11
    2bba:	2e 81       	ldd	r18, Y+6	; 0x06
    2bbc:	3f 81       	ldd	r19, Y+7	; 0x07
    2bbe:	82 0f       	add	r24, r18
    2bc0:	93 1f       	adc	r25, r19
    2bc2:	99 8b       	std	Y+17, r25	; 0x11
    2bc4:	88 8b       	std	Y+16, r24	; 0x10
    2bc6:	3c c0       	rjmp	.+120    	; 0x2c40 <_ZN6SdFile4readEPvj+0x354>
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    2bc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bca:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bcc:	ac 85       	ldd	r26, Y+12	; 0x0c
    2bce:	bd 85       	ldd	r27, Y+13	; 0x0d
    2bd0:	bc 01       	movw	r22, r24
    2bd2:	cd 01       	movw	r24, r26
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	0e 94 83 24 	call	0x4906	; 0x4906 <_ZN8SdVolume13cacheRawBlockEmh>
    2bda:	18 8e       	std	Y+24, r1	; 0x18
    2bdc:	88 23       	and	r24, r24
    2bde:	11 f4       	brne	.+4      	; 0x2be4 <_ZN6SdFile4readEPvj+0x2f8>
    2be0:	51 e0       	ldi	r21, 0x01	; 1
    2be2:	58 8f       	std	Y+24, r21	; 0x18
    2be4:	88 8d       	ldd	r24, Y+24	; 0x18
    2be6:	88 23       	and	r24, r24
    2be8:	29 f0       	breq	.+10     	; 0x2bf4 <_ZN6SdFile4readEPvj+0x308>
    2bea:	4f ef       	ldi	r20, 0xFF	; 255
    2bec:	5f ef       	ldi	r21, 0xFF	; 255
    2bee:	5d 8f       	std	Y+29, r21	; 0x1d
    2bf0:	4c 8f       	std	Y+28, r20	; 0x1c
    2bf2:	4e c0       	rjmp	.+156    	; 0x2c90 <_ZN6SdFile4readEPvj+0x3a4>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    2bf4:	88 85       	ldd	r24, Y+8	; 0x08
    2bf6:	99 85       	ldd	r25, Y+9	; 0x09
    2bf8:	8c 5b       	subi	r24, 0xBC	; 188
    2bfa:	9c 4f       	sbci	r25, 0xFC	; 252
    2bfc:	9c 83       	std	Y+4, r25	; 0x04
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
      uint8_t* end = src + n;
    2c00:	2b 81       	ldd	r18, Y+3	; 0x03
    2c02:	3c 81       	ldd	r19, Y+4	; 0x04
    2c04:	8e 81       	ldd	r24, Y+6	; 0x06
    2c06:	9f 81       	ldd	r25, Y+7	; 0x07
    2c08:	82 0f       	add	r24, r18
    2c0a:	93 1f       	adc	r25, r19
    2c0c:	9a 83       	std	Y+2, r25	; 0x02
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    2c10:	10 c0       	rjmp	.+32     	; 0x2c32 <_ZN6SdFile4readEPvj+0x346>
      while (src != end) *dst++ = *src++;
    2c12:	eb 81       	ldd	r30, Y+3	; 0x03
    2c14:	fc 81       	ldd	r31, Y+4	; 0x04
    2c16:	80 81       	ld	r24, Z
    2c18:	e8 89       	ldd	r30, Y+16	; 0x10
    2c1a:	f9 89       	ldd	r31, Y+17	; 0x11
    2c1c:	80 83       	st	Z, r24
    2c1e:	88 89       	ldd	r24, Y+16	; 0x10
    2c20:	99 89       	ldd	r25, Y+17	; 0x11
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	99 8b       	std	Y+17, r25	; 0x11
    2c26:	88 8b       	std	Y+16, r24	; 0x10
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2c:	01 96       	adiw	r24, 0x01	; 1
    2c2e:	9c 83       	std	Y+4, r25	; 0x04
    2c30:	8b 83       	std	Y+3, r24	; 0x03
    2c32:	2b 81       	ldd	r18, Y+3	; 0x03
    2c34:	3c 81       	ldd	r19, Y+4	; 0x04
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3a:	28 17       	cp	r18, r24
    2c3c:	39 07       	cpc	r19, r25
    2c3e:	49 f7       	brne	.-46     	; 0x2c12 <_ZN6SdFile4readEPvj+0x326>
    }
    curPosition_ += n;
    2c40:	ea 89       	ldd	r30, Y+18	; 0x12
    2c42:	fb 89       	ldd	r31, Y+19	; 0x13
    2c44:	22 85       	ldd	r18, Z+10	; 0x0a
    2c46:	33 85       	ldd	r19, Z+11	; 0x0b
    2c48:	44 85       	ldd	r20, Z+12	; 0x0c
    2c4a:	55 85       	ldd	r21, Z+13	; 0x0d
    2c4c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c4e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c50:	cc 01       	movw	r24, r24
    2c52:	a0 e0       	ldi	r26, 0x00	; 0
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	82 0f       	add	r24, r18
    2c58:	93 1f       	adc	r25, r19
    2c5a:	a4 1f       	adc	r26, r20
    2c5c:	b5 1f       	adc	r27, r21
    2c5e:	ea 89       	ldd	r30, Y+18	; 0x12
    2c60:	fb 89       	ldd	r31, Y+19	; 0x13
    2c62:	82 87       	std	Z+10, r24	; 0x0a
    2c64:	93 87       	std	Z+11, r25	; 0x0b
    2c66:	a4 87       	std	Z+12, r26	; 0x0c
    2c68:	b5 87       	std	Z+13, r27	; 0x0d
    toRead -= n;
    2c6a:	2e 85       	ldd	r18, Y+14	; 0x0e
    2c6c:	3f 85       	ldd	r19, Y+15	; 0x0f
    2c6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c70:	9f 81       	ldd	r25, Y+7	; 0x07
    2c72:	59 01       	movw	r10, r18
    2c74:	a8 1a       	sub	r10, r24
    2c76:	b9 0a       	sbc	r11, r25
    2c78:	c5 01       	movw	r24, r10
    2c7a:	9f 87       	std	Y+15, r25	; 0x0f
    2c7c:	8e 87       	std	Y+14, r24	; 0x0e
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    2c7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c80:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <_ZN6SdFile4readEPvj+0x39c>
    2c86:	a2 ce       	rjmp	.-700    	; 0x29cc <_ZN6SdFile4readEPvj+0xe0>
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    2c88:	ce 88       	ldd	r12, Y+22	; 0x16
    2c8a:	df 88       	ldd	r13, Y+23	; 0x17
    2c8c:	dd 8e       	std	Y+29, r13	; 0x1d
    2c8e:	cc 8e       	std	Y+28, r12	; 0x1c
    2c90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c92:	9d 8d       	ldd	r25, Y+29	; 0x1d
}
    2c94:	6e 96       	adiw	r28, 0x1e	; 30
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    2cb0:	bf 90       	pop	r11
    2cb2:	af 90       	pop	r10
    2cb4:	08 95       	ret

00002cb6 <_ZN6SdFile4readEv>:
   * Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <_ZN6SdFile4readEv+0x6>
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <_ZN6SdFile4readEv+0x8>
    2cbe:	0f 92       	push	r0
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	9b 83       	std	Y+3, r25	; 0x03
    2cc6:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	9b 81       	ldd	r25, Y+3	; 0x03
    2ccc:	9e 01       	movw	r18, r28
    2cce:	2f 5f       	subi	r18, 0xFF	; 255
    2cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd2:	b9 01       	movw	r22, r18
    2cd4:	41 e0       	ldi	r20, 0x01	; 1
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	0e 94 76 14 	call	0x28ec	; 0x28ec <_ZN6SdFile4readEPvj>
    2cdc:	81 30       	cpi	r24, 0x01	; 1
    2cde:	91 05       	cpc	r25, r1
    2ce0:	31 f4       	brne	.+12     	; 0x2cee <_ZN6SdFile4readEv+0x38>
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	3d 83       	std	Y+5, r19	; 0x05
    2cea:	2c 83       	std	Y+4, r18	; 0x04
    2cec:	04 c0       	rjmp	.+8      	; 0x2cf6 <_ZN6SdFile4readEv+0x40>
    2cee:	8f ef       	ldi	r24, 0xFF	; 255
    2cf0:	9f ef       	ldi	r25, 0xFF	; 255
    2cf2:	9d 83       	std	Y+5, r25	; 0x05
    2cf4:	8c 83       	std	Y+4, r24	; 0x04
    2cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf8:	9d 81       	ldd	r25, Y+5	; 0x05
  }
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	27 97       	sbiw	r28, 0x07	; 7
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
    2d1e:	9b 83       	std	Y+3, r25	; 0x03
    2d20:	8a 83       	std	Y+2, r24	; 0x02
  // error if not directory
  if (!isDir()) return NULL;
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	9b 81       	ldd	r25, Y+3	; 0x03
    2d26:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <_ZNK6SdFile5isDirEv>
    2d2a:	1f 82       	std	Y+7, r1	; 0x07
    2d2c:	88 23       	and	r24, r24
    2d2e:	11 f4       	brne	.+4      	; 0x2d34 <_ZN6SdFile12readDirCacheEv+0x2a>
    2d30:	21 e0       	ldi	r18, 0x01	; 1
    2d32:	2f 83       	std	Y+7, r18	; 0x07
    2d34:	3f 81       	ldd	r19, Y+7	; 0x07
    2d36:	33 23       	and	r19, r19
    2d38:	19 f0       	breq	.+6      	; 0x2d40 <_ZN6SdFile12readDirCacheEv+0x36>
    2d3a:	1e 82       	std	Y+6, r1	; 0x06
    2d3c:	1d 82       	std	Y+5, r1	; 0x05
    2d3e:	3e c0       	rjmp	.+124    	; 0x2dbc <_ZN6SdFile12readDirCacheEv+0xb2>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
    2d40:	ea 81       	ldd	r30, Y+2	; 0x02
    2d42:	fb 81       	ldd	r31, Y+3	; 0x03
    2d44:	82 85       	ldd	r24, Z+10	; 0x0a
    2d46:	93 85       	ldd	r25, Z+11	; 0x0b
    2d48:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d4a:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d4c:	68 94       	set
    2d4e:	14 f8       	bld	r1, 4
    2d50:	b6 95       	lsr	r27
    2d52:	a7 95       	ror	r26
    2d54:	97 95       	ror	r25
    2d56:	87 95       	ror	r24
    2d58:	16 94       	lsr	r1
    2d5a:	d1 f7       	brne	.-12     	; 0x2d50 <_ZN6SdFile12readDirCacheEv+0x46>
    2d5c:	8f 70       	andi	r24, 0x0F	; 15
    2d5e:	89 83       	std	Y+1, r24	; 0x01

  // use read to locate and cache block
  if (read() < 0) return NULL;
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	9b 81       	ldd	r25, Y+3	; 0x03
    2d64:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <_ZN6SdFile4readEv>
    2d68:	1c 82       	std	Y+4, r1	; 0x04
    2d6a:	99 23       	and	r25, r25
    2d6c:	14 f4       	brge	.+4      	; 0x2d72 <_ZN6SdFile12readDirCacheEv+0x68>
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	8c 83       	std	Y+4, r24	; 0x04
    2d72:	2c 81       	ldd	r18, Y+4	; 0x04
    2d74:	22 23       	and	r18, r18
    2d76:	19 f0       	breq	.+6      	; 0x2d7e <_ZN6SdFile12readDirCacheEv+0x74>
    2d78:	1e 82       	std	Y+6, r1	; 0x06
    2d7a:	1d 82       	std	Y+5, r1	; 0x05
    2d7c:	1f c0       	rjmp	.+62     	; 0x2dbc <_ZN6SdFile12readDirCacheEv+0xb2>

  // advance to next entry
  curPosition_ += 31;
    2d7e:	ea 81       	ldd	r30, Y+2	; 0x02
    2d80:	fb 81       	ldd	r31, Y+3	; 0x03
    2d82:	82 85       	ldd	r24, Z+10	; 0x0a
    2d84:	93 85       	ldd	r25, Z+11	; 0x0b
    2d86:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d88:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d8a:	4f 96       	adiw	r24, 0x1f	; 31
    2d8c:	a1 1d       	adc	r26, r1
    2d8e:	b1 1d       	adc	r27, r1
    2d90:	ea 81       	ldd	r30, Y+2	; 0x02
    2d92:	fb 81       	ldd	r31, Y+3	; 0x03
    2d94:	82 87       	std	Z+10, r24	; 0x0a
    2d96:	93 87       	std	Z+11, r25	; 0x0b
    2d98:	a4 87       	std	Z+12, r26	; 0x0c
    2d9a:	b5 87       	std	Z+13, r27	; 0x0d

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	88 2f       	mov	r24, r24
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	88 0f       	add	r24, r24
    2da4:	99 1f       	adc	r25, r25
    2da6:	82 95       	swap	r24
    2da8:	92 95       	swap	r25
    2daa:	90 7f       	andi	r25, 0xF0	; 240
    2dac:	98 27       	eor	r25, r24
    2dae:	80 7f       	andi	r24, 0xF0	; 240
    2db0:	98 27       	eor	r25, r24
    2db2:	9c 01       	movw	r18, r24
    2db4:	2c 5b       	subi	r18, 0xBC	; 188
    2db6:	3c 4f       	sbci	r19, 0xFC	; 252
    2db8:	3e 83       	std	Y+6, r19	; 0x06
    2dba:	2d 83       	std	Y+5, r18	; 0x05
    2dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbe:	9e 81       	ldd	r25, Y+6	; 0x06
}
    2dc0:	27 96       	adiw	r28, 0x07	; 7
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <_ZN6SdFile5rmDirEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is not a directory, is the root
 * directory, is not empty, or an I/O error occurred.
 */
uint8_t SdFile::rmDir(void) {
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	27 97       	sbiw	r28, 0x07	; 7
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	9c 83       	std	Y+4, r25	; 0x04
    2de8:	8b 83       	std	Y+3, r24	; 0x03
  // must be open subdirectory
  if (!isSubDir()) return false;
    2dea:	8b 81       	ldd	r24, Y+3	; 0x03
    2dec:	9c 81       	ldd	r25, Y+4	; 0x04
    2dee:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZNK6SdFile8isSubDirEv>
    2df2:	1e 82       	std	Y+6, r1	; 0x06
    2df4:	88 23       	and	r24, r24
    2df6:	11 f4       	brne	.+4      	; 0x2dfc <_ZN6SdFile5rmDirEv+0x2a>
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	8e 83       	std	Y+6, r24	; 0x06
    2dfc:	8e 81       	ldd	r24, Y+6	; 0x06
    2dfe:	88 23       	and	r24, r24
    2e00:	11 f0       	breq	.+4      	; 0x2e06 <_ZN6SdFile5rmDirEv+0x34>
    2e02:	1d 82       	std	Y+5, r1	; 0x05
    2e04:	50 c0       	rjmp	.+160    	; 0x2ea6 <_ZN6SdFile5rmDirEv+0xd4>

  rewind();
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	9c 81       	ldd	r25, Y+4	; 0x04
    2e0a:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6SdFile6rewindEv>
    2e0e:	2a c0       	rjmp	.+84     	; 0x2e64 <_ZN6SdFile5rmDirEv+0x92>

  // make sure directory is empty
  while (curPosition_ < fileSize_) {
    dir_t* p = readDirCache();
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <_ZN6SdFile12readDirCacheEv>
    2e18:	9a 83       	std	Y+2, r25	; 0x02
    2e1a:	89 83       	std	Y+1, r24	; 0x01
    if (p == NULL) return false;
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	11 f4       	brne	.+4      	; 0x2e28 <_ZN6SdFile5rmDirEv+0x56>
    2e24:	1d 82       	std	Y+5, r1	; 0x05
    2e26:	3f c0       	rjmp	.+126    	; 0x2ea6 <_ZN6SdFile5rmDirEv+0xd4>
    // done if past last used entry
    if (p->name[0] == DIR_NAME_FREE) break;
    2e28:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2c:	80 81       	ld	r24, Z
    2e2e:	88 23       	and	r24, r24
    2e30:	51 f1       	breq	.+84     	; 0x2e86 <_ZN6SdFile5rmDirEv+0xb4>
    // skip empty slot or '.' or '..'
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    2e32:	e9 81       	ldd	r30, Y+1	; 0x01
    2e34:	fa 81       	ldd	r31, Y+2	; 0x02
    2e36:	80 81       	ld	r24, Z
    2e38:	85 3e       	cpi	r24, 0xE5	; 229
    2e3a:	a1 f0       	breq	.+40     	; 0x2e64 <_ZN6SdFile5rmDirEv+0x92>
    2e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e40:	80 81       	ld	r24, Z
    2e42:	8e 32       	cpi	r24, 0x2E	; 46
    2e44:	79 f0       	breq	.+30     	; 0x2e64 <_ZN6SdFile5rmDirEv+0x92>
    // error not empty
    if (DIR_IS_FILE_OR_SUBDIR(p)) return false;
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4a:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry>
    2e4e:	8f 83       	std	Y+7, r24	; 0x07
    2e50:	8f 81       	ldd	r24, Y+7	; 0x07
    2e52:	88 23       	and	r24, r24
    2e54:	11 f0       	breq	.+4      	; 0x2e5a <_ZN6SdFile5rmDirEv+0x88>
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	8f 83       	std	Y+7, r24	; 0x07
    2e5a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e5c:	88 23       	and	r24, r24
    2e5e:	11 f0       	breq	.+4      	; 0x2e64 <_ZN6SdFile5rmDirEv+0x92>
    2e60:	1d 82       	std	Y+5, r1	; 0x05
    2e62:	21 c0       	rjmp	.+66     	; 0x2ea6 <_ZN6SdFile5rmDirEv+0xd4>
  if (!isSubDir()) return false;

  rewind();

  // make sure directory is empty
  while (curPosition_ < fileSize_) {
    2e64:	eb 81       	ldd	r30, Y+3	; 0x03
    2e66:	fc 81       	ldd	r31, Y+4	; 0x04
    2e68:	22 85       	ldd	r18, Z+10	; 0x0a
    2e6a:	33 85       	ldd	r19, Z+11	; 0x0b
    2e6c:	44 85       	ldd	r20, Z+12	; 0x0c
    2e6e:	55 85       	ldd	r21, Z+13	; 0x0d
    2e70:	eb 81       	ldd	r30, Y+3	; 0x03
    2e72:	fc 81       	ldd	r31, Y+4	; 0x04
    2e74:	83 89       	ldd	r24, Z+19	; 0x13
    2e76:	94 89       	ldd	r25, Z+20	; 0x14
    2e78:	a5 89       	ldd	r26, Z+21	; 0x15
    2e7a:	b6 89       	ldd	r27, Z+22	; 0x16
    2e7c:	28 17       	cp	r18, r24
    2e7e:	39 07       	cpc	r19, r25
    2e80:	4a 07       	cpc	r20, r26
    2e82:	5b 07       	cpc	r21, r27
    2e84:	28 f2       	brcs	.-118    	; 0x2e10 <_ZN6SdFile5rmDirEv+0x3e>
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    // error not empty
    if (DIR_IS_FILE_OR_SUBDIR(p)) return false;
  }
  // convert empty directory to normal file for remove
  type_ = FAT_FILE_TYPE_NORMAL;
    2e86:	eb 81       	ldd	r30, Y+3	; 0x03
    2e88:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	85 83       	std	Z+5, r24	; 0x05
  flags_ |= O_WRITE;
    2e8e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e90:	fc 81       	ldd	r31, Y+4	; 0x04
    2e92:	84 81       	ldd	r24, Z+4	; 0x04
    2e94:	82 60       	ori	r24, 0x02	; 2
    2e96:	eb 81       	ldd	r30, Y+3	; 0x03
    2e98:	fc 81       	ldd	r31, Y+4	; 0x04
    2e9a:	84 83       	std	Z+4, r24	; 0x04
  return remove();
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea0:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN6SdFile6removeEv>
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ea8:	27 96       	adiw	r28, 0x07	; 7
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	08 95       	ret

00002eba <_ZN6SdFile7readDirEP14directoryEntry>:
 * A value of zero will be returned if end of file is reached.
 * If an error occurs, readDir() returns -1.  Possible errors include
 * readDir() called before a directory has been opened, this is not
 * a directory file or an I/O error occurred.
 */
int8_t SdFile::readDir(dir_t* dir) {
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	2a 97       	sbiw	r28, 0x0a	; 10
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	f8 94       	cli
    2ec8:	de bf       	out	0x3e, r29	; 62
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	cd bf       	out	0x3d, r28	; 61
    2ece:	9b 83       	std	Y+3, r25	; 0x03
    2ed0:	8a 83       	std	Y+2, r24	; 0x02
    2ed2:	7d 83       	std	Y+5, r23	; 0x05
    2ed4:	6c 83       	std	Y+4, r22	; 0x04
  int8_t n;
  // if not a directory file or miss-positioned return an error
  if (!isDir() || (0X1F & curPosition_)) return -1;
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eda:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <_ZNK6SdFile5isDirEv>
    2ede:	88 23       	and	r24, r24
    2ee0:	71 f0       	breq	.+28     	; 0x2efe <_ZN6SdFile7readDirEP14directoryEntry+0x44>
    2ee2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ee4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ee6:	82 85       	ldd	r24, Z+10	; 0x0a
    2ee8:	93 85       	ldd	r25, Z+11	; 0x0b
    2eea:	a4 85       	ldd	r26, Z+12	; 0x0c
    2eec:	b5 85       	ldd	r27, Z+13	; 0x0d
    2eee:	8f 71       	andi	r24, 0x1F	; 31
    2ef0:	90 70       	andi	r25, 0x00	; 0
    2ef2:	a0 70       	andi	r26, 0x00	; 0
    2ef4:	b0 70       	andi	r27, 0x00	; 0
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	a1 05       	cpc	r26, r1
    2efa:	b1 05       	cpc	r27, r1
    2efc:	19 f0       	breq	.+6      	; 0x2f04 <_ZN6SdFile7readDirEP14directoryEntry+0x4a>
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	89 87       	std	Y+9, r24	; 0x09
    2f02:	01 c0       	rjmp	.+2      	; 0x2f06 <_ZN6SdFile7readDirEP14directoryEntry+0x4c>
    2f04:	19 86       	std	Y+9, r1	; 0x09
    2f06:	89 85       	ldd	r24, Y+9	; 0x09
    2f08:	88 23       	and	r24, r24
    2f0a:	11 f1       	breq	.+68     	; 0x2f50 <_ZN6SdFile7readDirEP14directoryEntry+0x96>
    2f0c:	8f ef       	ldi	r24, 0xFF	; 255
    2f0e:	88 87       	std	Y+8, r24	; 0x08
    2f10:	3b c0       	rjmp	.+118    	; 0x2f88 <_ZN6SdFile7readDirEP14directoryEntry+0xce>

  while ((n = read(dir, sizeof(dir_t))) == sizeof(dir_t)) {
    // last entry if DIR_NAME_FREE
    if (dir->name[0] == DIR_NAME_FREE) break;
    2f12:	ec 81       	ldd	r30, Y+4	; 0x04
    2f14:	fd 81       	ldd	r31, Y+5	; 0x05
    2f16:	80 81       	ld	r24, Z
    2f18:	88 23       	and	r24, r24
    2f1a:	69 f1       	breq	.+90     	; 0x2f76 <_ZN6SdFile7readDirEP14directoryEntry+0xbc>
    // skip empty entries and entry for .  and ..
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') continue;
    2f1c:	ec 81       	ldd	r30, Y+4	; 0x04
    2f1e:	fd 81       	ldd	r31, Y+5	; 0x05
    2f20:	80 81       	ld	r24, Z
    2f22:	85 3e       	cpi	r24, 0xE5	; 229
    2f24:	a9 f0       	breq	.+42     	; 0x2f50 <_ZN6SdFile7readDirEP14directoryEntry+0x96>
    2f26:	ec 81       	ldd	r30, Y+4	; 0x04
    2f28:	fd 81       	ldd	r31, Y+5	; 0x05
    2f2a:	80 81       	ld	r24, Z
    2f2c:	8e 32       	cpi	r24, 0x2E	; 46
    2f2e:	81 f0       	breq	.+32     	; 0x2f50 <_ZN6SdFile7readDirEP14directoryEntry+0x96>
    // return if normal file or subdirectory
    if (DIR_IS_FILE_OR_SUBDIR(dir)) return n;
    2f30:	8c 81       	ldd	r24, Y+4	; 0x04
    2f32:	9d 81       	ldd	r25, Y+5	; 0x05
    2f34:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry>
    2f38:	8a 87       	std	Y+10, r24	; 0x0a
    2f3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f3c:	88 23       	and	r24, r24
    2f3e:	11 f0       	breq	.+4      	; 0x2f44 <_ZN6SdFile7readDirEP14directoryEntry+0x8a>
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	8a 87       	std	Y+10, r24	; 0x0a
    2f44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f46:	88 23       	and	r24, r24
    2f48:	19 f0       	breq	.+6      	; 0x2f50 <_ZN6SdFile7readDirEP14directoryEntry+0x96>
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	88 87       	std	Y+8, r24	; 0x08
    2f4e:	1c c0       	rjmp	.+56     	; 0x2f88 <_ZN6SdFile7readDirEP14directoryEntry+0xce>
int8_t SdFile::readDir(dir_t* dir) {
  int8_t n;
  // if not a directory file or miss-positioned return an error
  if (!isDir() || (0X1F & curPosition_)) return -1;

  while ((n = read(dir, sizeof(dir_t))) == sizeof(dir_t)) {
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	2c 81       	ldd	r18, Y+4	; 0x04
    2f56:	3d 81       	ldd	r19, Y+5	; 0x05
    2f58:	b9 01       	movw	r22, r18
    2f5a:	40 e2       	ldi	r20, 0x20	; 32
    2f5c:	50 e0       	ldi	r21, 0x00	; 0
    2f5e:	0e 94 76 14 	call	0x28ec	; 0x28ec <_ZN6SdFile4readEPvj>
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	1f 82       	std	Y+7, r1	; 0x07
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	80 32       	cpi	r24, 0x20	; 32
    2f6a:	11 f4       	brne	.+4      	; 0x2f70 <_ZN6SdFile7readDirEP14directoryEntry+0xb6>
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	8f 83       	std	Y+7, r24	; 0x07
    2f70:	8f 81       	ldd	r24, Y+7	; 0x07
    2f72:	88 23       	and	r24, r24
    2f74:	71 f6       	brne	.-100    	; 0x2f12 <_ZN6SdFile7readDirEP14directoryEntry+0x58>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') continue;
    // return if normal file or subdirectory
    if (DIR_IS_FILE_OR_SUBDIR(dir)) return n;
  }
  // error, end of file, or past last entry
  return n < 0 ? -1 : 0;
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	88 23       	and	r24, r24
    2f7a:	1c f4       	brge	.+6      	; 0x2f82 <_ZN6SdFile7readDirEP14directoryEntry+0xc8>
    2f7c:	8f ef       	ldi	r24, 0xFF	; 255
    2f7e:	8e 83       	std	Y+6, r24	; 0x06
    2f80:	01 c0       	rjmp	.+2      	; 0x2f84 <_ZN6SdFile7readDirEP14directoryEntry+0xca>
    2f82:	1e 82       	std	Y+6, r1	; 0x06
    2f84:	8e 81       	ldd	r24, Y+6	; 0x06
    2f86:	88 87       	std	Y+8, r24	; 0x08
    2f88:	88 85       	ldd	r24, Y+8	; 0x08
}
    2f8a:	2a 96       	adiw	r28, 0x0a	; 10
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	f8 94       	cli
    2f90:	de bf       	out	0x3e, r29	; 62
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	cd bf       	out	0x3d, r28	; 61
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <_ZN6SdFile14printTwoDigitsEh>:
//------------------------------------------------------------------------------
/** %Print a value as two digits to Serial.
 *
 * \param[in] v Value to be printed, 0 <= \a v <= 99
 */
void SdFile::printTwoDigits(uint8_t v) {
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <_ZN6SdFile14printTwoDigitsEh+0x6>
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <_ZN6SdFile14printTwoDigitsEh+0x8>
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	8c 83       	std	Y+4, r24	; 0x04
  char str[3];
  str[0] = '0' + v/10;
    2faa:	8c 81       	ldd	r24, Y+4	; 0x04
    2fac:	9a e0       	ldi	r25, 0x0A	; 10
    2fae:	69 2f       	mov	r22, r25
    2fb0:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__udivmodqi4>
    2fb4:	80 5d       	subi	r24, 0xD0	; 208
    2fb6:	89 83       	std	Y+1, r24	; 0x01
  str[1] = '0' + v % 10;
    2fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fba:	9a e0       	ldi	r25, 0x0A	; 10
    2fbc:	69 2f       	mov	r22, r25
    2fbe:	0e 94 d7 81 	call	0x103ae	; 0x103ae <__udivmodqi4>
    2fc2:	89 2f       	mov	r24, r25
    2fc4:	80 5d       	subi	r24, 0xD0	; 208
    2fc6:	8a 83       	std	Y+2, r24	; 0x02
  str[2] = 0;
    2fc8:	1b 82       	std	Y+3, r1	; 0x03
  Serial.print(str);
    2fca:	8c e1       	ldi	r24, 0x1C	; 28
    2fcc:	96 e0       	ldi	r25, 0x06	; 6
    2fce:	9e 01       	movw	r18, r28
    2fd0:	2f 5f       	subi	r18, 0xFF	; 255
    2fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd4:	b9 01       	movw	r22, r18
    2fd6:	0e 94 7b 45 	call	0x8af6	; 0x8af6 <_ZN5Print5printEPKc>
}
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	cf 91       	pop	r28
    2fe4:	df 91       	pop	r29
    2fe6:	08 95       	ret

00002fe8 <_ZN6SdFile12printFatTimeEj>:
 *
 * Format is hh:mm:ss.
 *
 * \param[in] fatTime The time field from a directory entry.
 */
void SdFile::printFatTime(uint16_t fatTime) {
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	00 d0       	rcall	.+0      	; 0x2fee <_ZN6SdFile12printFatTimeEj+0x6>
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	9a 83       	std	Y+2, r25	; 0x02
    2ff4:	89 83       	std	Y+1, r24	; 0x01
  printTwoDigits(FAT_HOUR(fatTime));
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffa:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <_ZL8FAT_HOURj>
    2ffe:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN6SdFile14printTwoDigitsEh>
  Serial.print(':');
    3002:	8c e1       	ldi	r24, 0x1C	; 28
    3004:	96 e0       	ldi	r25, 0x06	; 6
    3006:	6a e3       	ldi	r22, 0x3A	; 58
    3008:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
  printTwoDigits(FAT_MINUTE(fatTime));
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	9a 81       	ldd	r25, Y+2	; 0x02
    3010:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <_ZL10FAT_MINUTEj>
    3014:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN6SdFile14printTwoDigitsEh>
  Serial.print(':');
    3018:	8c e1       	ldi	r24, 0x1C	; 28
    301a:	96 e0       	ldi	r25, 0x06	; 6
    301c:	6a e3       	ldi	r22, 0x3A	; 58
    301e:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
  printTwoDigits(FAT_SECOND(fatTime));
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	9a 81       	ldd	r25, Y+2	; 0x02
    3026:	0e 94 96 0b 	call	0x172c	; 0x172c <_ZL10FAT_SECONDj>
    302a:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN6SdFile14printTwoDigitsEh>
}
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <_ZN6SdFile12printFatDateEj>:
 *
 *  Format is yyyy-mm-dd.
 *
 * \param[in] fatDate The date field from a directory entry.
 */
void SdFile::printFatDate(uint16_t fatDate) {
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	00 d0       	rcall	.+0      	; 0x303e <_ZN6SdFile12printFatDateEj+0x6>
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	9a 83       	std	Y+2, r25	; 0x02
    3044:	89 83       	std	Y+1, r24	; 0x01
  Serial.print(FAT_YEAR(fatDate));
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	9a 81       	ldd	r25, Y+2	; 0x02
    304a:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZL8FAT_YEARj>
    304e:	9c 01       	movw	r18, r24
    3050:	8c e1       	ldi	r24, 0x1C	; 28
    3052:	96 e0       	ldi	r25, 0x06	; 6
    3054:	b9 01       	movw	r22, r18
    3056:	4a e0       	ldi	r20, 0x0A	; 10
    3058:	50 e0       	ldi	r21, 0x00	; 0
    305a:	0e 94 c4 43 	call	0x8788	; 0x8788 <_ZN5Print5printEji>
  Serial.print('-');
    305e:	8c e1       	ldi	r24, 0x1C	; 28
    3060:	96 e0       	ldi	r25, 0x06	; 6
    3062:	6d e2       	ldi	r22, 0x2D	; 45
    3064:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
  printTwoDigits(FAT_MONTH(fatDate));
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	9a 81       	ldd	r25, Y+2	; 0x02
    306c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <_ZL9FAT_MONTHj>
    3070:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN6SdFile14printTwoDigitsEh>
  Serial.print('-');
    3074:	8c e1       	ldi	r24, 0x1C	; 28
    3076:	96 e0       	ldi	r25, 0x06	; 6
    3078:	6d e2       	ldi	r22, 0x2D	; 45
    307a:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
  printTwoDigits(FAT_DAY(fatDate));
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	9a 81       	ldd	r25, Y+2	; 0x02
    3082:	0e 94 32 0b 	call	0x1664	; 0x1664 <_ZL7FAT_DAYj>
    3086:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN6SdFile14printTwoDigitsEh>
}
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <_ZN6SdFile12printDirNameERK14directoryEntryh>:
/** %Print the name field of a directory entry in 8.3 format to Serial.
 *
 * \param[in] dir The directory structure containing the name.
 * \param[in] width Blank fill name if length is less than \a width.
 */
void SdFile::printDirName(const dir_t& dir, uint8_t width) {
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	00 d0       	rcall	.+0      	; 0x309a <_ZN6SdFile12printDirNameERK14directoryEntryh+0x6>
    309a:	00 d0       	rcall	.+0      	; 0x309c <_ZN6SdFile12printDirNameERK14directoryEntryh+0x8>
    309c:	00 d0       	rcall	.+0      	; 0x309e <_ZN6SdFile12printDirNameERK14directoryEntryh+0xa>
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
    30a2:	9c 83       	std	Y+4, r25	; 0x04
    30a4:	8b 83       	std	Y+3, r24	; 0x03
    30a6:	6d 83       	std	Y+5, r22	; 0x05
  uint8_t w = 0;
    30a8:	1a 82       	std	Y+2, r1	; 0x02
  for (uint8_t i = 0; i < 11; i++) {
    30aa:	19 82       	std	Y+1, r1	; 0x01
    30ac:	2a c0       	rjmp	.+84     	; 0x3102 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x6e>
    if (dir.name[i] == ' ')continue;
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	28 2f       	mov	r18, r24
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	9c 81       	ldd	r25, Y+4	; 0x04
    30b8:	fc 01       	movw	r30, r24
    30ba:	e2 0f       	add	r30, r18
    30bc:	f3 1f       	adc	r31, r19
    30be:	80 81       	ld	r24, Z
    30c0:	80 32       	cpi	r24, 0x20	; 32
    30c2:	e1 f0       	breq	.+56     	; 0x30fc <_ZN6SdFile12printDirNameERK14directoryEntryh+0x68>
    if (i == 8) {
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	88 30       	cpi	r24, 0x08	; 8
    30c8:	41 f4       	brne	.+16     	; 0x30da <_ZN6SdFile12printDirNameERK14directoryEntryh+0x46>
      Serial.print('.');
    30ca:	8c e1       	ldi	r24, 0x1C	; 28
    30cc:	96 e0       	ldi	r25, 0x06	; 6
    30ce:	6e e2       	ldi	r22, 0x2E	; 46
    30d0:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
      w++;
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	8f 5f       	subi	r24, 0xFF	; 255
    30d8:	8a 83       	std	Y+2, r24	; 0x02
    }
    Serial.write(dir.name[i]);
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	28 2f       	mov	r18, r24
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	9c 81       	ldd	r25, Y+4	; 0x04
    30e4:	fc 01       	movw	r30, r24
    30e6:	e2 0f       	add	r30, r18
    30e8:	f3 1f       	adc	r31, r19
    30ea:	20 81       	ld	r18, Z
    30ec:	8c e1       	ldi	r24, 0x1C	; 28
    30ee:	96 e0       	ldi	r25, 0x06	; 6
    30f0:	62 2f       	mov	r22, r18
    30f2:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <_ZN14HardwareSerial5writeEh>
    w++;
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	8f 5f       	subi	r24, 0xFF	; 255
    30fa:	8a 83       	std	Y+2, r24	; 0x02
 * \param[in] dir The directory structure containing the name.
 * \param[in] width Blank fill name if length is less than \a width.
 */
void SdFile::printDirName(const dir_t& dir, uint8_t width) {
  uint8_t w = 0;
  for (uint8_t i = 0; i < 11; i++) {
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	8f 5f       	subi	r24, 0xFF	; 255
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	8b 30       	cpi	r24, 0x0B	; 11
    3106:	98 f2       	brcs	.-90     	; 0x30ae <_ZN6SdFile12printDirNameERK14directoryEntryh+0x1a>
      w++;
    }
    Serial.write(dir.name[i]);
    w++;
  }
  if (DIR_IS_SUBDIR(&dir)) {
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	9c 81       	ldd	r25, Y+4	; 0x04
    310c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
    3110:	8e 83       	std	Y+6, r24	; 0x06
    3112:	8e 81       	ldd	r24, Y+6	; 0x06
    3114:	88 23       	and	r24, r24
    3116:	11 f0       	breq	.+4      	; 0x311c <_ZN6SdFile12printDirNameERK14directoryEntryh+0x88>
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	8e 83       	std	Y+6, r24	; 0x06
    311c:	8e 81       	ldd	r24, Y+6	; 0x06
    311e:	88 23       	and	r24, r24
    3120:	89 f0       	breq	.+34     	; 0x3144 <_ZN6SdFile12printDirNameERK14directoryEntryh+0xb0>
    Serial.print('/');
    3122:	8c e1       	ldi	r24, 0x1C	; 28
    3124:	96 e0       	ldi	r25, 0x06	; 6
    3126:	6f e2       	ldi	r22, 0x2F	; 47
    3128:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
    w++;
    312c:	8a 81       	ldd	r24, Y+2	; 0x02
    312e:	8f 5f       	subi	r24, 0xFF	; 255
    3130:	8a 83       	std	Y+2, r24	; 0x02
    3132:	08 c0       	rjmp	.+16     	; 0x3144 <_ZN6SdFile12printDirNameERK14directoryEntryh+0xb0>
  }
  while (w < width) {
    Serial.print(' ');
    3134:	8c e1       	ldi	r24, 0x1C	; 28
    3136:	96 e0       	ldi	r25, 0x06	; 6
    3138:	60 e2       	ldi	r22, 0x20	; 32
    313a:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
    w++;
    313e:	8a 81       	ldd	r24, Y+2	; 0x02
    3140:	8f 5f       	subi	r24, 0xFF	; 255
    3142:	8a 83       	std	Y+2, r24	; 0x02
  }
  if (DIR_IS_SUBDIR(&dir)) {
    Serial.print('/');
    w++;
  }
  while (w < width) {
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	8d 81       	ldd	r24, Y+5	; 0x05
    3148:	98 17       	cp	r25, r24
    314a:	a0 f3       	brcs	.-24     	; 0x3134 <_ZN6SdFile12printDirNameERK14directoryEntryh+0xa0>
    Serial.print(' ');
    w++;
  }
}
    314c:	26 96       	adiw	r28, 0x06	; 6
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	f8 94       	cli
    3152:	de bf       	out	0x3e, r29	; 62
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	cd bf       	out	0x3d, r28	; 61
    3158:	cf 91       	pop	r28
    315a:	df 91       	pop	r29
    315c:	08 95       	ret

0000315e <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    315e:	df 93       	push	r29
    3160:	cf 93       	push	r28
    3162:	cd b7       	in	r28, 0x3d	; 61
    3164:	de b7       	in	r29, 0x3e	; 62
    3166:	29 97       	sbiw	r28, 0x09	; 9
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	9a 83       	std	Y+2, r25	; 0x02
    3174:	89 83       	std	Y+1, r24	; 0x01
    3176:	7c 83       	std	Y+4, r23	; 0x04
    3178:	6b 83       	std	Y+3, r22	; 0x03
  // error if file is already open
  if (isOpen()) return false;
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZNK6SdFile6isOpenEv>
    3182:	89 87       	std	Y+9, r24	; 0x09
    3184:	89 85       	ldd	r24, Y+9	; 0x09
    3186:	88 23       	and	r24, r24
    3188:	11 f0       	breq	.+4      	; 0x318e <_ZN6SdFile8openRootEP8SdVolume+0x30>
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	89 87       	std	Y+9, r24	; 0x09
    318e:	89 85       	ldd	r24, Y+9	; 0x09
    3190:	88 23       	and	r24, r24
    3192:	11 f0       	breq	.+4      	; 0x3198 <_ZN6SdFile8openRootEP8SdVolume+0x3a>
    3194:	18 86       	std	Y+8, r1	; 0x08
    3196:	91 c0       	rjmp	.+290    	; 0x32ba <_ZN6SdFile8openRootEP8SdVolume+0x15c>

  if (vol->fatType() == 16) {
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	9c 81       	ldd	r25, Y+4	; 0x04
    319c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZNK8SdVolume7fatTypeEv>
    31a0:	1f 82       	std	Y+7, r1	; 0x07
    31a2:	80 31       	cpi	r24, 0x10	; 16
    31a4:	11 f4       	brne	.+4      	; 0x31aa <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	8f 83       	std	Y+7, r24	; 0x07
    31aa:	8f 81       	ldd	r24, Y+7	; 0x07
    31ac:	88 23       	and	r24, r24
    31ae:	59 f1       	breq	.+86     	; 0x3206 <_ZN6SdFile8openRootEP8SdVolume+0xa8>
    type_ = FAT_FILE_TYPE_ROOT16;
    31b0:	e9 81       	ldd	r30, Y+1	; 0x01
    31b2:	fa 81       	ldd	r31, Y+2	; 0x02
    31b4:	82 e0       	ldi	r24, 0x02	; 2
    31b6:	85 83       	std	Z+5, r24	; 0x05
    firstCluster_ = 0;
    31b8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ba:	fa 81       	ldd	r31, Y+2	; 0x02
    31bc:	17 8a       	std	Z+23, r1	; 0x17
    31be:	10 8e       	std	Z+24, r1	; 0x18
    31c0:	11 8e       	std	Z+25, r1	; 0x19
    31c2:	12 8e       	std	Z+26, r1	; 0x1a
    fileSize_ = 32 * vol->rootDirEntryCount();
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	9c 81       	ldd	r25, Y+4	; 0x04
    31c8:	0e 94 8c 0c 	call	0x1918	; 0x1918 <_ZNK8SdVolume17rootDirEntryCountEv>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	88 0f       	add	r24, r24
    31d2:	99 1f       	adc	r25, r25
    31d4:	aa 1f       	adc	r26, r26
    31d6:	bb 1f       	adc	r27, r27
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	aa 1f       	adc	r26, r26
    31de:	bb 1f       	adc	r27, r27
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	aa 1f       	adc	r26, r26
    31e6:	bb 1f       	adc	r27, r27
    31e8:	88 0f       	add	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	aa 1f       	adc	r26, r26
    31ee:	bb 1f       	adc	r27, r27
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	aa 1f       	adc	r26, r26
    31f6:	bb 1f       	adc	r27, r27
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	83 8b       	std	Z+19, r24	; 0x13
    31fe:	94 8b       	std	Z+20, r25	; 0x14
    3200:	a5 8b       	std	Z+21, r26	; 0x15
    3202:	b6 8b       	std	Z+22, r27	; 0x16
    3204:	39 c0       	rjmp	.+114    	; 0x3278 <_ZN6SdFile8openRootEP8SdVolume+0x11a>
  } else if (vol->fatType() == 32) {
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	9c 81       	ldd	r25, Y+4	; 0x04
    320a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_ZNK8SdVolume7fatTypeEv>
    320e:	1e 82       	std	Y+6, r1	; 0x06
    3210:	80 32       	cpi	r24, 0x20	; 32
    3212:	11 f4       	brne	.+4      	; 0x3218 <_ZN6SdFile8openRootEP8SdVolume+0xba>
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	8e 83       	std	Y+6, r24	; 0x06
    3218:	8e 81       	ldd	r24, Y+6	; 0x06
    321a:	88 23       	and	r24, r24
    321c:	59 f1       	breq	.+86     	; 0x3274 <_ZN6SdFile8openRootEP8SdVolume+0x116>
    type_ = FAT_FILE_TYPE_ROOT32;
    321e:	e9 81       	ldd	r30, Y+1	; 0x01
    3220:	fa 81       	ldd	r31, Y+2	; 0x02
    3222:	83 e0       	ldi	r24, 0x03	; 3
    3224:	85 83       	std	Z+5, r24	; 0x05
    firstCluster_ = vol->rootDirStart();
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	9c 81       	ldd	r25, Y+4	; 0x04
    322a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <_ZNK8SdVolume12rootDirStartEv>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	e9 81       	ldd	r30, Y+1	; 0x01
    3234:	fa 81       	ldd	r31, Y+2	; 0x02
    3236:	87 8b       	std	Z+23, r24	; 0x17
    3238:	90 8f       	std	Z+24, r25	; 0x18
    323a:	a1 8f       	std	Z+25, r26	; 0x19
    323c:	b2 8f       	std	Z+26, r27	; 0x1a
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    323e:	e9 81       	ldd	r30, Y+1	; 0x01
    3240:	fa 81       	ldd	r31, Y+2	; 0x02
    3242:	27 89       	ldd	r18, Z+23	; 0x17
    3244:	30 8d       	ldd	r19, Z+24	; 0x18
    3246:	41 8d       	ldd	r20, Z+25	; 0x19
    3248:	52 8d       	ldd	r21, Z+26	; 0x1a
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	9a 81       	ldd	r25, Y+2	; 0x02
    324e:	fc 01       	movw	r30, r24
    3250:	73 96       	adiw	r30, 0x13	; 19
    3252:	8b 81       	ldd	r24, Y+3	; 0x03
    3254:	9c 81       	ldd	r25, Y+4	; 0x04
    3256:	ba 01       	movw	r22, r20
    3258:	a9 01       	movw	r20, r18
    325a:	9f 01       	movw	r18, r30
    325c:	0e 94 4f 29 	call	0x529e	; 0x529e <_ZNK8SdVolume9chainSizeEmPm>
    3260:	1d 82       	std	Y+5, r1	; 0x05
    3262:	88 23       	and	r24, r24
    3264:	11 f4       	brne	.+4      	; 0x326a <_ZN6SdFile8openRootEP8SdVolume+0x10c>
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	8d 83       	std	Y+5, r24	; 0x05
    326a:	8d 81       	ldd	r24, Y+5	; 0x05
    326c:	88 23       	and	r24, r24
    326e:	21 f0       	breq	.+8      	; 0x3278 <_ZN6SdFile8openRootEP8SdVolume+0x11a>
    3270:	18 86       	std	Y+8, r1	; 0x08
    3272:	23 c0       	rjmp	.+70     	; 0x32ba <_ZN6SdFile8openRootEP8SdVolume+0x15c>
  } else {
    // volume is not initialized or FAT12
    return false;
    3274:	18 86       	std	Y+8, r1	; 0x08
    3276:	21 c0       	rjmp	.+66     	; 0x32ba <_ZN6SdFile8openRootEP8SdVolume+0x15c>
  }
  vol_ = vol;
    3278:	e9 81       	ldd	r30, Y+1	; 0x01
    327a:	fa 81       	ldd	r31, Y+2	; 0x02
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	9c 81       	ldd	r25, Y+4	; 0x04
    3280:	94 8f       	std	Z+28, r25	; 0x1c
    3282:	83 8f       	std	Z+27, r24	; 0x1b
  // read only
  flags_ = O_READ;
    3284:	e9 81       	ldd	r30, Y+1	; 0x01
    3286:	fa 81       	ldd	r31, Y+2	; 0x02
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	84 83       	std	Z+4, r24	; 0x04

  // set to start of file
  curCluster_ = 0;
    328c:	e9 81       	ldd	r30, Y+1	; 0x01
    328e:	fa 81       	ldd	r31, Y+2	; 0x02
    3290:	16 82       	std	Z+6, r1	; 0x06
    3292:	17 82       	std	Z+7, r1	; 0x07
    3294:	10 86       	std	Z+8, r1	; 0x08
    3296:	11 86       	std	Z+9, r1	; 0x09
  curPosition_ = 0;
    3298:	e9 81       	ldd	r30, Y+1	; 0x01
    329a:	fa 81       	ldd	r31, Y+2	; 0x02
    329c:	12 86       	std	Z+10, r1	; 0x0a
    329e:	13 86       	std	Z+11, r1	; 0x0b
    32a0:	14 86       	std	Z+12, r1	; 0x0c
    32a2:	15 86       	std	Z+13, r1	; 0x0d

  // root has no directory entry
  dirBlock_ = 0;
    32a4:	e9 81       	ldd	r30, Y+1	; 0x01
    32a6:	fa 81       	ldd	r31, Y+2	; 0x02
    32a8:	16 86       	std	Z+14, r1	; 0x0e
    32aa:	17 86       	std	Z+15, r1	; 0x0f
    32ac:	10 8a       	std	Z+16, r1	; 0x10
    32ae:	11 8a       	std	Z+17, r1	; 0x11
  dirIndex_ = 0;
    32b0:	e9 81       	ldd	r30, Y+1	; 0x01
    32b2:	fa 81       	ldd	r31, Y+2	; 0x02
    32b4:	12 8a       	std	Z+18, r1	; 0x12
  return true;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	88 87       	std	Y+8, r24	; 0x08
    32ba:	88 85       	ldd	r24, Y+8	; 0x08
}
    32bc:	29 96       	adiw	r28, 0x09	; 9
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <_ZN6SdFile15openCachedEntryEhh>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
    32d6:	2a 97       	sbiw	r28, 0x0a	; 10
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	9c 83       	std	Y+4, r25	; 0x04
    32e4:	8b 83       	std	Y+3, r24	; 0x03
    32e6:	6d 83       	std	Y+5, r22	; 0x05
    32e8:	4e 83       	std	Y+6, r20	; 0x06
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    32ea:	8d 81       	ldd	r24, Y+5	; 0x05
    32ec:	88 2f       	mov	r24, r24
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	82 95       	swap	r24
    32f6:	92 95       	swap	r25
    32f8:	90 7f       	andi	r25, 0xF0	; 240
    32fa:	98 27       	eor	r25, r24
    32fc:	80 7f       	andi	r24, 0xF0	; 240
    32fe:	98 27       	eor	r25, r24
    3300:	8c 5b       	subi	r24, 0xBC	; 188
    3302:	9c 4f       	sbci	r25, 0xFC	; 252
    3304:	9a 83       	std	Y+2, r25	; 0x02
    3306:	89 83       	std	Y+1, r24	; 0x01

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    3308:	e9 81       	ldd	r30, Y+1	; 0x01
    330a:	fa 81       	ldd	r31, Y+2	; 0x02
    330c:	83 85       	ldd	r24, Z+11	; 0x0b
    330e:	88 2f       	mov	r24, r24
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	81 71       	andi	r24, 0x11	; 17
    3314:	90 70       	andi	r25, 0x00	; 0
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	49 f0       	breq	.+18     	; 0x332c <_ZN6SdFile15openCachedEntryEhh+0x5e>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    331a:	8e 81       	ldd	r24, Y+6	; 0x06
    331c:	88 2f       	mov	r24, r24
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	82 74       	andi	r24, 0x42	; 66
    3322:	90 70       	andi	r25, 0x00	; 0
    3324:	00 97       	sbiw	r24, 0x00	; 0
    3326:	11 f0       	breq	.+4      	; 0x332c <_ZN6SdFile15openCachedEntryEhh+0x5e>
    3328:	18 86       	std	Y+8, r1	; 0x08
    332a:	ad c0       	rjmp	.+346    	; 0x3486 <_ZN6SdFile15openCachedEntryEhh+0x1b8>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    332c:	eb 81       	ldd	r30, Y+3	; 0x03
    332e:	fc 81       	ldd	r31, Y+4	; 0x04
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	82 8b       	std	Z+18, r24	; 0x12
  dirBlock_ = SdVolume::cacheBlockNumber_;
    3334:	80 91 68 00 	lds	r24, 0x0068
    3338:	90 91 69 00 	lds	r25, 0x0069
    333c:	a0 91 6a 00 	lds	r26, 0x006A
    3340:	b0 91 6b 00 	lds	r27, 0x006B
    3344:	eb 81       	ldd	r30, Y+3	; 0x03
    3346:	fc 81       	ldd	r31, Y+4	; 0x04
    3348:	86 87       	std	Z+14, r24	; 0x0e
    334a:	97 87       	std	Z+15, r25	; 0x0f
    334c:	a0 8b       	std	Z+16, r26	; 0x10
    334e:	b1 8b       	std	Z+17, r27	; 0x11

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
    3350:	e9 81       	ldd	r30, Y+1	; 0x01
    3352:	fa 81       	ldd	r31, Y+2	; 0x02
    3354:	84 89       	ldd	r24, Z+20	; 0x14
    3356:	95 89       	ldd	r25, Z+21	; 0x15
    3358:	cc 01       	movw	r24, r24
    335a:	a0 e0       	ldi	r26, 0x00	; 0
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	dc 01       	movw	r26, r24
    3360:	99 27       	eor	r25, r25
    3362:	88 27       	eor	r24, r24
    3364:	eb 81       	ldd	r30, Y+3	; 0x03
    3366:	fc 81       	ldd	r31, Y+4	; 0x04
    3368:	87 8b       	std	Z+23, r24	; 0x17
    336a:	90 8f       	std	Z+24, r25	; 0x18
    336c:	a1 8f       	std	Z+25, r26	; 0x19
    336e:	b2 8f       	std	Z+26, r27	; 0x1a
  firstCluster_ |= p->firstClusterLow;
    3370:	eb 81       	ldd	r30, Y+3	; 0x03
    3372:	fc 81       	ldd	r31, Y+4	; 0x04
    3374:	27 89       	ldd	r18, Z+23	; 0x17
    3376:	30 8d       	ldd	r19, Z+24	; 0x18
    3378:	41 8d       	ldd	r20, Z+25	; 0x19
    337a:	52 8d       	ldd	r21, Z+26	; 0x1a
    337c:	e9 81       	ldd	r30, Y+1	; 0x01
    337e:	fa 81       	ldd	r31, Y+2	; 0x02
    3380:	82 8d       	ldd	r24, Z+26	; 0x1a
    3382:	93 8d       	ldd	r25, Z+27	; 0x1b
    3384:	cc 01       	movw	r24, r24
    3386:	a0 e0       	ldi	r26, 0x00	; 0
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	82 2b       	or	r24, r18
    338c:	93 2b       	or	r25, r19
    338e:	a4 2b       	or	r26, r20
    3390:	b5 2b       	or	r27, r21
    3392:	eb 81       	ldd	r30, Y+3	; 0x03
    3394:	fc 81       	ldd	r31, Y+4	; 0x04
    3396:	87 8b       	std	Z+23, r24	; 0x17
    3398:	90 8f       	std	Z+24, r25	; 0x18
    339a:	a1 8f       	std	Z+25, r26	; 0x19
    339c:	b2 8f       	std	Z+26, r27	; 0x1a

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	9a 81       	ldd	r25, Y+2	; 0x02
    33a2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <_ZL11DIR_IS_FILEPK14directoryEntry>
    33a6:	89 87       	std	Y+9, r24	; 0x09
    33a8:	89 85       	ldd	r24, Y+9	; 0x09
    33aa:	88 23       	and	r24, r24
    33ac:	11 f0       	breq	.+4      	; 0x33b2 <_ZN6SdFile15openCachedEntryEhh+0xe4>
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	89 87       	std	Y+9, r24	; 0x09
    33b2:	89 85       	ldd	r24, Y+9	; 0x09
    33b4:	88 23       	and	r24, r24
    33b6:	89 f0       	breq	.+34     	; 0x33da <_ZN6SdFile15openCachedEntryEhh+0x10c>
    fileSize_ = p->fileSize;
    33b8:	e9 81       	ldd	r30, Y+1	; 0x01
    33ba:	fa 81       	ldd	r31, Y+2	; 0x02
    33bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    33be:	95 8d       	ldd	r25, Z+29	; 0x1d
    33c0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    33c2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    33c4:	eb 81       	ldd	r30, Y+3	; 0x03
    33c6:	fc 81       	ldd	r31, Y+4	; 0x04
    33c8:	83 8b       	std	Z+19, r24	; 0x13
    33ca:	94 8b       	std	Z+20, r25	; 0x14
    33cc:	a5 8b       	std	Z+21, r26	; 0x15
    33ce:	b6 8b       	std	Z+22, r27	; 0x16
    type_ = FAT_FILE_TYPE_NORMAL;
    33d0:	eb 81       	ldd	r30, Y+3	; 0x03
    33d2:	fc 81       	ldd	r31, Y+4	; 0x04
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	85 83       	std	Z+5, r24	; 0x05
    33d8:	32 c0       	rjmp	.+100    	; 0x343e <_ZN6SdFile15openCachedEntryEhh+0x170>
  } else if (DIR_IS_SUBDIR(p)) {
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	9a 81       	ldd	r25, Y+2	; 0x02
    33de:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
    33e2:	8a 87       	std	Y+10, r24	; 0x0a
    33e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    33e6:	88 23       	and	r24, r24
    33e8:	11 f0       	breq	.+4      	; 0x33ee <_ZN6SdFile15openCachedEntryEhh+0x120>
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	8a 87       	std	Y+10, r24	; 0x0a
    33ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    33f0:	88 23       	and	r24, r24
    33f2:	19 f1       	breq	.+70     	; 0x343a <_ZN6SdFile15openCachedEntryEhh+0x16c>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    33f4:	eb 81       	ldd	r30, Y+3	; 0x03
    33f6:	fc 81       	ldd	r31, Y+4	; 0x04
    33f8:	63 8d       	ldd	r22, Z+27	; 0x1b
    33fa:	74 8d       	ldd	r23, Z+28	; 0x1c
    33fc:	eb 81       	ldd	r30, Y+3	; 0x03
    33fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3400:	27 89       	ldd	r18, Z+23	; 0x17
    3402:	30 8d       	ldd	r19, Z+24	; 0x18
    3404:	41 8d       	ldd	r20, Z+25	; 0x19
    3406:	52 8d       	ldd	r21, Z+26	; 0x1a
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	9c 81       	ldd	r25, Y+4	; 0x04
    340c:	fc 01       	movw	r30, r24
    340e:	73 96       	adiw	r30, 0x13	; 19
    3410:	cb 01       	movw	r24, r22
    3412:	ba 01       	movw	r22, r20
    3414:	a9 01       	movw	r20, r18
    3416:	9f 01       	movw	r18, r30
    3418:	0e 94 4f 29 	call	0x529e	; 0x529e <_ZNK8SdVolume9chainSizeEmPm>
    341c:	1f 82       	std	Y+7, r1	; 0x07
    341e:	88 23       	and	r24, r24
    3420:	11 f4       	brne	.+4      	; 0x3426 <_ZN6SdFile15openCachedEntryEhh+0x158>
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	8f 83       	std	Y+7, r24	; 0x07
    3426:	8f 81       	ldd	r24, Y+7	; 0x07
    3428:	88 23       	and	r24, r24
    342a:	11 f0       	breq	.+4      	; 0x3430 <_ZN6SdFile15openCachedEntryEhh+0x162>
    342c:	18 86       	std	Y+8, r1	; 0x08
    342e:	2b c0       	rjmp	.+86     	; 0x3486 <_ZN6SdFile15openCachedEntryEhh+0x1b8>
    type_ = FAT_FILE_TYPE_SUBDIR;
    3430:	eb 81       	ldd	r30, Y+3	; 0x03
    3432:	fc 81       	ldd	r31, Y+4	; 0x04
    3434:	84 e0       	ldi	r24, 0x04	; 4
    3436:	85 83       	std	Z+5, r24	; 0x05
    3438:	02 c0       	rjmp	.+4      	; 0x343e <_ZN6SdFile15openCachedEntryEhh+0x170>
  } else {
    return false;
    343a:	18 86       	std	Y+8, r1	; 0x08
    343c:	24 c0       	rjmp	.+72     	; 0x3486 <_ZN6SdFile15openCachedEntryEhh+0x1b8>
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    343e:	8e 81       	ldd	r24, Y+6	; 0x06
    3440:	8f 70       	andi	r24, 0x0F	; 15
    3442:	eb 81       	ldd	r30, Y+3	; 0x03
    3444:	fc 81       	ldd	r31, Y+4	; 0x04
    3446:	84 83       	std	Z+4, r24	; 0x04

  // set to start of file
  curCluster_ = 0;
    3448:	eb 81       	ldd	r30, Y+3	; 0x03
    344a:	fc 81       	ldd	r31, Y+4	; 0x04
    344c:	16 82       	std	Z+6, r1	; 0x06
    344e:	17 82       	std	Z+7, r1	; 0x07
    3450:	10 86       	std	Z+8, r1	; 0x08
    3452:	11 86       	std	Z+9, r1	; 0x09
  curPosition_ = 0;
    3454:	eb 81       	ldd	r30, Y+3	; 0x03
    3456:	fc 81       	ldd	r31, Y+4	; 0x04
    3458:	12 86       	std	Z+10, r1	; 0x0a
    345a:	13 86       	std	Z+11, r1	; 0x0b
    345c:	14 86       	std	Z+12, r1	; 0x0c
    345e:	15 86       	std	Z+13, r1	; 0x0d

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    3460:	8e 81       	ldd	r24, Y+6	; 0x06
    3462:	88 2f       	mov	r24, r24
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	80 74       	andi	r24, 0x40	; 64
    3468:	90 70       	andi	r25, 0x00	; 0
    346a:	00 97       	sbiw	r24, 0x00	; 0
    346c:	51 f0       	breq	.+20     	; 0x3482 <_ZN6SdFile15openCachedEntryEhh+0x1b4>
    346e:	8b 81       	ldd	r24, Y+3	; 0x03
    3470:	9c 81       	ldd	r25, Y+4	; 0x04
    3472:	40 e0       	ldi	r20, 0x00	; 0
    3474:	50 e0       	ldi	r21, 0x00	; 0
    3476:	60 e0       	ldi	r22, 0x00	; 0
    3478:	70 e0       	ldi	r23, 0x00	; 0
    347a:	0e 94 c3 12 	call	0x2586	; 0x2586 <_ZN6SdFile8truncateEm>
    347e:	88 87       	std	Y+8, r24	; 0x08
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <_ZN6SdFile15openCachedEntryEhh+0x1b8>
  return true;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	88 87       	std	Y+8, r24	; 0x08
    3486:	88 85       	ldd	r24, Y+8	; 0x08
}
    3488:	2a 96       	adiw	r28, 0x0a	; 10
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	08 95       	ret

0000349a <_ZN6SdFile4openEPS_jh>:
 * OR of flags O_READ, O_WRITE, O_TRUNC, and O_SYNC.
 *
 * See open() by fileName for definition of flags and return values.
 *
 */
uint8_t SdFile::open(SdFile* dirFile, uint16_t index, uint8_t oflag) {
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	2c 97       	sbiw	r28, 0x0c	; 12
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	9c 83       	std	Y+4, r25	; 0x04
    34b0:	8b 83       	std	Y+3, r24	; 0x03
    34b2:	7e 83       	std	Y+6, r23	; 0x06
    34b4:	6d 83       	std	Y+5, r22	; 0x05
    34b6:	58 87       	std	Y+8, r21	; 0x08
    34b8:	4f 83       	std	Y+7, r20	; 0x07
    34ba:	29 87       	std	Y+9, r18	; 0x09
  // error if already open
  if (isOpen())return false;
    34bc:	8b 81       	ldd	r24, Y+3	; 0x03
    34be:	9c 81       	ldd	r25, Y+4	; 0x04
    34c0:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZNK6SdFile6isOpenEv>
    34c4:	8c 87       	std	Y+12, r24	; 0x0c
    34c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    34c8:	88 23       	and	r24, r24
    34ca:	11 f0       	breq	.+4      	; 0x34d0 <_ZN6SdFile4openEPS_jh+0x36>
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	8c 87       	std	Y+12, r24	; 0x0c
    34d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    34d2:	88 23       	and	r24, r24
    34d4:	11 f0       	breq	.+4      	; 0x34da <_ZN6SdFile4openEPS_jh+0x40>
    34d6:	1b 86       	std	Y+11, r1	; 0x0b
    34d8:	56 c0       	rjmp	.+172    	; 0x3586 <_ZN6SdFile4openEPS_jh+0xec>

  // don't open existing file if O_CREAT and O_EXCL - user call error
  if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    34da:	89 85       	ldd	r24, Y+9	; 0x09
    34dc:	88 2f       	mov	r24, r24
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	80 73       	andi	r24, 0x30	; 48
    34e2:	90 70       	andi	r25, 0x00	; 0
    34e4:	80 33       	cpi	r24, 0x30	; 48
    34e6:	91 05       	cpc	r25, r1
    34e8:	11 f4       	brne	.+4      	; 0x34ee <_ZN6SdFile4openEPS_jh+0x54>
    34ea:	1b 86       	std	Y+11, r1	; 0x0b
    34ec:	4c c0       	rjmp	.+152    	; 0x3586 <_ZN6SdFile4openEPS_jh+0xec>

  vol_ = dirFile->vol_;
    34ee:	ed 81       	ldd	r30, Y+5	; 0x05
    34f0:	fe 81       	ldd	r31, Y+6	; 0x06
    34f2:	83 8d       	ldd	r24, Z+27	; 0x1b
    34f4:	94 8d       	ldd	r25, Z+28	; 0x1c
    34f6:	eb 81       	ldd	r30, Y+3	; 0x03
    34f8:	fc 81       	ldd	r31, Y+4	; 0x04
    34fa:	94 8f       	std	Z+28, r25	; 0x1c
    34fc:	83 8f       	std	Z+27, r24	; 0x1b

  // seek to location of entry
  if (!dirFile->seekSet(32 * index)) return false;
    34fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3500:	98 85       	ldd	r25, Y+8	; 0x08
    3502:	88 0f       	add	r24, r24
    3504:	99 1f       	adc	r25, r25
    3506:	82 95       	swap	r24
    3508:	92 95       	swap	r25
    350a:	90 7f       	andi	r25, 0xF0	; 240
    350c:	98 27       	eor	r25, r24
    350e:	80 7f       	andi	r24, 0xF0	; 240
    3510:	98 27       	eor	r25, r24
    3512:	9c 01       	movw	r18, r24
    3514:	40 e0       	ldi	r20, 0x00	; 0
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	8d 81       	ldd	r24, Y+5	; 0x05
    351a:	9e 81       	ldd	r25, Y+6	; 0x06
    351c:	ba 01       	movw	r22, r20
    351e:	a9 01       	movw	r20, r18
    3520:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN6SdFile7seekSetEm>
    3524:	1a 86       	std	Y+10, r1	; 0x0a
    3526:	88 23       	and	r24, r24
    3528:	11 f4       	brne	.+4      	; 0x352e <_ZN6SdFile4openEPS_jh+0x94>
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	8a 87       	std	Y+10, r24	; 0x0a
    352e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3530:	88 23       	and	r24, r24
    3532:	11 f0       	breq	.+4      	; 0x3538 <_ZN6SdFile4openEPS_jh+0x9e>
    3534:	1b 86       	std	Y+11, r1	; 0x0b
    3536:	27 c0       	rjmp	.+78     	; 0x3586 <_ZN6SdFile4openEPS_jh+0xec>

  // read entry into cache
  dir_t* p = dirFile->readDirCache();
    3538:	8d 81       	ldd	r24, Y+5	; 0x05
    353a:	9e 81       	ldd	r25, Y+6	; 0x06
    353c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <_ZN6SdFile12readDirCacheEv>
    3540:	9a 83       	std	Y+2, r25	; 0x02
    3542:	89 83       	std	Y+1, r24	; 0x01
  if (p == NULL) return false;
    3544:	89 81       	ldd	r24, Y+1	; 0x01
    3546:	9a 81       	ldd	r25, Y+2	; 0x02
    3548:	00 97       	sbiw	r24, 0x00	; 0
    354a:	11 f4       	brne	.+4      	; 0x3550 <_ZN6SdFile4openEPS_jh+0xb6>
    354c:	1b 86       	std	Y+11, r1	; 0x0b
    354e:	1b c0       	rjmp	.+54     	; 0x3586 <_ZN6SdFile4openEPS_jh+0xec>

  // error if empty slot or '.' or '..'
  if (p->name[0] == DIR_NAME_FREE ||
    3550:	e9 81       	ldd	r30, Y+1	; 0x01
    3552:	fa 81       	ldd	r31, Y+2	; 0x02
    3554:	80 81       	ld	r24, Z
    3556:	88 23       	and	r24, r24
    3558:	51 f0       	breq	.+20     	; 0x356e <_ZN6SdFile4openEPS_jh+0xd4>
    355a:	e9 81       	ldd	r30, Y+1	; 0x01
    355c:	fa 81       	ldd	r31, Y+2	; 0x02
    355e:	80 81       	ld	r24, Z
    3560:	85 3e       	cpi	r24, 0xE5	; 229
    3562:	29 f0       	breq	.+10     	; 0x356e <_ZN6SdFile4openEPS_jh+0xd4>
    3564:	e9 81       	ldd	r30, Y+1	; 0x01
    3566:	fa 81       	ldd	r31, Y+2	; 0x02
    3568:	80 81       	ld	r24, Z
    356a:	8e 32       	cpi	r24, 0x2E	; 46
    356c:	11 f4       	brne	.+4      	; 0x3572 <_ZN6SdFile4openEPS_jh+0xd8>
      p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') {
    return false;
    356e:	1b 86       	std	Y+11, r1	; 0x0b
    3570:	0a c0       	rjmp	.+20     	; 0x3586 <_ZN6SdFile4openEPS_jh+0xec>
  }
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
    3572:	8f 81       	ldd	r24, Y+7	; 0x07
    3574:	28 2f       	mov	r18, r24
    3576:	2f 70       	andi	r18, 0x0F	; 15
    3578:	8b 81       	ldd	r24, Y+3	; 0x03
    357a:	9c 81       	ldd	r25, Y+4	; 0x04
    357c:	62 2f       	mov	r22, r18
    357e:	49 85       	ldd	r20, Y+9	; 0x09
    3580:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN6SdFile15openCachedEntryEhh>
    3584:	8b 87       	std	Y+11, r24	; 0x0b
    3586:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    3588:	2c 96       	adiw	r28, 0x0c	; 12
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	cd bf       	out	0x3d, r28	; 61
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <_ZN6SdFile8rmRfStarEv>:
 * a directory that has a long name.  See remove() and rmDir().
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::rmRfStar(void) {
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	ab 97       	sbiw	r28, 0x2b	; 43
    35a4:	0f b6       	in	r0, 0x3f	; 63
    35a6:	f8 94       	cli
    35a8:	de bf       	out	0x3e, r29	; 62
    35aa:	0f be       	out	0x3f, r0	; 63
    35ac:	cd bf       	out	0x3d, r28	; 61
    35ae:	9b a3       	std	Y+35, r25	; 0x23
    35b0:	8a a3       	std	Y+34, r24	; 0x22
  rewind();
    35b2:	8a a1       	ldd	r24, Y+34	; 0x22
    35b4:	9b a1       	ldd	r25, Y+35	; 0x23
    35b6:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6SdFile6rewindEv>
    35ba:	b6 c0       	rjmp	.+364    	; 0x3728 <_ZN6SdFile8rmRfStarEv+0x18e>
  while (curPosition_ < fileSize_) {
    SdFile f;
    35bc:	ce 01       	movw	r24, r28
    35be:	05 96       	adiw	r24, 0x05	; 5
    35c0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>

    // remember position
    uint16_t index = curPosition_/32;
    35c4:	ea a1       	ldd	r30, Y+34	; 0x22
    35c6:	fb a1       	ldd	r31, Y+35	; 0x23
    35c8:	82 85       	ldd	r24, Z+10	; 0x0a
    35ca:	93 85       	ldd	r25, Z+11	; 0x0b
    35cc:	a4 85       	ldd	r26, Z+12	; 0x0c
    35ce:	b5 85       	ldd	r27, Z+13	; 0x0d
    35d0:	68 94       	set
    35d2:	14 f8       	bld	r1, 4
    35d4:	b6 95       	lsr	r27
    35d6:	a7 95       	ror	r26
    35d8:	97 95       	ror	r25
    35da:	87 95       	ror	r24
    35dc:	16 94       	lsr	r1
    35de:	d1 f7       	brne	.-12     	; 0x35d4 <_ZN6SdFile8rmRfStarEv+0x3a>
    35e0:	9c 83       	std	Y+4, r25	; 0x04
    35e2:	8b 83       	std	Y+3, r24	; 0x03

    dir_t* p = readDirCache();
    35e4:	8a a1       	ldd	r24, Y+34	; 0x22
    35e6:	9b a1       	ldd	r25, Y+35	; 0x23
    35e8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <_ZN6SdFile12readDirCacheEv>
    35ec:	9a 83       	std	Y+2, r25	; 0x02
    35ee:	89 83       	std	Y+1, r24	; 0x01
    if (!p) return false;
    35f0:	89 81       	ldd	r24, Y+1	; 0x01
    35f2:	9a 81       	ldd	r25, Y+2	; 0x02
    35f4:	00 97       	sbiw	r24, 0x00	; 0
    35f6:	11 f4       	brne	.+4      	; 0x35fc <_ZN6SdFile8rmRfStarEv+0x62>
    35f8:	19 a6       	std	Y+41, r1	; 0x29
    35fa:	bd c0       	rjmp	.+378    	; 0x3776 <_ZN6SdFile8rmRfStarEv+0x1dc>

    // done if past last entry
    if (p->name[0] == DIR_NAME_FREE) break;
    35fc:	e9 81       	ldd	r30, Y+1	; 0x01
    35fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3600:	80 81       	ld	r24, Z
    3602:	88 23       	and	r24, r24
    3604:	09 f4       	brne	.+2      	; 0x3608 <_ZN6SdFile8rmRfStarEv+0x6e>
    3606:	a2 c0       	rjmp	.+324    	; 0x374c <_ZN6SdFile8rmRfStarEv+0x1b2>

    // skip empty slot or '.' or '..'
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    3608:	e9 81       	ldd	r30, Y+1	; 0x01
    360a:	fa 81       	ldd	r31, Y+2	; 0x02
    360c:	80 81       	ld	r24, Z
    360e:	85 3e       	cpi	r24, 0xE5	; 229
    3610:	09 f4       	brne	.+2      	; 0x3614 <_ZN6SdFile8rmRfStarEv+0x7a>
    3612:	8a c0       	rjmp	.+276    	; 0x3728 <_ZN6SdFile8rmRfStarEv+0x18e>
    3614:	e9 81       	ldd	r30, Y+1	; 0x01
    3616:	fa 81       	ldd	r31, Y+2	; 0x02
    3618:	80 81       	ld	r24, Z
    361a:	8e 32       	cpi	r24, 0x2E	; 46
    361c:	09 f4       	brne	.+2      	; 0x3620 <_ZN6SdFile8rmRfStarEv+0x86>
    361e:	84 c0       	rjmp	.+264    	; 0x3728 <_ZN6SdFile8rmRfStarEv+0x18e>

    // skip if part of long file name or volume label in root
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	9a 81       	ldd	r25, Y+2	; 0x02
    3624:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry>
    3628:	18 a6       	std	Y+40, r1	; 0x28
    362a:	88 23       	and	r24, r24
    362c:	11 f4       	brne	.+4      	; 0x3632 <_ZN6SdFile8rmRfStarEv+0x98>
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	88 a7       	std	Y+40, r24	; 0x28
    3632:	88 a5       	ldd	r24, Y+40	; 0x28
    3634:	88 23       	and	r24, r24
    3636:	09 f0       	breq	.+2      	; 0x363a <_ZN6SdFile8rmRfStarEv+0xa0>
    3638:	77 c0       	rjmp	.+238    	; 0x3728 <_ZN6SdFile8rmRfStarEv+0x18e>

    if (!f.open(this, index, O_READ)) return false;
    363a:	ce 01       	movw	r24, r28
    363c:	05 96       	adiw	r24, 0x05	; 5
    363e:	2a a1       	ldd	r18, Y+34	; 0x22
    3640:	3b a1       	ldd	r19, Y+35	; 0x23
    3642:	4b 81       	ldd	r20, Y+3	; 0x03
    3644:	5c 81       	ldd	r21, Y+4	; 0x04
    3646:	b9 01       	movw	r22, r18
    3648:	21 e0       	ldi	r18, 0x01	; 1
    364a:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6SdFile4openEPS_jh>
    364e:	1f a2       	std	Y+39, r1	; 0x27
    3650:	88 23       	and	r24, r24
    3652:	11 f4       	brne	.+4      	; 0x3658 <_ZN6SdFile8rmRfStarEv+0xbe>
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	8f a3       	std	Y+39, r24	; 0x27
    3658:	8f a1       	ldd	r24, Y+39	; 0x27
    365a:	88 23       	and	r24, r24
    365c:	11 f0       	breq	.+4      	; 0x3662 <_ZN6SdFile8rmRfStarEv+0xc8>
    365e:	19 a6       	std	Y+41, r1	; 0x29
    3660:	8a c0       	rjmp	.+276    	; 0x3776 <_ZN6SdFile8rmRfStarEv+0x1dc>
    if (f.isSubDir()) {
    3662:	ce 01       	movw	r24, r28
    3664:	05 96       	adiw	r24, 0x05	; 5
    3666:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZNK6SdFile8isSubDirEv>
    366a:	8a a7       	std	Y+42, r24	; 0x2a
    366c:	8a a5       	ldd	r24, Y+42	; 0x2a
    366e:	88 23       	and	r24, r24
    3670:	11 f0       	breq	.+4      	; 0x3676 <_ZN6SdFile8rmRfStarEv+0xdc>
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	8a a7       	std	Y+42, r24	; 0x2a
    3676:	8a a5       	ldd	r24, Y+42	; 0x2a
    3678:	88 23       	and	r24, r24
    367a:	71 f0       	breq	.+28     	; 0x3698 <_ZN6SdFile8rmRfStarEv+0xfe>
      // recursively delete
      if (!f.rmRfStar()) return false;
    367c:	ce 01       	movw	r24, r28
    367e:	05 96       	adiw	r24, 0x05	; 5
    3680:	0e 94 cd 1a 	call	0x359a	; 0x359a <_ZN6SdFile8rmRfStarEv>
    3684:	1e a2       	std	Y+38, r1	; 0x26
    3686:	88 23       	and	r24, r24
    3688:	11 f4       	brne	.+4      	; 0x368e <_ZN6SdFile8rmRfStarEv+0xf4>
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	8e a3       	std	Y+38, r24	; 0x26
    368e:	8e a1       	ldd	r24, Y+38	; 0x26
    3690:	88 23       	and	r24, r24
    3692:	99 f0       	breq	.+38     	; 0x36ba <_ZN6SdFile8rmRfStarEv+0x120>
    3694:	19 a6       	std	Y+41, r1	; 0x29
    3696:	6f c0       	rjmp	.+222    	; 0x3776 <_ZN6SdFile8rmRfStarEv+0x1dc>
    } else {
      // ignore read-only
      f.flags_ |= O_WRITE;
    3698:	89 85       	ldd	r24, Y+9	; 0x09
    369a:	82 60       	ori	r24, 0x02	; 2
    369c:	89 87       	std	Y+9, r24	; 0x09
      if (!f.remove()) return false;
    369e:	ce 01       	movw	r24, r28
    36a0:	05 96       	adiw	r24, 0x05	; 5
    36a2:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN6SdFile6removeEv>
    36a6:	1d a2       	std	Y+37, r1	; 0x25
    36a8:	88 23       	and	r24, r24
    36aa:	11 f4       	brne	.+4      	; 0x36b0 <_ZN6SdFile8rmRfStarEv+0x116>
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	8d a3       	std	Y+37, r24	; 0x25
    36b0:	8d a1       	ldd	r24, Y+37	; 0x25
    36b2:	88 23       	and	r24, r24
    36b4:	11 f0       	breq	.+4      	; 0x36ba <_ZN6SdFile8rmRfStarEv+0x120>
    36b6:	19 a6       	std	Y+41, r1	; 0x29
    36b8:	5e c0       	rjmp	.+188    	; 0x3776 <_ZN6SdFile8rmRfStarEv+0x1dc>
    }
    // position to next entry if required
    if (curPosition_ != (32*(index + 1))) {
    36ba:	ea a1       	ldd	r30, Y+34	; 0x22
    36bc:	fb a1       	ldd	r31, Y+35	; 0x23
    36be:	22 85       	ldd	r18, Z+10	; 0x0a
    36c0:	33 85       	ldd	r19, Z+11	; 0x0b
    36c2:	44 85       	ldd	r20, Z+12	; 0x0c
    36c4:	55 85       	ldd	r21, Z+13	; 0x0d
    36c6:	8b 81       	ldd	r24, Y+3	; 0x03
    36c8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ca:	01 96       	adiw	r24, 0x01	; 1
    36cc:	88 0f       	add	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	82 95       	swap	r24
    36d2:	92 95       	swap	r25
    36d4:	90 7f       	andi	r25, 0xF0	; 240
    36d6:	98 27       	eor	r25, r24
    36d8:	80 7f       	andi	r24, 0xF0	; 240
    36da:	98 27       	eor	r25, r24
    36dc:	cc 01       	movw	r24, r24
    36de:	a0 e0       	ldi	r26, 0x00	; 0
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	28 17       	cp	r18, r24
    36e4:	39 07       	cpc	r19, r25
    36e6:	4a 07       	cpc	r20, r26
    36e8:	5b 07       	cpc	r21, r27
    36ea:	f1 f0       	breq	.+60     	; 0x3728 <_ZN6SdFile8rmRfStarEv+0x18e>
      if (!seekSet(32*(index + 1))) return false;
    36ec:	8b 81       	ldd	r24, Y+3	; 0x03
    36ee:	9c 81       	ldd	r25, Y+4	; 0x04
    36f0:	01 96       	adiw	r24, 0x01	; 1
    36f2:	88 0f       	add	r24, r24
    36f4:	99 1f       	adc	r25, r25
    36f6:	82 95       	swap	r24
    36f8:	92 95       	swap	r25
    36fa:	90 7f       	andi	r25, 0xF0	; 240
    36fc:	98 27       	eor	r25, r24
    36fe:	80 7f       	andi	r24, 0xF0	; 240
    3700:	98 27       	eor	r25, r24
    3702:	9c 01       	movw	r18, r24
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	50 e0       	ldi	r21, 0x00	; 0
    3708:	8a a1       	ldd	r24, Y+34	; 0x22
    370a:	9b a1       	ldd	r25, Y+35	; 0x23
    370c:	ba 01       	movw	r22, r20
    370e:	a9 01       	movw	r20, r18
    3710:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN6SdFile7seekSetEm>
    3714:	1c a2       	std	Y+36, r1	; 0x24
    3716:	88 23       	and	r24, r24
    3718:	11 f4       	brne	.+4      	; 0x371e <_ZN6SdFile8rmRfStarEv+0x184>
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	8c a3       	std	Y+36, r24	; 0x24
    371e:	8c a1       	ldd	r24, Y+36	; 0x24
    3720:	88 23       	and	r24, r24
    3722:	11 f0       	breq	.+4      	; 0x3728 <_ZN6SdFile8rmRfStarEv+0x18e>
    3724:	19 a6       	std	Y+41, r1	; 0x29
    3726:	27 c0       	rjmp	.+78     	; 0x3776 <_ZN6SdFile8rmRfStarEv+0x1dc>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::rmRfStar(void) {
  rewind();
  while (curPosition_ < fileSize_) {
    3728:	ea a1       	ldd	r30, Y+34	; 0x22
    372a:	fb a1       	ldd	r31, Y+35	; 0x23
    372c:	22 85       	ldd	r18, Z+10	; 0x0a
    372e:	33 85       	ldd	r19, Z+11	; 0x0b
    3730:	44 85       	ldd	r20, Z+12	; 0x0c
    3732:	55 85       	ldd	r21, Z+13	; 0x0d
    3734:	ea a1       	ldd	r30, Y+34	; 0x22
    3736:	fb a1       	ldd	r31, Y+35	; 0x23
    3738:	83 89       	ldd	r24, Z+19	; 0x13
    373a:	94 89       	ldd	r25, Z+20	; 0x14
    373c:	a5 89       	ldd	r26, Z+21	; 0x15
    373e:	b6 89       	ldd	r27, Z+22	; 0x16
    3740:	28 17       	cp	r18, r24
    3742:	39 07       	cpc	r19, r25
    3744:	4a 07       	cpc	r20, r26
    3746:	5b 07       	cpc	r21, r27
    3748:	08 f4       	brcc	.+2      	; 0x374c <_ZN6SdFile8rmRfStarEv+0x1b2>
    374a:	38 cf       	rjmp	.-400    	; 0x35bc <_ZN6SdFile8rmRfStarEv+0x22>
    if (curPosition_ != (32*(index + 1))) {
      if (!seekSet(32*(index + 1))) return false;
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
    374c:	8a a1       	ldd	r24, Y+34	; 0x22
    374e:	9b a1       	ldd	r25, Y+35	; 0x23
    3750:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZNK6SdFile6isRootEv>
    3754:	8b a7       	std	Y+43, r24	; 0x2b
    3756:	8b a5       	ldd	r24, Y+43	; 0x2b
    3758:	88 23       	and	r24, r24
    375a:	11 f0       	breq	.+4      	; 0x3760 <_ZN6SdFile8rmRfStarEv+0x1c6>
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	8b a7       	std	Y+43, r24	; 0x2b
    3760:	8b a5       	ldd	r24, Y+43	; 0x2b
    3762:	88 23       	and	r24, r24
    3764:	19 f0       	breq	.+6      	; 0x376c <_ZN6SdFile8rmRfStarEv+0x1d2>
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	89 a7       	std	Y+41, r24	; 0x29
    376a:	05 c0       	rjmp	.+10     	; 0x3776 <_ZN6SdFile8rmRfStarEv+0x1dc>
  return rmDir();
    376c:	8a a1       	ldd	r24, Y+34	; 0x22
    376e:	9b a1       	ldd	r25, Y+35	; 0x23
    3770:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <_ZN6SdFile5rmDirEv>
    3774:	89 a7       	std	Y+41, r24	; 0x29
    3776:	89 a5       	ldd	r24, Y+41	; 0x29
}
    3778:	ab 96       	adiw	r28, 0x2b	; 43
    377a:	0f b6       	in	r0, 0x3f	; 63
    377c:	f8 94       	cli
    377e:	de bf       	out	0x3e, r29	; 62
    3780:	0f be       	out	0x3f, r0	; 63
    3782:	cd bf       	out	0x3d, r28	; 61
    3784:	cf 91       	pop	r28
    3786:	df 91       	pop	r29
    3788:	08 95       	ret

0000378a <_ZN6SdFile8dirEntryEP14directoryEntry>:
 * \param[out] dir Location for return of the files directory entry.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::dirEntry(dir_t* dir) {
    378a:	df 93       	push	r29
    378c:	cf 93       	push	r28
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
    3792:	28 97       	sbiw	r28, 0x08	; 8
    3794:	0f b6       	in	r0, 0x3f	; 63
    3796:	f8 94       	cli
    3798:	de bf       	out	0x3e, r29	; 62
    379a:	0f be       	out	0x3f, r0	; 63
    379c:	cd bf       	out	0x3d, r28	; 61
    379e:	9c 83       	std	Y+4, r25	; 0x04
    37a0:	8b 83       	std	Y+3, r24	; 0x03
    37a2:	7e 83       	std	Y+6, r23	; 0x06
    37a4:	6d 83       	std	Y+5, r22	; 0x05
  // make sure fields on SD are correct
  if (!sync()) return false;
    37a6:	8b 81       	ldd	r24, Y+3	; 0x03
    37a8:	9c 81       	ldd	r25, Y+4	; 0x04
    37aa:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN6SdFile4syncEv>
    37ae:	18 86       	std	Y+8, r1	; 0x08
    37b0:	88 23       	and	r24, r24
    37b2:	11 f4       	brne	.+4      	; 0x37b8 <_ZN6SdFile8dirEntryEP14directoryEntry+0x2e>
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	88 87       	std	Y+8, r24	; 0x08
    37b8:	88 85       	ldd	r24, Y+8	; 0x08
    37ba:	88 23       	and	r24, r24
    37bc:	11 f0       	breq	.+4      	; 0x37c2 <_ZN6SdFile8dirEntryEP14directoryEntry+0x38>
    37be:	1f 82       	std	Y+7, r1	; 0x07
    37c0:	18 c0       	rjmp	.+48     	; 0x37f2 <_ZN6SdFile8dirEntryEP14directoryEntry+0x68>

  // read entry
  dir_t* p = cacheDirEntry(SdVolume::CACHE_FOR_READ);
    37c2:	8b 81       	ldd	r24, Y+3	; 0x03
    37c4:	9c 81       	ldd	r25, Y+4	; 0x04
    37c6:	60 e0       	ldi	r22, 0x00	; 0
    37c8:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN6SdFile13cacheDirEntryEh>
    37cc:	9a 83       	std	Y+2, r25	; 0x02
    37ce:	89 83       	std	Y+1, r24	; 0x01
  if (!p) return false;
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	9a 81       	ldd	r25, Y+2	; 0x02
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	11 f4       	brne	.+4      	; 0x37dc <_ZN6SdFile8dirEntryEP14directoryEntry+0x52>
    37d8:	1f 82       	std	Y+7, r1	; 0x07
    37da:	0b c0       	rjmp	.+22     	; 0x37f2 <_ZN6SdFile8dirEntryEP14directoryEntry+0x68>

  // copy to caller's struct
  memcpy(dir, p, sizeof(dir_t));
    37dc:	8d 81       	ldd	r24, Y+5	; 0x05
    37de:	9e 81       	ldd	r25, Y+6	; 0x06
    37e0:	29 81       	ldd	r18, Y+1	; 0x01
    37e2:	3a 81       	ldd	r19, Y+2	; 0x02
    37e4:	b9 01       	movw	r22, r18
    37e6:	40 e2       	ldi	r20, 0x20	; 32
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
  return true;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	8f 83       	std	Y+7, r24	; 0x07
    37f2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    37f4:	28 96       	adiw	r28, 0x08	; 8
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <_ZN6SdFile2lsEhh>:
 * LS_R - Recursive list of subdirectories.
 *
 * \param[in] indent Amount of space before file name. Used for recursive
 * list to indicate subdirectory level.
 */
void SdFile::ls(uint8_t flags, uint8_t indent) {
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	cd b7       	in	r28, 0x3d	; 61
    380c:	de b7       	in	r29, 0x3e	; 62
    380e:	ac 97       	sbiw	r28, 0x2c	; 44
    3810:	0f b6       	in	r0, 0x3f	; 63
    3812:	f8 94       	cli
    3814:	de bf       	out	0x3e, r29	; 62
    3816:	0f be       	out	0x3f, r0	; 63
    3818:	cd bf       	out	0x3d, r28	; 61
    381a:	9c a3       	std	Y+36, r25	; 0x24
    381c:	8b a3       	std	Y+35, r24	; 0x23
    381e:	6d a3       	std	Y+37, r22	; 0x25
    3820:	4e a3       	std	Y+38, r20	; 0x26
  dir_t* p;

  rewind();
    3822:	8b a1       	ldd	r24, Y+35	; 0x23
    3824:	9c a1       	ldd	r25, Y+36	; 0x24
    3826:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6SdFile6rewindEv>
    382a:	e1 c0       	rjmp	.+450    	; 0x39ee <_ZN6SdFile2lsEhh+0x1e8>
  while ((p = readDirCache())) {
    // done if past last used entry
    if (p->name[0] == DIR_NAME_FREE) break;
    382c:	ec 81       	ldd	r30, Y+4	; 0x04
    382e:	fd 81       	ldd	r31, Y+5	; 0x05
    3830:	80 81       	ld	r24, Z
    3832:	88 23       	and	r24, r24
    3834:	09 f4       	brne	.+2      	; 0x3838 <_ZN6SdFile2lsEhh+0x32>
    3836:	ec c0       	rjmp	.+472    	; 0x3a10 <_ZN6SdFile2lsEhh+0x20a>

    // skip deleted entry and entries for . and  ..
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
    3838:	ec 81       	ldd	r30, Y+4	; 0x04
    383a:	fd 81       	ldd	r31, Y+5	; 0x05
    383c:	80 81       	ld	r24, Z
    383e:	85 3e       	cpi	r24, 0xE5	; 229
    3840:	09 f4       	brne	.+2      	; 0x3844 <_ZN6SdFile2lsEhh+0x3e>
    3842:	d5 c0       	rjmp	.+426    	; 0x39ee <_ZN6SdFile2lsEhh+0x1e8>
    3844:	ec 81       	ldd	r30, Y+4	; 0x04
    3846:	fd 81       	ldd	r31, Y+5	; 0x05
    3848:	80 81       	ld	r24, Z
    384a:	8e 32       	cpi	r24, 0x2E	; 46
    384c:	09 f4       	brne	.+2      	; 0x3850 <_ZN6SdFile2lsEhh+0x4a>
    384e:	cf c0       	rjmp	.+414    	; 0x39ee <_ZN6SdFile2lsEhh+0x1e8>

    // only list subdirectories and files
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;
    3850:	8c 81       	ldd	r24, Y+4	; 0x04
    3852:	9d 81       	ldd	r25, Y+5	; 0x05
    3854:	0e 94 95 0a 	call	0x152a	; 0x152a <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry>
    3858:	1a a6       	std	Y+42, r1	; 0x2a
    385a:	88 23       	and	r24, r24
    385c:	11 f4       	brne	.+4      	; 0x3862 <_ZN6SdFile2lsEhh+0x5c>
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	8a a7       	std	Y+42, r24	; 0x2a
    3862:	8a a5       	ldd	r24, Y+42	; 0x2a
    3864:	88 23       	and	r24, r24
    3866:	09 f0       	breq	.+2      	; 0x386a <_ZN6SdFile2lsEhh+0x64>
    3868:	c2 c0       	rjmp	.+388    	; 0x39ee <_ZN6SdFile2lsEhh+0x1e8>

    // print any indent spaces
    for (int8_t i = 0; i < indent; i++) Serial.print(' ');
    386a:	1b 82       	std	Y+3, r1	; 0x03
    386c:	08 c0       	rjmp	.+16     	; 0x387e <_ZN6SdFile2lsEhh+0x78>
    386e:	8c e1       	ldi	r24, 0x1C	; 28
    3870:	96 e0       	ldi	r25, 0x06	; 6
    3872:	60 e2       	ldi	r22, 0x20	; 32
    3874:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
    3878:	8b 81       	ldd	r24, Y+3	; 0x03
    387a:	8f 5f       	subi	r24, 0xFF	; 255
    387c:	8b 83       	std	Y+3, r24	; 0x03
    387e:	8b 81       	ldd	r24, Y+3	; 0x03
    3880:	28 2f       	mov	r18, r24
    3882:	33 27       	eor	r19, r19
    3884:	27 fd       	sbrc	r18, 7
    3886:	30 95       	com	r19
    3888:	8e a1       	ldd	r24, Y+38	; 0x26
    388a:	88 2f       	mov	r24, r24
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	28 17       	cp	r18, r24
    3890:	39 07       	cpc	r19, r25
    3892:	6c f3       	brlt	.-38     	; 0x386e <_ZN6SdFile2lsEhh+0x68>

    // print file name with possible blank fill
    printDirName(*p, flags & (LS_DATE | LS_SIZE) ? 14 : 0);
    3894:	8d a1       	ldd	r24, Y+37	; 0x25
    3896:	88 2f       	mov	r24, r24
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	83 70       	andi	r24, 0x03	; 3
    389c:	90 70       	andi	r25, 0x00	; 0
    389e:	00 97       	sbiw	r24, 0x00	; 0
    38a0:	19 f0       	breq	.+6      	; 0x38a8 <_ZN6SdFile2lsEhh+0xa2>
    38a2:	8e e0       	ldi	r24, 0x0E	; 14
    38a4:	89 a7       	std	Y+41, r24	; 0x29
    38a6:	01 c0       	rjmp	.+2      	; 0x38aa <_ZN6SdFile2lsEhh+0xa4>
    38a8:	19 a6       	std	Y+41, r1	; 0x29
    38aa:	8c 81       	ldd	r24, Y+4	; 0x04
    38ac:	9d 81       	ldd	r25, Y+5	; 0x05
    38ae:	69 a5       	ldd	r22, Y+41	; 0x29
    38b0:	0e 94 4a 18 	call	0x3094	; 0x3094 <_ZN6SdFile12printDirNameERK14directoryEntryh>

    // print modify date/time if requested
    if (flags & LS_DATE) {
    38b4:	8d a1       	ldd	r24, Y+37	; 0x25
    38b6:	88 2f       	mov	r24, r24
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	81 70       	andi	r24, 0x01	; 1
    38bc:	90 70       	andi	r25, 0x00	; 0
    38be:	88 23       	and	r24, r24
    38c0:	89 f0       	breq	.+34     	; 0x38e4 <_ZN6SdFile2lsEhh+0xde>
       printFatDate(p->lastWriteDate);
    38c2:	ec 81       	ldd	r30, Y+4	; 0x04
    38c4:	fd 81       	ldd	r31, Y+5	; 0x05
    38c6:	80 8d       	ldd	r24, Z+24	; 0x18
    38c8:	91 8d       	ldd	r25, Z+25	; 0x19
    38ca:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN6SdFile12printFatDateEj>
       Serial.print(' ');
    38ce:	8c e1       	ldi	r24, 0x1C	; 28
    38d0:	96 e0       	ldi	r25, 0x06	; 6
    38d2:	60 e2       	ldi	r22, 0x20	; 32
    38d4:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
       printFatTime(p->lastWriteTime);
    38d8:	ec 81       	ldd	r30, Y+4	; 0x04
    38da:	fd 81       	ldd	r31, Y+5	; 0x05
    38dc:	86 89       	ldd	r24, Z+22	; 0x16
    38de:	97 89       	ldd	r25, Z+23	; 0x17
    38e0:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <_ZN6SdFile12printFatTimeEj>
    }
    // print size if requested
    if (!DIR_IS_SUBDIR(p) && (flags & LS_SIZE)) {
    38e4:	8c 81       	ldd	r24, Y+4	; 0x04
    38e6:	9d 81       	ldd	r25, Y+5	; 0x05
    38e8:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
    38ec:	88 23       	and	r24, r24
    38ee:	51 f4       	brne	.+20     	; 0x3904 <_ZN6SdFile2lsEhh+0xfe>
    38f0:	8d a1       	ldd	r24, Y+37	; 0x25
    38f2:	88 2f       	mov	r24, r24
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	82 70       	andi	r24, 0x02	; 2
    38f8:	90 70       	andi	r25, 0x00	; 0
    38fa:	00 97       	sbiw	r24, 0x00	; 0
    38fc:	19 f0       	breq	.+6      	; 0x3904 <_ZN6SdFile2lsEhh+0xfe>
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	88 a7       	std	Y+40, r24	; 0x28
    3902:	01 c0       	rjmp	.+2      	; 0x3906 <_ZN6SdFile2lsEhh+0x100>
    3904:	18 a6       	std	Y+40, r1	; 0x28
    3906:	88 a5       	ldd	r24, Y+40	; 0x28
    3908:	88 23       	and	r24, r24
    390a:	99 f0       	breq	.+38     	; 0x3932 <_ZN6SdFile2lsEhh+0x12c>
      Serial.print(' ');
    390c:	8c e1       	ldi	r24, 0x1C	; 28
    390e:	96 e0       	ldi	r25, 0x06	; 6
    3910:	60 e2       	ldi	r22, 0x20	; 32
    3912:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
      Serial.print(p->fileSize);
    3916:	ec 81       	ldd	r30, Y+4	; 0x04
    3918:	fd 81       	ldd	r31, Y+5	; 0x05
    391a:	24 8d       	ldd	r18, Z+28	; 0x1c
    391c:	35 8d       	ldd	r19, Z+29	; 0x1d
    391e:	46 8d       	ldd	r20, Z+30	; 0x1e
    3920:	57 8d       	ldd	r21, Z+31	; 0x1f
    3922:	8c e1       	ldi	r24, 0x1C	; 28
    3924:	96 e0       	ldi	r25, 0x06	; 6
    3926:	ba 01       	movw	r22, r20
    3928:	a9 01       	movw	r20, r18
    392a:	2a e0       	ldi	r18, 0x0A	; 10
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	0e 94 4e 43 	call	0x869c	; 0x869c <_ZN5Print5printEmi>
    }
    Serial.println();
    3932:	8c e1       	ldi	r24, 0x1C	; 28
    3934:	96 e0       	ldi	r25, 0x06	; 6
    3936:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>

    // list subdirectory content if requested
    if ((flags & LS_R) && DIR_IS_SUBDIR(p)) {
    393a:	8d a1       	ldd	r24, Y+37	; 0x25
    393c:	88 2f       	mov	r24, r24
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	84 70       	andi	r24, 0x04	; 4
    3942:	90 70       	andi	r25, 0x00	; 0
    3944:	00 97       	sbiw	r24, 0x00	; 0
    3946:	49 f0       	breq	.+18     	; 0x395a <_ZN6SdFile2lsEhh+0x154>
    3948:	8c 81       	ldd	r24, Y+4	; 0x04
    394a:	9d 81       	ldd	r25, Y+5	; 0x05
    394c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
    3950:	88 23       	and	r24, r24
    3952:	19 f0       	breq	.+6      	; 0x395a <_ZN6SdFile2lsEhh+0x154>
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	8f a3       	std	Y+39, r24	; 0x27
    3958:	01 c0       	rjmp	.+2      	; 0x395c <_ZN6SdFile2lsEhh+0x156>
    395a:	1f a2       	std	Y+39, r1	; 0x27
    395c:	8f a1       	ldd	r24, Y+39	; 0x27
    395e:	88 23       	and	r24, r24
    3960:	09 f4       	brne	.+2      	; 0x3964 <_ZN6SdFile2lsEhh+0x15e>
    3962:	45 c0       	rjmp	.+138    	; 0x39ee <_ZN6SdFile2lsEhh+0x1e8>
      uint16_t index = curPosition()/32 - 1;
    3964:	8b a1       	ldd	r24, Y+35	; 0x23
    3966:	9c a1       	ldd	r25, Y+36	; 0x24
    3968:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_ZNK6SdFile11curPositionEv>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	68 94       	set
    3972:	14 f8       	bld	r1, 4
    3974:	b6 95       	lsr	r27
    3976:	a7 95       	ror	r26
    3978:	97 95       	ror	r25
    397a:	87 95       	ror	r24
    397c:	16 94       	lsr	r1
    397e:	d1 f7       	brne	.-12     	; 0x3974 <_ZN6SdFile2lsEhh+0x16e>
    3980:	01 97       	sbiw	r24, 0x01	; 1
    3982:	9a 83       	std	Y+2, r25	; 0x02
    3984:	89 83       	std	Y+1, r24	; 0x01
      SdFile s;
    3986:	ce 01       	movw	r24, r28
    3988:	06 96       	adiw	r24, 0x06	; 6
    398a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>
      if (s.open(this, index, O_READ)) s.ls(flags, indent + 2);
    398e:	ce 01       	movw	r24, r28
    3990:	06 96       	adiw	r24, 0x06	; 6
    3992:	2b a1       	ldd	r18, Y+35	; 0x23
    3994:	3c a1       	ldd	r19, Y+36	; 0x24
    3996:	49 81       	ldd	r20, Y+1	; 0x01
    3998:	5a 81       	ldd	r21, Y+2	; 0x02
    399a:	b9 01       	movw	r22, r18
    399c:	21 e0       	ldi	r18, 0x01	; 1
    399e:	0e 94 4d 1a 	call	0x349a	; 0x349a <_ZN6SdFile4openEPS_jh>
    39a2:	8c a7       	std	Y+44, r24	; 0x2c
    39a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    39a6:	88 23       	and	r24, r24
    39a8:	11 f0       	breq	.+4      	; 0x39ae <_ZN6SdFile2lsEhh+0x1a8>
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	8c a7       	std	Y+44, r24	; 0x2c
    39ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    39b0:	88 23       	and	r24, r24
    39b2:	49 f0       	breq	.+18     	; 0x39c6 <_ZN6SdFile2lsEhh+0x1c0>
    39b4:	8e a1       	ldd	r24, Y+38	; 0x26
    39b6:	28 2f       	mov	r18, r24
    39b8:	2e 5f       	subi	r18, 0xFE	; 254
    39ba:	ce 01       	movw	r24, r28
    39bc:	06 96       	adiw	r24, 0x06	; 6
    39be:	6d a1       	ldd	r22, Y+37	; 0x25
    39c0:	42 2f       	mov	r20, r18
    39c2:	0e 94 03 1c 	call	0x3806	; 0x3806 <_ZN6SdFile2lsEhh>
      seekSet(32 * (index + 1));
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ca:	01 96       	adiw	r24, 0x01	; 1
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	82 95       	swap	r24
    39d2:	92 95       	swap	r25
    39d4:	90 7f       	andi	r25, 0xF0	; 240
    39d6:	98 27       	eor	r25, r24
    39d8:	80 7f       	andi	r24, 0xF0	; 240
    39da:	98 27       	eor	r25, r24
    39dc:	9c 01       	movw	r18, r24
    39de:	40 e0       	ldi	r20, 0x00	; 0
    39e0:	50 e0       	ldi	r21, 0x00	; 0
    39e2:	8b a1       	ldd	r24, Y+35	; 0x23
    39e4:	9c a1       	ldd	r25, Y+36	; 0x24
    39e6:	ba 01       	movw	r22, r20
    39e8:	a9 01       	movw	r20, r18
    39ea:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN6SdFile7seekSetEm>
 */
void SdFile::ls(uint8_t flags, uint8_t indent) {
  dir_t* p;

  rewind();
  while ((p = readDirCache())) {
    39ee:	8b a1       	ldd	r24, Y+35	; 0x23
    39f0:	9c a1       	ldd	r25, Y+36	; 0x24
    39f2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <_ZN6SdFile12readDirCacheEv>
    39f6:	9d 83       	std	Y+5, r25	; 0x05
    39f8:	8c 83       	std	Y+4, r24	; 0x04
    39fa:	1b a6       	std	Y+43, r1	; 0x2b
    39fc:	8c 81       	ldd	r24, Y+4	; 0x04
    39fe:	9d 81       	ldd	r25, Y+5	; 0x05
    3a00:	00 97       	sbiw	r24, 0x00	; 0
    3a02:	11 f0       	breq	.+4      	; 0x3a08 <_ZN6SdFile2lsEhh+0x202>
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	8b a7       	std	Y+43, r24	; 0x2b
    3a08:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a0a:	88 23       	and	r24, r24
    3a0c:	09 f0       	breq	.+2      	; 0x3a10 <_ZN6SdFile2lsEhh+0x20a>
    3a0e:	0e cf       	rjmp	.-484    	; 0x382c <_ZN6SdFile2lsEhh+0x26>
      SdFile s;
      if (s.open(this, index, O_READ)) s.ls(flags, indent + 2);
      seekSet(32 * (index + 1));
    }
  }
}
    3a10:	ac 96       	adiw	r28, 0x2c	; 44
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <_ZN6SdFile10addClusterEv+0x6>
    3a28:	00 d0       	rcall	.+0      	; 0x3a2a <_ZN6SdFile10addClusterEv+0x8>
    3a2a:	cd b7       	in	r28, 0x3d	; 61
    3a2c:	de b7       	in	r29, 0x3e	; 62
    3a2e:	9a 83       	std	Y+2, r25	; 0x02
    3a30:	89 83       	std	Y+1, r24	; 0x01
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    3a32:	e9 81       	ldd	r30, Y+1	; 0x01
    3a34:	fa 81       	ldd	r31, Y+2	; 0x02
    3a36:	23 8d       	ldd	r18, Z+27	; 0x1b
    3a38:	34 8d       	ldd	r19, Z+28	; 0x1c
    3a3a:	89 81       	ldd	r24, Y+1	; 0x01
    3a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3e:	fc 01       	movw	r30, r24
    3a40:	36 96       	adiw	r30, 0x06	; 6
    3a42:	c9 01       	movw	r24, r18
    3a44:	41 e0       	ldi	r20, 0x01	; 1
    3a46:	50 e0       	ldi	r21, 0x00	; 0
    3a48:	60 e0       	ldi	r22, 0x00	; 0
    3a4a:	70 e0       	ldi	r23, 0x00	; 0
    3a4c:	9f 01       	movw	r18, r30
    3a4e:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8SdVolume15allocContiguousEmPm>
    3a52:	1c 82       	std	Y+4, r1	; 0x04
    3a54:	88 23       	and	r24, r24
    3a56:	11 f4       	brne	.+4      	; 0x3a5c <_ZN6SdFile10addClusterEv+0x3a>
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	8c 83       	std	Y+4, r24	; 0x04
    3a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a5e:	88 23       	and	r24, r24
    3a60:	11 f0       	breq	.+4      	; 0x3a66 <_ZN6SdFile10addClusterEv+0x44>
    3a62:	1b 82       	std	Y+3, r1	; 0x03
    3a64:	1f c0       	rjmp	.+62     	; 0x3aa4 <_ZN6SdFile10addClusterEv+0x82>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    3a66:	e9 81       	ldd	r30, Y+1	; 0x01
    3a68:	fa 81       	ldd	r31, Y+2	; 0x02
    3a6a:	87 89       	ldd	r24, Z+23	; 0x17
    3a6c:	90 8d       	ldd	r25, Z+24	; 0x18
    3a6e:	a1 8d       	ldd	r26, Z+25	; 0x19
    3a70:	b2 8d       	ldd	r27, Z+26	; 0x1a
    3a72:	00 97       	sbiw	r24, 0x00	; 0
    3a74:	a1 05       	cpc	r26, r1
    3a76:	b1 05       	cpc	r27, r1
    3a78:	99 f4       	brne	.+38     	; 0x3aa0 <_ZN6SdFile10addClusterEv+0x7e>
    firstCluster_ = curCluster_;
    3a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a7e:	86 81       	ldd	r24, Z+6	; 0x06
    3a80:	97 81       	ldd	r25, Z+7	; 0x07
    3a82:	a0 85       	ldd	r26, Z+8	; 0x08
    3a84:	b1 85       	ldd	r27, Z+9	; 0x09
    3a86:	e9 81       	ldd	r30, Y+1	; 0x01
    3a88:	fa 81       	ldd	r31, Y+2	; 0x02
    3a8a:	87 8b       	std	Z+23, r24	; 0x17
    3a8c:	90 8f       	std	Z+24, r25	; 0x18
    3a8e:	a1 8f       	std	Z+25, r26	; 0x19
    3a90:	b2 8f       	std	Z+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
    3a92:	e9 81       	ldd	r30, Y+1	; 0x01
    3a94:	fa 81       	ldd	r31, Y+2	; 0x02
    3a96:	84 81       	ldd	r24, Z+4	; 0x04
    3a98:	80 68       	ori	r24, 0x80	; 128
    3a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a9e:	84 83       	std	Z+4, r24	; 0x04
  }
  return true;
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	8b 83       	std	Y+3, r24	; 0x03
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3aa6:	0f 90       	pop	r0
    3aa8:	0f 90       	pop	r0
    3aaa:	0f 90       	pop	r0
    3aac:	0f 90       	pop	r0
    3aae:	cf 91       	pop	r28
    3ab0:	df 91       	pop	r29
    3ab2:	08 95       	ret

00003ab4 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    3ab4:	df 93       	push	r29
    3ab6:	cf 93       	push	r28
    3ab8:	cd b7       	in	r28, 0x3d	; 61
    3aba:	de b7       	in	r29, 0x3e	; 62
    3abc:	a7 97       	sbiw	r28, 0x27	; 39
    3abe:	0f b6       	in	r0, 0x3f	; 63
    3ac0:	f8 94       	cli
    3ac2:	de bf       	out	0x3e, r29	; 62
    3ac4:	0f be       	out	0x3f, r0	; 63
    3ac6:	cd bf       	out	0x3d, r28	; 61
    3ac8:	9f 8b       	std	Y+23, r25	; 0x17
    3aca:	8e 8b       	std	Y+22, r24	; 0x16
    3acc:	79 8f       	std	Y+25, r23	; 0x19
    3ace:	68 8f       	std	Y+24, r22	; 0x18
    3ad0:	5b 8f       	std	Y+27, r21	; 0x1b
    3ad2:	4a 8f       	std	Y+26, r20	; 0x1a
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
    3ad4:	88 8d       	ldd	r24, Y+24	; 0x18
    3ad6:	99 8d       	ldd	r25, Y+25	; 0x19
    3ad8:	99 8b       	std	Y+17, r25	; 0x11
    3ada:	88 8b       	std	Y+16, r24	; 0x10

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
    3adc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ade:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ae0:	9f 87       	std	Y+15, r25	; 0x0f
    3ae2:	8e 87       	std	Y+14, r24	; 0x0e

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    3ae4:	8e 89       	ldd	r24, Y+22	; 0x16
    3ae6:	9f 89       	ldd	r25, Y+23	; 0x17
    3ae8:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZNK6SdFile6isFileEv>
    3aec:	88 23       	and	r24, r24
    3aee:	49 f0       	breq	.+18     	; 0x3b02 <_ZN6SdFile5writeEPKvj+0x4e>
    3af0:	ee 89       	ldd	r30, Y+22	; 0x16
    3af2:	ff 89       	ldd	r31, Y+23	; 0x17
    3af4:	84 81       	ldd	r24, Z+4	; 0x04
    3af6:	88 2f       	mov	r24, r24
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	82 70       	andi	r24, 0x02	; 2
    3afc:	90 70       	andi	r25, 0x00	; 0
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	19 f4       	brne	.+6      	; 0x3b08 <_ZN6SdFile5writeEPKvj+0x54>
    3b02:	21 e0       	ldi	r18, 0x01	; 1
    3b04:	2e a3       	std	Y+38, r18	; 0x26
    3b06:	01 c0       	rjmp	.+2      	; 0x3b0a <_ZN6SdFile5writeEPKvj+0x56>
    3b08:	1e a2       	std	Y+38, r1	; 0x26
    3b0a:	8e a1       	ldd	r24, Y+38	; 0x26
    3b0c:	88 23       	and	r24, r24
    3b0e:	09 f0       	breq	.+2      	; 0x3b12 <_ZN6SdFile5writeEPKvj+0x5e>
    3b10:	12 c2       	rjmp	.+1060   	; 0x3f36 <_ZN6SdFile5writeEPKvj+0x482>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3b12:	ee 89       	ldd	r30, Y+22	; 0x16
    3b14:	ff 89       	ldd	r31, Y+23	; 0x17
    3b16:	84 81       	ldd	r24, Z+4	; 0x04
    3b18:	88 2f       	mov	r24, r24
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	84 70       	andi	r24, 0x04	; 4
    3b1e:	90 70       	andi	r25, 0x00	; 0
    3b20:	00 97       	sbiw	r24, 0x00	; 0
    3b22:	09 f4       	brne	.+2      	; 0x3b26 <_ZN6SdFile5writeEPKvj+0x72>
    3b24:	b3 c1       	rjmp	.+870    	; 0x3e8c <_ZN6SdFile5writeEPKvj+0x3d8>
    3b26:	ee 89       	ldd	r30, Y+22	; 0x16
    3b28:	ff 89       	ldd	r31, Y+23	; 0x17
    3b2a:	22 85       	ldd	r18, Z+10	; 0x0a
    3b2c:	33 85       	ldd	r19, Z+11	; 0x0b
    3b2e:	44 85       	ldd	r20, Z+12	; 0x0c
    3b30:	55 85       	ldd	r21, Z+13	; 0x0d
    3b32:	ee 89       	ldd	r30, Y+22	; 0x16
    3b34:	ff 89       	ldd	r31, Y+23	; 0x17
    3b36:	83 89       	ldd	r24, Z+19	; 0x13
    3b38:	94 89       	ldd	r25, Z+20	; 0x14
    3b3a:	a5 89       	ldd	r26, Z+21	; 0x15
    3b3c:	b6 89       	ldd	r27, Z+22	; 0x16
    3b3e:	28 17       	cp	r18, r24
    3b40:	39 07       	cpc	r19, r25
    3b42:	4a 07       	cpc	r20, r26
    3b44:	5b 07       	cpc	r21, r27
    3b46:	09 f4       	brne	.+2      	; 0x3b4a <_ZN6SdFile5writeEPKvj+0x96>
    3b48:	a1 c1       	rjmp	.+834    	; 0x3e8c <_ZN6SdFile5writeEPKvj+0x3d8>
    if (!seekEnd()) goto writeErrorReturn;
    3b4a:	8e 89       	ldd	r24, Y+22	; 0x16
    3b4c:	9f 89       	ldd	r25, Y+23	; 0x17
    3b4e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <_ZN6SdFile7seekEndEv>
    3b52:	1d a2       	std	Y+37, r1	; 0x25
    3b54:	88 23       	and	r24, r24
    3b56:	11 f4       	brne	.+4      	; 0x3b5c <_ZN6SdFile5writeEPKvj+0xa8>
    3b58:	41 e0       	ldi	r20, 0x01	; 1
    3b5a:	4d a3       	std	Y+37, r20	; 0x25
    3b5c:	5d a1       	ldd	r21, Y+37	; 0x25
    3b5e:	55 23       	and	r21, r21
    3b60:	09 f0       	breq	.+2      	; 0x3b64 <_ZN6SdFile5writeEPKvj+0xb0>
    3b62:	e9 c1       	rjmp	.+978    	; 0x3f36 <_ZN6SdFile5writeEPKvj+0x482>
    3b64:	93 c1       	rjmp	.+806    	; 0x3e8c <_ZN6SdFile5writeEPKvj+0x3d8>
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    3b66:	ee 89       	ldd	r30, Y+22	; 0x16
    3b68:	ff 89       	ldd	r31, Y+23	; 0x17
    3b6a:	83 8d       	ldd	r24, Z+27	; 0x1b
    3b6c:	94 8d       	ldd	r25, Z+28	; 0x1c
    3b6e:	ee 89       	ldd	r30, Y+22	; 0x16
    3b70:	ff 89       	ldd	r31, Y+23	; 0x17
    3b72:	22 85       	ldd	r18, Z+10	; 0x0a
    3b74:	33 85       	ldd	r19, Z+11	; 0x0b
    3b76:	44 85       	ldd	r20, Z+12	; 0x0c
    3b78:	55 85       	ldd	r21, Z+13	; 0x0d
    3b7a:	ba 01       	movw	r22, r20
    3b7c:	a9 01       	movw	r20, r18
    3b7e:	0e 94 b5 0c 	call	0x196a	; 0x196a <_ZNK8SdVolume14blockOfClusterEm>
    3b82:	8d 87       	std	Y+13, r24	; 0x0d
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3b84:	ee 89       	ldd	r30, Y+22	; 0x16
    3b86:	ff 89       	ldd	r31, Y+23	; 0x17
    3b88:	82 85       	ldd	r24, Z+10	; 0x0a
    3b8a:	93 85       	ldd	r25, Z+11	; 0x0b
    3b8c:	a4 85       	ldd	r26, Z+12	; 0x0c
    3b8e:	b5 85       	ldd	r27, Z+13	; 0x0d
    3b90:	91 70       	andi	r25, 0x01	; 1
    3b92:	9c 87       	std	Y+12, r25	; 0x0c
    3b94:	8b 87       	std	Y+11, r24	; 0x0b
    if (blockOfCluster == 0 && blockOffset == 0) {
    3b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b98:	88 23       	and	r24, r24
    3b9a:	09 f0       	breq	.+2      	; 0x3b9e <_ZN6SdFile5writeEPKvj+0xea>
    3b9c:	7d c0       	rjmp	.+250    	; 0x3c98 <_ZN6SdFile5writeEPKvj+0x1e4>
    3b9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ba0:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	09 f0       	breq	.+2      	; 0x3ba8 <_ZN6SdFile5writeEPKvj+0xf4>
    3ba6:	78 c0       	rjmp	.+240    	; 0x3c98 <_ZN6SdFile5writeEPKvj+0x1e4>
      // start of new cluster
      if (curCluster_ == 0) {
    3ba8:	ee 89       	ldd	r30, Y+22	; 0x16
    3baa:	ff 89       	ldd	r31, Y+23	; 0x17
    3bac:	86 81       	ldd	r24, Z+6	; 0x06
    3bae:	97 81       	ldd	r25, Z+7	; 0x07
    3bb0:	a0 85       	ldd	r26, Z+8	; 0x08
    3bb2:	b1 85       	ldd	r27, Z+9	; 0x09
    3bb4:	00 97       	sbiw	r24, 0x00	; 0
    3bb6:	a1 05       	cpc	r26, r1
    3bb8:	b1 05       	cpc	r27, r1
    3bba:	29 f5       	brne	.+74     	; 0x3c06 <_ZN6SdFile5writeEPKvj+0x152>
        if (firstCluster_ == 0) {
    3bbc:	ee 89       	ldd	r30, Y+22	; 0x16
    3bbe:	ff 89       	ldd	r31, Y+23	; 0x17
    3bc0:	87 89       	ldd	r24, Z+23	; 0x17
    3bc2:	90 8d       	ldd	r25, Z+24	; 0x18
    3bc4:	a1 8d       	ldd	r26, Z+25	; 0x19
    3bc6:	b2 8d       	ldd	r27, Z+26	; 0x1a
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	a1 05       	cpc	r26, r1
    3bcc:	b1 05       	cpc	r27, r1
    3bce:	71 f4       	brne	.+28     	; 0x3bec <_ZN6SdFile5writeEPKvj+0x138>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
    3bd0:	8e 89       	ldd	r24, Y+22	; 0x16
    3bd2:	9f 89       	ldd	r25, Y+23	; 0x17
    3bd4:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <_ZN6SdFile10addClusterEv>
    3bd8:	1c a2       	std	Y+36, r1	; 0x24
    3bda:	88 23       	and	r24, r24
    3bdc:	11 f4       	brne	.+4      	; 0x3be2 <_ZN6SdFile5writeEPKvj+0x12e>
    3bde:	81 e0       	ldi	r24, 0x01	; 1
    3be0:	8c a3       	std	Y+36, r24	; 0x24
    3be2:	9c a1       	ldd	r25, Y+36	; 0x24
    3be4:	99 23       	and	r25, r25
    3be6:	09 f0       	breq	.+2      	; 0x3bea <_ZN6SdFile5writeEPKvj+0x136>
    3be8:	a6 c1       	rjmp	.+844    	; 0x3f36 <_ZN6SdFile5writeEPKvj+0x482>
    3bea:	56 c0       	rjmp	.+172    	; 0x3c98 <_ZN6SdFile5writeEPKvj+0x1e4>
        } else {
          curCluster_ = firstCluster_;
    3bec:	ee 89       	ldd	r30, Y+22	; 0x16
    3bee:	ff 89       	ldd	r31, Y+23	; 0x17
    3bf0:	87 89       	ldd	r24, Z+23	; 0x17
    3bf2:	90 8d       	ldd	r25, Z+24	; 0x18
    3bf4:	a1 8d       	ldd	r26, Z+25	; 0x19
    3bf6:	b2 8d       	ldd	r27, Z+26	; 0x1a
    3bf8:	ee 89       	ldd	r30, Y+22	; 0x16
    3bfa:	ff 89       	ldd	r31, Y+23	; 0x17
    3bfc:	86 83       	std	Z+6, r24	; 0x06
    3bfe:	97 83       	std	Z+7, r25	; 0x07
    3c00:	a0 87       	std	Z+8, r26	; 0x08
    3c02:	b1 87       	std	Z+9, r27	; 0x09
    3c04:	49 c0       	rjmp	.+146    	; 0x3c98 <_ZN6SdFile5writeEPKvj+0x1e4>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    3c06:	ee 89       	ldd	r30, Y+22	; 0x16
    3c08:	ff 89       	ldd	r31, Y+23	; 0x17
    3c0a:	83 8d       	ldd	r24, Z+27	; 0x1b
    3c0c:	94 8d       	ldd	r25, Z+28	; 0x1c
    3c0e:	ee 89       	ldd	r30, Y+22	; 0x16
    3c10:	ff 89       	ldd	r31, Y+23	; 0x17
    3c12:	26 81       	ldd	r18, Z+6	; 0x06
    3c14:	37 81       	ldd	r19, Z+7	; 0x07
    3c16:	40 85       	ldd	r20, Z+8	; 0x08
    3c18:	51 85       	ldd	r21, Z+9	; 0x09
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	72 96       	adiw	r30, 0x12	; 18
    3c1e:	ba 01       	movw	r22, r20
    3c20:	a9 01       	movw	r20, r18
    3c22:	9f 01       	movw	r18, r30
    3c24:	0e 94 0d 28 	call	0x501a	; 0x501a <_ZNK8SdVolume6fatGetEmPm>
    3c28:	1b a2       	std	Y+35, r1	; 0x23
    3c2a:	88 23       	and	r24, r24
    3c2c:	11 f4       	brne	.+4      	; 0x3c32 <_ZN6SdFile5writeEPKvj+0x17e>
    3c2e:	21 e0       	ldi	r18, 0x01	; 1
    3c30:	2b a3       	std	Y+35, r18	; 0x23
    3c32:	4b a1       	ldd	r20, Y+35	; 0x23
    3c34:	44 23       	and	r20, r20
    3c36:	19 f0       	breq	.+6      	; 0x3c3e <_ZN6SdFile5writeEPKvj+0x18a>
    3c38:	1a a2       	std	Y+34, r1	; 0x22
    3c3a:	19 a2       	std	Y+33, r1	; 0x21
    3c3c:	84 c1       	rjmp	.+776    	; 0x3f46 <_ZN6SdFile5writeEPKvj+0x492>
        if (vol_->isEOC(next)) {
    3c3e:	ee 89       	ldd	r30, Y+22	; 0x16
    3c40:	ff 89       	ldd	r31, Y+23	; 0x17
    3c42:	83 8d       	ldd	r24, Z+27	; 0x1b
    3c44:	94 8d       	ldd	r25, Z+28	; 0x1c
    3c46:	2a 89       	ldd	r18, Y+18	; 0x12
    3c48:	3b 89       	ldd	r19, Y+19	; 0x13
    3c4a:	4c 89       	ldd	r20, Y+20	; 0x14
    3c4c:	5d 89       	ldd	r21, Y+21	; 0x15
    3c4e:	ba 01       	movw	r22, r20
    3c50:	a9 01       	movw	r20, r18
    3c52:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZNK8SdVolume5isEOCEm>
    3c56:	8f a3       	std	Y+39, r24	; 0x27
    3c58:	5f a1       	ldd	r21, Y+39	; 0x27
    3c5a:	55 23       	and	r21, r21
    3c5c:	11 f0       	breq	.+4      	; 0x3c62 <_ZN6SdFile5writeEPKvj+0x1ae>
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	8f a3       	std	Y+39, r24	; 0x27
    3c62:	8f a1       	ldd	r24, Y+39	; 0x27
    3c64:	88 23       	and	r24, r24
    3c66:	71 f0       	breq	.+28     	; 0x3c84 <_ZN6SdFile5writeEPKvj+0x1d0>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    3c68:	8e 89       	ldd	r24, Y+22	; 0x16
    3c6a:	9f 89       	ldd	r25, Y+23	; 0x17
    3c6c:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <_ZN6SdFile10addClusterEv>
    3c70:	18 a2       	std	Y+32, r1	; 0x20
    3c72:	88 23       	and	r24, r24
    3c74:	11 f4       	brne	.+4      	; 0x3c7a <_ZN6SdFile5writeEPKvj+0x1c6>
    3c76:	91 e0       	ldi	r25, 0x01	; 1
    3c78:	98 a3       	std	Y+32, r25	; 0x20
    3c7a:	28 a1       	ldd	r18, Y+32	; 0x20
    3c7c:	22 23       	and	r18, r18
    3c7e:	09 f0       	breq	.+2      	; 0x3c82 <_ZN6SdFile5writeEPKvj+0x1ce>
    3c80:	5a c1       	rjmp	.+692    	; 0x3f36 <_ZN6SdFile5writeEPKvj+0x482>
    3c82:	0a c0       	rjmp	.+20     	; 0x3c98 <_ZN6SdFile5writeEPKvj+0x1e4>
        } else {
          curCluster_ = next;
    3c84:	8a 89       	ldd	r24, Y+18	; 0x12
    3c86:	9b 89       	ldd	r25, Y+19	; 0x13
    3c88:	ac 89       	ldd	r26, Y+20	; 0x14
    3c8a:	bd 89       	ldd	r27, Y+21	; 0x15
    3c8c:	ee 89       	ldd	r30, Y+22	; 0x16
    3c8e:	ff 89       	ldd	r31, Y+23	; 0x17
    3c90:	86 83       	std	Z+6, r24	; 0x06
    3c92:	97 83       	std	Z+7, r25	; 0x07
    3c94:	a0 87       	std	Z+8, r26	; 0x08
    3c96:	b1 87       	std	Z+9, r27	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	32 e0       	ldi	r19, 0x02	; 2
    3c9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ca0:	a9 01       	movw	r20, r18
    3ca2:	48 1b       	sub	r20, r24
    3ca4:	59 0b       	sbc	r21, r25
    3ca6:	ca 01       	movw	r24, r20
    3ca8:	9a 87       	std	Y+10, r25	; 0x0a
    3caa:	89 87       	std	Y+9, r24	; 0x09

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    3cac:	29 85       	ldd	r18, Y+9	; 0x09
    3cae:	3a 85       	ldd	r19, Y+10	; 0x0a
    3cb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cb4:	82 17       	cp	r24, r18
    3cb6:	93 07       	cpc	r25, r19
    3cb8:	20 f4       	brcc	.+8      	; 0x3cc2 <_ZN6SdFile5writeEPKvj+0x20e>
    3cba:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cbc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cbe:	9a 87       	std	Y+10, r25	; 0x0a
    3cc0:	89 87       	std	Y+9, r24	; 0x09

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3cc2:	ee 89       	ldd	r30, Y+22	; 0x16
    3cc4:	ff 89       	ldd	r31, Y+23	; 0x17
    3cc6:	83 8d       	ldd	r24, Z+27	; 0x1b
    3cc8:	94 8d       	ldd	r25, Z+28	; 0x1c
    3cca:	ee 89       	ldd	r30, Y+22	; 0x16
    3ccc:	ff 89       	ldd	r31, Y+23	; 0x17
    3cce:	26 81       	ldd	r18, Z+6	; 0x06
    3cd0:	37 81       	ldd	r19, Z+7	; 0x07
    3cd2:	40 85       	ldd	r20, Z+8	; 0x08
    3cd4:	51 85       	ldd	r21, Z+9	; 0x09
    3cd6:	ba 01       	movw	r22, r20
    3cd8:	a9 01       	movw	r20, r18
    3cda:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZNK8SdVolume17clusterStartBlockEm>
    3cde:	9b 01       	movw	r18, r22
    3ce0:	ac 01       	movw	r20, r24
    3ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ce4:	88 2f       	mov	r24, r24
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	a0 e0       	ldi	r26, 0x00	; 0
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	82 0f       	add	r24, r18
    3cee:	93 1f       	adc	r25, r19
    3cf0:	a4 1f       	adc	r26, r20
    3cf2:	b5 1f       	adc	r27, r21
    3cf4:	8d 83       	std	Y+5, r24	; 0x05
    3cf6:	9e 83       	std	Y+6, r25	; 0x06
    3cf8:	af 83       	std	Y+7, r26	; 0x07
    3cfa:	b8 87       	std	Y+8, r27	; 0x08
    if (n == 512) {
    3cfc:	89 85       	ldd	r24, Y+9	; 0x09
    3cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d00:	52 e0       	ldi	r21, 0x02	; 2
    3d02:	80 30       	cpi	r24, 0x00	; 0
    3d04:	95 07       	cpc	r25, r21
    3d06:	e1 f5       	brne	.+120    	; 0x3d80 <_ZN6SdFile5writeEPKvj+0x2cc>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    3d08:	20 91 68 00 	lds	r18, 0x0068
    3d0c:	30 91 69 00 	lds	r19, 0x0069
    3d10:	40 91 6a 00 	lds	r20, 0x006A
    3d14:	50 91 6b 00 	lds	r21, 0x006B
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1c:	af 81       	ldd	r26, Y+7	; 0x07
    3d1e:	b8 85       	ldd	r27, Y+8	; 0x08
    3d20:	28 17       	cp	r18, r24
    3d22:	39 07       	cpc	r19, r25
    3d24:	4a 07       	cpc	r20, r26
    3d26:	5b 07       	cpc	r21, r27
    3d28:	61 f4       	brne	.+24     	; 0x3d42 <_ZN6SdFile5writeEPKvj+0x28e>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    3d2a:	8f ef       	ldi	r24, 0xFF	; 255
    3d2c:	9f ef       	ldi	r25, 0xFF	; 255
    3d2e:	af ef       	ldi	r26, 0xFF	; 255
    3d30:	bf ef       	ldi	r27, 0xFF	; 255
    3d32:	80 93 68 00 	sts	0x0068, r24
    3d36:	90 93 69 00 	sts	0x0069, r25
    3d3a:	a0 93 6a 00 	sts	0x006A, r26
    3d3e:	b0 93 6b 00 	sts	0x006B, r27
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    3d42:	ee 89       	ldd	r30, Y+22	; 0x16
    3d44:	ff 89       	ldd	r31, Y+23	; 0x17
    3d46:	83 8d       	ldd	r24, Z+27	; 0x1b
    3d48:	94 8d       	ldd	r25, Z+28	; 0x1c
    3d4a:	2d 81       	ldd	r18, Y+5	; 0x05
    3d4c:	3e 81       	ldd	r19, Y+6	; 0x06
    3d4e:	4f 81       	ldd	r20, Y+7	; 0x07
    3d50:	58 85       	ldd	r21, Y+8	; 0x08
    3d52:	e8 89       	ldd	r30, Y+16	; 0x10
    3d54:	f9 89       	ldd	r31, Y+17	; 0x11
    3d56:	ba 01       	movw	r22, r20
    3d58:	a9 01       	movw	r20, r18
    3d5a:	9f 01       	movw	r18, r30
    3d5c:	0e 94 71 12 	call	0x24e2	; 0x24e2 <_ZN8SdVolume10writeBlockEmPKh>
    3d60:	1f 8e       	std	Y+31, r1	; 0x1f
    3d62:	88 23       	and	r24, r24
    3d64:	11 f4       	brne	.+4      	; 0x3d6a <_ZN6SdFile5writeEPKvj+0x2b6>
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	8f 8f       	std	Y+31, r24	; 0x1f
    3d6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d6c:	99 23       	and	r25, r25
    3d6e:	09 f0       	breq	.+2      	; 0x3d72 <_ZN6SdFile5writeEPKvj+0x2be>
    3d70:	e2 c0       	rjmp	.+452    	; 0x3f36 <_ZN6SdFile5writeEPKvj+0x482>
      src += 512;
    3d72:	88 89       	ldd	r24, Y+16	; 0x10
    3d74:	99 89       	ldd	r25, Y+17	; 0x11
    3d76:	80 50       	subi	r24, 0x00	; 0
    3d78:	9e 4f       	sbci	r25, 0xFE	; 254
    3d7a:	99 8b       	std	Y+17, r25	; 0x11
    3d7c:	88 8b       	std	Y+16, r24	; 0x10
    3d7e:	67 c0       	rjmp	.+206    	; 0x3e4e <_ZN6SdFile5writeEPKvj+0x39a>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3d80:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d82:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	59 f5       	brne	.+86     	; 0x3dde <_ZN6SdFile5writeEPKvj+0x32a>
    3d88:	ee 89       	ldd	r30, Y+22	; 0x16
    3d8a:	ff 89       	ldd	r31, Y+23	; 0x17
    3d8c:	22 85       	ldd	r18, Z+10	; 0x0a
    3d8e:	33 85       	ldd	r19, Z+11	; 0x0b
    3d90:	44 85       	ldd	r20, Z+12	; 0x0c
    3d92:	55 85       	ldd	r21, Z+13	; 0x0d
    3d94:	ee 89       	ldd	r30, Y+22	; 0x16
    3d96:	ff 89       	ldd	r31, Y+23	; 0x17
    3d98:	83 89       	ldd	r24, Z+19	; 0x13
    3d9a:	94 89       	ldd	r25, Z+20	; 0x14
    3d9c:	a5 89       	ldd	r26, Z+21	; 0x15
    3d9e:	b6 89       	ldd	r27, Z+22	; 0x16
    3da0:	28 17       	cp	r18, r24
    3da2:	39 07       	cpc	r19, r25
    3da4:	4a 07       	cpc	r20, r26
    3da6:	5b 07       	cpc	r21, r27
    3da8:	d0 f0       	brcs	.+52     	; 0x3dde <_ZN6SdFile5writeEPKvj+0x32a>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    3daa:	0e 94 d7 23 	call	0x47ae	; 0x47ae <_ZN8SdVolume10cacheFlushEv>
    3dae:	1e 8e       	std	Y+30, r1	; 0x1e
    3db0:	88 23       	and	r24, r24
    3db2:	11 f4       	brne	.+4      	; 0x3db8 <_ZN6SdFile5writeEPKvj+0x304>
    3db4:	21 e0       	ldi	r18, 0x01	; 1
    3db6:	2e 8f       	std	Y+30, r18	; 0x1e
    3db8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3dba:	44 23       	and	r20, r20
    3dbc:	09 f0       	breq	.+2      	; 0x3dc0 <_ZN6SdFile5writeEPKvj+0x30c>
    3dbe:	bb c0       	rjmp	.+374    	; 0x3f36 <_ZN6SdFile5writeEPKvj+0x482>
        SdVolume::cacheBlockNumber_ = block;
    3dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc4:	af 81       	ldd	r26, Y+7	; 0x07
    3dc6:	b8 85       	ldd	r27, Y+8	; 0x08
    3dc8:	80 93 68 00 	sts	0x0068, r24
    3dcc:	90 93 69 00 	sts	0x0069, r25
    3dd0:	a0 93 6a 00 	sts	0x006A, r26
    3dd4:	b0 93 6b 00 	sts	0x006B, r27
        SdVolume::cacheSetDirty();
    3dd8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN8SdVolume13cacheSetDirtyEv>
    3ddc:	12 c0       	rjmp	.+36     	; 0x3e02 <_ZN6SdFile5writeEPKvj+0x34e>
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3dde:	8d 81       	ldd	r24, Y+5	; 0x05
    3de0:	9e 81       	ldd	r25, Y+6	; 0x06
    3de2:	af 81       	ldd	r26, Y+7	; 0x07
    3de4:	b8 85       	ldd	r27, Y+8	; 0x08
    3de6:	bc 01       	movw	r22, r24
    3de8:	cd 01       	movw	r24, r26
    3dea:	41 e0       	ldi	r20, 0x01	; 1
    3dec:	0e 94 83 24 	call	0x4906	; 0x4906 <_ZN8SdVolume13cacheRawBlockEmh>
    3df0:	1d 8e       	std	Y+29, r1	; 0x1d
    3df2:	88 23       	and	r24, r24
    3df4:	11 f4       	brne	.+4      	; 0x3dfa <_ZN6SdFile5writeEPKvj+0x346>
    3df6:	51 e0       	ldi	r21, 0x01	; 1
    3df8:	5d 8f       	std	Y+29, r21	; 0x1d
    3dfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3dfc:	88 23       	and	r24, r24
    3dfe:	09 f0       	breq	.+2      	; 0x3e02 <_ZN6SdFile5writeEPKvj+0x34e>
    3e00:	9a c0       	rjmp	.+308    	; 0x3f36 <_ZN6SdFile5writeEPKvj+0x482>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3e02:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e04:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e06:	8c 5b       	subi	r24, 0xBC	; 188
    3e08:	9c 4f       	sbci	r25, 0xFC	; 252
    3e0a:	9c 83       	std	Y+4, r25	; 0x04
    3e0c:	8b 83       	std	Y+3, r24	; 0x03
      uint8_t* end = dst + n;
    3e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    3e10:	3c 81       	ldd	r19, Y+4	; 0x04
    3e12:	89 85       	ldd	r24, Y+9	; 0x09
    3e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e16:	82 0f       	add	r24, r18
    3e18:	93 1f       	adc	r25, r19
    3e1a:	9a 83       	std	Y+2, r25	; 0x02
    3e1c:	89 83       	std	Y+1, r24	; 0x01
    3e1e:	10 c0       	rjmp	.+32     	; 0x3e40 <_ZN6SdFile5writeEPKvj+0x38c>
      while (dst != end) *dst++ = *src++;
    3e20:	e8 89       	ldd	r30, Y+16	; 0x10
    3e22:	f9 89       	ldd	r31, Y+17	; 0x11
    3e24:	80 81       	ld	r24, Z
    3e26:	eb 81       	ldd	r30, Y+3	; 0x03
    3e28:	fc 81       	ldd	r31, Y+4	; 0x04
    3e2a:	80 83       	st	Z, r24
    3e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e30:	01 96       	adiw	r24, 0x01	; 1
    3e32:	9c 83       	std	Y+4, r25	; 0x04
    3e34:	8b 83       	std	Y+3, r24	; 0x03
    3e36:	88 89       	ldd	r24, Y+16	; 0x10
    3e38:	99 89       	ldd	r25, Y+17	; 0x11
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	99 8b       	std	Y+17, r25	; 0x11
    3e3e:	88 8b       	std	Y+16, r24	; 0x10
    3e40:	2b 81       	ldd	r18, Y+3	; 0x03
    3e42:	3c 81       	ldd	r19, Y+4	; 0x04
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	9a 81       	ldd	r25, Y+2	; 0x02
    3e48:	28 17       	cp	r18, r24
    3e4a:	39 07       	cpc	r19, r25
    3e4c:	49 f7       	brne	.-46     	; 0x3e20 <_ZN6SdFile5writeEPKvj+0x36c>
    }
    nToWrite -= n;
    3e4e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3e50:	3f 85       	ldd	r19, Y+15	; 0x0f
    3e52:	89 85       	ldd	r24, Y+9	; 0x09
    3e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e56:	a9 01       	movw	r20, r18
    3e58:	48 1b       	sub	r20, r24
    3e5a:	59 0b       	sbc	r21, r25
    3e5c:	ca 01       	movw	r24, r20
    3e5e:	9f 87       	std	Y+15, r25	; 0x0f
    3e60:	8e 87       	std	Y+14, r24	; 0x0e
    curPosition_ += n;
    3e62:	ee 89       	ldd	r30, Y+22	; 0x16
    3e64:	ff 89       	ldd	r31, Y+23	; 0x17
    3e66:	22 85       	ldd	r18, Z+10	; 0x0a
    3e68:	33 85       	ldd	r19, Z+11	; 0x0b
    3e6a:	44 85       	ldd	r20, Z+12	; 0x0c
    3e6c:	55 85       	ldd	r21, Z+13	; 0x0d
    3e6e:	89 85       	ldd	r24, Y+9	; 0x09
    3e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e72:	cc 01       	movw	r24, r24
    3e74:	a0 e0       	ldi	r26, 0x00	; 0
    3e76:	b0 e0       	ldi	r27, 0x00	; 0
    3e78:	82 0f       	add	r24, r18
    3e7a:	93 1f       	adc	r25, r19
    3e7c:	a4 1f       	adc	r26, r20
    3e7e:	b5 1f       	adc	r27, r21
    3e80:	ee 89       	ldd	r30, Y+22	; 0x16
    3e82:	ff 89       	ldd	r31, Y+23	; 0x17
    3e84:	82 87       	std	Z+10, r24	; 0x0a
    3e86:	93 87       	std	Z+11, r25	; 0x0b
    3e88:	a4 87       	std	Z+12, r26	; 0x0c
    3e8a:	b5 87       	std	Z+13, r27	; 0x0d
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    3e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e90:	00 97       	sbiw	r24, 0x00	; 0
    3e92:	09 f0       	breq	.+2      	; 0x3e96 <_ZN6SdFile5writeEPKvj+0x3e2>
    3e94:	68 ce       	rjmp	.-816    	; 0x3b66 <_ZN6SdFile5writeEPKvj+0xb2>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3e96:	ee 89       	ldd	r30, Y+22	; 0x16
    3e98:	ff 89       	ldd	r31, Y+23	; 0x17
    3e9a:	22 85       	ldd	r18, Z+10	; 0x0a
    3e9c:	33 85       	ldd	r19, Z+11	; 0x0b
    3e9e:	44 85       	ldd	r20, Z+12	; 0x0c
    3ea0:	55 85       	ldd	r21, Z+13	; 0x0d
    3ea2:	ee 89       	ldd	r30, Y+22	; 0x16
    3ea4:	ff 89       	ldd	r31, Y+23	; 0x17
    3ea6:	83 89       	ldd	r24, Z+19	; 0x13
    3ea8:	94 89       	ldd	r25, Z+20	; 0x14
    3eaa:	a5 89       	ldd	r26, Z+21	; 0x15
    3eac:	b6 89       	ldd	r27, Z+22	; 0x16
    3eae:	82 17       	cp	r24, r18
    3eb0:	93 07       	cpc	r25, r19
    3eb2:	a4 07       	cpc	r26, r20
    3eb4:	b5 07       	cpc	r27, r21
    3eb6:	a0 f4       	brcc	.+40     	; 0x3ee0 <_ZN6SdFile5writeEPKvj+0x42c>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    3eb8:	ee 89       	ldd	r30, Y+22	; 0x16
    3eba:	ff 89       	ldd	r31, Y+23	; 0x17
    3ebc:	82 85       	ldd	r24, Z+10	; 0x0a
    3ebe:	93 85       	ldd	r25, Z+11	; 0x0b
    3ec0:	a4 85       	ldd	r26, Z+12	; 0x0c
    3ec2:	b5 85       	ldd	r27, Z+13	; 0x0d
    3ec4:	ee 89       	ldd	r30, Y+22	; 0x16
    3ec6:	ff 89       	ldd	r31, Y+23	; 0x17
    3ec8:	83 8b       	std	Z+19, r24	; 0x13
    3eca:	94 8b       	std	Z+20, r25	; 0x14
    3ecc:	a5 8b       	std	Z+21, r26	; 0x15
    3ece:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    3ed0:	ee 89       	ldd	r30, Y+22	; 0x16
    3ed2:	ff 89       	ldd	r31, Y+23	; 0x17
    3ed4:	84 81       	ldd	r24, Z+4	; 0x04
    3ed6:	80 68       	ori	r24, 0x80	; 128
    3ed8:	ee 89       	ldd	r30, Y+22	; 0x16
    3eda:	ff 89       	ldd	r31, Y+23	; 0x17
    3edc:	84 83       	std	Z+4, r24	; 0x04
    3ede:	11 c0       	rjmp	.+34     	; 0x3f02 <_ZN6SdFile5writeEPKvj+0x44e>
  } else if (dateTime_ && nbyte) {
    3ee0:	80 91 40 03 	lds	r24, 0x0340
    3ee4:	90 91 41 03 	lds	r25, 0x0341
    3ee8:	00 97       	sbiw	r24, 0x00	; 0
    3eea:	59 f0       	breq	.+22     	; 0x3f02 <_ZN6SdFile5writeEPKvj+0x44e>
    3eec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3eee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ef0:	00 97       	sbiw	r24, 0x00	; 0
    3ef2:	39 f0       	breq	.+14     	; 0x3f02 <_ZN6SdFile5writeEPKvj+0x44e>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    3ef4:	ee 89       	ldd	r30, Y+22	; 0x16
    3ef6:	ff 89       	ldd	r31, Y+23	; 0x17
    3ef8:	84 81       	ldd	r24, Z+4	; 0x04
    3efa:	80 68       	ori	r24, 0x80	; 128
    3efc:	ee 89       	ldd	r30, Y+22	; 0x16
    3efe:	ff 89       	ldd	r31, Y+23	; 0x17
    3f00:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    3f02:	ee 89       	ldd	r30, Y+22	; 0x16
    3f04:	ff 89       	ldd	r31, Y+23	; 0x17
    3f06:	84 81       	ldd	r24, Z+4	; 0x04
    3f08:	88 2f       	mov	r24, r24
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	88 70       	andi	r24, 0x08	; 8
    3f0e:	90 70       	andi	r25, 0x00	; 0
    3f10:	00 97       	sbiw	r24, 0x00	; 0
    3f12:	61 f0       	breq	.+24     	; 0x3f2c <_ZN6SdFile5writeEPKvj+0x478>
    if (!sync()) goto writeErrorReturn;
    3f14:	8e 89       	ldd	r24, Y+22	; 0x16
    3f16:	9f 89       	ldd	r25, Y+23	; 0x17
    3f18:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN6SdFile4syncEv>
    3f1c:	1c 8e       	std	Y+28, r1	; 0x1c
    3f1e:	88 23       	and	r24, r24
    3f20:	11 f4       	brne	.+4      	; 0x3f26 <_ZN6SdFile5writeEPKvj+0x472>
    3f22:	51 e0       	ldi	r21, 0x01	; 1
    3f24:	5c 8f       	std	Y+28, r21	; 0x1c
    3f26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f28:	88 23       	and	r24, r24
    3f2a:	29 f4       	brne	.+10     	; 0x3f36 <_ZN6SdFile5writeEPKvj+0x482>
  }
  return nbyte;
    3f2c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3f2e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3f30:	5a a3       	std	Y+34, r21	; 0x22
    3f32:	49 a3       	std	Y+33, r20	; 0x21
    3f34:	08 c0       	rjmp	.+16     	; 0x3f46 <_ZN6SdFile5writeEPKvj+0x492>

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
    3f36:	8e 89       	ldd	r24, Y+22	; 0x16
    3f38:	9f 89       	ldd	r25, Y+23	; 0x17
    3f3a:	61 e0       	ldi	r22, 0x01	; 1
    3f3c:	70 e0       	ldi	r23, 0x00	; 0
    3f3e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN5Print13setWriteErrorEi>
  return 0;
    3f42:	1a a2       	std	Y+34, r1	; 0x22
    3f44:	19 a2       	std	Y+33, r1	; 0x21
    3f46:	89 a1       	ldd	r24, Y+33	; 0x21
    3f48:	9a a1       	ldd	r25, Y+34	; 0x22
}
    3f4a:	a7 96       	adiw	r28, 0x27	; 39
    3f4c:	0f b6       	in	r0, 0x3f	; 63
    3f4e:	f8 94       	cli
    3f50:	de bf       	out	0x3e, r29	; 62
    3f52:	0f be       	out	0x3f, r0	; 63
    3f54:	cd bf       	out	0x3d, r28	; 61
    3f56:	cf 91       	pop	r28
    3f58:	df 91       	pop	r29
    3f5a:	08 95       	ret

00003f5c <_ZN6SdFile5writeEPKc>:
/**
 * Write a string to a file. Used by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(const char* str) {
    3f5c:	df 93       	push	r29
    3f5e:	cf 93       	push	r28
    3f60:	00 d0       	rcall	.+0      	; 0x3f62 <_ZN6SdFile5writeEPKc+0x6>
    3f62:	00 d0       	rcall	.+0      	; 0x3f64 <_ZN6SdFile5writeEPKc+0x8>
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	9a 83       	std	Y+2, r25	; 0x02
    3f6a:	89 83       	std	Y+1, r24	; 0x01
    3f6c:	7c 83       	std	Y+4, r23	; 0x04
    3f6e:	6b 83       	std	Y+3, r22	; 0x03
  return write(str, strlen(str));
    3f70:	8b 81       	ldd	r24, Y+3	; 0x03
    3f72:	9c 81       	ldd	r25, Y+4	; 0x04
    3f74:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    3f78:	ac 01       	movw	r20, r24
    3f7a:	89 81       	ldd	r24, Y+1	; 0x01
    3f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f7e:	2b 81       	ldd	r18, Y+3	; 0x03
    3f80:	3c 81       	ldd	r19, Y+4	; 0x04
    3f82:	b9 01       	movw	r22, r18
    3f84:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN6SdFile5writeEPKvj>
}
    3f88:	0f 90       	pop	r0
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	cf 91       	pop	r28
    3f92:	df 91       	pop	r29
    3f94:	08 95       	ret

00003f96 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	00 d0       	rcall	.+0      	; 0x3f9c <_ZN6SdFile5writeEh+0x6>
    3f9c:	0f 92       	push	r0
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
    3fa2:	9a 83       	std	Y+2, r25	; 0x02
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    3fa6:	6b 83       	std	Y+3, r22	; 0x03
  return write(&b, 1);
    3fa8:	89 81       	ldd	r24, Y+1	; 0x01
    3faa:	9a 81       	ldd	r25, Y+2	; 0x02
    3fac:	9e 01       	movw	r18, r28
    3fae:	2d 5f       	subi	r18, 0xFD	; 253
    3fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3fb2:	b9 01       	movw	r22, r18
    3fb4:	41 e0       	ldi	r20, 0x01	; 1
    3fb6:	50 e0       	ldi	r21, 0x00	; 0
    3fb8:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN6SdFile5writeEPKvj>
}
    3fbc:	0f 90       	pop	r0
    3fbe:	0f 90       	pop	r0
    3fc0:	0f 90       	pop	r0
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <_ZN6SdFile13addDirClusterEv>:
  return true;
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
    3fd0:	2a 97       	sbiw	r28, 0x0a	; 10
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	9f 83       	std	Y+7, r25	; 0x07
    3fde:	8e 83       	std	Y+6, r24	; 0x06
  if (!addCluster()) return false;
    3fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    3fe2:	9f 81       	ldd	r25, Y+7	; 0x07
    3fe4:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <_ZN6SdFile10addClusterEv>
    3fe8:	1a 86       	std	Y+10, r1	; 0x0a
    3fea:	88 23       	and	r24, r24
    3fec:	11 f4       	brne	.+4      	; 0x3ff2 <_ZN6SdFile13addDirClusterEv+0x2a>
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	8a 87       	std	Y+10, r24	; 0x0a
    3ff2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ff4:	88 23       	and	r24, r24
    3ff6:	11 f0       	breq	.+4      	; 0x3ffc <_ZN6SdFile13addDirClusterEv+0x34>
    3ff8:	19 86       	std	Y+9, r1	; 0x09
    3ffa:	66 c0       	rjmp	.+204    	; 0x40c8 <_ZN6SdFile13addDirClusterEv+0x100>

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    3ffc:	ee 81       	ldd	r30, Y+6	; 0x06
    3ffe:	ff 81       	ldd	r31, Y+7	; 0x07
    4000:	83 8d       	ldd	r24, Z+27	; 0x1b
    4002:	94 8d       	ldd	r25, Z+28	; 0x1c
    4004:	ee 81       	ldd	r30, Y+6	; 0x06
    4006:	ff 81       	ldd	r31, Y+7	; 0x07
    4008:	26 81       	ldd	r18, Z+6	; 0x06
    400a:	37 81       	ldd	r19, Z+7	; 0x07
    400c:	40 85       	ldd	r20, Z+8	; 0x08
    400e:	51 85       	ldd	r21, Z+9	; 0x09
    4010:	ba 01       	movw	r22, r20
    4012:	a9 01       	movw	r20, r18
    4014:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZNK8SdVolume17clusterStartBlockEm>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	8a 83       	std	Y+2, r24	; 0x02
    401e:	9b 83       	std	Y+3, r25	; 0x03
    4020:	ac 83       	std	Y+4, r26	; 0x04
    4022:	bd 83       	std	Y+5, r27	; 0x05
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    4024:	ee 81       	ldd	r30, Y+6	; 0x06
    4026:	ff 81       	ldd	r31, Y+7	; 0x07
    4028:	03 8c       	ldd	r0, Z+27	; 0x1b
    402a:	f4 8d       	ldd	r31, Z+28	; 0x1c
    402c:	e0 2d       	mov	r30, r0
    402e:	84 81       	ldd	r24, Z+4	; 0x04
    4030:	89 83       	std	Y+1, r24	; 0x01
    4032:	21 c0       	rjmp	.+66     	; 0x4076 <_ZN6SdFile13addDirClusterEv+0xae>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    4034:	89 81       	ldd	r24, Y+1	; 0x01
    4036:	28 2f       	mov	r18, r24
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	40 e0       	ldi	r20, 0x00	; 0
    403c:	50 e0       	ldi	r21, 0x00	; 0
    403e:	8a 81       	ldd	r24, Y+2	; 0x02
    4040:	9b 81       	ldd	r25, Y+3	; 0x03
    4042:	ac 81       	ldd	r26, Y+4	; 0x04
    4044:	bd 81       	ldd	r27, Y+5	; 0x05
    4046:	82 0f       	add	r24, r18
    4048:	93 1f       	adc	r25, r19
    404a:	a4 1f       	adc	r26, r20
    404c:	b5 1f       	adc	r27, r21
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	a1 09       	sbc	r26, r1
    4052:	b1 09       	sbc	r27, r1
    4054:	bc 01       	movw	r22, r24
    4056:	cd 01       	movw	r24, r26
    4058:	0e 94 3b 24 	call	0x4876	; 0x4876 <_ZN8SdVolume14cacheZeroBlockEm>
    405c:	18 86       	std	Y+8, r1	; 0x08
    405e:	88 23       	and	r24, r24
    4060:	11 f4       	brne	.+4      	; 0x4066 <_ZN6SdFile13addDirClusterEv+0x9e>
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	88 87       	std	Y+8, r24	; 0x08
    4066:	88 85       	ldd	r24, Y+8	; 0x08
    4068:	88 23       	and	r24, r24
    406a:	11 f0       	breq	.+4      	; 0x4070 <_ZN6SdFile13addDirClusterEv+0xa8>
    406c:	19 86       	std	Y+9, r1	; 0x09
    406e:	2c c0       	rjmp	.+88     	; 0x40c8 <_ZN6SdFile13addDirClusterEv+0x100>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	81 50       	subi	r24, 0x01	; 1
    4074:	89 83       	std	Y+1, r24	; 0x01
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	88 23       	and	r24, r24
    407a:	e1 f6       	brne	.-72     	; 0x4034 <_ZN6SdFile13addDirClusterEv+0x6c>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    407c:	ee 81       	ldd	r30, Y+6	; 0x06
    407e:	ff 81       	ldd	r31, Y+7	; 0x07
    4080:	43 89       	ldd	r20, Z+19	; 0x13
    4082:	54 89       	ldd	r21, Z+20	; 0x14
    4084:	65 89       	ldd	r22, Z+21	; 0x15
    4086:	76 89       	ldd	r23, Z+22	; 0x16
    4088:	ee 81       	ldd	r30, Y+6	; 0x06
    408a:	ff 81       	ldd	r31, Y+7	; 0x07
    408c:	03 8c       	ldd	r0, Z+27	; 0x1b
    408e:	f4 8d       	ldd	r31, Z+28	; 0x1c
    4090:	e0 2d       	mov	r30, r0
    4092:	85 85       	ldd	r24, Z+13	; 0x0d
    4094:	28 2f       	mov	r18, r24
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	92 e0       	ldi	r25, 0x02	; 2
    409c:	a0 e0       	ldi	r26, 0x00	; 0
    409e:	b0 e0       	ldi	r27, 0x00	; 0
    40a0:	02 2e       	mov	r0, r18
    40a2:	04 c0       	rjmp	.+8      	; 0x40ac <_ZN6SdFile13addDirClusterEv+0xe4>
    40a4:	88 0f       	add	r24, r24
    40a6:	99 1f       	adc	r25, r25
    40a8:	aa 1f       	adc	r26, r26
    40aa:	bb 1f       	adc	r27, r27
    40ac:	0a 94       	dec	r0
    40ae:	d2 f7       	brpl	.-12     	; 0x40a4 <_ZN6SdFile13addDirClusterEv+0xdc>
    40b0:	84 0f       	add	r24, r20
    40b2:	95 1f       	adc	r25, r21
    40b4:	a6 1f       	adc	r26, r22
    40b6:	b7 1f       	adc	r27, r23
    40b8:	ee 81       	ldd	r30, Y+6	; 0x06
    40ba:	ff 81       	ldd	r31, Y+7	; 0x07
    40bc:	83 8b       	std	Z+19, r24	; 0x13
    40be:	94 8b       	std	Z+20, r25	; 0x14
    40c0:	a5 8b       	std	Z+21, r26	; 0x15
    40c2:	b6 8b       	std	Z+22, r27	; 0x16
  return true;
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	89 87       	std	Y+9, r24	; 0x09
    40c8:	89 85       	ldd	r24, Y+9	; 0x09
}
    40ca:	2a 96       	adiw	r28, 0x0a	; 10
    40cc:	0f b6       	in	r0, 0x3f	; 63
    40ce:	f8 94       	cli
    40d0:	de bf       	out	0x3e, r29	; 62
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	cd bf       	out	0x3d, r28	; 61
    40d6:	cf 91       	pop	r28
    40d8:	df 91       	pop	r29
    40da:	08 95       	ret

000040dc <_ZN6SdFile4openEPS_PKch>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    40dc:	df 93       	push	r29
    40de:	cf 93       	push	r28
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	6b 97       	sbiw	r28, 0x1b	; 27
    40e6:	0f b6       	in	r0, 0x3f	; 63
    40e8:	f8 94       	cli
    40ea:	de bf       	out	0x3e, r29	; 62
    40ec:	0f be       	out	0x3f, r0	; 63
    40ee:	cd bf       	out	0x3d, r28	; 61
    40f0:	99 8b       	std	Y+17, r25	; 0x11
    40f2:	88 8b       	std	Y+16, r24	; 0x10
    40f4:	7b 8b       	std	Y+19, r23	; 0x13
    40f6:	6a 8b       	std	Y+18, r22	; 0x12
    40f8:	5d 8b       	std	Y+21, r21	; 0x15
    40fa:	4c 8b       	std	Y+20, r20	; 0x14
    40fc:	2e 8b       	std	Y+22, r18	; 0x16
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    40fe:	88 89       	ldd	r24, Y+16	; 0x10
    4100:	99 89       	ldd	r25, Y+17	; 0x11
    4102:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZNK6SdFile6isOpenEv>
    4106:	8b 8f       	std	Y+27, r24	; 0x1b
    4108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    410a:	88 23       	and	r24, r24
    410c:	11 f0       	breq	.+4      	; 0x4112 <_ZN6SdFile4openEPS_PKch+0x36>
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	8b 8f       	std	Y+27, r24	; 0x1b
    4112:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4114:	88 23       	and	r24, r24
    4116:	11 f0       	breq	.+4      	; 0x411c <_ZN6SdFile4openEPS_PKch+0x40>
    4118:	1a 8e       	std	Y+26, r1	; 0x1a
    411a:	2f c1       	rjmp	.+606    	; 0x437a <_ZN6SdFile4openEPS_PKch+0x29e>

  if (!make83Name(fileName, dname)) return false;
    411c:	8c 89       	ldd	r24, Y+20	; 0x14
    411e:	9d 89       	ldd	r25, Y+21	; 0x15
    4120:	9e 01       	movw	r18, r28
    4122:	2b 5f       	subi	r18, 0xFB	; 251
    4124:	3f 4f       	sbci	r19, 0xFF	; 255
    4126:	b9 01       	movw	r22, r18
    4128:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_ZN6SdFile10make83NameEPKcPh>
    412c:	19 8e       	std	Y+25, r1	; 0x19
    412e:	88 23       	and	r24, r24
    4130:	11 f4       	brne	.+4      	; 0x4136 <_ZN6SdFile4openEPS_PKch+0x5a>
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	89 8f       	std	Y+25, r24	; 0x19
    4136:	89 8d       	ldd	r24, Y+25	; 0x19
    4138:	88 23       	and	r24, r24
    413a:	11 f0       	breq	.+4      	; 0x4140 <_ZN6SdFile4openEPS_PKch+0x64>
    413c:	1a 8e       	std	Y+26, r1	; 0x1a
    413e:	1d c1       	rjmp	.+570    	; 0x437a <_ZN6SdFile4openEPS_PKch+0x29e>
  vol_ = dirFile->vol_;
    4140:	ea 89       	ldd	r30, Y+18	; 0x12
    4142:	fb 89       	ldd	r31, Y+19	; 0x13
    4144:	83 8d       	ldd	r24, Z+27	; 0x1b
    4146:	94 8d       	ldd	r25, Z+28	; 0x1c
    4148:	e8 89       	ldd	r30, Y+16	; 0x10
    414a:	f9 89       	ldd	r31, Y+17	; 0x11
    414c:	94 8f       	std	Z+28, r25	; 0x1c
    414e:	83 8f       	std	Z+27, r24	; 0x1b
  dirFile->rewind();
    4150:	8a 89       	ldd	r24, Y+18	; 0x12
    4152:	9b 89       	ldd	r25, Y+19	; 0x13
    4154:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6SdFile6rewindEv>

  // bool for empty entry found
  uint8_t emptyFound = false;
    4158:	1a 82       	std	Y+2, r1	; 0x02
    415a:	63 c0       	rjmp	.+198    	; 0x4222 <_ZN6SdFile4openEPS_PKch+0x146>

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    415c:	ea 89       	ldd	r30, Y+18	; 0x12
    415e:	fb 89       	ldd	r31, Y+19	; 0x13
    4160:	82 85       	ldd	r24, Z+10	; 0x0a
    4162:	93 85       	ldd	r25, Z+11	; 0x0b
    4164:	a4 85       	ldd	r26, Z+12	; 0x0c
    4166:	b5 85       	ldd	r27, Z+13	; 0x0d
    4168:	68 94       	set
    416a:	14 f8       	bld	r1, 4
    416c:	b6 95       	lsr	r27
    416e:	a7 95       	ror	r26
    4170:	97 95       	ror	r25
    4172:	87 95       	ror	r24
    4174:	16 94       	lsr	r1
    4176:	d1 f7       	brne	.-12     	; 0x416c <_ZN6SdFile4openEPS_PKch+0x90>
    4178:	8f 70       	andi	r24, 0x0F	; 15
    417a:	89 83       	std	Y+1, r24	; 0x01
    p = dirFile->readDirCache();
    417c:	8a 89       	ldd	r24, Y+18	; 0x12
    417e:	9b 89       	ldd	r25, Y+19	; 0x13
    4180:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <_ZN6SdFile12readDirCacheEv>
    4184:	9c 83       	std	Y+4, r25	; 0x04
    4186:	8b 83       	std	Y+3, r24	; 0x03
    if (p == NULL) return false;
    4188:	8b 81       	ldd	r24, Y+3	; 0x03
    418a:	9c 81       	ldd	r25, Y+4	; 0x04
    418c:	00 97       	sbiw	r24, 0x00	; 0
    418e:	11 f4       	brne	.+4      	; 0x4194 <_ZN6SdFile4openEPS_PKch+0xb8>
    4190:	1a 8e       	std	Y+26, r1	; 0x1a
    4192:	f3 c0       	rjmp	.+486    	; 0x437a <_ZN6SdFile4openEPS_PKch+0x29e>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    4194:	eb 81       	ldd	r30, Y+3	; 0x03
    4196:	fc 81       	ldd	r31, Y+4	; 0x04
    4198:	80 81       	ld	r24, Z
    419a:	88 23       	and	r24, r24
    419c:	29 f0       	breq	.+10     	; 0x41a8 <_ZN6SdFile4openEPS_PKch+0xcc>
    419e:	eb 81       	ldd	r30, Y+3	; 0x03
    41a0:	fc 81       	ldd	r31, Y+4	; 0x04
    41a2:	80 81       	ld	r24, Z
    41a4:	85 3e       	cpi	r24, 0xE5	; 229
    41a6:	e9 f4       	brne	.+58     	; 0x41e2 <_ZN6SdFile4openEPS_PKch+0x106>
      // remember first empty slot
      if (!emptyFound) {
    41a8:	8a 81       	ldd	r24, Y+2	; 0x02
    41aa:	88 23       	and	r24, r24
    41ac:	a1 f4       	brne	.+40     	; 0x41d6 <_ZN6SdFile4openEPS_PKch+0xfa>
        emptyFound = true;
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	8a 83       	std	Y+2, r24	; 0x02
        dirIndex_ = index;
    41b2:	e8 89       	ldd	r30, Y+16	; 0x10
    41b4:	f9 89       	ldd	r31, Y+17	; 0x11
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	82 8b       	std	Z+18, r24	; 0x12
        dirBlock_ = SdVolume::cacheBlockNumber_;
    41ba:	80 91 68 00 	lds	r24, 0x0068
    41be:	90 91 69 00 	lds	r25, 0x0069
    41c2:	a0 91 6a 00 	lds	r26, 0x006A
    41c6:	b0 91 6b 00 	lds	r27, 0x006B
    41ca:	e8 89       	ldd	r30, Y+16	; 0x10
    41cc:	f9 89       	ldd	r31, Y+17	; 0x11
    41ce:	86 87       	std	Z+14, r24	; 0x0e
    41d0:	97 87       	std	Z+15, r25	; 0x0f
    41d2:	a0 8b       	std	Z+16, r26	; 0x10
    41d4:	b1 8b       	std	Z+17, r27	; 0x11
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    41d6:	eb 81       	ldd	r30, Y+3	; 0x03
    41d8:	fc 81       	ldd	r31, Y+4	; 0x04
    41da:	80 81       	ld	r24, Z
    41dc:	88 23       	and	r24, r24
    41de:	99 f1       	breq	.+102    	; 0x4246 <_ZN6SdFile4openEPS_PKch+0x16a>
    41e0:	20 c0       	rjmp	.+64     	; 0x4222 <_ZN6SdFile4openEPS_PKch+0x146>
    } else if (!memcmp(dname, p->name, 11)) {
    41e2:	2b 81       	ldd	r18, Y+3	; 0x03
    41e4:	3c 81       	ldd	r19, Y+4	; 0x04
    41e6:	ce 01       	movw	r24, r28
    41e8:	05 96       	adiw	r24, 0x05	; 5
    41ea:	b9 01       	movw	r22, r18
    41ec:	4b e0       	ldi	r20, 0x0B	; 11
    41ee:	50 e0       	ldi	r21, 0x00	; 0
    41f0:	0e 94 f7 84 	call	0x109ee	; 0x109ee <memcmp>
    41f4:	00 97       	sbiw	r24, 0x00	; 0
    41f6:	a9 f4       	brne	.+42     	; 0x4222 <_ZN6SdFile4openEPS_PKch+0x146>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    41f8:	8e 89       	ldd	r24, Y+22	; 0x16
    41fa:	88 2f       	mov	r24, r24
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	80 73       	andi	r24, 0x30	; 48
    4200:	90 70       	andi	r25, 0x00	; 0
    4202:	80 33       	cpi	r24, 0x30	; 48
    4204:	91 05       	cpc	r25, r1
    4206:	11 f4       	brne	.+4      	; 0x420c <_ZN6SdFile4openEPS_PKch+0x130>
    4208:	1a 8e       	std	Y+26, r1	; 0x1a
    420a:	b7 c0       	rjmp	.+366    	; 0x437a <_ZN6SdFile4openEPS_PKch+0x29e>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    420c:	89 81       	ldd	r24, Y+1	; 0x01
    420e:	28 2f       	mov	r18, r24
    4210:	2f 70       	andi	r18, 0x0F	; 15
    4212:	88 89       	ldd	r24, Y+16	; 0x10
    4214:	99 89       	ldd	r25, Y+17	; 0x11
    4216:	62 2f       	mov	r22, r18
    4218:	4e 89       	ldd	r20, Y+22	; 0x16
    421a:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN6SdFile15openCachedEntryEhh>
    421e:	8a 8f       	std	Y+26, r24	; 0x1a
    4220:	ac c0       	rjmp	.+344    	; 0x437a <_ZN6SdFile4openEPS_PKch+0x29e>

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    4222:	ea 89       	ldd	r30, Y+18	; 0x12
    4224:	fb 89       	ldd	r31, Y+19	; 0x13
    4226:	22 85       	ldd	r18, Z+10	; 0x0a
    4228:	33 85       	ldd	r19, Z+11	; 0x0b
    422a:	44 85       	ldd	r20, Z+12	; 0x0c
    422c:	55 85       	ldd	r21, Z+13	; 0x0d
    422e:	ea 89       	ldd	r30, Y+18	; 0x12
    4230:	fb 89       	ldd	r31, Y+19	; 0x13
    4232:	83 89       	ldd	r24, Z+19	; 0x13
    4234:	94 89       	ldd	r25, Z+20	; 0x14
    4236:	a5 89       	ldd	r26, Z+21	; 0x15
    4238:	b6 89       	ldd	r27, Z+22	; 0x16
    423a:	28 17       	cp	r18, r24
    423c:	39 07       	cpc	r19, r25
    423e:	4a 07       	cpc	r20, r26
    4240:	5b 07       	cpc	r21, r27
    4242:	08 f4       	brcc	.+2      	; 0x4246 <_ZN6SdFile4openEPS_PKch+0x16a>
    4244:	8b cf       	rjmp	.-234    	; 0x415c <_ZN6SdFile4openEPS_PKch+0x80>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    4246:	8e 89       	ldd	r24, Y+22	; 0x16
    4248:	88 2f       	mov	r24, r24
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	82 71       	andi	r24, 0x12	; 18
    424e:	90 70       	andi	r25, 0x00	; 0
    4250:	82 31       	cpi	r24, 0x12	; 18
    4252:	91 05       	cpc	r25, r1
    4254:	11 f0       	breq	.+4      	; 0x425a <_ZN6SdFile4openEPS_PKch+0x17e>
    4256:	1a 8e       	std	Y+26, r1	; 0x1a
    4258:	90 c0       	rjmp	.+288    	; 0x437a <_ZN6SdFile4openEPS_PKch+0x29e>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    425a:	8a 81       	ldd	r24, Y+2	; 0x02
    425c:	88 23       	and	r24, r24
    425e:	69 f0       	breq	.+26     	; 0x427a <_ZN6SdFile4openEPS_PKch+0x19e>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    4260:	88 89       	ldd	r24, Y+16	; 0x10
    4262:	99 89       	ldd	r25, Y+17	; 0x11
    4264:	61 e0       	ldi	r22, 0x01	; 1
    4266:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN6SdFile13cacheDirEntryEh>
    426a:	9c 83       	std	Y+4, r25	; 0x04
    426c:	8b 83       	std	Y+3, r24	; 0x03
    if (!p) return false;
    426e:	8b 81       	ldd	r24, Y+3	; 0x03
    4270:	9c 81       	ldd	r25, Y+4	; 0x04
    4272:	00 97       	sbiw	r24, 0x00	; 0
    4274:	f1 f4       	brne	.+60     	; 0x42b2 <_ZN6SdFile4openEPS_PKch+0x1d6>
    4276:	1a 8e       	std	Y+26, r1	; 0x1a
    4278:	80 c0       	rjmp	.+256    	; 0x437a <_ZN6SdFile4openEPS_PKch+0x29e>
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    427a:	ea 89       	ldd	r30, Y+18	; 0x12
    427c:	fb 89       	ldd	r31, Y+19	; 0x13
    427e:	85 81       	ldd	r24, Z+5	; 0x05
    4280:	82 30       	cpi	r24, 0x02	; 2
    4282:	11 f4       	brne	.+4      	; 0x4288 <_ZN6SdFile4openEPS_PKch+0x1ac>
    4284:	1a 8e       	std	Y+26, r1	; 0x1a
    4286:	79 c0       	rjmp	.+242    	; 0x437a <_ZN6SdFile4openEPS_PKch+0x29e>

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;
    4288:	8a 89       	ldd	r24, Y+18	; 0x12
    428a:	9b 89       	ldd	r25, Y+19	; 0x13
    428c:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <_ZN6SdFile13addDirClusterEv>
    4290:	18 8e       	std	Y+24, r1	; 0x18
    4292:	88 23       	and	r24, r24
    4294:	11 f4       	brne	.+4      	; 0x429a <_ZN6SdFile4openEPS_PKch+0x1be>
    4296:	81 e0       	ldi	r24, 0x01	; 1
    4298:	88 8f       	std	Y+24, r24	; 0x18
    429a:	88 8d       	ldd	r24, Y+24	; 0x18
    429c:	88 23       	and	r24, r24
    429e:	11 f0       	breq	.+4      	; 0x42a4 <_ZN6SdFile4openEPS_PKch+0x1c8>
    42a0:	1a 8e       	std	Y+26, r1	; 0x1a
    42a2:	6b c0       	rjmp	.+214    	; 0x437a <_ZN6SdFile4openEPS_PKch+0x29e>

    // use first entry in cluster
    dirIndex_ = 0;
    42a4:	e8 89       	ldd	r30, Y+16	; 0x10
    42a6:	f9 89       	ldd	r31, Y+17	; 0x11
    42a8:	12 8a       	std	Z+18, r1	; 0x12
    p = SdVolume::cacheBuffer_.dir;
    42aa:	84 e4       	ldi	r24, 0x44	; 68
    42ac:	93 e0       	ldi	r25, 0x03	; 3
    42ae:	9c 83       	std	Y+4, r25	; 0x04
    42b0:	8b 83       	std	Y+3, r24	; 0x03
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    42b2:	8b 81       	ldd	r24, Y+3	; 0x03
    42b4:	9c 81       	ldd	r25, Y+4	; 0x04
    42b6:	60 e0       	ldi	r22, 0x00	; 0
    42b8:	70 e0       	ldi	r23, 0x00	; 0
    42ba:	40 e2       	ldi	r20, 0x20	; 32
    42bc:	50 e0       	ldi	r21, 0x00	; 0
    42be:	0e 94 1f 85 	call	0x10a3e	; 0x10a3e <memset>
  memcpy(p->name, dname, 11);
    42c2:	8b 81       	ldd	r24, Y+3	; 0x03
    42c4:	9c 81       	ldd	r25, Y+4	; 0x04
    42c6:	9e 01       	movw	r18, r28
    42c8:	2b 5f       	subi	r18, 0xFB	; 251
    42ca:	3f 4f       	sbci	r19, 0xFF	; 255
    42cc:	b9 01       	movw	r22, r18
    42ce:	4b e0       	ldi	r20, 0x0B	; 11
    42d0:	50 e0       	ldi	r21, 0x00	; 0
    42d2:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>

  // set timestamps
  if (dateTime_) {
    42d6:	80 91 40 03 	lds	r24, 0x0340
    42da:	90 91 41 03 	lds	r25, 0x0341
    42de:	00 97       	sbiw	r24, 0x00	; 0
    42e0:	91 f0       	breq	.+36     	; 0x4306 <_ZN6SdFile4openEPS_PKch+0x22a>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    42e2:	e0 91 40 03 	lds	r30, 0x0340
    42e6:	f0 91 41 03 	lds	r31, 0x0341
    42ea:	8b 81       	ldd	r24, Y+3	; 0x03
    42ec:	9c 81       	ldd	r25, Y+4	; 0x04
    42ee:	ac 01       	movw	r20, r24
    42f0:	40 5f       	subi	r20, 0xF0	; 240
    42f2:	5f 4f       	sbci	r21, 0xFF	; 255
    42f4:	8b 81       	ldd	r24, Y+3	; 0x03
    42f6:	9c 81       	ldd	r25, Y+4	; 0x04
    42f8:	9c 01       	movw	r18, r24
    42fa:	22 5f       	subi	r18, 0xF2	; 242
    42fc:	3f 4f       	sbci	r19, 0xFF	; 255
    42fe:	ca 01       	movw	r24, r20
    4300:	b9 01       	movw	r22, r18
    4302:	09 95       	icall
    4304:	0c c0       	rjmp	.+24     	; 0x431e <_ZN6SdFile4openEPS_PKch+0x242>
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    4306:	eb 81       	ldd	r30, Y+3	; 0x03
    4308:	fc 81       	ldd	r31, Y+4	; 0x04
    430a:	81 e2       	ldi	r24, 0x21	; 33
    430c:	98 e2       	ldi	r25, 0x28	; 40
    430e:	91 8b       	std	Z+17, r25	; 0x11
    4310:	80 8b       	std	Z+16, r24	; 0x10
    p->creationTime = FAT_DEFAULT_TIME;
    4312:	eb 81       	ldd	r30, Y+3	; 0x03
    4314:	fc 81       	ldd	r31, Y+4	; 0x04
    4316:	80 e0       	ldi	r24, 0x00	; 0
    4318:	98 e0       	ldi	r25, 0x08	; 8
    431a:	97 87       	std	Z+15, r25	; 0x0f
    431c:	86 87       	std	Z+14, r24	; 0x0e
  }
  p->lastAccessDate = p->creationDate;
    431e:	eb 81       	ldd	r30, Y+3	; 0x03
    4320:	fc 81       	ldd	r31, Y+4	; 0x04
    4322:	80 89       	ldd	r24, Z+16	; 0x10
    4324:	91 89       	ldd	r25, Z+17	; 0x11
    4326:	eb 81       	ldd	r30, Y+3	; 0x03
    4328:	fc 81       	ldd	r31, Y+4	; 0x04
    432a:	93 8b       	std	Z+19, r25	; 0x13
    432c:	82 8b       	std	Z+18, r24	; 0x12
  p->lastWriteDate = p->creationDate;
    432e:	eb 81       	ldd	r30, Y+3	; 0x03
    4330:	fc 81       	ldd	r31, Y+4	; 0x04
    4332:	80 89       	ldd	r24, Z+16	; 0x10
    4334:	91 89       	ldd	r25, Z+17	; 0x11
    4336:	eb 81       	ldd	r30, Y+3	; 0x03
    4338:	fc 81       	ldd	r31, Y+4	; 0x04
    433a:	91 8f       	std	Z+25, r25	; 0x19
    433c:	80 8f       	std	Z+24, r24	; 0x18
  p->lastWriteTime = p->creationTime;
    433e:	eb 81       	ldd	r30, Y+3	; 0x03
    4340:	fc 81       	ldd	r31, Y+4	; 0x04
    4342:	86 85       	ldd	r24, Z+14	; 0x0e
    4344:	97 85       	ldd	r25, Z+15	; 0x0f
    4346:	eb 81       	ldd	r30, Y+3	; 0x03
    4348:	fc 81       	ldd	r31, Y+4	; 0x04
    434a:	97 8b       	std	Z+23, r25	; 0x17
    434c:	86 8b       	std	Z+22, r24	; 0x16

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    434e:	0e 94 d7 23 	call	0x47ae	; 0x47ae <_ZN8SdVolume10cacheFlushEv>
    4352:	1f 8a       	std	Y+23, r1	; 0x17
    4354:	88 23       	and	r24, r24
    4356:	11 f4       	brne	.+4      	; 0x435c <_ZN6SdFile4openEPS_PKch+0x280>
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	8f 8b       	std	Y+23, r24	; 0x17
    435c:	8f 89       	ldd	r24, Y+23	; 0x17
    435e:	88 23       	and	r24, r24
    4360:	11 f0       	breq	.+4      	; 0x4366 <_ZN6SdFile4openEPS_PKch+0x28a>
    4362:	1a 8e       	std	Y+26, r1	; 0x1a
    4364:	0a c0       	rjmp	.+20     	; 0x437a <_ZN6SdFile4openEPS_PKch+0x29e>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    4366:	e8 89       	ldd	r30, Y+16	; 0x10
    4368:	f9 89       	ldd	r31, Y+17	; 0x11
    436a:	22 89       	ldd	r18, Z+18	; 0x12
    436c:	88 89       	ldd	r24, Y+16	; 0x10
    436e:	99 89       	ldd	r25, Y+17	; 0x11
    4370:	62 2f       	mov	r22, r18
    4372:	4e 89       	ldd	r20, Y+22	; 0x16
    4374:	0e 94 67 19 	call	0x32ce	; 0x32ce <_ZN6SdFile15openCachedEntryEhh>
    4378:	8a 8f       	std	Y+26, r24	; 0x1a
    437a:	8a 8d       	ldd	r24, Y+26	; 0x1a
}
    437c:	6b 96       	adiw	r28, 0x1b	; 27
    437e:	0f b6       	in	r0, 0x3f	; 63
    4380:	f8 94       	cli
    4382:	de bf       	out	0x3e, r29	; 62
    4384:	0f be       	out	0x3f, r0	; 63
    4386:	cd bf       	out	0x3d, r28	; 61
    4388:	cf 91       	pop	r28
    438a:	df 91       	pop	r29
    438c:	08 95       	ret

0000438e <_ZN6SdFile6removeEPS_PKc>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is a directory, is read only,
 * \a dirFile is not a directory, \a fileName is not found
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {
    438e:	df 93       	push	r29
    4390:	cf 93       	push	r28
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
    4396:	a3 97       	sbiw	r28, 0x23	; 35
    4398:	0f b6       	in	r0, 0x3f	; 63
    439a:	f8 94       	cli
    439c:	de bf       	out	0x3e, r29	; 62
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	cd bf       	out	0x3d, r28	; 61
    43a2:	9f 8f       	std	Y+31, r25	; 0x1f
    43a4:	8e 8f       	std	Y+30, r24	; 0x1e
    43a6:	79 a3       	std	Y+33, r23	; 0x21
    43a8:	68 a3       	std	Y+32, r22	; 0x20
  SdFile file;
    43aa:	ce 01       	movw	r24, r28
    43ac:	01 96       	adiw	r24, 0x01	; 1
    43ae:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>
  if (!file.open(dirFile, fileName, O_WRITE)) return false;
    43b2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    43b4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    43b6:	48 a1       	ldd	r20, Y+32	; 0x20
    43b8:	59 a1       	ldd	r21, Y+33	; 0x21
    43ba:	ce 01       	movw	r24, r28
    43bc:	01 96       	adiw	r24, 0x01	; 1
    43be:	b9 01       	movw	r22, r18
    43c0:	22 e0       	ldi	r18, 0x02	; 2
    43c2:	0e 94 6e 20 	call	0x40dc	; 0x40dc <_ZN6SdFile4openEPS_PKch>
    43c6:	1b a2       	std	Y+35, r1	; 0x23
    43c8:	88 23       	and	r24, r24
    43ca:	11 f4       	brne	.+4      	; 0x43d0 <_ZN6SdFile6removeEPS_PKc+0x42>
    43cc:	81 e0       	ldi	r24, 0x01	; 1
    43ce:	8b a3       	std	Y+35, r24	; 0x23
    43d0:	8b a1       	ldd	r24, Y+35	; 0x23
    43d2:	88 23       	and	r24, r24
    43d4:	11 f0       	breq	.+4      	; 0x43da <_ZN6SdFile6removeEPS_PKc+0x4c>
    43d6:	1a a2       	std	Y+34, r1	; 0x22
    43d8:	05 c0       	rjmp	.+10     	; 0x43e4 <_ZN6SdFile6removeEPS_PKc+0x56>
  return file.remove();
    43da:	ce 01       	movw	r24, r28
    43dc:	01 96       	adiw	r24, 0x01	; 1
    43de:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN6SdFile6removeEv>
    43e2:	8a a3       	std	Y+34, r24	; 0x22
    43e4:	8a a1       	ldd	r24, Y+34	; 0x22
}
    43e6:	a3 96       	adiw	r28, 0x23	; 35
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	f8 94       	cli
    43ec:	de bf       	out	0x3e, r29	; 62
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	cd bf       	out	0x3d, r28	; 61
    43f2:	cf 91       	pop	r28
    43f4:	df 91       	pop	r29
    43f6:	08 95       	ret

000043f8 <_ZN6SdFile16createContiguousEPS_PKcm>:
 * a file is already open, the file already exists, the root
 * directory is full or an I/O error.
 *
 */
uint8_t SdFile::createContiguous(SdFile* dirFile,
        const char* fileName, uint32_t size) {
    43f8:	ef 92       	push	r14
    43fa:	ff 92       	push	r15
    43fc:	0f 93       	push	r16
    43fe:	1f 93       	push	r17
    4400:	df 93       	push	r29
    4402:	cf 93       	push	r28
    4404:	cd b7       	in	r28, 0x3d	; 61
    4406:	de b7       	in	r29, 0x3e	; 62
    4408:	61 97       	sbiw	r28, 0x11	; 17
    440a:	0f b6       	in	r0, 0x3f	; 63
    440c:	f8 94       	cli
    440e:	de bf       	out	0x3e, r29	; 62
    4410:	0f be       	out	0x3f, r0	; 63
    4412:	cd bf       	out	0x3d, r28	; 61
    4414:	9e 83       	std	Y+6, r25	; 0x06
    4416:	8d 83       	std	Y+5, r24	; 0x05
    4418:	78 87       	std	Y+8, r23	; 0x08
    441a:	6f 83       	std	Y+7, r22	; 0x07
    441c:	5a 87       	std	Y+10, r21	; 0x0a
    441e:	49 87       	std	Y+9, r20	; 0x09
    4420:	0b 87       	std	Y+11, r16	; 0x0b
    4422:	1c 87       	std	Y+12, r17	; 0x0c
    4424:	2d 87       	std	Y+13, r18	; 0x0d
    4426:	3e 87       	std	Y+14, r19	; 0x0e
  // don't allow zero length file
  if (size == 0) return false;
    4428:	8b 85       	ldd	r24, Y+11	; 0x0b
    442a:	9c 85       	ldd	r25, Y+12	; 0x0c
    442c:	ad 85       	ldd	r26, Y+13	; 0x0d
    442e:	be 85       	ldd	r27, Y+14	; 0x0e
    4430:	00 97       	sbiw	r24, 0x00	; 0
    4432:	a1 05       	cpc	r26, r1
    4434:	b1 05       	cpc	r27, r1
    4436:	11 f4       	brne	.+4      	; 0x443c <_ZN6SdFile16createContiguousEPS_PKcm+0x44>
    4438:	19 8a       	std	Y+17, r1	; 0x11
    443a:	6f c0       	rjmp	.+222    	; 0x451a <_ZN6SdFile16createContiguousEPS_PKcm+0x122>
  if (!open(dirFile, fileName, O_CREAT | O_EXCL | O_RDWR)) return false;
    443c:	8d 81       	ldd	r24, Y+5	; 0x05
    443e:	9e 81       	ldd	r25, Y+6	; 0x06
    4440:	2f 81       	ldd	r18, Y+7	; 0x07
    4442:	38 85       	ldd	r19, Y+8	; 0x08
    4444:	49 85       	ldd	r20, Y+9	; 0x09
    4446:	5a 85       	ldd	r21, Y+10	; 0x0a
    4448:	b9 01       	movw	r22, r18
    444a:	23 e3       	ldi	r18, 0x33	; 51
    444c:	0e 94 6e 20 	call	0x40dc	; 0x40dc <_ZN6SdFile4openEPS_PKch>
    4450:	18 8a       	std	Y+16, r1	; 0x10
    4452:	88 23       	and	r24, r24
    4454:	11 f4       	brne	.+4      	; 0x445a <_ZN6SdFile16createContiguousEPS_PKcm+0x62>
    4456:	01 e0       	ldi	r16, 0x01	; 1
    4458:	08 8b       	std	Y+16, r16	; 0x10
    445a:	18 89       	ldd	r17, Y+16	; 0x10
    445c:	11 23       	and	r17, r17
    445e:	11 f0       	breq	.+4      	; 0x4464 <_ZN6SdFile16createContiguousEPS_PKcm+0x6c>
    4460:	19 8a       	std	Y+17, r1	; 0x11
    4462:	5b c0       	rjmp	.+182    	; 0x451a <_ZN6SdFile16createContiguousEPS_PKcm+0x122>

  // calculate number of clusters needed
  uint32_t count = ((size - 1) >> (vol_->clusterSizeShift_ + 9)) + 1;
    4464:	8b 85       	ldd	r24, Y+11	; 0x0b
    4466:	9c 85       	ldd	r25, Y+12	; 0x0c
    4468:	ad 85       	ldd	r26, Y+13	; 0x0d
    446a:	be 85       	ldd	r27, Y+14	; 0x0e
    446c:	9c 01       	movw	r18, r24
    446e:	ad 01       	movw	r20, r26
    4470:	21 50       	subi	r18, 0x01	; 1
    4472:	30 40       	sbci	r19, 0x00	; 0
    4474:	40 40       	sbci	r20, 0x00	; 0
    4476:	50 40       	sbci	r21, 0x00	; 0
    4478:	ed 81       	ldd	r30, Y+5	; 0x05
    447a:	fe 81       	ldd	r31, Y+6	; 0x06
    447c:	03 8c       	ldd	r0, Z+27	; 0x1b
    447e:	f4 8d       	ldd	r31, Z+28	; 0x1c
    4480:	e0 2d       	mov	r30, r0
    4482:	85 85       	ldd	r24, Z+13	; 0x0d
    4484:	88 2f       	mov	r24, r24
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	09 96       	adiw	r24, 0x09	; 9
    448a:	79 01       	movw	r14, r18
    448c:	8a 01       	movw	r16, r20
    448e:	04 c0       	rjmp	.+8      	; 0x4498 <_ZN6SdFile16createContiguousEPS_PKcm+0xa0>
    4490:	16 95       	lsr	r17
    4492:	07 95       	ror	r16
    4494:	f7 94       	ror	r15
    4496:	e7 94       	ror	r14
    4498:	8a 95       	dec	r24
    449a:	d2 f7       	brpl	.-12     	; 0x4490 <_ZN6SdFile16createContiguousEPS_PKcm+0x98>
    449c:	d8 01       	movw	r26, r16
    449e:	c7 01       	movw	r24, r14
    44a0:	01 96       	adiw	r24, 0x01	; 1
    44a2:	a1 1d       	adc	r26, r1
    44a4:	b1 1d       	adc	r27, r1
    44a6:	89 83       	std	Y+1, r24	; 0x01
    44a8:	9a 83       	std	Y+2, r25	; 0x02
    44aa:	ab 83       	std	Y+3, r26	; 0x03
    44ac:	bc 83       	std	Y+4, r27	; 0x04

  // allocate clusters
  if (!vol_->allocContiguous(count, &firstCluster_)) {
    44ae:	ed 81       	ldd	r30, Y+5	; 0x05
    44b0:	fe 81       	ldd	r31, Y+6	; 0x06
    44b2:	63 8d       	ldd	r22, Z+27	; 0x1b
    44b4:	74 8d       	ldd	r23, Z+28	; 0x1c
    44b6:	8d 81       	ldd	r24, Y+5	; 0x05
    44b8:	9e 81       	ldd	r25, Y+6	; 0x06
    44ba:	fc 01       	movw	r30, r24
    44bc:	77 96       	adiw	r30, 0x17	; 23
    44be:	29 81       	ldd	r18, Y+1	; 0x01
    44c0:	3a 81       	ldd	r19, Y+2	; 0x02
    44c2:	4b 81       	ldd	r20, Y+3	; 0x03
    44c4:	5c 81       	ldd	r21, Y+4	; 0x04
    44c6:	cb 01       	movw	r24, r22
    44c8:	ba 01       	movw	r22, r20
    44ca:	a9 01       	movw	r20, r18
    44cc:	9f 01       	movw	r18, r30
    44ce:	0e 94 cd 29 	call	0x539a	; 0x539a <_ZN8SdVolume15allocContiguousEmPm>
    44d2:	1f 86       	std	Y+15, r1	; 0x0f
    44d4:	88 23       	and	r24, r24
    44d6:	11 f4       	brne	.+4      	; 0x44dc <_ZN6SdFile16createContiguousEPS_PKcm+0xe4>
    44d8:	01 e0       	ldi	r16, 0x01	; 1
    44da:	0f 87       	std	Y+15, r16	; 0x0f
    44dc:	1f 85       	ldd	r17, Y+15	; 0x0f
    44de:	11 23       	and	r17, r17
    44e0:	31 f0       	breq	.+12     	; 0x44ee <_ZN6SdFile16createContiguousEPS_PKcm+0xf6>
    remove();
    44e2:	8d 81       	ldd	r24, Y+5	; 0x05
    44e4:	9e 81       	ldd	r25, Y+6	; 0x06
    44e6:	0e 94 ff 13 	call	0x27fe	; 0x27fe <_ZN6SdFile6removeEv>
    return false;
    44ea:	19 8a       	std	Y+17, r1	; 0x11
    44ec:	16 c0       	rjmp	.+44     	; 0x451a <_ZN6SdFile16createContiguousEPS_PKcm+0x122>
  }
  fileSize_ = size;
    44ee:	ed 81       	ldd	r30, Y+5	; 0x05
    44f0:	fe 81       	ldd	r31, Y+6	; 0x06
    44f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    44f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    44f6:	ad 85       	ldd	r26, Y+13	; 0x0d
    44f8:	be 85       	ldd	r27, Y+14	; 0x0e
    44fa:	83 8b       	std	Z+19, r24	; 0x13
    44fc:	94 8b       	std	Z+20, r25	; 0x14
    44fe:	a5 8b       	std	Z+21, r26	; 0x15
    4500:	b6 8b       	std	Z+22, r27	; 0x16

  // insure sync() will update dir entry
  flags_ |= F_FILE_DIR_DIRTY;
    4502:	ed 81       	ldd	r30, Y+5	; 0x05
    4504:	fe 81       	ldd	r31, Y+6	; 0x06
    4506:	84 81       	ldd	r24, Z+4	; 0x04
    4508:	80 68       	ori	r24, 0x80	; 128
    450a:	ed 81       	ldd	r30, Y+5	; 0x05
    450c:	fe 81       	ldd	r31, Y+6	; 0x06
    450e:	84 83       	std	Z+4, r24	; 0x04
  return sync();
    4510:	8d 81       	ldd	r24, Y+5	; 0x05
    4512:	9e 81       	ldd	r25, Y+6	; 0x06
    4514:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN6SdFile4syncEv>
    4518:	89 8b       	std	Y+17, r24	; 0x11
    451a:	89 89       	ldd	r24, Y+17	; 0x11
}
    451c:	61 96       	adiw	r28, 0x11	; 17
    451e:	0f b6       	in	r0, 0x3f	; 63
    4520:	f8 94       	cli
    4522:	de bf       	out	0x3e, r29	; 62
    4524:	0f be       	out	0x3f, r0	; 63
    4526:	cd bf       	out	0x3d, r28	; 61
    4528:	cf 91       	pop	r28
    452a:	df 91       	pop	r29
    452c:	1f 91       	pop	r17
    452e:	0f 91       	pop	r16
    4530:	ff 90       	pop	r15
    4532:	ef 90       	pop	r14
    4534:	08 95       	ret

00004536 <_ZN6SdFile7makeDirEPS_PKc>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a dir is not a
 * directory, \a dirName is invalid or already exists in \a dir.
 */
uint8_t SdFile::makeDir(SdFile* dir, const char* dirName) {
    4536:	df 93       	push	r29
    4538:	cf 93       	push	r28
    453a:	cd b7       	in	r28, 0x3d	; 61
    453c:	de b7       	in	r29, 0x3e	; 62
    453e:	e3 97       	sbiw	r28, 0x33	; 51
    4540:	0f b6       	in	r0, 0x3f	; 63
    4542:	f8 94       	cli
    4544:	de bf       	out	0x3e, r29	; 62
    4546:	0f be       	out	0x3f, r0	; 63
    4548:	cd bf       	out	0x3d, r28	; 61
    454a:	99 a7       	std	Y+41, r25	; 0x29
    454c:	88 a7       	std	Y+40, r24	; 0x28
    454e:	7b a7       	std	Y+43, r23	; 0x2b
    4550:	6a a7       	std	Y+42, r22	; 0x2a
    4552:	5d a7       	std	Y+45, r21	; 0x2d
    4554:	4c a7       	std	Y+44, r20	; 0x2c
  dir_t d;

  // create a normal file
  if (!open(dir, dirName, O_CREAT | O_EXCL | O_RDWR)) return false;
    4556:	88 a5       	ldd	r24, Y+40	; 0x28
    4558:	99 a5       	ldd	r25, Y+41	; 0x29
    455a:	2a a5       	ldd	r18, Y+42	; 0x2a
    455c:	3b a5       	ldd	r19, Y+43	; 0x2b
    455e:	4c a5       	ldd	r20, Y+44	; 0x2c
    4560:	5d a5       	ldd	r21, Y+45	; 0x2d
    4562:	b9 01       	movw	r22, r18
    4564:	23 e3       	ldi	r18, 0x33	; 51
    4566:	0e 94 6e 20 	call	0x40dc	; 0x40dc <_ZN6SdFile4openEPS_PKch>
    456a:	1a aa       	std	Y+50, r1	; 0x32
    456c:	88 23       	and	r24, r24
    456e:	11 f4       	brne	.+4      	; 0x4574 <_ZN6SdFile7makeDirEPS_PKc+0x3e>
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	8a ab       	std	Y+50, r24	; 0x32
    4574:	8a a9       	ldd	r24, Y+50	; 0x32
    4576:	88 23       	and	r24, r24
    4578:	11 f0       	breq	.+4      	; 0x457e <_ZN6SdFile7makeDirEPS_PKc+0x48>
    457a:	19 aa       	std	Y+49, r1	; 0x31
    457c:	c2 c0       	rjmp	.+388    	; 0x4702 <_ZN6SdFile7makeDirEPS_PKc+0x1cc>

  // convert SdFile to directory
  flags_ = O_READ;
    457e:	e8 a5       	ldd	r30, Y+40	; 0x28
    4580:	f9 a5       	ldd	r31, Y+41	; 0x29
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	84 83       	std	Z+4, r24	; 0x04
  type_ = FAT_FILE_TYPE_SUBDIR;
    4586:	e8 a5       	ldd	r30, Y+40	; 0x28
    4588:	f9 a5       	ldd	r31, Y+41	; 0x29
    458a:	84 e0       	ldi	r24, 0x04	; 4
    458c:	85 83       	std	Z+5, r24	; 0x05

  // allocate and zero first cluster
  if (!addDirCluster())return false;
    458e:	88 a5       	ldd	r24, Y+40	; 0x28
    4590:	99 a5       	ldd	r25, Y+41	; 0x29
    4592:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <_ZN6SdFile13addDirClusterEv>
    4596:	18 aa       	std	Y+48, r1	; 0x30
    4598:	88 23       	and	r24, r24
    459a:	11 f4       	brne	.+4      	; 0x45a0 <_ZN6SdFile7makeDirEPS_PKc+0x6a>
    459c:	81 e0       	ldi	r24, 0x01	; 1
    459e:	88 ab       	std	Y+48, r24	; 0x30
    45a0:	88 a9       	ldd	r24, Y+48	; 0x30
    45a2:	88 23       	and	r24, r24
    45a4:	11 f0       	breq	.+4      	; 0x45aa <_ZN6SdFile7makeDirEPS_PKc+0x74>
    45a6:	19 aa       	std	Y+49, r1	; 0x31
    45a8:	ac c0       	rjmp	.+344    	; 0x4702 <_ZN6SdFile7makeDirEPS_PKc+0x1cc>

  // force entry to SD
  if (!sync()) return false;
    45aa:	88 a5       	ldd	r24, Y+40	; 0x28
    45ac:	99 a5       	ldd	r25, Y+41	; 0x29
    45ae:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN6SdFile4syncEv>
    45b2:	1f a6       	std	Y+47, r1	; 0x2f
    45b4:	88 23       	and	r24, r24
    45b6:	11 f4       	brne	.+4      	; 0x45bc <_ZN6SdFile7makeDirEPS_PKc+0x86>
    45b8:	81 e0       	ldi	r24, 0x01	; 1
    45ba:	8f a7       	std	Y+47, r24	; 0x2f
    45bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    45be:	88 23       	and	r24, r24
    45c0:	11 f0       	breq	.+4      	; 0x45c6 <_ZN6SdFile7makeDirEPS_PKc+0x90>
    45c2:	19 aa       	std	Y+49, r1	; 0x31
    45c4:	9e c0       	rjmp	.+316    	; 0x4702 <_ZN6SdFile7makeDirEPS_PKc+0x1cc>

  // cache entry - should already be in cache due to sync() call
  dir_t* p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    45c6:	88 a5       	ldd	r24, Y+40	; 0x28
    45c8:	99 a5       	ldd	r25, Y+41	; 0x29
    45ca:	61 e0       	ldi	r22, 0x01	; 1
    45cc:	0e 94 c7 10 	call	0x218e	; 0x218e <_ZN6SdFile13cacheDirEntryEh>
    45d0:	9f 83       	std	Y+7, r25	; 0x07
    45d2:	8e 83       	std	Y+6, r24	; 0x06
  if (!p) return false;
    45d4:	8e 81       	ldd	r24, Y+6	; 0x06
    45d6:	9f 81       	ldd	r25, Y+7	; 0x07
    45d8:	00 97       	sbiw	r24, 0x00	; 0
    45da:	11 f4       	brne	.+4      	; 0x45e0 <_ZN6SdFile7makeDirEPS_PKc+0xaa>
    45dc:	19 aa       	std	Y+49, r1	; 0x31
    45de:	91 c0       	rjmp	.+290    	; 0x4702 <_ZN6SdFile7makeDirEPS_PKc+0x1cc>

  // change directory entry  attribute
  p->attributes = DIR_ATT_DIRECTORY;
    45e0:	ee 81       	ldd	r30, Y+6	; 0x06
    45e2:	ff 81       	ldd	r31, Y+7	; 0x07
    45e4:	80 e1       	ldi	r24, 0x10	; 16
    45e6:	83 87       	std	Z+11, r24	; 0x0b

  // make entry for '.'
  memcpy(&d, p, sizeof(d));
    45e8:	ce 01       	movw	r24, r28
    45ea:	08 96       	adiw	r24, 0x08	; 8
    45ec:	2e 81       	ldd	r18, Y+6	; 0x06
    45ee:	3f 81       	ldd	r19, Y+7	; 0x07
    45f0:	b9 01       	movw	r22, r18
    45f2:	40 e2       	ldi	r20, 0x20	; 32
    45f4:	50 e0       	ldi	r21, 0x00	; 0
    45f6:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
  for (uint8_t i = 1; i < 11; i++) d.name[i] = ' ';
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	89 83       	std	Y+1, r24	; 0x01
    45fe:	0d c0       	rjmp	.+26     	; 0x461a <_ZN6SdFile7makeDirEPS_PKc+0xe4>
    4600:	89 81       	ldd	r24, Y+1	; 0x01
    4602:	28 2f       	mov	r18, r24
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	ce 01       	movw	r24, r28
    4608:	08 96       	adiw	r24, 0x08	; 8
    460a:	fc 01       	movw	r30, r24
    460c:	e2 0f       	add	r30, r18
    460e:	f3 1f       	adc	r31, r19
    4610:	80 e2       	ldi	r24, 0x20	; 32
    4612:	80 83       	st	Z, r24
    4614:	89 81       	ldd	r24, Y+1	; 0x01
    4616:	8f 5f       	subi	r24, 0xFF	; 255
    4618:	89 83       	std	Y+1, r24	; 0x01
    461a:	89 81       	ldd	r24, Y+1	; 0x01
    461c:	8b 30       	cpi	r24, 0x0B	; 11
    461e:	80 f3       	brcs	.-32     	; 0x4600 <_ZN6SdFile7makeDirEPS_PKc+0xca>
  d.name[0] = '.';
    4620:	8e e2       	ldi	r24, 0x2E	; 46
    4622:	88 87       	std	Y+8, r24	; 0x08

  // cache block for '.'  and '..'
  uint32_t block = vol_->clusterStartBlock(firstCluster_);
    4624:	e8 a5       	ldd	r30, Y+40	; 0x28
    4626:	f9 a5       	ldd	r31, Y+41	; 0x29
    4628:	83 8d       	ldd	r24, Z+27	; 0x1b
    462a:	94 8d       	ldd	r25, Z+28	; 0x1c
    462c:	e8 a5       	ldd	r30, Y+40	; 0x28
    462e:	f9 a5       	ldd	r31, Y+41	; 0x29
    4630:	27 89       	ldd	r18, Z+23	; 0x17
    4632:	30 8d       	ldd	r19, Z+24	; 0x18
    4634:	41 8d       	ldd	r20, Z+25	; 0x19
    4636:	52 8d       	ldd	r21, Z+26	; 0x1a
    4638:	ba 01       	movw	r22, r20
    463a:	a9 01       	movw	r20, r18
    463c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZNK8SdVolume17clusterStartBlockEm>
    4640:	dc 01       	movw	r26, r24
    4642:	cb 01       	movw	r24, r22
    4644:	8a 83       	std	Y+2, r24	; 0x02
    4646:	9b 83       	std	Y+3, r25	; 0x03
    4648:	ac 83       	std	Y+4, r26	; 0x04
    464a:	bd 83       	std	Y+5, r27	; 0x05
  if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) return false;
    464c:	8a 81       	ldd	r24, Y+2	; 0x02
    464e:	9b 81       	ldd	r25, Y+3	; 0x03
    4650:	ac 81       	ldd	r26, Y+4	; 0x04
    4652:	bd 81       	ldd	r27, Y+5	; 0x05
    4654:	bc 01       	movw	r22, r24
    4656:	cd 01       	movw	r24, r26
    4658:	41 e0       	ldi	r20, 0x01	; 1
    465a:	0e 94 83 24 	call	0x4906	; 0x4906 <_ZN8SdVolume13cacheRawBlockEmh>
    465e:	1e a6       	std	Y+46, r1	; 0x2e
    4660:	88 23       	and	r24, r24
    4662:	11 f4       	brne	.+4      	; 0x4668 <_ZN6SdFile7makeDirEPS_PKc+0x132>
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	8e a7       	std	Y+46, r24	; 0x2e
    4668:	8e a5       	ldd	r24, Y+46	; 0x2e
    466a:	88 23       	and	r24, r24
    466c:	11 f0       	breq	.+4      	; 0x4672 <_ZN6SdFile7makeDirEPS_PKc+0x13c>
    466e:	19 aa       	std	Y+49, r1	; 0x31
    4670:	48 c0       	rjmp	.+144    	; 0x4702 <_ZN6SdFile7makeDirEPS_PKc+0x1cc>

  // copy '.' to block
  memcpy(&SdVolume::cacheBuffer_.dir[0], &d, sizeof(d));
    4672:	84 e4       	ldi	r24, 0x44	; 68
    4674:	93 e0       	ldi	r25, 0x03	; 3
    4676:	9e 01       	movw	r18, r28
    4678:	28 5f       	subi	r18, 0xF8	; 248
    467a:	3f 4f       	sbci	r19, 0xFF	; 255
    467c:	b9 01       	movw	r22, r18
    467e:	40 e2       	ldi	r20, 0x20	; 32
    4680:	50 e0       	ldi	r21, 0x00	; 0
    4682:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>

  // make entry for '..'
  d.name[1] = '.';
    4686:	8e e2       	ldi	r24, 0x2E	; 46
    4688:	89 87       	std	Y+9, r24	; 0x09
  if (dir->isRoot()) {
    468a:	8a a5       	ldd	r24, Y+42	; 0x2a
    468c:	9b a5       	ldd	r25, Y+43	; 0x2b
    468e:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZNK6SdFile6isRootEv>
    4692:	8b ab       	std	Y+51, r24	; 0x33
    4694:	8b a9       	ldd	r24, Y+51	; 0x33
    4696:	88 23       	and	r24, r24
    4698:	11 f0       	breq	.+4      	; 0x469e <_ZN6SdFile7makeDirEPS_PKc+0x168>
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	8b ab       	std	Y+51, r24	; 0x33
    469e:	8b a9       	ldd	r24, Y+51	; 0x33
    46a0:	88 23       	and	r24, r24
    46a2:	29 f0       	breq	.+10     	; 0x46ae <_ZN6SdFile7makeDirEPS_PKc+0x178>
    d.firstClusterLow = 0;
    46a4:	1b a2       	std	Y+35, r1	; 0x23
    46a6:	1a a2       	std	Y+34, r1	; 0x22
    d.firstClusterHigh = 0;
    46a8:	1d 8e       	std	Y+29, r1	; 0x1d
    46aa:	1c 8e       	std	Y+28, r1	; 0x1c
    46ac:	13 c0       	rjmp	.+38     	; 0x46d4 <_ZN6SdFile7makeDirEPS_PKc+0x19e>
  } else {
    d.firstClusterLow = dir->firstCluster_ & 0XFFFF;
    46ae:	ea a5       	ldd	r30, Y+42	; 0x2a
    46b0:	fb a5       	ldd	r31, Y+43	; 0x2b
    46b2:	87 89       	ldd	r24, Z+23	; 0x17
    46b4:	90 8d       	ldd	r25, Z+24	; 0x18
    46b6:	a1 8d       	ldd	r26, Z+25	; 0x19
    46b8:	b2 8d       	ldd	r27, Z+26	; 0x1a
    46ba:	9b a3       	std	Y+35, r25	; 0x23
    46bc:	8a a3       	std	Y+34, r24	; 0x22
    d.firstClusterHigh = dir->firstCluster_ >> 16;
    46be:	ea a5       	ldd	r30, Y+42	; 0x2a
    46c0:	fb a5       	ldd	r31, Y+43	; 0x2b
    46c2:	87 89       	ldd	r24, Z+23	; 0x17
    46c4:	90 8d       	ldd	r25, Z+24	; 0x18
    46c6:	a1 8d       	ldd	r26, Z+25	; 0x19
    46c8:	b2 8d       	ldd	r27, Z+26	; 0x1a
    46ca:	cd 01       	movw	r24, r26
    46cc:	aa 27       	eor	r26, r26
    46ce:	bb 27       	eor	r27, r27
    46d0:	9d 8f       	std	Y+29, r25	; 0x1d
    46d2:	8c 8f       	std	Y+28, r24	; 0x1c
  }
  // copy '..' to block
  memcpy(&SdVolume::cacheBuffer_.dir[1], &d, sizeof(d));
    46d4:	84 e6       	ldi	r24, 0x64	; 100
    46d6:	93 e0       	ldi	r25, 0x03	; 3
    46d8:	9e 01       	movw	r18, r28
    46da:	28 5f       	subi	r18, 0xF8	; 248
    46dc:	3f 4f       	sbci	r19, 0xFF	; 255
    46de:	b9 01       	movw	r22, r18
    46e0:	40 e2       	ldi	r20, 0x20	; 32
    46e2:	50 e0       	ldi	r21, 0x00	; 0
    46e4:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>

  // set position after '..'
  curPosition_ = 2 * sizeof(d);
    46e8:	e8 a5       	ldd	r30, Y+40	; 0x28
    46ea:	f9 a5       	ldd	r31, Y+41	; 0x29
    46ec:	80 e4       	ldi	r24, 0x40	; 64
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	a0 e0       	ldi	r26, 0x00	; 0
    46f2:	b0 e0       	ldi	r27, 0x00	; 0
    46f4:	82 87       	std	Z+10, r24	; 0x0a
    46f6:	93 87       	std	Z+11, r25	; 0x0b
    46f8:	a4 87       	std	Z+12, r26	; 0x0c
    46fa:	b5 87       	std	Z+13, r27	; 0x0d

  // write first block
  return SdVolume::cacheFlush();
    46fc:	0e 94 d7 23 	call	0x47ae	; 0x47ae <_ZN8SdVolume10cacheFlushEv>
    4700:	89 ab       	std	Y+49, r24	; 0x31
    4702:	89 a9       	ldd	r24, Y+49	; 0x31
}
    4704:	e3 96       	adiw	r28, 0x33	; 51
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	f8 94       	cli
    470a:	de bf       	out	0x3e, r29	; 62
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	cd bf       	out	0x3d, r28	; 61
    4710:	cf 91       	pop	r28
    4712:	df 91       	pop	r29
    4714:	08 95       	ret
    4716:	df 93       	push	r29
    4718:	cf 93       	push	r28
    471a:	cd b7       	in	r28, 0x3d	; 61
    471c:	de b7       	in	r29, 0x3e	; 62
    471e:	80 91 46 05 	lds	r24, 0x0546
    4722:	81 60       	ori	r24, 0x01	; 1
    4724:	80 93 46 05 	sts	0x0546, r24
    4728:	cf 91       	pop	r28
    472a:	df 91       	pop	r29
    472c:	08 95       	ret
    472e:	df 93       	push	r29
    4730:	cf 93       	push	r28
    4732:	cd b7       	in	r28, 0x3d	; 61
    4734:	de b7       	in	r29, 0x3e	; 62
    4736:	2b 97       	sbiw	r28, 0x0b	; 11
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	9a 83       	std	Y+2, r25	; 0x02
    4744:	89 83       	std	Y+1, r24	; 0x01
    4746:	4b 83       	std	Y+3, r20	; 0x03
    4748:	5c 83       	std	Y+4, r21	; 0x04
    474a:	6d 83       	std	Y+5, r22	; 0x05
    474c:	7e 83       	std	Y+6, r23	; 0x06
    474e:	e9 81       	ldd	r30, Y+1	; 0x01
    4750:	fa 81       	ldd	r31, Y+2	; 0x02
    4752:	87 89       	ldd	r24, Z+23	; 0x17
    4754:	80 31       	cpi	r24, 0x10	; 16
    4756:	49 f4       	brne	.+18     	; 0x476a <_ZN6SdFile7makeDirEPS_PKc+0x234>
    4758:	28 ef       	ldi	r18, 0xF8	; 248
    475a:	3f ef       	ldi	r19, 0xFF	; 255
    475c:	40 e0       	ldi	r20, 0x00	; 0
    475e:	50 e0       	ldi	r21, 0x00	; 0
    4760:	2f 83       	std	Y+7, r18	; 0x07
    4762:	38 87       	std	Y+8, r19	; 0x08
    4764:	49 87       	std	Y+9, r20	; 0x09
    4766:	5a 87       	std	Y+10, r21	; 0x0a
    4768:	08 c0       	rjmp	.+16     	; 0x477a <_ZN6SdFile7makeDirEPS_PKc+0x244>
    476a:	88 ef       	ldi	r24, 0xF8	; 248
    476c:	9f ef       	ldi	r25, 0xFF	; 255
    476e:	af ef       	ldi	r26, 0xFF	; 255
    4770:	bf e0       	ldi	r27, 0x0F	; 15
    4772:	8f 83       	std	Y+7, r24	; 0x07
    4774:	98 87       	std	Y+8, r25	; 0x08
    4776:	a9 87       	std	Y+9, r26	; 0x09
    4778:	ba 87       	std	Y+10, r27	; 0x0a
    477a:	1b 86       	std	Y+11, r1	; 0x0b
    477c:	8b 81       	ldd	r24, Y+3	; 0x03
    477e:	9c 81       	ldd	r25, Y+4	; 0x04
    4780:	ad 81       	ldd	r26, Y+5	; 0x05
    4782:	be 81       	ldd	r27, Y+6	; 0x06
    4784:	2f 81       	ldd	r18, Y+7	; 0x07
    4786:	38 85       	ldd	r19, Y+8	; 0x08
    4788:	49 85       	ldd	r20, Y+9	; 0x09
    478a:	5a 85       	ldd	r21, Y+10	; 0x0a
    478c:	82 17       	cp	r24, r18
    478e:	93 07       	cpc	r25, r19
    4790:	a4 07       	cpc	r26, r20
    4792:	b5 07       	cpc	r27, r21
    4794:	10 f0       	brcs	.+4      	; 0x479a <_ZN6SdFile7makeDirEPS_PKc+0x264>
    4796:	31 e0       	ldi	r19, 0x01	; 1
    4798:	3b 87       	std	Y+11, r19	; 0x0b
    479a:	8b 85       	ldd	r24, Y+11	; 0x0b
    479c:	2b 96       	adiw	r28, 0x0b	; 11
    479e:	0f b6       	in	r0, 0x3f	; 63
    47a0:	f8 94       	cli
    47a2:	de bf       	out	0x3e, r29	; 62
    47a4:	0f be       	out	0x3f, r0	; 63
    47a6:	cd bf       	out	0x3d, r28	; 61
    47a8:	cf 91       	pop	r28
    47aa:	df 91       	pop	r29
    47ac:	08 95       	ret

000047ae <_ZN8SdVolume10cacheFlushEv>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    47ae:	df 93       	push	r29
    47b0:	cf 93       	push	r28
    47b2:	00 d0       	rcall	.+0      	; 0x47b4 <_ZN8SdVolume10cacheFlushEv+0x6>
    47b4:	0f 92       	push	r0
    47b6:	cd b7       	in	r28, 0x3d	; 61
    47b8:	de b7       	in	r29, 0x3e	; 62
  if (cacheDirty_) {
    47ba:	80 91 46 05 	lds	r24, 0x0546
    47be:	88 23       	and	r24, r24
    47c0:	09 f4       	brne	.+2      	; 0x47c4 <_ZN8SdVolume10cacheFlushEv+0x16>
    47c2:	50 c0       	rjmp	.+160    	; 0x4864 <_ZN8SdVolume10cacheFlushEv+0xb6>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    47c4:	80 91 44 05 	lds	r24, 0x0544
    47c8:	90 91 45 05 	lds	r25, 0x0545
    47cc:	20 91 68 00 	lds	r18, 0x0068
    47d0:	30 91 69 00 	lds	r19, 0x0069
    47d4:	40 91 6a 00 	lds	r20, 0x006A
    47d8:	50 91 6b 00 	lds	r21, 0x006B
    47dc:	e4 e4       	ldi	r30, 0x44	; 68
    47de:	f3 e0       	ldi	r31, 0x03	; 3
    47e0:	ba 01       	movw	r22, r20
    47e2:	a9 01       	movw	r20, r18
    47e4:	9f 01       	movw	r18, r30
    47e6:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN7Sd2Card10writeBlockEmPKh>
    47ea:	1b 82       	std	Y+3, r1	; 0x03
    47ec:	88 23       	and	r24, r24
    47ee:	11 f4       	brne	.+4      	; 0x47f4 <_ZN8SdVolume10cacheFlushEv+0x46>
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	8b 83       	std	Y+3, r24	; 0x03
    47f4:	8b 81       	ldd	r24, Y+3	; 0x03
    47f6:	88 23       	and	r24, r24
    47f8:	11 f0       	breq	.+4      	; 0x47fe <_ZN8SdVolume10cacheFlushEv+0x50>
      return false;
    47fa:	1a 82       	std	Y+2, r1	; 0x02
    47fc:	35 c0       	rjmp	.+106    	; 0x4868 <_ZN8SdVolume10cacheFlushEv+0xba>
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    47fe:	80 91 47 05 	lds	r24, 0x0547
    4802:	90 91 48 05 	lds	r25, 0x0548
    4806:	a0 91 49 05 	lds	r26, 0x0549
    480a:	b0 91 4a 05 	lds	r27, 0x054A
    480e:	00 97       	sbiw	r24, 0x00	; 0
    4810:	a1 05       	cpc	r26, r1
    4812:	b1 05       	cpc	r27, r1
    4814:	29 f1       	breq	.+74     	; 0x4860 <_ZN8SdVolume10cacheFlushEv+0xb2>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    4816:	80 91 44 05 	lds	r24, 0x0544
    481a:	90 91 45 05 	lds	r25, 0x0545
    481e:	20 91 47 05 	lds	r18, 0x0547
    4822:	30 91 48 05 	lds	r19, 0x0548
    4826:	40 91 49 05 	lds	r20, 0x0549
    482a:	50 91 4a 05 	lds	r21, 0x054A
    482e:	e4 e4       	ldi	r30, 0x44	; 68
    4830:	f3 e0       	ldi	r31, 0x03	; 3
    4832:	ba 01       	movw	r22, r20
    4834:	a9 01       	movw	r20, r18
    4836:	9f 01       	movw	r18, r30
    4838:	0e 94 a5 04 	call	0x94a	; 0x94a <_ZN7Sd2Card10writeBlockEmPKh>
    483c:	19 82       	std	Y+1, r1	; 0x01
    483e:	88 23       	and	r24, r24
    4840:	11 f4       	brne	.+4      	; 0x4846 <_ZN8SdVolume10cacheFlushEv+0x98>
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	89 83       	std	Y+1, r24	; 0x01
    4846:	89 81       	ldd	r24, Y+1	; 0x01
    4848:	88 23       	and	r24, r24
    484a:	11 f0       	breq	.+4      	; 0x4850 <_ZN8SdVolume10cacheFlushEv+0xa2>
        return false;
    484c:	1a 82       	std	Y+2, r1	; 0x02
    484e:	0c c0       	rjmp	.+24     	; 0x4868 <_ZN8SdVolume10cacheFlushEv+0xba>
      }
      cacheMirrorBlock_ = 0;
    4850:	10 92 47 05 	sts	0x0547, r1
    4854:	10 92 48 05 	sts	0x0548, r1
    4858:	10 92 49 05 	sts	0x0549, r1
    485c:	10 92 4a 05 	sts	0x054A, r1
    }
    cacheDirty_ = 0;
    4860:	10 92 46 05 	sts	0x0546, r1
  }
  return true;
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	8a 83       	std	Y+2, r24	; 0x02
    4868:	8a 81       	ldd	r24, Y+2	; 0x02
}
    486a:	0f 90       	pop	r0
    486c:	0f 90       	pop	r0
    486e:	0f 90       	pop	r0
    4870:	cf 91       	pop	r28
    4872:	df 91       	pop	r29
    4874:	08 95       	ret

00004876 <_ZN8SdVolume14cacheZeroBlockEm>:
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    4876:	df 93       	push	r29
    4878:	cf 93       	push	r28
    487a:	cd b7       	in	r28, 0x3d	; 61
    487c:	de b7       	in	r29, 0x3e	; 62
    487e:	28 97       	sbiw	r28, 0x08	; 8
    4880:	0f b6       	in	r0, 0x3f	; 63
    4882:	f8 94       	cli
    4884:	de bf       	out	0x3e, r29	; 62
    4886:	0f be       	out	0x3f, r0	; 63
    4888:	cd bf       	out	0x3d, r28	; 61
    488a:	6b 83       	std	Y+3, r22	; 0x03
    488c:	7c 83       	std	Y+4, r23	; 0x04
    488e:	8d 83       	std	Y+5, r24	; 0x05
    4890:	9e 83       	std	Y+6, r25	; 0x06
  if (!cacheFlush()) return false;
    4892:	0e 94 d7 23 	call	0x47ae	; 0x47ae <_ZN8SdVolume10cacheFlushEv>
    4896:	18 86       	std	Y+8, r1	; 0x08
    4898:	88 23       	and	r24, r24
    489a:	11 f4       	brne	.+4      	; 0x48a0 <_ZN8SdVolume14cacheZeroBlockEm+0x2a>
    489c:	21 e0       	ldi	r18, 0x01	; 1
    489e:	28 87       	std	Y+8, r18	; 0x08
    48a0:	88 85       	ldd	r24, Y+8	; 0x08
    48a2:	88 23       	and	r24, r24
    48a4:	11 f0       	breq	.+4      	; 0x48aa <_ZN8SdVolume14cacheZeroBlockEm+0x34>
    48a6:	1f 82       	std	Y+7, r1	; 0x07
    48a8:	24 c0       	rjmp	.+72     	; 0x48f2 <_ZN8SdVolume14cacheZeroBlockEm+0x7c>

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    48aa:	1a 82       	std	Y+2, r1	; 0x02
    48ac:	19 82       	std	Y+1, r1	; 0x01
    48ae:	0b c0       	rjmp	.+22     	; 0x48c6 <_ZN8SdVolume14cacheZeroBlockEm+0x50>
    cacheBuffer_.data[i] = 0;
    48b0:	89 81       	ldd	r24, Y+1	; 0x01
    48b2:	9a 81       	ldd	r25, Y+2	; 0x02
    48b4:	fc 01       	movw	r30, r24
    48b6:	ec 5b       	subi	r30, 0xBC	; 188
    48b8:	fc 4f       	sbci	r31, 0xFC	; 252
    48ba:	10 82       	st	Z, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    48bc:	89 81       	ldd	r24, Y+1	; 0x01
    48be:	9a 81       	ldd	r25, Y+2	; 0x02
    48c0:	01 96       	adiw	r24, 0x01	; 1
    48c2:	9a 83       	std	Y+2, r25	; 0x02
    48c4:	89 83       	std	Y+1, r24	; 0x01
    48c6:	89 81       	ldd	r24, Y+1	; 0x01
    48c8:	9a 81       	ldd	r25, Y+2	; 0x02
    48ca:	22 e0       	ldi	r18, 0x02	; 2
    48cc:	80 30       	cpi	r24, 0x00	; 0
    48ce:	92 07       	cpc	r25, r18
    48d0:	78 f3       	brcs	.-34     	; 0x48b0 <_ZN8SdVolume14cacheZeroBlockEm+0x3a>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    48d2:	8b 81       	ldd	r24, Y+3	; 0x03
    48d4:	9c 81       	ldd	r25, Y+4	; 0x04
    48d6:	ad 81       	ldd	r26, Y+5	; 0x05
    48d8:	be 81       	ldd	r27, Y+6	; 0x06
    48da:	80 93 68 00 	sts	0x0068, r24
    48de:	90 93 69 00 	sts	0x0069, r25
    48e2:	a0 93 6a 00 	sts	0x006A, r26
    48e6:	b0 93 6b 00 	sts	0x006B, r27
  cacheSetDirty();
    48ea:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN8SdVolume13cacheSetDirtyEv>
  return true;
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	8f 83       	std	Y+7, r24	; 0x07
    48f2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    48f4:	28 96       	adiw	r28, 0x08	; 8
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	f8 94       	cli
    48fa:	de bf       	out	0x3e, r29	; 62
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	cd bf       	out	0x3d, r28	; 61
    4900:	cf 91       	pop	r28
    4902:	df 91       	pop	r29
    4904:	08 95       	ret

00004906 <_ZN8SdVolume13cacheRawBlockEmh>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    4906:	df 93       	push	r29
    4908:	cf 93       	push	r28
    490a:	cd b7       	in	r28, 0x3d	; 61
    490c:	de b7       	in	r29, 0x3e	; 62
    490e:	28 97       	sbiw	r28, 0x08	; 8
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	f8 94       	cli
    4914:	de bf       	out	0x3e, r29	; 62
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	cd bf       	out	0x3d, r28	; 61
    491a:	69 83       	std	Y+1, r22	; 0x01
    491c:	7a 83       	std	Y+2, r23	; 0x02
    491e:	8b 83       	std	Y+3, r24	; 0x03
    4920:	9c 83       	std	Y+4, r25	; 0x04
    4922:	4d 83       	std	Y+5, r20	; 0x05
  if (cacheBlockNumber_ != blockNumber) {
    4924:	20 91 68 00 	lds	r18, 0x0068
    4928:	30 91 69 00 	lds	r19, 0x0069
    492c:	40 91 6a 00 	lds	r20, 0x006A
    4930:	50 91 6b 00 	lds	r21, 0x006B
    4934:	89 81       	ldd	r24, Y+1	; 0x01
    4936:	9a 81       	ldd	r25, Y+2	; 0x02
    4938:	ab 81       	ldd	r26, Y+3	; 0x03
    493a:	bc 81       	ldd	r27, Y+4	; 0x04
    493c:	28 17       	cp	r18, r24
    493e:	39 07       	cpc	r19, r25
    4940:	4a 07       	cpc	r20, r26
    4942:	5b 07       	cpc	r21, r27
    4944:	89 f1       	breq	.+98     	; 0x49a8 <_ZN8SdVolume13cacheRawBlockEmh+0xa2>
    if (!cacheFlush()) return false;
    4946:	0e 94 d7 23 	call	0x47ae	; 0x47ae <_ZN8SdVolume10cacheFlushEv>
    494a:	18 86       	std	Y+8, r1	; 0x08
    494c:	88 23       	and	r24, r24
    494e:	11 f4       	brne	.+4      	; 0x4954 <_ZN8SdVolume13cacheRawBlockEmh+0x4e>
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	88 87       	std	Y+8, r24	; 0x08
    4954:	88 85       	ldd	r24, Y+8	; 0x08
    4956:	88 23       	and	r24, r24
    4958:	11 f0       	breq	.+4      	; 0x495e <_ZN8SdVolume13cacheRawBlockEmh+0x58>
    495a:	1f 82       	std	Y+7, r1	; 0x07
    495c:	2d c0       	rjmp	.+90     	; 0x49b8 <_ZN8SdVolume13cacheRawBlockEmh+0xb2>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    495e:	80 91 44 05 	lds	r24, 0x0544
    4962:	90 91 45 05 	lds	r25, 0x0545
    4966:	29 81       	ldd	r18, Y+1	; 0x01
    4968:	3a 81       	ldd	r19, Y+2	; 0x02
    496a:	4b 81       	ldd	r20, Y+3	; 0x03
    496c:	5c 81       	ldd	r21, Y+4	; 0x04
    496e:	e4 e4       	ldi	r30, 0x44	; 68
    4970:	f3 e0       	ldi	r31, 0x03	; 3
    4972:	ba 01       	movw	r22, r20
    4974:	a9 01       	movw	r20, r18
    4976:	9f 01       	movw	r18, r30
    4978:	0e 94 06 08 	call	0x100c	; 0x100c <_ZN7Sd2Card9readBlockEmPh>
    497c:	1e 82       	std	Y+6, r1	; 0x06
    497e:	88 23       	and	r24, r24
    4980:	11 f4       	brne	.+4      	; 0x4986 <_ZN8SdVolume13cacheRawBlockEmh+0x80>
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	8e 83       	std	Y+6, r24	; 0x06
    4986:	8e 81       	ldd	r24, Y+6	; 0x06
    4988:	88 23       	and	r24, r24
    498a:	11 f0       	breq	.+4      	; 0x4990 <_ZN8SdVolume13cacheRawBlockEmh+0x8a>
    498c:	1f 82       	std	Y+7, r1	; 0x07
    498e:	14 c0       	rjmp	.+40     	; 0x49b8 <_ZN8SdVolume13cacheRawBlockEmh+0xb2>
    cacheBlockNumber_ = blockNumber;
    4990:	89 81       	ldd	r24, Y+1	; 0x01
    4992:	9a 81       	ldd	r25, Y+2	; 0x02
    4994:	ab 81       	ldd	r26, Y+3	; 0x03
    4996:	bc 81       	ldd	r27, Y+4	; 0x04
    4998:	80 93 68 00 	sts	0x0068, r24
    499c:	90 93 69 00 	sts	0x0069, r25
    49a0:	a0 93 6a 00 	sts	0x006A, r26
    49a4:	b0 93 6b 00 	sts	0x006B, r27
  }
  cacheDirty_ |= action;
    49a8:	80 91 46 05 	lds	r24, 0x0546
    49ac:	9d 81       	ldd	r25, Y+5	; 0x05
    49ae:	89 2b       	or	r24, r25
    49b0:	80 93 46 05 	sts	0x0546, r24
  return true;
    49b4:	81 e0       	ldi	r24, 0x01	; 1
    49b6:	8f 83       	std	Y+7, r24	; 0x07
    49b8:	8f 81       	ldd	r24, Y+7	; 0x07
}
    49ba:	28 96       	adiw	r28, 0x08	; 8
    49bc:	0f b6       	in	r0, 0x3f	; 63
    49be:	f8 94       	cli
    49c0:	de bf       	out	0x3e, r29	; 62
    49c2:	0f be       	out	0x3f, r0	; 63
    49c4:	cd bf       	out	0x3d, r28	; 61
    49c6:	cf 91       	pop	r28
    49c8:	df 91       	pop	r29
    49ca:	08 95       	ret

000049cc <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    49cc:	ef 92       	push	r14
    49ce:	ff 92       	push	r15
    49d0:	0f 93       	push	r16
    49d2:	1f 93       	push	r17
    49d4:	df 93       	push	r29
    49d6:	cf 93       	push	r28
    49d8:	cd b7       	in	r28, 0x3d	; 61
    49da:	de b7       	in	r29, 0x3e	; 62
    49dc:	6e 97       	sbiw	r28, 0x1e	; 30
    49de:	0f b6       	in	r0, 0x3f	; 63
    49e0:	f8 94       	cli
    49e2:	de bf       	out	0x3e, r29	; 62
    49e4:	0f be       	out	0x3f, r0	; 63
    49e6:	cd bf       	out	0x3d, r28	; 61
    49e8:	9e 87       	std	Y+14, r25	; 0x0e
    49ea:	8d 87       	std	Y+13, r24	; 0x0d
    49ec:	78 8b       	std	Y+16, r23	; 0x10
    49ee:	6f 87       	std	Y+15, r22	; 0x0f
    49f0:	49 8b       	std	Y+17, r20	; 0x11
  uint32_t volumeStartBlock = 0;
    49f2:	19 86       	std	Y+9, r1	; 0x09
    49f4:	1a 86       	std	Y+10, r1	; 0x0a
    49f6:	1b 86       	std	Y+11, r1	; 0x0b
    49f8:	1c 86       	std	Y+12, r1	; 0x0c
  sdCard_ = dev;
    49fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    49fc:	98 89       	ldd	r25, Y+16	; 0x10
    49fe:	90 93 45 05 	sts	0x0545, r25
    4a02:	80 93 44 05 	sts	0x0544, r24
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4a06:	89 89       	ldd	r24, Y+17	; 0x11
    4a08:	88 23       	and	r24, r24
    4a0a:	09 f4       	brne	.+2      	; 0x4a0e <_ZN8SdVolume4initEP7Sd2Cardh+0x42>
    4a0c:	52 c0       	rjmp	.+164    	; 0x4ab2 <_ZN8SdVolume4initEP7Sd2Cardh+0xe6>
    if (part > 4)return false;
    4a0e:	89 89       	ldd	r24, Y+17	; 0x11
    4a10:	85 30       	cpi	r24, 0x05	; 5
    4a12:	10 f0       	brcs	.+4      	; 0x4a18 <_ZN8SdVolume4initEP7Sd2Cardh+0x4c>
    4a14:	1e 8e       	std	Y+30, r1	; 0x1e
    4a16:	d9 c1       	rjmp	.+946    	; 0x4dca <_ZN8SdVolume4initEP7Sd2Cardh+0x3fe>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    4a18:	89 85       	ldd	r24, Y+9	; 0x09
    4a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a1c:	ab 85       	ldd	r26, Y+11	; 0x0b
    4a1e:	bc 85       	ldd	r27, Y+12	; 0x0c
    4a20:	bc 01       	movw	r22, r24
    4a22:	cd 01       	movw	r24, r26
    4a24:	40 e0       	ldi	r20, 0x00	; 0
    4a26:	0e 94 83 24 	call	0x4906	; 0x4906 <_ZN8SdVolume13cacheRawBlockEmh>
    4a2a:	1d 8e       	std	Y+29, r1	; 0x1d
    4a2c:	88 23       	and	r24, r24
    4a2e:	11 f4       	brne	.+4      	; 0x4a34 <_ZN8SdVolume4initEP7Sd2Cardh+0x68>
    4a30:	01 e0       	ldi	r16, 0x01	; 1
    4a32:	0d 8f       	std	Y+29, r16	; 0x1d
    4a34:	1d 8d       	ldd	r17, Y+29	; 0x1d
    4a36:	11 23       	and	r17, r17
    4a38:	11 f0       	breq	.+4      	; 0x4a3e <_ZN8SdVolume4initEP7Sd2Cardh+0x72>
    4a3a:	1e 8e       	std	Y+30, r1	; 0x1e
    4a3c:	c6 c1       	rjmp	.+908    	; 0x4dca <_ZN8SdVolume4initEP7Sd2Cardh+0x3fe>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    4a3e:	89 89       	ldd	r24, Y+17	; 0x11
    4a40:	88 2f       	mov	r24, r24
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	01 97       	sbiw	r24, 0x01	; 1
    4a46:	82 95       	swap	r24
    4a48:	92 95       	swap	r25
    4a4a:	90 7f       	andi	r25, 0xF0	; 240
    4a4c:	98 27       	eor	r25, r24
    4a4e:	80 7f       	andi	r24, 0xF0	; 240
    4a50:	98 27       	eor	r25, r24
    4a52:	82 54       	subi	r24, 0x42	; 66
    4a54:	9e 4f       	sbci	r25, 0xFE	; 254
    4a56:	8c 5b       	subi	r24, 0xBC	; 188
    4a58:	9c 4f       	sbci	r25, 0xFC	; 252
    4a5a:	9a 83       	std	Y+2, r25	; 0x02
    4a5c:	89 83       	std	Y+1, r24	; 0x01
    if ((p->boot & 0X7F) !=0  ||
    4a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    4a60:	fa 81       	ldd	r31, Y+2	; 0x02
    4a62:	80 81       	ld	r24, Z
    4a64:	88 2f       	mov	r24, r24
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	8f 77       	andi	r24, 0x7F	; 127
    4a6a:	90 70       	andi	r25, 0x00	; 0
    4a6c:	00 97       	sbiw	r24, 0x00	; 0
    4a6e:	a9 f4       	brne	.+42     	; 0x4a9a <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    4a70:	e9 81       	ldd	r30, Y+1	; 0x01
    4a72:	fa 81       	ldd	r31, Y+2	; 0x02
    4a74:	84 85       	ldd	r24, Z+12	; 0x0c
    4a76:	95 85       	ldd	r25, Z+13	; 0x0d
    4a78:	a6 85       	ldd	r26, Z+14	; 0x0e
    4a7a:	b7 85       	ldd	r27, Z+15	; 0x0f
    4a7c:	84 36       	cpi	r24, 0x64	; 100
    4a7e:	91 05       	cpc	r25, r1
    4a80:	a1 05       	cpc	r26, r1
    4a82:	b1 05       	cpc	r27, r1
    4a84:	50 f0       	brcs	.+20     	; 0x4a9a <_ZN8SdVolume4initEP7Sd2Cardh+0xce>
    4a86:	e9 81       	ldd	r30, Y+1	; 0x01
    4a88:	fa 81       	ldd	r31, Y+2	; 0x02
    4a8a:	80 85       	ldd	r24, Z+8	; 0x08
    4a8c:	91 85       	ldd	r25, Z+9	; 0x09
    4a8e:	a2 85       	ldd	r26, Z+10	; 0x0a
    4a90:	b3 85       	ldd	r27, Z+11	; 0x0b
    4a92:	00 97       	sbiw	r24, 0x00	; 0
    4a94:	a1 05       	cpc	r26, r1
    4a96:	b1 05       	cpc	r27, r1
    4a98:	11 f4       	brne	.+4      	; 0x4a9e <_ZN8SdVolume4initEP7Sd2Cardh+0xd2>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
      // not a valid partition
      return false;
    4a9a:	1e 8e       	std	Y+30, r1	; 0x1e
    4a9c:	96 c1       	rjmp	.+812    	; 0x4dca <_ZN8SdVolume4initEP7Sd2Cardh+0x3fe>
    }
    volumeStartBlock = p->firstSector;
    4a9e:	e9 81       	ldd	r30, Y+1	; 0x01
    4aa0:	fa 81       	ldd	r31, Y+2	; 0x02
    4aa2:	80 85       	ldd	r24, Z+8	; 0x08
    4aa4:	91 85       	ldd	r25, Z+9	; 0x09
    4aa6:	a2 85       	ldd	r26, Z+10	; 0x0a
    4aa8:	b3 85       	ldd	r27, Z+11	; 0x0b
    4aaa:	89 87       	std	Y+9, r24	; 0x09
    4aac:	9a 87       	std	Y+10, r25	; 0x0a
    4aae:	ab 87       	std	Y+11, r26	; 0x0b
    4ab0:	bc 87       	std	Y+12, r27	; 0x0c
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    4ab2:	89 85       	ldd	r24, Y+9	; 0x09
    4ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ab6:	ab 85       	ldd	r26, Y+11	; 0x0b
    4ab8:	bc 85       	ldd	r27, Y+12	; 0x0c
    4aba:	bc 01       	movw	r22, r24
    4abc:	cd 01       	movw	r24, r26
    4abe:	40 e0       	ldi	r20, 0x00	; 0
    4ac0:	0e 94 83 24 	call	0x4906	; 0x4906 <_ZN8SdVolume13cacheRawBlockEmh>
    4ac4:	1c 8e       	std	Y+28, r1	; 0x1c
    4ac6:	88 23       	and	r24, r24
    4ac8:	11 f4       	brne	.+4      	; 0x4ace <_ZN8SdVolume4initEP7Sd2Cardh+0x102>
    4aca:	21 e0       	ldi	r18, 0x01	; 1
    4acc:	2c 8f       	std	Y+28, r18	; 0x1c
    4ace:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4ad0:	33 23       	and	r19, r19
    4ad2:	11 f0       	breq	.+4      	; 0x4ad8 <_ZN8SdVolume4initEP7Sd2Cardh+0x10c>
    4ad4:	1e 8e       	std	Y+30, r1	; 0x1e
    4ad6:	79 c1       	rjmp	.+754    	; 0x4dca <_ZN8SdVolume4initEP7Sd2Cardh+0x3fe>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
    4ad8:	8f e4       	ldi	r24, 0x4F	; 79
    4ada:	93 e0       	ldi	r25, 0x03	; 3
    4adc:	98 87       	std	Y+8, r25	; 0x08
    4ade:	8f 83       	std	Y+7, r24	; 0x07
  if (bpb->bytesPerSector != 512 ||
    4ae0:	ef 81       	ldd	r30, Y+7	; 0x07
    4ae2:	f8 85       	ldd	r31, Y+8	; 0x08
    4ae4:	80 81       	ld	r24, Z
    4ae6:	91 81       	ldd	r25, Z+1	; 0x01
    4ae8:	42 e0       	ldi	r20, 0x02	; 2
    4aea:	80 30       	cpi	r24, 0x00	; 0
    4aec:	94 07       	cpc	r25, r20
    4aee:	81 f4       	brne	.+32     	; 0x4b10 <_ZN8SdVolume4initEP7Sd2Cardh+0x144>
    4af0:	ef 81       	ldd	r30, Y+7	; 0x07
    4af2:	f8 85       	ldd	r31, Y+8	; 0x08
    4af4:	85 81       	ldd	r24, Z+5	; 0x05
    4af6:	88 23       	and	r24, r24
    4af8:	59 f0       	breq	.+22     	; 0x4b10 <_ZN8SdVolume4initEP7Sd2Cardh+0x144>
    4afa:	ef 81       	ldd	r30, Y+7	; 0x07
    4afc:	f8 85       	ldd	r31, Y+8	; 0x08
    4afe:	83 81       	ldd	r24, Z+3	; 0x03
    4b00:	94 81       	ldd	r25, Z+4	; 0x04
    4b02:	00 97       	sbiw	r24, 0x00	; 0
    4b04:	29 f0       	breq	.+10     	; 0x4b10 <_ZN8SdVolume4initEP7Sd2Cardh+0x144>
    4b06:	ef 81       	ldd	r30, Y+7	; 0x07
    4b08:	f8 85       	ldd	r31, Y+8	; 0x08
    4b0a:	82 81       	ldd	r24, Z+2	; 0x02
    4b0c:	88 23       	and	r24, r24
    4b0e:	11 f4       	brne	.+4      	; 0x4b14 <_ZN8SdVolume4initEP7Sd2Cardh+0x148>
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
    4b10:	1e 8e       	std	Y+30, r1	; 0x1e
    4b12:	5b c1       	rjmp	.+694    	; 0x4dca <_ZN8SdVolume4initEP7Sd2Cardh+0x3fe>
  }
  fatCount_ = bpb->fatCount;
    4b14:	ef 81       	ldd	r30, Y+7	; 0x07
    4b16:	f8 85       	ldd	r31, Y+8	; 0x08
    4b18:	85 81       	ldd	r24, Z+5	; 0x05
    4b1a:	ed 85       	ldd	r30, Y+13	; 0x0d
    4b1c:	fe 85       	ldd	r31, Y+14	; 0x0e
    4b1e:	82 8b       	std	Z+18, r24	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    4b20:	ef 81       	ldd	r30, Y+7	; 0x07
    4b22:	f8 85       	ldd	r31, Y+8	; 0x08
    4b24:	82 81       	ldd	r24, Z+2	; 0x02
    4b26:	ed 85       	ldd	r30, Y+13	; 0x0d
    4b28:	fe 85       	ldd	r31, Y+14	; 0x0e
    4b2a:	84 83       	std	Z+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    4b2c:	ed 85       	ldd	r30, Y+13	; 0x0d
    4b2e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4b30:	15 86       	std	Z+13, r1	; 0x0d
    4b32:	14 c0       	rjmp	.+40     	; 0x4b5c <_ZN8SdVolume4initEP7Sd2Cardh+0x190>
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    4b34:	ed 85       	ldd	r30, Y+13	; 0x0d
    4b36:	fe 85       	ldd	r31, Y+14	; 0x0e
    4b38:	55 85       	ldd	r21, Z+13	; 0x0d
    4b3a:	5a 8f       	std	Y+26, r21	; 0x1a
    4b3c:	1b 8e       	std	Y+27, r1	; 0x1b
    4b3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b40:	88 30       	cpi	r24, 0x08	; 8
    4b42:	10 f0       	brcs	.+4      	; 0x4b48 <_ZN8SdVolume4initEP7Sd2Cardh+0x17c>
    4b44:	91 e0       	ldi	r25, 0x01	; 1
    4b46:	9b 8f       	std	Y+27, r25	; 0x1b
    4b48:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4b4a:	8f 5f       	subi	r24, 0xFF	; 255
    4b4c:	ed 85       	ldd	r30, Y+13	; 0x0d
    4b4e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4b50:	85 87       	std	Z+13, r24	; 0x0d
    4b52:	ab 8d       	ldd	r26, Y+27	; 0x1b
    4b54:	aa 23       	and	r26, r26
    4b56:	11 f0       	breq	.+4      	; 0x4b5c <_ZN8SdVolume4initEP7Sd2Cardh+0x190>
    4b58:	1e 8e       	std	Y+30, r1	; 0x1e
    4b5a:	37 c1       	rjmp	.+622    	; 0x4dca <_ZN8SdVolume4initEP7Sd2Cardh+0x3fe>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    4b5c:	ed 85       	ldd	r30, Y+13	; 0x0d
    4b5e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4b60:	84 81       	ldd	r24, Z+4	; 0x04
    4b62:	48 2f       	mov	r20, r24
    4b64:	50 e0       	ldi	r21, 0x00	; 0
    4b66:	ed 85       	ldd	r30, Y+13	; 0x0d
    4b68:	fe 85       	ldd	r31, Y+14	; 0x0e
    4b6a:	85 85       	ldd	r24, Z+13	; 0x0d
    4b6c:	28 2f       	mov	r18, r24
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	90 e0       	ldi	r25, 0x00	; 0
    4b74:	02 2e       	mov	r0, r18
    4b76:	02 c0       	rjmp	.+4      	; 0x4b7c <_ZN8SdVolume4initEP7Sd2Cardh+0x1b0>
    4b78:	88 0f       	add	r24, r24
    4b7a:	99 1f       	adc	r25, r25
    4b7c:	0a 94       	dec	r0
    4b7e:	e2 f7       	brpl	.-8      	; 0x4b78 <_ZN8SdVolume4initEP7Sd2Cardh+0x1ac>
    4b80:	48 17       	cp	r20, r24
    4b82:	59 07       	cpc	r21, r25
    4b84:	b9 f6       	brne	.-82     	; 0x4b34 <_ZN8SdVolume4initEP7Sd2Cardh+0x168>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    4b86:	ef 81       	ldd	r30, Y+7	; 0x07
    4b88:	f8 85       	ldd	r31, Y+8	; 0x08
    4b8a:	83 85       	ldd	r24, Z+11	; 0x0b
    4b8c:	94 85       	ldd	r25, Z+12	; 0x0c
    4b8e:	00 97       	sbiw	r24, 0x00	; 0
    4b90:	61 f0       	breq	.+24     	; 0x4baa <_ZN8SdVolume4initEP7Sd2Cardh+0x1de>
    4b92:	ef 81       	ldd	r30, Y+7	; 0x07
    4b94:	f8 85       	ldd	r31, Y+8	; 0x08
    4b96:	83 85       	ldd	r24, Z+11	; 0x0b
    4b98:	94 85       	ldd	r25, Z+12	; 0x0c
    4b9a:	7c 01       	movw	r14, r24
    4b9c:	00 e0       	ldi	r16, 0x00	; 0
    4b9e:	10 e0       	ldi	r17, 0x00	; 0
    4ba0:	ee 8a       	std	Y+22, r14	; 0x16
    4ba2:	ff 8a       	std	Y+23, r15	; 0x17
    4ba4:	08 8f       	std	Y+24, r16	; 0x18
    4ba6:	19 8f       	std	Y+25, r17	; 0x19
    4ba8:	0a c0       	rjmp	.+20     	; 0x4bbe <_ZN8SdVolume4initEP7Sd2Cardh+0x1f2>
    4baa:	ef 81       	ldd	r30, Y+7	; 0x07
    4bac:	f8 85       	ldd	r31, Y+8	; 0x08
    4bae:	01 8d       	ldd	r16, Z+25	; 0x19
    4bb0:	12 8d       	ldd	r17, Z+26	; 0x1a
    4bb2:	23 8d       	ldd	r18, Z+27	; 0x1b
    4bb4:	34 8d       	ldd	r19, Z+28	; 0x1c
    4bb6:	0e 8b       	std	Y+22, r16	; 0x16
    4bb8:	1f 8b       	std	Y+23, r17	; 0x17
    4bba:	28 8f       	std	Y+24, r18	; 0x18
    4bbc:	39 8f       	std	Y+25, r19	; 0x19
    4bbe:	ed 85       	ldd	r30, Y+13	; 0x0d
    4bc0:	fe 85       	ldd	r31, Y+14	; 0x0e
    4bc2:	2e 89       	ldd	r18, Y+22	; 0x16
    4bc4:	3f 89       	ldd	r19, Y+23	; 0x17
    4bc6:	48 8d       	ldd	r20, Y+24	; 0x18
    4bc8:	59 8d       	ldd	r21, Y+25	; 0x19
    4bca:	25 83       	std	Z+5, r18	; 0x05
    4bcc:	36 83       	std	Z+6, r19	; 0x06
    4bce:	47 83       	std	Z+7, r20	; 0x07
    4bd0:	50 87       	std	Z+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    4bd2:	ef 81       	ldd	r30, Y+7	; 0x07
    4bd4:	f8 85       	ldd	r31, Y+8	; 0x08
    4bd6:	83 81       	ldd	r24, Z+3	; 0x03
    4bd8:	94 81       	ldd	r25, Z+4	; 0x04
    4bda:	9c 01       	movw	r18, r24
    4bdc:	40 e0       	ldi	r20, 0x00	; 0
    4bde:	50 e0       	ldi	r21, 0x00	; 0
    4be0:	89 85       	ldd	r24, Y+9	; 0x09
    4be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4be4:	ab 85       	ldd	r26, Y+11	; 0x0b
    4be6:	bc 85       	ldd	r27, Y+12	; 0x0c
    4be8:	82 0f       	add	r24, r18
    4bea:	93 1f       	adc	r25, r19
    4bec:	a4 1f       	adc	r26, r20
    4bee:	b5 1f       	adc	r27, r21
    4bf0:	ed 85       	ldd	r30, Y+13	; 0x0d
    4bf2:	fe 85       	ldd	r31, Y+14	; 0x0e
    4bf4:	83 8b       	std	Z+19, r24	; 0x13
    4bf6:	94 8b       	std	Z+20, r25	; 0x14
    4bf8:	a5 8b       	std	Z+21, r26	; 0x15
    4bfa:	b6 8b       	std	Z+22, r27	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    4bfc:	ef 81       	ldd	r30, Y+7	; 0x07
    4bfe:	f8 85       	ldd	r31, Y+8	; 0x08
    4c00:	86 81       	ldd	r24, Z+6	; 0x06
    4c02:	97 81       	ldd	r25, Z+7	; 0x07
    4c04:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c06:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c08:	91 8f       	std	Z+25, r25	; 0x19
    4c0a:	80 8f       	std	Z+24, r24	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    4c0c:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c0e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c10:	e3 88       	ldd	r14, Z+19	; 0x13
    4c12:	f4 88       	ldd	r15, Z+20	; 0x14
    4c14:	05 89       	ldd	r16, Z+21	; 0x15
    4c16:	16 89       	ldd	r17, Z+22	; 0x16
    4c18:	ef 81       	ldd	r30, Y+7	; 0x07
    4c1a:	f8 85       	ldd	r31, Y+8	; 0x08
    4c1c:	85 81       	ldd	r24, Z+5	; 0x05
    4c1e:	88 2f       	mov	r24, r24
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	a0 e0       	ldi	r26, 0x00	; 0
    4c24:	b0 e0       	ldi	r27, 0x00	; 0
    4c26:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c28:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c2a:	25 81       	ldd	r18, Z+5	; 0x05
    4c2c:	36 81       	ldd	r19, Z+6	; 0x06
    4c2e:	47 81       	ldd	r20, Z+7	; 0x07
    4c30:	50 85       	ldd	r21, Z+8	; 0x08
    4c32:	bc 01       	movw	r22, r24
    4c34:	cd 01       	movw	r24, r26
    4c36:	0e 94 b8 81 	call	0x10370	; 0x10370 <__mulsi3>
    4c3a:	dc 01       	movw	r26, r24
    4c3c:	cb 01       	movw	r24, r22
    4c3e:	8e 0d       	add	r24, r14
    4c40:	9f 1d       	adc	r25, r15
    4c42:	a0 1f       	adc	r26, r16
    4c44:	b1 1f       	adc	r27, r17
    4c46:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c48:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c4a:	82 8f       	std	Z+26, r24	; 0x1a
    4c4c:	93 8f       	std	Z+27, r25	; 0x1b
    4c4e:	a4 8f       	std	Z+28, r26	; 0x1c
    4c50:	b5 8f       	std	Z+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    4c52:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c54:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c56:	22 8d       	ldd	r18, Z+26	; 0x1a
    4c58:	33 8d       	ldd	r19, Z+27	; 0x1b
    4c5a:	44 8d       	ldd	r20, Z+28	; 0x1c
    4c5c:	55 8d       	ldd	r21, Z+29	; 0x1d
    4c5e:	ef 81       	ldd	r30, Y+7	; 0x07
    4c60:	f8 85       	ldd	r31, Y+8	; 0x08
    4c62:	86 81       	ldd	r24, Z+6	; 0x06
    4c64:	97 81       	ldd	r25, Z+7	; 0x07
    4c66:	88 0f       	add	r24, r24
    4c68:	99 1f       	adc	r25, r25
    4c6a:	82 95       	swap	r24
    4c6c:	92 95       	swap	r25
    4c6e:	90 7f       	andi	r25, 0xF0	; 240
    4c70:	98 27       	eor	r25, r24
    4c72:	80 7f       	andi	r24, 0xF0	; 240
    4c74:	98 27       	eor	r25, r24
    4c76:	81 50       	subi	r24, 0x01	; 1
    4c78:	9e 4f       	sbci	r25, 0xFE	; 254
    4c7a:	89 2f       	mov	r24, r25
    4c7c:	99 27       	eor	r25, r25
    4c7e:	86 95       	lsr	r24
    4c80:	cc 01       	movw	r24, r24
    4c82:	a0 e0       	ldi	r26, 0x00	; 0
    4c84:	b0 e0       	ldi	r27, 0x00	; 0
    4c86:	82 0f       	add	r24, r18
    4c88:	93 1f       	adc	r25, r19
    4c8a:	a4 1f       	adc	r26, r20
    4c8c:	b5 1f       	adc	r27, r21
    4c8e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c90:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c92:	86 87       	std	Z+14, r24	; 0x0e
    4c94:	97 87       	std	Z+15, r25	; 0x0f
    4c96:	a0 8b       	std	Z+16, r26	; 0x10
    4c98:	b1 8b       	std	Z+17, r27	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    4c9a:	ef 81       	ldd	r30, Y+7	; 0x07
    4c9c:	f8 85       	ldd	r31, Y+8	; 0x08
    4c9e:	80 85       	ldd	r24, Z+8	; 0x08
    4ca0:	91 85       	ldd	r25, Z+9	; 0x09
    4ca2:	00 97       	sbiw	r24, 0x00	; 0
    4ca4:	61 f0       	breq	.+24     	; 0x4cbe <_ZN8SdVolume4initEP7Sd2Cardh+0x2f2>
    4ca6:	ef 81       	ldd	r30, Y+7	; 0x07
    4ca8:	f8 85       	ldd	r31, Y+8	; 0x08
    4caa:	80 85       	ldd	r24, Z+8	; 0x08
    4cac:	91 85       	ldd	r25, Z+9	; 0x09
    4cae:	7c 01       	movw	r14, r24
    4cb0:	00 e0       	ldi	r16, 0x00	; 0
    4cb2:	10 e0       	ldi	r17, 0x00	; 0
    4cb4:	ea 8a       	std	Y+18, r14	; 0x12
    4cb6:	fb 8a       	std	Y+19, r15	; 0x13
    4cb8:	0c 8b       	std	Y+20, r16	; 0x14
    4cba:	1d 8b       	std	Y+21, r17	; 0x15
    4cbc:	0a c0       	rjmp	.+20     	; 0x4cd2 <_ZN8SdVolume4initEP7Sd2Cardh+0x306>
    4cbe:	ef 81       	ldd	r30, Y+7	; 0x07
    4cc0:	f8 85       	ldd	r31, Y+8	; 0x08
    4cc2:	05 89       	ldd	r16, Z+21	; 0x15
    4cc4:	16 89       	ldd	r17, Z+22	; 0x16
    4cc6:	27 89       	ldd	r18, Z+23	; 0x17
    4cc8:	30 8d       	ldd	r19, Z+24	; 0x18
    4cca:	0a 8b       	std	Y+18, r16	; 0x12
    4ccc:	1b 8b       	std	Y+19, r17	; 0x13
    4cce:	2c 8b       	std	Y+20, r18	; 0x14
    4cd0:	3d 8b       	std	Y+21, r19	; 0x15
    4cd2:	2a 89       	ldd	r18, Y+18	; 0x12
    4cd4:	3b 89       	ldd	r19, Y+19	; 0x13
    4cd6:	4c 89       	ldd	r20, Y+20	; 0x14
    4cd8:	5d 89       	ldd	r21, Y+21	; 0x15
    4cda:	2b 83       	std	Y+3, r18	; 0x03
    4cdc:	3c 83       	std	Y+4, r19	; 0x04
    4cde:	4d 83       	std	Y+5, r20	; 0x05
    4ce0:	5e 83       	std	Y+6, r21	; 0x06
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    4ce2:	ed 85       	ldd	r30, Y+13	; 0x0d
    4ce4:	fe 85       	ldd	r31, Y+14	; 0x0e
    4ce6:	26 85       	ldd	r18, Z+14	; 0x0e
    4ce8:	37 85       	ldd	r19, Z+15	; 0x0f
    4cea:	40 89       	ldd	r20, Z+16	; 0x10
    4cec:	51 89       	ldd	r21, Z+17	; 0x11
    4cee:	89 85       	ldd	r24, Y+9	; 0x09
    4cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf2:	ab 85       	ldd	r26, Y+11	; 0x0b
    4cf4:	bc 85       	ldd	r27, Y+12	; 0x0c
    4cf6:	7c 01       	movw	r14, r24
    4cf8:	8d 01       	movw	r16, r26
    4cfa:	e2 1a       	sub	r14, r18
    4cfc:	f3 0a       	sbc	r15, r19
    4cfe:	04 0b       	sbc	r16, r20
    4d00:	15 0b       	sbc	r17, r21
    4d02:	a8 01       	movw	r20, r16
    4d04:	97 01       	movw	r18, r14
    4d06:	8b 81       	ldd	r24, Y+3	; 0x03
    4d08:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0a:	ad 81       	ldd	r26, Y+5	; 0x05
    4d0c:	be 81       	ldd	r27, Y+6	; 0x06
    4d0e:	82 0f       	add	r24, r18
    4d10:	93 1f       	adc	r25, r19
    4d12:	a4 1f       	adc	r26, r20
    4d14:	b5 1f       	adc	r27, r21
    4d16:	ed 85       	ldd	r30, Y+13	; 0x0d
    4d18:	fe 85       	ldd	r31, Y+14	; 0x0e
    4d1a:	81 87       	std	Z+9, r24	; 0x09
    4d1c:	92 87       	std	Z+10, r25	; 0x0a
    4d1e:	a3 87       	std	Z+11, r26	; 0x0b
    4d20:	b4 87       	std	Z+12, r27	; 0x0c

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    4d22:	ed 85       	ldd	r30, Y+13	; 0x0d
    4d24:	fe 85       	ldd	r31, Y+14	; 0x0e
    4d26:	21 85       	ldd	r18, Z+9	; 0x09
    4d28:	32 85       	ldd	r19, Z+10	; 0x0a
    4d2a:	43 85       	ldd	r20, Z+11	; 0x0b
    4d2c:	54 85       	ldd	r21, Z+12	; 0x0c
    4d2e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4d30:	fe 85       	ldd	r31, Y+14	; 0x0e
    4d32:	85 85       	ldd	r24, Z+13	; 0x0d
    4d34:	88 2f       	mov	r24, r24
    4d36:	90 e0       	ldi	r25, 0x00	; 0
    4d38:	79 01       	movw	r14, r18
    4d3a:	8a 01       	movw	r16, r20
    4d3c:	04 c0       	rjmp	.+8      	; 0x4d46 <_ZN8SdVolume4initEP7Sd2Cardh+0x37a>
    4d3e:	16 95       	lsr	r17
    4d40:	07 95       	ror	r16
    4d42:	f7 94       	ror	r15
    4d44:	e7 94       	ror	r14
    4d46:	8a 95       	dec	r24
    4d48:	d2 f7       	brpl	.-12     	; 0x4d3e <_ZN8SdVolume4initEP7Sd2Cardh+0x372>
    4d4a:	d8 01       	movw	r26, r16
    4d4c:	c7 01       	movw	r24, r14
    4d4e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4d50:	fe 85       	ldd	r31, Y+14	; 0x0e
    4d52:	81 87       	std	Z+9, r24	; 0x09
    4d54:	92 87       	std	Z+10, r25	; 0x0a
    4d56:	a3 87       	std	Z+11, r26	; 0x0b
    4d58:	b4 87       	std	Z+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    4d5a:	ed 85       	ldd	r30, Y+13	; 0x0d
    4d5c:	fe 85       	ldd	r31, Y+14	; 0x0e
    4d5e:	81 85       	ldd	r24, Z+9	; 0x09
    4d60:	92 85       	ldd	r25, Z+10	; 0x0a
    4d62:	a3 85       	ldd	r26, Z+11	; 0x0b
    4d64:	b4 85       	ldd	r27, Z+12	; 0x0c
    4d66:	85 3f       	cpi	r24, 0xF5	; 245
    4d68:	0f e0       	ldi	r16, 0x0F	; 15
    4d6a:	90 07       	cpc	r25, r16
    4d6c:	00 e0       	ldi	r16, 0x00	; 0
    4d6e:	a0 07       	cpc	r26, r16
    4d70:	00 e0       	ldi	r16, 0x00	; 0
    4d72:	b0 07       	cpc	r27, r16
    4d74:	28 f4       	brcc	.+10     	; 0x4d80 <_ZN8SdVolume4initEP7Sd2Cardh+0x3b4>
    fatType_ = 12;
    4d76:	ed 85       	ldd	r30, Y+13	; 0x0d
    4d78:	fe 85       	ldd	r31, Y+14	; 0x0e
    4d7a:	8c e0       	ldi	r24, 0x0C	; 12
    4d7c:	87 8b       	std	Z+23, r24	; 0x17
    4d7e:	23 c0       	rjmp	.+70     	; 0x4dc6 <_ZN8SdVolume4initEP7Sd2Cardh+0x3fa>
  } else if (clusterCount_ < 65525) {
    4d80:	ed 85       	ldd	r30, Y+13	; 0x0d
    4d82:	fe 85       	ldd	r31, Y+14	; 0x0e
    4d84:	81 85       	ldd	r24, Z+9	; 0x09
    4d86:	92 85       	ldd	r25, Z+10	; 0x0a
    4d88:	a3 85       	ldd	r26, Z+11	; 0x0b
    4d8a:	b4 85       	ldd	r27, Z+12	; 0x0c
    4d8c:	85 3f       	cpi	r24, 0xF5	; 245
    4d8e:	1f ef       	ldi	r17, 0xFF	; 255
    4d90:	91 07       	cpc	r25, r17
    4d92:	10 e0       	ldi	r17, 0x00	; 0
    4d94:	a1 07       	cpc	r26, r17
    4d96:	10 e0       	ldi	r17, 0x00	; 0
    4d98:	b1 07       	cpc	r27, r17
    4d9a:	28 f4       	brcc	.+10     	; 0x4da6 <_ZN8SdVolume4initEP7Sd2Cardh+0x3da>
    fatType_ = 16;
    4d9c:	ed 85       	ldd	r30, Y+13	; 0x0d
    4d9e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4da0:	80 e1       	ldi	r24, 0x10	; 16
    4da2:	87 8b       	std	Z+23, r24	; 0x17
    4da4:	10 c0       	rjmp	.+32     	; 0x4dc6 <_ZN8SdVolume4initEP7Sd2Cardh+0x3fa>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    4da6:	ef 81       	ldd	r30, Y+7	; 0x07
    4da8:	f8 85       	ldd	r31, Y+8	; 0x08
    4daa:	81 a1       	ldd	r24, Z+33	; 0x21
    4dac:	92 a1       	ldd	r25, Z+34	; 0x22
    4dae:	a3 a1       	ldd	r26, Z+35	; 0x23
    4db0:	b4 a1       	ldd	r27, Z+36	; 0x24
    4db2:	ed 85       	ldd	r30, Y+13	; 0x0d
    4db4:	fe 85       	ldd	r31, Y+14	; 0x0e
    4db6:	82 8f       	std	Z+26, r24	; 0x1a
    4db8:	93 8f       	std	Z+27, r25	; 0x1b
    4dba:	a4 8f       	std	Z+28, r26	; 0x1c
    4dbc:	b5 8f       	std	Z+29, r27	; 0x1d
    fatType_ = 32;
    4dbe:	ed 85       	ldd	r30, Y+13	; 0x0d
    4dc0:	fe 85       	ldd	r31, Y+14	; 0x0e
    4dc2:	80 e2       	ldi	r24, 0x20	; 32
    4dc4:	87 8b       	std	Z+23, r24	; 0x17
  }
  return true;
    4dc6:	21 e0       	ldi	r18, 0x01	; 1
    4dc8:	2e 8f       	std	Y+30, r18	; 0x1e
    4dca:	8e 8d       	ldd	r24, Y+30	; 0x1e
}
    4dcc:	6e 96       	adiw	r28, 0x1e	; 30
    4dce:	0f b6       	in	r0, 0x3f	; 63
    4dd0:	f8 94       	cli
    4dd2:	de bf       	out	0x3e, r29	; 62
    4dd4:	0f be       	out	0x3f, r0	; 63
    4dd6:	cd bf       	out	0x3d, r28	; 61
    4dd8:	cf 91       	pop	r28
    4dda:	df 91       	pop	r29
    4ddc:	1f 91       	pop	r17
    4dde:	0f 91       	pop	r16
    4de0:	ff 90       	pop	r15
    4de2:	ef 90       	pop	r14
    4de4:	08 95       	ret

00004de6 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    4de6:	0f 93       	push	r16
    4de8:	1f 93       	push	r17
    4dea:	df 93       	push	r29
    4dec:	cf 93       	push	r28
    4dee:	cd b7       	in	r28, 0x3d	; 61
    4df0:	de b7       	in	r29, 0x3e	; 62
    4df2:	64 97       	sbiw	r28, 0x14	; 20
    4df4:	0f b6       	in	r0, 0x3f	; 63
    4df6:	f8 94       	cli
    4df8:	de bf       	out	0x3e, r29	; 62
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	cd bf       	out	0x3d, r28	; 61
    4dfe:	9e 83       	std	Y+6, r25	; 0x06
    4e00:	8d 83       	std	Y+5, r24	; 0x05
    4e02:	4f 83       	std	Y+7, r20	; 0x07
    4e04:	58 87       	std	Y+8, r21	; 0x08
    4e06:	69 87       	std	Y+9, r22	; 0x09
    4e08:	7a 87       	std	Y+10, r23	; 0x0a
    4e0a:	0b 87       	std	Y+11, r16	; 0x0b
    4e0c:	1c 87       	std	Y+12, r17	; 0x0c
    4e0e:	2d 87       	std	Y+13, r18	; 0x0d
    4e10:	3e 87       	std	Y+14, r19	; 0x0e
  // error if reserved cluster
  if (cluster < 2) return false;
    4e12:	8f 81       	ldd	r24, Y+7	; 0x07
    4e14:	98 85       	ldd	r25, Y+8	; 0x08
    4e16:	a9 85       	ldd	r26, Y+9	; 0x09
    4e18:	ba 85       	ldd	r27, Y+10	; 0x0a
    4e1a:	82 30       	cpi	r24, 0x02	; 2
    4e1c:	91 05       	cpc	r25, r1
    4e1e:	a1 05       	cpc	r26, r1
    4e20:	b1 05       	cpc	r27, r1
    4e22:	10 f4       	brcc	.+4      	; 0x4e28 <_ZN8SdVolume6fatPutEmm+0x42>
    4e24:	1c 8a       	std	Y+20, r1	; 0x14
    4e26:	c5 c0       	rjmp	.+394    	; 0x4fb2 <_ZN8SdVolume6fatPutEmm+0x1cc>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    4e28:	ed 81       	ldd	r30, Y+5	; 0x05
    4e2a:	fe 81       	ldd	r31, Y+6	; 0x06
    4e2c:	81 85       	ldd	r24, Z+9	; 0x09
    4e2e:	92 85       	ldd	r25, Z+10	; 0x0a
    4e30:	a3 85       	ldd	r26, Z+11	; 0x0b
    4e32:	b4 85       	ldd	r27, Z+12	; 0x0c
    4e34:	9c 01       	movw	r18, r24
    4e36:	ad 01       	movw	r20, r26
    4e38:	2f 5f       	subi	r18, 0xFF	; 255
    4e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e3c:	4f 4f       	sbci	r20, 0xFF	; 255
    4e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e40:	8f 81       	ldd	r24, Y+7	; 0x07
    4e42:	98 85       	ldd	r25, Y+8	; 0x08
    4e44:	a9 85       	ldd	r26, Y+9	; 0x09
    4e46:	ba 85       	ldd	r27, Y+10	; 0x0a
    4e48:	28 17       	cp	r18, r24
    4e4a:	39 07       	cpc	r19, r25
    4e4c:	4a 07       	cpc	r20, r26
    4e4e:	5b 07       	cpc	r21, r27
    4e50:	10 f4       	brcc	.+4      	; 0x4e56 <_ZN8SdVolume6fatPutEmm+0x70>
    4e52:	1c 8a       	std	Y+20, r1	; 0x14
    4e54:	ae c0       	rjmp	.+348    	; 0x4fb2 <_ZN8SdVolume6fatPutEmm+0x1cc>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    4e56:	ed 81       	ldd	r30, Y+5	; 0x05
    4e58:	fe 81       	ldd	r31, Y+6	; 0x06
    4e5a:	83 89       	ldd	r24, Z+19	; 0x13
    4e5c:	94 89       	ldd	r25, Z+20	; 0x14
    4e5e:	a5 89       	ldd	r26, Z+21	; 0x15
    4e60:	b6 89       	ldd	r27, Z+22	; 0x16
    4e62:	89 83       	std	Y+1, r24	; 0x01
    4e64:	9a 83       	std	Y+2, r25	; 0x02
    4e66:	ab 83       	std	Y+3, r26	; 0x03
    4e68:	bc 83       	std	Y+4, r27	; 0x04
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    4e6a:	ed 81       	ldd	r30, Y+5	; 0x05
    4e6c:	fe 81       	ldd	r31, Y+6	; 0x06
    4e6e:	87 89       	ldd	r24, Z+23	; 0x17
    4e70:	80 31       	cpi	r24, 0x10	; 16
    4e72:	69 f4       	brne	.+26     	; 0x4e8e <_ZN8SdVolume6fatPutEmm+0xa8>
    4e74:	8f 81       	ldd	r24, Y+7	; 0x07
    4e76:	98 85       	ldd	r25, Y+8	; 0x08
    4e78:	a9 85       	ldd	r26, Y+9	; 0x09
    4e7a:	ba 85       	ldd	r27, Y+10	; 0x0a
    4e7c:	29 2f       	mov	r18, r25
    4e7e:	3a 2f       	mov	r19, r26
    4e80:	4b 2f       	mov	r20, r27
    4e82:	55 27       	eor	r21, r21
    4e84:	28 8b       	std	Y+16, r18	; 0x10
    4e86:	39 8b       	std	Y+17, r19	; 0x11
    4e88:	4a 8b       	std	Y+18, r20	; 0x12
    4e8a:	5b 8b       	std	Y+19, r21	; 0x13
    4e8c:	12 c0       	rjmp	.+36     	; 0x4eb2 <_ZN8SdVolume6fatPutEmm+0xcc>
    4e8e:	8f 81       	ldd	r24, Y+7	; 0x07
    4e90:	98 85       	ldd	r25, Y+8	; 0x08
    4e92:	a9 85       	ldd	r26, Y+9	; 0x09
    4e94:	ba 85       	ldd	r27, Y+10	; 0x0a
    4e96:	9c 01       	movw	r18, r24
    4e98:	ad 01       	movw	r20, r26
    4e9a:	68 94       	set
    4e9c:	16 f8       	bld	r1, 6
    4e9e:	56 95       	lsr	r21
    4ea0:	47 95       	ror	r20
    4ea2:	37 95       	ror	r19
    4ea4:	27 95       	ror	r18
    4ea6:	16 94       	lsr	r1
    4ea8:	d1 f7       	brne	.-12     	; 0x4e9e <_ZN8SdVolume6fatPutEmm+0xb8>
    4eaa:	28 8b       	std	Y+16, r18	; 0x10
    4eac:	39 8b       	std	Y+17, r19	; 0x11
    4eae:	4a 8b       	std	Y+18, r20	; 0x12
    4eb0:	5b 8b       	std	Y+19, r21	; 0x13
    4eb2:	89 81       	ldd	r24, Y+1	; 0x01
    4eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb6:	ab 81       	ldd	r26, Y+3	; 0x03
    4eb8:	bc 81       	ldd	r27, Y+4	; 0x04
    4eba:	28 89       	ldd	r18, Y+16	; 0x10
    4ebc:	39 89       	ldd	r19, Y+17	; 0x11
    4ebe:	4a 89       	ldd	r20, Y+18	; 0x12
    4ec0:	5b 89       	ldd	r21, Y+19	; 0x13
    4ec2:	82 0f       	add	r24, r18
    4ec4:	93 1f       	adc	r25, r19
    4ec6:	a4 1f       	adc	r26, r20
    4ec8:	b5 1f       	adc	r27, r21
    4eca:	89 83       	std	Y+1, r24	; 0x01
    4ecc:	9a 83       	std	Y+2, r25	; 0x02
    4ece:	ab 83       	std	Y+3, r26	; 0x03
    4ed0:	bc 83       	std	Y+4, r27	; 0x04

  if (lba != cacheBlockNumber_) {
    4ed2:	20 91 68 00 	lds	r18, 0x0068
    4ed6:	30 91 69 00 	lds	r19, 0x0069
    4eda:	40 91 6a 00 	lds	r20, 0x006A
    4ede:	50 91 6b 00 	lds	r21, 0x006B
    4ee2:	89 81       	ldd	r24, Y+1	; 0x01
    4ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee6:	ab 81       	ldd	r26, Y+3	; 0x03
    4ee8:	bc 81       	ldd	r27, Y+4	; 0x04
    4eea:	82 17       	cp	r24, r18
    4eec:	93 07       	cpc	r25, r19
    4eee:	a4 07       	cpc	r26, r20
    4ef0:	b5 07       	cpc	r27, r21
    4ef2:	99 f0       	breq	.+38     	; 0x4f1a <_ZN8SdVolume6fatPutEmm+0x134>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    4ef4:	89 81       	ldd	r24, Y+1	; 0x01
    4ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef8:	ab 81       	ldd	r26, Y+3	; 0x03
    4efa:	bc 81       	ldd	r27, Y+4	; 0x04
    4efc:	bc 01       	movw	r22, r24
    4efe:	cd 01       	movw	r24, r26
    4f00:	40 e0       	ldi	r20, 0x00	; 0
    4f02:	0e 94 83 24 	call	0x4906	; 0x4906 <_ZN8SdVolume13cacheRawBlockEmh>
    4f06:	1f 86       	std	Y+15, r1	; 0x0f
    4f08:	88 23       	and	r24, r24
    4f0a:	11 f4       	brne	.+4      	; 0x4f10 <_ZN8SdVolume6fatPutEmm+0x12a>
    4f0c:	31 e0       	ldi	r19, 0x01	; 1
    4f0e:	3f 87       	std	Y+15, r19	; 0x0f
    4f10:	4f 85       	ldd	r20, Y+15	; 0x0f
    4f12:	44 23       	and	r20, r20
    4f14:	11 f0       	breq	.+4      	; 0x4f1a <_ZN8SdVolume6fatPutEmm+0x134>
    4f16:	1c 8a       	std	Y+20, r1	; 0x14
    4f18:	4c c0       	rjmp	.+152    	; 0x4fb2 <_ZN8SdVolume6fatPutEmm+0x1cc>
  }
  // store entry
  if (fatType_ == 16) {
    4f1a:	ed 81       	ldd	r30, Y+5	; 0x05
    4f1c:	fe 81       	ldd	r31, Y+6	; 0x06
    4f1e:	87 89       	ldd	r24, Z+23	; 0x17
    4f20:	80 31       	cpi	r24, 0x10	; 16
    4f22:	89 f4       	brne	.+34     	; 0x4f46 <_ZN8SdVolume6fatPutEmm+0x160>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    4f24:	8f 81       	ldd	r24, Y+7	; 0x07
    4f26:	98 85       	ldd	r25, Y+8	; 0x08
    4f28:	a9 85       	ldd	r26, Y+9	; 0x09
    4f2a:	ba 85       	ldd	r27, Y+10	; 0x0a
    4f2c:	90 70       	andi	r25, 0x00	; 0
    4f2e:	a0 70       	andi	r26, 0x00	; 0
    4f30:	b0 70       	andi	r27, 0x00	; 0
    4f32:	2b 85       	ldd	r18, Y+11	; 0x0b
    4f34:	3c 85       	ldd	r19, Y+12	; 0x0c
    4f36:	88 0f       	add	r24, r24
    4f38:	99 1f       	adc	r25, r25
    4f3a:	fc 01       	movw	r30, r24
    4f3c:	ec 5b       	subi	r30, 0xBC	; 188
    4f3e:	fc 4f       	sbci	r31, 0xFC	; 252
    4f40:	31 83       	std	Z+1, r19	; 0x01
    4f42:	20 83       	st	Z, r18
    4f44:	17 c0       	rjmp	.+46     	; 0x4f74 <_ZN8SdVolume6fatPutEmm+0x18e>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    4f46:	8f 81       	ldd	r24, Y+7	; 0x07
    4f48:	98 85       	ldd	r25, Y+8	; 0x08
    4f4a:	a9 85       	ldd	r26, Y+9	; 0x09
    4f4c:	ba 85       	ldd	r27, Y+10	; 0x0a
    4f4e:	8f 77       	andi	r24, 0x7F	; 127
    4f50:	90 70       	andi	r25, 0x00	; 0
    4f52:	a0 70       	andi	r26, 0x00	; 0
    4f54:	b0 70       	andi	r27, 0x00	; 0
    4f56:	88 0f       	add	r24, r24
    4f58:	99 1f       	adc	r25, r25
    4f5a:	88 0f       	add	r24, r24
    4f5c:	99 1f       	adc	r25, r25
    4f5e:	fc 01       	movw	r30, r24
    4f60:	ec 5b       	subi	r30, 0xBC	; 188
    4f62:	fc 4f       	sbci	r31, 0xFC	; 252
    4f64:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f66:	9c 85       	ldd	r25, Y+12	; 0x0c
    4f68:	ad 85       	ldd	r26, Y+13	; 0x0d
    4f6a:	be 85       	ldd	r27, Y+14	; 0x0e
    4f6c:	80 83       	st	Z, r24
    4f6e:	91 83       	std	Z+1, r25	; 0x01
    4f70:	a2 83       	std	Z+2, r26	; 0x02
    4f72:	b3 83       	std	Z+3, r27	; 0x03
  }
  cacheSetDirty();
    4f74:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <_ZN8SdVolume13cacheSetDirtyEv>

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    4f78:	ed 81       	ldd	r30, Y+5	; 0x05
    4f7a:	fe 81       	ldd	r31, Y+6	; 0x06
    4f7c:	82 89       	ldd	r24, Z+18	; 0x12
    4f7e:	82 30       	cpi	r24, 0x02	; 2
    4f80:	b0 f0       	brcs	.+44     	; 0x4fae <_ZN8SdVolume6fatPutEmm+0x1c8>
    4f82:	ed 81       	ldd	r30, Y+5	; 0x05
    4f84:	fe 81       	ldd	r31, Y+6	; 0x06
    4f86:	25 81       	ldd	r18, Z+5	; 0x05
    4f88:	36 81       	ldd	r19, Z+6	; 0x06
    4f8a:	47 81       	ldd	r20, Z+7	; 0x07
    4f8c:	50 85       	ldd	r21, Z+8	; 0x08
    4f8e:	89 81       	ldd	r24, Y+1	; 0x01
    4f90:	9a 81       	ldd	r25, Y+2	; 0x02
    4f92:	ab 81       	ldd	r26, Y+3	; 0x03
    4f94:	bc 81       	ldd	r27, Y+4	; 0x04
    4f96:	82 0f       	add	r24, r18
    4f98:	93 1f       	adc	r25, r19
    4f9a:	a4 1f       	adc	r26, r20
    4f9c:	b5 1f       	adc	r27, r21
    4f9e:	80 93 47 05 	sts	0x0547, r24
    4fa2:	90 93 48 05 	sts	0x0548, r25
    4fa6:	a0 93 49 05 	sts	0x0549, r26
    4faa:	b0 93 4a 05 	sts	0x054A, r27
  return true;
    4fae:	51 e0       	ldi	r21, 0x01	; 1
    4fb0:	5c 8b       	std	Y+20, r21	; 0x14
    4fb2:	8c 89       	ldd	r24, Y+20	; 0x14
}
    4fb4:	64 96       	adiw	r28, 0x14	; 20
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	f8 94       	cli
    4fba:	de bf       	out	0x3e, r29	; 62
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	cd bf       	out	0x3d, r28	; 61
    4fc0:	cf 91       	pop	r28
    4fc2:	df 91       	pop	r29
    4fc4:	1f 91       	pop	r17
    4fc6:	0f 91       	pop	r16
    4fc8:	08 95       	ret
    4fca:	0f 93       	push	r16
    4fcc:	1f 93       	push	r17
    4fce:	df 93       	push	r29
    4fd0:	cf 93       	push	r28
    4fd2:	00 d0       	rcall	.+0      	; 0x4fd4 <_ZN8SdVolume6fatPutEmm+0x1ee>
    4fd4:	00 d0       	rcall	.+0      	; 0x4fd6 <_ZN8SdVolume6fatPutEmm+0x1f0>
    4fd6:	00 d0       	rcall	.+0      	; 0x4fd8 <_ZN8SdVolume6fatPutEmm+0x1f2>
    4fd8:	cd b7       	in	r28, 0x3d	; 61
    4fda:	de b7       	in	r29, 0x3e	; 62
    4fdc:	9a 83       	std	Y+2, r25	; 0x02
    4fde:	89 83       	std	Y+1, r24	; 0x01
    4fe0:	4b 83       	std	Y+3, r20	; 0x03
    4fe2:	5c 83       	std	Y+4, r21	; 0x04
    4fe4:	6d 83       	std	Y+5, r22	; 0x05
    4fe6:	7e 83       	std	Y+6, r23	; 0x06
    4fe8:	89 81       	ldd	r24, Y+1	; 0x01
    4fea:	9a 81       	ldd	r25, Y+2	; 0x02
    4fec:	2b 81       	ldd	r18, Y+3	; 0x03
    4fee:	3c 81       	ldd	r19, Y+4	; 0x04
    4ff0:	4d 81       	ldd	r20, Y+5	; 0x05
    4ff2:	5e 81       	ldd	r21, Y+6	; 0x06
    4ff4:	ba 01       	movw	r22, r20
    4ff6:	a9 01       	movw	r20, r18
    4ff8:	0f ef       	ldi	r16, 0xFF	; 255
    4ffa:	1f ef       	ldi	r17, 0xFF	; 255
    4ffc:	2f ef       	ldi	r18, 0xFF	; 255
    4ffe:	3f e0       	ldi	r19, 0x0F	; 15
    5000:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <_ZN8SdVolume6fatPutEmm>
    5004:	26 96       	adiw	r28, 0x06	; 6
    5006:	0f b6       	in	r0, 0x3f	; 63
    5008:	f8 94       	cli
    500a:	de bf       	out	0x3e, r29	; 62
    500c:	0f be       	out	0x3f, r0	; 63
    500e:	cd bf       	out	0x3d, r28	; 61
    5010:	cf 91       	pop	r28
    5012:	df 91       	pop	r29
    5014:	1f 91       	pop	r17
    5016:	0f 91       	pop	r16
    5018:	08 95       	ret

0000501a <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    501a:	df 93       	push	r29
    501c:	cf 93       	push	r28
    501e:	cd b7       	in	r28, 0x3d	; 61
    5020:	de b7       	in	r29, 0x3e	; 62
    5022:	62 97       	sbiw	r28, 0x12	; 18
    5024:	0f b6       	in	r0, 0x3f	; 63
    5026:	f8 94       	cli
    5028:	de bf       	out	0x3e, r29	; 62
    502a:	0f be       	out	0x3f, r0	; 63
    502c:	cd bf       	out	0x3d, r28	; 61
    502e:	9e 83       	std	Y+6, r25	; 0x06
    5030:	8d 83       	std	Y+5, r24	; 0x05
    5032:	4f 83       	std	Y+7, r20	; 0x07
    5034:	58 87       	std	Y+8, r21	; 0x08
    5036:	69 87       	std	Y+9, r22	; 0x09
    5038:	7a 87       	std	Y+10, r23	; 0x0a
    503a:	3c 87       	std	Y+12, r19	; 0x0c
    503c:	2b 87       	std	Y+11, r18	; 0x0b
  if (cluster > (clusterCount_ + 1)) return false;
    503e:	ed 81       	ldd	r30, Y+5	; 0x05
    5040:	fe 81       	ldd	r31, Y+6	; 0x06
    5042:	81 85       	ldd	r24, Z+9	; 0x09
    5044:	92 85       	ldd	r25, Z+10	; 0x0a
    5046:	a3 85       	ldd	r26, Z+11	; 0x0b
    5048:	b4 85       	ldd	r27, Z+12	; 0x0c
    504a:	9c 01       	movw	r18, r24
    504c:	ad 01       	movw	r20, r26
    504e:	2f 5f       	subi	r18, 0xFF	; 255
    5050:	3f 4f       	sbci	r19, 0xFF	; 255
    5052:	4f 4f       	sbci	r20, 0xFF	; 255
    5054:	5f 4f       	sbci	r21, 0xFF	; 255
    5056:	8f 81       	ldd	r24, Y+7	; 0x07
    5058:	98 85       	ldd	r25, Y+8	; 0x08
    505a:	a9 85       	ldd	r26, Y+9	; 0x09
    505c:	ba 85       	ldd	r27, Y+10	; 0x0a
    505e:	28 17       	cp	r18, r24
    5060:	39 07       	cpc	r19, r25
    5062:	4a 07       	cpc	r20, r26
    5064:	5b 07       	cpc	r21, r27
    5066:	10 f4       	brcc	.+4      	; 0x506c <_ZNK8SdVolume6fatGetEmPm+0x52>
    5068:	1a 8a       	std	Y+18, r1	; 0x12
    506a:	9b c0       	rjmp	.+310    	; 0x51a2 <_ZNK8SdVolume6fatGetEmPm+0x188>
  uint32_t lba = fatStartBlock_;
    506c:	ed 81       	ldd	r30, Y+5	; 0x05
    506e:	fe 81       	ldd	r31, Y+6	; 0x06
    5070:	83 89       	ldd	r24, Z+19	; 0x13
    5072:	94 89       	ldd	r25, Z+20	; 0x14
    5074:	a5 89       	ldd	r26, Z+21	; 0x15
    5076:	b6 89       	ldd	r27, Z+22	; 0x16
    5078:	89 83       	std	Y+1, r24	; 0x01
    507a:	9a 83       	std	Y+2, r25	; 0x02
    507c:	ab 83       	std	Y+3, r26	; 0x03
    507e:	bc 83       	std	Y+4, r27	; 0x04
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    5080:	ed 81       	ldd	r30, Y+5	; 0x05
    5082:	fe 81       	ldd	r31, Y+6	; 0x06
    5084:	87 89       	ldd	r24, Z+23	; 0x17
    5086:	80 31       	cpi	r24, 0x10	; 16
    5088:	69 f4       	brne	.+26     	; 0x50a4 <_ZNK8SdVolume6fatGetEmPm+0x8a>
    508a:	8f 81       	ldd	r24, Y+7	; 0x07
    508c:	98 85       	ldd	r25, Y+8	; 0x08
    508e:	a9 85       	ldd	r26, Y+9	; 0x09
    5090:	ba 85       	ldd	r27, Y+10	; 0x0a
    5092:	29 2f       	mov	r18, r25
    5094:	3a 2f       	mov	r19, r26
    5096:	4b 2f       	mov	r20, r27
    5098:	55 27       	eor	r21, r21
    509a:	2e 87       	std	Y+14, r18	; 0x0e
    509c:	3f 87       	std	Y+15, r19	; 0x0f
    509e:	48 8b       	std	Y+16, r20	; 0x10
    50a0:	59 8b       	std	Y+17, r21	; 0x11
    50a2:	12 c0       	rjmp	.+36     	; 0x50c8 <_ZNK8SdVolume6fatGetEmPm+0xae>
    50a4:	8f 81       	ldd	r24, Y+7	; 0x07
    50a6:	98 85       	ldd	r25, Y+8	; 0x08
    50a8:	a9 85       	ldd	r26, Y+9	; 0x09
    50aa:	ba 85       	ldd	r27, Y+10	; 0x0a
    50ac:	9c 01       	movw	r18, r24
    50ae:	ad 01       	movw	r20, r26
    50b0:	68 94       	set
    50b2:	16 f8       	bld	r1, 6
    50b4:	56 95       	lsr	r21
    50b6:	47 95       	ror	r20
    50b8:	37 95       	ror	r19
    50ba:	27 95       	ror	r18
    50bc:	16 94       	lsr	r1
    50be:	d1 f7       	brne	.-12     	; 0x50b4 <_ZNK8SdVolume6fatGetEmPm+0x9a>
    50c0:	2e 87       	std	Y+14, r18	; 0x0e
    50c2:	3f 87       	std	Y+15, r19	; 0x0f
    50c4:	48 8b       	std	Y+16, r20	; 0x10
    50c6:	59 8b       	std	Y+17, r21	; 0x11
    50c8:	89 81       	ldd	r24, Y+1	; 0x01
    50ca:	9a 81       	ldd	r25, Y+2	; 0x02
    50cc:	ab 81       	ldd	r26, Y+3	; 0x03
    50ce:	bc 81       	ldd	r27, Y+4	; 0x04
    50d0:	2e 85       	ldd	r18, Y+14	; 0x0e
    50d2:	3f 85       	ldd	r19, Y+15	; 0x0f
    50d4:	48 89       	ldd	r20, Y+16	; 0x10
    50d6:	59 89       	ldd	r21, Y+17	; 0x11
    50d8:	82 0f       	add	r24, r18
    50da:	93 1f       	adc	r25, r19
    50dc:	a4 1f       	adc	r26, r20
    50de:	b5 1f       	adc	r27, r21
    50e0:	89 83       	std	Y+1, r24	; 0x01
    50e2:	9a 83       	std	Y+2, r25	; 0x02
    50e4:	ab 83       	std	Y+3, r26	; 0x03
    50e6:	bc 83       	std	Y+4, r27	; 0x04
  if (lba != cacheBlockNumber_) {
    50e8:	20 91 68 00 	lds	r18, 0x0068
    50ec:	30 91 69 00 	lds	r19, 0x0069
    50f0:	40 91 6a 00 	lds	r20, 0x006A
    50f4:	50 91 6b 00 	lds	r21, 0x006B
    50f8:	89 81       	ldd	r24, Y+1	; 0x01
    50fa:	9a 81       	ldd	r25, Y+2	; 0x02
    50fc:	ab 81       	ldd	r26, Y+3	; 0x03
    50fe:	bc 81       	ldd	r27, Y+4	; 0x04
    5100:	82 17       	cp	r24, r18
    5102:	93 07       	cpc	r25, r19
    5104:	a4 07       	cpc	r26, r20
    5106:	b5 07       	cpc	r27, r21
    5108:	99 f0       	breq	.+38     	; 0x5130 <_ZNK8SdVolume6fatGetEmPm+0x116>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    510a:	89 81       	ldd	r24, Y+1	; 0x01
    510c:	9a 81       	ldd	r25, Y+2	; 0x02
    510e:	ab 81       	ldd	r26, Y+3	; 0x03
    5110:	bc 81       	ldd	r27, Y+4	; 0x04
    5112:	bc 01       	movw	r22, r24
    5114:	cd 01       	movw	r24, r26
    5116:	40 e0       	ldi	r20, 0x00	; 0
    5118:	0e 94 83 24 	call	0x4906	; 0x4906 <_ZN8SdVolume13cacheRawBlockEmh>
    511c:	1d 86       	std	Y+13, r1	; 0x0d
    511e:	88 23       	and	r24, r24
    5120:	11 f4       	brne	.+4      	; 0x5126 <_ZNK8SdVolume6fatGetEmPm+0x10c>
    5122:	31 e0       	ldi	r19, 0x01	; 1
    5124:	3d 87       	std	Y+13, r19	; 0x0d
    5126:	4d 85       	ldd	r20, Y+13	; 0x0d
    5128:	44 23       	and	r20, r20
    512a:	11 f0       	breq	.+4      	; 0x5130 <_ZNK8SdVolume6fatGetEmPm+0x116>
    512c:	1a 8a       	std	Y+18, r1	; 0x12
    512e:	39 c0       	rjmp	.+114    	; 0x51a2 <_ZNK8SdVolume6fatGetEmPm+0x188>
  }
  if (fatType_ == 16) {
    5130:	ed 81       	ldd	r30, Y+5	; 0x05
    5132:	fe 81       	ldd	r31, Y+6	; 0x06
    5134:	87 89       	ldd	r24, Z+23	; 0x17
    5136:	80 31       	cpi	r24, 0x10	; 16
    5138:	c1 f4       	brne	.+48     	; 0x516a <_ZNK8SdVolume6fatGetEmPm+0x150>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    513a:	8f 81       	ldd	r24, Y+7	; 0x07
    513c:	98 85       	ldd	r25, Y+8	; 0x08
    513e:	a9 85       	ldd	r26, Y+9	; 0x09
    5140:	ba 85       	ldd	r27, Y+10	; 0x0a
    5142:	90 70       	andi	r25, 0x00	; 0
    5144:	a0 70       	andi	r26, 0x00	; 0
    5146:	b0 70       	andi	r27, 0x00	; 0
    5148:	88 0f       	add	r24, r24
    514a:	99 1f       	adc	r25, r25
    514c:	fc 01       	movw	r30, r24
    514e:	ec 5b       	subi	r30, 0xBC	; 188
    5150:	fc 4f       	sbci	r31, 0xFC	; 252
    5152:	80 81       	ld	r24, Z
    5154:	91 81       	ldd	r25, Z+1	; 0x01
    5156:	cc 01       	movw	r24, r24
    5158:	a0 e0       	ldi	r26, 0x00	; 0
    515a:	b0 e0       	ldi	r27, 0x00	; 0
    515c:	eb 85       	ldd	r30, Y+11	; 0x0b
    515e:	fc 85       	ldd	r31, Y+12	; 0x0c
    5160:	80 83       	st	Z, r24
    5162:	91 83       	std	Z+1, r25	; 0x01
    5164:	a2 83       	std	Z+2, r26	; 0x02
    5166:	b3 83       	std	Z+3, r27	; 0x03
    5168:	1a c0       	rjmp	.+52     	; 0x519e <_ZNK8SdVolume6fatGetEmPm+0x184>
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    516a:	8f 81       	ldd	r24, Y+7	; 0x07
    516c:	98 85       	ldd	r25, Y+8	; 0x08
    516e:	a9 85       	ldd	r26, Y+9	; 0x09
    5170:	ba 85       	ldd	r27, Y+10	; 0x0a
    5172:	8f 77       	andi	r24, 0x7F	; 127
    5174:	90 70       	andi	r25, 0x00	; 0
    5176:	a0 70       	andi	r26, 0x00	; 0
    5178:	b0 70       	andi	r27, 0x00	; 0
    517a:	88 0f       	add	r24, r24
    517c:	99 1f       	adc	r25, r25
    517e:	88 0f       	add	r24, r24
    5180:	99 1f       	adc	r25, r25
    5182:	fc 01       	movw	r30, r24
    5184:	ec 5b       	subi	r30, 0xBC	; 188
    5186:	fc 4f       	sbci	r31, 0xFC	; 252
    5188:	80 81       	ld	r24, Z
    518a:	91 81       	ldd	r25, Z+1	; 0x01
    518c:	a2 81       	ldd	r26, Z+2	; 0x02
    518e:	b3 81       	ldd	r27, Z+3	; 0x03
    5190:	bf 70       	andi	r27, 0x0F	; 15
    5192:	eb 85       	ldd	r30, Y+11	; 0x0b
    5194:	fc 85       	ldd	r31, Y+12	; 0x0c
    5196:	80 83       	st	Z, r24
    5198:	91 83       	std	Z+1, r25	; 0x01
    519a:	a2 83       	std	Z+2, r26	; 0x02
    519c:	b3 83       	std	Z+3, r27	; 0x03
  }
  return true;
    519e:	51 e0       	ldi	r21, 0x01	; 1
    51a0:	5a 8b       	std	Y+18, r21	; 0x12
    51a2:	8a 89       	ldd	r24, Y+18	; 0x12
}
    51a4:	62 96       	adiw	r28, 0x12	; 18
    51a6:	0f b6       	in	r0, 0x3f	; 63
    51a8:	f8 94       	cli
    51aa:	de bf       	out	0x3e, r29	; 62
    51ac:	0f be       	out	0x3f, r0	; 63
    51ae:	cd bf       	out	0x3d, r28	; 61
    51b0:	cf 91       	pop	r28
    51b2:	df 91       	pop	r29
    51b4:	08 95       	ret

000051b6 <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    51b6:	0f 93       	push	r16
    51b8:	1f 93       	push	r17
    51ba:	df 93       	push	r29
    51bc:	cf 93       	push	r28
    51be:	cd b7       	in	r28, 0x3d	; 61
    51c0:	de b7       	in	r29, 0x3e	; 62
    51c2:	2e 97       	sbiw	r28, 0x0e	; 14
    51c4:	0f b6       	in	r0, 0x3f	; 63
    51c6:	f8 94       	cli
    51c8:	de bf       	out	0x3e, r29	; 62
    51ca:	0f be       	out	0x3f, r0	; 63
    51cc:	cd bf       	out	0x3d, r28	; 61
    51ce:	9e 83       	std	Y+6, r25	; 0x06
    51d0:	8d 83       	std	Y+5, r24	; 0x05
    51d2:	4f 83       	std	Y+7, r20	; 0x07
    51d4:	58 87       	std	Y+8, r21	; 0x08
    51d6:	69 87       	std	Y+9, r22	; 0x09
    51d8:	7a 87       	std	Y+10, r23	; 0x0a
  // clear free cluster location
  allocSearchStart_ = 2;
    51da:	ed 81       	ldd	r30, Y+5	; 0x05
    51dc:	fe 81       	ldd	r31, Y+6	; 0x06
    51de:	82 e0       	ldi	r24, 0x02	; 2
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	a0 e0       	ldi	r26, 0x00	; 0
    51e4:	b0 e0       	ldi	r27, 0x00	; 0
    51e6:	80 83       	st	Z, r24
    51e8:	91 83       	std	Z+1, r25	; 0x01
    51ea:	a2 83       	std	Z+2, r26	; 0x02
    51ec:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    51ee:	8d 81       	ldd	r24, Y+5	; 0x05
    51f0:	9e 81       	ldd	r25, Y+6	; 0x06
    51f2:	2f 81       	ldd	r18, Y+7	; 0x07
    51f4:	38 85       	ldd	r19, Y+8	; 0x08
    51f6:	49 85       	ldd	r20, Y+9	; 0x09
    51f8:	5a 85       	ldd	r21, Y+10	; 0x0a
    51fa:	ba 01       	movw	r22, r20
    51fc:	a9 01       	movw	r20, r18
    51fe:	9e 01       	movw	r18, r28
    5200:	2f 5f       	subi	r18, 0xFF	; 255
    5202:	3f 4f       	sbci	r19, 0xFF	; 255
    5204:	0e 94 0d 28 	call	0x501a	; 0x501a <_ZNK8SdVolume6fatGetEmPm>
    5208:	1d 86       	std	Y+13, r1	; 0x0d
    520a:	88 23       	and	r24, r24
    520c:	11 f4       	brne	.+4      	; 0x5212 <_ZN8SdVolume9freeChainEm+0x5c>
    520e:	81 e0       	ldi	r24, 0x01	; 1
    5210:	8d 87       	std	Y+13, r24	; 0x0d
    5212:	8d 85       	ldd	r24, Y+13	; 0x0d
    5214:	88 23       	and	r24, r24
    5216:	11 f0       	breq	.+4      	; 0x521c <_ZN8SdVolume9freeChainEm+0x66>
    5218:	1c 86       	std	Y+12, r1	; 0x0c
    521a:	35 c0       	rjmp	.+106    	; 0x5286 <_ZN8SdVolume9freeChainEm+0xd0>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    521c:	8d 81       	ldd	r24, Y+5	; 0x05
    521e:	9e 81       	ldd	r25, Y+6	; 0x06
    5220:	2f 81       	ldd	r18, Y+7	; 0x07
    5222:	38 85       	ldd	r19, Y+8	; 0x08
    5224:	49 85       	ldd	r20, Y+9	; 0x09
    5226:	5a 85       	ldd	r21, Y+10	; 0x0a
    5228:	ba 01       	movw	r22, r20
    522a:	a9 01       	movw	r20, r18
    522c:	00 e0       	ldi	r16, 0x00	; 0
    522e:	10 e0       	ldi	r17, 0x00	; 0
    5230:	20 e0       	ldi	r18, 0x00	; 0
    5232:	30 e0       	ldi	r19, 0x00	; 0
    5234:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <_ZN8SdVolume6fatPutEmm>
    5238:	1b 86       	std	Y+11, r1	; 0x0b
    523a:	88 23       	and	r24, r24
    523c:	11 f4       	brne	.+4      	; 0x5242 <_ZN8SdVolume9freeChainEm+0x8c>
    523e:	81 e0       	ldi	r24, 0x01	; 1
    5240:	8b 87       	std	Y+11, r24	; 0x0b
    5242:	8b 85       	ldd	r24, Y+11	; 0x0b
    5244:	88 23       	and	r24, r24
    5246:	11 f0       	breq	.+4      	; 0x524c <_ZN8SdVolume9freeChainEm+0x96>
    5248:	1c 86       	std	Y+12, r1	; 0x0c
    524a:	1d c0       	rjmp	.+58     	; 0x5286 <_ZN8SdVolume9freeChainEm+0xd0>

    cluster = next;
    524c:	89 81       	ldd	r24, Y+1	; 0x01
    524e:	9a 81       	ldd	r25, Y+2	; 0x02
    5250:	ab 81       	ldd	r26, Y+3	; 0x03
    5252:	bc 81       	ldd	r27, Y+4	; 0x04
    5254:	8f 83       	std	Y+7, r24	; 0x07
    5256:	98 87       	std	Y+8, r25	; 0x08
    5258:	a9 87       	std	Y+9, r26	; 0x09
    525a:	ba 87       	std	Y+10, r27	; 0x0a
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    525c:	8d 81       	ldd	r24, Y+5	; 0x05
    525e:	9e 81       	ldd	r25, Y+6	; 0x06
    5260:	2f 81       	ldd	r18, Y+7	; 0x07
    5262:	38 85       	ldd	r19, Y+8	; 0x08
    5264:	49 85       	ldd	r20, Y+9	; 0x09
    5266:	5a 85       	ldd	r21, Y+10	; 0x0a
    5268:	ba 01       	movw	r22, r20
    526a:	a9 01       	movw	r20, r18
    526c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZNK8SdVolume5isEOCEm>
    5270:	1e 86       	std	Y+14, r1	; 0x0e
    5272:	88 23       	and	r24, r24
    5274:	11 f4       	brne	.+4      	; 0x527a <_ZN8SdVolume9freeChainEm+0xc4>
    5276:	81 e0       	ldi	r24, 0x01	; 1
    5278:	8e 87       	std	Y+14, r24	; 0x0e
    527a:	8e 85       	ldd	r24, Y+14	; 0x0e
    527c:	88 23       	and	r24, r24
    527e:	09 f0       	breq	.+2      	; 0x5282 <_ZN8SdVolume9freeChainEm+0xcc>
    5280:	b6 cf       	rjmp	.-148    	; 0x51ee <_ZN8SdVolume9freeChainEm+0x38>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    5282:	81 e0       	ldi	r24, 0x01	; 1
    5284:	8c 87       	std	Y+12, r24	; 0x0c
    5286:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    5288:	2e 96       	adiw	r28, 0x0e	; 14
    528a:	0f b6       	in	r0, 0x3f	; 63
    528c:	f8 94       	cli
    528e:	de bf       	out	0x3e, r29	; 62
    5290:	0f be       	out	0x3f, r0	; 63
    5292:	cd bf       	out	0x3d, r28	; 61
    5294:	cf 91       	pop	r28
    5296:	df 91       	pop	r29
    5298:	1f 91       	pop	r17
    529a:	0f 91       	pop	r16
    529c:	08 95       	ret

0000529e <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    529e:	ef 92       	push	r14
    52a0:	ff 92       	push	r15
    52a2:	0f 93       	push	r16
    52a4:	1f 93       	push	r17
    52a6:	df 93       	push	r29
    52a8:	cf 93       	push	r28
    52aa:	cd b7       	in	r28, 0x3d	; 61
    52ac:	de b7       	in	r29, 0x3e	; 62
    52ae:	2f 97       	sbiw	r28, 0x0f	; 15
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	f8 94       	cli
    52b4:	de bf       	out	0x3e, r29	; 62
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	cd bf       	out	0x3d, r28	; 61
    52ba:	9e 83       	std	Y+6, r25	; 0x06
    52bc:	8d 83       	std	Y+5, r24	; 0x05
    52be:	4f 83       	std	Y+7, r20	; 0x07
    52c0:	58 87       	std	Y+8, r21	; 0x08
    52c2:	69 87       	std	Y+9, r22	; 0x09
    52c4:	7a 87       	std	Y+10, r23	; 0x0a
    52c6:	3c 87       	std	Y+12, r19	; 0x0c
    52c8:	2b 87       	std	Y+11, r18	; 0x0b
  uint32_t s = 0;
    52ca:	19 82       	std	Y+1, r1	; 0x01
    52cc:	1a 82       	std	Y+2, r1	; 0x02
    52ce:	1b 82       	std	Y+3, r1	; 0x03
    52d0:	1c 82       	std	Y+4, r1	; 0x04
  do {
    if (!fatGet(cluster, &cluster)) return false;
    52d2:	2f 81       	ldd	r18, Y+7	; 0x07
    52d4:	38 85       	ldd	r19, Y+8	; 0x08
    52d6:	49 85       	ldd	r20, Y+9	; 0x09
    52d8:	5a 85       	ldd	r21, Y+10	; 0x0a
    52da:	8d 81       	ldd	r24, Y+5	; 0x05
    52dc:	9e 81       	ldd	r25, Y+6	; 0x06
    52de:	fe 01       	movw	r30, r28
    52e0:	37 96       	adiw	r30, 0x07	; 7
    52e2:	ba 01       	movw	r22, r20
    52e4:	a9 01       	movw	r20, r18
    52e6:	9f 01       	movw	r18, r30
    52e8:	0e 94 0d 28 	call	0x501a	; 0x501a <_ZNK8SdVolume6fatGetEmPm>
    52ec:	1e 86       	std	Y+14, r1	; 0x0e
    52ee:	88 23       	and	r24, r24
    52f0:	11 f4       	brne	.+4      	; 0x52f6 <_ZNK8SdVolume9chainSizeEmPm+0x58>
    52f2:	01 e0       	ldi	r16, 0x01	; 1
    52f4:	0e 87       	std	Y+14, r16	; 0x0e
    52f6:	1e 85       	ldd	r17, Y+14	; 0x0e
    52f8:	11 23       	and	r17, r17
    52fa:	11 f0       	breq	.+4      	; 0x5300 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    52fc:	1d 86       	std	Y+13, r1	; 0x0d
    52fe:	3f c0       	rjmp	.+126    	; 0x537e <_ZNK8SdVolume9chainSizeEmPm+0xe0>
    s += 512UL << clusterSizeShift_;
    5300:	ed 81       	ldd	r30, Y+5	; 0x05
    5302:	fe 81       	ldd	r31, Y+6	; 0x06
    5304:	85 85       	ldd	r24, Z+13	; 0x0d
    5306:	28 2f       	mov	r18, r24
    5308:	30 e0       	ldi	r19, 0x00	; 0
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	92 e0       	ldi	r25, 0x02	; 2
    530e:	a0 e0       	ldi	r26, 0x00	; 0
    5310:	b0 e0       	ldi	r27, 0x00	; 0
    5312:	7c 01       	movw	r14, r24
    5314:	8d 01       	movw	r16, r26
    5316:	04 c0       	rjmp	.+8      	; 0x5320 <_ZNK8SdVolume9chainSizeEmPm+0x82>
    5318:	ee 0c       	add	r14, r14
    531a:	ff 1c       	adc	r15, r15
    531c:	00 1f       	adc	r16, r16
    531e:	11 1f       	adc	r17, r17
    5320:	2a 95       	dec	r18
    5322:	d2 f7       	brpl	.-12     	; 0x5318 <_ZNK8SdVolume9chainSizeEmPm+0x7a>
    5324:	a8 01       	movw	r20, r16
    5326:	97 01       	movw	r18, r14
    5328:	89 81       	ldd	r24, Y+1	; 0x01
    532a:	9a 81       	ldd	r25, Y+2	; 0x02
    532c:	ab 81       	ldd	r26, Y+3	; 0x03
    532e:	bc 81       	ldd	r27, Y+4	; 0x04
    5330:	82 0f       	add	r24, r18
    5332:	93 1f       	adc	r25, r19
    5334:	a4 1f       	adc	r26, r20
    5336:	b5 1f       	adc	r27, r21
    5338:	89 83       	std	Y+1, r24	; 0x01
    533a:	9a 83       	std	Y+2, r25	; 0x02
    533c:	ab 83       	std	Y+3, r26	; 0x03
    533e:	bc 83       	std	Y+4, r27	; 0x04
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    5340:	2f 81       	ldd	r18, Y+7	; 0x07
    5342:	38 85       	ldd	r19, Y+8	; 0x08
    5344:	49 85       	ldd	r20, Y+9	; 0x09
    5346:	5a 85       	ldd	r21, Y+10	; 0x0a
    5348:	8d 81       	ldd	r24, Y+5	; 0x05
    534a:	9e 81       	ldd	r25, Y+6	; 0x06
    534c:	ba 01       	movw	r22, r20
    534e:	a9 01       	movw	r20, r18
    5350:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <_ZNK8SdVolume5isEOCEm>
    5354:	1f 86       	std	Y+15, r1	; 0x0f
    5356:	88 23       	and	r24, r24
    5358:	11 f4       	brne	.+4      	; 0x535e <_ZNK8SdVolume9chainSizeEmPm+0xc0>
    535a:	01 e0       	ldi	r16, 0x01	; 1
    535c:	0f 87       	std	Y+15, r16	; 0x0f
    535e:	1f 85       	ldd	r17, Y+15	; 0x0f
    5360:	11 23       	and	r17, r17
    5362:	09 f0       	breq	.+2      	; 0x5366 <_ZNK8SdVolume9chainSizeEmPm+0xc8>
    5364:	b6 cf       	rjmp	.-148    	; 0x52d2 <_ZNK8SdVolume9chainSizeEmPm+0x34>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    5366:	eb 85       	ldd	r30, Y+11	; 0x0b
    5368:	fc 85       	ldd	r31, Y+12	; 0x0c
    536a:	89 81       	ldd	r24, Y+1	; 0x01
    536c:	9a 81       	ldd	r25, Y+2	; 0x02
    536e:	ab 81       	ldd	r26, Y+3	; 0x03
    5370:	bc 81       	ldd	r27, Y+4	; 0x04
    5372:	80 83       	st	Z, r24
    5374:	91 83       	std	Z+1, r25	; 0x01
    5376:	a2 83       	std	Z+2, r26	; 0x02
    5378:	b3 83       	std	Z+3, r27	; 0x03
  return true;
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	8d 87       	std	Y+13, r24	; 0x0d
    537e:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    5380:	2f 96       	adiw	r28, 0x0f	; 15
    5382:	0f b6       	in	r0, 0x3f	; 63
    5384:	f8 94       	cli
    5386:	de bf       	out	0x3e, r29	; 62
    5388:	0f be       	out	0x3f, r0	; 63
    538a:	cd bf       	out	0x3d, r28	; 61
    538c:	cf 91       	pop	r28
    538e:	df 91       	pop	r29
    5390:	1f 91       	pop	r17
    5392:	0f 91       	pop	r16
    5394:	ff 90       	pop	r15
    5396:	ef 90       	pop	r14
    5398:	08 95       	ret

0000539a <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    539a:	ef 92       	push	r14
    539c:	ff 92       	push	r15
    539e:	0f 93       	push	r16
    53a0:	1f 93       	push	r17
    53a2:	df 93       	push	r29
    53a4:	cf 93       	push	r28
    53a6:	cd b7       	in	r28, 0x3d	; 61
    53a8:	de b7       	in	r29, 0x3e	; 62
    53aa:	a2 97       	sbiw	r28, 0x22	; 34
    53ac:	0f b6       	in	r0, 0x3f	; 63
    53ae:	f8 94       	cli
    53b0:	de bf       	out	0x3e, r29	; 62
    53b2:	0f be       	out	0x3f, r0	; 63
    53b4:	cd bf       	out	0x3d, r28	; 61
    53b6:	9f 8b       	std	Y+23, r25	; 0x17
    53b8:	8e 8b       	std	Y+22, r24	; 0x16
    53ba:	48 8f       	std	Y+24, r20	; 0x18
    53bc:	59 8f       	std	Y+25, r21	; 0x19
    53be:	6a 8f       	std	Y+26, r22	; 0x1a
    53c0:	7b 8f       	std	Y+27, r23	; 0x1b
    53c2:	3d 8f       	std	Y+29, r19	; 0x1d
    53c4:	2c 8f       	std	Y+28, r18	; 0x1c

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    53c6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    53c8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    53ca:	80 81       	ld	r24, Z
    53cc:	91 81       	ldd	r25, Z+1	; 0x01
    53ce:	a2 81       	ldd	r26, Z+2	; 0x02
    53d0:	b3 81       	ldd	r27, Z+3	; 0x03
    53d2:	00 97       	sbiw	r24, 0x00	; 0
    53d4:	a1 05       	cpc	r26, r1
    53d6:	b1 05       	cpc	r27, r1
    53d8:	79 f0       	breq	.+30     	; 0x53f8 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    53da:	ec 8d       	ldd	r30, Y+28	; 0x1c
    53dc:	fd 8d       	ldd	r31, Y+29	; 0x1d
    53de:	80 81       	ld	r24, Z
    53e0:	91 81       	ldd	r25, Z+1	; 0x01
    53e2:	a2 81       	ldd	r26, Z+2	; 0x02
    53e4:	b3 81       	ldd	r27, Z+3	; 0x03
    53e6:	01 96       	adiw	r24, 0x01	; 1
    53e8:	a1 1d       	adc	r26, r1
    53ea:	b1 1d       	adc	r27, r1
    53ec:	8e 87       	std	Y+14, r24	; 0x0e
    53ee:	9f 87       	std	Y+15, r25	; 0x0f
    53f0:	a8 8b       	std	Y+16, r26	; 0x10
    53f2:	b9 8b       	std	Y+17, r27	; 0x11

    // don't save new start location
    setStart = false;
    53f4:	1d 86       	std	Y+13, r1	; 0x0d
    53f6:	16 c0       	rjmp	.+44     	; 0x5424 <_ZN8SdVolume15allocContiguousEmPm+0x8a>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    53f8:	ee 89       	ldd	r30, Y+22	; 0x16
    53fa:	ff 89       	ldd	r31, Y+23	; 0x17
    53fc:	80 81       	ld	r24, Z
    53fe:	91 81       	ldd	r25, Z+1	; 0x01
    5400:	a2 81       	ldd	r26, Z+2	; 0x02
    5402:	b3 81       	ldd	r27, Z+3	; 0x03
    5404:	8e 87       	std	Y+14, r24	; 0x0e
    5406:	9f 87       	std	Y+15, r25	; 0x0f
    5408:	a8 8b       	std	Y+16, r26	; 0x10
    540a:	b9 8b       	std	Y+17, r27	; 0x11

    // save next search start if one cluster
    setStart = 1 == count;
    540c:	1d 86       	std	Y+13, r1	; 0x0d
    540e:	88 8d       	ldd	r24, Y+24	; 0x18
    5410:	99 8d       	ldd	r25, Y+25	; 0x19
    5412:	aa 8d       	ldd	r26, Y+26	; 0x1a
    5414:	bb 8d       	ldd	r27, Y+27	; 0x1b
    5416:	81 30       	cpi	r24, 0x01	; 1
    5418:	91 05       	cpc	r25, r1
    541a:	a1 05       	cpc	r26, r1
    541c:	b1 05       	cpc	r27, r1
    541e:	11 f4       	brne	.+4      	; 0x5424 <_ZN8SdVolume15allocContiguousEmPm+0x8a>
    5420:	81 e0       	ldi	r24, 0x01	; 1
    5422:	8d 87       	std	Y+13, r24	; 0x0d
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    5424:	8e 85       	ldd	r24, Y+14	; 0x0e
    5426:	9f 85       	ldd	r25, Y+15	; 0x0f
    5428:	a8 89       	ldd	r26, Y+16	; 0x10
    542a:	b9 89       	ldd	r27, Y+17	; 0x11
    542c:	89 87       	std	Y+9, r24	; 0x09
    542e:	9a 87       	std	Y+10, r25	; 0x0a
    5430:	ab 87       	std	Y+11, r26	; 0x0b
    5432:	bc 87       	std	Y+12, r27	; 0x0c

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    5434:	ee 89       	ldd	r30, Y+22	; 0x16
    5436:	ff 89       	ldd	r31, Y+23	; 0x17
    5438:	81 85       	ldd	r24, Z+9	; 0x09
    543a:	92 85       	ldd	r25, Z+10	; 0x0a
    543c:	a3 85       	ldd	r26, Z+11	; 0x0b
    543e:	b4 85       	ldd	r27, Z+12	; 0x0c
    5440:	01 96       	adiw	r24, 0x01	; 1
    5442:	a1 1d       	adc	r26, r1
    5444:	b1 1d       	adc	r27, r1
    5446:	8d 83       	std	Y+5, r24	; 0x05
    5448:	9e 83       	std	Y+6, r25	; 0x06
    544a:	af 83       	std	Y+7, r26	; 0x07
    544c:	b8 87       	std	Y+8, r27	; 0x08

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    544e:	19 82       	std	Y+1, r1	; 0x01
    5450:	1a 82       	std	Y+2, r1	; 0x02
    5452:	1b 82       	std	Y+3, r1	; 0x03
    5454:	1c 82       	std	Y+4, r1	; 0x04
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    5456:	ee 89       	ldd	r30, Y+22	; 0x16
    5458:	ff 89       	ldd	r31, Y+23	; 0x17
    545a:	21 85       	ldd	r18, Z+9	; 0x09
    545c:	32 85       	ldd	r19, Z+10	; 0x0a
    545e:	43 85       	ldd	r20, Z+11	; 0x0b
    5460:	54 85       	ldd	r21, Z+12	; 0x0c
    5462:	89 81       	ldd	r24, Y+1	; 0x01
    5464:	9a 81       	ldd	r25, Y+2	; 0x02
    5466:	ab 81       	ldd	r26, Y+3	; 0x03
    5468:	bc 81       	ldd	r27, Y+4	; 0x04
    546a:	82 17       	cp	r24, r18
    546c:	93 07       	cpc	r25, r19
    546e:	a4 07       	cpc	r26, r20
    5470:	b5 07       	cpc	r27, r21
    5472:	10 f0       	brcs	.+4      	; 0x5478 <_ZN8SdVolume15allocContiguousEmPm+0xde>
    5474:	1a a2       	std	Y+34, r1	; 0x22
    5476:	04 c1       	rjmp	.+520    	; 0x5680 <_ZN8SdVolume15allocContiguousEmPm+0x2e6>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    5478:	29 85       	ldd	r18, Y+9	; 0x09
    547a:	3a 85       	ldd	r19, Y+10	; 0x0a
    547c:	4b 85       	ldd	r20, Y+11	; 0x0b
    547e:	5c 85       	ldd	r21, Y+12	; 0x0c
    5480:	8d 81       	ldd	r24, Y+5	; 0x05
    5482:	9e 81       	ldd	r25, Y+6	; 0x06
    5484:	af 81       	ldd	r26, Y+7	; 0x07
    5486:	b8 85       	ldd	r27, Y+8	; 0x08
    5488:	82 17       	cp	r24, r18
    548a:	93 07       	cpc	r25, r19
    548c:	a4 07       	cpc	r26, r20
    548e:	b5 07       	cpc	r27, r21
    5490:	80 f4       	brcc	.+32     	; 0x54b2 <_ZN8SdVolume15allocContiguousEmPm+0x118>
      bgnCluster = endCluster = 2;
    5492:	82 e0       	ldi	r24, 0x02	; 2
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	a0 e0       	ldi	r26, 0x00	; 0
    5498:	b0 e0       	ldi	r27, 0x00	; 0
    549a:	89 87       	std	Y+9, r24	; 0x09
    549c:	9a 87       	std	Y+10, r25	; 0x0a
    549e:	ab 87       	std	Y+11, r26	; 0x0b
    54a0:	bc 87       	std	Y+12, r27	; 0x0c
    54a2:	89 85       	ldd	r24, Y+9	; 0x09
    54a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54a6:	ab 85       	ldd	r26, Y+11	; 0x0b
    54a8:	bc 85       	ldd	r27, Y+12	; 0x0c
    54aa:	8e 87       	std	Y+14, r24	; 0x0e
    54ac:	9f 87       	std	Y+15, r25	; 0x0f
    54ae:	a8 8b       	std	Y+16, r26	; 0x10
    54b0:	b9 8b       	std	Y+17, r27	; 0x11
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    54b2:	8e 89       	ldd	r24, Y+22	; 0x16
    54b4:	9f 89       	ldd	r25, Y+23	; 0x17
    54b6:	29 85       	ldd	r18, Y+9	; 0x09
    54b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    54ba:	4b 85       	ldd	r20, Y+11	; 0x0b
    54bc:	5c 85       	ldd	r21, Y+12	; 0x0c
    54be:	fe 01       	movw	r30, r28
    54c0:	72 96       	adiw	r30, 0x12	; 18
    54c2:	ba 01       	movw	r22, r20
    54c4:	a9 01       	movw	r20, r18
    54c6:	9f 01       	movw	r18, r30
    54c8:	0e 94 0d 28 	call	0x501a	; 0x501a <_ZNK8SdVolume6fatGetEmPm>
    54cc:	19 a2       	std	Y+33, r1	; 0x21
    54ce:	88 23       	and	r24, r24
    54d0:	11 f4       	brne	.+4      	; 0x54d6 <_ZN8SdVolume15allocContiguousEmPm+0x13c>
    54d2:	01 e0       	ldi	r16, 0x01	; 1
    54d4:	09 a3       	std	Y+33, r16	; 0x21
    54d6:	19 a1       	ldd	r17, Y+33	; 0x21
    54d8:	11 23       	and	r17, r17
    54da:	11 f0       	breq	.+4      	; 0x54e0 <_ZN8SdVolume15allocContiguousEmPm+0x146>
    54dc:	1a a2       	std	Y+34, r1	; 0x22
    54de:	d0 c0       	rjmp	.+416    	; 0x5680 <_ZN8SdVolume15allocContiguousEmPm+0x2e6>

    if (f != 0) {
    54e0:	8a 89       	ldd	r24, Y+18	; 0x12
    54e2:	9b 89       	ldd	r25, Y+19	; 0x13
    54e4:	ac 89       	ldd	r26, Y+20	; 0x14
    54e6:	bd 89       	ldd	r27, Y+21	; 0x15
    54e8:	00 97       	sbiw	r24, 0x00	; 0
    54ea:	a1 05       	cpc	r26, r1
    54ec:	b1 05       	cpc	r27, r1
    54ee:	61 f0       	breq	.+24     	; 0x5508 <_ZN8SdVolume15allocContiguousEmPm+0x16e>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    54f0:	89 85       	ldd	r24, Y+9	; 0x09
    54f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    54f4:	ab 85       	ldd	r26, Y+11	; 0x0b
    54f6:	bc 85       	ldd	r27, Y+12	; 0x0c
    54f8:	01 96       	adiw	r24, 0x01	; 1
    54fa:	a1 1d       	adc	r26, r1
    54fc:	b1 1d       	adc	r27, r1
    54fe:	8e 87       	std	Y+14, r24	; 0x0e
    5500:	9f 87       	std	Y+15, r25	; 0x0f
    5502:	a8 8b       	std	Y+16, r26	; 0x10
    5504:	b9 8b       	std	Y+17, r27	; 0x11
    5506:	1f c0       	rjmp	.+62     	; 0x5546 <_ZN8SdVolume15allocContiguousEmPm+0x1ac>
    } else if ((endCluster - bgnCluster + 1) == count) {
    5508:	29 85       	ldd	r18, Y+9	; 0x09
    550a:	3a 85       	ldd	r19, Y+10	; 0x0a
    550c:	4b 85       	ldd	r20, Y+11	; 0x0b
    550e:	5c 85       	ldd	r21, Y+12	; 0x0c
    5510:	8e 85       	ldd	r24, Y+14	; 0x0e
    5512:	9f 85       	ldd	r25, Y+15	; 0x0f
    5514:	a8 89       	ldd	r26, Y+16	; 0x10
    5516:	b9 89       	ldd	r27, Y+17	; 0x11
    5518:	79 01       	movw	r14, r18
    551a:	8a 01       	movw	r16, r20
    551c:	e8 1a       	sub	r14, r24
    551e:	f9 0a       	sbc	r15, r25
    5520:	0a 0b       	sbc	r16, r26
    5522:	1b 0b       	sbc	r17, r27
    5524:	d8 01       	movw	r26, r16
    5526:	c7 01       	movw	r24, r14
    5528:	9c 01       	movw	r18, r24
    552a:	ad 01       	movw	r20, r26
    552c:	2f 5f       	subi	r18, 0xFF	; 255
    552e:	3f 4f       	sbci	r19, 0xFF	; 255
    5530:	4f 4f       	sbci	r20, 0xFF	; 255
    5532:	5f 4f       	sbci	r21, 0xFF	; 255
    5534:	88 8d       	ldd	r24, Y+24	; 0x18
    5536:	99 8d       	ldd	r25, Y+25	; 0x19
    5538:	aa 8d       	ldd	r26, Y+26	; 0x1a
    553a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    553c:	28 17       	cp	r18, r24
    553e:	39 07       	cpc	r19, r25
    5540:	4a 07       	cpc	r20, r26
    5542:	5b 07       	cpc	r21, r27
    5544:	b9 f0       	breq	.+46     	; 0x5574 <_ZN8SdVolume15allocContiguousEmPm+0x1da>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	9a 81       	ldd	r25, Y+2	; 0x02
    554a:	ab 81       	ldd	r26, Y+3	; 0x03
    554c:	bc 81       	ldd	r27, Y+4	; 0x04
    554e:	01 96       	adiw	r24, 0x01	; 1
    5550:	a1 1d       	adc	r26, r1
    5552:	b1 1d       	adc	r27, r1
    5554:	89 83       	std	Y+1, r24	; 0x01
    5556:	9a 83       	std	Y+2, r25	; 0x02
    5558:	ab 83       	std	Y+3, r26	; 0x03
    555a:	bc 83       	std	Y+4, r27	; 0x04
    555c:	89 85       	ldd	r24, Y+9	; 0x09
    555e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5560:	ab 85       	ldd	r26, Y+11	; 0x0b
    5562:	bc 85       	ldd	r27, Y+12	; 0x0c
    5564:	01 96       	adiw	r24, 0x01	; 1
    5566:	a1 1d       	adc	r26, r1
    5568:	b1 1d       	adc	r27, r1
    556a:	89 87       	std	Y+9, r24	; 0x09
    556c:	9a 87       	std	Y+10, r25	; 0x0a
    556e:	ab 87       	std	Y+11, r26	; 0x0b
    5570:	bc 87       	std	Y+12, r27	; 0x0c
    5572:	71 cf       	rjmp	.-286    	; 0x5456 <_ZN8SdVolume15allocContiguousEmPm+0xbc>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    5574:	8e 89       	ldd	r24, Y+22	; 0x16
    5576:	9f 89       	ldd	r25, Y+23	; 0x17
    5578:	29 85       	ldd	r18, Y+9	; 0x09
    557a:	3a 85       	ldd	r19, Y+10	; 0x0a
    557c:	4b 85       	ldd	r20, Y+11	; 0x0b
    557e:	5c 85       	ldd	r21, Y+12	; 0x0c
    5580:	ba 01       	movw	r22, r20
    5582:	a9 01       	movw	r20, r18
    5584:	0e 94 9b 12 	call	0x2536	; 0x2536 <_ZN8SdVolume9fatPutEOCEm>
    5588:	18 a2       	std	Y+32, r1	; 0x20
    558a:	88 23       	and	r24, r24
    558c:	11 f4       	brne	.+4      	; 0x5592 <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    558e:	01 e0       	ldi	r16, 0x01	; 1
    5590:	08 a3       	std	Y+32, r16	; 0x20
    5592:	18 a1       	ldd	r17, Y+32	; 0x20
    5594:	11 23       	and	r17, r17
    5596:	49 f1       	breq	.+82     	; 0x55ea <_ZN8SdVolume15allocContiguousEmPm+0x250>
    5598:	1a a2       	std	Y+34, r1	; 0x22
    559a:	72 c0       	rjmp	.+228    	; 0x5680 <_ZN8SdVolume15allocContiguousEmPm+0x2e6>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    559c:	89 85       	ldd	r24, Y+9	; 0x09
    559e:	9a 85       	ldd	r25, Y+10	; 0x0a
    55a0:	ab 85       	ldd	r26, Y+11	; 0x0b
    55a2:	bc 85       	ldd	r27, Y+12	; 0x0c
    55a4:	ac 01       	movw	r20, r24
    55a6:	bd 01       	movw	r22, r26
    55a8:	41 50       	subi	r20, 0x01	; 1
    55aa:	50 40       	sbci	r21, 0x00	; 0
    55ac:	60 40       	sbci	r22, 0x00	; 0
    55ae:	70 40       	sbci	r23, 0x00	; 0
    55b0:	8e 89       	ldd	r24, Y+22	; 0x16
    55b2:	9f 89       	ldd	r25, Y+23	; 0x17
    55b4:	09 85       	ldd	r16, Y+9	; 0x09
    55b6:	1a 85       	ldd	r17, Y+10	; 0x0a
    55b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    55ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    55bc:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <_ZN8SdVolume6fatPutEmm>
    55c0:	1f 8e       	std	Y+31, r1	; 0x1f
    55c2:	88 23       	and	r24, r24
    55c4:	11 f4       	brne	.+4      	; 0x55ca <_ZN8SdVolume15allocContiguousEmPm+0x230>
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	8f 8f       	std	Y+31, r24	; 0x1f
    55ca:	ef 8c       	ldd	r14, Y+31	; 0x1f
    55cc:	ee 20       	and	r14, r14
    55ce:	11 f0       	breq	.+4      	; 0x55d4 <_ZN8SdVolume15allocContiguousEmPm+0x23a>
    55d0:	1a a2       	std	Y+34, r1	; 0x22
    55d2:	56 c0       	rjmp	.+172    	; 0x5680 <_ZN8SdVolume15allocContiguousEmPm+0x2e6>
    endCluster--;
    55d4:	89 85       	ldd	r24, Y+9	; 0x09
    55d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    55d8:	ab 85       	ldd	r26, Y+11	; 0x0b
    55da:	bc 85       	ldd	r27, Y+12	; 0x0c
    55dc:	01 97       	sbiw	r24, 0x01	; 1
    55de:	a1 09       	sbc	r26, r1
    55e0:	b1 09       	sbc	r27, r1
    55e2:	89 87       	std	Y+9, r24	; 0x09
    55e4:	9a 87       	std	Y+10, r25	; 0x0a
    55e6:	ab 87       	std	Y+11, r26	; 0x0b
    55e8:	bc 87       	std	Y+12, r27	; 0x0c
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    55ea:	29 85       	ldd	r18, Y+9	; 0x09
    55ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    55ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    55f0:	5c 85       	ldd	r21, Y+12	; 0x0c
    55f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    55f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    55f6:	a8 89       	ldd	r26, Y+16	; 0x10
    55f8:	b9 89       	ldd	r27, Y+17	; 0x11
    55fa:	82 17       	cp	r24, r18
    55fc:	93 07       	cpc	r25, r19
    55fe:	a4 07       	cpc	r26, r20
    5600:	b5 07       	cpc	r27, r21
    5602:	60 f2       	brcs	.-104    	; 0x559c <_ZN8SdVolume15allocContiguousEmPm+0x202>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    5604:	ec 8d       	ldd	r30, Y+28	; 0x1c
    5606:	fd 8d       	ldd	r31, Y+29	; 0x1d
    5608:	80 81       	ld	r24, Z
    560a:	91 81       	ldd	r25, Z+1	; 0x01
    560c:	a2 81       	ldd	r26, Z+2	; 0x02
    560e:	b3 81       	ldd	r27, Z+3	; 0x03
    5610:	00 97       	sbiw	r24, 0x00	; 0
    5612:	a1 05       	cpc	r26, r1
    5614:	b1 05       	cpc	r27, r1
    5616:	c1 f0       	breq	.+48     	; 0x5648 <_ZN8SdVolume15allocContiguousEmPm+0x2ae>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    5618:	ec 8d       	ldd	r30, Y+28	; 0x1c
    561a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    561c:	40 81       	ld	r20, Z
    561e:	51 81       	ldd	r21, Z+1	; 0x01
    5620:	62 81       	ldd	r22, Z+2	; 0x02
    5622:	73 81       	ldd	r23, Z+3	; 0x03
    5624:	8e 89       	ldd	r24, Y+22	; 0x16
    5626:	9f 89       	ldd	r25, Y+23	; 0x17
    5628:	0e 85       	ldd	r16, Y+14	; 0x0e
    562a:	1f 85       	ldd	r17, Y+15	; 0x0f
    562c:	28 89       	ldd	r18, Y+16	; 0x10
    562e:	39 89       	ldd	r19, Y+17	; 0x11
    5630:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <_ZN8SdVolume6fatPutEmm>
    5634:	1e 8e       	std	Y+30, r1	; 0x1e
    5636:	88 23       	and	r24, r24
    5638:	11 f4       	brne	.+4      	; 0x563e <_ZN8SdVolume15allocContiguousEmPm+0x2a4>
    563a:	01 e0       	ldi	r16, 0x01	; 1
    563c:	0e 8f       	std	Y+30, r16	; 0x1e
    563e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    5640:	11 23       	and	r17, r17
    5642:	11 f0       	breq	.+4      	; 0x5648 <_ZN8SdVolume15allocContiguousEmPm+0x2ae>
    5644:	1a a2       	std	Y+34, r1	; 0x22
    5646:	1c c0       	rjmp	.+56     	; 0x5680 <_ZN8SdVolume15allocContiguousEmPm+0x2e6>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    5648:	ec 8d       	ldd	r30, Y+28	; 0x1c
    564a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    564c:	8e 85       	ldd	r24, Y+14	; 0x0e
    564e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5650:	a8 89       	ldd	r26, Y+16	; 0x10
    5652:	b9 89       	ldd	r27, Y+17	; 0x11
    5654:	80 83       	st	Z, r24
    5656:	91 83       	std	Z+1, r25	; 0x01
    5658:	a2 83       	std	Z+2, r26	; 0x02
    565a:	b3 83       	std	Z+3, r27	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    565c:	8d 85       	ldd	r24, Y+13	; 0x0d
    565e:	88 23       	and	r24, r24
    5660:	69 f0       	breq	.+26     	; 0x567c <_ZN8SdVolume15allocContiguousEmPm+0x2e2>
    5662:	8e 85       	ldd	r24, Y+14	; 0x0e
    5664:	9f 85       	ldd	r25, Y+15	; 0x0f
    5666:	a8 89       	ldd	r26, Y+16	; 0x10
    5668:	b9 89       	ldd	r27, Y+17	; 0x11
    566a:	01 96       	adiw	r24, 0x01	; 1
    566c:	a1 1d       	adc	r26, r1
    566e:	b1 1d       	adc	r27, r1
    5670:	ee 89       	ldd	r30, Y+22	; 0x16
    5672:	ff 89       	ldd	r31, Y+23	; 0x17
    5674:	80 83       	st	Z, r24
    5676:	91 83       	std	Z+1, r25	; 0x01
    5678:	a2 83       	std	Z+2, r26	; 0x02
    567a:	b3 83       	std	Z+3, r27	; 0x03

  return true;
    567c:	81 e0       	ldi	r24, 0x01	; 1
    567e:	8a a3       	std	Y+34, r24	; 0x22
    5680:	8a a1       	ldd	r24, Y+34	; 0x22
}
    5682:	a2 96       	adiw	r28, 0x22	; 34
    5684:	0f b6       	in	r0, 0x3f	; 63
    5686:	f8 94       	cli
    5688:	de bf       	out	0x3e, r29	; 62
    568a:	0f be       	out	0x3f, r0	; 63
    568c:	cd bf       	out	0x3d, r28	; 61
    568e:	cf 91       	pop	r28
    5690:	df 91       	pop	r29
    5692:	1f 91       	pop	r17
    5694:	0f 91       	pop	r16
    5696:	ff 90       	pop	r15
    5698:	ef 90       	pop	r14
    569a:	08 95       	ret
    569c:	df 93       	push	r29
    569e:	cf 93       	push	r28
    56a0:	00 d0       	rcall	.+0      	; 0x56a2 <_ZN8SdVolume15allocContiguousEmPm+0x308>
    56a2:	00 d0       	rcall	.+0      	; 0x56a4 <_ZN8SdVolume15allocContiguousEmPm+0x30a>
    56a4:	cd b7       	in	r28, 0x3d	; 61
    56a6:	de b7       	in	r29, 0x3e	; 62
    56a8:	9a 83       	std	Y+2, r25	; 0x02
    56aa:	89 83       	std	Y+1, r24	; 0x01
    56ac:	7c 83       	std	Y+4, r23	; 0x04
    56ae:	6b 83       	std	Y+3, r22	; 0x03
    56b0:	e9 81       	ldd	r30, Y+1	; 0x01
    56b2:	fa 81       	ldd	r31, Y+2	; 0x02
    56b4:	8b 81       	ldd	r24, Y+3	; 0x03
    56b6:	9c 81       	ldd	r25, Y+4	; 0x04
    56b8:	93 83       	std	Z+3, r25	; 0x03
    56ba:	82 83       	std	Z+2, r24	; 0x02
    56bc:	0f 90       	pop	r0
    56be:	0f 90       	pop	r0
    56c0:	0f 90       	pop	r0
    56c2:	0f 90       	pop	r0
    56c4:	cf 91       	pop	r28
    56c6:	df 91       	pop	r29
    56c8:	08 95       	ret
    56ca:	df 93       	push	r29
    56cc:	cf 93       	push	r28
    56ce:	00 d0       	rcall	.+0      	; 0x56d0 <_ZN8SdVolume15allocContiguousEmPm+0x336>
    56d0:	cd b7       	in	r28, 0x3d	; 61
    56d2:	de b7       	in	r29, 0x3e	; 62
    56d4:	9a 83       	std	Y+2, r25	; 0x02
    56d6:	89 83       	std	Y+1, r24	; 0x01
    56d8:	e9 81       	ldd	r30, Y+1	; 0x01
    56da:	fa 81       	ldd	r31, Y+2	; 0x02
    56dc:	80 ec       	ldi	r24, 0xC0	; 192
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	91 83       	std	Z+1, r25	; 0x01
    56e2:	80 83       	st	Z, r24
    56e4:	e9 81       	ldd	r30, Y+1	; 0x01
    56e6:	fa 81       	ldd	r31, Y+2	; 0x02
    56e8:	13 82       	std	Z+3, r1	; 0x03
    56ea:	12 82       	std	Z+2, r1	; 0x02
    56ec:	0f 90       	pop	r0
    56ee:	0f 90       	pop	r0
    56f0:	cf 91       	pop	r28
    56f2:	df 91       	pop	r29
    56f4:	08 95       	ret

000056f6 <_ZN5Print13getWriteErrorEv>:
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
  
    int getWriteError() { return write_error; }
    56f6:	df 93       	push	r29
    56f8:	cf 93       	push	r28
    56fa:	00 d0       	rcall	.+0      	; 0x56fc <_ZN5Print13getWriteErrorEv+0x6>
    56fc:	cd b7       	in	r28, 0x3d	; 61
    56fe:	de b7       	in	r29, 0x3e	; 62
    5700:	9a 83       	std	Y+2, r25	; 0x02
    5702:	89 83       	std	Y+1, r24	; 0x01
    5704:	e9 81       	ldd	r30, Y+1	; 0x01
    5706:	fa 81       	ldd	r31, Y+2	; 0x02
    5708:	82 81       	ldd	r24, Z+2	; 0x02
    570a:	93 81       	ldd	r25, Z+3	; 0x03
    570c:	0f 90       	pop	r0
    570e:	0f 90       	pop	r0
    5710:	cf 91       	pop	r28
    5712:	df 91       	pop	r29
    5714:	08 95       	ret

00005716 <_ZN5Print15clearWriteErrorEv>:
    void clearWriteError() { setWriteError(0); }
    5716:	df 93       	push	r29
    5718:	cf 93       	push	r28
    571a:	00 d0       	rcall	.+0      	; 0x571c <_ZN5Print15clearWriteErrorEv+0x6>
    571c:	cd b7       	in	r28, 0x3d	; 61
    571e:	de b7       	in	r29, 0x3e	; 62
    5720:	9a 83       	std	Y+2, r25	; 0x02
    5722:	89 83       	std	Y+1, r24	; 0x01
    5724:	89 81       	ldd	r24, Y+1	; 0x01
    5726:	9a 81       	ldd	r25, Y+2	; 0x02
    5728:	60 e0       	ldi	r22, 0x00	; 0
    572a:	70 e0       	ldi	r23, 0x00	; 0
    572c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN5Print13setWriteErrorEi>
    5730:	0f 90       	pop	r0
    5732:	0f 90       	pop	r0
    5734:	cf 91       	pop	r28
    5736:	df 91       	pop	r29
    5738:	08 95       	ret

0000573a <_ZN6StreamC2Ev>:
    573a:	df 93       	push	r29
    573c:	cf 93       	push	r28
    573e:	00 d0       	rcall	.+0      	; 0x5740 <_ZN6StreamC2Ev+0x6>
    5740:	cd b7       	in	r28, 0x3d	; 61
    5742:	de b7       	in	r29, 0x3e	; 62
    5744:	9a 83       	std	Y+2, r25	; 0x02
    5746:	89 83       	std	Y+1, r24	; 0x01
    5748:	89 81       	ldd	r24, Y+1	; 0x01
    574a:	9a 81       	ldd	r25, Y+2	; 0x02
    574c:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN5PrintC2Ev>
    5750:	e9 81       	ldd	r30, Y+1	; 0x01
    5752:	fa 81       	ldd	r31, Y+2	; 0x02
    5754:	80 e8       	ldi	r24, 0x80	; 128
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	91 83       	std	Z+1, r25	; 0x01
    575a:	80 83       	st	Z, r24
    575c:	e9 81       	ldd	r30, Y+1	; 0x01
    575e:	fa 81       	ldd	r31, Y+2	; 0x02
    5760:	88 ee       	ldi	r24, 0xE8	; 232
    5762:	93 e0       	ldi	r25, 0x03	; 3
    5764:	a0 e0       	ldi	r26, 0x00	; 0
    5766:	b0 e0       	ldi	r27, 0x00	; 0
    5768:	84 83       	std	Z+4, r24	; 0x04
    576a:	95 83       	std	Z+5, r25	; 0x05
    576c:	a6 83       	std	Z+6, r26	; 0x06
    576e:	b7 83       	std	Z+7, r27	; 0x07
    5770:	0f 90       	pop	r0
    5772:	0f 90       	pop	r0
    5774:	cf 91       	pop	r28
    5776:	df 91       	pop	r29
    5778:	08 95       	ret
    577a:	df 93       	push	r29
    577c:	cf 93       	push	r28
    577e:	00 d0       	rcall	.+0      	; 0x5780 <_ZN6StreamC2Ev+0x46>
    5780:	cd b7       	in	r28, 0x3d	; 61
    5782:	de b7       	in	r29, 0x3e	; 62
    5784:	9a 83       	std	Y+2, r25	; 0x02
    5786:	89 83       	std	Y+1, r24	; 0x01
    5788:	e9 81       	ldd	r30, Y+1	; 0x01
    578a:	fa 81       	ldd	r31, Y+2	; 0x02
    578c:	82 85       	ldd	r24, Z+10	; 0x0a
    578e:	93 85       	ldd	r25, Z+11	; 0x0b
    5790:	a4 85       	ldd	r26, Z+12	; 0x0c
    5792:	b5 85       	ldd	r27, Z+13	; 0x0d
    5794:	bc 01       	movw	r22, r24
    5796:	cd 01       	movw	r24, r26
    5798:	0f 90       	pop	r0
    579a:	0f 90       	pop	r0
    579c:	cf 91       	pop	r28
    579e:	df 91       	pop	r29
    57a0:	08 95       	ret

000057a2 <_ZNK6SdFile8fileSizeEv>:
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    57a2:	df 93       	push	r29
    57a4:	cf 93       	push	r28
    57a6:	00 d0       	rcall	.+0      	; 0x57a8 <_ZNK6SdFile8fileSizeEv+0x6>
    57a8:	cd b7       	in	r28, 0x3d	; 61
    57aa:	de b7       	in	r29, 0x3e	; 62
    57ac:	9a 83       	std	Y+2, r25	; 0x02
    57ae:	89 83       	std	Y+1, r24	; 0x01
    57b0:	e9 81       	ldd	r30, Y+1	; 0x01
    57b2:	fa 81       	ldd	r31, Y+2	; 0x02
    57b4:	83 89       	ldd	r24, Z+19	; 0x13
    57b6:	94 89       	ldd	r25, Z+20	; 0x14
    57b8:	a5 89       	ldd	r26, Z+21	; 0x15
    57ba:	b6 89       	ldd	r27, Z+22	; 0x16
    57bc:	bc 01       	movw	r22, r24
    57be:	cd 01       	movw	r24, r26
    57c0:	0f 90       	pop	r0
    57c2:	0f 90       	pop	r0
    57c4:	cf 91       	pop	r28
    57c6:	df 91       	pop	r29
    57c8:	08 95       	ret
    57ca:	df 93       	push	r29
    57cc:	cf 93       	push	r28
    57ce:	00 d0       	rcall	.+0      	; 0x57d0 <_ZNK6SdFile8fileSizeEv+0x2e>
    57d0:	0f 92       	push	r0
    57d2:	cd b7       	in	r28, 0x3d	; 61
    57d4:	de b7       	in	r29, 0x3e	; 62
    57d6:	9a 83       	std	Y+2, r25	; 0x02
    57d8:	89 83       	std	Y+1, r24	; 0x01
    57da:	e9 81       	ldd	r30, Y+1	; 0x01
    57dc:	fa 81       	ldd	r31, Y+2	; 0x02
    57de:	85 81       	ldd	r24, Z+5	; 0x05
    57e0:	1b 82       	std	Y+3, r1	; 0x03
    57e2:	82 30       	cpi	r24, 0x02	; 2
    57e4:	10 f0       	brcs	.+4      	; 0x57ea <_ZNK6SdFile8fileSizeEv+0x48>
    57e6:	81 e0       	ldi	r24, 0x01	; 1
    57e8:	8b 83       	std	Y+3, r24	; 0x03
    57ea:	8b 81       	ldd	r24, Y+3	; 0x03
    57ec:	0f 90       	pop	r0
    57ee:	0f 90       	pop	r0
    57f0:	0f 90       	pop	r0
    57f2:	cf 91       	pop	r28
    57f4:	df 91       	pop	r29
    57f6:	08 95       	ret
    57f8:	df 93       	push	r29
    57fa:	cf 93       	push	r28
    57fc:	00 d0       	rcall	.+0      	; 0x57fe <_ZNK6SdFile8fileSizeEv+0x5c>
    57fe:	0f 92       	push	r0
    5800:	cd b7       	in	r28, 0x3d	; 61
    5802:	de b7       	in	r29, 0x3e	; 62
    5804:	9a 83       	std	Y+2, r25	; 0x02
    5806:	89 83       	std	Y+1, r24	; 0x01
    5808:	e9 81       	ldd	r30, Y+1	; 0x01
    580a:	fa 81       	ldd	r31, Y+2	; 0x02
    580c:	85 81       	ldd	r24, Z+5	; 0x05
    580e:	8b 83       	std	Y+3, r24	; 0x03
    5810:	8b 81       	ldd	r24, Y+3	; 0x03
    5812:	88 23       	and	r24, r24
    5814:	11 f0       	breq	.+4      	; 0x581a <_ZNK6SdFile8fileSizeEv+0x78>
    5816:	81 e0       	ldi	r24, 0x01	; 1
    5818:	8b 83       	std	Y+3, r24	; 0x03
    581a:	8b 81       	ldd	r24, Y+3	; 0x03
    581c:	0f 90       	pop	r0
    581e:	0f 90       	pop	r0
    5820:	0f 90       	pop	r0
    5822:	cf 91       	pop	r28
    5824:	df 91       	pop	r29
    5826:	08 95       	ret

00005828 <_ZL7FreeRamv>:
/** Defined so doxygen works for function definitions. */
#define NOINLINE __attribute__((noinline,unused))
#define UNUSEDOK __attribute__((unused))
//------------------------------------------------------------------------------
/** Return the number of bytes currently free in RAM. */
static UNUSEDOK int FreeRam(void) {
    5828:	df 93       	push	r29
    582a:	cf 93       	push	r28
    582c:	00 d0       	rcall	.+0      	; 0x582e <_ZL7FreeRamv+0x6>
    582e:	cd b7       	in	r28, 0x3d	; 61
    5830:	de b7       	in	r29, 0x3e	; 62
  extern int  __bss_end;
  extern int* __brkval;
  int free_memory;
  if (reinterpret_cast<int>(__brkval) == 0) {
    5832:	80 91 7b 07 	lds	r24, 0x077B
    5836:	90 91 7c 07 	lds	r25, 0x077C
    583a:	00 97       	sbiw	r24, 0x00	; 0
    583c:	49 f4       	brne	.+18     	; 0x5850 <_ZL7FreeRamv+0x28>
    // if no heap use from end of bss section
    free_memory = reinterpret_cast<int>(&free_memory)
                  - reinterpret_cast<int>(&__bss_end);
    583e:	ce 01       	movw	r24, r28
    5840:	01 96       	adiw	r24, 0x01	; 1
    5842:	2f e7       	ldi	r18, 0x7F	; 127
    5844:	37 e0       	ldi	r19, 0x07	; 7
    5846:	82 1b       	sub	r24, r18
    5848:	93 0b       	sbc	r25, r19
    584a:	9a 83       	std	Y+2, r25	; 0x02
    584c:	89 83       	std	Y+1, r24	; 0x01
    584e:	0d c0       	rjmp	.+26     	; 0x586a <_ZL7FreeRamv+0x42>
  } else {
    // use from top of stack to heap
    free_memory = reinterpret_cast<int>(&free_memory)
                  - reinterpret_cast<int>(__brkval);
    5850:	9e 01       	movw	r18, r28
    5852:	2f 5f       	subi	r18, 0xFF	; 255
    5854:	3f 4f       	sbci	r19, 0xFF	; 255
    5856:	80 91 7b 07 	lds	r24, 0x077B
    585a:	90 91 7c 07 	lds	r25, 0x077C
    585e:	a9 01       	movw	r20, r18
    5860:	48 1b       	sub	r20, r24
    5862:	59 0b       	sbc	r21, r25
    5864:	ca 01       	movw	r24, r20
    5866:	9a 83       	std	Y+2, r25	; 0x02
    5868:	89 83       	std	Y+1, r24	; 0x01
  }
  return free_memory;
    586a:	89 81       	ldd	r24, Y+1	; 0x01
    586c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    586e:	0f 90       	pop	r0
    5870:	0f 90       	pop	r0
    5872:	cf 91       	pop	r28
    5874:	df 91       	pop	r29
    5876:	08 95       	ret

00005878 <_ZN4FileC2Ev>:
       Serial.println(nfilecount, DEC);
    */
  }
}

File::File(void) {
    5878:	df 93       	push	r29
    587a:	cf 93       	push	r28
    587c:	00 d0       	rcall	.+0      	; 0x587e <_ZN4FileC2Ev+0x6>
    587e:	cd b7       	in	r28, 0x3d	; 61
    5880:	de b7       	in	r29, 0x3e	; 62
    5882:	9a 83       	std	Y+2, r25	; 0x02
    5884:	89 83       	std	Y+1, r24	; 0x01
    5886:	89 81       	ldd	r24, Y+1	; 0x01
    5888:	9a 81       	ldd	r25, Y+2	; 0x02
    588a:	0e 94 9d 2b 	call	0x573a	; 0x573a <_ZN6StreamC2Ev>
    588e:	e9 81       	ldd	r30, Y+1	; 0x01
    5890:	fa 81       	ldd	r31, Y+2	; 0x02
    5892:	80 e7       	ldi	r24, 0x70	; 112
    5894:	90 e0       	ldi	r25, 0x00	; 0
    5896:	91 83       	std	Z+1, r25	; 0x01
    5898:	80 83       	st	Z, r24
  _file = 0;
    589a:	e9 81       	ldd	r30, Y+1	; 0x01
    589c:	fa 81       	ldd	r31, Y+2	; 0x02
    589e:	12 8e       	std	Z+26, r1	; 0x1a
    58a0:	11 8e       	std	Z+25, r1	; 0x19
  _name[0] = 0;
    58a2:	e9 81       	ldd	r30, Y+1	; 0x01
    58a4:	fa 81       	ldd	r31, Y+2	; 0x02
    58a6:	14 86       	std	Z+12, r1	; 0x0c
  //Serial.print("Created empty file object");
}
    58a8:	0f 90       	pop	r0
    58aa:	0f 90       	pop	r0
    58ac:	cf 91       	pop	r28
    58ae:	df 91       	pop	r29
    58b0:	08 95       	ret

000058b2 <_ZN4FileC1Ev>:
       Serial.println(nfilecount, DEC);
    */
  }
}

File::File(void) {
    58b2:	df 93       	push	r29
    58b4:	cf 93       	push	r28
    58b6:	00 d0       	rcall	.+0      	; 0x58b8 <_ZN4FileC1Ev+0x6>
    58b8:	cd b7       	in	r28, 0x3d	; 61
    58ba:	de b7       	in	r29, 0x3e	; 62
    58bc:	9a 83       	std	Y+2, r25	; 0x02
    58be:	89 83       	std	Y+1, r24	; 0x01
    58c0:	89 81       	ldd	r24, Y+1	; 0x01
    58c2:	9a 81       	ldd	r25, Y+2	; 0x02
    58c4:	0e 94 9d 2b 	call	0x573a	; 0x573a <_ZN6StreamC2Ev>
    58c8:	e9 81       	ldd	r30, Y+1	; 0x01
    58ca:	fa 81       	ldd	r31, Y+2	; 0x02
    58cc:	80 e7       	ldi	r24, 0x70	; 112
    58ce:	90 e0       	ldi	r25, 0x00	; 0
    58d0:	91 83       	std	Z+1, r25	; 0x01
    58d2:	80 83       	st	Z, r24
  _file = 0;
    58d4:	e9 81       	ldd	r30, Y+1	; 0x01
    58d6:	fa 81       	ldd	r31, Y+2	; 0x02
    58d8:	12 8e       	std	Z+26, r1	; 0x1a
    58da:	11 8e       	std	Z+25, r1	; 0x19
  _name[0] = 0;
    58dc:	e9 81       	ldd	r30, Y+1	; 0x01
    58de:	fa 81       	ldd	r31, Y+2	; 0x02
    58e0:	14 86       	std	Z+12, r1	; 0x0c
  //Serial.print("Created empty file object");
}
    58e2:	0f 90       	pop	r0
    58e4:	0f 90       	pop	r0
    58e6:	cf 91       	pop	r28
    58e8:	df 91       	pop	r29
    58ea:	08 95       	ret

000058ec <_ZN4FileD2Ev>:

File::~File(void) {
    58ec:	df 93       	push	r29
    58ee:	cf 93       	push	r28
    58f0:	00 d0       	rcall	.+0      	; 0x58f2 <_ZN4FileD2Ev+0x6>
    58f2:	cd b7       	in	r28, 0x3d	; 61
    58f4:	de b7       	in	r29, 0x3e	; 62
    58f6:	9a 83       	std	Y+2, r25	; 0x02
    58f8:	89 83       	std	Y+1, r24	; 0x01
    58fa:	e9 81       	ldd	r30, Y+1	; 0x01
    58fc:	fa 81       	ldd	r31, Y+2	; 0x02
    58fe:	80 e7       	ldi	r24, 0x70	; 112
    5900:	90 e0       	ldi	r25, 0x00	; 0
    5902:	91 83       	std	Z+1, r25	; 0x01
    5904:	80 83       	st	Z, r24
  //  Serial.print("Deleted file object");
}
    5906:	0f 90       	pop	r0
    5908:	0f 90       	pop	r0
    590a:	cf 91       	pop	r28
    590c:	df 91       	pop	r29
    590e:	08 95       	ret

00005910 <_ZN4FileD1Ev>:
  _file = 0;
  _name[0] = 0;
  //Serial.print("Created empty file object");
}

File::~File(void) {
    5910:	df 93       	push	r29
    5912:	cf 93       	push	r28
    5914:	00 d0       	rcall	.+0      	; 0x5916 <_ZN4FileD1Ev+0x6>
    5916:	cd b7       	in	r28, 0x3d	; 61
    5918:	de b7       	in	r29, 0x3e	; 62
    591a:	9a 83       	std	Y+2, r25	; 0x02
    591c:	89 83       	std	Y+1, r24	; 0x01
    591e:	e9 81       	ldd	r30, Y+1	; 0x01
    5920:	fa 81       	ldd	r31, Y+2	; 0x02
    5922:	80 e7       	ldi	r24, 0x70	; 112
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	91 83       	std	Z+1, r25	; 0x01
    5928:	80 83       	st	Z, r24
  //  Serial.print("Deleted file object");
}
    592a:	0f 90       	pop	r0
    592c:	0f 90       	pop	r0
    592e:	cf 91       	pop	r28
    5930:	df 91       	pop	r29
    5932:	08 95       	ret

00005934 <_ZN4File4nameEv>:

// returns a pointer to the file name
char *File::name(void) {
    5934:	df 93       	push	r29
    5936:	cf 93       	push	r28
    5938:	00 d0       	rcall	.+0      	; 0x593a <_ZN4File4nameEv+0x6>
    593a:	cd b7       	in	r28, 0x3d	; 61
    593c:	de b7       	in	r29, 0x3e	; 62
    593e:	9a 83       	std	Y+2, r25	; 0x02
    5940:	89 83       	std	Y+1, r24	; 0x01
  return _name;
    5942:	89 81       	ldd	r24, Y+1	; 0x01
    5944:	9a 81       	ldd	r25, Y+2	; 0x02
    5946:	0c 96       	adiw	r24, 0x0c	; 12
}
    5948:	0f 90       	pop	r0
    594a:	0f 90       	pop	r0
    594c:	cf 91       	pop	r28
    594e:	df 91       	pop	r29
    5950:	08 95       	ret

00005952 <_ZN4File11isDirectoryEv>:

// a directory is a special type of file
boolean File::isDirectory(void) {
    5952:	df 93       	push	r29
    5954:	cf 93       	push	r28
    5956:	00 d0       	rcall	.+0      	; 0x5958 <_ZN4File11isDirectoryEv+0x6>
    5958:	0f 92       	push	r0
    595a:	cd b7       	in	r28, 0x3d	; 61
    595c:	de b7       	in	r29, 0x3e	; 62
    595e:	9a 83       	std	Y+2, r25	; 0x02
    5960:	89 83       	std	Y+1, r24	; 0x01
  return (_file && _file->isDir());
    5962:	e9 81       	ldd	r30, Y+1	; 0x01
    5964:	fa 81       	ldd	r31, Y+2	; 0x02
    5966:	81 8d       	ldd	r24, Z+25	; 0x19
    5968:	92 8d       	ldd	r25, Z+26	; 0x1a
    596a:	00 97       	sbiw	r24, 0x00	; 0
    596c:	59 f0       	breq	.+22     	; 0x5984 <_ZN4File11isDirectoryEv+0x32>
    596e:	e9 81       	ldd	r30, Y+1	; 0x01
    5970:	fa 81       	ldd	r31, Y+2	; 0x02
    5972:	81 8d       	ldd	r24, Z+25	; 0x19
    5974:	92 8d       	ldd	r25, Z+26	; 0x1a
    5976:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <_ZNK6SdFile5isDirEv>
    597a:	88 23       	and	r24, r24
    597c:	19 f0       	breq	.+6      	; 0x5984 <_ZN4File11isDirectoryEv+0x32>
    597e:	81 e0       	ldi	r24, 0x01	; 1
    5980:	8b 83       	std	Y+3, r24	; 0x03
    5982:	01 c0       	rjmp	.+2      	; 0x5986 <_ZN4File11isDirectoryEv+0x34>
    5984:	1b 82       	std	Y+3, r1	; 0x03
    5986:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5988:	0f 90       	pop	r0
    598a:	0f 90       	pop	r0
    598c:	0f 90       	pop	r0
    598e:	cf 91       	pop	r28
    5990:	df 91       	pop	r29
    5992:	08 95       	ret

00005994 <_ZN4File5writeEh>:


size_t File::write(uint8_t val) {
    5994:	df 93       	push	r29
    5996:	cf 93       	push	r28
    5998:	00 d0       	rcall	.+0      	; 0x599a <_ZN4File5writeEh+0x6>
    599a:	0f 92       	push	r0
    599c:	cd b7       	in	r28, 0x3d	; 61
    599e:	de b7       	in	r29, 0x3e	; 62
    59a0:	9a 83       	std	Y+2, r25	; 0x02
    59a2:	89 83       	std	Y+1, r24	; 0x01
    59a4:	6b 83       	std	Y+3, r22	; 0x03
  return write(&val, 1);
    59a6:	e9 81       	ldd	r30, Y+1	; 0x01
    59a8:	fa 81       	ldd	r31, Y+2	; 0x02
    59aa:	80 81       	ld	r24, Z
    59ac:	91 81       	ldd	r25, Z+1	; 0x01
    59ae:	fc 01       	movw	r30, r24
    59b0:	32 96       	adiw	r30, 0x02	; 2
    59b2:	01 90       	ld	r0, Z+
    59b4:	f0 81       	ld	r31, Z
    59b6:	e0 2d       	mov	r30, r0
    59b8:	89 81       	ldd	r24, Y+1	; 0x01
    59ba:	9a 81       	ldd	r25, Y+2	; 0x02
    59bc:	9e 01       	movw	r18, r28
    59be:	2d 5f       	subi	r18, 0xFD	; 253
    59c0:	3f 4f       	sbci	r19, 0xFF	; 255
    59c2:	b9 01       	movw	r22, r18
    59c4:	41 e0       	ldi	r20, 0x01	; 1
    59c6:	50 e0       	ldi	r21, 0x00	; 0
    59c8:	09 95       	icall
}
    59ca:	0f 90       	pop	r0
    59cc:	0f 90       	pop	r0
    59ce:	0f 90       	pop	r0
    59d0:	cf 91       	pop	r28
    59d2:	df 91       	pop	r29
    59d4:	08 95       	ret

000059d6 <_ZN4File8positionEv>:
  if (! _file) return false;

  return _file->seekSet(pos);
}

uint32_t File::position() {
    59d6:	df 93       	push	r29
    59d8:	cf 93       	push	r28
    59da:	00 d0       	rcall	.+0      	; 0x59dc <_ZN4File8positionEv+0x6>
    59dc:	00 d0       	rcall	.+0      	; 0x59de <_ZN4File8positionEv+0x8>
    59de:	00 d0       	rcall	.+0      	; 0x59e0 <_ZN4File8positionEv+0xa>
    59e0:	cd b7       	in	r28, 0x3d	; 61
    59e2:	de b7       	in	r29, 0x3e	; 62
    59e4:	9a 83       	std	Y+2, r25	; 0x02
    59e6:	89 83       	std	Y+1, r24	; 0x01
  if (! _file) return -1;
    59e8:	e9 81       	ldd	r30, Y+1	; 0x01
    59ea:	fa 81       	ldd	r31, Y+2	; 0x02
    59ec:	81 8d       	ldd	r24, Z+25	; 0x19
    59ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    59f0:	00 97       	sbiw	r24, 0x00	; 0
    59f2:	49 f4       	brne	.+18     	; 0x5a06 <_ZN4File8positionEv+0x30>
    59f4:	8f ef       	ldi	r24, 0xFF	; 255
    59f6:	9f ef       	ldi	r25, 0xFF	; 255
    59f8:	af ef       	ldi	r26, 0xFF	; 255
    59fa:	bf ef       	ldi	r27, 0xFF	; 255
    59fc:	8b 83       	std	Y+3, r24	; 0x03
    59fe:	9c 83       	std	Y+4, r25	; 0x04
    5a00:	ad 83       	std	Y+5, r26	; 0x05
    5a02:	be 83       	std	Y+6, r27	; 0x06
    5a04:	0c c0       	rjmp	.+24     	; 0x5a1e <_ZN4File8positionEv+0x48>
  return _file->curPosition();
    5a06:	e9 81       	ldd	r30, Y+1	; 0x01
    5a08:	fa 81       	ldd	r31, Y+2	; 0x02
    5a0a:	81 8d       	ldd	r24, Z+25	; 0x19
    5a0c:	92 8d       	ldd	r25, Z+26	; 0x1a
    5a0e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <_ZNK6SdFile11curPositionEv>
    5a12:	dc 01       	movw	r26, r24
    5a14:	cb 01       	movw	r24, r22
    5a16:	8b 83       	std	Y+3, r24	; 0x03
    5a18:	9c 83       	std	Y+4, r25	; 0x04
    5a1a:	ad 83       	std	Y+5, r26	; 0x05
    5a1c:	be 83       	std	Y+6, r27	; 0x06
    5a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a20:	9c 81       	ldd	r25, Y+4	; 0x04
    5a22:	ad 81       	ldd	r26, Y+5	; 0x05
    5a24:	be 81       	ldd	r27, Y+6	; 0x06
}
    5a26:	bc 01       	movw	r22, r24
    5a28:	cd 01       	movw	r24, r26
    5a2a:	26 96       	adiw	r28, 0x06	; 6
    5a2c:	0f b6       	in	r0, 0x3f	; 63
    5a2e:	f8 94       	cli
    5a30:	de bf       	out	0x3e, r29	; 62
    5a32:	0f be       	out	0x3f, r0	; 63
    5a34:	cd bf       	out	0x3d, r28	; 61
    5a36:	cf 91       	pop	r28
    5a38:	df 91       	pop	r29
    5a3a:	08 95       	ret

00005a3c <_ZN4File4sizeEv>:

uint32_t File::size() {
    5a3c:	df 93       	push	r29
    5a3e:	cf 93       	push	r28
    5a40:	00 d0       	rcall	.+0      	; 0x5a42 <_ZN4File4sizeEv+0x6>
    5a42:	00 d0       	rcall	.+0      	; 0x5a44 <_ZN4File4sizeEv+0x8>
    5a44:	00 d0       	rcall	.+0      	; 0x5a46 <_ZN4File4sizeEv+0xa>
    5a46:	cd b7       	in	r28, 0x3d	; 61
    5a48:	de b7       	in	r29, 0x3e	; 62
    5a4a:	9a 83       	std	Y+2, r25	; 0x02
    5a4c:	89 83       	std	Y+1, r24	; 0x01
  if (! _file) return 0;
    5a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    5a50:	fa 81       	ldd	r31, Y+2	; 0x02
    5a52:	81 8d       	ldd	r24, Z+25	; 0x19
    5a54:	92 8d       	ldd	r25, Z+26	; 0x1a
    5a56:	00 97       	sbiw	r24, 0x00	; 0
    5a58:	29 f4       	brne	.+10     	; 0x5a64 <_ZN4File4sizeEv+0x28>
    5a5a:	1b 82       	std	Y+3, r1	; 0x03
    5a5c:	1c 82       	std	Y+4, r1	; 0x04
    5a5e:	1d 82       	std	Y+5, r1	; 0x05
    5a60:	1e 82       	std	Y+6, r1	; 0x06
    5a62:	0c c0       	rjmp	.+24     	; 0x5a7c <_ZN4File4sizeEv+0x40>
  return _file->fileSize();
    5a64:	e9 81       	ldd	r30, Y+1	; 0x01
    5a66:	fa 81       	ldd	r31, Y+2	; 0x02
    5a68:	81 8d       	ldd	r24, Z+25	; 0x19
    5a6a:	92 8d       	ldd	r25, Z+26	; 0x1a
    5a6c:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <_ZNK6SdFile8fileSizeEv>
    5a70:	dc 01       	movw	r26, r24
    5a72:	cb 01       	movw	r24, r22
    5a74:	8b 83       	std	Y+3, r24	; 0x03
    5a76:	9c 83       	std	Y+4, r25	; 0x04
    5a78:	ad 83       	std	Y+5, r26	; 0x05
    5a7a:	be 83       	std	Y+6, r27	; 0x06
    5a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    5a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    5a80:	ad 81       	ldd	r26, Y+5	; 0x05
    5a82:	be 81       	ldd	r27, Y+6	; 0x06
}
    5a84:	bc 01       	movw	r22, r24
    5a86:	cd 01       	movw	r24, r26
    5a88:	26 96       	adiw	r28, 0x06	; 6
    5a8a:	0f b6       	in	r0, 0x3f	; 63
    5a8c:	f8 94       	cli
    5a8e:	de bf       	out	0x3e, r29	; 62
    5a90:	0f be       	out	0x3f, r0	; 63
    5a92:	cd bf       	out	0x3d, r28	; 61
    5a94:	cf 91       	pop	r28
    5a96:	df 91       	pop	r29
    5a98:	08 95       	ret

00005a9a <_ZN4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    5a9a:	ef 92       	push	r14
    5a9c:	ff 92       	push	r15
    5a9e:	0f 93       	push	r16
    5aa0:	1f 93       	push	r17
    5aa2:	df 93       	push	r29
    5aa4:	cf 93       	push	r28
    5aa6:	cd b7       	in	r28, 0x3d	; 61
    5aa8:	de b7       	in	r29, 0x3e	; 62
    5aaa:	2c 97       	sbiw	r28, 0x0c	; 12
    5aac:	0f b6       	in	r0, 0x3f	; 63
    5aae:	f8 94       	cli
    5ab0:	de bf       	out	0x3e, r29	; 62
    5ab2:	0f be       	out	0x3f, r0	; 63
    5ab4:	cd bf       	out	0x3d, r28	; 61
    5ab6:	9e 83       	std	Y+6, r25	; 0x06
    5ab8:	8d 83       	std	Y+5, r24	; 0x05
  if (! _file) return 0;
    5aba:	ed 81       	ldd	r30, Y+5	; 0x05
    5abc:	fe 81       	ldd	r31, Y+6	; 0x06
    5abe:	81 8d       	ldd	r24, Z+25	; 0x19
    5ac0:	92 8d       	ldd	r25, Z+26	; 0x1a
    5ac2:	00 97       	sbiw	r24, 0x00	; 0
    5ac4:	19 f4       	brne	.+6      	; 0x5acc <_ZN4File9availableEv+0x32>
    5ac6:	1c 86       	std	Y+12, r1	; 0x0c
    5ac8:	1b 86       	std	Y+11, r1	; 0x0b
    5aca:	38 c0       	rjmp	.+112    	; 0x5b3c <_ZN4File9availableEv+0xa2>

  uint32_t n = size() - position();
    5acc:	8d 81       	ldd	r24, Y+5	; 0x05
    5ace:	9e 81       	ldd	r25, Y+6	; 0x06
    5ad0:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN4File4sizeEv>
    5ad4:	7b 01       	movw	r14, r22
    5ad6:	8c 01       	movw	r16, r24
    5ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    5ada:	9e 81       	ldd	r25, Y+6	; 0x06
    5adc:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <_ZN4File8positionEv>
    5ae0:	dc 01       	movw	r26, r24
    5ae2:	cb 01       	movw	r24, r22
    5ae4:	a8 01       	movw	r20, r16
    5ae6:	97 01       	movw	r18, r14
    5ae8:	28 1b       	sub	r18, r24
    5aea:	39 0b       	sbc	r19, r25
    5aec:	4a 0b       	sbc	r20, r26
    5aee:	5b 0b       	sbc	r21, r27
    5af0:	da 01       	movw	r26, r20
    5af2:	c9 01       	movw	r24, r18
    5af4:	89 83       	std	Y+1, r24	; 0x01
    5af6:	9a 83       	std	Y+2, r25	; 0x02
    5af8:	ab 83       	std	Y+3, r26	; 0x03
    5afa:	bc 83       	std	Y+4, r27	; 0x04

  return n > 0X7FFF ? 0X7FFF : n;
    5afc:	89 81       	ldd	r24, Y+1	; 0x01
    5afe:	9a 81       	ldd	r25, Y+2	; 0x02
    5b00:	ab 81       	ldd	r26, Y+3	; 0x03
    5b02:	bc 81       	ldd	r27, Y+4	; 0x04
    5b04:	8f 83       	std	Y+7, r24	; 0x07
    5b06:	98 87       	std	Y+8, r25	; 0x08
    5b08:	a9 87       	std	Y+9, r26	; 0x09
    5b0a:	ba 87       	std	Y+10, r27	; 0x0a
    5b0c:	2f 81       	ldd	r18, Y+7	; 0x07
    5b0e:	38 85       	ldd	r19, Y+8	; 0x08
    5b10:	49 85       	ldd	r20, Y+9	; 0x09
    5b12:	5a 85       	ldd	r21, Y+10	; 0x0a
    5b14:	20 30       	cpi	r18, 0x00	; 0
    5b16:	80 e8       	ldi	r24, 0x80	; 128
    5b18:	38 07       	cpc	r19, r24
    5b1a:	80 e0       	ldi	r24, 0x00	; 0
    5b1c:	48 07       	cpc	r20, r24
    5b1e:	80 e0       	ldi	r24, 0x00	; 0
    5b20:	58 07       	cpc	r21, r24
    5b22:	40 f0       	brcs	.+16     	; 0x5b34 <_ZN4File9availableEv+0x9a>
    5b24:	2f ef       	ldi	r18, 0xFF	; 255
    5b26:	3f e7       	ldi	r19, 0x7F	; 127
    5b28:	40 e0       	ldi	r20, 0x00	; 0
    5b2a:	50 e0       	ldi	r21, 0x00	; 0
    5b2c:	2f 83       	std	Y+7, r18	; 0x07
    5b2e:	38 87       	std	Y+8, r19	; 0x08
    5b30:	49 87       	std	Y+9, r20	; 0x09
    5b32:	5a 87       	std	Y+10, r21	; 0x0a
    5b34:	4f 81       	ldd	r20, Y+7	; 0x07
    5b36:	58 85       	ldd	r21, Y+8	; 0x08
    5b38:	5c 87       	std	Y+12, r21	; 0x0c
    5b3a:	4b 87       	std	Y+11, r20	; 0x0b
    5b3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b3e:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    5b40:	2c 96       	adiw	r28, 0x0c	; 12
    5b42:	0f b6       	in	r0, 0x3f	; 63
    5b44:	f8 94       	cli
    5b46:	de bf       	out	0x3e, r29	; 62
    5b48:	0f be       	out	0x3f, r0	; 63
    5b4a:	cd bf       	out	0x3d, r28	; 61
    5b4c:	cf 91       	pop	r28
    5b4e:	df 91       	pop	r29
    5b50:	1f 91       	pop	r17
    5b52:	0f 91       	pop	r16
    5b54:	ff 90       	pop	r15
    5b56:	ef 90       	pop	r14
    5b58:	08 95       	ret

00005b5a <_ZN4FilecvbEv>:
    Serial.println(nfilecount, DEC);
    */
  }
}

File::operator bool() {
    5b5a:	df 93       	push	r29
    5b5c:	cf 93       	push	r28
    5b5e:	00 d0       	rcall	.+0      	; 0x5b60 <_ZN4FilecvbEv+0x6>
    5b60:	00 d0       	rcall	.+0      	; 0x5b62 <_ZN4FilecvbEv+0x8>
    5b62:	cd b7       	in	r28, 0x3d	; 61
    5b64:	de b7       	in	r29, 0x3e	; 62
    5b66:	9a 83       	std	Y+2, r25	; 0x02
    5b68:	89 83       	std	Y+1, r24	; 0x01
  if (_file) 
    5b6a:	e9 81       	ldd	r30, Y+1	; 0x01
    5b6c:	fa 81       	ldd	r31, Y+2	; 0x02
    5b6e:	81 8d       	ldd	r24, Z+25	; 0x19
    5b70:	92 8d       	ldd	r25, Z+26	; 0x1a
    5b72:	00 97       	sbiw	r24, 0x00	; 0
    5b74:	79 f0       	breq	.+30     	; 0x5b94 <_ZN4FilecvbEv+0x3a>
    return  _file->isOpen();
    5b76:	e9 81       	ldd	r30, Y+1	; 0x01
    5b78:	fa 81       	ldd	r31, Y+2	; 0x02
    5b7a:	81 8d       	ldd	r24, Z+25	; 0x19
    5b7c:	92 8d       	ldd	r25, Z+26	; 0x1a
    5b7e:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZNK6SdFile6isOpenEv>
    5b82:	8c 83       	std	Y+4, r24	; 0x04
    5b84:	8c 81       	ldd	r24, Y+4	; 0x04
    5b86:	88 23       	and	r24, r24
    5b88:	11 f0       	breq	.+4      	; 0x5b8e <_ZN4FilecvbEv+0x34>
    5b8a:	81 e0       	ldi	r24, 0x01	; 1
    5b8c:	8c 83       	std	Y+4, r24	; 0x04
    5b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    5b90:	8b 83       	std	Y+3, r24	; 0x03
    5b92:	01 c0       	rjmp	.+2      	; 0x5b96 <_ZN4FilecvbEv+0x3c>
  return false;
    5b94:	1b 82       	std	Y+3, r1	; 0x03
    5b96:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5b98:	0f 90       	pop	r0
    5b9a:	0f 90       	pop	r0
    5b9c:	0f 90       	pop	r0
    5b9e:	0f 90       	pop	r0
    5ba0:	cf 91       	pop	r28
    5ba2:	df 91       	pop	r29
    5ba4:	08 95       	ret

00005ba6 <_ZN4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    5ba6:	df 93       	push	r29
    5ba8:	cf 93       	push	r28
    5baa:	00 d0       	rcall	.+0      	; 0x5bac <_ZN4File5closeEv+0x6>
    5bac:	cd b7       	in	r28, 0x3d	; 61
    5bae:	de b7       	in	r29, 0x3e	; 62
    5bb0:	9a 83       	std	Y+2, r25	; 0x02
    5bb2:	89 83       	std	Y+1, r24	; 0x01
  if (_file) {
    5bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    5bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    5bb8:	81 8d       	ldd	r24, Z+25	; 0x19
    5bba:	92 8d       	ldd	r25, Z+26	; 0x1a
    5bbc:	00 97       	sbiw	r24, 0x00	; 0
    5bbe:	81 f0       	breq	.+32     	; 0x5be0 <_ZN4File5closeEv+0x3a>
    _file->close();
    5bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    5bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    5bc4:	81 8d       	ldd	r24, Z+25	; 0x19
    5bc6:	92 8d       	ldd	r25, Z+26	; 0x1a
    5bc8:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN6SdFile5closeEv>
    free(_file); 
    5bcc:	e9 81       	ldd	r30, Y+1	; 0x01
    5bce:	fa 81       	ldd	r31, Y+2	; 0x02
    5bd0:	81 8d       	ldd	r24, Z+25	; 0x19
    5bd2:	92 8d       	ldd	r25, Z+26	; 0x1a
    5bd4:	0e 94 31 83 	call	0x10662	; 0x10662 <free>
    _file = 0;
    5bd8:	e9 81       	ldd	r30, Y+1	; 0x01
    5bda:	fa 81       	ldd	r31, Y+2	; 0x02
    5bdc:	12 8e       	std	Z+26, r1	; 0x1a
    5bde:	11 8e       	std	Z+25, r1	; 0x19
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    5be0:	0f 90       	pop	r0
    5be2:	0f 90       	pop	r0
    5be4:	cf 91       	pop	r28
    5be6:	df 91       	pop	r29
    5be8:	08 95       	ret

00005bea <_ZN4File4seekEm>:
void File::flush() {
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
    5bea:	df 93       	push	r29
    5bec:	cf 93       	push	r28
    5bee:	cd b7       	in	r28, 0x3d	; 61
    5bf0:	de b7       	in	r29, 0x3e	; 62
    5bf2:	27 97       	sbiw	r28, 0x07	; 7
    5bf4:	0f b6       	in	r0, 0x3f	; 63
    5bf6:	f8 94       	cli
    5bf8:	de bf       	out	0x3e, r29	; 62
    5bfa:	0f be       	out	0x3f, r0	; 63
    5bfc:	cd bf       	out	0x3d, r28	; 61
    5bfe:	9a 83       	std	Y+2, r25	; 0x02
    5c00:	89 83       	std	Y+1, r24	; 0x01
    5c02:	4b 83       	std	Y+3, r20	; 0x03
    5c04:	5c 83       	std	Y+4, r21	; 0x04
    5c06:	6d 83       	std	Y+5, r22	; 0x05
    5c08:	7e 83       	std	Y+6, r23	; 0x06
  if (! _file) return false;
    5c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    5c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    5c0e:	81 8d       	ldd	r24, Z+25	; 0x19
    5c10:	92 8d       	ldd	r25, Z+26	; 0x1a
    5c12:	00 97       	sbiw	r24, 0x00	; 0
    5c14:	11 f4       	brne	.+4      	; 0x5c1a <_ZN4File4seekEm+0x30>
    5c16:	1f 82       	std	Y+7, r1	; 0x07
    5c18:	0d c0       	rjmp	.+26     	; 0x5c34 <_ZN4File4seekEm+0x4a>

  return _file->seekSet(pos);
    5c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    5c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    5c1e:	81 8d       	ldd	r24, Z+25	; 0x19
    5c20:	92 8d       	ldd	r25, Z+26	; 0x1a
    5c22:	2b 81       	ldd	r18, Y+3	; 0x03
    5c24:	3c 81       	ldd	r19, Y+4	; 0x04
    5c26:	4d 81       	ldd	r20, Y+5	; 0x05
    5c28:	5e 81       	ldd	r21, Y+6	; 0x06
    5c2a:	ba 01       	movw	r22, r20
    5c2c:	a9 01       	movw	r20, r18
    5c2e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN6SdFile7seekSetEm>
    5c32:	8f 83       	std	Y+7, r24	; 0x07
    5c34:	8f 81       	ldd	r24, Y+7	; 0x07
}
    5c36:	27 96       	adiw	r28, 0x07	; 7
    5c38:	0f b6       	in	r0, 0x3f	; 63
    5c3a:	f8 94       	cli
    5c3c:	de bf       	out	0x3e, r29	; 62
    5c3e:	0f be       	out	0x3f, r0	; 63
    5c40:	cd bf       	out	0x3d, r28	; 61
    5c42:	cf 91       	pop	r28
    5c44:	df 91       	pop	r29
    5c46:	08 95       	ret

00005c48 <_ZN6SdFile7seekCurEm>:
    curPosition_ = curCluster_ = 0;
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    5c48:	df 93       	push	r29
    5c4a:	cf 93       	push	r28
    5c4c:	00 d0       	rcall	.+0      	; 0x5c4e <_ZN6SdFile7seekCurEm+0x6>
    5c4e:	00 d0       	rcall	.+0      	; 0x5c50 <_ZN6SdFile7seekCurEm+0x8>
    5c50:	00 d0       	rcall	.+0      	; 0x5c52 <_ZN6SdFile7seekCurEm+0xa>
    5c52:	cd b7       	in	r28, 0x3d	; 61
    5c54:	de b7       	in	r29, 0x3e	; 62
    5c56:	9a 83       	std	Y+2, r25	; 0x02
    5c58:	89 83       	std	Y+1, r24	; 0x01
    5c5a:	4b 83       	std	Y+3, r20	; 0x03
    5c5c:	5c 83       	std	Y+4, r21	; 0x04
    5c5e:	6d 83       	std	Y+5, r22	; 0x05
    5c60:	7e 83       	std	Y+6, r23	; 0x06
    return seekSet(curPosition_ + pos);
    5c62:	e9 81       	ldd	r30, Y+1	; 0x01
    5c64:	fa 81       	ldd	r31, Y+2	; 0x02
    5c66:	22 85       	ldd	r18, Z+10	; 0x0a
    5c68:	33 85       	ldd	r19, Z+11	; 0x0b
    5c6a:	44 85       	ldd	r20, Z+12	; 0x0c
    5c6c:	55 85       	ldd	r21, Z+13	; 0x0d
    5c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5c70:	9c 81       	ldd	r25, Y+4	; 0x04
    5c72:	ad 81       	ldd	r26, Y+5	; 0x05
    5c74:	be 81       	ldd	r27, Y+6	; 0x06
    5c76:	28 0f       	add	r18, r24
    5c78:	39 1f       	adc	r19, r25
    5c7a:	4a 1f       	adc	r20, r26
    5c7c:	5b 1f       	adc	r21, r27
    5c7e:	89 81       	ldd	r24, Y+1	; 0x01
    5c80:	9a 81       	ldd	r25, Y+2	; 0x02
    5c82:	ba 01       	movw	r22, r20
    5c84:	a9 01       	movw	r20, r18
    5c86:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN6SdFile7seekSetEm>
  }
    5c8a:	26 96       	adiw	r28, 0x06	; 6
    5c8c:	0f b6       	in	r0, 0x3f	; 63
    5c8e:	f8 94       	cli
    5c90:	de bf       	out	0x3e, r29	; 62
    5c92:	0f be       	out	0x3f, r0	; 63
    5c94:	cd bf       	out	0x3d, r28	; 61
    5c96:	cf 91       	pop	r28
    5c98:	df 91       	pop	r29
    5c9a:	08 95       	ret

00005c9c <_ZN4File5flushEv>:
  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
    5c9c:	df 93       	push	r29
    5c9e:	cf 93       	push	r28
    5ca0:	00 d0       	rcall	.+0      	; 0x5ca2 <_ZN4File5flushEv+0x6>
    5ca2:	cd b7       	in	r28, 0x3d	; 61
    5ca4:	de b7       	in	r29, 0x3e	; 62
    5ca6:	9a 83       	std	Y+2, r25	; 0x02
    5ca8:	89 83       	std	Y+1, r24	; 0x01
  if (_file)
    5caa:	e9 81       	ldd	r30, Y+1	; 0x01
    5cac:	fa 81       	ldd	r31, Y+2	; 0x02
    5cae:	81 8d       	ldd	r24, Z+25	; 0x19
    5cb0:	92 8d       	ldd	r25, Z+26	; 0x1a
    5cb2:	00 97       	sbiw	r24, 0x00	; 0
    5cb4:	31 f0       	breq	.+12     	; 0x5cc2 <_ZN4File5flushEv+0x26>
    _file->sync();
    5cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    5cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    5cba:	81 8d       	ldd	r24, Z+25	; 0x19
    5cbc:	92 8d       	ldd	r25, Z+26	; 0x1a
    5cbe:	0e 94 04 11 	call	0x2208	; 0x2208 <_ZN6SdFile4syncEv>
}
    5cc2:	0f 90       	pop	r0
    5cc4:	0f 90       	pop	r0
    5cc6:	cf 91       	pop	r28
    5cc8:	df 91       	pop	r29
    5cca:	08 95       	ret

00005ccc <_ZN4File4readEPvj>:
    return _file->read();
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
    5ccc:	df 93       	push	r29
    5cce:	cf 93       	push	r28
    5cd0:	cd b7       	in	r28, 0x3d	; 61
    5cd2:	de b7       	in	r29, 0x3e	; 62
    5cd4:	28 97       	sbiw	r28, 0x08	; 8
    5cd6:	0f b6       	in	r0, 0x3f	; 63
    5cd8:	f8 94       	cli
    5cda:	de bf       	out	0x3e, r29	; 62
    5cdc:	0f be       	out	0x3f, r0	; 63
    5cde:	cd bf       	out	0x3d, r28	; 61
    5ce0:	9a 83       	std	Y+2, r25	; 0x02
    5ce2:	89 83       	std	Y+1, r24	; 0x01
    5ce4:	7c 83       	std	Y+4, r23	; 0x04
    5ce6:	6b 83       	std	Y+3, r22	; 0x03
    5ce8:	5e 83       	std	Y+6, r21	; 0x06
    5cea:	4d 83       	std	Y+5, r20	; 0x05
  if (_file) 
    5cec:	e9 81       	ldd	r30, Y+1	; 0x01
    5cee:	fa 81       	ldd	r31, Y+2	; 0x02
    5cf0:	81 8d       	ldd	r24, Z+25	; 0x19
    5cf2:	92 8d       	ldd	r25, Z+26	; 0x1a
    5cf4:	00 97       	sbiw	r24, 0x00	; 0
    5cf6:	71 f0       	breq	.+28     	; 0x5d14 <_ZN4File4readEPvj+0x48>
    return _file->read(buf, nbyte);
    5cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    5cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    5cfc:	81 8d       	ldd	r24, Z+25	; 0x19
    5cfe:	92 8d       	ldd	r25, Z+26	; 0x1a
    5d00:	2b 81       	ldd	r18, Y+3	; 0x03
    5d02:	3c 81       	ldd	r19, Y+4	; 0x04
    5d04:	4d 81       	ldd	r20, Y+5	; 0x05
    5d06:	5e 81       	ldd	r21, Y+6	; 0x06
    5d08:	b9 01       	movw	r22, r18
    5d0a:	0e 94 76 14 	call	0x28ec	; 0x28ec <_ZN6SdFile4readEPvj>
    5d0e:	98 87       	std	Y+8, r25	; 0x08
    5d10:	8f 83       	std	Y+7, r24	; 0x07
    5d12:	02 c0       	rjmp	.+4      	; 0x5d18 <_ZN4File4readEPvj+0x4c>
  return 0;
    5d14:	18 86       	std	Y+8, r1	; 0x08
    5d16:	1f 82       	std	Y+7, r1	; 0x07
    5d18:	8f 81       	ldd	r24, Y+7	; 0x07
    5d1a:	98 85       	ldd	r25, Y+8	; 0x08
}
    5d1c:	28 96       	adiw	r28, 0x08	; 8
    5d1e:	0f b6       	in	r0, 0x3f	; 63
    5d20:	f8 94       	cli
    5d22:	de bf       	out	0x3e, r29	; 62
    5d24:	0f be       	out	0x3f, r0	; 63
    5d26:	cd bf       	out	0x3d, r28	; 61
    5d28:	cf 91       	pop	r28
    5d2a:	df 91       	pop	r29
    5d2c:	08 95       	ret
    5d2e:	df 93       	push	r29
    5d30:	cf 93       	push	r28
    5d32:	00 d0       	rcall	.+0      	; 0x5d34 <_ZN4File4readEPvj+0x68>
    5d34:	00 d0       	rcall	.+0      	; 0x5d36 <_ZN4File4readEPvj+0x6a>
    5d36:	0f 92       	push	r0
    5d38:	cd b7       	in	r28, 0x3d	; 61
    5d3a:	de b7       	in	r29, 0x3e	; 62
    5d3c:	9b 83       	std	Y+3, r25	; 0x03
    5d3e:	8a 83       	std	Y+2, r24	; 0x02
    5d40:	8a 81       	ldd	r24, Y+2	; 0x02
    5d42:	9b 81       	ldd	r25, Y+3	; 0x03
    5d44:	9e 01       	movw	r18, r28
    5d46:	2f 5f       	subi	r18, 0xFF	; 255
    5d48:	3f 4f       	sbci	r19, 0xFF	; 255
    5d4a:	b9 01       	movw	r22, r18
    5d4c:	41 e0       	ldi	r20, 0x01	; 1
    5d4e:	50 e0       	ldi	r21, 0x00	; 0
    5d50:	0e 94 76 14 	call	0x28ec	; 0x28ec <_ZN6SdFile4readEPvj>
    5d54:	81 30       	cpi	r24, 0x01	; 1
    5d56:	91 05       	cpc	r25, r1
    5d58:	31 f4       	brne	.+12     	; 0x5d66 <_ZN4File4readEPvj+0x9a>
    5d5a:	89 81       	ldd	r24, Y+1	; 0x01
    5d5c:	28 2f       	mov	r18, r24
    5d5e:	30 e0       	ldi	r19, 0x00	; 0
    5d60:	3d 83       	std	Y+5, r19	; 0x05
    5d62:	2c 83       	std	Y+4, r18	; 0x04
    5d64:	04 c0       	rjmp	.+8      	; 0x5d6e <_ZN4File4readEPvj+0xa2>
    5d66:	8f ef       	ldi	r24, 0xFF	; 255
    5d68:	9f ef       	ldi	r25, 0xFF	; 255
    5d6a:	9d 83       	std	Y+5, r25	; 0x05
    5d6c:	8c 83       	std	Y+4, r24	; 0x04
    5d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    5d70:	9d 81       	ldd	r25, Y+5	; 0x05
    5d72:	0f 90       	pop	r0
    5d74:	0f 90       	pop	r0
    5d76:	0f 90       	pop	r0
    5d78:	0f 90       	pop	r0
    5d7a:	0f 90       	pop	r0
    5d7c:	cf 91       	pop	r28
    5d7e:	df 91       	pop	r29
    5d80:	08 95       	ret

00005d82 <_ZN4File4readEv>:
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    5d82:	df 93       	push	r29
    5d84:	cf 93       	push	r28
    5d86:	00 d0       	rcall	.+0      	; 0x5d88 <_ZN4File4readEv+0x6>
    5d88:	00 d0       	rcall	.+0      	; 0x5d8a <_ZN4File4readEv+0x8>
    5d8a:	cd b7       	in	r28, 0x3d	; 61
    5d8c:	de b7       	in	r29, 0x3e	; 62
    5d8e:	9a 83       	std	Y+2, r25	; 0x02
    5d90:	89 83       	std	Y+1, r24	; 0x01
  if (_file) 
    5d92:	e9 81       	ldd	r30, Y+1	; 0x01
    5d94:	fa 81       	ldd	r31, Y+2	; 0x02
    5d96:	81 8d       	ldd	r24, Z+25	; 0x19
    5d98:	92 8d       	ldd	r25, Z+26	; 0x1a
    5d9a:	00 97       	sbiw	r24, 0x00	; 0
    5d9c:	49 f0       	breq	.+18     	; 0x5db0 <_ZN4File4readEv+0x2e>
    return _file->read();
    5d9e:	e9 81       	ldd	r30, Y+1	; 0x01
    5da0:	fa 81       	ldd	r31, Y+2	; 0x02
    5da2:	81 8d       	ldd	r24, Z+25	; 0x19
    5da4:	92 8d       	ldd	r25, Z+26	; 0x1a
    5da6:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <_ZN6SdFile4readEv>
    5daa:	9c 83       	std	Y+4, r25	; 0x04
    5dac:	8b 83       	std	Y+3, r24	; 0x03
    5dae:	04 c0       	rjmp	.+8      	; 0x5db8 <_ZN4File4readEv+0x36>
  return -1;
    5db0:	8f ef       	ldi	r24, 0xFF	; 255
    5db2:	9f ef       	ldi	r25, 0xFF	; 255
    5db4:	9c 83       	std	Y+4, r25	; 0x04
    5db6:	8b 83       	std	Y+3, r24	; 0x03
    5db8:	8b 81       	ldd	r24, Y+3	; 0x03
    5dba:	9c 81       	ldd	r25, Y+4	; 0x04
}
    5dbc:	0f 90       	pop	r0
    5dbe:	0f 90       	pop	r0
    5dc0:	0f 90       	pop	r0
    5dc2:	0f 90       	pop	r0
    5dc4:	cf 91       	pop	r28
    5dc6:	df 91       	pop	r29
    5dc8:	08 95       	ret

00005dca <_ZN4File4peekEv>:
    return 0;
  }
  return t;
}

int File::peek() {
    5dca:	df 93       	push	r29
    5dcc:	cf 93       	push	r28
    5dce:	00 d0       	rcall	.+0      	; 0x5dd0 <_ZN4File4peekEv+0x6>
    5dd0:	00 d0       	rcall	.+0      	; 0x5dd2 <_ZN4File4peekEv+0x8>
    5dd2:	00 d0       	rcall	.+0      	; 0x5dd4 <_ZN4File4peekEv+0xa>
    5dd4:	cd b7       	in	r28, 0x3d	; 61
    5dd6:	de b7       	in	r29, 0x3e	; 62
    5dd8:	9c 83       	std	Y+4, r25	; 0x04
    5dda:	8b 83       	std	Y+3, r24	; 0x03
  if (! _file) 
    5ddc:	eb 81       	ldd	r30, Y+3	; 0x03
    5dde:	fc 81       	ldd	r31, Y+4	; 0x04
    5de0:	81 8d       	ldd	r24, Z+25	; 0x19
    5de2:	92 8d       	ldd	r25, Z+26	; 0x1a
    5de4:	00 97       	sbiw	r24, 0x00	; 0
    5de6:	19 f4       	brne	.+6      	; 0x5dee <_ZN4File4peekEv+0x24>
    return 0;
    5de8:	1e 82       	std	Y+6, r1	; 0x06
    5dea:	1d 82       	std	Y+5, r1	; 0x05
    5dec:	1c c0       	rjmp	.+56     	; 0x5e26 <_ZN4File4peekEv+0x5c>

  int c = _file->read();
    5dee:	eb 81       	ldd	r30, Y+3	; 0x03
    5df0:	fc 81       	ldd	r31, Y+4	; 0x04
    5df2:	81 8d       	ldd	r24, Z+25	; 0x19
    5df4:	92 8d       	ldd	r25, Z+26	; 0x1a
    5df6:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <_ZN6SdFile4readEv>
    5dfa:	9a 83       	std	Y+2, r25	; 0x02
    5dfc:	89 83       	std	Y+1, r24	; 0x01
  if (c != -1) _file->seekCur(-1);
    5dfe:	89 81       	ldd	r24, Y+1	; 0x01
    5e00:	9a 81       	ldd	r25, Y+2	; 0x02
    5e02:	2f ef       	ldi	r18, 0xFF	; 255
    5e04:	8f 3f       	cpi	r24, 0xFF	; 255
    5e06:	92 07       	cpc	r25, r18
    5e08:	51 f0       	breq	.+20     	; 0x5e1e <_ZN4File4peekEv+0x54>
    5e0a:	eb 81       	ldd	r30, Y+3	; 0x03
    5e0c:	fc 81       	ldd	r31, Y+4	; 0x04
    5e0e:	81 8d       	ldd	r24, Z+25	; 0x19
    5e10:	92 8d       	ldd	r25, Z+26	; 0x1a
    5e12:	4f ef       	ldi	r20, 0xFF	; 255
    5e14:	5f ef       	ldi	r21, 0xFF	; 255
    5e16:	6f ef       	ldi	r22, 0xFF	; 255
    5e18:	7f ef       	ldi	r23, 0xFF	; 255
    5e1a:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <_ZN6SdFile7seekCurEm>
  return c;
    5e1e:	89 81       	ldd	r24, Y+1	; 0x01
    5e20:	9a 81       	ldd	r25, Y+2	; 0x02
    5e22:	9e 83       	std	Y+6, r25	; 0x06
    5e24:	8d 83       	std	Y+5, r24	; 0x05
    5e26:	8d 81       	ldd	r24, Y+5	; 0x05
    5e28:	9e 81       	ldd	r25, Y+6	; 0x06
}
    5e2a:	26 96       	adiw	r28, 0x06	; 6
    5e2c:	0f b6       	in	r0, 0x3f	; 63
    5e2e:	f8 94       	cli
    5e30:	de bf       	out	0x3e, r29	; 62
    5e32:	0f be       	out	0x3f, r0	; 63
    5e34:	cd bf       	out	0x3d, r28	; 61
    5e36:	cf 91       	pop	r28
    5e38:	df 91       	pop	r29
    5e3a:	08 95       	ret

00005e3c <_ZN4File5writeEPKhj>:

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    5e3c:	df 93       	push	r29
    5e3e:	cf 93       	push	r28
    5e40:	cd b7       	in	r28, 0x3d	; 61
    5e42:	de b7       	in	r29, 0x3e	; 62
    5e44:	2b 97       	sbiw	r28, 0x0b	; 11
    5e46:	0f b6       	in	r0, 0x3f	; 63
    5e48:	f8 94       	cli
    5e4a:	de bf       	out	0x3e, r29	; 62
    5e4c:	0f be       	out	0x3f, r0	; 63
    5e4e:	cd bf       	out	0x3d, r28	; 61
    5e50:	9c 83       	std	Y+4, r25	; 0x04
    5e52:	8b 83       	std	Y+3, r24	; 0x03
    5e54:	7e 83       	std	Y+6, r23	; 0x06
    5e56:	6d 83       	std	Y+5, r22	; 0x05
    5e58:	58 87       	std	Y+8, r21	; 0x08
    5e5a:	4f 83       	std	Y+7, r20	; 0x07
  size_t t;
  if (!_file) {
    5e5c:	eb 81       	ldd	r30, Y+3	; 0x03
    5e5e:	fc 81       	ldd	r31, Y+4	; 0x04
    5e60:	81 8d       	ldd	r24, Z+25	; 0x19
    5e62:	92 8d       	ldd	r25, Z+26	; 0x1a
    5e64:	00 97       	sbiw	r24, 0x00	; 0
    5e66:	49 f4       	brne	.+18     	; 0x5e7a <_ZN4File5writeEPKhj+0x3e>
    setWriteError();
    5e68:	8b 81       	ldd	r24, Y+3	; 0x03
    5e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    5e6c:	61 e0       	ldi	r22, 0x01	; 1
    5e6e:	70 e0       	ldi	r23, 0x00	; 0
    5e70:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN5Print13setWriteErrorEi>
    return 0;
    5e74:	1b 86       	std	Y+11, r1	; 0x0b
    5e76:	1a 86       	std	Y+10, r1	; 0x0a
    5e78:	2e c0       	rjmp	.+92     	; 0x5ed6 <_ZN4File5writeEPKhj+0x9a>
  }
  _file->clearWriteError();
    5e7a:	eb 81       	ldd	r30, Y+3	; 0x03
    5e7c:	fc 81       	ldd	r31, Y+4	; 0x04
    5e7e:	81 8d       	ldd	r24, Z+25	; 0x19
    5e80:	92 8d       	ldd	r25, Z+26	; 0x1a
    5e82:	0e 94 8b 2b 	call	0x5716	; 0x5716 <_ZN5Print15clearWriteErrorEv>
  t = _file->write(buf, size);
    5e86:	eb 81       	ldd	r30, Y+3	; 0x03
    5e88:	fc 81       	ldd	r31, Y+4	; 0x04
    5e8a:	81 8d       	ldd	r24, Z+25	; 0x19
    5e8c:	92 8d       	ldd	r25, Z+26	; 0x1a
    5e8e:	2d 81       	ldd	r18, Y+5	; 0x05
    5e90:	3e 81       	ldd	r19, Y+6	; 0x06
    5e92:	4f 81       	ldd	r20, Y+7	; 0x07
    5e94:	58 85       	ldd	r21, Y+8	; 0x08
    5e96:	b9 01       	movw	r22, r18
    5e98:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <_ZN6SdFile5writeEPKvj>
    5e9c:	9a 83       	std	Y+2, r25	; 0x02
    5e9e:	89 83       	std	Y+1, r24	; 0x01
  if (_file->getWriteError()) {
    5ea0:	eb 81       	ldd	r30, Y+3	; 0x03
    5ea2:	fc 81       	ldd	r31, Y+4	; 0x04
    5ea4:	81 8d       	ldd	r24, Z+25	; 0x19
    5ea6:	92 8d       	ldd	r25, Z+26	; 0x1a
    5ea8:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <_ZN5Print13getWriteErrorEv>
    5eac:	19 86       	std	Y+9, r1	; 0x09
    5eae:	00 97       	sbiw	r24, 0x00	; 0
    5eb0:	11 f0       	breq	.+4      	; 0x5eb6 <_ZN4File5writeEPKhj+0x7a>
    5eb2:	81 e0       	ldi	r24, 0x01	; 1
    5eb4:	89 87       	std	Y+9, r24	; 0x09
    5eb6:	99 85       	ldd	r25, Y+9	; 0x09
    5eb8:	99 23       	and	r25, r25
    5eba:	49 f0       	breq	.+18     	; 0x5ece <_ZN4File5writeEPKhj+0x92>
    setWriteError();
    5ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    5ec0:	61 e0       	ldi	r22, 0x01	; 1
    5ec2:	70 e0       	ldi	r23, 0x00	; 0
    5ec4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <_ZN5Print13setWriteErrorEi>
    return 0;
    5ec8:	1b 86       	std	Y+11, r1	; 0x0b
    5eca:	1a 86       	std	Y+10, r1	; 0x0a
    5ecc:	04 c0       	rjmp	.+8      	; 0x5ed6 <_ZN4File5writeEPKhj+0x9a>
  }
  return t;
    5ece:	89 81       	ldd	r24, Y+1	; 0x01
    5ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed2:	9b 87       	std	Y+11, r25	; 0x0b
    5ed4:	8a 87       	std	Y+10, r24	; 0x0a
    5ed6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ed8:	9b 85       	ldd	r25, Y+11	; 0x0b
}
    5eda:	2b 96       	adiw	r28, 0x0b	; 11
    5edc:	0f b6       	in	r0, 0x3f	; 63
    5ede:	f8 94       	cli
    5ee0:	de bf       	out	0x3e, r29	; 62
    5ee2:	0f be       	out	0x3f, r0	; 63
    5ee4:	cd bf       	out	0x3d, r28	; 61
    5ee6:	cf 91       	pop	r28
    5ee8:	df 91       	pop	r29
    5eea:	08 95       	ret

00005eec <_ZN4FileC1E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    5eec:	df 93       	push	r29
    5eee:	cf 93       	push	r28
    5ef0:	00 d0       	rcall	.+0      	; 0x5ef2 <_ZN4FileC1E6SdFilePKc+0x6>
    5ef2:	00 d0       	rcall	.+0      	; 0x5ef4 <_ZN4FileC1E6SdFilePKc+0x8>
    5ef4:	00 d0       	rcall	.+0      	; 0x5ef6 <_ZN4FileC1E6SdFilePKc+0xa>
    5ef6:	cd b7       	in	r28, 0x3d	; 61
    5ef8:	de b7       	in	r29, 0x3e	; 62
    5efa:	9a 83       	std	Y+2, r25	; 0x02
    5efc:	89 83       	std	Y+1, r24	; 0x01
    5efe:	7c 83       	std	Y+4, r23	; 0x04
    5f00:	6b 83       	std	Y+3, r22	; 0x03
    5f02:	5e 83       	std	Y+6, r21	; 0x06
    5f04:	4d 83       	std	Y+5, r20	; 0x05
    5f06:	89 81       	ldd	r24, Y+1	; 0x01
    5f08:	9a 81       	ldd	r25, Y+2	; 0x02
    5f0a:	0e 94 9d 2b 	call	0x573a	; 0x573a <_ZN6StreamC2Ev>
    5f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    5f10:	fa 81       	ldd	r31, Y+2	; 0x02
    5f12:	80 e7       	ldi	r24, 0x70	; 112
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	91 83       	std	Z+1, r25	; 0x01
    5f18:	80 83       	st	Z, r24
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    5f1a:	8d e1       	ldi	r24, 0x1D	; 29
    5f1c:	90 e0       	ldi	r25, 0x00	; 0
    5f1e:	0e 94 84 82 	call	0x10508	; 0x10508 <malloc>
    5f22:	e9 81       	ldd	r30, Y+1	; 0x01
    5f24:	fa 81       	ldd	r31, Y+2	; 0x02
    5f26:	92 8f       	std	Z+26, r25	; 0x1a
    5f28:	81 8f       	std	Z+25, r24	; 0x19
  if (_file) {
    5f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    5f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    5f2e:	81 8d       	ldd	r24, Z+25	; 0x19
    5f30:	92 8d       	ldd	r25, Z+26	; 0x1a
    5f32:	00 97       	sbiw	r24, 0x00	; 0
    5f34:	c1 f0       	breq	.+48     	; 0x5f66 <_ZN4FileC1E6SdFilePKc+0x7a>
    memcpy(_file, &f, sizeof(SdFile));
    5f36:	e9 81       	ldd	r30, Y+1	; 0x01
    5f38:	fa 81       	ldd	r31, Y+2	; 0x02
    5f3a:	81 8d       	ldd	r24, Z+25	; 0x19
    5f3c:	92 8d       	ldd	r25, Z+26	; 0x1a
    5f3e:	2b 81       	ldd	r18, Y+3	; 0x03
    5f40:	3c 81       	ldd	r19, Y+4	; 0x04
    5f42:	b9 01       	movw	r22, r18
    5f44:	4d e1       	ldi	r20, 0x1D	; 29
    5f46:	50 e0       	ldi	r21, 0x00	; 0
    5f48:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
    
    strncpy(_name, n, 12);
    5f4c:	89 81       	ldd	r24, Y+1	; 0x01
    5f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f50:	0c 96       	adiw	r24, 0x0c	; 12
    5f52:	2d 81       	ldd	r18, Y+5	; 0x05
    5f54:	3e 81       	ldd	r19, Y+6	; 0x06
    5f56:	b9 01       	movw	r22, r18
    5f58:	4c e0       	ldi	r20, 0x0C	; 12
    5f5a:	50 e0       	ldi	r21, 0x00	; 0
    5f5c:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <strncpy>
    _name[12] = 0;
    5f60:	e9 81       	ldd	r30, Y+1	; 0x01
    5f62:	fa 81       	ldd	r31, Y+2	; 0x02
    5f64:	10 8e       	std	Z+24, r1	; 0x18
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    5f66:	26 96       	adiw	r28, 0x06	; 6
    5f68:	0f b6       	in	r0, 0x3f	; 63
    5f6a:	f8 94       	cli
    5f6c:	de bf       	out	0x3e, r29	; 62
    5f6e:	0f be       	out	0x3f, r0	; 63
    5f70:	cd bf       	out	0x3d, r28	; 61
    5f72:	cf 91       	pop	r28
    5f74:	df 91       	pop	r29
    5f76:	08 95       	ret

00005f78 <_ZN4FileC2E6SdFilePKc>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    5f78:	df 93       	push	r29
    5f7a:	cf 93       	push	r28
    5f7c:	00 d0       	rcall	.+0      	; 0x5f7e <_ZN4FileC2E6SdFilePKc+0x6>
    5f7e:	00 d0       	rcall	.+0      	; 0x5f80 <_ZN4FileC2E6SdFilePKc+0x8>
    5f80:	00 d0       	rcall	.+0      	; 0x5f82 <_ZN4FileC2E6SdFilePKc+0xa>
    5f82:	cd b7       	in	r28, 0x3d	; 61
    5f84:	de b7       	in	r29, 0x3e	; 62
    5f86:	9a 83       	std	Y+2, r25	; 0x02
    5f88:	89 83       	std	Y+1, r24	; 0x01
    5f8a:	7c 83       	std	Y+4, r23	; 0x04
    5f8c:	6b 83       	std	Y+3, r22	; 0x03
    5f8e:	5e 83       	std	Y+6, r21	; 0x06
    5f90:	4d 83       	std	Y+5, r20	; 0x05
    5f92:	89 81       	ldd	r24, Y+1	; 0x01
    5f94:	9a 81       	ldd	r25, Y+2	; 0x02
    5f96:	0e 94 9d 2b 	call	0x573a	; 0x573a <_ZN6StreamC2Ev>
    5f9a:	e9 81       	ldd	r30, Y+1	; 0x01
    5f9c:	fa 81       	ldd	r31, Y+2	; 0x02
    5f9e:	80 e7       	ldi	r24, 0x70	; 112
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	91 83       	std	Z+1, r25	; 0x01
    5fa4:	80 83       	st	Z, r24
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    5fa6:	8d e1       	ldi	r24, 0x1D	; 29
    5fa8:	90 e0       	ldi	r25, 0x00	; 0
    5faa:	0e 94 84 82 	call	0x10508	; 0x10508 <malloc>
    5fae:	e9 81       	ldd	r30, Y+1	; 0x01
    5fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    5fb2:	92 8f       	std	Z+26, r25	; 0x1a
    5fb4:	81 8f       	std	Z+25, r24	; 0x19
  if (_file) {
    5fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    5fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    5fba:	81 8d       	ldd	r24, Z+25	; 0x19
    5fbc:	92 8d       	ldd	r25, Z+26	; 0x1a
    5fbe:	00 97       	sbiw	r24, 0x00	; 0
    5fc0:	c1 f0       	breq	.+48     	; 0x5ff2 <_ZN4FileC2E6SdFilePKc+0x7a>
    memcpy(_file, &f, sizeof(SdFile));
    5fc2:	e9 81       	ldd	r30, Y+1	; 0x01
    5fc4:	fa 81       	ldd	r31, Y+2	; 0x02
    5fc6:	81 8d       	ldd	r24, Z+25	; 0x19
    5fc8:	92 8d       	ldd	r25, Z+26	; 0x1a
    5fca:	2b 81       	ldd	r18, Y+3	; 0x03
    5fcc:	3c 81       	ldd	r19, Y+4	; 0x04
    5fce:	b9 01       	movw	r22, r18
    5fd0:	4d e1       	ldi	r20, 0x1D	; 29
    5fd2:	50 e0       	ldi	r21, 0x00	; 0
    5fd4:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
    
    strncpy(_name, n, 12);
    5fd8:	89 81       	ldd	r24, Y+1	; 0x01
    5fda:	9a 81       	ldd	r25, Y+2	; 0x02
    5fdc:	0c 96       	adiw	r24, 0x0c	; 12
    5fde:	2d 81       	ldd	r18, Y+5	; 0x05
    5fe0:	3e 81       	ldd	r19, Y+6	; 0x06
    5fe2:	b9 01       	movw	r22, r18
    5fe4:	4c e0       	ldi	r20, 0x0C	; 12
    5fe6:	50 e0       	ldi	r21, 0x00	; 0
    5fe8:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <strncpy>
    _name[12] = 0;
    5fec:	e9 81       	ldd	r30, Y+1	; 0x01
    5fee:	fa 81       	ldd	r31, Y+2	; 0x02
    5ff0:	10 8e       	std	Z+24, r1	; 0x18
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    5ff2:	26 96       	adiw	r28, 0x06	; 6
    5ff4:	0f b6       	in	r0, 0x3f	; 63
    5ff6:	f8 94       	cli
    5ff8:	de bf       	out	0x3e, r29	; 62
    5ffa:	0f be       	out	0x3f, r0	; 63
    5ffc:	cd bf       	out	0x3d, r28	; 61
    5ffe:	cf 91       	pop	r28
    6000:	df 91       	pop	r29
    6002:	08 95       	ret

00006004 <_ZL13SerialPrint_PPKc>:
/**
 * %Print a string in flash memory to the serial port.
 *
 * \param[in] str Pointer to string stored in flash memory.
 */
static NOINLINE void SerialPrint_P(PGM_P str) {
    6004:	df 93       	push	r29
    6006:	cf 93       	push	r28
    6008:	cd b7       	in	r28, 0x3d	; 61
    600a:	de b7       	in	r29, 0x3e	; 62
    600c:	27 97       	sbiw	r28, 0x07	; 7
    600e:	0f b6       	in	r0, 0x3f	; 63
    6010:	f8 94       	cli
    6012:	de bf       	out	0x3e, r29	; 62
    6014:	0f be       	out	0x3f, r0	; 63
    6016:	cd bf       	out	0x3d, r28	; 61
    6018:	9e 83       	std	Y+6, r25	; 0x06
    601a:	8d 83       	std	Y+5, r24	; 0x05
    601c:	0a c0       	rjmp	.+20     	; 0x6032 <_ZL13SerialPrint_PPKc+0x2e>
  for (uint8_t c; (c = pgm_read_byte(str)); str++) Serial.write(c);
    601e:	8c e1       	ldi	r24, 0x1C	; 28
    6020:	96 e0       	ldi	r25, 0x06	; 6
    6022:	6c 81       	ldd	r22, Y+4	; 0x04
    6024:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <_ZN14HardwareSerial5writeEh>
    6028:	8d 81       	ldd	r24, Y+5	; 0x05
    602a:	9e 81       	ldd	r25, Y+6	; 0x06
    602c:	01 96       	adiw	r24, 0x01	; 1
    602e:	9e 83       	std	Y+6, r25	; 0x06
    6030:	8d 83       	std	Y+5, r24	; 0x05
    6032:	8d 81       	ldd	r24, Y+5	; 0x05
    6034:	9e 81       	ldd	r25, Y+6	; 0x06
    6036:	9b 83       	std	Y+3, r25	; 0x03
    6038:	8a 83       	std	Y+2, r24	; 0x02
    603a:	ea 81       	ldd	r30, Y+2	; 0x02
    603c:	fb 81       	ldd	r31, Y+3	; 0x03
    603e:	84 91       	lpm	r24, Z+
    6040:	89 83       	std	Y+1, r24	; 0x01
    6042:	89 81       	ldd	r24, Y+1	; 0x01
    6044:	8c 83       	std	Y+4, r24	; 0x04
    6046:	8c 81       	ldd	r24, Y+4	; 0x04
    6048:	8f 83       	std	Y+7, r24	; 0x07
    604a:	8f 81       	ldd	r24, Y+7	; 0x07
    604c:	88 23       	and	r24, r24
    604e:	11 f0       	breq	.+4      	; 0x6054 <_ZL13SerialPrint_PPKc+0x50>
    6050:	81 e0       	ldi	r24, 0x01	; 1
    6052:	8f 83       	std	Y+7, r24	; 0x07
    6054:	8f 81       	ldd	r24, Y+7	; 0x07
    6056:	88 23       	and	r24, r24
    6058:	11 f7       	brne	.-60     	; 0x601e <_ZL13SerialPrint_PPKc+0x1a>
}
    605a:	27 96       	adiw	r28, 0x07	; 7
    605c:	0f b6       	in	r0, 0x3f	; 63
    605e:	f8 94       	cli
    6060:	de bf       	out	0x3e, r29	; 62
    6062:	0f be       	out	0x3f, r0	; 63
    6064:	cd bf       	out	0x3d, r28	; 61
    6066:	cf 91       	pop	r28
    6068:	df 91       	pop	r29
    606a:	08 95       	ret

0000606c <_ZL15SerialPrintln_PPKc>:
/**
 * %Print a string in flash memory followed by a CR/LF.
 *
 * \param[in] str Pointer to string stored in flash memory.
 */
static NOINLINE void SerialPrintln_P(PGM_P str) {
    606c:	df 93       	push	r29
    606e:	cf 93       	push	r28
    6070:	00 d0       	rcall	.+0      	; 0x6072 <_ZL15SerialPrintln_PPKc+0x6>
    6072:	cd b7       	in	r28, 0x3d	; 61
    6074:	de b7       	in	r29, 0x3e	; 62
    6076:	9a 83       	std	Y+2, r25	; 0x02
    6078:	89 83       	std	Y+1, r24	; 0x01
  SerialPrint_P(str);
    607a:	89 81       	ldd	r24, Y+1	; 0x01
    607c:	9a 81       	ldd	r25, Y+2	; 0x02
    607e:	0e 94 02 30 	call	0x6004	; 0x6004 <_ZL13SerialPrint_PPKc>
  Serial.println();
    6082:	8c e1       	ldi	r24, 0x1C	; 28
    6084:	96 e0       	ldi	r25, 0x06	; 6
    6086:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
}
    608a:	0f 90       	pop	r0
    608c:	0f 90       	pop	r0
    608e:	cf 91       	pop	r28
    6090:	df 91       	pop	r29
    6092:	08 95       	ret
    6094:	df 93       	push	r29
    6096:	cf 93       	push	r28
    6098:	00 d0       	rcall	.+0      	; 0x609a <_ZL15SerialPrintln_PPKc+0x2e>
    609a:	cd b7       	in	r28, 0x3d	; 61
    609c:	de b7       	in	r29, 0x3e	; 62
    609e:	9a 83       	std	Y+2, r25	; 0x02
    60a0:	89 83       	std	Y+1, r24	; 0x01
    60a2:	e9 81       	ldd	r30, Y+1	; 0x01
    60a4:	fa 81       	ldd	r31, Y+2	; 0x02
    60a6:	80 ec       	ldi	r24, 0xC0	; 192
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	91 83       	std	Z+1, r25	; 0x01
    60ac:	80 83       	st	Z, r24
    60ae:	e9 81       	ldd	r30, Y+1	; 0x01
    60b0:	fa 81       	ldd	r31, Y+2	; 0x02
    60b2:	13 82       	std	Z+3, r1	; 0x03
    60b4:	12 82       	std	Z+2, r1	; 0x02
    60b6:	0f 90       	pop	r0
    60b8:	0f 90       	pop	r0
    60ba:	cf 91       	pop	r28
    60bc:	df 91       	pop	r29
    60be:	08 95       	ret

000060c0 <_ZN7Sd2CardC1Ev>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    60c0:	df 93       	push	r29
    60c2:	cf 93       	push	r28
    60c4:	00 d0       	rcall	.+0      	; 0x60c6 <_ZN7Sd2CardC1Ev+0x6>
    60c6:	cd b7       	in	r28, 0x3d	; 61
    60c8:	de b7       	in	r29, 0x3e	; 62
    60ca:	9a 83       	std	Y+2, r25	; 0x02
    60cc:	89 83       	std	Y+1, r24	; 0x01
    60ce:	e9 81       	ldd	r30, Y+1	; 0x01
    60d0:	fa 81       	ldd	r31, Y+2	; 0x02
    60d2:	15 82       	std	Z+5, r1	; 0x05
    60d4:	e9 81       	ldd	r30, Y+1	; 0x01
    60d6:	fa 81       	ldd	r31, Y+2	; 0x02
    60d8:	16 82       	std	Z+6, r1	; 0x06
    60da:	e9 81       	ldd	r30, Y+1	; 0x01
    60dc:	fa 81       	ldd	r31, Y+2	; 0x02
    60de:	11 86       	std	Z+9, r1	; 0x09
    60e0:	e9 81       	ldd	r30, Y+1	; 0x01
    60e2:	fa 81       	ldd	r31, Y+2	; 0x02
    60e4:	13 86       	std	Z+11, r1	; 0x0b
    60e6:	0f 90       	pop	r0
    60e8:	0f 90       	pop	r0
    60ea:	cf 91       	pop	r28
    60ec:	df 91       	pop	r29
    60ee:	08 95       	ret

000060f0 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry>:
/** Directory entry is for a subdirectory */
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
}
/** Directory entry is for a file or subdirectory */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
    60f0:	df 93       	push	r29
    60f2:	cf 93       	push	r28
    60f4:	00 d0       	rcall	.+0      	; 0x60f6 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0x6>
    60f6:	0f 92       	push	r0
    60f8:	cd b7       	in	r28, 0x3d	; 61
    60fa:	de b7       	in	r29, 0x3e	; 62
    60fc:	9a 83       	std	Y+2, r25	; 0x02
    60fe:	89 83       	std	Y+1, r24	; 0x01
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
    6100:	e9 81       	ldd	r30, Y+1	; 0x01
    6102:	fa 81       	ldd	r31, Y+2	; 0x02
    6104:	83 85       	ldd	r24, Z+11	; 0x0b
    6106:	88 2f       	mov	r24, r24
    6108:	90 e0       	ldi	r25, 0x00	; 0
    610a:	88 70       	andi	r24, 0x08	; 8
    610c:	90 70       	andi	r25, 0x00	; 0
    610e:	1b 82       	std	Y+3, r1	; 0x03
    6110:	00 97       	sbiw	r24, 0x00	; 0
    6112:	11 f4       	brne	.+4      	; 0x6118 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0x28>
    6114:	81 e0       	ldi	r24, 0x01	; 1
    6116:	8b 83       	std	Y+3, r24	; 0x03
    6118:	8b 81       	ldd	r24, Y+3	; 0x03
}
    611a:	0f 90       	pop	r0
    611c:	0f 90       	pop	r0
    611e:	0f 90       	pop	r0
    6120:	cf 91       	pop	r28
    6122:	df 91       	pop	r29
    6124:	08 95       	ret
    6126:	df 93       	push	r29
    6128:	cf 93       	push	r28
    612a:	00 d0       	rcall	.+0      	; 0x612c <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0x3c>
    612c:	cd b7       	in	r28, 0x3d	; 61
    612e:	de b7       	in	r29, 0x3e	; 62
    6130:	9a 83       	std	Y+2, r25	; 0x02
    6132:	89 83       	std	Y+1, r24	; 0x01
    6134:	89 81       	ldd	r24, Y+1	; 0x01
    6136:	9a 81       	ldd	r25, Y+2	; 0x02
    6138:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN5PrintC2Ev>
    613c:	e9 81       	ldd	r30, Y+1	; 0x01
    613e:	fa 81       	ldd	r31, Y+2	; 0x02
    6140:	84 e6       	ldi	r24, 0x64	; 100
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	91 83       	std	Z+1, r25	; 0x01
    6146:	80 83       	st	Z, r24
    6148:	e9 81       	ldd	r30, Y+1	; 0x01
    614a:	fa 81       	ldd	r31, Y+2	; 0x02
    614c:	15 82       	std	Z+5, r1	; 0x05
    614e:	0f 90       	pop	r0
    6150:	0f 90       	pop	r0
    6152:	cf 91       	pop	r28
    6154:	df 91       	pop	r29
    6156:	08 95       	ret
    6158:	df 93       	push	r29
    615a:	cf 93       	push	r28
    615c:	00 d0       	rcall	.+0      	; 0x615e <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0x6e>
    615e:	cd b7       	in	r28, 0x3d	; 61
    6160:	de b7       	in	r29, 0x3e	; 62
    6162:	9a 83       	std	Y+2, r25	; 0x02
    6164:	89 83       	std	Y+1, r24	; 0x01
    6166:	e9 81       	ldd	r30, Y+1	; 0x01
    6168:	fa 81       	ldd	r31, Y+2	; 0x02
    616a:	83 89       	ldd	r24, Z+19	; 0x13
    616c:	94 89       	ldd	r25, Z+20	; 0x14
    616e:	a5 89       	ldd	r26, Z+21	; 0x15
    6170:	b6 89       	ldd	r27, Z+22	; 0x16
    6172:	bc 01       	movw	r22, r24
    6174:	cd 01       	movw	r24, r26
    6176:	0f 90       	pop	r0
    6178:	0f 90       	pop	r0
    617a:	cf 91       	pop	r28
    617c:	df 91       	pop	r29
    617e:	08 95       	ret
    6180:	df 93       	push	r29
    6182:	cf 93       	push	r28
    6184:	00 d0       	rcall	.+0      	; 0x6186 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0x96>
    6186:	0f 92       	push	r0
    6188:	cd b7       	in	r28, 0x3d	; 61
    618a:	de b7       	in	r29, 0x3e	; 62
    618c:	9a 83       	std	Y+2, r25	; 0x02
    618e:	89 83       	std	Y+1, r24	; 0x01
    6190:	e9 81       	ldd	r30, Y+1	; 0x01
    6192:	fa 81       	ldd	r31, Y+2	; 0x02
    6194:	85 81       	ldd	r24, Z+5	; 0x05
    6196:	8b 83       	std	Y+3, r24	; 0x03
    6198:	8b 81       	ldd	r24, Y+3	; 0x03
    619a:	88 23       	and	r24, r24
    619c:	11 f0       	breq	.+4      	; 0x61a2 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0xb2>
    619e:	81 e0       	ldi	r24, 0x01	; 1
    61a0:	8b 83       	std	Y+3, r24	; 0x03
    61a2:	8b 81       	ldd	r24, Y+3	; 0x03
    61a4:	0f 90       	pop	r0
    61a6:	0f 90       	pop	r0
    61a8:	0f 90       	pop	r0
    61aa:	cf 91       	pop	r28
    61ac:	df 91       	pop	r29
    61ae:	08 95       	ret
    61b0:	df 93       	push	r29
    61b2:	cf 93       	push	r28
    61b4:	00 d0       	rcall	.+0      	; 0x61b6 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0xc6>
    61b6:	0f 92       	push	r0
    61b8:	cd b7       	in	r28, 0x3d	; 61
    61ba:	de b7       	in	r29, 0x3e	; 62
    61bc:	9a 83       	std	Y+2, r25	; 0x02
    61be:	89 83       	std	Y+1, r24	; 0x01
    61c0:	e9 81       	ldd	r30, Y+1	; 0x01
    61c2:	fa 81       	ldd	r31, Y+2	; 0x02
    61c4:	85 81       	ldd	r24, Z+5	; 0x05
    61c6:	82 30       	cpi	r24, 0x02	; 2
    61c8:	29 f0       	breq	.+10     	; 0x61d4 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0xe4>
    61ca:	e9 81       	ldd	r30, Y+1	; 0x01
    61cc:	fa 81       	ldd	r31, Y+2	; 0x02
    61ce:	85 81       	ldd	r24, Z+5	; 0x05
    61d0:	83 30       	cpi	r24, 0x03	; 3
    61d2:	19 f4       	brne	.+6      	; 0x61da <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0xea>
    61d4:	81 e0       	ldi	r24, 0x01	; 1
    61d6:	8b 83       	std	Y+3, r24	; 0x03
    61d8:	01 c0       	rjmp	.+2      	; 0x61dc <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0xec>
    61da:	1b 82       	std	Y+3, r1	; 0x03
    61dc:	8b 81       	ldd	r24, Y+3	; 0x03
    61de:	0f 90       	pop	r0
    61e0:	0f 90       	pop	r0
    61e2:	0f 90       	pop	r0
    61e4:	cf 91       	pop	r28
    61e6:	df 91       	pop	r29
    61e8:	08 95       	ret
    61ea:	df 93       	push	r29
    61ec:	cf 93       	push	r28
    61ee:	00 d0       	rcall	.+0      	; 0x61f0 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry+0x100>
    61f0:	cd b7       	in	r28, 0x3d	; 61
    61f2:	de b7       	in	r29, 0x3e	; 62
    61f4:	9a 83       	std	Y+2, r25	; 0x02
    61f6:	89 83       	std	Y+1, r24	; 0x01
    61f8:	e9 81       	ldd	r30, Y+1	; 0x01
    61fa:	fa 81       	ldd	r31, Y+2	; 0x02
    61fc:	16 82       	std	Z+6, r1	; 0x06
    61fe:	17 82       	std	Z+7, r1	; 0x07
    6200:	10 86       	std	Z+8, r1	; 0x08
    6202:	11 86       	std	Z+9, r1	; 0x09
    6204:	e9 81       	ldd	r30, Y+1	; 0x01
    6206:	fa 81       	ldd	r31, Y+2	; 0x02
    6208:	86 81       	ldd	r24, Z+6	; 0x06
    620a:	97 81       	ldd	r25, Z+7	; 0x07
    620c:	a0 85       	ldd	r26, Z+8	; 0x08
    620e:	b1 85       	ldd	r27, Z+9	; 0x09
    6210:	e9 81       	ldd	r30, Y+1	; 0x01
    6212:	fa 81       	ldd	r31, Y+2	; 0x02
    6214:	82 87       	std	Z+10, r24	; 0x0a
    6216:	93 87       	std	Z+11, r25	; 0x0b
    6218:	a4 87       	std	Z+12, r26	; 0x0c
    621a:	b5 87       	std	Z+13, r27	; 0x0d
    621c:	0f 90       	pop	r0
    621e:	0f 90       	pop	r0
    6220:	cf 91       	pop	r28
    6222:	df 91       	pop	r29
    6224:	08 95       	ret

00006226 <_ZN8SdVolumeC1Ev>:
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    6226:	df 93       	push	r29
    6228:	cf 93       	push	r28
    622a:	00 d0       	rcall	.+0      	; 0x622c <_ZN8SdVolumeC1Ev+0x6>
    622c:	cd b7       	in	r28, 0x3d	; 61
    622e:	de b7       	in	r29, 0x3e	; 62
    6230:	9a 83       	std	Y+2, r25	; 0x02
    6232:	89 83       	std	Y+1, r24	; 0x01
    6234:	e9 81       	ldd	r30, Y+1	; 0x01
    6236:	fa 81       	ldd	r31, Y+2	; 0x02
    6238:	82 e0       	ldi	r24, 0x02	; 2
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	a0 e0       	ldi	r26, 0x00	; 0
    623e:	b0 e0       	ldi	r27, 0x00	; 0
    6240:	80 83       	st	Z, r24
    6242:	91 83       	std	Z+1, r25	; 0x01
    6244:	a2 83       	std	Z+2, r26	; 0x02
    6246:	b3 83       	std	Z+3, r27	; 0x03
    6248:	e9 81       	ldd	r30, Y+1	; 0x01
    624a:	fa 81       	ldd	r31, Y+2	; 0x02
    624c:	17 8a       	std	Z+23, r1	; 0x17
    624e:	0f 90       	pop	r0
    6250:	0f 90       	pop	r0
    6252:	cf 91       	pop	r28
    6254:	df 91       	pop	r29
    6256:	08 95       	ret

00006258 <_ZL7FreeRamv>:
/** Defined so doxygen works for function definitions. */
#define NOINLINE __attribute__((noinline,unused))
#define UNUSEDOK __attribute__((unused))
//------------------------------------------------------------------------------
/** Return the number of bytes currently free in RAM. */
static UNUSEDOK int FreeRam(void) {
    6258:	df 93       	push	r29
    625a:	cf 93       	push	r28
    625c:	00 d0       	rcall	.+0      	; 0x625e <_ZL7FreeRamv+0x6>
    625e:	cd b7       	in	r28, 0x3d	; 61
    6260:	de b7       	in	r29, 0x3e	; 62
  extern int  __bss_end;
  extern int* __brkval;
  int free_memory;
  if (reinterpret_cast<int>(__brkval) == 0) {
    6262:	80 91 7b 07 	lds	r24, 0x077B
    6266:	90 91 7c 07 	lds	r25, 0x077C
    626a:	00 97       	sbiw	r24, 0x00	; 0
    626c:	49 f4       	brne	.+18     	; 0x6280 <_ZL7FreeRamv+0x28>
    // if no heap use from end of bss section
    free_memory = reinterpret_cast<int>(&free_memory)
                  - reinterpret_cast<int>(&__bss_end);
    626e:	ce 01       	movw	r24, r28
    6270:	01 96       	adiw	r24, 0x01	; 1
    6272:	2f e7       	ldi	r18, 0x7F	; 127
    6274:	37 e0       	ldi	r19, 0x07	; 7
    6276:	82 1b       	sub	r24, r18
    6278:	93 0b       	sbc	r25, r19
    627a:	9a 83       	std	Y+2, r25	; 0x02
    627c:	89 83       	std	Y+1, r24	; 0x01
    627e:	0d c0       	rjmp	.+26     	; 0x629a <_ZL7FreeRamv+0x42>
  } else {
    // use from top of stack to heap
    free_memory = reinterpret_cast<int>(&free_memory)
                  - reinterpret_cast<int>(__brkval);
    6280:	9e 01       	movw	r18, r28
    6282:	2f 5f       	subi	r18, 0xFF	; 255
    6284:	3f 4f       	sbci	r19, 0xFF	; 255
    6286:	80 91 7b 07 	lds	r24, 0x077B
    628a:	90 91 7c 07 	lds	r25, 0x077C
    628e:	a9 01       	movw	r20, r18
    6290:	48 1b       	sub	r20, r24
    6292:	59 0b       	sbc	r21, r25
    6294:	ca 01       	movw	r24, r20
    6296:	9a 83       	std	Y+2, r25	; 0x02
    6298:	89 83       	std	Y+1, r24	; 0x01
  }
  return free_memory;
    629a:	89 81       	ldd	r24, Y+1	; 0x01
    629c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    629e:	0f 90       	pop	r0
    62a0:	0f 90       	pop	r0
    62a2:	cf 91       	pop	r28
    62a4:	df 91       	pop	r29
    62a6:	08 95       	ret

000062a8 <_Z20getNextPathComponentPcPjS_>:
// Used by `getNextPathComponent`
#define MAX_COMPONENT_LEN 12 // What is max length?
#define PATH_COMPONENT_BUFFER_LEN MAX_COMPONENT_LEN+1

bool getNextPathComponent(char *path, unsigned int *p_offset,
			  char *buffer) {
    62a8:	df 93       	push	r29
    62aa:	cf 93       	push	r28
    62ac:	cd b7       	in	r28, 0x3d	; 61
    62ae:	de b7       	in	r29, 0x3e	; 62
    62b0:	2b 97       	sbiw	r28, 0x0b	; 11
    62b2:	0f b6       	in	r0, 0x3f	; 63
    62b4:	f8 94       	cli
    62b6:	de bf       	out	0x3e, r29	; 62
    62b8:	0f be       	out	0x3f, r0	; 63
    62ba:	cd bf       	out	0x3d, r28	; 61
    62bc:	9e 83       	std	Y+6, r25	; 0x06
    62be:	8d 83       	std	Y+5, r24	; 0x05
    62c0:	78 87       	std	Y+8, r23	; 0x08
    62c2:	6f 83       	std	Y+7, r22	; 0x07
    62c4:	5a 87       	std	Y+10, r21	; 0x0a
    62c6:	49 87       	std	Y+9, r20	; 0x09
   */

  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;
    62c8:	1c 82       	std	Y+4, r1	; 0x04
    62ca:	1b 82       	std	Y+3, r1	; 0x03

  int offset = *p_offset;
    62cc:	ef 81       	ldd	r30, Y+7	; 0x07
    62ce:	f8 85       	ldd	r31, Y+8	; 0x08
    62d0:	80 81       	ld	r24, Z
    62d2:	91 81       	ldd	r25, Z+1	; 0x01
    62d4:	9a 83       	std	Y+2, r25	; 0x02
    62d6:	89 83       	std	Y+1, r24	; 0x01

  // Skip root or other separator
  if (path[offset] == '/') {
    62d8:	29 81       	ldd	r18, Y+1	; 0x01
    62da:	3a 81       	ldd	r19, Y+2	; 0x02
    62dc:	8d 81       	ldd	r24, Y+5	; 0x05
    62de:	9e 81       	ldd	r25, Y+6	; 0x06
    62e0:	fc 01       	movw	r30, r24
    62e2:	e2 0f       	add	r30, r18
    62e4:	f3 1f       	adc	r31, r19
    62e6:	80 81       	ld	r24, Z
    62e8:	8f 32       	cpi	r24, 0x2F	; 47
    62ea:	01 f5       	brne	.+64     	; 0x632c <_Z20getNextPathComponentPcPjS_+0x84>
    offset++;
    62ec:	89 81       	ldd	r24, Y+1	; 0x01
    62ee:	9a 81       	ldd	r25, Y+2	; 0x02
    62f0:	01 96       	adiw	r24, 0x01	; 1
    62f2:	9a 83       	std	Y+2, r25	; 0x02
    62f4:	89 83       	std	Y+1, r24	; 0x01
    62f6:	1a c0       	rjmp	.+52     	; 0x632c <_Z20getNextPathComponentPcPjS_+0x84>
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
    62f8:	2b 81       	ldd	r18, Y+3	; 0x03
    62fa:	3c 81       	ldd	r19, Y+4	; 0x04
    62fc:	89 85       	ldd	r24, Y+9	; 0x09
    62fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6300:	dc 01       	movw	r26, r24
    6302:	a2 0f       	add	r26, r18
    6304:	b3 1f       	adc	r27, r19
    6306:	29 81       	ldd	r18, Y+1	; 0x01
    6308:	3a 81       	ldd	r19, Y+2	; 0x02
    630a:	8d 81       	ldd	r24, Y+5	; 0x05
    630c:	9e 81       	ldd	r25, Y+6	; 0x06
    630e:	fc 01       	movw	r30, r24
    6310:	e2 0f       	add	r30, r18
    6312:	f3 1f       	adc	r31, r19
    6314:	80 81       	ld	r24, Z
    6316:	8c 93       	st	X, r24
    6318:	8b 81       	ldd	r24, Y+3	; 0x03
    631a:	9c 81       	ldd	r25, Y+4	; 0x04
    631c:	01 96       	adiw	r24, 0x01	; 1
    631e:	9c 83       	std	Y+4, r25	; 0x04
    6320:	8b 83       	std	Y+3, r24	; 0x03
    6322:	89 81       	ldd	r24, Y+1	; 0x01
    6324:	9a 81       	ldd	r25, Y+2	; 0x02
    6326:	01 96       	adiw	r24, 0x01	; 1
    6328:	9a 83       	std	Y+2, r25	; 0x02
    632a:	89 83       	std	Y+1, r24	; 0x01
  if (path[offset] == '/') {
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
    632c:	8b 81       	ldd	r24, Y+3	; 0x03
    632e:	9c 81       	ldd	r25, Y+4	; 0x04
    6330:	8c 30       	cpi	r24, 0x0C	; 12
    6332:	91 05       	cpc	r25, r1
    6334:	a4 f4       	brge	.+40     	; 0x635e <_Z20getNextPathComponentPcPjS_+0xb6>
    6336:	29 81       	ldd	r18, Y+1	; 0x01
    6338:	3a 81       	ldd	r19, Y+2	; 0x02
    633a:	8d 81       	ldd	r24, Y+5	; 0x05
    633c:	9e 81       	ldd	r25, Y+6	; 0x06
    633e:	fc 01       	movw	r30, r24
    6340:	e2 0f       	add	r30, r18
    6342:	f3 1f       	adc	r31, r19
    6344:	80 81       	ld	r24, Z
    6346:	8f 32       	cpi	r24, 0x2F	; 47
    6348:	51 f0       	breq	.+20     	; 0x635e <_Z20getNextPathComponentPcPjS_+0xb6>
    634a:	29 81       	ldd	r18, Y+1	; 0x01
    634c:	3a 81       	ldd	r19, Y+2	; 0x02
    634e:	8d 81       	ldd	r24, Y+5	; 0x05
    6350:	9e 81       	ldd	r25, Y+6	; 0x06
    6352:	fc 01       	movw	r30, r24
    6354:	e2 0f       	add	r30, r18
    6356:	f3 1f       	adc	r31, r19
    6358:	80 81       	ld	r24, Z
    635a:	88 23       	and	r24, r24
    635c:	69 f6       	brne	.-102    	; 0x62f8 <_Z20getNextPathComponentPcPjS_+0x50>
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    635e:	2b 81       	ldd	r18, Y+3	; 0x03
    6360:	3c 81       	ldd	r19, Y+4	; 0x04
    6362:	89 85       	ldd	r24, Y+9	; 0x09
    6364:	9a 85       	ldd	r25, Y+10	; 0x0a
    6366:	fc 01       	movw	r30, r24
    6368:	e2 0f       	add	r30, r18
    636a:	f3 1f       	adc	r31, r19
    636c:	10 82       	st	Z, r1

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    636e:	29 81       	ldd	r18, Y+1	; 0x01
    6370:	3a 81       	ldd	r19, Y+2	; 0x02
    6372:	8d 81       	ldd	r24, Y+5	; 0x05
    6374:	9e 81       	ldd	r25, Y+6	; 0x06
    6376:	fc 01       	movw	r30, r24
    6378:	e2 0f       	add	r30, r18
    637a:	f3 1f       	adc	r31, r19
    637c:	80 81       	ld	r24, Z
    637e:	8f 32       	cpi	r24, 0x2F	; 47
    6380:	29 f4       	brne	.+10     	; 0x638c <_Z20getNextPathComponentPcPjS_+0xe4>
    offset++;
    6382:	89 81       	ldd	r24, Y+1	; 0x01
    6384:	9a 81       	ldd	r25, Y+2	; 0x02
    6386:	01 96       	adiw	r24, 0x01	; 1
    6388:	9a 83       	std	Y+2, r25	; 0x02
    638a:	89 83       	std	Y+1, r24	; 0x01
  }

  *p_offset = offset;
    638c:	89 81       	ldd	r24, Y+1	; 0x01
    638e:	9a 81       	ldd	r25, Y+2	; 0x02
    6390:	ef 81       	ldd	r30, Y+7	; 0x07
    6392:	f8 85       	ldd	r31, Y+8	; 0x08
    6394:	91 83       	std	Z+1, r25	; 0x01
    6396:	80 83       	st	Z, r24

  return (path[offset] != '\0');
    6398:	29 81       	ldd	r18, Y+1	; 0x01
    639a:	3a 81       	ldd	r19, Y+2	; 0x02
    639c:	8d 81       	ldd	r24, Y+5	; 0x05
    639e:	9e 81       	ldd	r25, Y+6	; 0x06
    63a0:	fc 01       	movw	r30, r24
    63a2:	e2 0f       	add	r30, r18
    63a4:	f3 1f       	adc	r31, r19
    63a6:	80 81       	ld	r24, Z
    63a8:	8b 87       	std	Y+11, r24	; 0x0b
    63aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    63ac:	88 23       	and	r24, r24
    63ae:	11 f0       	breq	.+4      	; 0x63b4 <_Z20getNextPathComponentPcPjS_+0x10c>
    63b0:	81 e0       	ldi	r24, 0x01	; 1
    63b2:	8b 87       	std	Y+11, r24	; 0x0b
    63b4:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    63b6:	2b 96       	adiw	r28, 0x0b	; 11
    63b8:	0f b6       	in	r0, 0x3f	; 63
    63ba:	f8 94       	cli
    63bc:	de bf       	out	0x3e, r29	; 62
    63be:	0f be       	out	0x3f, r0	; 63
    63c0:	cd bf       	out	0x3d, r28	; 61
    63c2:	cf 91       	pop	r28
    63c4:	df 91       	pop	r29
    63c6:	08 95       	ret

000063c8 <_ZN5PrintC2ERKS_>:
#define HEX 16
#define OCT 8
#define BIN 2

class Print
{
    63c8:	df 93       	push	r29
    63ca:	cf 93       	push	r28
    63cc:	00 d0       	rcall	.+0      	; 0x63ce <_ZN5PrintC2ERKS_+0x6>
    63ce:	00 d0       	rcall	.+0      	; 0x63d0 <_ZN5PrintC2ERKS_+0x8>
    63d0:	cd b7       	in	r28, 0x3d	; 61
    63d2:	de b7       	in	r29, 0x3e	; 62
    63d4:	9a 83       	std	Y+2, r25	; 0x02
    63d6:	89 83       	std	Y+1, r24	; 0x01
    63d8:	7c 83       	std	Y+4, r23	; 0x04
    63da:	6b 83       	std	Y+3, r22	; 0x03
    63dc:	e9 81       	ldd	r30, Y+1	; 0x01
    63de:	fa 81       	ldd	r31, Y+2	; 0x02
    63e0:	80 ec       	ldi	r24, 0xC0	; 192
    63e2:	90 e0       	ldi	r25, 0x00	; 0
    63e4:	91 83       	std	Z+1, r25	; 0x01
    63e6:	80 83       	st	Z, r24
    63e8:	eb 81       	ldd	r30, Y+3	; 0x03
    63ea:	fc 81       	ldd	r31, Y+4	; 0x04
    63ec:	82 81       	ldd	r24, Z+2	; 0x02
    63ee:	93 81       	ldd	r25, Z+3	; 0x03
    63f0:	e9 81       	ldd	r30, Y+1	; 0x01
    63f2:	fa 81       	ldd	r31, Y+2	; 0x02
    63f4:	93 83       	std	Z+3, r25	; 0x03
    63f6:	82 83       	std	Z+2, r24	; 0x02
    63f8:	0f 90       	pop	r0
    63fa:	0f 90       	pop	r0
    63fc:	0f 90       	pop	r0
    63fe:	0f 90       	pop	r0
    6400:	cf 91       	pop	r28
    6402:	df 91       	pop	r29
    6404:	08 95       	ret

00006406 <_ZN6SdFileC1ERKS_>:
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    6406:	df 93       	push	r29
    6408:	cf 93       	push	r28
    640a:	00 d0       	rcall	.+0      	; 0x640c <_ZN6SdFileC1ERKS_+0x6>
    640c:	00 d0       	rcall	.+0      	; 0x640e <_ZN6SdFileC1ERKS_+0x8>
    640e:	cd b7       	in	r28, 0x3d	; 61
    6410:	de b7       	in	r29, 0x3e	; 62
    6412:	9a 83       	std	Y+2, r25	; 0x02
    6414:	89 83       	std	Y+1, r24	; 0x01
    6416:	7c 83       	std	Y+4, r23	; 0x04
    6418:	6b 83       	std	Y+3, r22	; 0x03
    641a:	89 81       	ldd	r24, Y+1	; 0x01
    641c:	9a 81       	ldd	r25, Y+2	; 0x02
    641e:	2b 81       	ldd	r18, Y+3	; 0x03
    6420:	3c 81       	ldd	r19, Y+4	; 0x04
    6422:	b9 01       	movw	r22, r18
    6424:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <_ZN5PrintC2ERKS_>
    6428:	e9 81       	ldd	r30, Y+1	; 0x01
    642a:	fa 81       	ldd	r31, Y+2	; 0x02
    642c:	84 e6       	ldi	r24, 0x64	; 100
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	91 83       	std	Z+1, r25	; 0x01
    6432:	80 83       	st	Z, r24
    6434:	eb 81       	ldd	r30, Y+3	; 0x03
    6436:	fc 81       	ldd	r31, Y+4	; 0x04
    6438:	84 81       	ldd	r24, Z+4	; 0x04
    643a:	e9 81       	ldd	r30, Y+1	; 0x01
    643c:	fa 81       	ldd	r31, Y+2	; 0x02
    643e:	84 83       	std	Z+4, r24	; 0x04
    6440:	eb 81       	ldd	r30, Y+3	; 0x03
    6442:	fc 81       	ldd	r31, Y+4	; 0x04
    6444:	85 81       	ldd	r24, Z+5	; 0x05
    6446:	e9 81       	ldd	r30, Y+1	; 0x01
    6448:	fa 81       	ldd	r31, Y+2	; 0x02
    644a:	85 83       	std	Z+5, r24	; 0x05
    644c:	eb 81       	ldd	r30, Y+3	; 0x03
    644e:	fc 81       	ldd	r31, Y+4	; 0x04
    6450:	86 81       	ldd	r24, Z+6	; 0x06
    6452:	97 81       	ldd	r25, Z+7	; 0x07
    6454:	a0 85       	ldd	r26, Z+8	; 0x08
    6456:	b1 85       	ldd	r27, Z+9	; 0x09
    6458:	e9 81       	ldd	r30, Y+1	; 0x01
    645a:	fa 81       	ldd	r31, Y+2	; 0x02
    645c:	86 83       	std	Z+6, r24	; 0x06
    645e:	97 83       	std	Z+7, r25	; 0x07
    6460:	a0 87       	std	Z+8, r26	; 0x08
    6462:	b1 87       	std	Z+9, r27	; 0x09
    6464:	eb 81       	ldd	r30, Y+3	; 0x03
    6466:	fc 81       	ldd	r31, Y+4	; 0x04
    6468:	82 85       	ldd	r24, Z+10	; 0x0a
    646a:	93 85       	ldd	r25, Z+11	; 0x0b
    646c:	a4 85       	ldd	r26, Z+12	; 0x0c
    646e:	b5 85       	ldd	r27, Z+13	; 0x0d
    6470:	e9 81       	ldd	r30, Y+1	; 0x01
    6472:	fa 81       	ldd	r31, Y+2	; 0x02
    6474:	82 87       	std	Z+10, r24	; 0x0a
    6476:	93 87       	std	Z+11, r25	; 0x0b
    6478:	a4 87       	std	Z+12, r26	; 0x0c
    647a:	b5 87       	std	Z+13, r27	; 0x0d
    647c:	eb 81       	ldd	r30, Y+3	; 0x03
    647e:	fc 81       	ldd	r31, Y+4	; 0x04
    6480:	86 85       	ldd	r24, Z+14	; 0x0e
    6482:	97 85       	ldd	r25, Z+15	; 0x0f
    6484:	a0 89       	ldd	r26, Z+16	; 0x10
    6486:	b1 89       	ldd	r27, Z+17	; 0x11
    6488:	e9 81       	ldd	r30, Y+1	; 0x01
    648a:	fa 81       	ldd	r31, Y+2	; 0x02
    648c:	86 87       	std	Z+14, r24	; 0x0e
    648e:	97 87       	std	Z+15, r25	; 0x0f
    6490:	a0 8b       	std	Z+16, r26	; 0x10
    6492:	b1 8b       	std	Z+17, r27	; 0x11
    6494:	eb 81       	ldd	r30, Y+3	; 0x03
    6496:	fc 81       	ldd	r31, Y+4	; 0x04
    6498:	82 89       	ldd	r24, Z+18	; 0x12
    649a:	e9 81       	ldd	r30, Y+1	; 0x01
    649c:	fa 81       	ldd	r31, Y+2	; 0x02
    649e:	82 8b       	std	Z+18, r24	; 0x12
    64a0:	eb 81       	ldd	r30, Y+3	; 0x03
    64a2:	fc 81       	ldd	r31, Y+4	; 0x04
    64a4:	83 89       	ldd	r24, Z+19	; 0x13
    64a6:	94 89       	ldd	r25, Z+20	; 0x14
    64a8:	a5 89       	ldd	r26, Z+21	; 0x15
    64aa:	b6 89       	ldd	r27, Z+22	; 0x16
    64ac:	e9 81       	ldd	r30, Y+1	; 0x01
    64ae:	fa 81       	ldd	r31, Y+2	; 0x02
    64b0:	83 8b       	std	Z+19, r24	; 0x13
    64b2:	94 8b       	std	Z+20, r25	; 0x14
    64b4:	a5 8b       	std	Z+21, r26	; 0x15
    64b6:	b6 8b       	std	Z+22, r27	; 0x16
    64b8:	eb 81       	ldd	r30, Y+3	; 0x03
    64ba:	fc 81       	ldd	r31, Y+4	; 0x04
    64bc:	87 89       	ldd	r24, Z+23	; 0x17
    64be:	90 8d       	ldd	r25, Z+24	; 0x18
    64c0:	a1 8d       	ldd	r26, Z+25	; 0x19
    64c2:	b2 8d       	ldd	r27, Z+26	; 0x1a
    64c4:	e9 81       	ldd	r30, Y+1	; 0x01
    64c6:	fa 81       	ldd	r31, Y+2	; 0x02
    64c8:	87 8b       	std	Z+23, r24	; 0x17
    64ca:	90 8f       	std	Z+24, r25	; 0x18
    64cc:	a1 8f       	std	Z+25, r26	; 0x19
    64ce:	b2 8f       	std	Z+26, r27	; 0x1a
    64d0:	eb 81       	ldd	r30, Y+3	; 0x03
    64d2:	fc 81       	ldd	r31, Y+4	; 0x04
    64d4:	83 8d       	ldd	r24, Z+27	; 0x1b
    64d6:	94 8d       	ldd	r25, Z+28	; 0x1c
    64d8:	e9 81       	ldd	r30, Y+1	; 0x01
    64da:	fa 81       	ldd	r31, Y+2	; 0x02
    64dc:	94 8f       	std	Z+28, r25	; 0x1c
    64de:	83 8f       	std	Z+27, r24	; 0x1b
    64e0:	0f 90       	pop	r0
    64e2:	0f 90       	pop	r0
    64e4:	0f 90       	pop	r0
    64e6:	0f 90       	pop	r0
    64e8:	cf 91       	pop	r28
    64ea:	df 91       	pop	r29
    64ec:	08 95       	ret

000064ee <_ZN7SDClassC1Ev>:
  void rewindDirectory(void);
  
  using Print::write;
};

class SDClass {
    64ee:	df 93       	push	r29
    64f0:	cf 93       	push	r28
    64f2:	00 d0       	rcall	.+0      	; 0x64f4 <_ZN7SDClassC1Ev+0x6>
    64f4:	cd b7       	in	r28, 0x3d	; 61
    64f6:	de b7       	in	r29, 0x3e	; 62
    64f8:	9a 83       	std	Y+2, r25	; 0x02
    64fa:	89 83       	std	Y+1, r24	; 0x01
    64fc:	89 81       	ldd	r24, Y+1	; 0x01
    64fe:	9a 81       	ldd	r25, Y+2	; 0x02
    6500:	0e 94 60 30 	call	0x60c0	; 0x60c0 <_ZN7Sd2CardC1Ev>
    6504:	89 81       	ldd	r24, Y+1	; 0x01
    6506:	9a 81       	ldd	r25, Y+2	; 0x02
    6508:	0c 96       	adiw	r24, 0x0c	; 12
    650a:	0e 94 13 31 	call	0x6226	; 0x6226 <_ZN8SdVolumeC1Ev>
    650e:	89 81       	ldd	r24, Y+1	; 0x01
    6510:	9a 81       	ldd	r25, Y+2	; 0x02
    6512:	8a 96       	adiw	r24, 0x2a	; 42
    6514:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>
    6518:	0f 90       	pop	r0
    651a:	0f 90       	pop	r0
    651c:	cf 91       	pop	r28
    651e:	df 91       	pop	r29
    6520:	08 95       	ret

00006522 <_Z41__static_initialization_and_destruction_0ii>:
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
    6522:	df 93       	push	r29
    6524:	cf 93       	push	r28
    6526:	00 d0       	rcall	.+0      	; 0x6528 <_Z41__static_initialization_and_destruction_0ii+0x6>
    6528:	00 d0       	rcall	.+0      	; 0x652a <_Z41__static_initialization_and_destruction_0ii+0x8>
    652a:	cd b7       	in	r28, 0x3d	; 61
    652c:	de b7       	in	r29, 0x3e	; 62
    652e:	9a 83       	std	Y+2, r25	; 0x02
    6530:	89 83       	std	Y+1, r24	; 0x01
    6532:	7c 83       	std	Y+4, r23	; 0x04
    6534:	6b 83       	std	Y+3, r22	; 0x03
    6536:	89 81       	ldd	r24, Y+1	; 0x01
    6538:	9a 81       	ldd	r25, Y+2	; 0x02
    653a:	81 30       	cpi	r24, 0x01	; 1
    653c:	91 05       	cpc	r25, r1
    653e:	51 f4       	brne	.+20     	; 0x6554 <_Z41__static_initialization_and_destruction_0ii+0x32>
    6540:	8b 81       	ldd	r24, Y+3	; 0x03
    6542:	9c 81       	ldd	r25, Y+4	; 0x04
    6544:	2f ef       	ldi	r18, 0xFF	; 255
    6546:	8f 3f       	cpi	r24, 0xFF	; 255
    6548:	92 07       	cpc	r25, r18
    654a:	21 f4       	brne	.+8      	; 0x6554 <_Z41__static_initialization_and_destruction_0ii+0x32>
    654c:	8b e4       	ldi	r24, 0x4B	; 75
    654e:	95 e0       	ldi	r25, 0x05	; 5
    6550:	0e 94 77 32 	call	0x64ee	; 0x64ee <_ZN7SDClassC1Ev>
    6554:	0f 90       	pop	r0
    6556:	0f 90       	pop	r0
    6558:	0f 90       	pop	r0
    655a:	0f 90       	pop	r0
    655c:	cf 91       	pop	r28
    655e:	df 91       	pop	r29
    6560:	08 95       	ret

00006562 <_GLOBAL__I__Z20getNextPathComponentPcPjS_>:
    6562:	df 93       	push	r29
    6564:	cf 93       	push	r28
    6566:	cd b7       	in	r28, 0x3d	; 61
    6568:	de b7       	in	r29, 0x3e	; 62
    656a:	81 e0       	ldi	r24, 0x01	; 1
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	6f ef       	ldi	r22, 0xFF	; 255
    6570:	7f ef       	ldi	r23, 0xFF	; 255
    6572:	0e 94 91 32 	call	0x6522	; 0x6522 <_Z41__static_initialization_and_destruction_0ii>
    6576:	cf 91       	pop	r28
    6578:	df 91       	pop	r29
    657a:	08 95       	ret

0000657c <_ZN4File15rewindDirectoryEv>:

  //Serial.println("nothing");
  return File();
}

void File::rewindDirectory(void) {  
    657c:	df 93       	push	r29
    657e:	cf 93       	push	r28
    6580:	00 d0       	rcall	.+0      	; 0x6582 <_ZN4File15rewindDirectoryEv+0x6>
    6582:	0f 92       	push	r0
    6584:	cd b7       	in	r28, 0x3d	; 61
    6586:	de b7       	in	r29, 0x3e	; 62
    6588:	9a 83       	std	Y+2, r25	; 0x02
    658a:	89 83       	std	Y+1, r24	; 0x01
  if (isDirectory())
    658c:	89 81       	ldd	r24, Y+1	; 0x01
    658e:	9a 81       	ldd	r25, Y+2	; 0x02
    6590:	0e 94 a9 2c 	call	0x5952	; 0x5952 <_ZN4File11isDirectoryEv>
    6594:	8b 83       	std	Y+3, r24	; 0x03
    6596:	8b 81       	ldd	r24, Y+3	; 0x03
    6598:	88 23       	and	r24, r24
    659a:	11 f0       	breq	.+4      	; 0x65a0 <_ZN4File15rewindDirectoryEv+0x24>
    659c:	81 e0       	ldi	r24, 0x01	; 1
    659e:	8b 83       	std	Y+3, r24	; 0x03
    65a0:	8b 81       	ldd	r24, Y+3	; 0x03
    65a2:	88 23       	and	r24, r24
    65a4:	31 f0       	breq	.+12     	; 0x65b2 <_ZN4File15rewindDirectoryEv+0x36>
    _file->rewind();
    65a6:	e9 81       	ldd	r30, Y+1	; 0x01
    65a8:	fa 81       	ldd	r31, Y+2	; 0x02
    65aa:	81 8d       	ldd	r24, Z+25	; 0x19
    65ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    65ae:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN6SdFile6rewindEv>
}
    65b2:	0f 90       	pop	r0
    65b4:	0f 90       	pop	r0
    65b6:	0f 90       	pop	r0
    65b8:	cf 91       	pop	r28
    65ba:	df 91       	pop	r29
    65bc:	08 95       	ret

000065be <_ZN6SdFile4openERS_PKch>:
  }
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    65be:	df 93       	push	r29
    65c0:	cf 93       	push	r28
    65c2:	cd b7       	in	r28, 0x3d	; 61
    65c4:	de b7       	in	r29, 0x3e	; 62
    65c6:	27 97       	sbiw	r28, 0x07	; 7
    65c8:	0f b6       	in	r0, 0x3f	; 63
    65ca:	f8 94       	cli
    65cc:	de bf       	out	0x3e, r29	; 62
    65ce:	0f be       	out	0x3f, r0	; 63
    65d0:	cd bf       	out	0x3d, r28	; 61
    65d2:	9a 83       	std	Y+2, r25	; 0x02
    65d4:	89 83       	std	Y+1, r24	; 0x01
    65d6:	7c 83       	std	Y+4, r23	; 0x04
    65d8:	6b 83       	std	Y+3, r22	; 0x03
    65da:	5e 83       	std	Y+6, r21	; 0x06
    65dc:	4d 83       	std	Y+5, r20	; 0x05
    65de:	2f 83       	std	Y+7, r18	; 0x07
    return open(&dirFile, fileName, oflag);
    65e0:	89 81       	ldd	r24, Y+1	; 0x01
    65e2:	9a 81       	ldd	r25, Y+2	; 0x02
    65e4:	2b 81       	ldd	r18, Y+3	; 0x03
    65e6:	3c 81       	ldd	r19, Y+4	; 0x04
    65e8:	4d 81       	ldd	r20, Y+5	; 0x05
    65ea:	5e 81       	ldd	r21, Y+6	; 0x06
    65ec:	b9 01       	movw	r22, r18
    65ee:	2f 81       	ldd	r18, Y+7	; 0x07
    65f0:	0e 94 6e 20 	call	0x40dc	; 0x40dc <_ZN6SdFile4openEPS_PKch>
  }
    65f4:	27 96       	adiw	r28, 0x07	; 7
    65f6:	0f b6       	in	r0, 0x3f	; 63
    65f8:	f8 94       	cli
    65fa:	de bf       	out	0x3e, r29	; 62
    65fc:	0f be       	out	0x3f, r0	; 63
    65fe:	cd bf       	out	0x3d, r28	; 61
    6600:	cf 91       	pop	r28
    6602:	df 91       	pop	r29
    6604:	08 95       	ret

00006606 <_ZN4File12openNextFileEh>:
  return walkPath(filepath, root, callback_remove);
}


// allows you to recurse into a directory
File File::openNextFile(uint8_t mode) {
    6606:	0f 93       	push	r16
    6608:	1f 93       	push	r17
    660a:	df 93       	push	r29
    660c:	cf 93       	push	r28
    660e:	cd b7       	in	r28, 0x3d	; 61
    6610:	de b7       	in	r29, 0x3e	; 62
    6612:	cf 56       	subi	r28, 0x6F	; 111
    6614:	d0 40       	sbci	r29, 0x00	; 0
    6616:	0f b6       	in	r0, 0x3f	; 63
    6618:	f8 94       	cli
    661a:	de bf       	out	0x3e, r29	; 62
    661c:	0f be       	out	0x3f, r0	; 63
    661e:	cd bf       	out	0x3d, r28	; 61
    6620:	af 96       	adiw	r28, 0x2f	; 47
    6622:	9f af       	std	Y+63, r25	; 0x3f
    6624:	8e af       	std	Y+62, r24	; 0x3e
    6626:	af 97       	sbiw	r28, 0x2f	; 47
    6628:	fe 01       	movw	r30, r28
    662a:	e8 59       	subi	r30, 0x98	; 152
    662c:	ff 4f       	sbci	r31, 0xFF	; 255
    662e:	71 83       	std	Z+1, r23	; 0x01
    6630:	60 83       	st	Z, r22
    6632:	fe 01       	movw	r30, r28
    6634:	e6 59       	subi	r30, 0x96	; 150
    6636:	ff 4f       	sbci	r31, 0xFF	; 255
    6638:	40 83       	st	Z, r20
    663a:	80 c0       	rjmp	.+256    	; 0x673c <_ZN4File12openNextFileEh+0x136>

  //Serial.print("\t\treading dir...");
  while (_file->readDir(&p) > 0) {

    // done if past last used entry
    if (p.name[0] == DIR_NAME_FREE) {
    663c:	fe 01       	movw	r30, r28
    663e:	e8 5b       	subi	r30, 0xB8	; 184
    6640:	ff 4f       	sbci	r31, 0xFF	; 255
    6642:	80 81       	ld	r24, Z
    6644:	88 23       	and	r24, r24
    6646:	39 f4       	brne	.+14     	; 0x6656 <_ZN4File12openNextFileEh+0x50>
      //Serial.println("end");
      return File();
    6648:	af 96       	adiw	r28, 0x2f	; 47
    664a:	8e ad       	ldd	r24, Y+62	; 0x3e
    664c:	9f ad       	ldd	r25, Y+63	; 0x3f
    664e:	af 97       	sbiw	r28, 0x2f	; 47
    6650:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <_ZN4FileC1Ev>
    6654:	96 c0       	rjmp	.+300    	; 0x6782 <_ZN4File12openNextFileEh+0x17c>
    }

    // skip deleted entry and entries for . and  ..
    if (p.name[0] == DIR_NAME_DELETED || p.name[0] == '.') {
    6656:	fe 01       	movw	r30, r28
    6658:	e8 5b       	subi	r30, 0xB8	; 184
    665a:	ff 4f       	sbci	r31, 0xFF	; 255
    665c:	80 81       	ld	r24, Z
    665e:	85 3e       	cpi	r24, 0xE5	; 229
    6660:	09 f4       	brne	.+2      	; 0x6664 <_ZN4File12openNextFileEh+0x5e>
    6662:	6c c0       	rjmp	.+216    	; 0x673c <_ZN4File12openNextFileEh+0x136>
    6664:	fe 01       	movw	r30, r28
    6666:	e8 5b       	subi	r30, 0xB8	; 184
    6668:	ff 4f       	sbci	r31, 0xFF	; 255
    666a:	80 81       	ld	r24, Z
    666c:	8e 32       	cpi	r24, 0x2E	; 46
    666e:	09 f4       	brne	.+2      	; 0x6672 <_ZN4File12openNextFileEh+0x6c>
    6670:	65 c0       	rjmp	.+202    	; 0x673c <_ZN4File12openNextFileEh+0x136>
      //Serial.println("dots");
      continue;
    }

    // only list subdirectories and files
    if (!DIR_IS_FILE_OR_SUBDIR(&p)) {
    6672:	ce 01       	movw	r24, r28
    6674:	88 5b       	subi	r24, 0xB8	; 184
    6676:	9f 4f       	sbci	r25, 0xFF	; 255
    6678:	0e 94 78 30 	call	0x60f0	; 0x60f0 <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry>
    667c:	ac 96       	adiw	r28, 0x2c	; 44
    667e:	1f ae       	std	Y+63, r1	; 0x3f
    6680:	ac 97       	sbiw	r28, 0x2c	; 44
    6682:	88 23       	and	r24, r24
    6684:	21 f4       	brne	.+8      	; 0x668e <_ZN4File12openNextFileEh+0x88>
    6686:	81 e0       	ldi	r24, 0x01	; 1
    6688:	ac 96       	adiw	r28, 0x2c	; 44
    668a:	8f af       	std	Y+63, r24	; 0x3f
    668c:	ac 97       	sbiw	r28, 0x2c	; 44
    668e:	ac 96       	adiw	r28, 0x2c	; 44
    6690:	8f ad       	ldd	r24, Y+63	; 0x3f
    6692:	ac 97       	sbiw	r28, 0x2c	; 44
    6694:	88 23       	and	r24, r24
    6696:	09 f0       	breq	.+2      	; 0x669a <_ZN4File12openNextFileEh+0x94>
    6698:	51 c0       	rjmp	.+162    	; 0x673c <_ZN4File12openNextFileEh+0x136>
      //Serial.println("notafile");
      continue;
    }

    // print file name with possible blank fill
    SdFile f;
    669a:	ce 01       	movw	r24, r28
    669c:	4e 96       	adiw	r24, 0x1e	; 30
    669e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>
    char name[13];
    _file->dirName(p, name);
    66a2:	ce 01       	movw	r24, r28
    66a4:	88 5b       	subi	r24, 0xB8	; 184
    66a6:	9f 4f       	sbci	r25, 0xFF	; 255
    66a8:	9e 01       	movw	r18, r28
    66aa:	25 5c       	subi	r18, 0xC5	; 197
    66ac:	3f 4f       	sbci	r19, 0xFF	; 255
    66ae:	b9 01       	movw	r22, r18
    66b0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <_ZN6SdFile7dirNameERK14directoryEntryPc>
    //Serial.print("try to open file ");
    //Serial.println(name);

    if (f.open(_file, name, mode)) {
    66b4:	fe 01       	movw	r30, r28
    66b6:	e8 59       	subi	r30, 0x98	; 152
    66b8:	ff 4f       	sbci	r31, 0xFF	; 255
    66ba:	01 90       	ld	r0, Z+
    66bc:	f0 81       	ld	r31, Z
    66be:	e0 2d       	mov	r30, r0
    66c0:	41 8d       	ldd	r20, Z+25	; 0x19
    66c2:	52 8d       	ldd	r21, Z+26	; 0x1a
    66c4:	ce 01       	movw	r24, r28
    66c6:	4e 96       	adiw	r24, 0x1e	; 30
    66c8:	9e 01       	movw	r18, r28
    66ca:	25 5c       	subi	r18, 0xC5	; 197
    66cc:	3f 4f       	sbci	r19, 0xFF	; 255
    66ce:	fe 01       	movw	r30, r28
    66d0:	e6 59       	subi	r30, 0x96	; 150
    66d2:	ff 4f       	sbci	r31, 0xFF	; 255
    66d4:	ba 01       	movw	r22, r20
    66d6:	a9 01       	movw	r20, r18
    66d8:	20 81       	ld	r18, Z
    66da:	0e 94 6e 20 	call	0x40dc	; 0x40dc <_ZN6SdFile4openEPS_PKch>
    66de:	e0 96       	adiw	r28, 0x30	; 48
    66e0:	8f af       	std	Y+63, r24	; 0x3f
    66e2:	e0 97       	sbiw	r28, 0x30	; 48
    66e4:	e0 96       	adiw	r28, 0x30	; 48
    66e6:	8f ad       	ldd	r24, Y+63	; 0x3f
    66e8:	e0 97       	sbiw	r28, 0x30	; 48
    66ea:	88 23       	and	r24, r24
    66ec:	21 f0       	breq	.+8      	; 0x66f6 <_ZN4File12openNextFileEh+0xf0>
    66ee:	81 e0       	ldi	r24, 0x01	; 1
    66f0:	e0 96       	adiw	r28, 0x30	; 48
    66f2:	8f af       	std	Y+63, r24	; 0x3f
    66f4:	e0 97       	sbiw	r28, 0x30	; 48
    66f6:	e0 96       	adiw	r28, 0x30	; 48
    66f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    66fa:	e0 97       	sbiw	r28, 0x30	; 48
    66fc:	88 23       	and	r24, r24
    66fe:	b9 f0       	breq	.+46     	; 0x672e <_ZN4File12openNextFileEh+0x128>
      //Serial.println("OK!");
      return File(f, name);    
    6700:	af 96       	adiw	r28, 0x2f	; 47
    6702:	0e ad       	ldd	r16, Y+62	; 0x3e
    6704:	1f ad       	ldd	r17, Y+63	; 0x3f
    6706:	af 97       	sbiw	r28, 0x2f	; 47
    6708:	9e 01       	movw	r18, r28
    670a:	22 5e       	subi	r18, 0xE2	; 226
    670c:	3f 4f       	sbci	r19, 0xFF	; 255
    670e:	ce 01       	movw	r24, r28
    6710:	01 96       	adiw	r24, 0x01	; 1
    6712:	b9 01       	movw	r22, r18
    6714:	0e 94 03 32 	call	0x6406	; 0x6406 <_ZN6SdFileC1ERKS_>
    6718:	ae 01       	movw	r20, r28
    671a:	45 5c       	subi	r20, 0xC5	; 197
    671c:	5f 4f       	sbci	r21, 0xFF	; 255
    671e:	c8 01       	movw	r24, r16
    6720:	9e 01       	movw	r18, r28
    6722:	2f 5f       	subi	r18, 0xFF	; 255
    6724:	3f 4f       	sbci	r19, 0xFF	; 255
    6726:	b9 01       	movw	r22, r18
    6728:	0e 94 76 2f 	call	0x5eec	; 0x5eec <_ZN4FileC1E6SdFilePKc>
    672c:	2a c0       	rjmp	.+84     	; 0x6782 <_ZN4File12openNextFileEh+0x17c>
    } else {
      //Serial.println("ugh");
      return File();
    672e:	af 96       	adiw	r28, 0x2f	; 47
    6730:	8e ad       	ldd	r24, Y+62	; 0x3e
    6732:	9f ad       	ldd	r25, Y+63	; 0x3f
    6734:	af 97       	sbiw	r28, 0x2f	; 47
    6736:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <_ZN4FileC1Ev>
    673a:	23 c0       	rjmp	.+70     	; 0x6782 <_ZN4File12openNextFileEh+0x17c>
// allows you to recurse into a directory
File File::openNextFile(uint8_t mode) {
  dir_t p;

  //Serial.print("\t\treading dir...");
  while (_file->readDir(&p) > 0) {
    673c:	fe 01       	movw	r30, r28
    673e:	e8 59       	subi	r30, 0x98	; 152
    6740:	ff 4f       	sbci	r31, 0xFF	; 255
    6742:	01 90       	ld	r0, Z+
    6744:	f0 81       	ld	r31, Z
    6746:	e0 2d       	mov	r30, r0
    6748:	81 8d       	ldd	r24, Z+25	; 0x19
    674a:	92 8d       	ldd	r25, Z+26	; 0x1a
    674c:	9e 01       	movw	r18, r28
    674e:	28 5b       	subi	r18, 0xB8	; 184
    6750:	3f 4f       	sbci	r19, 0xFF	; 255
    6752:	b9 01       	movw	r22, r18
    6754:	0e 94 5d 17 	call	0x2eba	; 0x2eba <_ZN6SdFile7readDirEP14directoryEntry>
    6758:	ad 96       	adiw	r28, 0x2d	; 45
    675a:	1f ae       	std	Y+63, r1	; 0x3f
    675c:	ad 97       	sbiw	r28, 0x2d	; 45
    675e:	18 16       	cp	r1, r24
    6760:	24 f4       	brge	.+8      	; 0x676a <_ZN4File12openNextFileEh+0x164>
    6762:	81 e0       	ldi	r24, 0x01	; 1
    6764:	ad 96       	adiw	r28, 0x2d	; 45
    6766:	8f af       	std	Y+63, r24	; 0x3f
    6768:	ad 97       	sbiw	r28, 0x2d	; 45
    676a:	ad 96       	adiw	r28, 0x2d	; 45
    676c:	8f ad       	ldd	r24, Y+63	; 0x3f
    676e:	ad 97       	sbiw	r28, 0x2d	; 45
    6770:	88 23       	and	r24, r24
    6772:	09 f0       	breq	.+2      	; 0x6776 <_ZN4File12openNextFileEh+0x170>
    6774:	63 cf       	rjmp	.-314    	; 0x663c <_ZN4File12openNextFileEh+0x36>
      return File();
    }
  }

  //Serial.println("nothing");
  return File();
    6776:	af 96       	adiw	r28, 0x2f	; 47
    6778:	8e ad       	ldd	r24, Y+62	; 0x3e
    677a:	9f ad       	ldd	r25, Y+63	; 0x3f
    677c:	af 97       	sbiw	r28, 0x2f	; 47
    677e:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <_ZN4FileC1Ev>
}
    6782:	af 96       	adiw	r28, 0x2f	; 47
    6784:	8e ad       	ldd	r24, Y+62	; 0x3e
    6786:	9f ad       	ldd	r25, Y+63	; 0x3f
    6788:	af 97       	sbiw	r28, 0x2f	; 47
    678a:	af 96       	adiw	r28, 0x2f	; 47
    678c:	8e ad       	ldd	r24, Y+62	; 0x3e
    678e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6790:	af 97       	sbiw	r28, 0x2f	; 47
    6792:	c1 59       	subi	r28, 0x91	; 145
    6794:	df 4f       	sbci	r29, 0xFF	; 255
    6796:	0f b6       	in	r0, 0x3f	; 63
    6798:	f8 94       	cli
    679a:	de bf       	out	0x3e, r29	; 62
    679c:	0f be       	out	0x3f, r0	; 63
    679e:	cd bf       	out	0x3d, r28	; 61
    67a0:	cf 91       	pop	r28
    67a2:	df 91       	pop	r29
    67a4:	1f 91       	pop	r17
    67a6:	0f 91       	pop	r16
    67a8:	08 95       	ret

000067aa <_Z19callback_pathExistsR6SdFilePchPv>:
   a pointer to an arbitrary object used for context.

 */

boolean callback_pathExists(SdFile& parentDir, char *filePathComponent, 
			    boolean isLastComponent, void *object) {
    67aa:	df 93       	push	r29
    67ac:	cf 93       	push	r28
    67ae:	cd b7       	in	r28, 0x3d	; 61
    67b0:	de b7       	in	r29, 0x3e	; 62
    67b2:	a5 97       	sbiw	r28, 0x25	; 37
    67b4:	0f b6       	in	r0, 0x3f	; 63
    67b6:	f8 94       	cli
    67b8:	de bf       	out	0x3e, r29	; 62
    67ba:	0f be       	out	0x3f, r0	; 63
    67bc:	cd bf       	out	0x3d, r28	; 61
    67be:	98 a3       	std	Y+32, r25	; 0x20
    67c0:	8f 8f       	std	Y+31, r24	; 0x1f
    67c2:	7a a3       	std	Y+34, r23	; 0x22
    67c4:	69 a3       	std	Y+33, r22	; 0x21
    67c6:	4b a3       	std	Y+35, r20	; 0x23
    67c8:	3d a3       	std	Y+37, r19	; 0x25
    67ca:	2c a3       	std	Y+36, r18	; 0x24
    directory.

    Returns true if file path exists.

  */
  SdFile child;
    67cc:	ce 01       	movw	r24, r28
    67ce:	02 96       	adiw	r24, 0x02	; 2
    67d0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
    67d4:	ce 01       	movw	r24, r28
    67d6:	02 96       	adiw	r24, 0x02	; 2
    67d8:	2f 8d       	ldd	r18, Y+31	; 0x1f
    67da:	38 a1       	ldd	r19, Y+32	; 0x20
    67dc:	49 a1       	ldd	r20, Y+33	; 0x21
    67de:	5a a1       	ldd	r21, Y+34	; 0x22
    67e0:	b9 01       	movw	r22, r18
    67e2:	21 e0       	ldi	r18, 0x01	; 1
    67e4:	0e 94 df 32 	call	0x65be	; 0x65be <_ZN6SdFile4openERS_PKch>
    67e8:	89 83       	std	Y+1, r24	; 0x01
  
  if (exists) {
    67ea:	89 81       	ldd	r24, Y+1	; 0x01
    67ec:	88 23       	and	r24, r24
    67ee:	21 f0       	breq	.+8      	; 0x67f8 <_Z19callback_pathExistsR6SdFilePchPv+0x4e>
     child.close(); 
    67f0:	ce 01       	movw	r24, r28
    67f2:	02 96       	adiw	r24, 0x02	; 2
    67f4:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN6SdFile5closeEv>
  }
  
  return exists;
    67f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    67fa:	a5 96       	adiw	r28, 0x25	; 37
    67fc:	0f b6       	in	r0, 0x3f	; 63
    67fe:	f8 94       	cli
    6800:	de bf       	out	0x3e, r29	; 62
    6802:	0f be       	out	0x3f, r0	; 63
    6804:	cd bf       	out	0x3d, r28	; 61
    6806:	cf 91       	pop	r28
    6808:	df 91       	pop	r29
    680a:	08 95       	ret

0000680c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>:
boolean walkPath(char *filepath, SdFile& parentDir,
		 boolean (*callback)(SdFile& parentDir,
				     char *filePathComponent,
				     boolean isLastComponent,
				     void *object),
		 void *object = NULL) {
    680c:	df 93       	push	r29
    680e:	cf 93       	push	r28
    6810:	cd b7       	in	r28, 0x3d	; 61
    6812:	de b7       	in	r29, 0x3e	; 62
    6814:	cc 55       	subi	r28, 0x5C	; 92
    6816:	d0 40       	sbci	r29, 0x00	; 0
    6818:	0f b6       	in	r0, 0x3f	; 63
    681a:	f8 94       	cli
    681c:	de bf       	out	0x3e, r29	; 62
    681e:	0f be       	out	0x3f, r0	; 63
    6820:	cd bf       	out	0x3d, r28	; 61
    6822:	fe 01       	movw	r30, r28
    6824:	ed 5a       	subi	r30, 0xAD	; 173
    6826:	ff 4f       	sbci	r31, 0xFF	; 255
    6828:	91 83       	std	Z+1, r25	; 0x01
    682a:	80 83       	st	Z, r24
    682c:	fe 01       	movw	r30, r28
    682e:	eb 5a       	subi	r30, 0xAB	; 171
    6830:	ff 4f       	sbci	r31, 0xFF	; 255
    6832:	71 83       	std	Z+1, r23	; 0x01
    6834:	60 83       	st	Z, r22
    6836:	fe 01       	movw	r30, r28
    6838:	e9 5a       	subi	r30, 0xA9	; 169
    683a:	ff 4f       	sbci	r31, 0xFF	; 255
    683c:	51 83       	std	Z+1, r21	; 0x01
    683e:	40 83       	st	Z, r20
    6840:	fe 01       	movw	r30, r28
    6842:	e7 5a       	subi	r30, 0xA7	; 167
    6844:	ff 4f       	sbci	r31, 0xFF	; 255
    6846:	31 83       	std	Z+1, r19	; 0x01
    6848:	20 83       	st	Z, r18
     function will return true.

   */


  SdFile subfile1;
    684a:	ce 01       	movw	r24, r28
    684c:	0a 96       	adiw	r24, 0x0a	; 10
    684e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>
  SdFile subfile2;
    6852:	ce 01       	movw	r24, r28
    6854:	87 96       	adiw	r24, 0x27	; 39
    6856:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    685a:	fe 01       	movw	r30, r28
    685c:	ef 5a       	subi	r30, 0xAF	; 175
    685e:	ff 4f       	sbci	r31, 0xFF	; 255
    6860:	11 82       	std	Z+1, r1	; 0x01
    6862:	10 82       	st	Z, r1
  SdFile *p_parent;
  SdFile *p_child;

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
    6864:	ce 01       	movw	r24, r28
    6866:	0a 96       	adiw	r24, 0x0a	; 10
    6868:	9f 83       	std	Y+7, r25	; 0x07
    686a:	8e 83       	std	Y+6, r24	; 0x06
  
  p_parent = &parentDir;
    686c:	fe 01       	movw	r30, r28
    686e:	eb 5a       	subi	r30, 0xAB	; 171
    6870:	ff 4f       	sbci	r31, 0xFF	; 255
    6872:	80 81       	ld	r24, Z
    6874:	91 81       	ldd	r25, Z+1	; 0x01
    6876:	99 87       	std	Y+9, r25	; 0x09
    6878:	88 87       	std	Y+8, r24	; 0x08

  while (true) {

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);
    687a:	fe 01       	movw	r30, r28
    687c:	ed 5a       	subi	r30, 0xAD	; 173
    687e:	ff 4f       	sbci	r31, 0xFF	; 255
    6880:	80 81       	ld	r24, Z
    6882:	91 81       	ldd	r25, Z+1	; 0x01
    6884:	9e 01       	movw	r18, r28
    6886:	2f 5a       	subi	r18, 0xAF	; 175
    6888:	3f 4f       	sbci	r19, 0xFF	; 255
    688a:	ae 01       	movw	r20, r28
    688c:	4c 5b       	subi	r20, 0xBC	; 188
    688e:	5f 4f       	sbci	r21, 0xFF	; 255
    6890:	b9 01       	movw	r22, r18
    6892:	0e 94 54 31 	call	0x62a8	; 0x62a8 <_Z20getNextPathComponentPcPjS_>
    6896:	8b 83       	std	Y+3, r24	; 0x03

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);
    6898:	6d 96       	adiw	r28, 0x1d	; 29
    689a:	1f ae       	std	Y+63, r1	; 0x3f
    689c:	6d 97       	sbiw	r28, 0x1d	; 29
    689e:	8b 81       	ldd	r24, Y+3	; 0x03
    68a0:	88 23       	and	r24, r24
    68a2:	21 f4       	brne	.+8      	; 0x68ac <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xa0>
    68a4:	81 e0       	ldi	r24, 0x01	; 1
    68a6:	6d 96       	adiw	r28, 0x1d	; 29
    68a8:	8f af       	std	Y+63, r24	; 0x3f
    68aa:	6d 97       	sbiw	r28, 0x1d	; 29
    68ac:	de 01       	movw	r26, r28
    68ae:	a9 5a       	subi	r26, 0xA9	; 169
    68b0:	bf 4f       	sbci	r27, 0xFF	; 255
    68b2:	88 85       	ldd	r24, Y+8	; 0x08
    68b4:	99 85       	ldd	r25, Y+9	; 0x09
    68b6:	9e 01       	movw	r18, r28
    68b8:	2c 5b       	subi	r18, 0xBC	; 188
    68ba:	3f 4f       	sbci	r19, 0xFF	; 255
    68bc:	fe 01       	movw	r30, r28
    68be:	e7 5a       	subi	r30, 0xA7	; 167
    68c0:	ff 4f       	sbci	r31, 0xFF	; 255
    68c2:	01 90       	ld	r0, Z+
    68c4:	f0 81       	ld	r31, Z
    68c6:	e0 2d       	mov	r30, r0
    68c8:	0d 90       	ld	r0, X+
    68ca:	bc 91       	ld	r27, X
    68cc:	a0 2d       	mov	r26, r0
    68ce:	b9 01       	movw	r22, r18
    68d0:	6d 96       	adiw	r28, 0x1d	; 29
    68d2:	4f ad       	ldd	r20, Y+63	; 0x3f
    68d4:	6d 97       	sbiw	r28, 0x1d	; 29
    68d6:	9f 01       	movw	r18, r30
    68d8:	fd 01       	movw	r30, r26
    68da:	09 95       	icall
    68dc:	8a 83       	std	Y+2, r24	; 0x02

    if (!shouldContinue) {
    68de:	8a 81       	ldd	r24, Y+2	; 0x02
    68e0:	88 23       	and	r24, r24
    68e2:	91 f4       	brne	.+36     	; 0x6908 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xfc>
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    68e4:	fe 01       	movw	r30, r28
    68e6:	eb 5a       	subi	r30, 0xAB	; 171
    68e8:	ff 4f       	sbci	r31, 0xFF	; 255
    68ea:	28 85       	ldd	r18, Y+8	; 0x08
    68ec:	39 85       	ldd	r19, Y+9	; 0x09
    68ee:	80 81       	ld	r24, Z
    68f0:	91 81       	ldd	r25, Z+1	; 0x01
    68f2:	28 17       	cp	r18, r24
    68f4:	39 07       	cpc	r19, r25
    68f6:	21 f0       	breq	.+8      	; 0x6900 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xf4>
        (*p_parent).close();
    68f8:	88 85       	ldd	r24, Y+8	; 0x08
    68fa:	99 85       	ldd	r25, Y+9	; 0x09
    68fc:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN6SdFile5closeEv>
      }
      return false;
    6900:	6c 96       	adiw	r28, 0x1c	; 28
    6902:	1f ae       	std	Y+63, r1	; 0x3f
    6904:	6c 97       	sbiw	r28, 0x1c	; 28
    6906:	51 c0       	rjmp	.+162    	; 0x69aa <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x19e>
    }
    
    if (!moreComponents) {
    6908:	8b 81       	ldd	r24, Y+3	; 0x03
    690a:	88 23       	and	r24, r24
    690c:	e1 f1       	breq	.+120    	; 0x6986 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x17a>
      break;
    }
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);
    690e:	8e 81       	ldd	r24, Y+6	; 0x06
    6910:	9f 81       	ldd	r25, Y+7	; 0x07
    6912:	28 85       	ldd	r18, Y+8	; 0x08
    6914:	39 85       	ldd	r19, Y+9	; 0x09
    6916:	ae 01       	movw	r20, r28
    6918:	4c 5b       	subi	r20, 0xBC	; 188
    691a:	5f 4f       	sbci	r21, 0xFF	; 255
    691c:	b9 01       	movw	r22, r18
    691e:	21 e0       	ldi	r18, 0x01	; 1
    6920:	0e 94 df 32 	call	0x65be	; 0x65be <_ZN6SdFile4openERS_PKch>
    6924:	89 83       	std	Y+1, r24	; 0x01

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    6926:	fe 01       	movw	r30, r28
    6928:	eb 5a       	subi	r30, 0xAB	; 171
    692a:	ff 4f       	sbci	r31, 0xFF	; 255
    692c:	28 85       	ldd	r18, Y+8	; 0x08
    692e:	39 85       	ldd	r19, Y+9	; 0x09
    6930:	80 81       	ld	r24, Z
    6932:	91 81       	ldd	r25, Z+1	; 0x01
    6934:	28 17       	cp	r18, r24
    6936:	39 07       	cpc	r19, r25
    6938:	21 f0       	breq	.+8      	; 0x6942 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x136>
      (*p_parent).close();
    693a:	88 85       	ldd	r24, Y+8	; 0x08
    693c:	99 85       	ldd	r25, Y+9	; 0x09
    693e:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN6SdFile5closeEv>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    6942:	89 81       	ldd	r24, Y+1	; 0x01
    6944:	88 23       	and	r24, r24
    6946:	d9 f0       	breq	.+54     	; 0x697e <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x172>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
    6948:	fe 01       	movw	r30, r28
    694a:	eb 5a       	subi	r30, 0xAB	; 171
    694c:	ff 4f       	sbci	r31, 0xFF	; 255
    694e:	28 85       	ldd	r18, Y+8	; 0x08
    6950:	39 85       	ldd	r19, Y+9	; 0x09
    6952:	80 81       	ld	r24, Z
    6954:	91 81       	ldd	r25, Z+1	; 0x01
    6956:	28 17       	cp	r18, r24
    6958:	39 07       	cpc	r19, r25
    695a:	21 f4       	brne	.+8      	; 0x6964 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x158>
        p_parent = &subfile2;
    695c:	ce 01       	movw	r24, r28
    695e:	87 96       	adiw	r24, 0x27	; 39
    6960:	99 87       	std	Y+9, r25	; 0x09
    6962:	88 87       	std	Y+8, r24	; 0x08
      }

      p_tmp_sdfile = p_parent;
    6964:	88 85       	ldd	r24, Y+8	; 0x08
    6966:	99 85       	ldd	r25, Y+9	; 0x09
    6968:	9d 83       	std	Y+5, r25	; 0x05
    696a:	8c 83       	std	Y+4, r24	; 0x04
      p_parent = p_child;
    696c:	8e 81       	ldd	r24, Y+6	; 0x06
    696e:	9f 81       	ldd	r25, Y+7	; 0x07
    6970:	99 87       	std	Y+9, r25	; 0x09
    6972:	88 87       	std	Y+8, r24	; 0x08
      p_child = p_tmp_sdfile;
    6974:	8c 81       	ldd	r24, Y+4	; 0x04
    6976:	9d 81       	ldd	r25, Y+5	; 0x05
    6978:	9f 83       	std	Y+7, r25	; 0x07
    697a:	8e 83       	std	Y+6, r24	; 0x06
    697c:	7e cf       	rjmp	.-260    	; 0x687a <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x6e>
    } else {
      return false;
    697e:	6c 96       	adiw	r28, 0x1c	; 28
    6980:	1f ae       	std	Y+63, r1	; 0x3f
    6982:	6c 97       	sbiw	r28, 0x1c	; 28
    6984:	12 c0       	rjmp	.+36     	; 0x69aa <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x19e>
    }
  }
  
  if (p_parent != &parentDir) {
    6986:	fe 01       	movw	r30, r28
    6988:	eb 5a       	subi	r30, 0xAB	; 171
    698a:	ff 4f       	sbci	r31, 0xFF	; 255
    698c:	28 85       	ldd	r18, Y+8	; 0x08
    698e:	39 85       	ldd	r19, Y+9	; 0x09
    6990:	80 81       	ld	r24, Z
    6992:	91 81       	ldd	r25, Z+1	; 0x01
    6994:	28 17       	cp	r18, r24
    6996:	39 07       	cpc	r19, r25
    6998:	21 f0       	breq	.+8      	; 0x69a2 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x196>
    (*p_parent).close(); // TODO: Return/ handle different?
    699a:	88 85       	ldd	r24, Y+8	; 0x08
    699c:	99 85       	ldd	r25, Y+9	; 0x09
    699e:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN6SdFile5closeEv>
  }

  return true;
    69a2:	81 e0       	ldi	r24, 0x01	; 1
    69a4:	6c 96       	adiw	r28, 0x1c	; 28
    69a6:	8f af       	std	Y+63, r24	; 0x3f
    69a8:	6c 97       	sbiw	r28, 0x1c	; 28
    69aa:	6c 96       	adiw	r28, 0x1c	; 28
    69ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    69ae:	6c 97       	sbiw	r28, 0x1c	; 28
}
    69b0:	c4 5a       	subi	r28, 0xA4	; 164
    69b2:	df 4f       	sbci	r29, 0xFF	; 255
    69b4:	0f b6       	in	r0, 0x3f	; 63
    69b6:	f8 94       	cli
    69b8:	de bf       	out	0x3e, r29	; 62
    69ba:	0f be       	out	0x3f, r0	; 63
    69bc:	cd bf       	out	0x3d, r28	; 61
    69be:	cf 91       	pop	r28
    69c0:	df 91       	pop	r29
    69c2:	08 95       	ret

000069c4 <_ZN7SDClass6removeEPc>:
  
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(char *filepath) {
    69c4:	df 93       	push	r29
    69c6:	cf 93       	push	r28
    69c8:	00 d0       	rcall	.+0      	; 0x69ca <_ZN7SDClass6removeEPc+0x6>
    69ca:	00 d0       	rcall	.+0      	; 0x69cc <_ZN7SDClass6removeEPc+0x8>
    69cc:	cd b7       	in	r28, 0x3d	; 61
    69ce:	de b7       	in	r29, 0x3e	; 62
    69d0:	9a 83       	std	Y+2, r25	; 0x02
    69d2:	89 83       	std	Y+1, r24	; 0x01
    69d4:	7c 83       	std	Y+4, r23	; 0x04
    69d6:	6b 83       	std	Y+3, r22	; 0x03
  return walkPath(filepath, root, callback_remove);
    69d8:	89 81       	ldd	r24, Y+1	; 0x01
    69da:	9a 81       	ldd	r25, Y+2	; 0x02
    69dc:	ac 01       	movw	r20, r24
    69de:	46 5d       	subi	r20, 0xD6	; 214
    69e0:	5f 4f       	sbci	r21, 0xFF	; 255
    69e2:	8b 81       	ldd	r24, Y+3	; 0x03
    69e4:	9c 81       	ldd	r25, Y+4	; 0x04
    69e6:	2a e9       	ldi	r18, 0x9A	; 154
    69e8:	38 e3       	ldi	r19, 0x38	; 56
    69ea:	ba 01       	movw	r22, r20
    69ec:	a9 01       	movw	r20, r18
    69ee:	20 e0       	ldi	r18, 0x00	; 0
    69f0:	30 e0       	ldi	r19, 0x00	; 0
    69f2:	0e 94 06 34 	call	0x680c	; 0x680c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>
}
    69f6:	0f 90       	pop	r0
    69f8:	0f 90       	pop	r0
    69fa:	0f 90       	pop	r0
    69fc:	0f 90       	pop	r0
    69fe:	cf 91       	pop	r28
    6a00:	df 91       	pop	r29
    6a02:	08 95       	ret

00006a04 <_ZN7SDClass5rmdirEPc>:
  
   */
  return walkPath(filepath, root, callback_makeDirPath);
}

boolean SDClass::rmdir(char *filepath) {
    6a04:	df 93       	push	r29
    6a06:	cf 93       	push	r28
    6a08:	00 d0       	rcall	.+0      	; 0x6a0a <_ZN7SDClass5rmdirEPc+0x6>
    6a0a:	00 d0       	rcall	.+0      	; 0x6a0c <_ZN7SDClass5rmdirEPc+0x8>
    6a0c:	cd b7       	in	r28, 0x3d	; 61
    6a0e:	de b7       	in	r29, 0x3e	; 62
    6a10:	9a 83       	std	Y+2, r25	; 0x02
    6a12:	89 83       	std	Y+1, r24	; 0x01
    6a14:	7c 83       	std	Y+4, r23	; 0x04
    6a16:	6b 83       	std	Y+3, r22	; 0x03
    Makes a single directory or a heirarchy of directories.

    A rough equivalent to `mkdir -p`.
  
   */
  return walkPath(filepath, root, callback_rmdir);
    6a18:	89 81       	ldd	r24, Y+1	; 0x01
    6a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    6a1c:	ac 01       	movw	r20, r24
    6a1e:	46 5d       	subi	r20, 0xD6	; 214
    6a20:	5f 4f       	sbci	r21, 0xFF	; 255
    6a22:	8b 81       	ldd	r24, Y+3	; 0x03
    6a24:	9c 81       	ldd	r25, Y+4	; 0x04
    6a26:	24 e4       	ldi	r18, 0x44	; 68
    6a28:	38 e3       	ldi	r19, 0x38	; 56
    6a2a:	ba 01       	movw	r22, r20
    6a2c:	a9 01       	movw	r20, r18
    6a2e:	20 e0       	ldi	r18, 0x00	; 0
    6a30:	30 e0       	ldi	r19, 0x00	; 0
    6a32:	0e 94 06 34 	call	0x680c	; 0x680c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>
}
    6a36:	0f 90       	pop	r0
    6a38:	0f 90       	pop	r0
    6a3a:	0f 90       	pop	r0
    6a3c:	0f 90       	pop	r0
    6a3e:	cf 91       	pop	r28
    6a40:	df 91       	pop	r29
    6a42:	08 95       	ret

00006a44 <_ZN7SDClass5mkdirEPc>:
//   */
//  return walkPath(filepath, parentDir, callback_pathExists);
//}


boolean SDClass::mkdir(char *filepath) {
    6a44:	df 93       	push	r29
    6a46:	cf 93       	push	r28
    6a48:	00 d0       	rcall	.+0      	; 0x6a4a <_ZN7SDClass5mkdirEPc+0x6>
    6a4a:	00 d0       	rcall	.+0      	; 0x6a4c <_ZN7SDClass5mkdirEPc+0x8>
    6a4c:	cd b7       	in	r28, 0x3d	; 61
    6a4e:	de b7       	in	r29, 0x3e	; 62
    6a50:	9a 83       	std	Y+2, r25	; 0x02
    6a52:	89 83       	std	Y+1, r24	; 0x01
    6a54:	7c 83       	std	Y+4, r23	; 0x04
    6a56:	6b 83       	std	Y+3, r22	; 0x03
    Makes a single directory or a heirarchy of directories.

    A rough equivalent to `mkdir -p`.
  
   */
  return walkPath(filepath, root, callback_makeDirPath);
    6a58:	89 81       	ldd	r24, Y+1	; 0x01
    6a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    6a5c:	ac 01       	movw	r20, r24
    6a5e:	46 5d       	subi	r20, 0xD6	; 214
    6a60:	5f 4f       	sbci	r21, 0xFF	; 255
    6a62:	8b 81       	ldd	r24, Y+3	; 0x03
    6a64:	9c 81       	ldd	r25, Y+4	; 0x04
    6a66:	22 ee       	ldi	r18, 0xE2	; 226
    6a68:	38 e3       	ldi	r19, 0x38	; 56
    6a6a:	ba 01       	movw	r22, r20
    6a6c:	a9 01       	movw	r20, r18
    6a6e:	20 e0       	ldi	r18, 0x00	; 0
    6a70:	30 e0       	ldi	r19, 0x00	; 0
    6a72:	0e 94 06 34 	call	0x680c	; 0x680c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>
}
    6a76:	0f 90       	pop	r0
    6a78:	0f 90       	pop	r0
    6a7a:	0f 90       	pop	r0
    6a7c:	0f 90       	pop	r0
    6a7e:	cf 91       	pop	r28
    6a80:	df 91       	pop	r29
    6a82:	08 95       	ret

00006a84 <_ZN7SDClass6existsEPc>:
//   */
//  file.close();
//}


boolean SDClass::exists(char *filepath) {
    6a84:	df 93       	push	r29
    6a86:	cf 93       	push	r28
    6a88:	00 d0       	rcall	.+0      	; 0x6a8a <_ZN7SDClass6existsEPc+0x6>
    6a8a:	00 d0       	rcall	.+0      	; 0x6a8c <_ZN7SDClass6existsEPc+0x8>
    6a8c:	cd b7       	in	r28, 0x3d	; 61
    6a8e:	de b7       	in	r29, 0x3e	; 62
    6a90:	9a 83       	std	Y+2, r25	; 0x02
    6a92:	89 83       	std	Y+1, r24	; 0x01
    6a94:	7c 83       	std	Y+4, r23	; 0x04
    6a96:	6b 83       	std	Y+3, r22	; 0x03
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    6a98:	89 81       	ldd	r24, Y+1	; 0x01
    6a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    6a9c:	ac 01       	movw	r20, r24
    6a9e:	46 5d       	subi	r20, 0xD6	; 214
    6aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    6aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    6aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    6aa6:	25 ed       	ldi	r18, 0xD5	; 213
    6aa8:	33 e3       	ldi	r19, 0x33	; 51
    6aaa:	ba 01       	movw	r22, r20
    6aac:	a9 01       	movw	r20, r18
    6aae:	20 e0       	ldi	r18, 0x00	; 0
    6ab0:	30 e0       	ldi	r19, 0x00	; 0
    6ab2:	0e 94 06 34 	call	0x680c	; 0x680c <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>
}
    6ab6:	0f 90       	pop	r0
    6ab8:	0f 90       	pop	r0
    6aba:	0f 90       	pop	r0
    6abc:	0f 90       	pop	r0
    6abe:	cf 91       	pop	r28
    6ac0:	df 91       	pop	r29
    6ac2:	08 95       	ret

00006ac4 <_ZN7SDClass12getParentDirEPKcPi>:
}



// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    6ac4:	df 93       	push	r29
    6ac6:	cf 93       	push	r28
    6ac8:	cd b7       	in	r28, 0x3d	; 61
    6aca:	de b7       	in	r29, 0x3e	; 62
    6acc:	c9 55       	subi	r28, 0x59	; 89
    6ace:	d0 40       	sbci	r29, 0x00	; 0
    6ad0:	0f b6       	in	r0, 0x3f	; 63
    6ad2:	f8 94       	cli
    6ad4:	de bf       	out	0x3e, r29	; 62
    6ad6:	0f be       	out	0x3f, r0	; 63
    6ad8:	cd bf       	out	0x3d, r28	; 61
    6ada:	6a 96       	adiw	r28, 0x1a	; 26
    6adc:	9f af       	std	Y+63, r25	; 0x3f
    6ade:	8e af       	std	Y+62, r24	; 0x3e
    6ae0:	6a 97       	sbiw	r28, 0x1a	; 26
    6ae2:	fe 01       	movw	r30, r28
    6ae4:	ef 5a       	subi	r30, 0xAF	; 175
    6ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ae8:	71 83       	std	Z+1, r23	; 0x01
    6aea:	60 83       	st	Z, r22
    6aec:	fe 01       	movw	r30, r28
    6aee:	ed 5a       	subi	r30, 0xAD	; 173
    6af0:	ff 4f       	sbci	r31, 0xFF	; 255
    6af2:	51 83       	std	Z+1, r21	; 0x01
    6af4:	40 83       	st	Z, r20
    6af6:	fe 01       	movw	r30, r28
    6af8:	eb 5a       	subi	r30, 0xAB	; 171
    6afa:	ff 4f       	sbci	r31, 0xFF	; 255
    6afc:	31 83       	std	Z+1, r19	; 0x01
    6afe:	20 83       	st	Z, r18
  // get parent directory
  SdFile d1 = root; // start with the mostparent, root!
    6b00:	fe 01       	movw	r30, r28
    6b02:	ef 5a       	subi	r30, 0xAF	; 175
    6b04:	ff 4f       	sbci	r31, 0xFF	; 255
    6b06:	80 81       	ld	r24, Z
    6b08:	91 81       	ldd	r25, Z+1	; 0x01
    6b0a:	9c 01       	movw	r18, r24
    6b0c:	26 5d       	subi	r18, 0xD6	; 214
    6b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    6b10:	ce 01       	movw	r24, r28
    6b12:	0a 96       	adiw	r24, 0x0a	; 10
    6b14:	b9 01       	movw	r22, r18
    6b16:	0e 94 03 32 	call	0x6406	; 0x6406 <_ZN6SdFileC1ERKS_>
  SdFile d2;
    6b1a:	ce 01       	movw	r24, r28
    6b1c:	87 96       	adiw	r24, 0x27	; 39
    6b1e:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    6b22:	ce 01       	movw	r24, r28
    6b24:	0a 96       	adiw	r24, 0x0a	; 10
    6b26:	99 87       	std	Y+9, r25	; 0x09
    6b28:	88 87       	std	Y+8, r24	; 0x08
  SdFile *subdir = &d2;
    6b2a:	ce 01       	movw	r24, r28
    6b2c:	87 96       	adiw	r24, 0x27	; 39
    6b2e:	9f 83       	std	Y+7, r25	; 0x07
    6b30:	8e 83       	std	Y+6, r24	; 0x06
  
  const char *origpath = filepath;
    6b32:	fe 01       	movw	r30, r28
    6b34:	ed 5a       	subi	r30, 0xAD	; 173
    6b36:	ff 4f       	sbci	r31, 0xFF	; 255
    6b38:	80 81       	ld	r24, Z
    6b3a:	91 81       	ldd	r25, Z+1	; 0x01
    6b3c:	9d 83       	std	Y+5, r25	; 0x05
    6b3e:	8c 83       	std	Y+4, r24	; 0x04
    6b40:	95 c0       	rjmp	.+298    	; 0x6c6c <_ZN7SDClass12getParentDirEPKcPi+0x1a8>

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    6b42:	fe 01       	movw	r30, r28
    6b44:	ed 5a       	subi	r30, 0xAD	; 173
    6b46:	ff 4f       	sbci	r31, 0xFF	; 255
    6b48:	01 90       	ld	r0, Z+
    6b4a:	f0 81       	ld	r31, Z
    6b4c:	e0 2d       	mov	r30, r0
    6b4e:	80 81       	ld	r24, Z
    6b50:	8f 32       	cpi	r24, 0x2F	; 47
    6b52:	69 f4       	brne	.+26     	; 0x6b6e <_ZN7SDClass12getParentDirEPKcPi+0xaa>
      filepath++;
    6b54:	de 01       	movw	r26, r28
    6b56:	ad 5a       	subi	r26, 0xAD	; 173
    6b58:	bf 4f       	sbci	r27, 0xFF	; 255
    6b5a:	fe 01       	movw	r30, r28
    6b5c:	ed 5a       	subi	r30, 0xAD	; 173
    6b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b60:	80 81       	ld	r24, Z
    6b62:	91 81       	ldd	r25, Z+1	; 0x01
    6b64:	01 96       	adiw	r24, 0x01	; 1
    6b66:	11 96       	adiw	r26, 0x01	; 1
    6b68:	9c 93       	st	X, r25
    6b6a:	8e 93       	st	-X, r24
    6b6c:	7f c0       	rjmp	.+254    	; 0x6c6c <_ZN7SDClass12getParentDirEPKcPi+0x1a8>
      continue;
    }
    
    if (! strchr(filepath, '/')) {
    6b6e:	fe 01       	movw	r30, r28
    6b70:	ed 5a       	subi	r30, 0xAD	; 173
    6b72:	ff 4f       	sbci	r31, 0xFF	; 255
    6b74:	80 81       	ld	r24, Z
    6b76:	91 81       	ldd	r25, Z+1	; 0x01
    6b78:	6f e2       	ldi	r22, 0x2F	; 47
    6b7a:	70 e0       	ldi	r23, 0x00	; 0
    6b7c:	0e 94 26 85 	call	0x10a4c	; 0x10a4c <strchr>
    6b80:	00 97       	sbiw	r24, 0x00	; 0
    6b82:	09 f4       	brne	.+2      	; 0x6b86 <_ZN7SDClass12getParentDirEPKcPi+0xc2>
    6b84:	7f c0       	rjmp	.+254    	; 0x6c84 <_ZN7SDClass12getParentDirEPKcPi+0x1c0>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    6b86:	fe 01       	movw	r30, r28
    6b88:	ed 5a       	subi	r30, 0xAD	; 173
    6b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    6b8c:	80 81       	ld	r24, Z
    6b8e:	91 81       	ldd	r25, Z+1	; 0x01
    6b90:	6f e2       	ldi	r22, 0x2F	; 47
    6b92:	70 e0       	ldi	r23, 0x00	; 0
    6b94:	0e 94 26 85 	call	0x10a4c	; 0x10a4c <strchr>
    6b98:	28 2f       	mov	r18, r24
    6b9a:	fe 01       	movw	r30, r28
    6b9c:	ed 5a       	subi	r30, 0xAD	; 173
    6b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    6ba0:	80 81       	ld	r24, Z
    6ba2:	91 81       	ldd	r25, Z+1	; 0x01
    6ba4:	42 2f       	mov	r20, r18
    6ba6:	48 1b       	sub	r20, r24
    6ba8:	84 2f       	mov	r24, r20
    6baa:	8b 83       	std	Y+3, r24	; 0x03
    if (idx > 12)
    6bac:	8b 81       	ldd	r24, Y+3	; 0x03
    6bae:	8d 30       	cpi	r24, 0x0D	; 13
    6bb0:	10 f0       	brcs	.+4      	; 0x6bb6 <_ZN7SDClass12getParentDirEPKcPi+0xf2>
      idx = 12;    // dont let them specify long names
    6bb2:	8c e0       	ldi	r24, 0x0C	; 12
    6bb4:	8b 83       	std	Y+3, r24	; 0x03
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    6bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    6bb8:	48 2f       	mov	r20, r24
    6bba:	50 e0       	ldi	r21, 0x00	; 0
    6bbc:	ce 01       	movw	r24, r28
    6bbe:	8c 5b       	subi	r24, 0xBC	; 188
    6bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    6bc2:	fe 01       	movw	r30, r28
    6bc4:	ed 5a       	subi	r30, 0xAD	; 173
    6bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    6bc8:	20 81       	ld	r18, Z
    6bca:	31 81       	ldd	r19, Z+1	; 0x01
    6bcc:	b9 01       	movw	r22, r18
    6bce:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <strncpy>
    subdirname[idx] = 0;
    6bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    6bd4:	28 2f       	mov	r18, r24
    6bd6:	30 e0       	ldi	r19, 0x00	; 0
    6bd8:	ce 01       	movw	r24, r28
    6bda:	8c 5b       	subi	r24, 0xBC	; 188
    6bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    6bde:	fc 01       	movw	r30, r24
    6be0:	e2 0f       	add	r30, r18
    6be2:	f3 1f       	adc	r31, r19
    6be4:	10 82       	st	Z, r1

    // close the subdir (we reuse them) if open
    subdir->close();
    6be6:	8e 81       	ldd	r24, Y+6	; 0x06
    6be8:	9f 81       	ldd	r25, Y+7	; 0x07
    6bea:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN6SdFile5closeEv>
    if (! subdir->open(parent, subdirname, O_READ)) {
    6bee:	8e 81       	ldd	r24, Y+6	; 0x06
    6bf0:	9f 81       	ldd	r25, Y+7	; 0x07
    6bf2:	28 85       	ldd	r18, Y+8	; 0x08
    6bf4:	39 85       	ldd	r19, Y+9	; 0x09
    6bf6:	ae 01       	movw	r20, r28
    6bf8:	4c 5b       	subi	r20, 0xBC	; 188
    6bfa:	5f 4f       	sbci	r21, 0xFF	; 255
    6bfc:	b9 01       	movw	r22, r18
    6bfe:	21 e0       	ldi	r18, 0x01	; 1
    6c00:	0e 94 6e 20 	call	0x40dc	; 0x40dc <_ZN6SdFile4openEPS_PKch>
    6c04:	68 96       	adiw	r28, 0x18	; 24
    6c06:	1f ae       	std	Y+63, r1	; 0x3f
    6c08:	68 97       	sbiw	r28, 0x18	; 24
    6c0a:	88 23       	and	r24, r24
    6c0c:	21 f4       	brne	.+8      	; 0x6c16 <_ZN7SDClass12getParentDirEPKcPi+0x152>
    6c0e:	51 e0       	ldi	r21, 0x01	; 1
    6c10:	68 96       	adiw	r28, 0x18	; 24
    6c12:	5f af       	std	Y+63, r21	; 0x3f
    6c14:	68 97       	sbiw	r28, 0x18	; 24
    6c16:	68 96       	adiw	r28, 0x18	; 24
    6c18:	8f ad       	ldd	r24, Y+63	; 0x3f
    6c1a:	68 97       	sbiw	r28, 0x18	; 24
    6c1c:	88 23       	and	r24, r24
    6c1e:	39 f0       	breq	.+14     	; 0x6c2e <_ZN7SDClass12getParentDirEPKcPi+0x16a>
      // failed to open one of the subdirectories
      return SdFile();
    6c20:	6a 96       	adiw	r28, 0x1a	; 26
    6c22:	8e ad       	ldd	r24, Y+62	; 0x3e
    6c24:	9f ad       	ldd	r25, Y+63	; 0x3f
    6c26:	6a 97       	sbiw	r28, 0x1a	; 26
    6c28:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>
    6c2c:	47 c0       	rjmp	.+142    	; 0x6cbc <_ZN7SDClass12getParentDirEPKcPi+0x1f8>
    }
    // move forward to the next subdirectory
    filepath += idx;
    6c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    6c30:	28 2f       	mov	r18, r24
    6c32:	30 e0       	ldi	r19, 0x00	; 0
    6c34:	de 01       	movw	r26, r28
    6c36:	ad 5a       	subi	r26, 0xAD	; 173
    6c38:	bf 4f       	sbci	r27, 0xFF	; 255
    6c3a:	fe 01       	movw	r30, r28
    6c3c:	ed 5a       	subi	r30, 0xAD	; 173
    6c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c40:	80 81       	ld	r24, Z
    6c42:	91 81       	ldd	r25, Z+1	; 0x01
    6c44:	82 0f       	add	r24, r18
    6c46:	93 1f       	adc	r25, r19
    6c48:	8d 93       	st	X+, r24
    6c4a:	9c 93       	st	X, r25

    // we reuse the objects, close it.
    parent->close();
    6c4c:	88 85       	ldd	r24, Y+8	; 0x08
    6c4e:	99 85       	ldd	r25, Y+9	; 0x09
    6c50:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN6SdFile5closeEv>

    // swap the pointers
    SdFile *t = parent;
    6c54:	88 85       	ldd	r24, Y+8	; 0x08
    6c56:	99 85       	ldd	r25, Y+9	; 0x09
    6c58:	9a 83       	std	Y+2, r25	; 0x02
    6c5a:	89 83       	std	Y+1, r24	; 0x01
    parent = subdir;
    6c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    6c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    6c60:	99 87       	std	Y+9, r25	; 0x09
    6c62:	88 87       	std	Y+8, r24	; 0x08
    subdir = t;
    6c64:	89 81       	ldd	r24, Y+1	; 0x01
    6c66:	9a 81       	ldd	r25, Y+2	; 0x02
    6c68:	9f 83       	std	Y+7, r25	; 0x07
    6c6a:	8e 83       	std	Y+6, r24	; 0x06
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    6c6c:	fe 01       	movw	r30, r28
    6c6e:	ed 5a       	subi	r30, 0xAD	; 173
    6c70:	ff 4f       	sbci	r31, 0xFF	; 255
    6c72:	80 81       	ld	r24, Z
    6c74:	91 81       	ldd	r25, Z+1	; 0x01
    6c76:	6f e2       	ldi	r22, 0x2F	; 47
    6c78:	70 e0       	ldi	r23, 0x00	; 0
    6c7a:	0e 94 26 85 	call	0x10a4c	; 0x10a4c <strchr>
    6c7e:	00 97       	sbiw	r24, 0x00	; 0
    6c80:	09 f0       	breq	.+2      	; 0x6c84 <_ZN7SDClass12getParentDirEPKcPi+0x1c0>
    6c82:	5f cf       	rjmp	.-322    	; 0x6b42 <_ZN7SDClass12getParentDirEPKcPi+0x7e>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    6c84:	fe 01       	movw	r30, r28
    6c86:	ed 5a       	subi	r30, 0xAD	; 173
    6c88:	ff 4f       	sbci	r31, 0xFF	; 255
    6c8a:	20 81       	ld	r18, Z
    6c8c:	31 81       	ldd	r19, Z+1	; 0x01
    6c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    6c90:	9d 81       	ldd	r25, Y+5	; 0x05
    6c92:	a9 01       	movw	r20, r18
    6c94:	48 1b       	sub	r20, r24
    6c96:	59 0b       	sbc	r21, r25
    6c98:	ca 01       	movw	r24, r20
    6c9a:	fe 01       	movw	r30, r28
    6c9c:	eb 5a       	subi	r30, 0xAB	; 171
    6c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    6ca0:	01 90       	ld	r0, Z+
    6ca2:	f0 81       	ld	r31, Z
    6ca4:	e0 2d       	mov	r30, r0
    6ca6:	91 83       	std	Z+1, r25	; 0x01
    6ca8:	80 83       	st	Z, r24
  // parent is now the parent diretory of the file!
  return *parent;
    6caa:	6a 96       	adiw	r28, 0x1a	; 26
    6cac:	8e ad       	ldd	r24, Y+62	; 0x3e
    6cae:	9f ad       	ldd	r25, Y+63	; 0x3f
    6cb0:	6a 97       	sbiw	r28, 0x1a	; 26
    6cb2:	28 85       	ldd	r18, Y+8	; 0x08
    6cb4:	39 85       	ldd	r19, Y+9	; 0x09
    6cb6:	b9 01       	movw	r22, r18
    6cb8:	0e 94 03 32 	call	0x6406	; 0x6406 <_ZN6SdFileC1ERKS_>
}
    6cbc:	6a 96       	adiw	r28, 0x1a	; 26
    6cbe:	8e ad       	ldd	r24, Y+62	; 0x3e
    6cc0:	9f ad       	ldd	r25, Y+63	; 0x3f
    6cc2:	6a 97       	sbiw	r28, 0x1a	; 26
    6cc4:	6a 96       	adiw	r28, 0x1a	; 26
    6cc6:	8e ad       	ldd	r24, Y+62	; 0x3e
    6cc8:	9f ad       	ldd	r25, Y+63	; 0x3f
    6cca:	6a 97       	sbiw	r28, 0x1a	; 26
    6ccc:	c7 5a       	subi	r28, 0xA7	; 167
    6cce:	df 4f       	sbci	r29, 0xFF	; 255
    6cd0:	0f b6       	in	r0, 0x3f	; 63
    6cd2:	f8 94       	cli
    6cd4:	de bf       	out	0x3e, r29	; 62
    6cd6:	0f be       	out	0x3f, r0	; 63
    6cd8:	cd bf       	out	0x3d, r28	; 61
    6cda:	cf 91       	pop	r28
    6cdc:	df 91       	pop	r29
    6cde:	08 95       	ret

00006ce0 <_ZN7SDClass4openEPKch>:


File SDClass::open(const char *filepath, uint8_t mode) {
    6ce0:	0f 93       	push	r16
    6ce2:	1f 93       	push	r17
    6ce4:	df 93       	push	r29
    6ce6:	cf 93       	push	r28
    6ce8:	cd b7       	in	r28, 0x3d	; 61
    6cea:	de b7       	in	r29, 0x3e	; 62
    6cec:	c1 58       	subi	r28, 0x81	; 129
    6cee:	d0 40       	sbci	r29, 0x00	; 0
    6cf0:	0f b6       	in	r0, 0x3f	; 63
    6cf2:	f8 94       	cli
    6cf4:	de bf       	out	0x3e, r29	; 62
    6cf6:	0f be       	out	0x3f, r0	; 63
    6cf8:	cd bf       	out	0x3d, r28	; 61
    6cfa:	c1 58       	subi	r28, 0x81	; 129
    6cfc:	df 4f       	sbci	r29, 0xFF	; 255
    6cfe:	99 83       	std	Y+1, r25	; 0x01
    6d00:	88 83       	st	Y, r24
    6d02:	cf 57       	subi	r28, 0x7F	; 127
    6d04:	d0 40       	sbci	r29, 0x00	; 0
    6d06:	fe 01       	movw	r30, r28
    6d08:	e9 58       	subi	r30, 0x89	; 137
    6d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d0c:	71 83       	std	Z+1, r23	; 0x01
    6d0e:	60 83       	st	Z, r22
    6d10:	fe 01       	movw	r30, r28
    6d12:	e7 58       	subi	r30, 0x87	; 135
    6d14:	ff 4f       	sbci	r31, 0xFF	; 255
    6d16:	51 83       	std	Z+1, r21	; 0x01
    6d18:	40 83       	st	Z, r20
    6d1a:	fe 01       	movw	r30, r28
    6d1c:	e5 58       	subi	r30, 0x85	; 133
    6d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    6d20:	20 83       	st	Z, r18
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    6d22:	ce 01       	movw	r24, r28
    6d24:	cd 96       	adiw	r24, 0x3d	; 61
    6d26:	fe 01       	movw	r30, r28
    6d28:	e9 58       	subi	r30, 0x89	; 137
    6d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    6d2c:	40 81       	ld	r20, Z
    6d2e:	51 81       	ldd	r21, Z+1	; 0x01
    6d30:	fe 01       	movw	r30, r28
    6d32:	e7 58       	subi	r30, 0x87	; 135
    6d34:	ff 4f       	sbci	r31, 0xFF	; 255
    6d36:	20 81       	ld	r18, Z
    6d38:	31 81       	ldd	r19, Z+1	; 0x01
    6d3a:	fe 01       	movw	r30, r28
    6d3c:	fb 96       	adiw	r30, 0x3b	; 59
    6d3e:	ba 01       	movw	r22, r20
    6d40:	a9 01       	movw	r20, r18
    6d42:	9f 01       	movw	r18, r30
    6d44:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <_ZN7SDClass12getParentDirEPKcPi>
  // no more subdirs!

  filepath += pathidx;
    6d48:	8b ad       	ldd	r24, Y+59	; 0x3b
    6d4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    6d4c:	9c 01       	movw	r18, r24
    6d4e:	de 01       	movw	r26, r28
    6d50:	a7 58       	subi	r26, 0x87	; 135
    6d52:	bf 4f       	sbci	r27, 0xFF	; 255
    6d54:	fe 01       	movw	r30, r28
    6d56:	e7 58       	subi	r30, 0x87	; 135
    6d58:	ff 4f       	sbci	r31, 0xFF	; 255
    6d5a:	80 81       	ld	r24, Z
    6d5c:	91 81       	ldd	r25, Z+1	; 0x01
    6d5e:	82 0f       	add	r24, r18
    6d60:	93 1f       	adc	r25, r19
    6d62:	11 96       	adiw	r26, 0x01	; 1
    6d64:	9c 93       	st	X, r25
    6d66:	8e 93       	st	-X, r24

  if (! filepath[0]) {
    6d68:	fe 01       	movw	r30, r28
    6d6a:	e7 58       	subi	r30, 0x87	; 135
    6d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d6e:	01 90       	ld	r0, Z+
    6d70:	f0 81       	ld	r31, Z
    6d72:	e0 2d       	mov	r30, r0
    6d74:	80 81       	ld	r24, Z
    6d76:	88 23       	and	r24, r24
    6d78:	c1 f4       	brne	.+48     	; 0x6daa <_ZN7SDClass4openEPKch+0xca>
    // it was the directory itself!
    return File(parentdir, "/");
    6d7a:	c1 58       	subi	r28, 0x81	; 129
    6d7c:	df 4f       	sbci	r29, 0xFF	; 255
    6d7e:	08 81       	ld	r16, Y
    6d80:	19 81       	ldd	r17, Y+1	; 0x01
    6d82:	cf 57       	subi	r28, 0x7F	; 127
    6d84:	d0 40       	sbci	r29, 0x00	; 0
    6d86:	ce 01       	movw	r24, r28
    6d88:	4e 96       	adiw	r24, 0x1e	; 30
    6d8a:	9e 01       	movw	r18, r28
    6d8c:	23 5c       	subi	r18, 0xC3	; 195
    6d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    6d90:	b9 01       	movw	r22, r18
    6d92:	0e 94 03 32 	call	0x6406	; 0x6406 <_ZN6SdFileC1ERKS_>
    6d96:	9e 01       	movw	r18, r28
    6d98:	22 5e       	subi	r18, 0xE2	; 226
    6d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d9c:	4c e8       	ldi	r20, 0x8C	; 140
    6d9e:	50 e0       	ldi	r21, 0x00	; 0
    6da0:	c8 01       	movw	r24, r16
    6da2:	b9 01       	movw	r22, r18
    6da4:	0e 94 76 2f 	call	0x5eec	; 0x5eec <_ZN4FileC1E6SdFilePKc>
    6da8:	c6 c0       	rjmp	.+396    	; 0x6f36 <_ZN7SDClass4openEPKch+0x256>
  }

  // Open the file itself
  SdFile file;
    6daa:	ce 01       	movw	r24, r28
    6dac:	86 5a       	subi	r24, 0xA6	; 166
    6dae:	9f 4f       	sbci	r25, 0xFF	; 255
    6db0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>

  // failed to open a subdir!
  if (!parentdir.isOpen())
    6db4:	ce 01       	movw	r24, r28
    6db6:	cd 96       	adiw	r24, 0x3d	; 61
    6db8:	0e 94 03 0c 	call	0x1806	; 0x1806 <_ZNK6SdFile6isOpenEv>
    6dbc:	ef 96       	adiw	r28, 0x3f	; 63
    6dbe:	1f ae       	std	Y+63, r1	; 0x3f
    6dc0:	ef 97       	sbiw	r28, 0x3f	; 63
    6dc2:	88 23       	and	r24, r24
    6dc4:	21 f4       	brne	.+8      	; 0x6dce <_ZN7SDClass4openEPKch+0xee>
    6dc6:	81 e0       	ldi	r24, 0x01	; 1
    6dc8:	ef 96       	adiw	r28, 0x3f	; 63
    6dca:	8f af       	std	Y+63, r24	; 0x3f
    6dcc:	ef 97       	sbiw	r28, 0x3f	; 63
    6dce:	ef 96       	adiw	r28, 0x3f	; 63
    6dd0:	8f ad       	ldd	r24, Y+63	; 0x3f
    6dd2:	ef 97       	sbiw	r28, 0x3f	; 63
    6dd4:	88 23       	and	r24, r24
    6dd6:	49 f0       	breq	.+18     	; 0x6dea <_ZN7SDClass4openEPKch+0x10a>
    return File();
    6dd8:	c1 58       	subi	r28, 0x81	; 129
    6dda:	df 4f       	sbci	r29, 0xFF	; 255
    6ddc:	88 81       	ld	r24, Y
    6dde:	99 81       	ldd	r25, Y+1	; 0x01
    6de0:	cf 57       	subi	r28, 0x7F	; 127
    6de2:	d0 40       	sbci	r29, 0x00	; 0
    6de4:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <_ZN4FileC1Ev>
    6de8:	a6 c0       	rjmp	.+332    	; 0x6f36 <_ZN7SDClass4openEPKch+0x256>

  // there is a special case for the Root directory since its a static dir
  if (parentdir.isRoot()) {
    6dea:	ce 01       	movw	r24, r28
    6dec:	cd 96       	adiw	r24, 0x3d	; 61
    6dee:	0e 94 32 0c 	call	0x1864	; 0x1864 <_ZNK6SdFile6isRootEv>
    6df2:	cf 57       	subi	r28, 0x7F	; 127
    6df4:	df 4f       	sbci	r29, 0xFF	; 255
    6df6:	88 83       	st	Y, r24
    6df8:	c1 58       	subi	r28, 0x81	; 129
    6dfa:	d0 40       	sbci	r29, 0x00	; 0
    6dfc:	cf 57       	subi	r28, 0x7F	; 127
    6dfe:	df 4f       	sbci	r29, 0xFF	; 255
    6e00:	88 81       	ld	r24, Y
    6e02:	c1 58       	subi	r28, 0x81	; 129
    6e04:	d0 40       	sbci	r29, 0x00	; 0
    6e06:	88 23       	and	r24, r24
    6e08:	31 f0       	breq	.+12     	; 0x6e16 <_ZN7SDClass4openEPKch+0x136>
    6e0a:	81 e0       	ldi	r24, 0x01	; 1
    6e0c:	cf 57       	subi	r28, 0x7F	; 127
    6e0e:	df 4f       	sbci	r29, 0xFF	; 255
    6e10:	88 83       	st	Y, r24
    6e12:	c1 58       	subi	r28, 0x81	; 129
    6e14:	d0 40       	sbci	r29, 0x00	; 0
    6e16:	cf 57       	subi	r28, 0x7F	; 127
    6e18:	df 4f       	sbci	r29, 0xFF	; 255
    6e1a:	88 81       	ld	r24, Y
    6e1c:	c1 58       	subi	r28, 0x81	; 129
    6e1e:	d0 40       	sbci	r29, 0x00	; 0
    6e20:	88 23       	and	r24, r24
    6e22:	49 f1       	breq	.+82     	; 0x6e76 <_ZN7SDClass4openEPKch+0x196>
    if ( ! file.open(SD.root, filepath, mode)) {
    6e24:	ce 01       	movw	r24, r28
    6e26:	86 5a       	subi	r24, 0xA6	; 166
    6e28:	9f 4f       	sbci	r25, 0xFF	; 255
    6e2a:	45 e7       	ldi	r20, 0x75	; 117
    6e2c:	55 e0       	ldi	r21, 0x05	; 5
    6e2e:	fe 01       	movw	r30, r28
    6e30:	e7 58       	subi	r30, 0x87	; 135
    6e32:	ff 4f       	sbci	r31, 0xFF	; 255
    6e34:	20 81       	ld	r18, Z
    6e36:	31 81       	ldd	r19, Z+1	; 0x01
    6e38:	fe 01       	movw	r30, r28
    6e3a:	e5 58       	subi	r30, 0x85	; 133
    6e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e3e:	ba 01       	movw	r22, r20
    6e40:	a9 01       	movw	r20, r18
    6e42:	20 81       	ld	r18, Z
    6e44:	0e 94 df 32 	call	0x65be	; 0x65be <_ZN6SdFile4openERS_PKch>
    6e48:	ee 96       	adiw	r28, 0x3e	; 62
    6e4a:	1f ae       	std	Y+63, r1	; 0x3f
    6e4c:	ee 97       	sbiw	r28, 0x3e	; 62
    6e4e:	88 23       	and	r24, r24
    6e50:	21 f4       	brne	.+8      	; 0x6e5a <_ZN7SDClass4openEPKch+0x17a>
    6e52:	81 e0       	ldi	r24, 0x01	; 1
    6e54:	ee 96       	adiw	r28, 0x3e	; 62
    6e56:	8f af       	std	Y+63, r24	; 0x3f
    6e58:	ee 97       	sbiw	r28, 0x3e	; 62
    6e5a:	ee 96       	adiw	r28, 0x3e	; 62
    6e5c:	8f ad       	ldd	r24, Y+63	; 0x3f
    6e5e:	ee 97       	sbiw	r28, 0x3e	; 62
    6e60:	88 23       	and	r24, r24
    6e62:	b9 f1       	breq	.+110    	; 0x6ed2 <_ZN7SDClass4openEPKch+0x1f2>
      // failed to open the file :(
      return File();
    6e64:	c1 58       	subi	r28, 0x81	; 129
    6e66:	df 4f       	sbci	r29, 0xFF	; 255
    6e68:	88 81       	ld	r24, Y
    6e6a:	99 81       	ldd	r25, Y+1	; 0x01
    6e6c:	cf 57       	subi	r28, 0x7F	; 127
    6e6e:	d0 40       	sbci	r29, 0x00	; 0
    6e70:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <_ZN4FileC1Ev>
    6e74:	60 c0       	rjmp	.+192    	; 0x6f36 <_ZN7SDClass4openEPKch+0x256>
    }
    // dont close the root!
  } else {
    if ( ! file.open(parentdir, filepath, mode)) {
    6e76:	ce 01       	movw	r24, r28
    6e78:	86 5a       	subi	r24, 0xA6	; 166
    6e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    6e7c:	ae 01       	movw	r20, r28
    6e7e:	43 5c       	subi	r20, 0xC3	; 195
    6e80:	5f 4f       	sbci	r21, 0xFF	; 255
    6e82:	fe 01       	movw	r30, r28
    6e84:	e7 58       	subi	r30, 0x87	; 135
    6e86:	ff 4f       	sbci	r31, 0xFF	; 255
    6e88:	20 81       	ld	r18, Z
    6e8a:	31 81       	ldd	r19, Z+1	; 0x01
    6e8c:	fe 01       	movw	r30, r28
    6e8e:	e5 58       	subi	r30, 0x85	; 133
    6e90:	ff 4f       	sbci	r31, 0xFF	; 255
    6e92:	ba 01       	movw	r22, r20
    6e94:	a9 01       	movw	r20, r18
    6e96:	20 81       	ld	r18, Z
    6e98:	0e 94 df 32 	call	0x65be	; 0x65be <_ZN6SdFile4openERS_PKch>
    6e9c:	ed 96       	adiw	r28, 0x3d	; 61
    6e9e:	1f ae       	std	Y+63, r1	; 0x3f
    6ea0:	ed 97       	sbiw	r28, 0x3d	; 61
    6ea2:	88 23       	and	r24, r24
    6ea4:	21 f4       	brne	.+8      	; 0x6eae <_ZN7SDClass4openEPKch+0x1ce>
    6ea6:	81 e0       	ldi	r24, 0x01	; 1
    6ea8:	ed 96       	adiw	r28, 0x3d	; 61
    6eaa:	8f af       	std	Y+63, r24	; 0x3f
    6eac:	ed 97       	sbiw	r28, 0x3d	; 61
    6eae:	ed 96       	adiw	r28, 0x3d	; 61
    6eb0:	8f ad       	ldd	r24, Y+63	; 0x3f
    6eb2:	ed 97       	sbiw	r28, 0x3d	; 61
    6eb4:	88 23       	and	r24, r24
    6eb6:	49 f0       	breq	.+18     	; 0x6eca <_ZN7SDClass4openEPKch+0x1ea>
      return File();
    6eb8:	c1 58       	subi	r28, 0x81	; 129
    6eba:	df 4f       	sbci	r29, 0xFF	; 255
    6ebc:	88 81       	ld	r24, Y
    6ebe:	99 81       	ldd	r25, Y+1	; 0x01
    6ec0:	cf 57       	subi	r28, 0x7F	; 127
    6ec2:	d0 40       	sbci	r29, 0x00	; 0
    6ec4:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <_ZN4FileC1Ev>
    6ec8:	36 c0       	rjmp	.+108    	; 0x6f36 <_ZN7SDClass4openEPKch+0x256>
    }
    // close the parent
    parentdir.close();
    6eca:	ce 01       	movw	r24, r28
    6ecc:	cd 96       	adiw	r24, 0x3d	; 61
    6ece:	0e 94 93 11 	call	0x2326	; 0x2326 <_ZN6SdFile5closeEv>
  }

  if (mode & (O_APPEND | O_WRITE)) 
    6ed2:	fe 01       	movw	r30, r28
    6ed4:	e5 58       	subi	r30, 0x85	; 133
    6ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ed8:	80 81       	ld	r24, Z
    6eda:	88 2f       	mov	r24, r24
    6edc:	90 e0       	ldi	r25, 0x00	; 0
    6ede:	86 70       	andi	r24, 0x06	; 6
    6ee0:	90 70       	andi	r25, 0x00	; 0
    6ee2:	00 97       	sbiw	r24, 0x00	; 0
    6ee4:	71 f0       	breq	.+28     	; 0x6f02 <_ZN7SDClass4openEPKch+0x222>
    file.seekSet(file.fileSize());
    6ee6:	ce 01       	movw	r24, r28
    6ee8:	86 5a       	subi	r24, 0xA6	; 166
    6eea:	9f 4f       	sbci	r25, 0xFF	; 255
    6eec:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <_ZNK6SdFile8fileSizeEv>
    6ef0:	9b 01       	movw	r18, r22
    6ef2:	ac 01       	movw	r20, r24
    6ef4:	ce 01       	movw	r24, r28
    6ef6:	86 5a       	subi	r24, 0xA6	; 166
    6ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    6efa:	ba 01       	movw	r22, r20
    6efc:	a9 01       	movw	r20, r18
    6efe:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <_ZN6SdFile7seekSetEm>
  return File(file, filepath);
    6f02:	c1 58       	subi	r28, 0x81	; 129
    6f04:	df 4f       	sbci	r29, 0xFF	; 255
    6f06:	08 81       	ld	r16, Y
    6f08:	19 81       	ldd	r17, Y+1	; 0x01
    6f0a:	cf 57       	subi	r28, 0x7F	; 127
    6f0c:	d0 40       	sbci	r29, 0x00	; 0
    6f0e:	9e 01       	movw	r18, r28
    6f10:	26 5a       	subi	r18, 0xA6	; 166
    6f12:	3f 4f       	sbci	r19, 0xFF	; 255
    6f14:	ce 01       	movw	r24, r28
    6f16:	01 96       	adiw	r24, 0x01	; 1
    6f18:	b9 01       	movw	r22, r18
    6f1a:	0e 94 03 32 	call	0x6406	; 0x6406 <_ZN6SdFileC1ERKS_>
    6f1e:	fe 01       	movw	r30, r28
    6f20:	e7 58       	subi	r30, 0x87	; 135
    6f22:	ff 4f       	sbci	r31, 0xFF	; 255
    6f24:	40 81       	ld	r20, Z
    6f26:	51 81       	ldd	r21, Z+1	; 0x01
    6f28:	c8 01       	movw	r24, r16
    6f2a:	9e 01       	movw	r18, r28
    6f2c:	2f 5f       	subi	r18, 0xFF	; 255
    6f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    6f30:	b9 01       	movw	r22, r18
    6f32:	0e 94 76 2f 	call	0x5eec	; 0x5eec <_ZN4FileC1E6SdFilePKc>
}
    6f36:	c1 58       	subi	r28, 0x81	; 129
    6f38:	df 4f       	sbci	r29, 0xFF	; 255
    6f3a:	88 81       	ld	r24, Y
    6f3c:	99 81       	ldd	r25, Y+1	; 0x01
    6f3e:	cf 57       	subi	r28, 0x7F	; 127
    6f40:	d0 40       	sbci	r29, 0x00	; 0
    6f42:	c1 58       	subi	r28, 0x81	; 129
    6f44:	df 4f       	sbci	r29, 0xFF	; 255
    6f46:	88 81       	ld	r24, Y
    6f48:	99 81       	ldd	r25, Y+1	; 0x01
    6f4a:	cf 57       	subi	r28, 0x7F	; 127
    6f4c:	d0 40       	sbci	r29, 0x00	; 0
    6f4e:	cf 57       	subi	r28, 0x7F	; 127
    6f50:	df 4f       	sbci	r29, 0xFF	; 255
    6f52:	0f b6       	in	r0, 0x3f	; 63
    6f54:	f8 94       	cli
    6f56:	de bf       	out	0x3e, r29	; 62
    6f58:	0f be       	out	0x3f, r0	; 63
    6f5a:	cd bf       	out	0x3d, r28	; 61
    6f5c:	cf 91       	pop	r28
    6f5e:	df 91       	pop	r29
    6f60:	1f 91       	pop	r17
    6f62:	0f 91       	pop	r16
    6f64:	08 95       	ret

00006f66 <_ZN8SdVolume4initEP7Sd2Card>:
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    6f66:	df 93       	push	r29
    6f68:	cf 93       	push	r28
    6f6a:	00 d0       	rcall	.+0      	; 0x6f6c <_ZN8SdVolume4initEP7Sd2Card+0x6>
    6f6c:	00 d0       	rcall	.+0      	; 0x6f6e <_ZN8SdVolume4initEP7Sd2Card+0x8>
    6f6e:	0f 92       	push	r0
    6f70:	cd b7       	in	r28, 0x3d	; 61
    6f72:	de b7       	in	r29, 0x3e	; 62
    6f74:	9a 83       	std	Y+2, r25	; 0x02
    6f76:	89 83       	std	Y+1, r24	; 0x01
    6f78:	7c 83       	std	Y+4, r23	; 0x04
    6f7a:	6b 83       	std	Y+3, r22	; 0x03
    6f7c:	89 81       	ldd	r24, Y+1	; 0x01
    6f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    6f80:	2b 81       	ldd	r18, Y+3	; 0x03
    6f82:	3c 81       	ldd	r19, Y+4	; 0x04
    6f84:	b9 01       	movw	r22, r18
    6f86:	41 e0       	ldi	r20, 0x01	; 1
    6f88:	0e 94 e6 24 	call	0x49cc	; 0x49cc <_ZN8SdVolume4initEP7Sd2Cardh>
    6f8c:	88 23       	and	r24, r24
    6f8e:	51 f4       	brne	.+20     	; 0x6fa4 <_ZN8SdVolume4initEP7Sd2Card+0x3e>
    6f90:	89 81       	ldd	r24, Y+1	; 0x01
    6f92:	9a 81       	ldd	r25, Y+2	; 0x02
    6f94:	2b 81       	ldd	r18, Y+3	; 0x03
    6f96:	3c 81       	ldd	r19, Y+4	; 0x04
    6f98:	b9 01       	movw	r22, r18
    6f9a:	40 e0       	ldi	r20, 0x00	; 0
    6f9c:	0e 94 e6 24 	call	0x49cc	; 0x49cc <_ZN8SdVolume4initEP7Sd2Cardh>
    6fa0:	8d 83       	std	Y+5, r24	; 0x05
    6fa2:	02 c0       	rjmp	.+4      	; 0x6fa8 <_ZN8SdVolume4initEP7Sd2Card+0x42>
    6fa4:	81 e0       	ldi	r24, 0x01	; 1
    6fa6:	8d 83       	std	Y+5, r24	; 0x05
    6fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    6faa:	0f 90       	pop	r0
    6fac:	0f 90       	pop	r0
    6fae:	0f 90       	pop	r0
    6fb0:	0f 90       	pop	r0
    6fb2:	0f 90       	pop	r0
    6fb4:	cf 91       	pop	r28
    6fb6:	df 91       	pop	r29
    6fb8:	08 95       	ret

00006fba <_ZN8SdVolume4initER7Sd2Card>:
  static Sd2Card* sdCard(void) {return sdCard_;}
//------------------------------------------------------------------------------
#if ALLOW_DEPRECATED_FUNCTIONS
  // Deprecated functions  - suppress cpplint warnings with NOLINT comment
  /** \deprecated Use: uint8_t SdVolume::init(Sd2Card* dev); */
  uint8_t init(Sd2Card& dev) {return init(&dev);}  // NOLINT
    6fba:	df 93       	push	r29
    6fbc:	cf 93       	push	r28
    6fbe:	00 d0       	rcall	.+0      	; 0x6fc0 <_ZN8SdVolume4initER7Sd2Card+0x6>
    6fc0:	00 d0       	rcall	.+0      	; 0x6fc2 <_ZN8SdVolume4initER7Sd2Card+0x8>
    6fc2:	cd b7       	in	r28, 0x3d	; 61
    6fc4:	de b7       	in	r29, 0x3e	; 62
    6fc6:	9a 83       	std	Y+2, r25	; 0x02
    6fc8:	89 83       	std	Y+1, r24	; 0x01
    6fca:	7c 83       	std	Y+4, r23	; 0x04
    6fcc:	6b 83       	std	Y+3, r22	; 0x03
    6fce:	89 81       	ldd	r24, Y+1	; 0x01
    6fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    6fd2:	2b 81       	ldd	r18, Y+3	; 0x03
    6fd4:	3c 81       	ldd	r19, Y+4	; 0x04
    6fd6:	b9 01       	movw	r22, r18
    6fd8:	0e 94 b3 37 	call	0x6f66	; 0x6f66 <_ZN8SdVolume4initEP7Sd2Card>
    6fdc:	0f 90       	pop	r0
    6fde:	0f 90       	pop	r0
    6fe0:	0f 90       	pop	r0
    6fe2:	0f 90       	pop	r0
    6fe4:	cf 91       	pop	r28
    6fe6:	df 91       	pop	r29
    6fe8:	08 95       	ret

00006fea <_ZN6SdFile8openRootER8SdVolume>:
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    6fea:	df 93       	push	r29
    6fec:	cf 93       	push	r28
    6fee:	00 d0       	rcall	.+0      	; 0x6ff0 <_ZN6SdFile8openRootER8SdVolume+0x6>
    6ff0:	00 d0       	rcall	.+0      	; 0x6ff2 <_ZN6SdFile8openRootER8SdVolume+0x8>
    6ff2:	cd b7       	in	r28, 0x3d	; 61
    6ff4:	de b7       	in	r29, 0x3e	; 62
    6ff6:	9a 83       	std	Y+2, r25	; 0x02
    6ff8:	89 83       	std	Y+1, r24	; 0x01
    6ffa:	7c 83       	std	Y+4, r23	; 0x04
    6ffc:	6b 83       	std	Y+3, r22	; 0x03
    6ffe:	89 81       	ldd	r24, Y+1	; 0x01
    7000:	9a 81       	ldd	r25, Y+2	; 0x02
    7002:	2b 81       	ldd	r18, Y+3	; 0x03
    7004:	3c 81       	ldd	r19, Y+4	; 0x04
    7006:	b9 01       	movw	r22, r18
    7008:	0e 94 af 18 	call	0x315e	; 0x315e <_ZN6SdFile8openRootEP8SdVolume>
    700c:	0f 90       	pop	r0
    700e:	0f 90       	pop	r0
    7010:	0f 90       	pop	r0
    7012:	0f 90       	pop	r0
    7014:	cf 91       	pop	r28
    7016:	df 91       	pop	r29
    7018:	08 95       	ret

0000701a <_ZN7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    701a:	df 93       	push	r29
    701c:	cf 93       	push	r28
    701e:	00 d0       	rcall	.+0      	; 0x7020 <_ZN7SDClass5beginEh+0x6>
    7020:	00 d0       	rcall	.+0      	; 0x7022 <_ZN7SDClass5beginEh+0x8>
    7022:	cd b7       	in	r28, 0x3d	; 61
    7024:	de b7       	in	r29, 0x3e	; 62
    7026:	9a 83       	std	Y+2, r25	; 0x02
    7028:	89 83       	std	Y+1, r24	; 0x01
    702a:	6b 83       	std	Y+3, r22	; 0x03
    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
         root.openRoot(volume);
    702c:	89 81       	ldd	r24, Y+1	; 0x01
    702e:	9a 81       	ldd	r25, Y+2	; 0x02
    7030:	61 e0       	ldi	r22, 0x01	; 1
    7032:	4b 81       	ldd	r20, Y+3	; 0x03
    7034:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN7Sd2Card4initEhh>
    7038:	88 23       	and	r24, r24
    703a:	e9 f0       	breq	.+58     	; 0x7076 <_ZN7SDClass5beginEh+0x5c>
    703c:	89 81       	ldd	r24, Y+1	; 0x01
    703e:	9a 81       	ldd	r25, Y+2	; 0x02
    7040:	0c 96       	adiw	r24, 0x0c	; 12
    7042:	29 81       	ldd	r18, Y+1	; 0x01
    7044:	3a 81       	ldd	r19, Y+2	; 0x02
    7046:	b9 01       	movw	r22, r18
    7048:	0e 94 dd 37 	call	0x6fba	; 0x6fba <_ZN8SdVolume4initER7Sd2Card>
    704c:	88 23       	and	r24, r24
    704e:	99 f0       	breq	.+38     	; 0x7076 <_ZN7SDClass5beginEh+0x5c>
    7050:	89 81       	ldd	r24, Y+1	; 0x01
    7052:	9a 81       	ldd	r25, Y+2	; 0x02
    7054:	ac 01       	movw	r20, r24
    7056:	46 5d       	subi	r20, 0xD6	; 214
    7058:	5f 4f       	sbci	r21, 0xFF	; 255
    705a:	89 81       	ldd	r24, Y+1	; 0x01
    705c:	9a 81       	ldd	r25, Y+2	; 0x02
    705e:	9c 01       	movw	r18, r24
    7060:	24 5f       	subi	r18, 0xF4	; 244
    7062:	3f 4f       	sbci	r19, 0xFF	; 255
    7064:	ca 01       	movw	r24, r20
    7066:	b9 01       	movw	r22, r18
    7068:	0e 94 f5 37 	call	0x6fea	; 0x6fea <_ZN6SdFile8openRootER8SdVolume>
    706c:	88 23       	and	r24, r24
    706e:	19 f0       	breq	.+6      	; 0x7076 <_ZN7SDClass5beginEh+0x5c>
    7070:	81 e0       	ldi	r24, 0x01	; 1
    7072:	8c 83       	std	Y+4, r24	; 0x04
    7074:	01 c0       	rjmp	.+2      	; 0x7078 <_ZN7SDClass5beginEh+0x5e>
    7076:	1c 82       	std	Y+4, r1	; 0x04
    7078:	8c 81       	ldd	r24, Y+4	; 0x04
}
    707a:	0f 90       	pop	r0
    707c:	0f 90       	pop	r0
    707e:	0f 90       	pop	r0
    7080:	0f 90       	pop	r0
    7082:	cf 91       	pop	r28
    7084:	df 91       	pop	r29
    7086:	08 95       	ret

00007088 <_Z14callback_rmdirR6SdFilePchPv>:
  }
  return true;
}

boolean callback_rmdir(SdFile& parentDir, char *filePathComponent, 
			boolean isLastComponent, void *object) {
    7088:	df 93       	push	r29
    708a:	cf 93       	push	r28
    708c:	cd b7       	in	r28, 0x3d	; 61
    708e:	de b7       	in	r29, 0x3e	; 62
    7090:	a6 97       	sbiw	r28, 0x26	; 38
    7092:	0f b6       	in	r0, 0x3f	; 63
    7094:	f8 94       	cli
    7096:	de bf       	out	0x3e, r29	; 62
    7098:	0f be       	out	0x3f, r0	; 63
    709a:	cd bf       	out	0x3d, r28	; 61
    709c:	9f 8f       	std	Y+31, r25	; 0x1f
    709e:	8e 8f       	std	Y+30, r24	; 0x1e
    70a0:	79 a3       	std	Y+33, r23	; 0x21
    70a2:	68 a3       	std	Y+32, r22	; 0x20
    70a4:	4a a3       	std	Y+34, r20	; 0x22
    70a6:	3c a3       	std	Y+36, r19	; 0x24
    70a8:	2b a3       	std	Y+35, r18	; 0x23
  if (isLastComponent) {
    70aa:	8a a1       	ldd	r24, Y+34	; 0x22
    70ac:	88 23       	and	r24, r24
    70ae:	f1 f0       	breq	.+60     	; 0x70ec <_Z14callback_rmdirR6SdFilePchPv+0x64>
    SdFile f;
    70b0:	ce 01       	movw	r24, r28
    70b2:	01 96       	adiw	r24, 0x01	; 1
    70b4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>
    if (!f.open(parentDir, filePathComponent, O_READ)) return false;
    70b8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    70ba:	3f 8d       	ldd	r19, Y+31	; 0x1f
    70bc:	48 a1       	ldd	r20, Y+32	; 0x20
    70be:	59 a1       	ldd	r21, Y+33	; 0x21
    70c0:	ce 01       	movw	r24, r28
    70c2:	01 96       	adiw	r24, 0x01	; 1
    70c4:	b9 01       	movw	r22, r18
    70c6:	21 e0       	ldi	r18, 0x01	; 1
    70c8:	0e 94 df 32 	call	0x65be	; 0x65be <_ZN6SdFile4openERS_PKch>
    70cc:	1e a2       	std	Y+38, r1	; 0x26
    70ce:	88 23       	and	r24, r24
    70d0:	11 f4       	brne	.+4      	; 0x70d6 <_Z14callback_rmdirR6SdFilePchPv+0x4e>
    70d2:	81 e0       	ldi	r24, 0x01	; 1
    70d4:	8e a3       	std	Y+38, r24	; 0x26
    70d6:	8e a1       	ldd	r24, Y+38	; 0x26
    70d8:	88 23       	and	r24, r24
    70da:	11 f0       	breq	.+4      	; 0x70e0 <_Z14callback_rmdirR6SdFilePchPv+0x58>
    70dc:	1d a2       	std	Y+37, r1	; 0x25
    70de:	08 c0       	rjmp	.+16     	; 0x70f0 <_Z14callback_rmdirR6SdFilePchPv+0x68>
    return f.rmDir();
    70e0:	ce 01       	movw	r24, r28
    70e2:	01 96       	adiw	r24, 0x01	; 1
    70e4:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <_ZN6SdFile5rmDirEv>
    70e8:	8d a3       	std	Y+37, r24	; 0x25
    70ea:	02 c0       	rjmp	.+4      	; 0x70f0 <_Z14callback_rmdirR6SdFilePchPv+0x68>
  }
  return true;
    70ec:	81 e0       	ldi	r24, 0x01	; 1
    70ee:	8d a3       	std	Y+37, r24	; 0x25
    70f0:	8d a1       	ldd	r24, Y+37	; 0x25
}
    70f2:	a6 96       	adiw	r28, 0x26	; 38
    70f4:	0f b6       	in	r0, 0x3f	; 63
    70f6:	f8 94       	cli
    70f8:	de bf       	out	0x3e, r29	; 62
    70fa:	0f be       	out	0x3f, r0	; 63
    70fc:	cd bf       	out	0x3d, r28	; 61
    70fe:	cf 91       	pop	r28
    7100:	df 91       	pop	r29
    7102:	08 95       	ret

00007104 <_ZN6SdFile6removeERS_PKc>:
  /** \deprecated Use: int8_t SdFile::readDir(dir_t* dir); */
  int8_t readDir(dir_t& dir) {return readDir(&dir);}  // NOLINT
  /** \deprecated Use:
   * static uint8_t SdFile::remove(SdFile* dirFile, const char* fileName);
   */
  static uint8_t remove(SdFile& dirFile, const char* fileName) {  // NOLINT
    7104:	df 93       	push	r29
    7106:	cf 93       	push	r28
    7108:	00 d0       	rcall	.+0      	; 0x710a <_ZN6SdFile6removeERS_PKc+0x6>
    710a:	00 d0       	rcall	.+0      	; 0x710c <_ZN6SdFile6removeERS_PKc+0x8>
    710c:	cd b7       	in	r28, 0x3d	; 61
    710e:	de b7       	in	r29, 0x3e	; 62
    7110:	9a 83       	std	Y+2, r25	; 0x02
    7112:	89 83       	std	Y+1, r24	; 0x01
    7114:	7c 83       	std	Y+4, r23	; 0x04
    7116:	6b 83       	std	Y+3, r22	; 0x03
    return remove(&dirFile, fileName);
    7118:	89 81       	ldd	r24, Y+1	; 0x01
    711a:	9a 81       	ldd	r25, Y+2	; 0x02
    711c:	2b 81       	ldd	r18, Y+3	; 0x03
    711e:	3c 81       	ldd	r19, Y+4	; 0x04
    7120:	b9 01       	movw	r22, r18
    7122:	0e 94 c7 21 	call	0x438e	; 0x438e <_ZN6SdFile6removeEPS_PKc>
  }
    7126:	0f 90       	pop	r0
    7128:	0f 90       	pop	r0
    712a:	0f 90       	pop	r0
    712c:	0f 90       	pop	r0
    712e:	cf 91       	pop	r28
    7130:	df 91       	pop	r29
    7132:	08 95       	ret

00007134 <_Z15callback_removeR6SdFilePchPv>:
  */



boolean callback_remove(SdFile& parentDir, char *filePathComponent, 
			boolean isLastComponent, void *object) {
    7134:	df 93       	push	r29
    7136:	cf 93       	push	r28
    7138:	cd b7       	in	r28, 0x3d	; 61
    713a:	de b7       	in	r29, 0x3e	; 62
    713c:	28 97       	sbiw	r28, 0x08	; 8
    713e:	0f b6       	in	r0, 0x3f	; 63
    7140:	f8 94       	cli
    7142:	de bf       	out	0x3e, r29	; 62
    7144:	0f be       	out	0x3f, r0	; 63
    7146:	cd bf       	out	0x3d, r28	; 61
    7148:	9a 83       	std	Y+2, r25	; 0x02
    714a:	89 83       	std	Y+1, r24	; 0x01
    714c:	7c 83       	std	Y+4, r23	; 0x04
    714e:	6b 83       	std	Y+3, r22	; 0x03
    7150:	4d 83       	std	Y+5, r20	; 0x05
    7152:	3f 83       	std	Y+7, r19	; 0x07
    7154:	2e 83       	std	Y+6, r18	; 0x06
  if (isLastComponent) {
    7156:	8d 81       	ldd	r24, Y+5	; 0x05
    7158:	88 23       	and	r24, r24
    715a:	49 f0       	breq	.+18     	; 0x716e <_Z15callback_removeR6SdFilePchPv+0x3a>
    return SdFile::remove(parentDir, filePathComponent);
    715c:	89 81       	ldd	r24, Y+1	; 0x01
    715e:	9a 81       	ldd	r25, Y+2	; 0x02
    7160:	2b 81       	ldd	r18, Y+3	; 0x03
    7162:	3c 81       	ldd	r19, Y+4	; 0x04
    7164:	b9 01       	movw	r22, r18
    7166:	0e 94 82 38 	call	0x7104	; 0x7104 <_ZN6SdFile6removeERS_PKc>
    716a:	88 87       	std	Y+8, r24	; 0x08
    716c:	02 c0       	rjmp	.+4      	; 0x7172 <_Z15callback_removeR6SdFilePchPv+0x3e>
  }
  return true;
    716e:	81 e0       	ldi	r24, 0x01	; 1
    7170:	88 87       	std	Y+8, r24	; 0x08
    7172:	88 85       	ldd	r24, Y+8	; 0x08
}
    7174:	28 96       	adiw	r28, 0x08	; 8
    7176:	0f b6       	in	r0, 0x3f	; 63
    7178:	f8 94       	cli
    717a:	de bf       	out	0x3e, r29	; 62
    717c:	0f be       	out	0x3f, r0	; 63
    717e:	cd bf       	out	0x3d, r28	; 61
    7180:	cf 91       	pop	r28
    7182:	df 91       	pop	r29
    7184:	08 95       	ret

00007186 <_ZN6SdFile7makeDirERS_PKc>:
  /** \deprecated Use: uint8_t SdFile::dirEntry(dir_t* dir); */
  uint8_t dirEntry(dir_t& dir) {return dirEntry(&dir);}  // NOLINT
  /** \deprecated Use:
   * uint8_t SdFile::makeDir(SdFile* dir, const char* dirName);
   */
  uint8_t makeDir(SdFile& dir, const char* dirName) {  // NOLINT
    7186:	df 93       	push	r29
    7188:	cf 93       	push	r28
    718a:	00 d0       	rcall	.+0      	; 0x718c <_ZN6SdFile7makeDirERS_PKc+0x6>
    718c:	00 d0       	rcall	.+0      	; 0x718e <_ZN6SdFile7makeDirERS_PKc+0x8>
    718e:	00 d0       	rcall	.+0      	; 0x7190 <_ZN6SdFile7makeDirERS_PKc+0xa>
    7190:	cd b7       	in	r28, 0x3d	; 61
    7192:	de b7       	in	r29, 0x3e	; 62
    7194:	9a 83       	std	Y+2, r25	; 0x02
    7196:	89 83       	std	Y+1, r24	; 0x01
    7198:	7c 83       	std	Y+4, r23	; 0x04
    719a:	6b 83       	std	Y+3, r22	; 0x03
    719c:	5e 83       	std	Y+6, r21	; 0x06
    719e:	4d 83       	std	Y+5, r20	; 0x05
    return makeDir(&dir, dirName);
    71a0:	89 81       	ldd	r24, Y+1	; 0x01
    71a2:	9a 81       	ldd	r25, Y+2	; 0x02
    71a4:	2b 81       	ldd	r18, Y+3	; 0x03
    71a6:	3c 81       	ldd	r19, Y+4	; 0x04
    71a8:	4d 81       	ldd	r20, Y+5	; 0x05
    71aa:	5e 81       	ldd	r21, Y+6	; 0x06
    71ac:	b9 01       	movw	r22, r18
    71ae:	0e 94 9b 22 	call	0x4536	; 0x4536 <_ZN6SdFile7makeDirEPS_PKc>
  }
    71b2:	26 96       	adiw	r28, 0x06	; 6
    71b4:	0f b6       	in	r0, 0x3f	; 63
    71b6:	f8 94       	cli
    71b8:	de bf       	out	0x3e, r29	; 62
    71ba:	0f be       	out	0x3f, r0	; 63
    71bc:	cd bf       	out	0x3d, r28	; 61
    71be:	cf 91       	pop	r28
    71c0:	df 91       	pop	r29
    71c2:	08 95       	ret

000071c4 <_Z20callback_makeDirPathR6SdFilePchPv>:
}



boolean callback_makeDirPath(SdFile& parentDir, char *filePathComponent, 
			     boolean isLastComponent, void *object) {
    71c4:	df 93       	push	r29
    71c6:	cf 93       	push	r28
    71c8:	cd b7       	in	r28, 0x3d	; 61
    71ca:	de b7       	in	r29, 0x3e	; 62
    71cc:	a5 97       	sbiw	r28, 0x25	; 37
    71ce:	0f b6       	in	r0, 0x3f	; 63
    71d0:	f8 94       	cli
    71d2:	de bf       	out	0x3e, r29	; 62
    71d4:	0f be       	out	0x3f, r0	; 63
    71d6:	cd bf       	out	0x3d, r28	; 61
    71d8:	98 a3       	std	Y+32, r25	; 0x20
    71da:	8f 8f       	std	Y+31, r24	; 0x1f
    71dc:	7a a3       	std	Y+34, r23	; 0x22
    71de:	69 a3       	std	Y+33, r22	; 0x21
    71e0:	4b a3       	std	Y+35, r20	; 0x23
    71e2:	3d a3       	std	Y+37, r19	; 0x25
    71e4:	2c a3       	std	Y+36, r18	; 0x24
    it does not already exist.

    Returns true if a directory was created or it already existed.

  */
  boolean result = false;
    71e6:	19 82       	std	Y+1, r1	; 0x01
  SdFile child;
    71e8:	ce 01       	movw	r24, r28
    71ea:	02 96       	adiw	r24, 0x02	; 2
    71ec:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN6SdFileC1Ev>
  
  result = callback_pathExists(parentDir, filePathComponent, isLastComponent, object);
    71f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    71f2:	98 a1       	ldd	r25, Y+32	; 0x20
    71f4:	29 a1       	ldd	r18, Y+33	; 0x21
    71f6:	3a a1       	ldd	r19, Y+34	; 0x22
    71f8:	ec a1       	ldd	r30, Y+36	; 0x24
    71fa:	fd a1       	ldd	r31, Y+37	; 0x25
    71fc:	b9 01       	movw	r22, r18
    71fe:	4b a1       	ldd	r20, Y+35	; 0x23
    7200:	9f 01       	movw	r18, r30
    7202:	0e 94 d5 33 	call	0x67aa	; 0x67aa <_Z19callback_pathExistsR6SdFilePchPv>
    7206:	89 83       	std	Y+1, r24	; 0x01
  if (!result) {
    7208:	89 81       	ldd	r24, Y+1	; 0x01
    720a:	88 23       	and	r24, r24
    720c:	51 f4       	brne	.+20     	; 0x7222 <_Z20callback_makeDirPathR6SdFilePchPv+0x5e>
    result = child.makeDir(parentDir, filePathComponent);
    720e:	ce 01       	movw	r24, r28
    7210:	02 96       	adiw	r24, 0x02	; 2
    7212:	2f 8d       	ldd	r18, Y+31	; 0x1f
    7214:	38 a1       	ldd	r19, Y+32	; 0x20
    7216:	49 a1       	ldd	r20, Y+33	; 0x21
    7218:	5a a1       	ldd	r21, Y+34	; 0x22
    721a:	b9 01       	movw	r22, r18
    721c:	0e 94 c3 38 	call	0x7186	; 0x7186 <_ZN6SdFile7makeDirERS_PKc>
    7220:	89 83       	std	Y+1, r24	; 0x01
  } 
  
  return result;
    7222:	89 81       	ldd	r24, Y+1	; 0x01
}
    7224:	a5 96       	adiw	r28, 0x25	; 37
    7226:	0f b6       	in	r0, 0x3f	; 63
    7228:	f8 94       	cli
    722a:	de bf       	out	0x3e, r29	; 62
    722c:	0f be       	out	0x3f, r0	; 63
    722e:	cd bf       	out	0x3d, r28	; 61
    7230:	cf 91       	pop	r28
    7232:	df 91       	pop	r29
    7234:	08 95       	ret

00007236 <_ZL13SerialPrint_PPKc>:
/**
 * %Print a string in flash memory to the serial port.
 *
 * \param[in] str Pointer to string stored in flash memory.
 */
static NOINLINE void SerialPrint_P(PGM_P str) {
    7236:	df 93       	push	r29
    7238:	cf 93       	push	r28
    723a:	cd b7       	in	r28, 0x3d	; 61
    723c:	de b7       	in	r29, 0x3e	; 62
    723e:	27 97       	sbiw	r28, 0x07	; 7
    7240:	0f b6       	in	r0, 0x3f	; 63
    7242:	f8 94       	cli
    7244:	de bf       	out	0x3e, r29	; 62
    7246:	0f be       	out	0x3f, r0	; 63
    7248:	cd bf       	out	0x3d, r28	; 61
    724a:	9e 83       	std	Y+6, r25	; 0x06
    724c:	8d 83       	std	Y+5, r24	; 0x05
    724e:	0a c0       	rjmp	.+20     	; 0x7264 <_ZL13SerialPrint_PPKc+0x2e>
  for (uint8_t c; (c = pgm_read_byte(str)); str++) Serial.write(c);
    7250:	8c e1       	ldi	r24, 0x1C	; 28
    7252:	96 e0       	ldi	r25, 0x06	; 6
    7254:	6c 81       	ldd	r22, Y+4	; 0x04
    7256:	0e 94 03 3e 	call	0x7c06	; 0x7c06 <_ZN14HardwareSerial5writeEh>
    725a:	8d 81       	ldd	r24, Y+5	; 0x05
    725c:	9e 81       	ldd	r25, Y+6	; 0x06
    725e:	01 96       	adiw	r24, 0x01	; 1
    7260:	9e 83       	std	Y+6, r25	; 0x06
    7262:	8d 83       	std	Y+5, r24	; 0x05
    7264:	8d 81       	ldd	r24, Y+5	; 0x05
    7266:	9e 81       	ldd	r25, Y+6	; 0x06
    7268:	9b 83       	std	Y+3, r25	; 0x03
    726a:	8a 83       	std	Y+2, r24	; 0x02
    726c:	ea 81       	ldd	r30, Y+2	; 0x02
    726e:	fb 81       	ldd	r31, Y+3	; 0x03
    7270:	84 91       	lpm	r24, Z+
    7272:	89 83       	std	Y+1, r24	; 0x01
    7274:	89 81       	ldd	r24, Y+1	; 0x01
    7276:	8c 83       	std	Y+4, r24	; 0x04
    7278:	8c 81       	ldd	r24, Y+4	; 0x04
    727a:	8f 83       	std	Y+7, r24	; 0x07
    727c:	8f 81       	ldd	r24, Y+7	; 0x07
    727e:	88 23       	and	r24, r24
    7280:	11 f0       	breq	.+4      	; 0x7286 <_ZL13SerialPrint_PPKc+0x50>
    7282:	81 e0       	ldi	r24, 0x01	; 1
    7284:	8f 83       	std	Y+7, r24	; 0x07
    7286:	8f 81       	ldd	r24, Y+7	; 0x07
    7288:	88 23       	and	r24, r24
    728a:	11 f7       	brne	.-60     	; 0x7250 <_ZL13SerialPrint_PPKc+0x1a>
}
    728c:	27 96       	adiw	r28, 0x07	; 7
    728e:	0f b6       	in	r0, 0x3f	; 63
    7290:	f8 94       	cli
    7292:	de bf       	out	0x3e, r29	; 62
    7294:	0f be       	out	0x3f, r0	; 63
    7296:	cd bf       	out	0x3d, r28	; 61
    7298:	cf 91       	pop	r28
    729a:	df 91       	pop	r29
    729c:	08 95       	ret

0000729e <_ZL15SerialPrintln_PPKc>:
/**
 * %Print a string in flash memory followed by a CR/LF.
 *
 * \param[in] str Pointer to string stored in flash memory.
 */
static NOINLINE void SerialPrintln_P(PGM_P str) {
    729e:	df 93       	push	r29
    72a0:	cf 93       	push	r28
    72a2:	00 d0       	rcall	.+0      	; 0x72a4 <_ZL15SerialPrintln_PPKc+0x6>
    72a4:	cd b7       	in	r28, 0x3d	; 61
    72a6:	de b7       	in	r29, 0x3e	; 62
    72a8:	9a 83       	std	Y+2, r25	; 0x02
    72aa:	89 83       	std	Y+1, r24	; 0x01
  SerialPrint_P(str);
    72ac:	89 81       	ldd	r24, Y+1	; 0x01
    72ae:	9a 81       	ldd	r25, Y+2	; 0x02
    72b0:	0e 94 1b 39 	call	0x7236	; 0x7236 <_ZL13SerialPrint_PPKc>
  Serial.println();
    72b4:	8c e1       	ldi	r24, 0x1C	; 28
    72b6:	96 e0       	ldi	r25, 0x06	; 6
    72b8:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
}
    72bc:	0f 90       	pop	r0
    72be:	0f 90       	pop	r0
    72c0:	cf 91       	pop	r28
    72c2:	df 91       	pop	r29
    72c4:	08 95       	ret
    72c6:	df 93       	push	r29
    72c8:	cf 93       	push	r28
    72ca:	00 d0       	rcall	.+0      	; 0x72cc <_ZL15SerialPrintln_PPKc+0x2e>
    72cc:	cd b7       	in	r28, 0x3d	; 61
    72ce:	de b7       	in	r29, 0x3e	; 62
    72d0:	9a 83       	std	Y+2, r25	; 0x02
    72d2:	89 83       	std	Y+1, r24	; 0x01
    72d4:	e9 81       	ldd	r30, Y+1	; 0x01
    72d6:	fa 81       	ldd	r31, Y+2	; 0x02
    72d8:	80 ec       	ldi	r24, 0xC0	; 192
    72da:	90 e0       	ldi	r25, 0x00	; 0
    72dc:	91 83       	std	Z+1, r25	; 0x01
    72de:	80 83       	st	Z, r24
    72e0:	e9 81       	ldd	r30, Y+1	; 0x01
    72e2:	fa 81       	ldd	r31, Y+2	; 0x02
    72e4:	13 82       	std	Z+3, r1	; 0x03
    72e6:	12 82       	std	Z+2, r1	; 0x02
    72e8:	0f 90       	pop	r0
    72ea:	0f 90       	pop	r0
    72ec:	cf 91       	pop	r28
    72ee:	df 91       	pop	r29
    72f0:	08 95       	ret
    72f2:	df 93       	push	r29
    72f4:	cf 93       	push	r28
    72f6:	00 d0       	rcall	.+0      	; 0x72f8 <_ZL15SerialPrintln_PPKc+0x5a>
    72f8:	cd b7       	in	r28, 0x3d	; 61
    72fa:	de b7       	in	r29, 0x3e	; 62
    72fc:	9a 83       	std	Y+2, r25	; 0x02
    72fe:	89 83       	std	Y+1, r24	; 0x01
    7300:	89 81       	ldd	r24, Y+1	; 0x01
    7302:	9a 81       	ldd	r25, Y+2	; 0x02
    7304:	0e 94 c7 0a 	call	0x158e	; 0x158e <_ZN5PrintC2Ev>
    7308:	e9 81       	ldd	r30, Y+1	; 0x01
    730a:	fa 81       	ldd	r31, Y+2	; 0x02
    730c:	80 e8       	ldi	r24, 0x80	; 128
    730e:	90 e0       	ldi	r25, 0x00	; 0
    7310:	91 83       	std	Z+1, r25	; 0x01
    7312:	80 83       	st	Z, r24
    7314:	e9 81       	ldd	r30, Y+1	; 0x01
    7316:	fa 81       	ldd	r31, Y+2	; 0x02
    7318:	88 ee       	ldi	r24, 0xE8	; 232
    731a:	93 e0       	ldi	r25, 0x03	; 3
    731c:	a0 e0       	ldi	r26, 0x00	; 0
    731e:	b0 e0       	ldi	r27, 0x00	; 0
    7320:	84 83       	std	Z+4, r24	; 0x04
    7322:	95 83       	std	Z+5, r25	; 0x05
    7324:	a6 83       	std	Z+6, r26	; 0x06
    7326:	b7 83       	std	Z+7, r27	; 0x07
    7328:	0f 90       	pop	r0
    732a:	0f 90       	pop	r0
    732c:	cf 91       	pop	r28
    732e:	df 91       	pop	r29
    7330:	08 95       	ret

00007332 <_Z10store_charhP11ring_buffer>:
#if defined(UBRR3H)
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
    7332:	df 93       	push	r29
    7334:	cf 93       	push	r28
    7336:	00 d0       	rcall	.+0      	; 0x7338 <_Z10store_charhP11ring_buffer+0x6>
    7338:	00 d0       	rcall	.+0      	; 0x733a <_Z10store_charhP11ring_buffer+0x8>
    733a:	00 d0       	rcall	.+0      	; 0x733c <_Z10store_charhP11ring_buffer+0xa>
    733c:	cd b7       	in	r28, 0x3d	; 61
    733e:	de b7       	in	r29, 0x3e	; 62
    7340:	8b 83       	std	Y+3, r24	; 0x03
    7342:	7d 83       	std	Y+5, r23	; 0x05
    7344:	6c 83       	std	Y+4, r22	; 0x04
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    7346:	8c 81       	ldd	r24, Y+4	; 0x04
    7348:	9d 81       	ldd	r25, Y+5	; 0x05
    734a:	fc 01       	movw	r30, r24
    734c:	e0 5c       	subi	r30, 0xC0	; 192
    734e:	ff 4f       	sbci	r31, 0xFF	; 255
    7350:	80 81       	ld	r24, Z
    7352:	91 81       	ldd	r25, Z+1	; 0x01
    7354:	01 96       	adiw	r24, 0x01	; 1
    7356:	8f 73       	andi	r24, 0x3F	; 63
    7358:	90 70       	andi	r25, 0x00	; 0
    735a:	9a 83       	std	Y+2, r25	; 0x02
    735c:	89 83       	std	Y+1, r24	; 0x01

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    735e:	29 81       	ldd	r18, Y+1	; 0x01
    7360:	3a 81       	ldd	r19, Y+2	; 0x02
    7362:	8c 81       	ldd	r24, Y+4	; 0x04
    7364:	9d 81       	ldd	r25, Y+5	; 0x05
    7366:	fc 01       	movw	r30, r24
    7368:	ee 5b       	subi	r30, 0xBE	; 190
    736a:	ff 4f       	sbci	r31, 0xFF	; 255
    736c:	80 81       	ld	r24, Z
    736e:	91 81       	ldd	r25, Z+1	; 0x01
    7370:	1e 82       	std	Y+6, r1	; 0x06
    7372:	28 17       	cp	r18, r24
    7374:	39 07       	cpc	r19, r25
    7376:	11 f0       	breq	.+4      	; 0x737c <_Z10store_charhP11ring_buffer+0x4a>
    7378:	81 e0       	ldi	r24, 0x01	; 1
    737a:	8e 83       	std	Y+6, r24	; 0x06
    737c:	8e 81       	ldd	r24, Y+6	; 0x06
    737e:	88 23       	and	r24, r24
    7380:	b9 f0       	breq	.+46     	; 0x73b0 <_Z10store_charhP11ring_buffer+0x7e>
    buffer->buffer[buffer->head] = c;
    7382:	8c 81       	ldd	r24, Y+4	; 0x04
    7384:	9d 81       	ldd	r25, Y+5	; 0x05
    7386:	fc 01       	movw	r30, r24
    7388:	e0 5c       	subi	r30, 0xC0	; 192
    738a:	ff 4f       	sbci	r31, 0xFF	; 255
    738c:	20 81       	ld	r18, Z
    738e:	31 81       	ldd	r19, Z+1	; 0x01
    7390:	8c 81       	ldd	r24, Y+4	; 0x04
    7392:	9d 81       	ldd	r25, Y+5	; 0x05
    7394:	fc 01       	movw	r30, r24
    7396:	e2 0f       	add	r30, r18
    7398:	f3 1f       	adc	r31, r19
    739a:	8b 81       	ldd	r24, Y+3	; 0x03
    739c:	80 83       	st	Z, r24
    buffer->head = i;
    739e:	29 81       	ldd	r18, Y+1	; 0x01
    73a0:	3a 81       	ldd	r19, Y+2	; 0x02
    73a2:	8c 81       	ldd	r24, Y+4	; 0x04
    73a4:	9d 81       	ldd	r25, Y+5	; 0x05
    73a6:	fc 01       	movw	r30, r24
    73a8:	e0 5c       	subi	r30, 0xC0	; 192
    73aa:	ff 4f       	sbci	r31, 0xFF	; 255
    73ac:	31 83       	std	Z+1, r19	; 0x01
    73ae:	20 83       	st	Z, r18
  }
}
    73b0:	26 96       	adiw	r28, 0x06	; 6
    73b2:	0f b6       	in	r0, 0x3f	; 63
    73b4:	f8 94       	cli
    73b6:	de bf       	out	0x3e, r29	; 62
    73b8:	0f be       	out	0x3f, r0	; 63
    73ba:	cd bf       	out	0x3d, r28	; 61
    73bc:	cf 91       	pop	r28
    73be:	df 91       	pop	r29
    73c0:	08 95       	ret

000073c2 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    73c2:	df 93       	push	r29
    73c4:	cf 93       	push	r28
    73c6:	cd b7       	in	r28, 0x3d	; 61
    73c8:	de b7       	in	r29, 0x3e	; 62
    73ca:	cf 91       	pop	r28
    73cc:	df 91       	pop	r29
    73ce:	08 95       	ret

000073d0 <__vector_11>:
#elif defined(SIG_UART0_RECV)
  SIGNAL(SIG_UART0_RECV)
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
    73d0:	1f 92       	push	r1
    73d2:	0f 92       	push	r0
    73d4:	0f b6       	in	r0, 0x3f	; 63
    73d6:	0f 92       	push	r0
    73d8:	11 24       	eor	r1, r1
    73da:	2f 93       	push	r18
    73dc:	3f 93       	push	r19
    73de:	4f 93       	push	r20
    73e0:	5f 93       	push	r21
    73e2:	6f 93       	push	r22
    73e4:	7f 93       	push	r23
    73e6:	8f 93       	push	r24
    73e8:	9f 93       	push	r25
    73ea:	af 93       	push	r26
    73ec:	bf 93       	push	r27
    73ee:	ef 93       	push	r30
    73f0:	ff 93       	push	r31
    73f2:	df 93       	push	r29
    73f4:	cf 93       	push	r28
    73f6:	0f 92       	push	r0
    73f8:	cd b7       	in	r28, 0x3d	; 61
    73fa:	de b7       	in	r29, 0x3e	; 62
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
  #elif defined(UDR)
    unsigned char c  =  UDR;
    73fc:	ec e2       	ldi	r30, 0x2C	; 44
    73fe:	f0 e0       	ldi	r31, 0x00	; 0
    7400:	80 81       	ld	r24, Z
    7402:	89 83       	std	Y+1, r24	; 0x01
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    7404:	24 e9       	ldi	r18, 0x94	; 148
    7406:	35 e0       	ldi	r19, 0x05	; 5
    7408:	89 81       	ldd	r24, Y+1	; 0x01
    740a:	b9 01       	movw	r22, r18
    740c:	0e 94 99 39 	call	0x7332	; 0x7332 <_Z10store_charhP11ring_buffer>
  }
    7410:	0f 90       	pop	r0
    7412:	cf 91       	pop	r28
    7414:	df 91       	pop	r29
    7416:	ff 91       	pop	r31
    7418:	ef 91       	pop	r30
    741a:	bf 91       	pop	r27
    741c:	af 91       	pop	r26
    741e:	9f 91       	pop	r25
    7420:	8f 91       	pop	r24
    7422:	7f 91       	pop	r23
    7424:	6f 91       	pop	r22
    7426:	5f 91       	pop	r21
    7428:	4f 91       	pop	r20
    742a:	3f 91       	pop	r19
    742c:	2f 91       	pop	r18
    742e:	0f 90       	pop	r0
    7430:	0f be       	out	0x3f, r0	; 63
    7432:	0f 90       	pop	r0
    7434:	1f 90       	pop	r1
    7436:	18 95       	reti

00007438 <__vector_12>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
    7438:	1f 92       	push	r1
    743a:	0f 92       	push	r0
    743c:	0f b6       	in	r0, 0x3f	; 63
    743e:	0f 92       	push	r0
    7440:	11 24       	eor	r1, r1
    7442:	2f 93       	push	r18
    7444:	3f 93       	push	r19
    7446:	8f 93       	push	r24
    7448:	9f 93       	push	r25
    744a:	af 93       	push	r26
    744c:	bf 93       	push	r27
    744e:	ef 93       	push	r30
    7450:	ff 93       	push	r31
    7452:	df 93       	push	r29
    7454:	cf 93       	push	r28
    7456:	00 d0       	rcall	.+0      	; 0x7458 <__vector_12+0x20>
    7458:	cd b7       	in	r28, 0x3d	; 61
    745a:	de b7       	in	r29, 0x3e	; 62
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
    745c:	20 91 18 06 	lds	r18, 0x0618
    7460:	30 91 19 06 	lds	r19, 0x0619
    7464:	80 91 1a 06 	lds	r24, 0x061A
    7468:	90 91 1b 06 	lds	r25, 0x061B
    746c:	1a 82       	std	Y+2, r1	; 0x02
    746e:	28 17       	cp	r18, r24
    7470:	39 07       	cpc	r19, r25
    7472:	11 f4       	brne	.+4      	; 0x7478 <__vector_12+0x40>
    7474:	81 e0       	ldi	r24, 0x01	; 1
    7476:	8a 83       	std	Y+2, r24	; 0x02
    7478:	8a 81       	ldd	r24, Y+2	; 0x02
    747a:	88 23       	and	r24, r24
    747c:	41 f0       	breq	.+16     	; 0x748e <__vector_12+0x56>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
#else
    cbi(UCSRB, UDRIE);
    747e:	aa e2       	ldi	r26, 0x2A	; 42
    7480:	b0 e0       	ldi	r27, 0x00	; 0
    7482:	ea e2       	ldi	r30, 0x2A	; 42
    7484:	f0 e0       	ldi	r31, 0x00	; 0
    7486:	80 81       	ld	r24, Z
    7488:	8f 7d       	andi	r24, 0xDF	; 223
    748a:	8c 93       	st	X, r24
    748c:	18 c0       	rjmp	.+48     	; 0x74be <__vector_12+0x86>
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    748e:	80 91 1a 06 	lds	r24, 0x061A
    7492:	90 91 1b 06 	lds	r25, 0x061B
    7496:	fc 01       	movw	r30, r24
    7498:	e8 52       	subi	r30, 0x28	; 40
    749a:	fa 4f       	sbci	r31, 0xFA	; 250
    749c:	80 81       	ld	r24, Z
    749e:	89 83       	std	Y+1, r24	; 0x01
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    74a0:	80 91 1a 06 	lds	r24, 0x061A
    74a4:	90 91 1b 06 	lds	r25, 0x061B
    74a8:	01 96       	adiw	r24, 0x01	; 1
    74aa:	8f 73       	andi	r24, 0x3F	; 63
    74ac:	90 70       	andi	r25, 0x00	; 0
    74ae:	90 93 1b 06 	sts	0x061B, r25
    74b2:	80 93 1a 06 	sts	0x061A, r24
	
  #if defined(UDR0)
    UDR0 = c;
  #elif defined(UDR)
    UDR = c;
    74b6:	ec e2       	ldi	r30, 0x2C	; 44
    74b8:	f0 e0       	ldi	r31, 0x00	; 0
    74ba:	89 81       	ldd	r24, Y+1	; 0x01
    74bc:	80 83       	st	Z, r24
  #else
    #error UDR not defined
  #endif
  }
}
    74be:	0f 90       	pop	r0
    74c0:	0f 90       	pop	r0
    74c2:	cf 91       	pop	r28
    74c4:	df 91       	pop	r29
    74c6:	ff 91       	pop	r31
    74c8:	ef 91       	pop	r30
    74ca:	bf 91       	pop	r27
    74cc:	af 91       	pop	r26
    74ce:	9f 91       	pop	r25
    74d0:	8f 91       	pop	r24
    74d2:	3f 91       	pop	r19
    74d4:	2f 91       	pop	r18
    74d6:	0f 90       	pop	r0
    74d8:	0f be       	out	0x3f, r0	; 63
    74da:	0f 90       	pop	r0
    74dc:	1f 90       	pop	r1
    74de:	18 95       	reti

000074e0 <_ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    74e0:	8f 92       	push	r8
    74e2:	af 92       	push	r10
    74e4:	bf 92       	push	r11
    74e6:	cf 92       	push	r12
    74e8:	df 92       	push	r13
    74ea:	ef 92       	push	r14
    74ec:	ff 92       	push	r15
    74ee:	0f 93       	push	r16
    74f0:	1f 93       	push	r17
    74f2:	df 93       	push	r29
    74f4:	cf 93       	push	r28
    74f6:	cd b7       	in	r28, 0x3d	; 61
    74f8:	de b7       	in	r29, 0x3e	; 62
    74fa:	61 97       	sbiw	r28, 0x11	; 17
    74fc:	0f b6       	in	r0, 0x3f	; 63
    74fe:	f8 94       	cli
    7500:	de bf       	out	0x3e, r29	; 62
    7502:	0f be       	out	0x3f, r0	; 63
    7504:	cd bf       	out	0x3d, r28	; 61
    7506:	9a 83       	std	Y+2, r25	; 0x02
    7508:	89 83       	std	Y+1, r24	; 0x01
    750a:	7c 83       	std	Y+4, r23	; 0x04
    750c:	6b 83       	std	Y+3, r22	; 0x03
    750e:	5e 83       	std	Y+6, r21	; 0x06
    7510:	4d 83       	std	Y+5, r20	; 0x05
    7512:	38 87       	std	Y+8, r19	; 0x08
    7514:	2f 83       	std	Y+7, r18	; 0x07
    7516:	1a 87       	std	Y+10, r17	; 0x0a
    7518:	09 87       	std	Y+9, r16	; 0x09
    751a:	fc 86       	std	Y+12, r15	; 0x0c
    751c:	eb 86       	std	Y+11, r14	; 0x0b
    751e:	de 86       	std	Y+14, r13	; 0x0e
    7520:	cd 86       	std	Y+13, r12	; 0x0d
    7522:	b8 8a       	std	Y+16, r11	; 0x10
    7524:	af 86       	std	Y+15, r10	; 0x0f
    7526:	89 8a       	std	Y+17, r8	; 0x11
    7528:	89 81       	ldd	r24, Y+1	; 0x01
    752a:	9a 81       	ldd	r25, Y+2	; 0x02
    752c:	0e 94 9d 2b 	call	0x573a	; 0x573a <_ZN6StreamC2Ev>
    7530:	e9 81       	ldd	r30, Y+1	; 0x01
    7532:	fa 81       	ldd	r31, Y+2	; 0x02
    7534:	82 e9       	ldi	r24, 0x92	; 146
    7536:	90 e0       	ldi	r25, 0x00	; 0
    7538:	91 83       	std	Z+1, r25	; 0x01
    753a:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    753c:	e9 81       	ldd	r30, Y+1	; 0x01
    753e:	fa 81       	ldd	r31, Y+2	; 0x02
    7540:	8b 81       	ldd	r24, Y+3	; 0x03
    7542:	9c 81       	ldd	r25, Y+4	; 0x04
    7544:	95 87       	std	Z+13, r25	; 0x0d
    7546:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    7548:	e9 81       	ldd	r30, Y+1	; 0x01
    754a:	fa 81       	ldd	r31, Y+2	; 0x02
    754c:	8d 81       	ldd	r24, Y+5	; 0x05
    754e:	9e 81       	ldd	r25, Y+6	; 0x06
    7550:	97 87       	std	Z+15, r25	; 0x0f
    7552:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    7554:	e9 81       	ldd	r30, Y+1	; 0x01
    7556:	fa 81       	ldd	r31, Y+2	; 0x02
    7558:	8f 81       	ldd	r24, Y+7	; 0x07
    755a:	98 85       	ldd	r25, Y+8	; 0x08
    755c:	91 8b       	std	Z+17, r25	; 0x11
    755e:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    7560:	e9 81       	ldd	r30, Y+1	; 0x01
    7562:	fa 81       	ldd	r31, Y+2	; 0x02
    7564:	89 85       	ldd	r24, Y+9	; 0x09
    7566:	9a 85       	ldd	r25, Y+10	; 0x0a
    7568:	93 8b       	std	Z+19, r25	; 0x13
    756a:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    756c:	e9 81       	ldd	r30, Y+1	; 0x01
    756e:	fa 81       	ldd	r31, Y+2	; 0x02
    7570:	8b 85       	ldd	r24, Y+11	; 0x0b
    7572:	9c 85       	ldd	r25, Y+12	; 0x0c
    7574:	95 8b       	std	Z+21, r25	; 0x15
    7576:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    7578:	e9 81       	ldd	r30, Y+1	; 0x01
    757a:	fa 81       	ldd	r31, Y+2	; 0x02
    757c:	8d 85       	ldd	r24, Y+13	; 0x0d
    757e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7580:	97 8b       	std	Z+23, r25	; 0x17
    7582:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    7584:	e9 81       	ldd	r30, Y+1	; 0x01
    7586:	fa 81       	ldd	r31, Y+2	; 0x02
    7588:	8f 85       	ldd	r24, Y+15	; 0x0f
    758a:	98 89       	ldd	r25, Y+16	; 0x10
    758c:	91 8f       	std	Z+25, r25	; 0x19
    758e:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    7590:	e9 81       	ldd	r30, Y+1	; 0x01
    7592:	fa 81       	ldd	r31, Y+2	; 0x02
    7594:	89 89       	ldd	r24, Y+17	; 0x11
    7596:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    7598:	e9 81       	ldd	r30, Y+1	; 0x01
    759a:	fa 81       	ldd	r31, Y+2	; 0x02
    759c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    759e:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    75a0:	e9 81       	ldd	r30, Y+1	; 0x01
    75a2:	fa 81       	ldd	r31, Y+2	; 0x02
    75a4:	88 a1       	ldd	r24, Y+32	; 0x20
    75a6:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    75a8:	e9 81       	ldd	r30, Y+1	; 0x01
    75aa:	fa 81       	ldd	r31, Y+2	; 0x02
    75ac:	89 a1       	ldd	r24, Y+33	; 0x21
    75ae:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    75b0:	e9 81       	ldd	r30, Y+1	; 0x01
    75b2:	fa 81       	ldd	r31, Y+2	; 0x02
    75b4:	8a a1       	ldd	r24, Y+34	; 0x22
    75b6:	86 8f       	std	Z+30, r24	; 0x1e
}
    75b8:	61 96       	adiw	r28, 0x11	; 17
    75ba:	0f b6       	in	r0, 0x3f	; 63
    75bc:	f8 94       	cli
    75be:	de bf       	out	0x3e, r29	; 62
    75c0:	0f be       	out	0x3f, r0	; 63
    75c2:	cd bf       	out	0x3d, r28	; 61
    75c4:	cf 91       	pop	r28
    75c6:	df 91       	pop	r29
    75c8:	1f 91       	pop	r17
    75ca:	0f 91       	pop	r16
    75cc:	ff 90       	pop	r15
    75ce:	ef 90       	pop	r14
    75d0:	df 90       	pop	r13
    75d2:	cf 90       	pop	r12
    75d4:	bf 90       	pop	r11
    75d6:	af 90       	pop	r10
    75d8:	8f 90       	pop	r8
    75da:	08 95       	ret

000075dc <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    75dc:	8f 92       	push	r8
    75de:	af 92       	push	r10
    75e0:	bf 92       	push	r11
    75e2:	cf 92       	push	r12
    75e4:	df 92       	push	r13
    75e6:	ef 92       	push	r14
    75e8:	ff 92       	push	r15
    75ea:	0f 93       	push	r16
    75ec:	1f 93       	push	r17
    75ee:	df 93       	push	r29
    75f0:	cf 93       	push	r28
    75f2:	cd b7       	in	r28, 0x3d	; 61
    75f4:	de b7       	in	r29, 0x3e	; 62
    75f6:	61 97       	sbiw	r28, 0x11	; 17
    75f8:	0f b6       	in	r0, 0x3f	; 63
    75fa:	f8 94       	cli
    75fc:	de bf       	out	0x3e, r29	; 62
    75fe:	0f be       	out	0x3f, r0	; 63
    7600:	cd bf       	out	0x3d, r28	; 61
    7602:	9a 83       	std	Y+2, r25	; 0x02
    7604:	89 83       	std	Y+1, r24	; 0x01
    7606:	7c 83       	std	Y+4, r23	; 0x04
    7608:	6b 83       	std	Y+3, r22	; 0x03
    760a:	5e 83       	std	Y+6, r21	; 0x06
    760c:	4d 83       	std	Y+5, r20	; 0x05
    760e:	38 87       	std	Y+8, r19	; 0x08
    7610:	2f 83       	std	Y+7, r18	; 0x07
    7612:	1a 87       	std	Y+10, r17	; 0x0a
    7614:	09 87       	std	Y+9, r16	; 0x09
    7616:	fc 86       	std	Y+12, r15	; 0x0c
    7618:	eb 86       	std	Y+11, r14	; 0x0b
    761a:	de 86       	std	Y+14, r13	; 0x0e
    761c:	cd 86       	std	Y+13, r12	; 0x0d
    761e:	b8 8a       	std	Y+16, r11	; 0x10
    7620:	af 86       	std	Y+15, r10	; 0x0f
    7622:	89 8a       	std	Y+17, r8	; 0x11
    7624:	89 81       	ldd	r24, Y+1	; 0x01
    7626:	9a 81       	ldd	r25, Y+2	; 0x02
    7628:	0e 94 9d 2b 	call	0x573a	; 0x573a <_ZN6StreamC2Ev>
    762c:	e9 81       	ldd	r30, Y+1	; 0x01
    762e:	fa 81       	ldd	r31, Y+2	; 0x02
    7630:	82 e9       	ldi	r24, 0x92	; 146
    7632:	90 e0       	ldi	r25, 0x00	; 0
    7634:	91 83       	std	Z+1, r25	; 0x01
    7636:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    7638:	e9 81       	ldd	r30, Y+1	; 0x01
    763a:	fa 81       	ldd	r31, Y+2	; 0x02
    763c:	8b 81       	ldd	r24, Y+3	; 0x03
    763e:	9c 81       	ldd	r25, Y+4	; 0x04
    7640:	95 87       	std	Z+13, r25	; 0x0d
    7642:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    7644:	e9 81       	ldd	r30, Y+1	; 0x01
    7646:	fa 81       	ldd	r31, Y+2	; 0x02
    7648:	8d 81       	ldd	r24, Y+5	; 0x05
    764a:	9e 81       	ldd	r25, Y+6	; 0x06
    764c:	97 87       	std	Z+15, r25	; 0x0f
    764e:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    7650:	e9 81       	ldd	r30, Y+1	; 0x01
    7652:	fa 81       	ldd	r31, Y+2	; 0x02
    7654:	8f 81       	ldd	r24, Y+7	; 0x07
    7656:	98 85       	ldd	r25, Y+8	; 0x08
    7658:	91 8b       	std	Z+17, r25	; 0x11
    765a:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    765c:	e9 81       	ldd	r30, Y+1	; 0x01
    765e:	fa 81       	ldd	r31, Y+2	; 0x02
    7660:	89 85       	ldd	r24, Y+9	; 0x09
    7662:	9a 85       	ldd	r25, Y+10	; 0x0a
    7664:	93 8b       	std	Z+19, r25	; 0x13
    7666:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    7668:	e9 81       	ldd	r30, Y+1	; 0x01
    766a:	fa 81       	ldd	r31, Y+2	; 0x02
    766c:	8b 85       	ldd	r24, Y+11	; 0x0b
    766e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7670:	95 8b       	std	Z+21, r25	; 0x15
    7672:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    7674:	e9 81       	ldd	r30, Y+1	; 0x01
    7676:	fa 81       	ldd	r31, Y+2	; 0x02
    7678:	8d 85       	ldd	r24, Y+13	; 0x0d
    767a:	9e 85       	ldd	r25, Y+14	; 0x0e
    767c:	97 8b       	std	Z+23, r25	; 0x17
    767e:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    7680:	e9 81       	ldd	r30, Y+1	; 0x01
    7682:	fa 81       	ldd	r31, Y+2	; 0x02
    7684:	8f 85       	ldd	r24, Y+15	; 0x0f
    7686:	98 89       	ldd	r25, Y+16	; 0x10
    7688:	91 8f       	std	Z+25, r25	; 0x19
    768a:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    768c:	e9 81       	ldd	r30, Y+1	; 0x01
    768e:	fa 81       	ldd	r31, Y+2	; 0x02
    7690:	89 89       	ldd	r24, Y+17	; 0x11
    7692:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    7694:	e9 81       	ldd	r30, Y+1	; 0x01
    7696:	fa 81       	ldd	r31, Y+2	; 0x02
    7698:	8f 8d       	ldd	r24, Y+31	; 0x1f
    769a:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    769c:	e9 81       	ldd	r30, Y+1	; 0x01
    769e:	fa 81       	ldd	r31, Y+2	; 0x02
    76a0:	88 a1       	ldd	r24, Y+32	; 0x20
    76a2:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    76a4:	e9 81       	ldd	r30, Y+1	; 0x01
    76a6:	fa 81       	ldd	r31, Y+2	; 0x02
    76a8:	89 a1       	ldd	r24, Y+33	; 0x21
    76aa:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    76ac:	e9 81       	ldd	r30, Y+1	; 0x01
    76ae:	fa 81       	ldd	r31, Y+2	; 0x02
    76b0:	8a a1       	ldd	r24, Y+34	; 0x22
    76b2:	86 8f       	std	Z+30, r24	; 0x1e
}
    76b4:	61 96       	adiw	r28, 0x11	; 17
    76b6:	0f b6       	in	r0, 0x3f	; 63
    76b8:	f8 94       	cli
    76ba:	de bf       	out	0x3e, r29	; 62
    76bc:	0f be       	out	0x3f, r0	; 63
    76be:	cd bf       	out	0x3d, r28	; 61
    76c0:	cf 91       	pop	r28
    76c2:	df 91       	pop	r29
    76c4:	1f 91       	pop	r17
    76c6:	0f 91       	pop	r16
    76c8:	ff 90       	pop	r15
    76ca:	ef 90       	pop	r14
    76cc:	df 90       	pop	r13
    76ce:	cf 90       	pop	r12
    76d0:	bf 90       	pop	r11
    76d2:	af 90       	pop	r10
    76d4:	8f 90       	pop	r8
    76d6:	08 95       	ret

000076d8 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    76d8:	df 93       	push	r29
    76da:	cf 93       	push	r28
    76dc:	cd b7       	in	r28, 0x3d	; 61
    76de:	de b7       	in	r29, 0x3e	; 62
    76e0:	29 97       	sbiw	r28, 0x09	; 9
    76e2:	0f b6       	in	r0, 0x3f	; 63
    76e4:	f8 94       	cli
    76e6:	de bf       	out	0x3e, r29	; 62
    76e8:	0f be       	out	0x3f, r0	; 63
    76ea:	cd bf       	out	0x3d, r28	; 61
    76ec:	9d 83       	std	Y+5, r25	; 0x05
    76ee:	8c 83       	std	Y+4, r24	; 0x04
    76f0:	4e 83       	std	Y+6, r20	; 0x06
    76f2:	5f 83       	std	Y+7, r21	; 0x07
    76f4:	68 87       	std	Y+8, r22	; 0x08
    76f6:	79 87       	std	Y+9, r23	; 0x09
{
  uint16_t baud_setting;
  bool use_u2x = true;
    76f8:	81 e0       	ldi	r24, 0x01	; 1
    76fa:	89 83       	std	Y+1, r24	; 0x01
  }
#endif

try_again:
  
  if (use_u2x) {
    76fc:	89 81       	ldd	r24, Y+1	; 0x01
    76fe:	88 23       	and	r24, r24
    7700:	49 f1       	breq	.+82     	; 0x7754 <_ZN14HardwareSerial5beginEm+0x7c>
    *_ucsra = 1 << _u2x;
    7702:	ec 81       	ldd	r30, Y+4	; 0x04
    7704:	fd 81       	ldd	r31, Y+5	; 0x05
    7706:	a4 89       	ldd	r26, Z+20	; 0x14
    7708:	b5 89       	ldd	r27, Z+21	; 0x15
    770a:	ec 81       	ldd	r30, Y+4	; 0x04
    770c:	fd 81       	ldd	r31, Y+5	; 0x05
    770e:	86 8d       	ldd	r24, Z+30	; 0x1e
    7710:	28 2f       	mov	r18, r24
    7712:	30 e0       	ldi	r19, 0x00	; 0
    7714:	81 e0       	ldi	r24, 0x01	; 1
    7716:	90 e0       	ldi	r25, 0x00	; 0
    7718:	02 c0       	rjmp	.+4      	; 0x771e <_ZN14HardwareSerial5beginEm+0x46>
    771a:	88 0f       	add	r24, r24
    771c:	99 1f       	adc	r25, r25
    771e:	2a 95       	dec	r18
    7720:	e2 f7       	brpl	.-8      	; 0x771a <_ZN14HardwareSerial5beginEm+0x42>
    7722:	8c 93       	st	X, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    7724:	80 e9       	ldi	r24, 0x90	; 144
    7726:	90 ed       	ldi	r25, 0xD0	; 208
    7728:	a3 e0       	ldi	r26, 0x03	; 3
    772a:	b0 e0       	ldi	r27, 0x00	; 0
    772c:	2e 81       	ldd	r18, Y+6	; 0x06
    772e:	3f 81       	ldd	r19, Y+7	; 0x07
    7730:	48 85       	ldd	r20, Y+8	; 0x08
    7732:	59 85       	ldd	r21, Y+9	; 0x09
    7734:	bc 01       	movw	r22, r24
    7736:	cd 01       	movw	r24, r26
    7738:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    773c:	da 01       	movw	r26, r20
    773e:	c9 01       	movw	r24, r18
    7740:	01 97       	sbiw	r24, 0x01	; 1
    7742:	a1 09       	sbc	r26, r1
    7744:	b1 09       	sbc	r27, r1
    7746:	b6 95       	lsr	r27
    7748:	a7 95       	ror	r26
    774a:	97 95       	ror	r25
    774c:	87 95       	ror	r24
    774e:	9b 83       	std	Y+3, r25	; 0x03
    7750:	8a 83       	std	Y+2, r24	; 0x02
    7752:	1d c0       	rjmp	.+58     	; 0x778e <_ZN14HardwareSerial5beginEm+0xb6>
  } else {
    *_ucsra = 0;
    7754:	ec 81       	ldd	r30, Y+4	; 0x04
    7756:	fd 81       	ldd	r31, Y+5	; 0x05
    7758:	04 88       	ldd	r0, Z+20	; 0x14
    775a:	f5 89       	ldd	r31, Z+21	; 0x15
    775c:	e0 2d       	mov	r30, r0
    775e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    7760:	88 e4       	ldi	r24, 0x48	; 72
    7762:	98 ee       	ldi	r25, 0xE8	; 232
    7764:	a1 e0       	ldi	r26, 0x01	; 1
    7766:	b0 e0       	ldi	r27, 0x00	; 0
    7768:	2e 81       	ldd	r18, Y+6	; 0x06
    776a:	3f 81       	ldd	r19, Y+7	; 0x07
    776c:	48 85       	ldd	r20, Y+8	; 0x08
    776e:	59 85       	ldd	r21, Y+9	; 0x09
    7770:	bc 01       	movw	r22, r24
    7772:	cd 01       	movw	r24, r26
    7774:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    7778:	da 01       	movw	r26, r20
    777a:	c9 01       	movw	r24, r18
    777c:	01 97       	sbiw	r24, 0x01	; 1
    777e:	a1 09       	sbc	r26, r1
    7780:	b1 09       	sbc	r27, r1
    7782:	b6 95       	lsr	r27
    7784:	a7 95       	ror	r26
    7786:	97 95       	ror	r25
    7788:	87 95       	ror	r24
    778a:	9b 83       	std	Y+3, r25	; 0x03
    778c:	8a 83       	std	Y+2, r24	; 0x02
  }
  
  if ((baud_setting > 4095) && use_u2x)
    778e:	8a 81       	ldd	r24, Y+2	; 0x02
    7790:	9b 81       	ldd	r25, Y+3	; 0x03
    7792:	20 e1       	ldi	r18, 0x10	; 16
    7794:	80 30       	cpi	r24, 0x00	; 0
    7796:	92 07       	cpc	r25, r18
    7798:	28 f0       	brcs	.+10     	; 0x77a4 <_ZN14HardwareSerial5beginEm+0xcc>
    779a:	89 81       	ldd	r24, Y+1	; 0x01
    779c:	88 23       	and	r24, r24
    779e:	11 f0       	breq	.+4      	; 0x77a4 <_ZN14HardwareSerial5beginEm+0xcc>
  {
    use_u2x = false;
    77a0:	19 82       	std	Y+1, r1	; 0x01
    77a2:	ac cf       	rjmp	.-168    	; 0x76fc <_ZN14HardwareSerial5beginEm+0x24>
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    77a4:	ec 81       	ldd	r30, Y+4	; 0x04
    77a6:	fd 81       	ldd	r31, Y+5	; 0x05
    77a8:	00 88       	ldd	r0, Z+16	; 0x10
    77aa:	f1 89       	ldd	r31, Z+17	; 0x11
    77ac:	e0 2d       	mov	r30, r0
    77ae:	8a 81       	ldd	r24, Y+2	; 0x02
    77b0:	9b 81       	ldd	r25, Y+3	; 0x03
    77b2:	89 2f       	mov	r24, r25
    77b4:	99 27       	eor	r25, r25
    77b6:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
    77b8:	ec 81       	ldd	r30, Y+4	; 0x04
    77ba:	fd 81       	ldd	r31, Y+5	; 0x05
    77bc:	02 88       	ldd	r0, Z+18	; 0x12
    77be:	f3 89       	ldd	r31, Z+19	; 0x13
    77c0:	e0 2d       	mov	r30, r0
    77c2:	8a 81       	ldd	r24, Y+2	; 0x02
    77c4:	80 83       	st	Z, r24

  sbi(*_ucsrb, _rxen);
    77c6:	ec 81       	ldd	r30, Y+4	; 0x04
    77c8:	fd 81       	ldd	r31, Y+5	; 0x05
    77ca:	a6 89       	ldd	r26, Z+22	; 0x16
    77cc:	b7 89       	ldd	r27, Z+23	; 0x17
    77ce:	ec 81       	ldd	r30, Y+4	; 0x04
    77d0:	fd 81       	ldd	r31, Y+5	; 0x05
    77d2:	06 88       	ldd	r0, Z+22	; 0x16
    77d4:	f7 89       	ldd	r31, Z+23	; 0x17
    77d6:	e0 2d       	mov	r30, r0
    77d8:	80 81       	ld	r24, Z
    77da:	48 2f       	mov	r20, r24
    77dc:	ec 81       	ldd	r30, Y+4	; 0x04
    77de:	fd 81       	ldd	r31, Y+5	; 0x05
    77e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    77e2:	28 2f       	mov	r18, r24
    77e4:	30 e0       	ldi	r19, 0x00	; 0
    77e6:	81 e0       	ldi	r24, 0x01	; 1
    77e8:	90 e0       	ldi	r25, 0x00	; 0
    77ea:	02 c0       	rjmp	.+4      	; 0x77f0 <_ZN14HardwareSerial5beginEm+0x118>
    77ec:	88 0f       	add	r24, r24
    77ee:	99 1f       	adc	r25, r25
    77f0:	2a 95       	dec	r18
    77f2:	e2 f7       	brpl	.-8      	; 0x77ec <_ZN14HardwareSerial5beginEm+0x114>
    77f4:	84 2b       	or	r24, r20
    77f6:	8c 93       	st	X, r24
  sbi(*_ucsrb, _txen);
    77f8:	ec 81       	ldd	r30, Y+4	; 0x04
    77fa:	fd 81       	ldd	r31, Y+5	; 0x05
    77fc:	a6 89       	ldd	r26, Z+22	; 0x16
    77fe:	b7 89       	ldd	r27, Z+23	; 0x17
    7800:	ec 81       	ldd	r30, Y+4	; 0x04
    7802:	fd 81       	ldd	r31, Y+5	; 0x05
    7804:	06 88       	ldd	r0, Z+22	; 0x16
    7806:	f7 89       	ldd	r31, Z+23	; 0x17
    7808:	e0 2d       	mov	r30, r0
    780a:	80 81       	ld	r24, Z
    780c:	48 2f       	mov	r20, r24
    780e:	ec 81       	ldd	r30, Y+4	; 0x04
    7810:	fd 81       	ldd	r31, Y+5	; 0x05
    7812:	83 8d       	ldd	r24, Z+27	; 0x1b
    7814:	28 2f       	mov	r18, r24
    7816:	30 e0       	ldi	r19, 0x00	; 0
    7818:	81 e0       	ldi	r24, 0x01	; 1
    781a:	90 e0       	ldi	r25, 0x00	; 0
    781c:	02 c0       	rjmp	.+4      	; 0x7822 <_ZN14HardwareSerial5beginEm+0x14a>
    781e:	88 0f       	add	r24, r24
    7820:	99 1f       	adc	r25, r25
    7822:	2a 95       	dec	r18
    7824:	e2 f7       	brpl	.-8      	; 0x781e <_ZN14HardwareSerial5beginEm+0x146>
    7826:	84 2b       	or	r24, r20
    7828:	8c 93       	st	X, r24
  sbi(*_ucsrb, _rxcie);
    782a:	ec 81       	ldd	r30, Y+4	; 0x04
    782c:	fd 81       	ldd	r31, Y+5	; 0x05
    782e:	a6 89       	ldd	r26, Z+22	; 0x16
    7830:	b7 89       	ldd	r27, Z+23	; 0x17
    7832:	ec 81       	ldd	r30, Y+4	; 0x04
    7834:	fd 81       	ldd	r31, Y+5	; 0x05
    7836:	06 88       	ldd	r0, Z+22	; 0x16
    7838:	f7 89       	ldd	r31, Z+23	; 0x17
    783a:	e0 2d       	mov	r30, r0
    783c:	80 81       	ld	r24, Z
    783e:	48 2f       	mov	r20, r24
    7840:	ec 81       	ldd	r30, Y+4	; 0x04
    7842:	fd 81       	ldd	r31, Y+5	; 0x05
    7844:	84 8d       	ldd	r24, Z+28	; 0x1c
    7846:	28 2f       	mov	r18, r24
    7848:	30 e0       	ldi	r19, 0x00	; 0
    784a:	81 e0       	ldi	r24, 0x01	; 1
    784c:	90 e0       	ldi	r25, 0x00	; 0
    784e:	02 c0       	rjmp	.+4      	; 0x7854 <_ZN14HardwareSerial5beginEm+0x17c>
    7850:	88 0f       	add	r24, r24
    7852:	99 1f       	adc	r25, r25
    7854:	2a 95       	dec	r18
    7856:	e2 f7       	brpl	.-8      	; 0x7850 <_ZN14HardwareSerial5beginEm+0x178>
    7858:	84 2b       	or	r24, r20
    785a:	8c 93       	st	X, r24
  cbi(*_ucsrb, _udrie);
    785c:	ec 81       	ldd	r30, Y+4	; 0x04
    785e:	fd 81       	ldd	r31, Y+5	; 0x05
    7860:	a6 89       	ldd	r26, Z+22	; 0x16
    7862:	b7 89       	ldd	r27, Z+23	; 0x17
    7864:	ec 81       	ldd	r30, Y+4	; 0x04
    7866:	fd 81       	ldd	r31, Y+5	; 0x05
    7868:	06 88       	ldd	r0, Z+22	; 0x16
    786a:	f7 89       	ldd	r31, Z+23	; 0x17
    786c:	e0 2d       	mov	r30, r0
    786e:	80 81       	ld	r24, Z
    7870:	48 2f       	mov	r20, r24
    7872:	ec 81       	ldd	r30, Y+4	; 0x04
    7874:	fd 81       	ldd	r31, Y+5	; 0x05
    7876:	85 8d       	ldd	r24, Z+29	; 0x1d
    7878:	28 2f       	mov	r18, r24
    787a:	30 e0       	ldi	r19, 0x00	; 0
    787c:	81 e0       	ldi	r24, 0x01	; 1
    787e:	90 e0       	ldi	r25, 0x00	; 0
    7880:	02 2e       	mov	r0, r18
    7882:	02 c0       	rjmp	.+4      	; 0x7888 <_ZN14HardwareSerial5beginEm+0x1b0>
    7884:	88 0f       	add	r24, r24
    7886:	99 1f       	adc	r25, r25
    7888:	0a 94       	dec	r0
    788a:	e2 f7       	brpl	.-8      	; 0x7884 <_ZN14HardwareSerial5beginEm+0x1ac>
    788c:	80 95       	com	r24
    788e:	84 23       	and	r24, r20
    7890:	8c 93       	st	X, r24
}
    7892:	29 96       	adiw	r28, 0x09	; 9
    7894:	0f b6       	in	r0, 0x3f	; 63
    7896:	f8 94       	cli
    7898:	de bf       	out	0x3e, r29	; 62
    789a:	0f be       	out	0x3f, r0	; 63
    789c:	cd bf       	out	0x3d, r28	; 61
    789e:	cf 91       	pop	r28
    78a0:	df 91       	pop	r29
    78a2:	08 95       	ret

000078a4 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
    78a4:	df 93       	push	r29
    78a6:	cf 93       	push	r28
    78a8:	00 d0       	rcall	.+0      	; 0x78aa <_ZN14HardwareSerial3endEv+0x6>
    78aa:	0f 92       	push	r0
    78ac:	cd b7       	in	r28, 0x3d	; 61
    78ae:	de b7       	in	r29, 0x3e	; 62
    78b0:	9a 83       	std	Y+2, r25	; 0x02
    78b2:	89 83       	std	Y+1, r24	; 0x01
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    78b4:	e9 81       	ldd	r30, Y+1	; 0x01
    78b6:	fa 81       	ldd	r31, Y+2	; 0x02
    78b8:	86 85       	ldd	r24, Z+14	; 0x0e
    78ba:	97 85       	ldd	r25, Z+15	; 0x0f
    78bc:	fc 01       	movw	r30, r24
    78be:	e0 5c       	subi	r30, 0xC0	; 192
    78c0:	ff 4f       	sbci	r31, 0xFF	; 255
    78c2:	20 81       	ld	r18, Z
    78c4:	31 81       	ldd	r19, Z+1	; 0x01
    78c6:	e9 81       	ldd	r30, Y+1	; 0x01
    78c8:	fa 81       	ldd	r31, Y+2	; 0x02
    78ca:	86 85       	ldd	r24, Z+14	; 0x0e
    78cc:	97 85       	ldd	r25, Z+15	; 0x0f
    78ce:	fc 01       	movw	r30, r24
    78d0:	ee 5b       	subi	r30, 0xBE	; 190
    78d2:	ff 4f       	sbci	r31, 0xFF	; 255
    78d4:	80 81       	ld	r24, Z
    78d6:	91 81       	ldd	r25, Z+1	; 0x01
    78d8:	1b 82       	std	Y+3, r1	; 0x03
    78da:	28 17       	cp	r18, r24
    78dc:	39 07       	cpc	r19, r25
    78de:	11 f0       	breq	.+4      	; 0x78e4 <_ZN14HardwareSerial3endEv+0x40>
    78e0:	81 e0       	ldi	r24, 0x01	; 1
    78e2:	8b 83       	std	Y+3, r24	; 0x03
    78e4:	8b 81       	ldd	r24, Y+3	; 0x03
    78e6:	88 23       	and	r24, r24
    78e8:	29 f7       	brne	.-54     	; 0x78b4 <_ZN14HardwareSerial3endEv+0x10>
    ;

  cbi(*_ucsrb, _rxen);
    78ea:	e9 81       	ldd	r30, Y+1	; 0x01
    78ec:	fa 81       	ldd	r31, Y+2	; 0x02
    78ee:	a6 89       	ldd	r26, Z+22	; 0x16
    78f0:	b7 89       	ldd	r27, Z+23	; 0x17
    78f2:	e9 81       	ldd	r30, Y+1	; 0x01
    78f4:	fa 81       	ldd	r31, Y+2	; 0x02
    78f6:	06 88       	ldd	r0, Z+22	; 0x16
    78f8:	f7 89       	ldd	r31, Z+23	; 0x17
    78fa:	e0 2d       	mov	r30, r0
    78fc:	80 81       	ld	r24, Z
    78fe:	48 2f       	mov	r20, r24
    7900:	e9 81       	ldd	r30, Y+1	; 0x01
    7902:	fa 81       	ldd	r31, Y+2	; 0x02
    7904:	82 8d       	ldd	r24, Z+26	; 0x1a
    7906:	28 2f       	mov	r18, r24
    7908:	30 e0       	ldi	r19, 0x00	; 0
    790a:	81 e0       	ldi	r24, 0x01	; 1
    790c:	90 e0       	ldi	r25, 0x00	; 0
    790e:	02 c0       	rjmp	.+4      	; 0x7914 <_ZN14HardwareSerial3endEv+0x70>
    7910:	88 0f       	add	r24, r24
    7912:	99 1f       	adc	r25, r25
    7914:	2a 95       	dec	r18
    7916:	e2 f7       	brpl	.-8      	; 0x7910 <_ZN14HardwareSerial3endEv+0x6c>
    7918:	80 95       	com	r24
    791a:	84 23       	and	r24, r20
    791c:	8c 93       	st	X, r24
  cbi(*_ucsrb, _txen);
    791e:	e9 81       	ldd	r30, Y+1	; 0x01
    7920:	fa 81       	ldd	r31, Y+2	; 0x02
    7922:	a6 89       	ldd	r26, Z+22	; 0x16
    7924:	b7 89       	ldd	r27, Z+23	; 0x17
    7926:	e9 81       	ldd	r30, Y+1	; 0x01
    7928:	fa 81       	ldd	r31, Y+2	; 0x02
    792a:	06 88       	ldd	r0, Z+22	; 0x16
    792c:	f7 89       	ldd	r31, Z+23	; 0x17
    792e:	e0 2d       	mov	r30, r0
    7930:	80 81       	ld	r24, Z
    7932:	48 2f       	mov	r20, r24
    7934:	e9 81       	ldd	r30, Y+1	; 0x01
    7936:	fa 81       	ldd	r31, Y+2	; 0x02
    7938:	83 8d       	ldd	r24, Z+27	; 0x1b
    793a:	28 2f       	mov	r18, r24
    793c:	30 e0       	ldi	r19, 0x00	; 0
    793e:	81 e0       	ldi	r24, 0x01	; 1
    7940:	90 e0       	ldi	r25, 0x00	; 0
    7942:	02 c0       	rjmp	.+4      	; 0x7948 <_ZN14HardwareSerial3endEv+0xa4>
    7944:	88 0f       	add	r24, r24
    7946:	99 1f       	adc	r25, r25
    7948:	2a 95       	dec	r18
    794a:	e2 f7       	brpl	.-8      	; 0x7944 <_ZN14HardwareSerial3endEv+0xa0>
    794c:	80 95       	com	r24
    794e:	84 23       	and	r24, r20
    7950:	8c 93       	st	X, r24
  cbi(*_ucsrb, _rxcie);  
    7952:	e9 81       	ldd	r30, Y+1	; 0x01
    7954:	fa 81       	ldd	r31, Y+2	; 0x02
    7956:	a6 89       	ldd	r26, Z+22	; 0x16
    7958:	b7 89       	ldd	r27, Z+23	; 0x17
    795a:	e9 81       	ldd	r30, Y+1	; 0x01
    795c:	fa 81       	ldd	r31, Y+2	; 0x02
    795e:	06 88       	ldd	r0, Z+22	; 0x16
    7960:	f7 89       	ldd	r31, Z+23	; 0x17
    7962:	e0 2d       	mov	r30, r0
    7964:	80 81       	ld	r24, Z
    7966:	48 2f       	mov	r20, r24
    7968:	e9 81       	ldd	r30, Y+1	; 0x01
    796a:	fa 81       	ldd	r31, Y+2	; 0x02
    796c:	84 8d       	ldd	r24, Z+28	; 0x1c
    796e:	28 2f       	mov	r18, r24
    7970:	30 e0       	ldi	r19, 0x00	; 0
    7972:	81 e0       	ldi	r24, 0x01	; 1
    7974:	90 e0       	ldi	r25, 0x00	; 0
    7976:	02 c0       	rjmp	.+4      	; 0x797c <_ZN14HardwareSerial3endEv+0xd8>
    7978:	88 0f       	add	r24, r24
    797a:	99 1f       	adc	r25, r25
    797c:	2a 95       	dec	r18
    797e:	e2 f7       	brpl	.-8      	; 0x7978 <_ZN14HardwareSerial3endEv+0xd4>
    7980:	80 95       	com	r24
    7982:	84 23       	and	r24, r20
    7984:	8c 93       	st	X, r24
  cbi(*_ucsrb, _udrie);
    7986:	e9 81       	ldd	r30, Y+1	; 0x01
    7988:	fa 81       	ldd	r31, Y+2	; 0x02
    798a:	a6 89       	ldd	r26, Z+22	; 0x16
    798c:	b7 89       	ldd	r27, Z+23	; 0x17
    798e:	e9 81       	ldd	r30, Y+1	; 0x01
    7990:	fa 81       	ldd	r31, Y+2	; 0x02
    7992:	06 88       	ldd	r0, Z+22	; 0x16
    7994:	f7 89       	ldd	r31, Z+23	; 0x17
    7996:	e0 2d       	mov	r30, r0
    7998:	80 81       	ld	r24, Z
    799a:	48 2f       	mov	r20, r24
    799c:	e9 81       	ldd	r30, Y+1	; 0x01
    799e:	fa 81       	ldd	r31, Y+2	; 0x02
    79a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    79a2:	28 2f       	mov	r18, r24
    79a4:	30 e0       	ldi	r19, 0x00	; 0
    79a6:	81 e0       	ldi	r24, 0x01	; 1
    79a8:	90 e0       	ldi	r25, 0x00	; 0
    79aa:	02 c0       	rjmp	.+4      	; 0x79b0 <_ZN14HardwareSerial3endEv+0x10c>
    79ac:	88 0f       	add	r24, r24
    79ae:	99 1f       	adc	r25, r25
    79b0:	2a 95       	dec	r18
    79b2:	e2 f7       	brpl	.-8      	; 0x79ac <_ZN14HardwareSerial3endEv+0x108>
    79b4:	80 95       	com	r24
    79b6:	84 23       	and	r24, r20
    79b8:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    79ba:	e9 81       	ldd	r30, Y+1	; 0x01
    79bc:	fa 81       	ldd	r31, Y+2	; 0x02
    79be:	24 85       	ldd	r18, Z+12	; 0x0c
    79c0:	35 85       	ldd	r19, Z+13	; 0x0d
    79c2:	e9 81       	ldd	r30, Y+1	; 0x01
    79c4:	fa 81       	ldd	r31, Y+2	; 0x02
    79c6:	84 85       	ldd	r24, Z+12	; 0x0c
    79c8:	95 85       	ldd	r25, Z+13	; 0x0d
    79ca:	fc 01       	movw	r30, r24
    79cc:	ee 5b       	subi	r30, 0xBE	; 190
    79ce:	ff 4f       	sbci	r31, 0xFF	; 255
    79d0:	80 81       	ld	r24, Z
    79d2:	91 81       	ldd	r25, Z+1	; 0x01
    79d4:	f9 01       	movw	r30, r18
    79d6:	e0 5c       	subi	r30, 0xC0	; 192
    79d8:	ff 4f       	sbci	r31, 0xFF	; 255
    79da:	91 83       	std	Z+1, r25	; 0x01
    79dc:	80 83       	st	Z, r24
}
    79de:	0f 90       	pop	r0
    79e0:	0f 90       	pop	r0
    79e2:	0f 90       	pop	r0
    79e4:	cf 91       	pop	r28
    79e6:	df 91       	pop	r29
    79e8:	08 95       	ret

000079ea <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
    79ea:	df 93       	push	r29
    79ec:	cf 93       	push	r28
    79ee:	00 d0       	rcall	.+0      	; 0x79f0 <_ZN14HardwareSerial9availableEv+0x6>
    79f0:	cd b7       	in	r28, 0x3d	; 61
    79f2:	de b7       	in	r29, 0x3e	; 62
    79f4:	9a 83       	std	Y+2, r25	; 0x02
    79f6:	89 83       	std	Y+1, r24	; 0x01
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    79f8:	e9 81       	ldd	r30, Y+1	; 0x01
    79fa:	fa 81       	ldd	r31, Y+2	; 0x02
    79fc:	84 85       	ldd	r24, Z+12	; 0x0c
    79fe:	95 85       	ldd	r25, Z+13	; 0x0d
    7a00:	fc 01       	movw	r30, r24
    7a02:	e0 5c       	subi	r30, 0xC0	; 192
    7a04:	ff 4f       	sbci	r31, 0xFF	; 255
    7a06:	20 81       	ld	r18, Z
    7a08:	31 81       	ldd	r19, Z+1	; 0x01
    7a0a:	e9 81       	ldd	r30, Y+1	; 0x01
    7a0c:	fa 81       	ldd	r31, Y+2	; 0x02
    7a0e:	84 85       	ldd	r24, Z+12	; 0x0c
    7a10:	95 85       	ldd	r25, Z+13	; 0x0d
    7a12:	fc 01       	movw	r30, r24
    7a14:	ee 5b       	subi	r30, 0xBE	; 190
    7a16:	ff 4f       	sbci	r31, 0xFF	; 255
    7a18:	80 81       	ld	r24, Z
    7a1a:	91 81       	ldd	r25, Z+1	; 0x01
    7a1c:	a9 01       	movw	r20, r18
    7a1e:	48 1b       	sub	r20, r24
    7a20:	59 0b       	sbc	r21, r25
    7a22:	ca 01       	movw	r24, r20
    7a24:	80 5c       	subi	r24, 0xC0	; 192
    7a26:	9f 4f       	sbci	r25, 0xFF	; 255
    7a28:	8f 73       	andi	r24, 0x3F	; 63
    7a2a:	90 70       	andi	r25, 0x00	; 0
}
    7a2c:	0f 90       	pop	r0
    7a2e:	0f 90       	pop	r0
    7a30:	cf 91       	pop	r28
    7a32:	df 91       	pop	r29
    7a34:	08 95       	ret

00007a36 <_Z14serialEventRunv>:
  }
#elif defined(SIG_USART3_RECV)
  #error SIG_USART3_RECV
#endif

void serialEventRun(void)
    7a36:	df 93       	push	r29
    7a38:	cf 93       	push	r28
    7a3a:	0f 92       	push	r0
    7a3c:	cd b7       	in	r28, 0x3d	; 61
    7a3e:	de b7       	in	r29, 0x3e	; 62
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    7a40:	8c e1       	ldi	r24, 0x1C	; 28
    7a42:	96 e0       	ldi	r25, 0x06	; 6
    7a44:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <_ZN14HardwareSerial9availableEv>
    7a48:	19 82       	std	Y+1, r1	; 0x01
    7a4a:	00 97       	sbiw	r24, 0x00	; 0
    7a4c:	11 f0       	breq	.+4      	; 0x7a52 <_Z14serialEventRunv+0x1c>
    7a4e:	81 e0       	ldi	r24, 0x01	; 1
    7a50:	89 83       	std	Y+1, r24	; 0x01
    7a52:	89 81       	ldd	r24, Y+1	; 0x01
    7a54:	88 23       	and	r24, r24
    7a56:	11 f0       	breq	.+4      	; 0x7a5c <_Z14serialEventRunv+0x26>
    7a58:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <_Z11serialEventv>
  if (Serial2.available()) serialEvent2();
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
#endif
}
    7a5c:	0f 90       	pop	r0
    7a5e:	cf 91       	pop	r28
    7a60:	df 91       	pop	r29
    7a62:	08 95       	ret

00007a64 <_ZN14HardwareSerial4peekEv>:
int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
    7a64:	df 93       	push	r29
    7a66:	cf 93       	push	r28
    7a68:	00 d0       	rcall	.+0      	; 0x7a6a <_ZN14HardwareSerial4peekEv+0x6>
    7a6a:	00 d0       	rcall	.+0      	; 0x7a6c <_ZN14HardwareSerial4peekEv+0x8>
    7a6c:	0f 92       	push	r0
    7a6e:	cd b7       	in	r28, 0x3d	; 61
    7a70:	de b7       	in	r29, 0x3e	; 62
    7a72:	9a 83       	std	Y+2, r25	; 0x02
    7a74:	89 83       	std	Y+1, r24	; 0x01
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    7a76:	e9 81       	ldd	r30, Y+1	; 0x01
    7a78:	fa 81       	ldd	r31, Y+2	; 0x02
    7a7a:	84 85       	ldd	r24, Z+12	; 0x0c
    7a7c:	95 85       	ldd	r25, Z+13	; 0x0d
    7a7e:	fc 01       	movw	r30, r24
    7a80:	e0 5c       	subi	r30, 0xC0	; 192
    7a82:	ff 4f       	sbci	r31, 0xFF	; 255
    7a84:	20 81       	ld	r18, Z
    7a86:	31 81       	ldd	r19, Z+1	; 0x01
    7a88:	e9 81       	ldd	r30, Y+1	; 0x01
    7a8a:	fa 81       	ldd	r31, Y+2	; 0x02
    7a8c:	84 85       	ldd	r24, Z+12	; 0x0c
    7a8e:	95 85       	ldd	r25, Z+13	; 0x0d
    7a90:	fc 01       	movw	r30, r24
    7a92:	ee 5b       	subi	r30, 0xBE	; 190
    7a94:	ff 4f       	sbci	r31, 0xFF	; 255
    7a96:	80 81       	ld	r24, Z
    7a98:	91 81       	ldd	r25, Z+1	; 0x01
    7a9a:	1d 82       	std	Y+5, r1	; 0x05
    7a9c:	28 17       	cp	r18, r24
    7a9e:	39 07       	cpc	r19, r25
    7aa0:	11 f4       	brne	.+4      	; 0x7aa6 <_ZN14HardwareSerial4peekEv+0x42>
    7aa2:	21 e0       	ldi	r18, 0x01	; 1
    7aa4:	2d 83       	std	Y+5, r18	; 0x05
    7aa6:	3d 81       	ldd	r19, Y+5	; 0x05
    7aa8:	33 23       	and	r19, r19
    7aaa:	29 f0       	breq	.+10     	; 0x7ab6 <_ZN14HardwareSerial4peekEv+0x52>
    return -1;
    7aac:	8f ef       	ldi	r24, 0xFF	; 255
    7aae:	9f ef       	ldi	r25, 0xFF	; 255
    7ab0:	9c 83       	std	Y+4, r25	; 0x04
    7ab2:	8b 83       	std	Y+3, r24	; 0x03
    7ab4:	15 c0       	rjmp	.+42     	; 0x7ae0 <_ZN14HardwareSerial4peekEv+0x7c>
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    7ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    7ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    7aba:	24 85       	ldd	r18, Z+12	; 0x0c
    7abc:	35 85       	ldd	r19, Z+13	; 0x0d
    7abe:	e9 81       	ldd	r30, Y+1	; 0x01
    7ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    7ac2:	84 85       	ldd	r24, Z+12	; 0x0c
    7ac4:	95 85       	ldd	r25, Z+13	; 0x0d
    7ac6:	fc 01       	movw	r30, r24
    7ac8:	ee 5b       	subi	r30, 0xBE	; 190
    7aca:	ff 4f       	sbci	r31, 0xFF	; 255
    7acc:	80 81       	ld	r24, Z
    7ace:	91 81       	ldd	r25, Z+1	; 0x01
    7ad0:	f9 01       	movw	r30, r18
    7ad2:	e8 0f       	add	r30, r24
    7ad4:	f9 1f       	adc	r31, r25
    7ad6:	80 81       	ld	r24, Z
    7ad8:	28 2f       	mov	r18, r24
    7ada:	30 e0       	ldi	r19, 0x00	; 0
    7adc:	3c 83       	std	Y+4, r19	; 0x04
    7ade:	2b 83       	std	Y+3, r18	; 0x03
    7ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    7ae2:	9c 81       	ldd	r25, Y+4	; 0x04
  }
}
    7ae4:	0f 90       	pop	r0
    7ae6:	0f 90       	pop	r0
    7ae8:	0f 90       	pop	r0
    7aea:	0f 90       	pop	r0
    7aec:	0f 90       	pop	r0
    7aee:	cf 91       	pop	r28
    7af0:	df 91       	pop	r29
    7af2:	08 95       	ret

00007af4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
    7af4:	df 93       	push	r29
    7af6:	cf 93       	push	r28
    7af8:	00 d0       	rcall	.+0      	; 0x7afa <_ZN14HardwareSerial4readEv+0x6>
    7afa:	00 d0       	rcall	.+0      	; 0x7afc <_ZN14HardwareSerial4readEv+0x8>
    7afc:	00 d0       	rcall	.+0      	; 0x7afe <_ZN14HardwareSerial4readEv+0xa>
    7afe:	cd b7       	in	r28, 0x3d	; 61
    7b00:	de b7       	in	r29, 0x3e	; 62
    7b02:	9b 83       	std	Y+3, r25	; 0x03
    7b04:	8a 83       	std	Y+2, r24	; 0x02
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    7b06:	ea 81       	ldd	r30, Y+2	; 0x02
    7b08:	fb 81       	ldd	r31, Y+3	; 0x03
    7b0a:	84 85       	ldd	r24, Z+12	; 0x0c
    7b0c:	95 85       	ldd	r25, Z+13	; 0x0d
    7b0e:	fc 01       	movw	r30, r24
    7b10:	e0 5c       	subi	r30, 0xC0	; 192
    7b12:	ff 4f       	sbci	r31, 0xFF	; 255
    7b14:	20 81       	ld	r18, Z
    7b16:	31 81       	ldd	r19, Z+1	; 0x01
    7b18:	ea 81       	ldd	r30, Y+2	; 0x02
    7b1a:	fb 81       	ldd	r31, Y+3	; 0x03
    7b1c:	84 85       	ldd	r24, Z+12	; 0x0c
    7b1e:	95 85       	ldd	r25, Z+13	; 0x0d
    7b20:	fc 01       	movw	r30, r24
    7b22:	ee 5b       	subi	r30, 0xBE	; 190
    7b24:	ff 4f       	sbci	r31, 0xFF	; 255
    7b26:	80 81       	ld	r24, Z
    7b28:	91 81       	ldd	r25, Z+1	; 0x01
    7b2a:	1e 82       	std	Y+6, r1	; 0x06
    7b2c:	28 17       	cp	r18, r24
    7b2e:	39 07       	cpc	r19, r25
    7b30:	11 f4       	brne	.+4      	; 0x7b36 <_ZN14HardwareSerial4readEv+0x42>
    7b32:	21 e0       	ldi	r18, 0x01	; 1
    7b34:	2e 83       	std	Y+6, r18	; 0x06
    7b36:	3e 81       	ldd	r19, Y+6	; 0x06
    7b38:	33 23       	and	r19, r19
    7b3a:	29 f0       	breq	.+10     	; 0x7b46 <_ZN14HardwareSerial4readEv+0x52>
    return -1;
    7b3c:	8f ef       	ldi	r24, 0xFF	; 255
    7b3e:	9f ef       	ldi	r25, 0xFF	; 255
    7b40:	9d 83       	std	Y+5, r25	; 0x05
    7b42:	8c 83       	std	Y+4, r24	; 0x04
    7b44:	2c c0       	rjmp	.+88     	; 0x7b9e <_ZN14HardwareSerial4readEv+0xaa>
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    7b46:	ea 81       	ldd	r30, Y+2	; 0x02
    7b48:	fb 81       	ldd	r31, Y+3	; 0x03
    7b4a:	24 85       	ldd	r18, Z+12	; 0x0c
    7b4c:	35 85       	ldd	r19, Z+13	; 0x0d
    7b4e:	ea 81       	ldd	r30, Y+2	; 0x02
    7b50:	fb 81       	ldd	r31, Y+3	; 0x03
    7b52:	84 85       	ldd	r24, Z+12	; 0x0c
    7b54:	95 85       	ldd	r25, Z+13	; 0x0d
    7b56:	fc 01       	movw	r30, r24
    7b58:	ee 5b       	subi	r30, 0xBE	; 190
    7b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    7b5c:	80 81       	ld	r24, Z
    7b5e:	91 81       	ldd	r25, Z+1	; 0x01
    7b60:	f9 01       	movw	r30, r18
    7b62:	e8 0f       	add	r30, r24
    7b64:	f9 1f       	adc	r31, r25
    7b66:	80 81       	ld	r24, Z
    7b68:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    7b6a:	ea 81       	ldd	r30, Y+2	; 0x02
    7b6c:	fb 81       	ldd	r31, Y+3	; 0x03
    7b6e:	24 85       	ldd	r18, Z+12	; 0x0c
    7b70:	35 85       	ldd	r19, Z+13	; 0x0d
    7b72:	ea 81       	ldd	r30, Y+2	; 0x02
    7b74:	fb 81       	ldd	r31, Y+3	; 0x03
    7b76:	84 85       	ldd	r24, Z+12	; 0x0c
    7b78:	95 85       	ldd	r25, Z+13	; 0x0d
    7b7a:	fc 01       	movw	r30, r24
    7b7c:	ee 5b       	subi	r30, 0xBE	; 190
    7b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    7b80:	80 81       	ld	r24, Z
    7b82:	91 81       	ldd	r25, Z+1	; 0x01
    7b84:	01 96       	adiw	r24, 0x01	; 1
    7b86:	8f 73       	andi	r24, 0x3F	; 63
    7b88:	90 70       	andi	r25, 0x00	; 0
    7b8a:	f9 01       	movw	r30, r18
    7b8c:	ee 5b       	subi	r30, 0xBE	; 190
    7b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    7b90:	91 83       	std	Z+1, r25	; 0x01
    7b92:	80 83       	st	Z, r24
    return c;
    7b94:	89 81       	ldd	r24, Y+1	; 0x01
    7b96:	28 2f       	mov	r18, r24
    7b98:	30 e0       	ldi	r19, 0x00	; 0
    7b9a:	3d 83       	std	Y+5, r19	; 0x05
    7b9c:	2c 83       	std	Y+4, r18	; 0x04
    7b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    7ba0:	9d 81       	ldd	r25, Y+5	; 0x05
  }
}
    7ba2:	26 96       	adiw	r28, 0x06	; 6
    7ba4:	0f b6       	in	r0, 0x3f	; 63
    7ba6:	f8 94       	cli
    7ba8:	de bf       	out	0x3e, r29	; 62
    7baa:	0f be       	out	0x3f, r0	; 63
    7bac:	cd bf       	out	0x3d, r28	; 61
    7bae:	cf 91       	pop	r28
    7bb0:	df 91       	pop	r29
    7bb2:	08 95       	ret

00007bb4 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
    7bb4:	df 93       	push	r29
    7bb6:	cf 93       	push	r28
    7bb8:	00 d0       	rcall	.+0      	; 0x7bba <_ZN14HardwareSerial5flushEv+0x6>
    7bba:	0f 92       	push	r0
    7bbc:	cd b7       	in	r28, 0x3d	; 61
    7bbe:	de b7       	in	r29, 0x3e	; 62
    7bc0:	9a 83       	std	Y+2, r25	; 0x02
    7bc2:	89 83       	std	Y+1, r24	; 0x01
{
  while (_tx_buffer->head != _tx_buffer->tail)
    7bc4:	e9 81       	ldd	r30, Y+1	; 0x01
    7bc6:	fa 81       	ldd	r31, Y+2	; 0x02
    7bc8:	86 85       	ldd	r24, Z+14	; 0x0e
    7bca:	97 85       	ldd	r25, Z+15	; 0x0f
    7bcc:	fc 01       	movw	r30, r24
    7bce:	e0 5c       	subi	r30, 0xC0	; 192
    7bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    7bd2:	20 81       	ld	r18, Z
    7bd4:	31 81       	ldd	r19, Z+1	; 0x01
    7bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    7bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    7bda:	86 85       	ldd	r24, Z+14	; 0x0e
    7bdc:	97 85       	ldd	r25, Z+15	; 0x0f
    7bde:	fc 01       	movw	r30, r24
    7be0:	ee 5b       	subi	r30, 0xBE	; 190
    7be2:	ff 4f       	sbci	r31, 0xFF	; 255
    7be4:	80 81       	ld	r24, Z
    7be6:	91 81       	ldd	r25, Z+1	; 0x01
    7be8:	1b 82       	std	Y+3, r1	; 0x03
    7bea:	28 17       	cp	r18, r24
    7bec:	39 07       	cpc	r19, r25
    7bee:	11 f0       	breq	.+4      	; 0x7bf4 <_ZN14HardwareSerial5flushEv+0x40>
    7bf0:	81 e0       	ldi	r24, 0x01	; 1
    7bf2:	8b 83       	std	Y+3, r24	; 0x03
    7bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    7bf6:	88 23       	and	r24, r24
    7bf8:	29 f7       	brne	.-54     	; 0x7bc4 <_ZN14HardwareSerial5flushEv+0x10>
    ;
}
    7bfa:	0f 90       	pop	r0
    7bfc:	0f 90       	pop	r0
    7bfe:	0f 90       	pop	r0
    7c00:	cf 91       	pop	r28
    7c02:	df 91       	pop	r29
    7c04:	08 95       	ret

00007c06 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
    7c06:	df 93       	push	r29
    7c08:	cf 93       	push	r28
    7c0a:	00 d0       	rcall	.+0      	; 0x7c0c <_ZN14HardwareSerial5writeEh+0x6>
    7c0c:	00 d0       	rcall	.+0      	; 0x7c0e <_ZN14HardwareSerial5writeEh+0x8>
    7c0e:	00 d0       	rcall	.+0      	; 0x7c10 <_ZN14HardwareSerial5writeEh+0xa>
    7c10:	cd b7       	in	r28, 0x3d	; 61
    7c12:	de b7       	in	r29, 0x3e	; 62
    7c14:	9c 83       	std	Y+4, r25	; 0x04
    7c16:	8b 83       	std	Y+3, r24	; 0x03
    7c18:	6d 83       	std	Y+5, r22	; 0x05
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    7c1a:	eb 81       	ldd	r30, Y+3	; 0x03
    7c1c:	fc 81       	ldd	r31, Y+4	; 0x04
    7c1e:	86 85       	ldd	r24, Z+14	; 0x0e
    7c20:	97 85       	ldd	r25, Z+15	; 0x0f
    7c22:	fc 01       	movw	r30, r24
    7c24:	e0 5c       	subi	r30, 0xC0	; 192
    7c26:	ff 4f       	sbci	r31, 0xFF	; 255
    7c28:	80 81       	ld	r24, Z
    7c2a:	91 81       	ldd	r25, Z+1	; 0x01
    7c2c:	01 96       	adiw	r24, 0x01	; 1
    7c2e:	8f 73       	andi	r24, 0x3F	; 63
    7c30:	90 70       	andi	r25, 0x00	; 0
    7c32:	9a 83       	std	Y+2, r25	; 0x02
    7c34:	89 83       	std	Y+1, r24	; 0x01
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    7c36:	29 81       	ldd	r18, Y+1	; 0x01
    7c38:	3a 81       	ldd	r19, Y+2	; 0x02
    7c3a:	eb 81       	ldd	r30, Y+3	; 0x03
    7c3c:	fc 81       	ldd	r31, Y+4	; 0x04
    7c3e:	86 85       	ldd	r24, Z+14	; 0x0e
    7c40:	97 85       	ldd	r25, Z+15	; 0x0f
    7c42:	fc 01       	movw	r30, r24
    7c44:	ee 5b       	subi	r30, 0xBE	; 190
    7c46:	ff 4f       	sbci	r31, 0xFF	; 255
    7c48:	80 81       	ld	r24, Z
    7c4a:	91 81       	ldd	r25, Z+1	; 0x01
    7c4c:	1e 82       	std	Y+6, r1	; 0x06
    7c4e:	28 17       	cp	r18, r24
    7c50:	39 07       	cpc	r19, r25
    7c52:	11 f4       	brne	.+4      	; 0x7c58 <_ZN14HardwareSerial5writeEh+0x52>
    7c54:	81 e0       	ldi	r24, 0x01	; 1
    7c56:	8e 83       	std	Y+6, r24	; 0x06
    7c58:	8e 81       	ldd	r24, Y+6	; 0x06
    7c5a:	88 23       	and	r24, r24
    7c5c:	61 f7       	brne	.-40     	; 0x7c36 <_ZN14HardwareSerial5writeEh+0x30>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    7c5e:	eb 81       	ldd	r30, Y+3	; 0x03
    7c60:	fc 81       	ldd	r31, Y+4	; 0x04
    7c62:	26 85       	ldd	r18, Z+14	; 0x0e
    7c64:	37 85       	ldd	r19, Z+15	; 0x0f
    7c66:	eb 81       	ldd	r30, Y+3	; 0x03
    7c68:	fc 81       	ldd	r31, Y+4	; 0x04
    7c6a:	86 85       	ldd	r24, Z+14	; 0x0e
    7c6c:	97 85       	ldd	r25, Z+15	; 0x0f
    7c6e:	fc 01       	movw	r30, r24
    7c70:	e0 5c       	subi	r30, 0xC0	; 192
    7c72:	ff 4f       	sbci	r31, 0xFF	; 255
    7c74:	80 81       	ld	r24, Z
    7c76:	91 81       	ldd	r25, Z+1	; 0x01
    7c78:	f9 01       	movw	r30, r18
    7c7a:	e8 0f       	add	r30, r24
    7c7c:	f9 1f       	adc	r31, r25
    7c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    7c80:	80 83       	st	Z, r24
  _tx_buffer->head = i;
    7c82:	eb 81       	ldd	r30, Y+3	; 0x03
    7c84:	fc 81       	ldd	r31, Y+4	; 0x04
    7c86:	86 85       	ldd	r24, Z+14	; 0x0e
    7c88:	97 85       	ldd	r25, Z+15	; 0x0f
    7c8a:	29 81       	ldd	r18, Y+1	; 0x01
    7c8c:	3a 81       	ldd	r19, Y+2	; 0x02
    7c8e:	fc 01       	movw	r30, r24
    7c90:	e0 5c       	subi	r30, 0xC0	; 192
    7c92:	ff 4f       	sbci	r31, 0xFF	; 255
    7c94:	31 83       	std	Z+1, r19	; 0x01
    7c96:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
    7c98:	eb 81       	ldd	r30, Y+3	; 0x03
    7c9a:	fc 81       	ldd	r31, Y+4	; 0x04
    7c9c:	a6 89       	ldd	r26, Z+22	; 0x16
    7c9e:	b7 89       	ldd	r27, Z+23	; 0x17
    7ca0:	eb 81       	ldd	r30, Y+3	; 0x03
    7ca2:	fc 81       	ldd	r31, Y+4	; 0x04
    7ca4:	06 88       	ldd	r0, Z+22	; 0x16
    7ca6:	f7 89       	ldd	r31, Z+23	; 0x17
    7ca8:	e0 2d       	mov	r30, r0
    7caa:	80 81       	ld	r24, Z
    7cac:	48 2f       	mov	r20, r24
    7cae:	eb 81       	ldd	r30, Y+3	; 0x03
    7cb0:	fc 81       	ldd	r31, Y+4	; 0x04
    7cb2:	85 8d       	ldd	r24, Z+29	; 0x1d
    7cb4:	28 2f       	mov	r18, r24
    7cb6:	30 e0       	ldi	r19, 0x00	; 0
    7cb8:	81 e0       	ldi	r24, 0x01	; 1
    7cba:	90 e0       	ldi	r25, 0x00	; 0
    7cbc:	02 2e       	mov	r0, r18
    7cbe:	02 c0       	rjmp	.+4      	; 0x7cc4 <_ZN14HardwareSerial5writeEh+0xbe>
    7cc0:	88 0f       	add	r24, r24
    7cc2:	99 1f       	adc	r25, r25
    7cc4:	0a 94       	dec	r0
    7cc6:	e2 f7       	brpl	.-8      	; 0x7cc0 <_ZN14HardwareSerial5writeEh+0xba>
    7cc8:	84 2b       	or	r24, r20
    7cca:	8c 93       	st	X, r24
  
  return 1;
    7ccc:	81 e0       	ldi	r24, 0x01	; 1
    7cce:	90 e0       	ldi	r25, 0x00	; 0
}
    7cd0:	26 96       	adiw	r28, 0x06	; 6
    7cd2:	0f b6       	in	r0, 0x3f	; 63
    7cd4:	f8 94       	cli
    7cd6:	de bf       	out	0x3e, r29	; 62
    7cd8:	0f be       	out	0x3f, r0	; 63
    7cda:	cd bf       	out	0x3d, r28	; 61
    7cdc:	cf 91       	pop	r28
    7cde:	df 91       	pop	r29
    7ce0:	08 95       	ret

00007ce2 <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
    7ce2:	df 93       	push	r29
    7ce4:	cf 93       	push	r28
    7ce6:	00 d0       	rcall	.+0      	; 0x7ce8 <_ZN14HardwareSerialcvbEv+0x6>
    7ce8:	cd b7       	in	r28, 0x3d	; 61
    7cea:	de b7       	in	r29, 0x3e	; 62
    7cec:	9a 83       	std	Y+2, r25	; 0x02
    7cee:	89 83       	std	Y+1, r24	; 0x01
	return true;
    7cf0:	81 e0       	ldi	r24, 0x01	; 1
}
    7cf2:	0f 90       	pop	r0
    7cf4:	0f 90       	pop	r0
    7cf6:	cf 91       	pop	r28
    7cf8:	df 91       	pop	r29
    7cfa:	08 95       	ret

00007cfc <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
    7cfc:	8f 92       	push	r8
    7cfe:	af 92       	push	r10
    7d00:	bf 92       	push	r11
    7d02:	cf 92       	push	r12
    7d04:	df 92       	push	r13
    7d06:	ef 92       	push	r14
    7d08:	ff 92       	push	r15
    7d0a:	0f 93       	push	r16
    7d0c:	1f 93       	push	r17
    7d0e:	df 93       	push	r29
    7d10:	cf 93       	push	r28
    7d12:	00 d0       	rcall	.+0      	; 0x7d14 <_Z41__static_initialization_and_destruction_0ii+0x18>
    7d14:	00 d0       	rcall	.+0      	; 0x7d16 <_Z41__static_initialization_and_destruction_0ii+0x1a>
    7d16:	cd b7       	in	r28, 0x3d	; 61
    7d18:	de b7       	in	r29, 0x3e	; 62
    7d1a:	9a 83       	std	Y+2, r25	; 0x02
    7d1c:	89 83       	std	Y+1, r24	; 0x01
    7d1e:	7c 83       	std	Y+4, r23	; 0x04
    7d20:	6b 83       	std	Y+3, r22	; 0x03
    7d22:	89 81       	ldd	r24, Y+1	; 0x01
    7d24:	9a 81       	ldd	r25, Y+2	; 0x02
    7d26:	81 30       	cpi	r24, 0x01	; 1
    7d28:	91 05       	cpc	r25, r1
    7d2a:	c1 f5       	brne	.+112    	; 0x7d9c <_Z41__static_initialization_and_destruction_0ii+0xa0>
    7d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    7d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    7d30:	2f ef       	ldi	r18, 0xFF	; 255
    7d32:	8f 3f       	cpi	r24, 0xFF	; 255
    7d34:	92 07       	cpc	r25, r18
    7d36:	91 f5       	brne	.+100    	; 0x7d9c <_Z41__static_initialization_and_destruction_0ii+0xa0>
    7d38:	00 d0       	rcall	.+0      	; 0x7d3a <_Z41__static_initialization_and_destruction_0ii+0x3e>
    7d3a:	00 d0       	rcall	.+0      	; 0x7d3c <_Z41__static_initialization_and_destruction_0ii+0x40>
    7d3c:	ed b7       	in	r30, 0x3d	; 61
    7d3e:	fe b7       	in	r31, 0x3e	; 62
    7d40:	31 96       	adiw	r30, 0x01	; 1
    7d42:	2c e1       	ldi	r18, 0x1C	; 28
    7d44:	36 e0       	ldi	r19, 0x06	; 6
    7d46:	44 e9       	ldi	r20, 0x94	; 148
    7d48:	55 e0       	ldi	r21, 0x05	; 5
    7d4a:	a8 ed       	ldi	r26, 0xD8	; 216
    7d4c:	b5 e0       	ldi	r27, 0x05	; 5
    7d4e:	83 e0       	ldi	r24, 0x03	; 3
    7d50:	80 83       	st	Z, r24
    7d52:	87 e0       	ldi	r24, 0x07	; 7
    7d54:	81 83       	std	Z+1, r24	; 0x01
    7d56:	85 e0       	ldi	r24, 0x05	; 5
    7d58:	82 83       	std	Z+2, r24	; 0x02
    7d5a:	81 e0       	ldi	r24, 0x01	; 1
    7d5c:	83 83       	std	Z+3, r24	; 0x03
    7d5e:	c9 01       	movw	r24, r18
    7d60:	ba 01       	movw	r22, r20
    7d62:	ad 01       	movw	r20, r26
    7d64:	20 e4       	ldi	r18, 0x40	; 64
    7d66:	30 e0       	ldi	r19, 0x00	; 0
    7d68:	09 e2       	ldi	r16, 0x29	; 41
    7d6a:	10 e0       	ldi	r17, 0x00	; 0
    7d6c:	0f 2e       	mov	r0, r31
    7d6e:	fb e2       	ldi	r31, 0x2B	; 43
    7d70:	ef 2e       	mov	r14, r31
    7d72:	ff 24       	eor	r15, r15
    7d74:	f0 2d       	mov	r31, r0
    7d76:	0f 2e       	mov	r0, r31
    7d78:	fa e2       	ldi	r31, 0x2A	; 42
    7d7a:	cf 2e       	mov	r12, r31
    7d7c:	dd 24       	eor	r13, r13
    7d7e:	f0 2d       	mov	r31, r0
    7d80:	0f 2e       	mov	r0, r31
    7d82:	fc e2       	ldi	r31, 0x2C	; 44
    7d84:	af 2e       	mov	r10, r31
    7d86:	bb 24       	eor	r11, r11
    7d88:	f0 2d       	mov	r31, r0
    7d8a:	88 24       	eor	r8, r8
    7d8c:	68 94       	set
    7d8e:	82 f8       	bld	r8, 2
    7d90:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>
    7d94:	0f 90       	pop	r0
    7d96:	0f 90       	pop	r0
    7d98:	0f 90       	pop	r0
    7d9a:	0f 90       	pop	r0
    7d9c:	0f 90       	pop	r0
    7d9e:	0f 90       	pop	r0
    7da0:	0f 90       	pop	r0
    7da2:	0f 90       	pop	r0
    7da4:	cf 91       	pop	r28
    7da6:	df 91       	pop	r29
    7da8:	1f 91       	pop	r17
    7daa:	0f 91       	pop	r16
    7dac:	ff 90       	pop	r15
    7dae:	ef 90       	pop	r14
    7db0:	df 90       	pop	r13
    7db2:	cf 90       	pop	r12
    7db4:	bf 90       	pop	r11
    7db6:	af 90       	pop	r10
    7db8:	8f 90       	pop	r8
    7dba:	08 95       	ret

00007dbc <_GLOBAL__I_rx_buffer>:
    7dbc:	df 93       	push	r29
    7dbe:	cf 93       	push	r28
    7dc0:	cd b7       	in	r28, 0x3d	; 61
    7dc2:	de b7       	in	r29, 0x3e	; 62
    7dc4:	81 e0       	ldi	r24, 0x01	; 1
    7dc6:	90 e0       	ldi	r25, 0x00	; 0
    7dc8:	6f ef       	ldi	r22, 0xFF	; 255
    7dca:	7f ef       	ldi	r23, 0xFF	; 255
    7dcc:	0e 94 7e 3e 	call	0x7cfc	; 0x7cfc <_Z41__static_initialization_and_destruction_0ii>
    7dd0:	cf 91       	pop	r28
    7dd2:	df 91       	pop	r29
    7dd4:	08 95       	ret

00007dd6 <_ZN9PrintableC2Ev>:
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/

class Printable
{
    7dd6:	df 93       	push	r29
    7dd8:	cf 93       	push	r28
    7dda:	00 d0       	rcall	.+0      	; 0x7ddc <_ZN9PrintableC2Ev+0x6>
    7ddc:	cd b7       	in	r28, 0x3d	; 61
    7dde:	de b7       	in	r29, 0x3e	; 62
    7de0:	9a 83       	std	Y+2, r25	; 0x02
    7de2:	89 83       	std	Y+1, r24	; 0x01
    7de4:	e9 81       	ldd	r30, Y+1	; 0x01
    7de6:	fa 81       	ldd	r31, Y+2	; 0x02
    7de8:	88 eb       	ldi	r24, 0xB8	; 184
    7dea:	90 e0       	ldi	r25, 0x00	; 0
    7dec:	91 83       	std	Z+1, r25	; 0x01
    7dee:	80 83       	st	Z, r24
    7df0:	0f 90       	pop	r0
    7df2:	0f 90       	pop	r0
    7df4:	cf 91       	pop	r28
    7df6:	df 91       	pop	r29
    7df8:	08 95       	ret

00007dfa <_ZN9IPAddressC2Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    7dfa:	0f 93       	push	r16
    7dfc:	df 93       	push	r29
    7dfe:	cf 93       	push	r28
    7e00:	00 d0       	rcall	.+0      	; 0x7e02 <_ZN9IPAddressC2Ehhhh+0x8>
    7e02:	00 d0       	rcall	.+0      	; 0x7e04 <_ZN9IPAddressC2Ehhhh+0xa>
    7e04:	00 d0       	rcall	.+0      	; 0x7e06 <_ZN9IPAddressC2Ehhhh+0xc>
    7e06:	cd b7       	in	r28, 0x3d	; 61
    7e08:	de b7       	in	r29, 0x3e	; 62
    7e0a:	9a 83       	std	Y+2, r25	; 0x02
    7e0c:	89 83       	std	Y+1, r24	; 0x01
    7e0e:	6b 83       	std	Y+3, r22	; 0x03
    7e10:	4c 83       	std	Y+4, r20	; 0x04
    7e12:	2d 83       	std	Y+5, r18	; 0x05
    7e14:	0e 83       	std	Y+6, r16	; 0x06
    7e16:	89 81       	ldd	r24, Y+1	; 0x01
    7e18:	9a 81       	ldd	r25, Y+2	; 0x02
    7e1a:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN9PrintableC2Ev>
    7e1e:	e9 81       	ldd	r30, Y+1	; 0x01
    7e20:	fa 81       	ldd	r31, Y+2	; 0x02
    7e22:	82 eb       	ldi	r24, 0xB2	; 178
    7e24:	90 e0       	ldi	r25, 0x00	; 0
    7e26:	91 83       	std	Z+1, r25	; 0x01
    7e28:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    7e2a:	e9 81       	ldd	r30, Y+1	; 0x01
    7e2c:	fa 81       	ldd	r31, Y+2	; 0x02
    7e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    7e30:	82 83       	std	Z+2, r24	; 0x02
    _address[1] = second_octet;
    7e32:	e9 81       	ldd	r30, Y+1	; 0x01
    7e34:	fa 81       	ldd	r31, Y+2	; 0x02
    7e36:	8c 81       	ldd	r24, Y+4	; 0x04
    7e38:	83 83       	std	Z+3, r24	; 0x03
    _address[2] = third_octet;
    7e3a:	e9 81       	ldd	r30, Y+1	; 0x01
    7e3c:	fa 81       	ldd	r31, Y+2	; 0x02
    7e3e:	8d 81       	ldd	r24, Y+5	; 0x05
    7e40:	84 83       	std	Z+4, r24	; 0x04
    _address[3] = fourth_octet;
    7e42:	e9 81       	ldd	r30, Y+1	; 0x01
    7e44:	fa 81       	ldd	r31, Y+2	; 0x02
    7e46:	8e 81       	ldd	r24, Y+6	; 0x06
    7e48:	85 83       	std	Z+5, r24	; 0x05
}
    7e4a:	26 96       	adiw	r28, 0x06	; 6
    7e4c:	0f b6       	in	r0, 0x3f	; 63
    7e4e:	f8 94       	cli
    7e50:	de bf       	out	0x3e, r29	; 62
    7e52:	0f be       	out	0x3f, r0	; 63
    7e54:	cd bf       	out	0x3d, r28	; 61
    7e56:	cf 91       	pop	r28
    7e58:	df 91       	pop	r29
    7e5a:	0f 91       	pop	r16
    7e5c:	08 95       	ret

00007e5e <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
    7e5e:	0f 93       	push	r16
    7e60:	df 93       	push	r29
    7e62:	cf 93       	push	r28
    7e64:	00 d0       	rcall	.+0      	; 0x7e66 <_ZN9IPAddressC1Ehhhh+0x8>
    7e66:	00 d0       	rcall	.+0      	; 0x7e68 <_ZN9IPAddressC1Ehhhh+0xa>
    7e68:	00 d0       	rcall	.+0      	; 0x7e6a <_ZN9IPAddressC1Ehhhh+0xc>
    7e6a:	cd b7       	in	r28, 0x3d	; 61
    7e6c:	de b7       	in	r29, 0x3e	; 62
    7e6e:	9a 83       	std	Y+2, r25	; 0x02
    7e70:	89 83       	std	Y+1, r24	; 0x01
    7e72:	6b 83       	std	Y+3, r22	; 0x03
    7e74:	4c 83       	std	Y+4, r20	; 0x04
    7e76:	2d 83       	std	Y+5, r18	; 0x05
    7e78:	0e 83       	std	Y+6, r16	; 0x06
    7e7a:	89 81       	ldd	r24, Y+1	; 0x01
    7e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    7e7e:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN9PrintableC2Ev>
    7e82:	e9 81       	ldd	r30, Y+1	; 0x01
    7e84:	fa 81       	ldd	r31, Y+2	; 0x02
    7e86:	82 eb       	ldi	r24, 0xB2	; 178
    7e88:	90 e0       	ldi	r25, 0x00	; 0
    7e8a:	91 83       	std	Z+1, r25	; 0x01
    7e8c:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
    7e8e:	e9 81       	ldd	r30, Y+1	; 0x01
    7e90:	fa 81       	ldd	r31, Y+2	; 0x02
    7e92:	8b 81       	ldd	r24, Y+3	; 0x03
    7e94:	82 83       	std	Z+2, r24	; 0x02
    _address[1] = second_octet;
    7e96:	e9 81       	ldd	r30, Y+1	; 0x01
    7e98:	fa 81       	ldd	r31, Y+2	; 0x02
    7e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    7e9c:	83 83       	std	Z+3, r24	; 0x03
    _address[2] = third_octet;
    7e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    7ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    7ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    7ea4:	84 83       	std	Z+4, r24	; 0x04
    _address[3] = fourth_octet;
    7ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    7ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    7eaa:	8e 81       	ldd	r24, Y+6	; 0x06
    7eac:	85 83       	std	Z+5, r24	; 0x05
}
    7eae:	26 96       	adiw	r28, 0x06	; 6
    7eb0:	0f b6       	in	r0, 0x3f	; 63
    7eb2:	f8 94       	cli
    7eb4:	de bf       	out	0x3e, r29	; 62
    7eb6:	0f be       	out	0x3f, r0	; 63
    7eb8:	cd bf       	out	0x3d, r28	; 61
    7eba:	cf 91       	pop	r28
    7ebc:	df 91       	pop	r29
    7ebe:	0f 91       	pop	r16
    7ec0:	08 95       	ret

00007ec2 <_Z41__static_initialization_and_destruction_0ii>:
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
    7ec2:	0f 93       	push	r16
    7ec4:	df 93       	push	r29
    7ec6:	cf 93       	push	r28
    7ec8:	00 d0       	rcall	.+0      	; 0x7eca <_Z41__static_initialization_and_destruction_0ii+0x8>
    7eca:	00 d0       	rcall	.+0      	; 0x7ecc <_Z41__static_initialization_and_destruction_0ii+0xa>
    7ecc:	cd b7       	in	r28, 0x3d	; 61
    7ece:	de b7       	in	r29, 0x3e	; 62
    7ed0:	9a 83       	std	Y+2, r25	; 0x02
    7ed2:	89 83       	std	Y+1, r24	; 0x01
    7ed4:	7c 83       	std	Y+4, r23	; 0x04
    7ed6:	6b 83       	std	Y+3, r22	; 0x03
    7ed8:	89 81       	ldd	r24, Y+1	; 0x01
    7eda:	9a 81       	ldd	r25, Y+2	; 0x02
    7edc:	81 30       	cpi	r24, 0x01	; 1
    7ede:	91 05       	cpc	r25, r1
    7ee0:	71 f4       	brne	.+28     	; 0x7efe <_Z41__static_initialization_and_destruction_0ii+0x3c>
    7ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    7ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    7ee6:	2f ef       	ldi	r18, 0xFF	; 255
    7ee8:	8f 3f       	cpi	r24, 0xFF	; 255
    7eea:	92 07       	cpc	r25, r18
    7eec:	41 f4       	brne	.+16     	; 0x7efe <_Z41__static_initialization_and_destruction_0ii+0x3c>
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
    7eee:	8b e3       	ldi	r24, 0x3B	; 59
    7ef0:	96 e0       	ldi	r25, 0x06	; 6
    7ef2:	60 e0       	ldi	r22, 0x00	; 0
    7ef4:	40 e0       	ldi	r20, 0x00	; 0
    7ef6:	20 e0       	ldi	r18, 0x00	; 0
    7ef8:	00 e0       	ldi	r16, 0x00	; 0
    7efa:	0e 94 2f 3f 	call	0x7e5e	; 0x7e5e <_ZN9IPAddressC1Ehhhh>
    7efe:	0f 90       	pop	r0
    7f00:	0f 90       	pop	r0
    7f02:	0f 90       	pop	r0
    7f04:	0f 90       	pop	r0
    7f06:	cf 91       	pop	r28
    7f08:	df 91       	pop	r29
    7f0a:	0f 91       	pop	r16
    7f0c:	08 95       	ret

00007f0e <_GLOBAL__I__ZN9IPAddressC2Ev>:
    7f0e:	df 93       	push	r29
    7f10:	cf 93       	push	r28
    7f12:	cd b7       	in	r28, 0x3d	; 61
    7f14:	de b7       	in	r29, 0x3e	; 62
    7f16:	81 e0       	ldi	r24, 0x01	; 1
    7f18:	90 e0       	ldi	r25, 0x00	; 0
    7f1a:	6f ef       	ldi	r22, 0xFF	; 255
    7f1c:	7f ef       	ldi	r23, 0xFF	; 255
    7f1e:	0e 94 61 3f 	call	0x7ec2	; 0x7ec2 <_Z41__static_initialization_and_destruction_0ii>
    7f22:	cf 91       	pop	r28
    7f24:	df 91       	pop	r29
    7f26:	08 95       	ret

00007f28 <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
    7f28:	df 93       	push	r29
    7f2a:	cf 93       	push	r28
    7f2c:	cd b7       	in	r28, 0x3d	; 61
    7f2e:	de b7       	in	r29, 0x3e	; 62
    7f30:	28 97       	sbiw	r28, 0x08	; 8
    7f32:	0f b6       	in	r0, 0x3f	; 63
    7f34:	f8 94       	cli
    7f36:	de bf       	out	0x3e, r29	; 62
    7f38:	0f be       	out	0x3f, r0	; 63
    7f3a:	cd bf       	out	0x3d, r28	; 61
    7f3c:	9e 83       	std	Y+6, r25	; 0x06
    7f3e:	8d 83       	std	Y+5, r24	; 0x05
    7f40:	78 87       	std	Y+8, r23	; 0x08
    7f42:	6f 83       	std	Y+7, r22	; 0x07
{
    size_t n = 0;
    7f44:	1c 82       	std	Y+4, r1	; 0x04
    7f46:	1b 82       	std	Y+3, r1	; 0x03
    for (int i =0; i < 3; i++)
    7f48:	1a 82       	std	Y+2, r1	; 0x02
    7f4a:	19 82       	std	Y+1, r1	; 0x01
    7f4c:	28 c0       	rjmp	.+80     	; 0x7f9e <_ZNK9IPAddress7printToER5Print+0x76>
    {
        n += p.print(_address[i], DEC);
    7f4e:	29 81       	ldd	r18, Y+1	; 0x01
    7f50:	3a 81       	ldd	r19, Y+2	; 0x02
    7f52:	8d 81       	ldd	r24, Y+5	; 0x05
    7f54:	9e 81       	ldd	r25, Y+6	; 0x06
    7f56:	82 0f       	add	r24, r18
    7f58:	93 1f       	adc	r25, r19
    7f5a:	fc 01       	movw	r30, r24
    7f5c:	32 96       	adiw	r30, 0x02	; 2
    7f5e:	20 81       	ld	r18, Z
    7f60:	8f 81       	ldd	r24, Y+7	; 0x07
    7f62:	98 85       	ldd	r25, Y+8	; 0x08
    7f64:	62 2f       	mov	r22, r18
    7f66:	4a e0       	ldi	r20, 0x0A	; 10
    7f68:	50 e0       	ldi	r21, 0x00	; 0
    7f6a:	0e 94 19 44 	call	0x8832	; 0x8832 <_ZN5Print5printEhi>
    7f6e:	9c 01       	movw	r18, r24
    7f70:	8b 81       	ldd	r24, Y+3	; 0x03
    7f72:	9c 81       	ldd	r25, Y+4	; 0x04
    7f74:	82 0f       	add	r24, r18
    7f76:	93 1f       	adc	r25, r19
    7f78:	9c 83       	std	Y+4, r25	; 0x04
    7f7a:	8b 83       	std	Y+3, r24	; 0x03
        n += p.print('.');
    7f7c:	8f 81       	ldd	r24, Y+7	; 0x07
    7f7e:	98 85       	ldd	r25, Y+8	; 0x08
    7f80:	6e e2       	ldi	r22, 0x2E	; 46
    7f82:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
    7f86:	9c 01       	movw	r18, r24
    7f88:	8b 81       	ldd	r24, Y+3	; 0x03
    7f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    7f8c:	82 0f       	add	r24, r18
    7f8e:	93 1f       	adc	r25, r19
    7f90:	9c 83       	std	Y+4, r25	; 0x04
    7f92:	8b 83       	std	Y+3, r24	; 0x03
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    7f94:	89 81       	ldd	r24, Y+1	; 0x01
    7f96:	9a 81       	ldd	r25, Y+2	; 0x02
    7f98:	01 96       	adiw	r24, 0x01	; 1
    7f9a:	9a 83       	std	Y+2, r25	; 0x02
    7f9c:	89 83       	std	Y+1, r24	; 0x01
    7f9e:	89 81       	ldd	r24, Y+1	; 0x01
    7fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    7fa2:	83 30       	cpi	r24, 0x03	; 3
    7fa4:	91 05       	cpc	r25, r1
    7fa6:	9c f2       	brlt	.-90     	; 0x7f4e <_ZNK9IPAddress7printToER5Print+0x26>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    7fa8:	ed 81       	ldd	r30, Y+5	; 0x05
    7faa:	fe 81       	ldd	r31, Y+6	; 0x06
    7fac:	25 81       	ldd	r18, Z+5	; 0x05
    7fae:	8f 81       	ldd	r24, Y+7	; 0x07
    7fb0:	98 85       	ldd	r25, Y+8	; 0x08
    7fb2:	62 2f       	mov	r22, r18
    7fb4:	4a e0       	ldi	r20, 0x0A	; 10
    7fb6:	50 e0       	ldi	r21, 0x00	; 0
    7fb8:	0e 94 19 44 	call	0x8832	; 0x8832 <_ZN5Print5printEhi>
    7fbc:	9c 01       	movw	r18, r24
    7fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    7fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    7fc2:	82 0f       	add	r24, r18
    7fc4:	93 1f       	adc	r25, r19
    7fc6:	9c 83       	std	Y+4, r25	; 0x04
    7fc8:	8b 83       	std	Y+3, r24	; 0x03
    return n;
    7fca:	8b 81       	ldd	r24, Y+3	; 0x03
    7fcc:	9c 81       	ldd	r25, Y+4	; 0x04
}
    7fce:	28 96       	adiw	r28, 0x08	; 8
    7fd0:	0f b6       	in	r0, 0x3f	; 63
    7fd2:	f8 94       	cli
    7fd4:	de bf       	out	0x3e, r29	; 62
    7fd6:	0f be       	out	0x3f, r0	; 63
    7fd8:	cd bf       	out	0x3d, r28	; 61
    7fda:	cf 91       	pop	r28
    7fdc:	df 91       	pop	r29
    7fde:	08 95       	ret

00007fe0 <_ZN9IPAddresseqEPKh>:
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    return *this;
}

bool IPAddress::operator==(const uint8_t* addr)
    7fe0:	df 93       	push	r29
    7fe2:	cf 93       	push	r28
    7fe4:	00 d0       	rcall	.+0      	; 0x7fe6 <_ZN9IPAddresseqEPKh+0x6>
    7fe6:	00 d0       	rcall	.+0      	; 0x7fe8 <_ZN9IPAddresseqEPKh+0x8>
    7fe8:	0f 92       	push	r0
    7fea:	cd b7       	in	r28, 0x3d	; 61
    7fec:	de b7       	in	r29, 0x3e	; 62
    7fee:	9a 83       	std	Y+2, r25	; 0x02
    7ff0:	89 83       	std	Y+1, r24	; 0x01
    7ff2:	7c 83       	std	Y+4, r23	; 0x04
    7ff4:	6b 83       	std	Y+3, r22	; 0x03
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
    7ff6:	89 81       	ldd	r24, Y+1	; 0x01
    7ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    7ffa:	9c 01       	movw	r18, r24
    7ffc:	2e 5f       	subi	r18, 0xFE	; 254
    7ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    8000:	8b 81       	ldd	r24, Y+3	; 0x03
    8002:	9c 81       	ldd	r25, Y+4	; 0x04
    8004:	b9 01       	movw	r22, r18
    8006:	44 e0       	ldi	r20, 0x04	; 4
    8008:	50 e0       	ldi	r21, 0x00	; 0
    800a:	0e 94 f7 84 	call	0x109ee	; 0x109ee <memcmp>
    800e:	1d 82       	std	Y+5, r1	; 0x05
    8010:	00 97       	sbiw	r24, 0x00	; 0
    8012:	11 f4       	brne	.+4      	; 0x8018 <_ZN9IPAddresseqEPKh+0x38>
    8014:	81 e0       	ldi	r24, 0x01	; 1
    8016:	8d 83       	std	Y+5, r24	; 0x05
    8018:	8d 81       	ldd	r24, Y+5	; 0x05
}
    801a:	0f 90       	pop	r0
    801c:	0f 90       	pop	r0
    801e:	0f 90       	pop	r0
    8020:	0f 90       	pop	r0
    8022:	0f 90       	pop	r0
    8024:	cf 91       	pop	r28
    8026:	df 91       	pop	r29
    8028:	08 95       	ret

0000802a <_ZN9IPAddressaSEm>:
{
    memcpy(_address, address, sizeof(_address));
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t address)
    802a:	df 93       	push	r29
    802c:	cf 93       	push	r28
    802e:	00 d0       	rcall	.+0      	; 0x8030 <_ZN9IPAddressaSEm+0x6>
    8030:	00 d0       	rcall	.+0      	; 0x8032 <_ZN9IPAddressaSEm+0x8>
    8032:	00 d0       	rcall	.+0      	; 0x8034 <_ZN9IPAddressaSEm+0xa>
    8034:	cd b7       	in	r28, 0x3d	; 61
    8036:	de b7       	in	r29, 0x3e	; 62
    8038:	9a 83       	std	Y+2, r25	; 0x02
    803a:	89 83       	std	Y+1, r24	; 0x01
    803c:	4b 83       	std	Y+3, r20	; 0x03
    803e:	5c 83       	std	Y+4, r21	; 0x04
    8040:	6d 83       	std	Y+5, r22	; 0x05
    8042:	7e 83       	std	Y+6, r23	; 0x06
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    8044:	89 81       	ldd	r24, Y+1	; 0x01
    8046:	9a 81       	ldd	r25, Y+2	; 0x02
    8048:	02 96       	adiw	r24, 0x02	; 2
    804a:	9e 01       	movw	r18, r28
    804c:	2d 5f       	subi	r18, 0xFD	; 253
    804e:	3f 4f       	sbci	r19, 0xFF	; 255
    8050:	b9 01       	movw	r22, r18
    8052:	44 e0       	ldi	r20, 0x04	; 4
    8054:	50 e0       	ldi	r21, 0x00	; 0
    8056:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
    return *this;
    805a:	89 81       	ldd	r24, Y+1	; 0x01
    805c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    805e:	26 96       	adiw	r28, 0x06	; 6
    8060:	0f b6       	in	r0, 0x3f	; 63
    8062:	f8 94       	cli
    8064:	de bf       	out	0x3e, r29	; 62
    8066:	0f be       	out	0x3f, r0	; 63
    8068:	cd bf       	out	0x3d, r28	; 61
    806a:	cf 91       	pop	r28
    806c:	df 91       	pop	r29
    806e:	08 95       	ret

00008070 <_ZN9IPAddressaSEPKh>:
IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
}

IPAddress& IPAddress::operator=(const uint8_t *address)
    8070:	df 93       	push	r29
    8072:	cf 93       	push	r28
    8074:	00 d0       	rcall	.+0      	; 0x8076 <_ZN9IPAddressaSEPKh+0x6>
    8076:	00 d0       	rcall	.+0      	; 0x8078 <_ZN9IPAddressaSEPKh+0x8>
    8078:	cd b7       	in	r28, 0x3d	; 61
    807a:	de b7       	in	r29, 0x3e	; 62
    807c:	9a 83       	std	Y+2, r25	; 0x02
    807e:	89 83       	std	Y+1, r24	; 0x01
    8080:	7c 83       	std	Y+4, r23	; 0x04
    8082:	6b 83       	std	Y+3, r22	; 0x03
{
    memcpy(_address, address, sizeof(_address));
    8084:	89 81       	ldd	r24, Y+1	; 0x01
    8086:	9a 81       	ldd	r25, Y+2	; 0x02
    8088:	02 96       	adiw	r24, 0x02	; 2
    808a:	2b 81       	ldd	r18, Y+3	; 0x03
    808c:	3c 81       	ldd	r19, Y+4	; 0x04
    808e:	b9 01       	movw	r22, r18
    8090:	44 e0       	ldi	r20, 0x04	; 4
    8092:	50 e0       	ldi	r21, 0x00	; 0
    8094:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
    return *this;
    8098:	89 81       	ldd	r24, Y+1	; 0x01
    809a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    809c:	0f 90       	pop	r0
    809e:	0f 90       	pop	r0
    80a0:	0f 90       	pop	r0
    80a2:	0f 90       	pop	r0
    80a4:	cf 91       	pop	r28
    80a6:	df 91       	pop	r29
    80a8:	08 95       	ret

000080aa <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
    80aa:	df 93       	push	r29
    80ac:	cf 93       	push	r28
    80ae:	00 d0       	rcall	.+0      	; 0x80b0 <_ZN9IPAddressC1EPKh+0x6>
    80b0:	00 d0       	rcall	.+0      	; 0x80b2 <_ZN9IPAddressC1EPKh+0x8>
    80b2:	cd b7       	in	r28, 0x3d	; 61
    80b4:	de b7       	in	r29, 0x3e	; 62
    80b6:	9a 83       	std	Y+2, r25	; 0x02
    80b8:	89 83       	std	Y+1, r24	; 0x01
    80ba:	7c 83       	std	Y+4, r23	; 0x04
    80bc:	6b 83       	std	Y+3, r22	; 0x03
    80be:	89 81       	ldd	r24, Y+1	; 0x01
    80c0:	9a 81       	ldd	r25, Y+2	; 0x02
    80c2:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN9PrintableC2Ev>
    80c6:	e9 81       	ldd	r30, Y+1	; 0x01
    80c8:	fa 81       	ldd	r31, Y+2	; 0x02
    80ca:	82 eb       	ldi	r24, 0xB2	; 178
    80cc:	90 e0       	ldi	r25, 0x00	; 0
    80ce:	91 83       	std	Z+1, r25	; 0x01
    80d0:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
    80d2:	89 81       	ldd	r24, Y+1	; 0x01
    80d4:	9a 81       	ldd	r25, Y+2	; 0x02
    80d6:	02 96       	adiw	r24, 0x02	; 2
    80d8:	2b 81       	ldd	r18, Y+3	; 0x03
    80da:	3c 81       	ldd	r19, Y+4	; 0x04
    80dc:	b9 01       	movw	r22, r18
    80de:	44 e0       	ldi	r20, 0x04	; 4
    80e0:	50 e0       	ldi	r21, 0x00	; 0
    80e2:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
}
    80e6:	0f 90       	pop	r0
    80e8:	0f 90       	pop	r0
    80ea:	0f 90       	pop	r0
    80ec:	0f 90       	pop	r0
    80ee:	cf 91       	pop	r28
    80f0:	df 91       	pop	r29
    80f2:	08 95       	ret

000080f4 <_ZN9IPAddressC2EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
    80f4:	df 93       	push	r29
    80f6:	cf 93       	push	r28
    80f8:	00 d0       	rcall	.+0      	; 0x80fa <_ZN9IPAddressC2EPKh+0x6>
    80fa:	00 d0       	rcall	.+0      	; 0x80fc <_ZN9IPAddressC2EPKh+0x8>
    80fc:	cd b7       	in	r28, 0x3d	; 61
    80fe:	de b7       	in	r29, 0x3e	; 62
    8100:	9a 83       	std	Y+2, r25	; 0x02
    8102:	89 83       	std	Y+1, r24	; 0x01
    8104:	7c 83       	std	Y+4, r23	; 0x04
    8106:	6b 83       	std	Y+3, r22	; 0x03
    8108:	89 81       	ldd	r24, Y+1	; 0x01
    810a:	9a 81       	ldd	r25, Y+2	; 0x02
    810c:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN9PrintableC2Ev>
    8110:	e9 81       	ldd	r30, Y+1	; 0x01
    8112:	fa 81       	ldd	r31, Y+2	; 0x02
    8114:	82 eb       	ldi	r24, 0xB2	; 178
    8116:	90 e0       	ldi	r25, 0x00	; 0
    8118:	91 83       	std	Z+1, r25	; 0x01
    811a:	80 83       	st	Z, r24
{
    memcpy(_address, address, sizeof(_address));
    811c:	89 81       	ldd	r24, Y+1	; 0x01
    811e:	9a 81       	ldd	r25, Y+2	; 0x02
    8120:	02 96       	adiw	r24, 0x02	; 2
    8122:	2b 81       	ldd	r18, Y+3	; 0x03
    8124:	3c 81       	ldd	r19, Y+4	; 0x04
    8126:	b9 01       	movw	r22, r18
    8128:	44 e0       	ldi	r20, 0x04	; 4
    812a:	50 e0       	ldi	r21, 0x00	; 0
    812c:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
}
    8130:	0f 90       	pop	r0
    8132:	0f 90       	pop	r0
    8134:	0f 90       	pop	r0
    8136:	0f 90       	pop	r0
    8138:	cf 91       	pop	r28
    813a:	df 91       	pop	r29
    813c:	08 95       	ret

0000813e <_ZN9IPAddressC1Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
    813e:	df 93       	push	r29
    8140:	cf 93       	push	r28
    8142:	00 d0       	rcall	.+0      	; 0x8144 <_ZN9IPAddressC1Em+0x6>
    8144:	00 d0       	rcall	.+0      	; 0x8146 <_ZN9IPAddressC1Em+0x8>
    8146:	00 d0       	rcall	.+0      	; 0x8148 <_ZN9IPAddressC1Em+0xa>
    8148:	cd b7       	in	r28, 0x3d	; 61
    814a:	de b7       	in	r29, 0x3e	; 62
    814c:	9a 83       	std	Y+2, r25	; 0x02
    814e:	89 83       	std	Y+1, r24	; 0x01
    8150:	4b 83       	std	Y+3, r20	; 0x03
    8152:	5c 83       	std	Y+4, r21	; 0x04
    8154:	6d 83       	std	Y+5, r22	; 0x05
    8156:	7e 83       	std	Y+6, r23	; 0x06
    8158:	89 81       	ldd	r24, Y+1	; 0x01
    815a:	9a 81       	ldd	r25, Y+2	; 0x02
    815c:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN9PrintableC2Ev>
    8160:	e9 81       	ldd	r30, Y+1	; 0x01
    8162:	fa 81       	ldd	r31, Y+2	; 0x02
    8164:	82 eb       	ldi	r24, 0xB2	; 178
    8166:	90 e0       	ldi	r25, 0x00	; 0
    8168:	91 83       	std	Z+1, r25	; 0x01
    816a:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    816c:	89 81       	ldd	r24, Y+1	; 0x01
    816e:	9a 81       	ldd	r25, Y+2	; 0x02
    8170:	02 96       	adiw	r24, 0x02	; 2
    8172:	9e 01       	movw	r18, r28
    8174:	2d 5f       	subi	r18, 0xFD	; 253
    8176:	3f 4f       	sbci	r19, 0xFF	; 255
    8178:	b9 01       	movw	r22, r18
    817a:	44 e0       	ldi	r20, 0x04	; 4
    817c:	50 e0       	ldi	r21, 0x00	; 0
    817e:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
}
    8182:	26 96       	adiw	r28, 0x06	; 6
    8184:	0f b6       	in	r0, 0x3f	; 63
    8186:	f8 94       	cli
    8188:	de bf       	out	0x3e, r29	; 62
    818a:	0f be       	out	0x3f, r0	; 63
    818c:	cd bf       	out	0x3d, r28	; 61
    818e:	cf 91       	pop	r28
    8190:	df 91       	pop	r29
    8192:	08 95       	ret

00008194 <_ZN9IPAddressC2Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
    8194:	df 93       	push	r29
    8196:	cf 93       	push	r28
    8198:	00 d0       	rcall	.+0      	; 0x819a <_ZN9IPAddressC2Em+0x6>
    819a:	00 d0       	rcall	.+0      	; 0x819c <_ZN9IPAddressC2Em+0x8>
    819c:	00 d0       	rcall	.+0      	; 0x819e <_ZN9IPAddressC2Em+0xa>
    819e:	cd b7       	in	r28, 0x3d	; 61
    81a0:	de b7       	in	r29, 0x3e	; 62
    81a2:	9a 83       	std	Y+2, r25	; 0x02
    81a4:	89 83       	std	Y+1, r24	; 0x01
    81a6:	4b 83       	std	Y+3, r20	; 0x03
    81a8:	5c 83       	std	Y+4, r21	; 0x04
    81aa:	6d 83       	std	Y+5, r22	; 0x05
    81ac:	7e 83       	std	Y+6, r23	; 0x06
    81ae:	89 81       	ldd	r24, Y+1	; 0x01
    81b0:	9a 81       	ldd	r25, Y+2	; 0x02
    81b2:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN9PrintableC2Ev>
    81b6:	e9 81       	ldd	r30, Y+1	; 0x01
    81b8:	fa 81       	ldd	r31, Y+2	; 0x02
    81ba:	82 eb       	ldi	r24, 0xB2	; 178
    81bc:	90 e0       	ldi	r25, 0x00	; 0
    81be:	91 83       	std	Z+1, r25	; 0x01
    81c0:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
    81c2:	89 81       	ldd	r24, Y+1	; 0x01
    81c4:	9a 81       	ldd	r25, Y+2	; 0x02
    81c6:	02 96       	adiw	r24, 0x02	; 2
    81c8:	9e 01       	movw	r18, r28
    81ca:	2d 5f       	subi	r18, 0xFD	; 253
    81cc:	3f 4f       	sbci	r19, 0xFF	; 255
    81ce:	b9 01       	movw	r22, r18
    81d0:	44 e0       	ldi	r20, 0x04	; 4
    81d2:	50 e0       	ldi	r21, 0x00	; 0
    81d4:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
}
    81d8:	26 96       	adiw	r28, 0x06	; 6
    81da:	0f b6       	in	r0, 0x3f	; 63
    81dc:	f8 94       	cli
    81de:	de bf       	out	0x3e, r29	; 62
    81e0:	0f be       	out	0x3f, r0	; 63
    81e2:	cd bf       	out	0x3d, r28	; 61
    81e4:	cf 91       	pop	r28
    81e6:	df 91       	pop	r29
    81e8:	08 95       	ret

000081ea <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    81ea:	df 93       	push	r29
    81ec:	cf 93       	push	r28
    81ee:	00 d0       	rcall	.+0      	; 0x81f0 <_ZN9IPAddressC1Ev+0x6>
    81f0:	cd b7       	in	r28, 0x3d	; 61
    81f2:	de b7       	in	r29, 0x3e	; 62
    81f4:	9a 83       	std	Y+2, r25	; 0x02
    81f6:	89 83       	std	Y+1, r24	; 0x01
    81f8:	89 81       	ldd	r24, Y+1	; 0x01
    81fa:	9a 81       	ldd	r25, Y+2	; 0x02
    81fc:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN9PrintableC2Ev>
    8200:	e9 81       	ldd	r30, Y+1	; 0x01
    8202:	fa 81       	ldd	r31, Y+2	; 0x02
    8204:	82 eb       	ldi	r24, 0xB2	; 178
    8206:	90 e0       	ldi	r25, 0x00	; 0
    8208:	91 83       	std	Z+1, r25	; 0x01
    820a:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    820c:	89 81       	ldd	r24, Y+1	; 0x01
    820e:	9a 81       	ldd	r25, Y+2	; 0x02
    8210:	02 96       	adiw	r24, 0x02	; 2
    8212:	60 e0       	ldi	r22, 0x00	; 0
    8214:	70 e0       	ldi	r23, 0x00	; 0
    8216:	44 e0       	ldi	r20, 0x04	; 4
    8218:	50 e0       	ldi	r21, 0x00	; 0
    821a:	0e 94 1f 85 	call	0x10a3e	; 0x10a3e <memset>
}
    821e:	0f 90       	pop	r0
    8220:	0f 90       	pop	r0
    8222:	cf 91       	pop	r28
    8224:	df 91       	pop	r29
    8226:	08 95       	ret

00008228 <_ZN9IPAddressC2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
    8228:	df 93       	push	r29
    822a:	cf 93       	push	r28
    822c:	00 d0       	rcall	.+0      	; 0x822e <_ZN9IPAddressC2Ev+0x6>
    822e:	cd b7       	in	r28, 0x3d	; 61
    8230:	de b7       	in	r29, 0x3e	; 62
    8232:	9a 83       	std	Y+2, r25	; 0x02
    8234:	89 83       	std	Y+1, r24	; 0x01
    8236:	89 81       	ldd	r24, Y+1	; 0x01
    8238:	9a 81       	ldd	r25, Y+2	; 0x02
    823a:	0e 94 eb 3e 	call	0x7dd6	; 0x7dd6 <_ZN9PrintableC2Ev>
    823e:	e9 81       	ldd	r30, Y+1	; 0x01
    8240:	fa 81       	ldd	r31, Y+2	; 0x02
    8242:	82 eb       	ldi	r24, 0xB2	; 178
    8244:	90 e0       	ldi	r25, 0x00	; 0
    8246:	91 83       	std	Z+1, r25	; 0x01
    8248:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
    824a:	89 81       	ldd	r24, Y+1	; 0x01
    824c:	9a 81       	ldd	r25, Y+2	; 0x02
    824e:	02 96       	adiw	r24, 0x02	; 2
    8250:	60 e0       	ldi	r22, 0x00	; 0
    8252:	70 e0       	ldi	r23, 0x00	; 0
    8254:	44 e0       	ldi	r20, 0x04	; 4
    8256:	50 e0       	ldi	r21, 0x00	; 0
    8258:	0e 94 1f 85 	call	0x10a3e	; 0x10a3e <memset>
}
    825c:	0f 90       	pop	r0
    825e:	0f 90       	pop	r0
    8260:	cf 91       	pop	r28
    8262:	df 91       	pop	r29
    8264:	08 95       	ret

00008266 <_ZNK6String6lengthEv>:
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    8266:	df 93       	push	r29
    8268:	cf 93       	push	r28
    826a:	00 d0       	rcall	.+0      	; 0x826c <_ZNK6String6lengthEv+0x6>
    826c:	cd b7       	in	r28, 0x3d	; 61
    826e:	de b7       	in	r29, 0x3e	; 62
    8270:	9a 83       	std	Y+2, r25	; 0x02
    8272:	89 83       	std	Y+1, r24	; 0x01
    8274:	e9 81       	ldd	r30, Y+1	; 0x01
    8276:	fa 81       	ldd	r31, Y+2	; 0x02
    8278:	84 81       	ldd	r24, Z+4	; 0x04
    827a:	95 81       	ldd	r25, Z+5	; 0x05
    827c:	0f 90       	pop	r0
    827e:	0f 90       	pop	r0
    8280:	cf 91       	pop	r28
    8282:	df 91       	pop	r29
    8284:	08 95       	ret

00008286 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
    8286:	df 93       	push	r29
    8288:	cf 93       	push	r28
    828a:	cd b7       	in	r28, 0x3d	; 61
    828c:	de b7       	in	r29, 0x3e	; 62
    828e:	29 97       	sbiw	r28, 0x09	; 9
    8290:	0f b6       	in	r0, 0x3f	; 63
    8292:	f8 94       	cli
    8294:	de bf       	out	0x3e, r29	; 62
    8296:	0f be       	out	0x3f, r0	; 63
    8298:	cd bf       	out	0x3d, r28	; 61
    829a:	9c 83       	std	Y+4, r25	; 0x04
    829c:	8b 83       	std	Y+3, r24	; 0x03
    829e:	7e 83       	std	Y+6, r23	; 0x06
    82a0:	6d 83       	std	Y+5, r22	; 0x05
    82a2:	58 87       	std	Y+8, r21	; 0x08
    82a4:	4f 83       	std	Y+7, r20	; 0x07
{
  size_t n = 0;
    82a6:	1a 82       	std	Y+2, r1	; 0x02
    82a8:	19 82       	std	Y+1, r1	; 0x01
    82aa:	1b c0       	rjmp	.+54     	; 0x82e2 <_ZN5Print5writeEPKhj+0x5c>
  while (size--) {
    n += write(*buffer++);
    82ac:	eb 81       	ldd	r30, Y+3	; 0x03
    82ae:	fc 81       	ldd	r31, Y+4	; 0x04
    82b0:	01 90       	ld	r0, Z+
    82b2:	f0 81       	ld	r31, Z
    82b4:	e0 2d       	mov	r30, r0
    82b6:	20 81       	ld	r18, Z
    82b8:	31 81       	ldd	r19, Z+1	; 0x01
    82ba:	ed 81       	ldd	r30, Y+5	; 0x05
    82bc:	fe 81       	ldd	r31, Y+6	; 0x06
    82be:	40 81       	ld	r20, Z
    82c0:	8d 81       	ldd	r24, Y+5	; 0x05
    82c2:	9e 81       	ldd	r25, Y+6	; 0x06
    82c4:	01 96       	adiw	r24, 0x01	; 1
    82c6:	9e 83       	std	Y+6, r25	; 0x06
    82c8:	8d 83       	std	Y+5, r24	; 0x05
    82ca:	8b 81       	ldd	r24, Y+3	; 0x03
    82cc:	9c 81       	ldd	r25, Y+4	; 0x04
    82ce:	64 2f       	mov	r22, r20
    82d0:	f9 01       	movw	r30, r18
    82d2:	09 95       	icall
    82d4:	9c 01       	movw	r18, r24
    82d6:	89 81       	ldd	r24, Y+1	; 0x01
    82d8:	9a 81       	ldd	r25, Y+2	; 0x02
    82da:	82 0f       	add	r24, r18
    82dc:	93 1f       	adc	r25, r19
    82de:	9a 83       	std	Y+2, r25	; 0x02
    82e0:	89 83       	std	Y+1, r24	; 0x01

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    82e2:	19 86       	std	Y+9, r1	; 0x09
    82e4:	8f 81       	ldd	r24, Y+7	; 0x07
    82e6:	98 85       	ldd	r25, Y+8	; 0x08
    82e8:	00 97       	sbiw	r24, 0x00	; 0
    82ea:	11 f0       	breq	.+4      	; 0x82f0 <_ZN5Print5writeEPKhj+0x6a>
    82ec:	81 e0       	ldi	r24, 0x01	; 1
    82ee:	89 87       	std	Y+9, r24	; 0x09
    82f0:	8f 81       	ldd	r24, Y+7	; 0x07
    82f2:	98 85       	ldd	r25, Y+8	; 0x08
    82f4:	01 97       	sbiw	r24, 0x01	; 1
    82f6:	98 87       	std	Y+8, r25	; 0x08
    82f8:	8f 83       	std	Y+7, r24	; 0x07
    82fa:	89 85       	ldd	r24, Y+9	; 0x09
    82fc:	88 23       	and	r24, r24
    82fe:	b1 f6       	brne	.-84     	; 0x82ac <_ZN5Print5writeEPKhj+0x26>
    n += write(*buffer++);
  }
  return n;
    8300:	89 81       	ldd	r24, Y+1	; 0x01
    8302:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8304:	29 96       	adiw	r28, 0x09	; 9
    8306:	0f b6       	in	r0, 0x3f	; 63
    8308:	f8 94       	cli
    830a:	de bf       	out	0x3e, r29	; 62
    830c:	0f be       	out	0x3f, r0	; 63
    830e:	cd bf       	out	0x3d, r28	; 61
    8310:	cf 91       	pop	r28
    8312:	df 91       	pop	r29
    8314:	08 95       	ret

00008316 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
    8316:	df 93       	push	r29
    8318:	cf 93       	push	r28
    831a:	cd b7       	in	r28, 0x3d	; 61
    831c:	de b7       	in	r29, 0x3e	; 62
    831e:	2c 97       	sbiw	r28, 0x0c	; 12
    8320:	0f b6       	in	r0, 0x3f	; 63
    8322:	f8 94       	cli
    8324:	de bf       	out	0x3e, r29	; 62
    8326:	0f be       	out	0x3f, r0	; 63
    8328:	cd bf       	out	0x3d, r28	; 61
    832a:	9a 87       	std	Y+10, r25	; 0x0a
    832c:	89 87       	std	Y+9, r24	; 0x09
    832e:	7c 87       	std	Y+12, r23	; 0x0c
    8330:	6b 87       	std	Y+11, r22	; 0x0b
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
    8332:	8b 85       	ldd	r24, Y+11	; 0x0b
    8334:	9c 85       	ldd	r25, Y+12	; 0x0c
    8336:	98 87       	std	Y+8, r25	; 0x08
    8338:	8f 83       	std	Y+7, r24	; 0x07
  size_t n = 0;
    833a:	1e 82       	std	Y+6, r1	; 0x06
    833c:	1d 82       	std	Y+5, r1	; 0x05
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    833e:	8f 81       	ldd	r24, Y+7	; 0x07
    8340:	98 85       	ldd	r25, Y+8	; 0x08
    8342:	9b 83       	std	Y+3, r25	; 0x03
    8344:	8a 83       	std	Y+2, r24	; 0x02
    8346:	8f 81       	ldd	r24, Y+7	; 0x07
    8348:	98 85       	ldd	r25, Y+8	; 0x08
    834a:	01 96       	adiw	r24, 0x01	; 1
    834c:	98 87       	std	Y+8, r25	; 0x08
    834e:	8f 83       	std	Y+7, r24	; 0x07
    8350:	ea 81       	ldd	r30, Y+2	; 0x02
    8352:	fb 81       	ldd	r31, Y+3	; 0x03
    8354:	84 91       	lpm	r24, Z+
    8356:	89 83       	std	Y+1, r24	; 0x01
    8358:	89 81       	ldd	r24, Y+1	; 0x01
    835a:	8c 83       	std	Y+4, r24	; 0x04
    if (c == 0) break;
    835c:	8c 81       	ldd	r24, Y+4	; 0x04
    835e:	88 23       	and	r24, r24
    8360:	a1 f0       	breq	.+40     	; 0x838a <_ZN5Print5printEPK19__FlashStringHelper+0x74>
    n += write(c);
    8362:	e9 85       	ldd	r30, Y+9	; 0x09
    8364:	fa 85       	ldd	r31, Y+10	; 0x0a
    8366:	01 90       	ld	r0, Z+
    8368:	f0 81       	ld	r31, Z
    836a:	e0 2d       	mov	r30, r0
    836c:	01 90       	ld	r0, Z+
    836e:	f0 81       	ld	r31, Z
    8370:	e0 2d       	mov	r30, r0
    8372:	89 85       	ldd	r24, Y+9	; 0x09
    8374:	9a 85       	ldd	r25, Y+10	; 0x0a
    8376:	6c 81       	ldd	r22, Y+4	; 0x04
    8378:	09 95       	icall
    837a:	9c 01       	movw	r18, r24
    837c:	8d 81       	ldd	r24, Y+5	; 0x05
    837e:	9e 81       	ldd	r25, Y+6	; 0x06
    8380:	82 0f       	add	r24, r18
    8382:	93 1f       	adc	r25, r19
    8384:	9e 83       	std	Y+6, r25	; 0x06
    8386:	8d 83       	std	Y+5, r24	; 0x05
    8388:	da cf       	rjmp	.-76     	; 0x833e <_ZN5Print5printEPK19__FlashStringHelper+0x28>
  }
  return n;
    838a:	8d 81       	ldd	r24, Y+5	; 0x05
    838c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    838e:	2c 96       	adiw	r28, 0x0c	; 12
    8390:	0f b6       	in	r0, 0x3f	; 63
    8392:	f8 94       	cli
    8394:	de bf       	out	0x3e, r29	; 62
    8396:	0f be       	out	0x3f, r0	; 63
    8398:	cd bf       	out	0x3d, r28	; 61
    839a:	cf 91       	pop	r28
    839c:	df 91       	pop	r29
    839e:	08 95       	ret

000083a0 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
    83a0:	df 93       	push	r29
    83a2:	cf 93       	push	r28
    83a4:	00 d0       	rcall	.+0      	; 0x83a6 <_ZN5Print5printEc+0x6>
    83a6:	0f 92       	push	r0
    83a8:	cd b7       	in	r28, 0x3d	; 61
    83aa:	de b7       	in	r29, 0x3e	; 62
    83ac:	9a 83       	std	Y+2, r25	; 0x02
    83ae:	89 83       	std	Y+1, r24	; 0x01
    83b0:	6b 83       	std	Y+3, r22	; 0x03
{
  return write(c);
    83b2:	e9 81       	ldd	r30, Y+1	; 0x01
    83b4:	fa 81       	ldd	r31, Y+2	; 0x02
    83b6:	01 90       	ld	r0, Z+
    83b8:	f0 81       	ld	r31, Z
    83ba:	e0 2d       	mov	r30, r0
    83bc:	01 90       	ld	r0, Z+
    83be:	f0 81       	ld	r31, Z
    83c0:	e0 2d       	mov	r30, r0
    83c2:	89 81       	ldd	r24, Y+1	; 0x01
    83c4:	9a 81       	ldd	r25, Y+2	; 0x02
    83c6:	6b 81       	ldd	r22, Y+3	; 0x03
    83c8:	09 95       	icall
}
    83ca:	0f 90       	pop	r0
    83cc:	0f 90       	pop	r0
    83ce:	0f 90       	pop	r0
    83d0:	cf 91       	pop	r28
    83d2:	df 91       	pop	r29
    83d4:	08 95       	ret

000083d6 <_ZN5Print5printERK9Printable>:
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
    83d6:	df 93       	push	r29
    83d8:	cf 93       	push	r28
    83da:	00 d0       	rcall	.+0      	; 0x83dc <_ZN5Print5printERK9Printable+0x6>
    83dc:	00 d0       	rcall	.+0      	; 0x83de <_ZN5Print5printERK9Printable+0x8>
    83de:	cd b7       	in	r28, 0x3d	; 61
    83e0:	de b7       	in	r29, 0x3e	; 62
    83e2:	9a 83       	std	Y+2, r25	; 0x02
    83e4:	89 83       	std	Y+1, r24	; 0x01
    83e6:	7c 83       	std	Y+4, r23	; 0x04
    83e8:	6b 83       	std	Y+3, r22	; 0x03
{
  return x.printTo(*this);
    83ea:	eb 81       	ldd	r30, Y+3	; 0x03
    83ec:	fc 81       	ldd	r31, Y+4	; 0x04
    83ee:	01 90       	ld	r0, Z+
    83f0:	f0 81       	ld	r31, Z
    83f2:	e0 2d       	mov	r30, r0
    83f4:	01 90       	ld	r0, Z+
    83f6:	f0 81       	ld	r31, Z
    83f8:	e0 2d       	mov	r30, r0
    83fa:	8b 81       	ldd	r24, Y+3	; 0x03
    83fc:	9c 81       	ldd	r25, Y+4	; 0x04
    83fe:	29 81       	ldd	r18, Y+1	; 0x01
    8400:	3a 81       	ldd	r19, Y+2	; 0x02
    8402:	b9 01       	movw	r22, r18
    8404:	09 95       	icall
}
    8406:	0f 90       	pop	r0
    8408:	0f 90       	pop	r0
    840a:	0f 90       	pop	r0
    840c:	0f 90       	pop	r0
    840e:	cf 91       	pop	r28
    8410:	df 91       	pop	r29
    8412:	08 95       	ret

00008414 <_ZN5Print7printlnEv>:

size_t Print::println(void)
    8414:	df 93       	push	r29
    8416:	cf 93       	push	r28
    8418:	00 d0       	rcall	.+0      	; 0x841a <_ZN5Print7printlnEv+0x6>
    841a:	00 d0       	rcall	.+0      	; 0x841c <_ZN5Print7printlnEv+0x8>
    841c:	cd b7       	in	r28, 0x3d	; 61
    841e:	de b7       	in	r29, 0x3e	; 62
    8420:	9c 83       	std	Y+4, r25	; 0x04
    8422:	8b 83       	std	Y+3, r24	; 0x03
{
  size_t n = print('\r');
    8424:	8b 81       	ldd	r24, Y+3	; 0x03
    8426:	9c 81       	ldd	r25, Y+4	; 0x04
    8428:	6d e0       	ldi	r22, 0x0D	; 13
    842a:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
    842e:	9a 83       	std	Y+2, r25	; 0x02
    8430:	89 83       	std	Y+1, r24	; 0x01
  n += print('\n');
    8432:	8b 81       	ldd	r24, Y+3	; 0x03
    8434:	9c 81       	ldd	r25, Y+4	; 0x04
    8436:	6a e0       	ldi	r22, 0x0A	; 10
    8438:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
    843c:	9c 01       	movw	r18, r24
    843e:	89 81       	ldd	r24, Y+1	; 0x01
    8440:	9a 81       	ldd	r25, Y+2	; 0x02
    8442:	82 0f       	add	r24, r18
    8444:	93 1f       	adc	r25, r19
    8446:	9a 83       	std	Y+2, r25	; 0x02
    8448:	89 83       	std	Y+1, r24	; 0x01
  return n;
    844a:	89 81       	ldd	r24, Y+1	; 0x01
    844c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    844e:	0f 90       	pop	r0
    8450:	0f 90       	pop	r0
    8452:	0f 90       	pop	r0
    8454:	0f 90       	pop	r0
    8456:	cf 91       	pop	r28
    8458:	df 91       	pop	r29
    845a:	08 95       	ret

0000845c <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
    845c:	df 93       	push	r29
    845e:	cf 93       	push	r28
    8460:	00 d0       	rcall	.+0      	; 0x8462 <_ZN5Print7printlnEPK19__FlashStringHelper+0x6>
    8462:	00 d0       	rcall	.+0      	; 0x8464 <_ZN5Print7printlnEPK19__FlashStringHelper+0x8>
    8464:	00 d0       	rcall	.+0      	; 0x8466 <_ZN5Print7printlnEPK19__FlashStringHelper+0xa>
    8466:	cd b7       	in	r28, 0x3d	; 61
    8468:	de b7       	in	r29, 0x3e	; 62
    846a:	9c 83       	std	Y+4, r25	; 0x04
    846c:	8b 83       	std	Y+3, r24	; 0x03
    846e:	7e 83       	std	Y+6, r23	; 0x06
    8470:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(ifsh);
    8472:	8b 81       	ldd	r24, Y+3	; 0x03
    8474:	9c 81       	ldd	r25, Y+4	; 0x04
    8476:	2d 81       	ldd	r18, Y+5	; 0x05
    8478:	3e 81       	ldd	r19, Y+6	; 0x06
    847a:	b9 01       	movw	r22, r18
    847c:	0e 94 8b 41 	call	0x8316	; 0x8316 <_ZN5Print5printEPK19__FlashStringHelper>
    8480:	9a 83       	std	Y+2, r25	; 0x02
    8482:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    8484:	8b 81       	ldd	r24, Y+3	; 0x03
    8486:	9c 81       	ldd	r25, Y+4	; 0x04
    8488:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    848c:	9c 01       	movw	r18, r24
    848e:	89 81       	ldd	r24, Y+1	; 0x01
    8490:	9a 81       	ldd	r25, Y+2	; 0x02
    8492:	82 0f       	add	r24, r18
    8494:	93 1f       	adc	r25, r19
    8496:	9a 83       	std	Y+2, r25	; 0x02
    8498:	89 83       	std	Y+1, r24	; 0x01
  return n;
    849a:	89 81       	ldd	r24, Y+1	; 0x01
    849c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    849e:	26 96       	adiw	r28, 0x06	; 6
    84a0:	0f b6       	in	r0, 0x3f	; 63
    84a2:	f8 94       	cli
    84a4:	de bf       	out	0x3e, r29	; 62
    84a6:	0f be       	out	0x3f, r0	; 63
    84a8:	cd bf       	out	0x3d, r28	; 61
    84aa:	cf 91       	pop	r28
    84ac:	df 91       	pop	r29
    84ae:	08 95       	ret

000084b0 <_ZN5Print7printlnEc>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(char c)
    84b0:	df 93       	push	r29
    84b2:	cf 93       	push	r28
    84b4:	00 d0       	rcall	.+0      	; 0x84b6 <_ZN5Print7printlnEc+0x6>
    84b6:	00 d0       	rcall	.+0      	; 0x84b8 <_ZN5Print7printlnEc+0x8>
    84b8:	0f 92       	push	r0
    84ba:	cd b7       	in	r28, 0x3d	; 61
    84bc:	de b7       	in	r29, 0x3e	; 62
    84be:	9c 83       	std	Y+4, r25	; 0x04
    84c0:	8b 83       	std	Y+3, r24	; 0x03
    84c2:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(c);
    84c4:	8b 81       	ldd	r24, Y+3	; 0x03
    84c6:	9c 81       	ldd	r25, Y+4	; 0x04
    84c8:	6d 81       	ldd	r22, Y+5	; 0x05
    84ca:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
    84ce:	9a 83       	std	Y+2, r25	; 0x02
    84d0:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    84d2:	8b 81       	ldd	r24, Y+3	; 0x03
    84d4:	9c 81       	ldd	r25, Y+4	; 0x04
    84d6:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    84da:	9c 01       	movw	r18, r24
    84dc:	89 81       	ldd	r24, Y+1	; 0x01
    84de:	9a 81       	ldd	r25, Y+2	; 0x02
    84e0:	82 0f       	add	r24, r18
    84e2:	93 1f       	adc	r25, r19
    84e4:	9a 83       	std	Y+2, r25	; 0x02
    84e6:	89 83       	std	Y+1, r24	; 0x01
  return n;
    84e8:	89 81       	ldd	r24, Y+1	; 0x01
    84ea:	9a 81       	ldd	r25, Y+2	; 0x02
}
    84ec:	0f 90       	pop	r0
    84ee:	0f 90       	pop	r0
    84f0:	0f 90       	pop	r0
    84f2:	0f 90       	pop	r0
    84f4:	0f 90       	pop	r0
    84f6:	cf 91       	pop	r28
    84f8:	df 91       	pop	r29
    84fa:	08 95       	ret

000084fc <_ZN5Print7printlnERK9Printable>:
  size_t n = print(num, digits);
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
    84fc:	df 93       	push	r29
    84fe:	cf 93       	push	r28
    8500:	00 d0       	rcall	.+0      	; 0x8502 <_ZN5Print7printlnERK9Printable+0x6>
    8502:	00 d0       	rcall	.+0      	; 0x8504 <_ZN5Print7printlnERK9Printable+0x8>
    8504:	00 d0       	rcall	.+0      	; 0x8506 <_ZN5Print7printlnERK9Printable+0xa>
    8506:	cd b7       	in	r28, 0x3d	; 61
    8508:	de b7       	in	r29, 0x3e	; 62
    850a:	9c 83       	std	Y+4, r25	; 0x04
    850c:	8b 83       	std	Y+3, r24	; 0x03
    850e:	7e 83       	std	Y+6, r23	; 0x06
    8510:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(x);
    8512:	8b 81       	ldd	r24, Y+3	; 0x03
    8514:	9c 81       	ldd	r25, Y+4	; 0x04
    8516:	2d 81       	ldd	r18, Y+5	; 0x05
    8518:	3e 81       	ldd	r19, Y+6	; 0x06
    851a:	b9 01       	movw	r22, r18
    851c:	0e 94 eb 41 	call	0x83d6	; 0x83d6 <_ZN5Print5printERK9Printable>
    8520:	9a 83       	std	Y+2, r25	; 0x02
    8522:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    8524:	8b 81       	ldd	r24, Y+3	; 0x03
    8526:	9c 81       	ldd	r25, Y+4	; 0x04
    8528:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    852c:	9c 01       	movw	r18, r24
    852e:	89 81       	ldd	r24, Y+1	; 0x01
    8530:	9a 81       	ldd	r25, Y+2	; 0x02
    8532:	82 0f       	add	r24, r18
    8534:	93 1f       	adc	r25, r19
    8536:	9a 83       	std	Y+2, r25	; 0x02
    8538:	89 83       	std	Y+1, r24	; 0x01
  return n;
    853a:	89 81       	ldd	r24, Y+1	; 0x01
    853c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    853e:	26 96       	adiw	r28, 0x06	; 6
    8540:	0f b6       	in	r0, 0x3f	; 63
    8542:	f8 94       	cli
    8544:	de bf       	out	0x3e, r29	; 62
    8546:	0f be       	out	0x3f, r0	; 63
    8548:	cd bf       	out	0x3d, r28	; 61
    854a:	cf 91       	pop	r28
    854c:	df 91       	pop	r29
    854e:	08 95       	ret

00008550 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    8550:	0f 93       	push	r16
    8552:	1f 93       	push	r17
    8554:	df 93       	push	r29
    8556:	cf 93       	push	r28
    8558:	00 d0       	rcall	.+0      	; 0x855a <_ZN5Print5writeEPKc+0xa>
    855a:	00 d0       	rcall	.+0      	; 0x855c <_ZN5Print5writeEPKc+0xc>
    855c:	cd b7       	in	r28, 0x3d	; 61
    855e:	de b7       	in	r29, 0x3e	; 62
    8560:	9a 83       	std	Y+2, r25	; 0x02
    8562:	89 83       	std	Y+1, r24	; 0x01
    8564:	7c 83       	std	Y+4, r23	; 0x04
    8566:	6b 83       	std	Y+3, r22	; 0x03
    8568:	e9 81       	ldd	r30, Y+1	; 0x01
    856a:	fa 81       	ldd	r31, Y+2	; 0x02
    856c:	80 81       	ld	r24, Z
    856e:	91 81       	ldd	r25, Z+1	; 0x01
    8570:	fc 01       	movw	r30, r24
    8572:	32 96       	adiw	r30, 0x02	; 2
    8574:	00 81       	ld	r16, Z
    8576:	11 81       	ldd	r17, Z+1	; 0x01
    8578:	8b 81       	ldd	r24, Y+3	; 0x03
    857a:	9c 81       	ldd	r25, Y+4	; 0x04
    857c:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    8580:	ac 01       	movw	r20, r24
    8582:	89 81       	ldd	r24, Y+1	; 0x01
    8584:	9a 81       	ldd	r25, Y+2	; 0x02
    8586:	2b 81       	ldd	r18, Y+3	; 0x03
    8588:	3c 81       	ldd	r19, Y+4	; 0x04
    858a:	b9 01       	movw	r22, r18
    858c:	f8 01       	movw	r30, r16
    858e:	09 95       	icall
    8590:	0f 90       	pop	r0
    8592:	0f 90       	pop	r0
    8594:	0f 90       	pop	r0
    8596:	0f 90       	pop	r0
    8598:	cf 91       	pop	r28
    859a:	df 91       	pop	r29
    859c:	1f 91       	pop	r17
    859e:	0f 91       	pop	r16
    85a0:	08 95       	ret

000085a2 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    85a2:	1f 93       	push	r17
    85a4:	df 93       	push	r29
    85a6:	cf 93       	push	r28
    85a8:	cd b7       	in	r28, 0x3d	; 61
    85aa:	de b7       	in	r29, 0x3e	; 62
    85ac:	e0 97       	sbiw	r28, 0x30	; 48
    85ae:	0f b6       	in	r0, 0x3f	; 63
    85b0:	f8 94       	cli
    85b2:	de bf       	out	0x3e, r29	; 62
    85b4:	0f be       	out	0x3f, r0	; 63
    85b6:	cd bf       	out	0x3d, r28	; 61
    85b8:	9a a7       	std	Y+42, r25	; 0x2a
    85ba:	89 a7       	std	Y+41, r24	; 0x29
    85bc:	4b a7       	std	Y+43, r20	; 0x2b
    85be:	5c a7       	std	Y+44, r21	; 0x2c
    85c0:	6d a7       	std	Y+45, r22	; 0x2d
    85c2:	7e a7       	std	Y+46, r23	; 0x2e
    85c4:	2f a7       	std	Y+47, r18	; 0x2f
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
    85c6:	ce 01       	movw	r24, r28
    85c8:	08 96       	adiw	r24, 0x08	; 8
    85ca:	80 96       	adiw	r24, 0x20	; 32
    85cc:	9f 83       	std	Y+7, r25	; 0x07
    85ce:	8e 83       	std	Y+6, r24	; 0x06

  *str = '\0';
    85d0:	ee 81       	ldd	r30, Y+6	; 0x06
    85d2:	ff 81       	ldd	r31, Y+7	; 0x07
    85d4:	10 82       	st	Z, r1

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    85d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    85d8:	82 30       	cpi	r24, 0x02	; 2
    85da:	10 f4       	brcc	.+4      	; 0x85e0 <_ZN5Print11printNumberEmh+0x3e>
    85dc:	8a e0       	ldi	r24, 0x0A	; 10
    85de:	8f a7       	std	Y+47, r24	; 0x2f

  do {
    unsigned long m = n;
    85e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    85e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    85e4:	ad a5       	ldd	r26, Y+45	; 0x2d
    85e6:	be a5       	ldd	r27, Y+46	; 0x2e
    85e8:	8a 83       	std	Y+2, r24	; 0x02
    85ea:	9b 83       	std	Y+3, r25	; 0x03
    85ec:	ac 83       	std	Y+4, r26	; 0x04
    85ee:	bd 83       	std	Y+5, r27	; 0x05
    n /= base;
    85f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    85f2:	28 2f       	mov	r18, r24
    85f4:	30 e0       	ldi	r19, 0x00	; 0
    85f6:	40 e0       	ldi	r20, 0x00	; 0
    85f8:	50 e0       	ldi	r21, 0x00	; 0
    85fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    85fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    85fe:	ad a5       	ldd	r26, Y+45	; 0x2d
    8600:	be a5       	ldd	r27, Y+46	; 0x2e
    8602:	bc 01       	movw	r22, r24
    8604:	cd 01       	movw	r24, r26
    8606:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    860a:	da 01       	movw	r26, r20
    860c:	c9 01       	movw	r24, r18
    860e:	8b a7       	std	Y+43, r24	; 0x2b
    8610:	9c a7       	std	Y+44, r25	; 0x2c
    8612:	ad a7       	std	Y+45, r26	; 0x2d
    8614:	be a7       	std	Y+46, r27	; 0x2e
    char c = m - base * n;
    8616:	1a 81       	ldd	r17, Y+2	; 0x02
    8618:	8f a5       	ldd	r24, Y+47	; 0x2f
    861a:	88 2f       	mov	r24, r24
    861c:	90 e0       	ldi	r25, 0x00	; 0
    861e:	a0 e0       	ldi	r26, 0x00	; 0
    8620:	b0 e0       	ldi	r27, 0x00	; 0
    8622:	2b a5       	ldd	r18, Y+43	; 0x2b
    8624:	3c a5       	ldd	r19, Y+44	; 0x2c
    8626:	4d a5       	ldd	r20, Y+45	; 0x2d
    8628:	5e a5       	ldd	r21, Y+46	; 0x2e
    862a:	bc 01       	movw	r22, r24
    862c:	cd 01       	movw	r24, r26
    862e:	0e 94 b8 81 	call	0x10370	; 0x10370 <__mulsi3>
    8632:	dc 01       	movw	r26, r24
    8634:	cb 01       	movw	r24, r22
    8636:	91 2f       	mov	r25, r17
    8638:	98 1b       	sub	r25, r24
    863a:	89 2f       	mov	r24, r25
    863c:	89 83       	std	Y+1, r24	; 0x01
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    863e:	8e 81       	ldd	r24, Y+6	; 0x06
    8640:	9f 81       	ldd	r25, Y+7	; 0x07
    8642:	01 97       	sbiw	r24, 0x01	; 1
    8644:	9f 83       	std	Y+7, r25	; 0x07
    8646:	8e 83       	std	Y+6, r24	; 0x06
    8648:	89 81       	ldd	r24, Y+1	; 0x01
    864a:	8a 30       	cpi	r24, 0x0A	; 10
    864c:	28 f4       	brcc	.+10     	; 0x8658 <_ZN5Print11printNumberEmh+0xb6>
    864e:	89 81       	ldd	r24, Y+1	; 0x01
    8650:	98 2f       	mov	r25, r24
    8652:	90 5d       	subi	r25, 0xD0	; 208
    8654:	98 ab       	std	Y+48, r25	; 0x30
    8656:	04 c0       	rjmp	.+8      	; 0x8660 <_ZN5Print11printNumberEmh+0xbe>
    8658:	89 81       	ldd	r24, Y+1	; 0x01
    865a:	98 2f       	mov	r25, r24
    865c:	99 5c       	subi	r25, 0xC9	; 201
    865e:	98 ab       	std	Y+48, r25	; 0x30
    8660:	ee 81       	ldd	r30, Y+6	; 0x06
    8662:	ff 81       	ldd	r31, Y+7	; 0x07
    8664:	88 a9       	ldd	r24, Y+48	; 0x30
    8666:	80 83       	st	Z, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    8668:	8b a5       	ldd	r24, Y+43	; 0x2b
    866a:	9c a5       	ldd	r25, Y+44	; 0x2c
    866c:	ad a5       	ldd	r26, Y+45	; 0x2d
    866e:	be a5       	ldd	r27, Y+46	; 0x2e
    8670:	00 97       	sbiw	r24, 0x00	; 0
    8672:	a1 05       	cpc	r26, r1
    8674:	b1 05       	cpc	r27, r1
    8676:	09 f0       	breq	.+2      	; 0x867a <_ZN5Print11printNumberEmh+0xd8>
    8678:	b3 cf       	rjmp	.-154    	; 0x85e0 <_ZN5Print11printNumberEmh+0x3e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    867a:	89 a5       	ldd	r24, Y+41	; 0x29
    867c:	9a a5       	ldd	r25, Y+42	; 0x2a
    867e:	2e 81       	ldd	r18, Y+6	; 0x06
    8680:	3f 81       	ldd	r19, Y+7	; 0x07
    8682:	b9 01       	movw	r22, r18
    8684:	0e 94 a8 42 	call	0x8550	; 0x8550 <_ZN5Print5writeEPKc>
}
    8688:	e0 96       	adiw	r28, 0x30	; 48
    868a:	0f b6       	in	r0, 0x3f	; 63
    868c:	f8 94       	cli
    868e:	de bf       	out	0x3e, r29	; 62
    8690:	0f be       	out	0x3f, r0	; 63
    8692:	cd bf       	out	0x3d, r28	; 61
    8694:	cf 91       	pop	r28
    8696:	df 91       	pop	r29
    8698:	1f 91       	pop	r17
    869a:	08 95       	ret

0000869c <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
    869c:	df 93       	push	r29
    869e:	cf 93       	push	r28
    86a0:	cd b7       	in	r28, 0x3d	; 61
    86a2:	de b7       	in	r29, 0x3e	; 62
    86a4:	2a 97       	sbiw	r28, 0x0a	; 10
    86a6:	0f b6       	in	r0, 0x3f	; 63
    86a8:	f8 94       	cli
    86aa:	de bf       	out	0x3e, r29	; 62
    86ac:	0f be       	out	0x3f, r0	; 63
    86ae:	cd bf       	out	0x3d, r28	; 61
    86b0:	9a 83       	std	Y+2, r25	; 0x02
    86b2:	89 83       	std	Y+1, r24	; 0x01
    86b4:	4b 83       	std	Y+3, r20	; 0x03
    86b6:	5c 83       	std	Y+4, r21	; 0x04
    86b8:	6d 83       	std	Y+5, r22	; 0x05
    86ba:	7e 83       	std	Y+6, r23	; 0x06
    86bc:	38 87       	std	Y+8, r19	; 0x08
    86be:	2f 83       	std	Y+7, r18	; 0x07
{
  if (base == 0) return write(n);
    86c0:	8f 81       	ldd	r24, Y+7	; 0x07
    86c2:	98 85       	ldd	r25, Y+8	; 0x08
    86c4:	00 97       	sbiw	r24, 0x00	; 0
    86c6:	81 f4       	brne	.+32     	; 0x86e8 <_ZN5Print5printEmi+0x4c>
    86c8:	e9 81       	ldd	r30, Y+1	; 0x01
    86ca:	fa 81       	ldd	r31, Y+2	; 0x02
    86cc:	01 90       	ld	r0, Z+
    86ce:	f0 81       	ld	r31, Z
    86d0:	e0 2d       	mov	r30, r0
    86d2:	01 90       	ld	r0, Z+
    86d4:	f0 81       	ld	r31, Z
    86d6:	e0 2d       	mov	r30, r0
    86d8:	2b 81       	ldd	r18, Y+3	; 0x03
    86da:	89 81       	ldd	r24, Y+1	; 0x01
    86dc:	9a 81       	ldd	r25, Y+2	; 0x02
    86de:	62 2f       	mov	r22, r18
    86e0:	09 95       	icall
    86e2:	9a 87       	std	Y+10, r25	; 0x0a
    86e4:	89 87       	std	Y+9, r24	; 0x09
    86e6:	0e c0       	rjmp	.+28     	; 0x8704 <_ZN5Print5printEmi+0x68>
  else return printNumber(n, base);
    86e8:	ef 81       	ldd	r30, Y+7	; 0x07
    86ea:	89 81       	ldd	r24, Y+1	; 0x01
    86ec:	9a 81       	ldd	r25, Y+2	; 0x02
    86ee:	2b 81       	ldd	r18, Y+3	; 0x03
    86f0:	3c 81       	ldd	r19, Y+4	; 0x04
    86f2:	4d 81       	ldd	r20, Y+5	; 0x05
    86f4:	5e 81       	ldd	r21, Y+6	; 0x06
    86f6:	ba 01       	movw	r22, r20
    86f8:	a9 01       	movw	r20, r18
    86fa:	2e 2f       	mov	r18, r30
    86fc:	0e 94 d1 42 	call	0x85a2	; 0x85a2 <_ZN5Print11printNumberEmh>
    8700:	9a 87       	std	Y+10, r25	; 0x0a
    8702:	89 87       	std	Y+9, r24	; 0x09
    8704:	89 85       	ldd	r24, Y+9	; 0x09
    8706:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    8708:	2a 96       	adiw	r28, 0x0a	; 10
    870a:	0f b6       	in	r0, 0x3f	; 63
    870c:	f8 94       	cli
    870e:	de bf       	out	0x3e, r29	; 62
    8710:	0f be       	out	0x3f, r0	; 63
    8712:	cd bf       	out	0x3d, r28	; 61
    8714:	cf 91       	pop	r28
    8716:	df 91       	pop	r29
    8718:	08 95       	ret

0000871a <_ZN5Print7printlnEmi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
    871a:	df 93       	push	r29
    871c:	cf 93       	push	r28
    871e:	cd b7       	in	r28, 0x3d	; 61
    8720:	de b7       	in	r29, 0x3e	; 62
    8722:	2a 97       	sbiw	r28, 0x0a	; 10
    8724:	0f b6       	in	r0, 0x3f	; 63
    8726:	f8 94       	cli
    8728:	de bf       	out	0x3e, r29	; 62
    872a:	0f be       	out	0x3f, r0	; 63
    872c:	cd bf       	out	0x3d, r28	; 61
    872e:	9c 83       	std	Y+4, r25	; 0x04
    8730:	8b 83       	std	Y+3, r24	; 0x03
    8732:	4d 83       	std	Y+5, r20	; 0x05
    8734:	5e 83       	std	Y+6, r21	; 0x06
    8736:	6f 83       	std	Y+7, r22	; 0x07
    8738:	78 87       	std	Y+8, r23	; 0x08
    873a:	3a 87       	std	Y+10, r19	; 0x0a
    873c:	29 87       	std	Y+9, r18	; 0x09
{
  size_t n = print(num, base);
    873e:	8b 81       	ldd	r24, Y+3	; 0x03
    8740:	9c 81       	ldd	r25, Y+4	; 0x04
    8742:	2d 81       	ldd	r18, Y+5	; 0x05
    8744:	3e 81       	ldd	r19, Y+6	; 0x06
    8746:	4f 81       	ldd	r20, Y+7	; 0x07
    8748:	58 85       	ldd	r21, Y+8	; 0x08
    874a:	e9 85       	ldd	r30, Y+9	; 0x09
    874c:	fa 85       	ldd	r31, Y+10	; 0x0a
    874e:	ba 01       	movw	r22, r20
    8750:	a9 01       	movw	r20, r18
    8752:	9f 01       	movw	r18, r30
    8754:	0e 94 4e 43 	call	0x869c	; 0x869c <_ZN5Print5printEmi>
    8758:	9a 83       	std	Y+2, r25	; 0x02
    875a:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    875c:	8b 81       	ldd	r24, Y+3	; 0x03
    875e:	9c 81       	ldd	r25, Y+4	; 0x04
    8760:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    8764:	9c 01       	movw	r18, r24
    8766:	89 81       	ldd	r24, Y+1	; 0x01
    8768:	9a 81       	ldd	r25, Y+2	; 0x02
    876a:	82 0f       	add	r24, r18
    876c:	93 1f       	adc	r25, r19
    876e:	9a 83       	std	Y+2, r25	; 0x02
    8770:	89 83       	std	Y+1, r24	; 0x01
  return n;
    8772:	89 81       	ldd	r24, Y+1	; 0x01
    8774:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8776:	2a 96       	adiw	r28, 0x0a	; 10
    8778:	0f b6       	in	r0, 0x3f	; 63
    877a:	f8 94       	cli
    877c:	de bf       	out	0x3e, r29	; 62
    877e:	0f be       	out	0x3f, r0	; 63
    8780:	cd bf       	out	0x3d, r28	; 61
    8782:	cf 91       	pop	r28
    8784:	df 91       	pop	r29
    8786:	08 95       	ret

00008788 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
    8788:	df 93       	push	r29
    878a:	cf 93       	push	r28
    878c:	00 d0       	rcall	.+0      	; 0x878e <_ZN5Print5printEji+0x6>
    878e:	00 d0       	rcall	.+0      	; 0x8790 <_ZN5Print5printEji+0x8>
    8790:	00 d0       	rcall	.+0      	; 0x8792 <_ZN5Print5printEji+0xa>
    8792:	cd b7       	in	r28, 0x3d	; 61
    8794:	de b7       	in	r29, 0x3e	; 62
    8796:	9a 83       	std	Y+2, r25	; 0x02
    8798:	89 83       	std	Y+1, r24	; 0x01
    879a:	7c 83       	std	Y+4, r23	; 0x04
    879c:	6b 83       	std	Y+3, r22	; 0x03
    879e:	5e 83       	std	Y+6, r21	; 0x06
    87a0:	4d 83       	std	Y+5, r20	; 0x05
{
  return print((unsigned long) n, base);
    87a2:	8b 81       	ldd	r24, Y+3	; 0x03
    87a4:	9c 81       	ldd	r25, Y+4	; 0x04
    87a6:	9c 01       	movw	r18, r24
    87a8:	40 e0       	ldi	r20, 0x00	; 0
    87aa:	50 e0       	ldi	r21, 0x00	; 0
    87ac:	89 81       	ldd	r24, Y+1	; 0x01
    87ae:	9a 81       	ldd	r25, Y+2	; 0x02
    87b0:	ed 81       	ldd	r30, Y+5	; 0x05
    87b2:	fe 81       	ldd	r31, Y+6	; 0x06
    87b4:	ba 01       	movw	r22, r20
    87b6:	a9 01       	movw	r20, r18
    87b8:	9f 01       	movw	r18, r30
    87ba:	0e 94 4e 43 	call	0x869c	; 0x869c <_ZN5Print5printEmi>
}
    87be:	26 96       	adiw	r28, 0x06	; 6
    87c0:	0f b6       	in	r0, 0x3f	; 63
    87c2:	f8 94       	cli
    87c4:	de bf       	out	0x3e, r29	; 62
    87c6:	0f be       	out	0x3f, r0	; 63
    87c8:	cd bf       	out	0x3d, r28	; 61
    87ca:	cf 91       	pop	r28
    87cc:	df 91       	pop	r29
    87ce:	08 95       	ret

000087d0 <_ZN5Print7printlnEji>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
    87d0:	df 93       	push	r29
    87d2:	cf 93       	push	r28
    87d4:	cd b7       	in	r28, 0x3d	; 61
    87d6:	de b7       	in	r29, 0x3e	; 62
    87d8:	28 97       	sbiw	r28, 0x08	; 8
    87da:	0f b6       	in	r0, 0x3f	; 63
    87dc:	f8 94       	cli
    87de:	de bf       	out	0x3e, r29	; 62
    87e0:	0f be       	out	0x3f, r0	; 63
    87e2:	cd bf       	out	0x3d, r28	; 61
    87e4:	9c 83       	std	Y+4, r25	; 0x04
    87e6:	8b 83       	std	Y+3, r24	; 0x03
    87e8:	7e 83       	std	Y+6, r23	; 0x06
    87ea:	6d 83       	std	Y+5, r22	; 0x05
    87ec:	58 87       	std	Y+8, r21	; 0x08
    87ee:	4f 83       	std	Y+7, r20	; 0x07
{
  size_t n = print(num, base);
    87f0:	8b 81       	ldd	r24, Y+3	; 0x03
    87f2:	9c 81       	ldd	r25, Y+4	; 0x04
    87f4:	2d 81       	ldd	r18, Y+5	; 0x05
    87f6:	3e 81       	ldd	r19, Y+6	; 0x06
    87f8:	4f 81       	ldd	r20, Y+7	; 0x07
    87fa:	58 85       	ldd	r21, Y+8	; 0x08
    87fc:	b9 01       	movw	r22, r18
    87fe:	0e 94 c4 43 	call	0x8788	; 0x8788 <_ZN5Print5printEji>
    8802:	9a 83       	std	Y+2, r25	; 0x02
    8804:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    8806:	8b 81       	ldd	r24, Y+3	; 0x03
    8808:	9c 81       	ldd	r25, Y+4	; 0x04
    880a:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    880e:	9c 01       	movw	r18, r24
    8810:	89 81       	ldd	r24, Y+1	; 0x01
    8812:	9a 81       	ldd	r25, Y+2	; 0x02
    8814:	82 0f       	add	r24, r18
    8816:	93 1f       	adc	r25, r19
    8818:	9a 83       	std	Y+2, r25	; 0x02
    881a:	89 83       	std	Y+1, r24	; 0x01
  return n;
    881c:	89 81       	ldd	r24, Y+1	; 0x01
    881e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8820:	28 96       	adiw	r28, 0x08	; 8
    8822:	0f b6       	in	r0, 0x3f	; 63
    8824:	f8 94       	cli
    8826:	de bf       	out	0x3e, r29	; 62
    8828:	0f be       	out	0x3f, r0	; 63
    882a:	cd bf       	out	0x3d, r28	; 61
    882c:	cf 91       	pop	r28
    882e:	df 91       	pop	r29
    8830:	08 95       	ret

00008832 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
    8832:	df 93       	push	r29
    8834:	cf 93       	push	r28
    8836:	00 d0       	rcall	.+0      	; 0x8838 <_ZN5Print5printEhi+0x6>
    8838:	00 d0       	rcall	.+0      	; 0x883a <_ZN5Print5printEhi+0x8>
    883a:	0f 92       	push	r0
    883c:	cd b7       	in	r28, 0x3d	; 61
    883e:	de b7       	in	r29, 0x3e	; 62
    8840:	9a 83       	std	Y+2, r25	; 0x02
    8842:	89 83       	std	Y+1, r24	; 0x01
    8844:	6b 83       	std	Y+3, r22	; 0x03
    8846:	5d 83       	std	Y+5, r21	; 0x05
    8848:	4c 83       	std	Y+4, r20	; 0x04
{
  return print((unsigned long) b, base);
    884a:	8b 81       	ldd	r24, Y+3	; 0x03
    884c:	28 2f       	mov	r18, r24
    884e:	30 e0       	ldi	r19, 0x00	; 0
    8850:	40 e0       	ldi	r20, 0x00	; 0
    8852:	50 e0       	ldi	r21, 0x00	; 0
    8854:	89 81       	ldd	r24, Y+1	; 0x01
    8856:	9a 81       	ldd	r25, Y+2	; 0x02
    8858:	ec 81       	ldd	r30, Y+4	; 0x04
    885a:	fd 81       	ldd	r31, Y+5	; 0x05
    885c:	ba 01       	movw	r22, r20
    885e:	a9 01       	movw	r20, r18
    8860:	9f 01       	movw	r18, r30
    8862:	0e 94 4e 43 	call	0x869c	; 0x869c <_ZN5Print5printEmi>
}
    8866:	0f 90       	pop	r0
    8868:	0f 90       	pop	r0
    886a:	0f 90       	pop	r0
    886c:	0f 90       	pop	r0
    886e:	0f 90       	pop	r0
    8870:	cf 91       	pop	r28
    8872:	df 91       	pop	r29
    8874:	08 95       	ret

00008876 <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
    8876:	df 93       	push	r29
    8878:	cf 93       	push	r28
    887a:	cd b7       	in	r28, 0x3d	; 61
    887c:	de b7       	in	r29, 0x3e	; 62
    887e:	27 97       	sbiw	r28, 0x07	; 7
    8880:	0f b6       	in	r0, 0x3f	; 63
    8882:	f8 94       	cli
    8884:	de bf       	out	0x3e, r29	; 62
    8886:	0f be       	out	0x3f, r0	; 63
    8888:	cd bf       	out	0x3d, r28	; 61
    888a:	9c 83       	std	Y+4, r25	; 0x04
    888c:	8b 83       	std	Y+3, r24	; 0x03
    888e:	6d 83       	std	Y+5, r22	; 0x05
    8890:	5f 83       	std	Y+7, r21	; 0x07
    8892:	4e 83       	std	Y+6, r20	; 0x06
{
  size_t n = print(b, base);
    8894:	8b 81       	ldd	r24, Y+3	; 0x03
    8896:	9c 81       	ldd	r25, Y+4	; 0x04
    8898:	2e 81       	ldd	r18, Y+6	; 0x06
    889a:	3f 81       	ldd	r19, Y+7	; 0x07
    889c:	6d 81       	ldd	r22, Y+5	; 0x05
    889e:	a9 01       	movw	r20, r18
    88a0:	0e 94 19 44 	call	0x8832	; 0x8832 <_ZN5Print5printEhi>
    88a4:	9a 83       	std	Y+2, r25	; 0x02
    88a6:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    88a8:	8b 81       	ldd	r24, Y+3	; 0x03
    88aa:	9c 81       	ldd	r25, Y+4	; 0x04
    88ac:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    88b0:	9c 01       	movw	r18, r24
    88b2:	89 81       	ldd	r24, Y+1	; 0x01
    88b4:	9a 81       	ldd	r25, Y+2	; 0x02
    88b6:	82 0f       	add	r24, r18
    88b8:	93 1f       	adc	r25, r19
    88ba:	9a 83       	std	Y+2, r25	; 0x02
    88bc:	89 83       	std	Y+1, r24	; 0x01
  return n;
    88be:	89 81       	ldd	r24, Y+1	; 0x01
    88c0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    88c2:	27 96       	adiw	r28, 0x07	; 7
    88c4:	0f b6       	in	r0, 0x3f	; 63
    88c6:	f8 94       	cli
    88c8:	de bf       	out	0x3e, r29	; 62
    88ca:	0f be       	out	0x3f, r0	; 63
    88cc:	cd bf       	out	0x3d, r28	; 61
    88ce:	cf 91       	pop	r28
    88d0:	df 91       	pop	r29
    88d2:	08 95       	ret

000088d4 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
    88d4:	df 93       	push	r29
    88d6:	cf 93       	push	r28
    88d8:	cd b7       	in	r28, 0x3d	; 61
    88da:	de b7       	in	r29, 0x3e	; 62
    88dc:	2c 97       	sbiw	r28, 0x0c	; 12
    88de:	0f b6       	in	r0, 0x3f	; 63
    88e0:	f8 94       	cli
    88e2:	de bf       	out	0x3e, r29	; 62
    88e4:	0f be       	out	0x3f, r0	; 63
    88e6:	cd bf       	out	0x3d, r28	; 61
    88e8:	9c 83       	std	Y+4, r25	; 0x04
    88ea:	8b 83       	std	Y+3, r24	; 0x03
    88ec:	4d 83       	std	Y+5, r20	; 0x05
    88ee:	5e 83       	std	Y+6, r21	; 0x06
    88f0:	6f 83       	std	Y+7, r22	; 0x07
    88f2:	78 87       	std	Y+8, r23	; 0x08
    88f4:	3a 87       	std	Y+10, r19	; 0x0a
    88f6:	29 87       	std	Y+9, r18	; 0x09
{
  if (base == 0) {
    88f8:	89 85       	ldd	r24, Y+9	; 0x09
    88fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    88fc:	00 97       	sbiw	r24, 0x00	; 0
    88fe:	81 f4       	brne	.+32     	; 0x8920 <_ZN5Print5printEli+0x4c>
    return write(n);
    8900:	eb 81       	ldd	r30, Y+3	; 0x03
    8902:	fc 81       	ldd	r31, Y+4	; 0x04
    8904:	01 90       	ld	r0, Z+
    8906:	f0 81       	ld	r31, Z
    8908:	e0 2d       	mov	r30, r0
    890a:	01 90       	ld	r0, Z+
    890c:	f0 81       	ld	r31, Z
    890e:	e0 2d       	mov	r30, r0
    8910:	2d 81       	ldd	r18, Y+5	; 0x05
    8912:	8b 81       	ldd	r24, Y+3	; 0x03
    8914:	9c 81       	ldd	r25, Y+4	; 0x04
    8916:	62 2f       	mov	r22, r18
    8918:	09 95       	icall
    891a:	9c 87       	std	Y+12, r25	; 0x0c
    891c:	8b 87       	std	Y+11, r24	; 0x0b
    891e:	52 c0       	rjmp	.+164    	; 0x89c4 <_ZN5Print5printEli+0xf0>
  } else if (base == 10) {
    8920:	89 85       	ldd	r24, Y+9	; 0x09
    8922:	9a 85       	ldd	r25, Y+10	; 0x0a
    8924:	8a 30       	cpi	r24, 0x0A	; 10
    8926:	91 05       	cpc	r25, r1
    8928:	09 f0       	breq	.+2      	; 0x892c <_ZN5Print5printEli+0x58>
    892a:	3e c0       	rjmp	.+124    	; 0x89a8 <_ZN5Print5printEli+0xd4>
    if (n < 0) {
    892c:	8d 81       	ldd	r24, Y+5	; 0x05
    892e:	9e 81       	ldd	r25, Y+6	; 0x06
    8930:	af 81       	ldd	r26, Y+7	; 0x07
    8932:	b8 85       	ldd	r27, Y+8	; 0x08
    8934:	bb 23       	and	r27, r27
    8936:	54 f5       	brge	.+84     	; 0x898c <_ZN5Print5printEli+0xb8>
      int t = print('-');
    8938:	8b 81       	ldd	r24, Y+3	; 0x03
    893a:	9c 81       	ldd	r25, Y+4	; 0x04
    893c:	6d e2       	ldi	r22, 0x2D	; 45
    893e:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
    8942:	9a 83       	std	Y+2, r25	; 0x02
    8944:	89 83       	std	Y+1, r24	; 0x01
      n = -n;
    8946:	8d 81       	ldd	r24, Y+5	; 0x05
    8948:	9e 81       	ldd	r25, Y+6	; 0x06
    894a:	af 81       	ldd	r26, Y+7	; 0x07
    894c:	b8 85       	ldd	r27, Y+8	; 0x08
    894e:	b0 95       	com	r27
    8950:	a0 95       	com	r26
    8952:	90 95       	com	r25
    8954:	81 95       	neg	r24
    8956:	9f 4f       	sbci	r25, 0xFF	; 255
    8958:	af 4f       	sbci	r26, 0xFF	; 255
    895a:	bf 4f       	sbci	r27, 0xFF	; 255
    895c:	8d 83       	std	Y+5, r24	; 0x05
    895e:	9e 83       	std	Y+6, r25	; 0x06
    8960:	af 83       	std	Y+7, r26	; 0x07
    8962:	b8 87       	std	Y+8, r27	; 0x08
      return printNumber(n, 10) + t;
    8964:	2d 81       	ldd	r18, Y+5	; 0x05
    8966:	3e 81       	ldd	r19, Y+6	; 0x06
    8968:	4f 81       	ldd	r20, Y+7	; 0x07
    896a:	58 85       	ldd	r21, Y+8	; 0x08
    896c:	8b 81       	ldd	r24, Y+3	; 0x03
    896e:	9c 81       	ldd	r25, Y+4	; 0x04
    8970:	ba 01       	movw	r22, r20
    8972:	a9 01       	movw	r20, r18
    8974:	2a e0       	ldi	r18, 0x0A	; 10
    8976:	0e 94 d1 42 	call	0x85a2	; 0x85a2 <_ZN5Print11printNumberEmh>
    897a:	9c 01       	movw	r18, r24
    897c:	89 81       	ldd	r24, Y+1	; 0x01
    897e:	9a 81       	ldd	r25, Y+2	; 0x02
    8980:	a9 01       	movw	r20, r18
    8982:	48 0f       	add	r20, r24
    8984:	59 1f       	adc	r21, r25
    8986:	5c 87       	std	Y+12, r21	; 0x0c
    8988:	4b 87       	std	Y+11, r20	; 0x0b
    898a:	1c c0       	rjmp	.+56     	; 0x89c4 <_ZN5Print5printEli+0xf0>
    }
    return printNumber(n, 10);
    898c:	2d 81       	ldd	r18, Y+5	; 0x05
    898e:	3e 81       	ldd	r19, Y+6	; 0x06
    8990:	4f 81       	ldd	r20, Y+7	; 0x07
    8992:	58 85       	ldd	r21, Y+8	; 0x08
    8994:	8b 81       	ldd	r24, Y+3	; 0x03
    8996:	9c 81       	ldd	r25, Y+4	; 0x04
    8998:	ba 01       	movw	r22, r20
    899a:	a9 01       	movw	r20, r18
    899c:	2a e0       	ldi	r18, 0x0A	; 10
    899e:	0e 94 d1 42 	call	0x85a2	; 0x85a2 <_ZN5Print11printNumberEmh>
    89a2:	9c 87       	std	Y+12, r25	; 0x0c
    89a4:	8b 87       	std	Y+11, r24	; 0x0b
    89a6:	0e c0       	rjmp	.+28     	; 0x89c4 <_ZN5Print5printEli+0xf0>
  } else {
    return printNumber(n, base);
    89a8:	2d 81       	ldd	r18, Y+5	; 0x05
    89aa:	3e 81       	ldd	r19, Y+6	; 0x06
    89ac:	4f 81       	ldd	r20, Y+7	; 0x07
    89ae:	58 85       	ldd	r21, Y+8	; 0x08
    89b0:	e9 85       	ldd	r30, Y+9	; 0x09
    89b2:	8b 81       	ldd	r24, Y+3	; 0x03
    89b4:	9c 81       	ldd	r25, Y+4	; 0x04
    89b6:	ba 01       	movw	r22, r20
    89b8:	a9 01       	movw	r20, r18
    89ba:	2e 2f       	mov	r18, r30
    89bc:	0e 94 d1 42 	call	0x85a2	; 0x85a2 <_ZN5Print11printNumberEmh>
    89c0:	9c 87       	std	Y+12, r25	; 0x0c
    89c2:	8b 87       	std	Y+11, r24	; 0x0b
    89c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    89c6:	9c 85       	ldd	r25, Y+12	; 0x0c
  }
}
    89c8:	2c 96       	adiw	r28, 0x0c	; 12
    89ca:	0f b6       	in	r0, 0x3f	; 63
    89cc:	f8 94       	cli
    89ce:	de bf       	out	0x3e, r29	; 62
    89d0:	0f be       	out	0x3f, r0	; 63
    89d2:	cd bf       	out	0x3d, r28	; 61
    89d4:	cf 91       	pop	r28
    89d6:	df 91       	pop	r29
    89d8:	08 95       	ret

000089da <_ZN5Print7printlnEli>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(long num, int base)
    89da:	df 93       	push	r29
    89dc:	cf 93       	push	r28
    89de:	cd b7       	in	r28, 0x3d	; 61
    89e0:	de b7       	in	r29, 0x3e	; 62
    89e2:	2a 97       	sbiw	r28, 0x0a	; 10
    89e4:	0f b6       	in	r0, 0x3f	; 63
    89e6:	f8 94       	cli
    89e8:	de bf       	out	0x3e, r29	; 62
    89ea:	0f be       	out	0x3f, r0	; 63
    89ec:	cd bf       	out	0x3d, r28	; 61
    89ee:	9c 83       	std	Y+4, r25	; 0x04
    89f0:	8b 83       	std	Y+3, r24	; 0x03
    89f2:	4d 83       	std	Y+5, r20	; 0x05
    89f4:	5e 83       	std	Y+6, r21	; 0x06
    89f6:	6f 83       	std	Y+7, r22	; 0x07
    89f8:	78 87       	std	Y+8, r23	; 0x08
    89fa:	3a 87       	std	Y+10, r19	; 0x0a
    89fc:	29 87       	std	Y+9, r18	; 0x09
{
  size_t n = print(num, base);
    89fe:	8b 81       	ldd	r24, Y+3	; 0x03
    8a00:	9c 81       	ldd	r25, Y+4	; 0x04
    8a02:	2d 81       	ldd	r18, Y+5	; 0x05
    8a04:	3e 81       	ldd	r19, Y+6	; 0x06
    8a06:	4f 81       	ldd	r20, Y+7	; 0x07
    8a08:	58 85       	ldd	r21, Y+8	; 0x08
    8a0a:	e9 85       	ldd	r30, Y+9	; 0x09
    8a0c:	fa 85       	ldd	r31, Y+10	; 0x0a
    8a0e:	ba 01       	movw	r22, r20
    8a10:	a9 01       	movw	r20, r18
    8a12:	9f 01       	movw	r18, r30
    8a14:	0e 94 6a 44 	call	0x88d4	; 0x88d4 <_ZN5Print5printEli>
    8a18:	9a 83       	std	Y+2, r25	; 0x02
    8a1a:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    8a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    8a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    8a20:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    8a24:	9c 01       	movw	r18, r24
    8a26:	89 81       	ldd	r24, Y+1	; 0x01
    8a28:	9a 81       	ldd	r25, Y+2	; 0x02
    8a2a:	82 0f       	add	r24, r18
    8a2c:	93 1f       	adc	r25, r19
    8a2e:	9a 83       	std	Y+2, r25	; 0x02
    8a30:	89 83       	std	Y+1, r24	; 0x01
  return n;
    8a32:	89 81       	ldd	r24, Y+1	; 0x01
    8a34:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8a36:	2a 96       	adiw	r28, 0x0a	; 10
    8a38:	0f b6       	in	r0, 0x3f	; 63
    8a3a:	f8 94       	cli
    8a3c:	de bf       	out	0x3e, r29	; 62
    8a3e:	0f be       	out	0x3f, r0	; 63
    8a40:	cd bf       	out	0x3d, r28	; 61
    8a42:	cf 91       	pop	r28
    8a44:	df 91       	pop	r29
    8a46:	08 95       	ret

00008a48 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    8a48:	df 93       	push	r29
    8a4a:	cf 93       	push	r28
    8a4c:	00 d0       	rcall	.+0      	; 0x8a4e <_ZN5Print5printEii+0x6>
    8a4e:	00 d0       	rcall	.+0      	; 0x8a50 <_ZN5Print5printEii+0x8>
    8a50:	00 d0       	rcall	.+0      	; 0x8a52 <_ZN5Print5printEii+0xa>
    8a52:	cd b7       	in	r28, 0x3d	; 61
    8a54:	de b7       	in	r29, 0x3e	; 62
    8a56:	9a 83       	std	Y+2, r25	; 0x02
    8a58:	89 83       	std	Y+1, r24	; 0x01
    8a5a:	7c 83       	std	Y+4, r23	; 0x04
    8a5c:	6b 83       	std	Y+3, r22	; 0x03
    8a5e:	5e 83       	std	Y+6, r21	; 0x06
    8a60:	4d 83       	std	Y+5, r20	; 0x05
{
  return print((long) n, base);
    8a62:	8b 81       	ldd	r24, Y+3	; 0x03
    8a64:	9c 81       	ldd	r25, Y+4	; 0x04
    8a66:	9c 01       	movw	r18, r24
    8a68:	44 27       	eor	r20, r20
    8a6a:	37 fd       	sbrc	r19, 7
    8a6c:	40 95       	com	r20
    8a6e:	54 2f       	mov	r21, r20
    8a70:	89 81       	ldd	r24, Y+1	; 0x01
    8a72:	9a 81       	ldd	r25, Y+2	; 0x02
    8a74:	ed 81       	ldd	r30, Y+5	; 0x05
    8a76:	fe 81       	ldd	r31, Y+6	; 0x06
    8a78:	ba 01       	movw	r22, r20
    8a7a:	a9 01       	movw	r20, r18
    8a7c:	9f 01       	movw	r18, r30
    8a7e:	0e 94 6a 44 	call	0x88d4	; 0x88d4 <_ZN5Print5printEli>
}
    8a82:	26 96       	adiw	r28, 0x06	; 6
    8a84:	0f b6       	in	r0, 0x3f	; 63
    8a86:	f8 94       	cli
    8a88:	de bf       	out	0x3e, r29	; 62
    8a8a:	0f be       	out	0x3f, r0	; 63
    8a8c:	cd bf       	out	0x3d, r28	; 61
    8a8e:	cf 91       	pop	r28
    8a90:	df 91       	pop	r29
    8a92:	08 95       	ret

00008a94 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
    8a94:	df 93       	push	r29
    8a96:	cf 93       	push	r28
    8a98:	cd b7       	in	r28, 0x3d	; 61
    8a9a:	de b7       	in	r29, 0x3e	; 62
    8a9c:	28 97       	sbiw	r28, 0x08	; 8
    8a9e:	0f b6       	in	r0, 0x3f	; 63
    8aa0:	f8 94       	cli
    8aa2:	de bf       	out	0x3e, r29	; 62
    8aa4:	0f be       	out	0x3f, r0	; 63
    8aa6:	cd bf       	out	0x3d, r28	; 61
    8aa8:	9c 83       	std	Y+4, r25	; 0x04
    8aaa:	8b 83       	std	Y+3, r24	; 0x03
    8aac:	7e 83       	std	Y+6, r23	; 0x06
    8aae:	6d 83       	std	Y+5, r22	; 0x05
    8ab0:	58 87       	std	Y+8, r21	; 0x08
    8ab2:	4f 83       	std	Y+7, r20	; 0x07
{
  size_t n = print(num, base);
    8ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    8ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    8ab8:	2d 81       	ldd	r18, Y+5	; 0x05
    8aba:	3e 81       	ldd	r19, Y+6	; 0x06
    8abc:	4f 81       	ldd	r20, Y+7	; 0x07
    8abe:	58 85       	ldd	r21, Y+8	; 0x08
    8ac0:	b9 01       	movw	r22, r18
    8ac2:	0e 94 24 45 	call	0x8a48	; 0x8a48 <_ZN5Print5printEii>
    8ac6:	9a 83       	std	Y+2, r25	; 0x02
    8ac8:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    8aca:	8b 81       	ldd	r24, Y+3	; 0x03
    8acc:	9c 81       	ldd	r25, Y+4	; 0x04
    8ace:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    8ad2:	9c 01       	movw	r18, r24
    8ad4:	89 81       	ldd	r24, Y+1	; 0x01
    8ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    8ad8:	82 0f       	add	r24, r18
    8ada:	93 1f       	adc	r25, r19
    8adc:	9a 83       	std	Y+2, r25	; 0x02
    8ade:	89 83       	std	Y+1, r24	; 0x01
  return n;
    8ae0:	89 81       	ldd	r24, Y+1	; 0x01
    8ae2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8ae4:	28 96       	adiw	r28, 0x08	; 8
    8ae6:	0f b6       	in	r0, 0x3f	; 63
    8ae8:	f8 94       	cli
    8aea:	de bf       	out	0x3e, r29	; 62
    8aec:	0f be       	out	0x3f, r0	; 63
    8aee:	cd bf       	out	0x3d, r28	; 61
    8af0:	cf 91       	pop	r28
    8af2:	df 91       	pop	r29
    8af4:	08 95       	ret

00008af6 <_ZN5Print5printEPKc>:
    n += write(s[i]);
  }
  return n;
}

size_t Print::print(const char str[])
    8af6:	df 93       	push	r29
    8af8:	cf 93       	push	r28
    8afa:	00 d0       	rcall	.+0      	; 0x8afc <_ZN5Print5printEPKc+0x6>
    8afc:	00 d0       	rcall	.+0      	; 0x8afe <_ZN5Print5printEPKc+0x8>
    8afe:	cd b7       	in	r28, 0x3d	; 61
    8b00:	de b7       	in	r29, 0x3e	; 62
    8b02:	9a 83       	std	Y+2, r25	; 0x02
    8b04:	89 83       	std	Y+1, r24	; 0x01
    8b06:	7c 83       	std	Y+4, r23	; 0x04
    8b08:	6b 83       	std	Y+3, r22	; 0x03
{
  return write(str);
    8b0a:	89 81       	ldd	r24, Y+1	; 0x01
    8b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    8b0e:	2b 81       	ldd	r18, Y+3	; 0x03
    8b10:	3c 81       	ldd	r19, Y+4	; 0x04
    8b12:	b9 01       	movw	r22, r18
    8b14:	0e 94 a8 42 	call	0x8550	; 0x8550 <_ZN5Print5writeEPKc>
}
    8b18:	0f 90       	pop	r0
    8b1a:	0f 90       	pop	r0
    8b1c:	0f 90       	pop	r0
    8b1e:	0f 90       	pop	r0
    8b20:	cf 91       	pop	r28
    8b22:	df 91       	pop	r29
    8b24:	08 95       	ret

00008b26 <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
    8b26:	df 93       	push	r29
    8b28:	cf 93       	push	r28
    8b2a:	cd b7       	in	r28, 0x3d	; 61
    8b2c:	de b7       	in	r29, 0x3e	; 62
    8b2e:	69 97       	sbiw	r28, 0x19	; 25
    8b30:	0f b6       	in	r0, 0x3f	; 63
    8b32:	f8 94       	cli
    8b34:	de bf       	out	0x3e, r29	; 62
    8b36:	0f be       	out	0x3f, r0	; 63
    8b38:	cd bf       	out	0x3d, r28	; 61
    8b3a:	9b 8b       	std	Y+19, r25	; 0x13
    8b3c:	8a 8b       	std	Y+18, r24	; 0x12
    8b3e:	4c 8b       	std	Y+20, r20	; 0x14
    8b40:	5d 8b       	std	Y+21, r21	; 0x15
    8b42:	6e 8b       	std	Y+22, r22	; 0x16
    8b44:	7f 8b       	std	Y+23, r23	; 0x17
    8b46:	28 8f       	std	Y+24, r18	; 0x18
{ 
  size_t n = 0;
    8b48:	19 8a       	std	Y+17, r1	; 0x11
    8b4a:	18 8a       	std	Y+16, r1	; 0x10
  
  // Handle negative numbers
  if (number < 0.0)
    8b4c:	6c 89       	ldd	r22, Y+20	; 0x14
    8b4e:	7d 89       	ldd	r23, Y+21	; 0x15
    8b50:	8e 89       	ldd	r24, Y+22	; 0x16
    8b52:	9f 89       	ldd	r25, Y+23	; 0x17
    8b54:	20 e0       	ldi	r18, 0x00	; 0
    8b56:	30 e0       	ldi	r19, 0x00	; 0
    8b58:	40 e0       	ldi	r20, 0x00	; 0
    8b5a:	50 e0       	ldi	r21, 0x00	; 0
    8b5c:	0e 94 68 7e 	call	0xfcd0	; 0xfcd0 <__ltsf2>
    8b60:	88 23       	and	r24, r24
    8b62:	ac f4       	brge	.+42     	; 0x8b8e <_ZN5Print10printFloatEdh+0x68>
  {
     n += print('-');
    8b64:	8a 89       	ldd	r24, Y+18	; 0x12
    8b66:	9b 89       	ldd	r25, Y+19	; 0x13
    8b68:	6d e2       	ldi	r22, 0x2D	; 45
    8b6a:	0e 94 d0 41 	call	0x83a0	; 0x83a0 <_ZN5Print5printEc>
    8b6e:	9c 01       	movw	r18, r24
    8b70:	88 89       	ldd	r24, Y+16	; 0x10
    8b72:	99 89       	ldd	r25, Y+17	; 0x11
    8b74:	82 0f       	add	r24, r18
    8b76:	93 1f       	adc	r25, r19
    8b78:	99 8b       	std	Y+17, r25	; 0x11
    8b7a:	88 8b       	std	Y+16, r24	; 0x10
     number = -number;
    8b7c:	8c 89       	ldd	r24, Y+20	; 0x14
    8b7e:	9d 89       	ldd	r25, Y+21	; 0x15
    8b80:	ae 89       	ldd	r26, Y+22	; 0x16
    8b82:	bf 89       	ldd	r27, Y+23	; 0x17
    8b84:	b0 58       	subi	r27, 0x80	; 128
    8b86:	8c 8b       	std	Y+20, r24	; 0x14
    8b88:	9d 8b       	std	Y+21, r25	; 0x15
    8b8a:	ae 8b       	std	Y+22, r26	; 0x16
    8b8c:	bf 8b       	std	Y+23, r27	; 0x17
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    8b8e:	80 e0       	ldi	r24, 0x00	; 0
    8b90:	90 e0       	ldi	r25, 0x00	; 0
    8b92:	a0 e0       	ldi	r26, 0x00	; 0
    8b94:	bf e3       	ldi	r27, 0x3F	; 63
    8b96:	8c 87       	std	Y+12, r24	; 0x0c
    8b98:	9d 87       	std	Y+13, r25	; 0x0d
    8b9a:	ae 87       	std	Y+14, r26	; 0x0e
    8b9c:	bf 87       	std	Y+15, r27	; 0x0f
  for (uint8_t i=0; i<digits; ++i)
    8b9e:	1b 82       	std	Y+3, r1	; 0x03
    8ba0:	13 c0       	rjmp	.+38     	; 0x8bc8 <_ZN5Print10printFloatEdh+0xa2>
    rounding /= 10.0;
    8ba2:	6c 85       	ldd	r22, Y+12	; 0x0c
    8ba4:	7d 85       	ldd	r23, Y+13	; 0x0d
    8ba6:	8e 85       	ldd	r24, Y+14	; 0x0e
    8ba8:	9f 85       	ldd	r25, Y+15	; 0x0f
    8baa:	20 e0       	ldi	r18, 0x00	; 0
    8bac:	30 e0       	ldi	r19, 0x00	; 0
    8bae:	40 e2       	ldi	r20, 0x20	; 32
    8bb0:	51 e4       	ldi	r21, 0x41	; 65
    8bb2:	0e 94 8c 7d 	call	0xfb18	; 0xfb18 <__divsf3>
    8bb6:	dc 01       	movw	r26, r24
    8bb8:	cb 01       	movw	r24, r22
    8bba:	8c 87       	std	Y+12, r24	; 0x0c
    8bbc:	9d 87       	std	Y+13, r25	; 0x0d
    8bbe:	ae 87       	std	Y+14, r26	; 0x0e
    8bc0:	bf 87       	std	Y+15, r27	; 0x0f
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    8bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    8bc4:	8f 5f       	subi	r24, 0xFF	; 255
    8bc6:	8b 83       	std	Y+3, r24	; 0x03
    8bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    8bca:	88 8d       	ldd	r24, Y+24	; 0x18
    8bcc:	98 17       	cp	r25, r24
    8bce:	48 f3       	brcs	.-46     	; 0x8ba2 <_ZN5Print10printFloatEdh+0x7c>
    rounding /= 10.0;
  
  number += rounding;
    8bd0:	6c 89       	ldd	r22, Y+20	; 0x14
    8bd2:	7d 89       	ldd	r23, Y+21	; 0x15
    8bd4:	8e 89       	ldd	r24, Y+22	; 0x16
    8bd6:	9f 89       	ldd	r25, Y+23	; 0x17
    8bd8:	2c 85       	ldd	r18, Y+12	; 0x0c
    8bda:	3d 85       	ldd	r19, Y+13	; 0x0d
    8bdc:	4e 85       	ldd	r20, Y+14	; 0x0e
    8bde:	5f 85       	ldd	r21, Y+15	; 0x0f
    8be0:	0e 94 65 7c 	call	0xf8ca	; 0xf8ca <__addsf3>
    8be4:	dc 01       	movw	r26, r24
    8be6:	cb 01       	movw	r24, r22
    8be8:	8c 8b       	std	Y+20, r24	; 0x14
    8bea:	9d 8b       	std	Y+21, r25	; 0x15
    8bec:	ae 8b       	std	Y+22, r26	; 0x16
    8bee:	bf 8b       	std	Y+23, r27	; 0x17

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    8bf0:	6c 89       	ldd	r22, Y+20	; 0x14
    8bf2:	7d 89       	ldd	r23, Y+21	; 0x15
    8bf4:	8e 89       	ldd	r24, Y+22	; 0x16
    8bf6:	9f 89       	ldd	r25, Y+23	; 0x17
    8bf8:	0e 94 bc 7a 	call	0xf578	; 0xf578 <__fixunssfsi>
    8bfc:	dc 01       	movw	r26, r24
    8bfe:	cb 01       	movw	r24, r22
    8c00:	88 87       	std	Y+8, r24	; 0x08
    8c02:	99 87       	std	Y+9, r25	; 0x09
    8c04:	aa 87       	std	Y+10, r26	; 0x0a
    8c06:	bb 87       	std	Y+11, r27	; 0x0b
  double remainder = number - (double)int_part;
    8c08:	68 85       	ldd	r22, Y+8	; 0x08
    8c0a:	79 85       	ldd	r23, Y+9	; 0x09
    8c0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    8c0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    8c10:	0e 94 4a 7f 	call	0xfe94	; 0xfe94 <__floatunsisf>
    8c14:	9b 01       	movw	r18, r22
    8c16:	ac 01       	movw	r20, r24
    8c18:	6c 89       	ldd	r22, Y+20	; 0x14
    8c1a:	7d 89       	ldd	r23, Y+21	; 0x15
    8c1c:	8e 89       	ldd	r24, Y+22	; 0x16
    8c1e:	9f 89       	ldd	r25, Y+23	; 0x17
    8c20:	0e 94 34 7c 	call	0xf868	; 0xf868 <__subsf3>
    8c24:	dc 01       	movw	r26, r24
    8c26:	cb 01       	movw	r24, r22
    8c28:	8c 83       	std	Y+4, r24	; 0x04
    8c2a:	9d 83       	std	Y+5, r25	; 0x05
    8c2c:	ae 83       	std	Y+6, r26	; 0x06
    8c2e:	bf 83       	std	Y+7, r27	; 0x07
  n += print(int_part);
    8c30:	8a 89       	ldd	r24, Y+18	; 0x12
    8c32:	9b 89       	ldd	r25, Y+19	; 0x13
    8c34:	28 85       	ldd	r18, Y+8	; 0x08
    8c36:	39 85       	ldd	r19, Y+9	; 0x09
    8c38:	4a 85       	ldd	r20, Y+10	; 0x0a
    8c3a:	5b 85       	ldd	r21, Y+11	; 0x0b
    8c3c:	ba 01       	movw	r22, r20
    8c3e:	a9 01       	movw	r20, r18
    8c40:	2a e0       	ldi	r18, 0x0A	; 10
    8c42:	30 e0       	ldi	r19, 0x00	; 0
    8c44:	0e 94 4e 43 	call	0x869c	; 0x869c <_ZN5Print5printEmi>
    8c48:	9c 01       	movw	r18, r24
    8c4a:	88 89       	ldd	r24, Y+16	; 0x10
    8c4c:	99 89       	ldd	r25, Y+17	; 0x11
    8c4e:	82 0f       	add	r24, r18
    8c50:	93 1f       	adc	r25, r19
    8c52:	99 8b       	std	Y+17, r25	; 0x11
    8c54:	88 8b       	std	Y+16, r24	; 0x10

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    8c56:	88 8d       	ldd	r24, Y+24	; 0x18
    8c58:	88 23       	and	r24, r24
    8c5a:	09 f4       	brne	.+2      	; 0x8c5e <_ZN5Print10printFloatEdh+0x138>
    8c5c:	51 c0       	rjmp	.+162    	; 0x8d00 <_ZN5Print10printFloatEdh+0x1da>
    n += print("."); 
    8c5e:	8a 89       	ldd	r24, Y+18	; 0x12
    8c60:	9b 89       	ldd	r25, Y+19	; 0x13
    8c62:	2a eb       	ldi	r18, 0xBA	; 186
    8c64:	30 e0       	ldi	r19, 0x00	; 0
    8c66:	b9 01       	movw	r22, r18
    8c68:	0e 94 7b 45 	call	0x8af6	; 0x8af6 <_ZN5Print5printEPKc>
    8c6c:	9c 01       	movw	r18, r24
    8c6e:	88 89       	ldd	r24, Y+16	; 0x10
    8c70:	99 89       	ldd	r25, Y+17	; 0x11
    8c72:	82 0f       	add	r24, r18
    8c74:	93 1f       	adc	r25, r19
    8c76:	99 8b       	std	Y+17, r25	; 0x11
    8c78:	88 8b       	std	Y+16, r24	; 0x10
    8c7a:	42 c0       	rjmp	.+132    	; 0x8d00 <_ZN5Print10printFloatEdh+0x1da>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    8c7c:	6c 81       	ldd	r22, Y+4	; 0x04
    8c7e:	7d 81       	ldd	r23, Y+5	; 0x05
    8c80:	8e 81       	ldd	r24, Y+6	; 0x06
    8c82:	9f 81       	ldd	r25, Y+7	; 0x07
    8c84:	20 e0       	ldi	r18, 0x00	; 0
    8c86:	30 e0       	ldi	r19, 0x00	; 0
    8c88:	40 e2       	ldi	r20, 0x20	; 32
    8c8a:	51 e4       	ldi	r21, 0x41	; 65
    8c8c:	0e 94 92 7c 	call	0xf924	; 0xf924 <__mulsf3>
    8c90:	dc 01       	movw	r26, r24
    8c92:	cb 01       	movw	r24, r22
    8c94:	8c 83       	std	Y+4, r24	; 0x04
    8c96:	9d 83       	std	Y+5, r25	; 0x05
    8c98:	ae 83       	std	Y+6, r26	; 0x06
    8c9a:	bf 83       	std	Y+7, r27	; 0x07
    int toPrint = int(remainder);
    8c9c:	6c 81       	ldd	r22, Y+4	; 0x04
    8c9e:	7d 81       	ldd	r23, Y+5	; 0x05
    8ca0:	8e 81       	ldd	r24, Y+6	; 0x06
    8ca2:	9f 81       	ldd	r25, Y+7	; 0x07
    8ca4:	0e 94 f6 7e 	call	0xfdec	; 0xfdec <__fixsfsi>
    8ca8:	dc 01       	movw	r26, r24
    8caa:	cb 01       	movw	r24, r22
    8cac:	9a 83       	std	Y+2, r25	; 0x02
    8cae:	89 83       	std	Y+1, r24	; 0x01
    n += print(toPrint);
    8cb0:	8a 89       	ldd	r24, Y+18	; 0x12
    8cb2:	9b 89       	ldd	r25, Y+19	; 0x13
    8cb4:	29 81       	ldd	r18, Y+1	; 0x01
    8cb6:	3a 81       	ldd	r19, Y+2	; 0x02
    8cb8:	b9 01       	movw	r22, r18
    8cba:	4a e0       	ldi	r20, 0x0A	; 10
    8cbc:	50 e0       	ldi	r21, 0x00	; 0
    8cbe:	0e 94 24 45 	call	0x8a48	; 0x8a48 <_ZN5Print5printEii>
    8cc2:	9c 01       	movw	r18, r24
    8cc4:	88 89       	ldd	r24, Y+16	; 0x10
    8cc6:	99 89       	ldd	r25, Y+17	; 0x11
    8cc8:	82 0f       	add	r24, r18
    8cca:	93 1f       	adc	r25, r19
    8ccc:	99 8b       	std	Y+17, r25	; 0x11
    8cce:	88 8b       	std	Y+16, r24	; 0x10
    remainder -= toPrint; 
    8cd0:	89 81       	ldd	r24, Y+1	; 0x01
    8cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    8cd4:	aa 27       	eor	r26, r26
    8cd6:	97 fd       	sbrc	r25, 7
    8cd8:	a0 95       	com	r26
    8cda:	ba 2f       	mov	r27, r26
    8cdc:	bc 01       	movw	r22, r24
    8cde:	cd 01       	movw	r24, r26
    8ce0:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__floatsisf>
    8ce4:	9b 01       	movw	r18, r22
    8ce6:	ac 01       	movw	r20, r24
    8ce8:	6c 81       	ldd	r22, Y+4	; 0x04
    8cea:	7d 81       	ldd	r23, Y+5	; 0x05
    8cec:	8e 81       	ldd	r24, Y+6	; 0x06
    8cee:	9f 81       	ldd	r25, Y+7	; 0x07
    8cf0:	0e 94 34 7c 	call	0xf868	; 0xf868 <__subsf3>
    8cf4:	dc 01       	movw	r26, r24
    8cf6:	cb 01       	movw	r24, r22
    8cf8:	8c 83       	std	Y+4, r24	; 0x04
    8cfa:	9d 83       	std	Y+5, r25	; 0x05
    8cfc:	ae 83       	std	Y+6, r26	; 0x06
    8cfe:	bf 83       	std	Y+7, r27	; 0x07
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    8d00:	88 8d       	ldd	r24, Y+24	; 0x18
    8d02:	89 8f       	std	Y+25, r24	; 0x19
    8d04:	89 8d       	ldd	r24, Y+25	; 0x19
    8d06:	88 23       	and	r24, r24
    8d08:	11 f0       	breq	.+4      	; 0x8d0e <_ZN5Print10printFloatEdh+0x1e8>
    8d0a:	81 e0       	ldi	r24, 0x01	; 1
    8d0c:	89 8f       	std	Y+25, r24	; 0x19
    8d0e:	89 8d       	ldd	r24, Y+25	; 0x19
    8d10:	98 8d       	ldd	r25, Y+24	; 0x18
    8d12:	91 50       	subi	r25, 0x01	; 1
    8d14:	98 8f       	std	Y+24, r25	; 0x18
    8d16:	88 23       	and	r24, r24
    8d18:	09 f0       	breq	.+2      	; 0x8d1c <_ZN5Print10printFloatEdh+0x1f6>
    8d1a:	b0 cf       	rjmp	.-160    	; 0x8c7c <_ZN5Print10printFloatEdh+0x156>
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
    8d1c:	88 89       	ldd	r24, Y+16	; 0x10
    8d1e:	99 89       	ldd	r25, Y+17	; 0x11
}
    8d20:	69 96       	adiw	r28, 0x19	; 25
    8d22:	0f b6       	in	r0, 0x3f	; 63
    8d24:	f8 94       	cli
    8d26:	de bf       	out	0x3e, r29	; 62
    8d28:	0f be       	out	0x3f, r0	; 63
    8d2a:	cd bf       	out	0x3d, r28	; 61
    8d2c:	cf 91       	pop	r28
    8d2e:	df 91       	pop	r29
    8d30:	08 95       	ret

00008d32 <_ZN5Print5printEdi>:
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
    8d32:	df 93       	push	r29
    8d34:	cf 93       	push	r28
    8d36:	cd b7       	in	r28, 0x3d	; 61
    8d38:	de b7       	in	r29, 0x3e	; 62
    8d3a:	28 97       	sbiw	r28, 0x08	; 8
    8d3c:	0f b6       	in	r0, 0x3f	; 63
    8d3e:	f8 94       	cli
    8d40:	de bf       	out	0x3e, r29	; 62
    8d42:	0f be       	out	0x3f, r0	; 63
    8d44:	cd bf       	out	0x3d, r28	; 61
    8d46:	9a 83       	std	Y+2, r25	; 0x02
    8d48:	89 83       	std	Y+1, r24	; 0x01
    8d4a:	4b 83       	std	Y+3, r20	; 0x03
    8d4c:	5c 83       	std	Y+4, r21	; 0x04
    8d4e:	6d 83       	std	Y+5, r22	; 0x05
    8d50:	7e 83       	std	Y+6, r23	; 0x06
    8d52:	38 87       	std	Y+8, r19	; 0x08
    8d54:	2f 83       	std	Y+7, r18	; 0x07
{
  return printFloat(n, digits);
    8d56:	ef 81       	ldd	r30, Y+7	; 0x07
    8d58:	89 81       	ldd	r24, Y+1	; 0x01
    8d5a:	9a 81       	ldd	r25, Y+2	; 0x02
    8d5c:	2b 81       	ldd	r18, Y+3	; 0x03
    8d5e:	3c 81       	ldd	r19, Y+4	; 0x04
    8d60:	4d 81       	ldd	r20, Y+5	; 0x05
    8d62:	5e 81       	ldd	r21, Y+6	; 0x06
    8d64:	ba 01       	movw	r22, r20
    8d66:	a9 01       	movw	r20, r18
    8d68:	2e 2f       	mov	r18, r30
    8d6a:	0e 94 93 45 	call	0x8b26	; 0x8b26 <_ZN5Print10printFloatEdh>
}
    8d6e:	28 96       	adiw	r28, 0x08	; 8
    8d70:	0f b6       	in	r0, 0x3f	; 63
    8d72:	f8 94       	cli
    8d74:	de bf       	out	0x3e, r29	; 62
    8d76:	0f be       	out	0x3f, r0	; 63
    8d78:	cd bf       	out	0x3d, r28	; 61
    8d7a:	cf 91       	pop	r28
    8d7c:	df 91       	pop	r29
    8d7e:	08 95       	ret

00008d80 <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
    8d80:	df 93       	push	r29
    8d82:	cf 93       	push	r28
    8d84:	cd b7       	in	r28, 0x3d	; 61
    8d86:	de b7       	in	r29, 0x3e	; 62
    8d88:	2a 97       	sbiw	r28, 0x0a	; 10
    8d8a:	0f b6       	in	r0, 0x3f	; 63
    8d8c:	f8 94       	cli
    8d8e:	de bf       	out	0x3e, r29	; 62
    8d90:	0f be       	out	0x3f, r0	; 63
    8d92:	cd bf       	out	0x3d, r28	; 61
    8d94:	9c 83       	std	Y+4, r25	; 0x04
    8d96:	8b 83       	std	Y+3, r24	; 0x03
    8d98:	4d 83       	std	Y+5, r20	; 0x05
    8d9a:	5e 83       	std	Y+6, r21	; 0x06
    8d9c:	6f 83       	std	Y+7, r22	; 0x07
    8d9e:	78 87       	std	Y+8, r23	; 0x08
    8da0:	3a 87       	std	Y+10, r19	; 0x0a
    8da2:	29 87       	std	Y+9, r18	; 0x09
{
  size_t n = print(num, digits);
    8da4:	8b 81       	ldd	r24, Y+3	; 0x03
    8da6:	9c 81       	ldd	r25, Y+4	; 0x04
    8da8:	2d 81       	ldd	r18, Y+5	; 0x05
    8daa:	3e 81       	ldd	r19, Y+6	; 0x06
    8dac:	4f 81       	ldd	r20, Y+7	; 0x07
    8dae:	58 85       	ldd	r21, Y+8	; 0x08
    8db0:	e9 85       	ldd	r30, Y+9	; 0x09
    8db2:	fa 85       	ldd	r31, Y+10	; 0x0a
    8db4:	ba 01       	movw	r22, r20
    8db6:	a9 01       	movw	r20, r18
    8db8:	9f 01       	movw	r18, r30
    8dba:	0e 94 99 46 	call	0x8d32	; 0x8d32 <_ZN5Print5printEdi>
    8dbe:	9a 83       	std	Y+2, r25	; 0x02
    8dc0:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    8dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    8dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    8dc6:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    8dca:	9c 01       	movw	r18, r24
    8dcc:	89 81       	ldd	r24, Y+1	; 0x01
    8dce:	9a 81       	ldd	r25, Y+2	; 0x02
    8dd0:	82 0f       	add	r24, r18
    8dd2:	93 1f       	adc	r25, r19
    8dd4:	9a 83       	std	Y+2, r25	; 0x02
    8dd6:	89 83       	std	Y+1, r24	; 0x01
  return n;
    8dd8:	89 81       	ldd	r24, Y+1	; 0x01
    8dda:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8ddc:	2a 96       	adiw	r28, 0x0a	; 10
    8dde:	0f b6       	in	r0, 0x3f	; 63
    8de0:	f8 94       	cli
    8de2:	de bf       	out	0x3e, r29	; 62
    8de4:	0f be       	out	0x3f, r0	; 63
    8de6:	cd bf       	out	0x3d, r28	; 61
    8de8:	cf 91       	pop	r28
    8dea:	df 91       	pop	r29
    8dec:	08 95       	ret

00008dee <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    8dee:	df 93       	push	r29
    8df0:	cf 93       	push	r28
    8df2:	00 d0       	rcall	.+0      	; 0x8df4 <_ZN5Print7printlnEPKc+0x6>
    8df4:	00 d0       	rcall	.+0      	; 0x8df6 <_ZN5Print7printlnEPKc+0x8>
    8df6:	00 d0       	rcall	.+0      	; 0x8df8 <_ZN5Print7printlnEPKc+0xa>
    8df8:	cd b7       	in	r28, 0x3d	; 61
    8dfa:	de b7       	in	r29, 0x3e	; 62
    8dfc:	9c 83       	std	Y+4, r25	; 0x04
    8dfe:	8b 83       	std	Y+3, r24	; 0x03
    8e00:	7e 83       	std	Y+6, r23	; 0x06
    8e02:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(c);
    8e04:	8b 81       	ldd	r24, Y+3	; 0x03
    8e06:	9c 81       	ldd	r25, Y+4	; 0x04
    8e08:	2d 81       	ldd	r18, Y+5	; 0x05
    8e0a:	3e 81       	ldd	r19, Y+6	; 0x06
    8e0c:	b9 01       	movw	r22, r18
    8e0e:	0e 94 7b 45 	call	0x8af6	; 0x8af6 <_ZN5Print5printEPKc>
    8e12:	9a 83       	std	Y+2, r25	; 0x02
    8e14:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    8e16:	8b 81       	ldd	r24, Y+3	; 0x03
    8e18:	9c 81       	ldd	r25, Y+4	; 0x04
    8e1a:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    8e1e:	9c 01       	movw	r18, r24
    8e20:	89 81       	ldd	r24, Y+1	; 0x01
    8e22:	9a 81       	ldd	r25, Y+2	; 0x02
    8e24:	82 0f       	add	r24, r18
    8e26:	93 1f       	adc	r25, r19
    8e28:	9a 83       	std	Y+2, r25	; 0x02
    8e2a:	89 83       	std	Y+1, r24	; 0x01
  return n;
    8e2c:	89 81       	ldd	r24, Y+1	; 0x01
    8e2e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8e30:	26 96       	adiw	r28, 0x06	; 6
    8e32:	0f b6       	in	r0, 0x3f	; 63
    8e34:	f8 94       	cli
    8e36:	de bf       	out	0x3e, r29	; 62
    8e38:	0f be       	out	0x3f, r0	; 63
    8e3a:	cd bf       	out	0x3d, r28	; 61
    8e3c:	cf 91       	pop	r28
    8e3e:	df 91       	pop	r29
    8e40:	08 95       	ret

00008e42 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    8e42:	0f 93       	push	r16
    8e44:	1f 93       	push	r17
    8e46:	df 93       	push	r29
    8e48:	cf 93       	push	r28
    8e4a:	cd b7       	in	r28, 0x3d	; 61
    8e4c:	de b7       	in	r29, 0x3e	; 62
    8e4e:	29 97       	sbiw	r28, 0x09	; 9
    8e50:	0f b6       	in	r0, 0x3f	; 63
    8e52:	f8 94       	cli
    8e54:	de bf       	out	0x3e, r29	; 62
    8e56:	0f be       	out	0x3f, r0	; 63
    8e58:	cd bf       	out	0x3d, r28	; 61
    8e5a:	9e 83       	std	Y+6, r25	; 0x06
    8e5c:	8d 83       	std	Y+5, r24	; 0x05
    8e5e:	78 87       	std	Y+8, r23	; 0x08
    8e60:	6f 83       	std	Y+7, r22	; 0x07
{
  size_t n = 0;
    8e62:	1c 82       	std	Y+4, r1	; 0x04
    8e64:	1b 82       	std	Y+3, r1	; 0x03
  for (uint16_t i = 0; i < s.length(); i++) {
    8e66:	1a 82       	std	Y+2, r1	; 0x02
    8e68:	19 82       	std	Y+1, r1	; 0x01
    8e6a:	20 c0       	rjmp	.+64     	; 0x8eac <_ZN5Print5printERK6String+0x6a>
    n += write(s[i]);
    8e6c:	ed 81       	ldd	r30, Y+5	; 0x05
    8e6e:	fe 81       	ldd	r31, Y+6	; 0x06
    8e70:	01 90       	ld	r0, Z+
    8e72:	f0 81       	ld	r31, Z
    8e74:	e0 2d       	mov	r30, r0
    8e76:	00 81       	ld	r16, Z
    8e78:	11 81       	ldd	r17, Z+1	; 0x01
    8e7a:	8f 81       	ldd	r24, Y+7	; 0x07
    8e7c:	98 85       	ldd	r25, Y+8	; 0x08
    8e7e:	29 81       	ldd	r18, Y+1	; 0x01
    8e80:	3a 81       	ldd	r19, Y+2	; 0x02
    8e82:	b9 01       	movw	r22, r18
    8e84:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <_ZNK6StringixEj>
    8e88:	28 2f       	mov	r18, r24
    8e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    8e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    8e8e:	62 2f       	mov	r22, r18
    8e90:	f8 01       	movw	r30, r16
    8e92:	09 95       	icall
    8e94:	9c 01       	movw	r18, r24
    8e96:	8b 81       	ldd	r24, Y+3	; 0x03
    8e98:	9c 81       	ldd	r25, Y+4	; 0x04
    8e9a:	82 0f       	add	r24, r18
    8e9c:	93 1f       	adc	r25, r19
    8e9e:	9c 83       	std	Y+4, r25	; 0x04
    8ea0:	8b 83       	std	Y+3, r24	; 0x03
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    8ea2:	89 81       	ldd	r24, Y+1	; 0x01
    8ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    8ea6:	01 96       	adiw	r24, 0x01	; 1
    8ea8:	9a 83       	std	Y+2, r25	; 0x02
    8eaa:	89 83       	std	Y+1, r24	; 0x01
    8eac:	8f 81       	ldd	r24, Y+7	; 0x07
    8eae:	98 85       	ldd	r25, Y+8	; 0x08
    8eb0:	0e 94 33 41 	call	0x8266	; 0x8266 <_ZNK6String6lengthEv>
    8eb4:	9c 01       	movw	r18, r24
    8eb6:	19 86       	std	Y+9, r1	; 0x09
    8eb8:	89 81       	ldd	r24, Y+1	; 0x01
    8eba:	9a 81       	ldd	r25, Y+2	; 0x02
    8ebc:	82 17       	cp	r24, r18
    8ebe:	93 07       	cpc	r25, r19
    8ec0:	10 f4       	brcc	.+4      	; 0x8ec6 <_ZN5Print5printERK6String+0x84>
    8ec2:	81 e0       	ldi	r24, 0x01	; 1
    8ec4:	89 87       	std	Y+9, r24	; 0x09
    8ec6:	89 85       	ldd	r24, Y+9	; 0x09
    8ec8:	88 23       	and	r24, r24
    8eca:	81 f6       	brne	.-96     	; 0x8e6c <_ZN5Print5printERK6String+0x2a>
    n += write(s[i]);
  }
  return n;
    8ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    8ece:	9c 81       	ldd	r25, Y+4	; 0x04
}
    8ed0:	29 96       	adiw	r28, 0x09	; 9
    8ed2:	0f b6       	in	r0, 0x3f	; 63
    8ed4:	f8 94       	cli
    8ed6:	de bf       	out	0x3e, r29	; 62
    8ed8:	0f be       	out	0x3f, r0	; 63
    8eda:	cd bf       	out	0x3d, r28	; 61
    8edc:	cf 91       	pop	r28
    8ede:	df 91       	pop	r29
    8ee0:	1f 91       	pop	r17
    8ee2:	0f 91       	pop	r16
    8ee4:	08 95       	ret

00008ee6 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
    8ee6:	df 93       	push	r29
    8ee8:	cf 93       	push	r28
    8eea:	00 d0       	rcall	.+0      	; 0x8eec <_ZN5Print7printlnERK6String+0x6>
    8eec:	00 d0       	rcall	.+0      	; 0x8eee <_ZN5Print7printlnERK6String+0x8>
    8eee:	00 d0       	rcall	.+0      	; 0x8ef0 <_ZN5Print7printlnERK6String+0xa>
    8ef0:	cd b7       	in	r28, 0x3d	; 61
    8ef2:	de b7       	in	r29, 0x3e	; 62
    8ef4:	9c 83       	std	Y+4, r25	; 0x04
    8ef6:	8b 83       	std	Y+3, r24	; 0x03
    8ef8:	7e 83       	std	Y+6, r23	; 0x06
    8efa:	6d 83       	std	Y+5, r22	; 0x05
{
  size_t n = print(s);
    8efc:	8b 81       	ldd	r24, Y+3	; 0x03
    8efe:	9c 81       	ldd	r25, Y+4	; 0x04
    8f00:	2d 81       	ldd	r18, Y+5	; 0x05
    8f02:	3e 81       	ldd	r19, Y+6	; 0x06
    8f04:	b9 01       	movw	r22, r18
    8f06:	0e 94 21 47 	call	0x8e42	; 0x8e42 <_ZN5Print5printERK6String>
    8f0a:	9a 83       	std	Y+2, r25	; 0x02
    8f0c:	89 83       	std	Y+1, r24	; 0x01
  n += println();
    8f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    8f10:	9c 81       	ldd	r25, Y+4	; 0x04
    8f12:	0e 94 0a 42 	call	0x8414	; 0x8414 <_ZN5Print7printlnEv>
    8f16:	9c 01       	movw	r18, r24
    8f18:	89 81       	ldd	r24, Y+1	; 0x01
    8f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    8f1c:	82 0f       	add	r24, r18
    8f1e:	93 1f       	adc	r25, r19
    8f20:	9a 83       	std	Y+2, r25	; 0x02
    8f22:	89 83       	std	Y+1, r24	; 0x01
  return n;
    8f24:	89 81       	ldd	r24, Y+1	; 0x01
    8f26:	9a 81       	ldd	r25, Y+2	; 0x02
}
    8f28:	26 96       	adiw	r28, 0x06	; 6
    8f2a:	0f b6       	in	r0, 0x3f	; 63
    8f2c:	f8 94       	cli
    8f2e:	de bf       	out	0x3e, r29	; 62
    8f30:	0f be       	out	0x3f, r0	; 63
    8f32:	cd bf       	out	0x3d, r28	; 61
    8f34:	cf 91       	pop	r28
    8f36:	df 91       	pop	r29
    8f38:	08 95       	ret

00008f3a <_ZN6Stream10setTimeoutEm>:
}

// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
    8f3a:	df 93       	push	r29
    8f3c:	cf 93       	push	r28
    8f3e:	00 d0       	rcall	.+0      	; 0x8f40 <_ZN6Stream10setTimeoutEm+0x6>
    8f40:	00 d0       	rcall	.+0      	; 0x8f42 <_ZN6Stream10setTimeoutEm+0x8>
    8f42:	00 d0       	rcall	.+0      	; 0x8f44 <_ZN6Stream10setTimeoutEm+0xa>
    8f44:	cd b7       	in	r28, 0x3d	; 61
    8f46:	de b7       	in	r29, 0x3e	; 62
    8f48:	9a 83       	std	Y+2, r25	; 0x02
    8f4a:	89 83       	std	Y+1, r24	; 0x01
    8f4c:	4b 83       	std	Y+3, r20	; 0x03
    8f4e:	5c 83       	std	Y+4, r21	; 0x04
    8f50:	6d 83       	std	Y+5, r22	; 0x05
    8f52:	7e 83       	std	Y+6, r23	; 0x06
{
  _timeout = timeout;
    8f54:	e9 81       	ldd	r30, Y+1	; 0x01
    8f56:	fa 81       	ldd	r31, Y+2	; 0x02
    8f58:	8b 81       	ldd	r24, Y+3	; 0x03
    8f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    8f5c:	ad 81       	ldd	r26, Y+5	; 0x05
    8f5e:	be 81       	ldd	r27, Y+6	; 0x06
    8f60:	84 83       	std	Z+4, r24	; 0x04
    8f62:	95 83       	std	Z+5, r25	; 0x05
    8f64:	a6 83       	std	Z+6, r26	; 0x06
    8f66:	b7 83       	std	Z+7, r27	; 0x07
}
    8f68:	26 96       	adiw	r28, 0x06	; 6
    8f6a:	0f b6       	in	r0, 0x3f	; 63
    8f6c:	f8 94       	cli
    8f6e:	de bf       	out	0x3e, r29	; 62
    8f70:	0f be       	out	0x3f, r0	; 63
    8f72:	cd bf       	out	0x3d, r28	; 61
    8f74:	cf 91       	pop	r28
    8f76:	df 91       	pop	r29
    8f78:	08 95       	ret

00008f7a <_ZN6StringpLEc>:
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    8f7a:	df 93       	push	r29
    8f7c:	cf 93       	push	r28
    8f7e:	00 d0       	rcall	.+0      	; 0x8f80 <_ZN6StringpLEc+0x6>
    8f80:	0f 92       	push	r0
    8f82:	cd b7       	in	r28, 0x3d	; 61
    8f84:	de b7       	in	r29, 0x3e	; 62
    8f86:	9a 83       	std	Y+2, r25	; 0x02
    8f88:	89 83       	std	Y+1, r24	; 0x01
    8f8a:	6b 83       	std	Y+3, r22	; 0x03
    8f8c:	89 81       	ldd	r24, Y+1	; 0x01
    8f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    8f90:	6b 81       	ldd	r22, Y+3	; 0x03
    8f92:	0e 94 ee 5c 	call	0xb9dc	; 0xb9dc <_ZN6String6concatEc>
    8f96:	89 81       	ldd	r24, Y+1	; 0x01
    8f98:	9a 81       	ldd	r25, Y+2	; 0x02
    8f9a:	0f 90       	pop	r0
    8f9c:	0f 90       	pop	r0
    8f9e:	0f 90       	pop	r0
    8fa0:	cf 91       	pop	r28
    8fa2:	df 91       	pop	r29
    8fa4:	08 95       	ret

00008fa6 <_ZN6Stream9timedPeekEv>:
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
    8fa6:	df 93       	push	r29
    8fa8:	cf 93       	push	r28
    8faa:	cd b7       	in	r28, 0x3d	; 61
    8fac:	de b7       	in	r29, 0x3e	; 62
    8fae:	27 97       	sbiw	r28, 0x07	; 7
    8fb0:	0f b6       	in	r0, 0x3f	; 63
    8fb2:	f8 94       	cli
    8fb4:	de bf       	out	0x3e, r29	; 62
    8fb6:	0f be       	out	0x3f, r0	; 63
    8fb8:	cd bf       	out	0x3d, r28	; 61
    8fba:	9c 83       	std	Y+4, r25	; 0x04
    8fbc:	8b 83       	std	Y+3, r24	; 0x03
{
  int c;
  _startMillis = millis();
    8fbe:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
    8fc2:	dc 01       	movw	r26, r24
    8fc4:	cb 01       	movw	r24, r22
    8fc6:	eb 81       	ldd	r30, Y+3	; 0x03
    8fc8:	fc 81       	ldd	r31, Y+4	; 0x04
    8fca:	80 87       	std	Z+8, r24	; 0x08
    8fcc:	91 87       	std	Z+9, r25	; 0x09
    8fce:	a2 87       	std	Z+10, r26	; 0x0a
    8fd0:	b3 87       	std	Z+11, r27	; 0x0b
  do {
    c = peek();
    8fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    8fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    8fd6:	80 81       	ld	r24, Z
    8fd8:	91 81       	ldd	r25, Z+1	; 0x01
    8fda:	fc 01       	movw	r30, r24
    8fdc:	38 96       	adiw	r30, 0x08	; 8
    8fde:	01 90       	ld	r0, Z+
    8fe0:	f0 81       	ld	r31, Z
    8fe2:	e0 2d       	mov	r30, r0
    8fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    8fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    8fe8:	09 95       	icall
    8fea:	9a 83       	std	Y+2, r25	; 0x02
    8fec:	89 83       	std	Y+1, r24	; 0x01
    if (c >= 0) return c;
    8fee:	89 81       	ldd	r24, Y+1	; 0x01
    8ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    8ff2:	99 23       	and	r25, r25
    8ff4:	2c f0       	brlt	.+10     	; 0x9000 <_ZN6Stream9timedPeekEv+0x5a>
    8ff6:	89 81       	ldd	r24, Y+1	; 0x01
    8ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    8ffa:	9e 83       	std	Y+6, r25	; 0x06
    8ffc:	8d 83       	std	Y+5, r24	; 0x05
    8ffe:	23 c0       	rjmp	.+70     	; 0x9046 <_ZN6Stream9timedPeekEv+0xa0>
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
    9000:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
    9004:	9b 01       	movw	r18, r22
    9006:	ac 01       	movw	r20, r24
    9008:	eb 81       	ldd	r30, Y+3	; 0x03
    900a:	fc 81       	ldd	r31, Y+4	; 0x04
    900c:	80 85       	ldd	r24, Z+8	; 0x08
    900e:	91 85       	ldd	r25, Z+9	; 0x09
    9010:	a2 85       	ldd	r26, Z+10	; 0x0a
    9012:	b3 85       	ldd	r27, Z+11	; 0x0b
    9014:	28 1b       	sub	r18, r24
    9016:	39 0b       	sbc	r19, r25
    9018:	4a 0b       	sbc	r20, r26
    901a:	5b 0b       	sbc	r21, r27
    901c:	eb 81       	ldd	r30, Y+3	; 0x03
    901e:	fc 81       	ldd	r31, Y+4	; 0x04
    9020:	84 81       	ldd	r24, Z+4	; 0x04
    9022:	95 81       	ldd	r25, Z+5	; 0x05
    9024:	a6 81       	ldd	r26, Z+6	; 0x06
    9026:	b7 81       	ldd	r27, Z+7	; 0x07
    9028:	1f 82       	std	Y+7, r1	; 0x07
    902a:	28 17       	cp	r18, r24
    902c:	39 07       	cpc	r19, r25
    902e:	4a 07       	cpc	r20, r26
    9030:	5b 07       	cpc	r21, r27
    9032:	10 f4       	brcc	.+4      	; 0x9038 <_ZN6Stream9timedPeekEv+0x92>
    9034:	91 e0       	ldi	r25, 0x01	; 1
    9036:	9f 83       	std	Y+7, r25	; 0x07
    9038:	8f 81       	ldd	r24, Y+7	; 0x07
    903a:	88 23       	and	r24, r24
    903c:	51 f6       	brne	.-108    	; 0x8fd2 <_ZN6Stream9timedPeekEv+0x2c>
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    903e:	8f ef       	ldi	r24, 0xFF	; 255
    9040:	9f ef       	ldi	r25, 0xFF	; 255
    9042:	9e 83       	std	Y+6, r25	; 0x06
    9044:	8d 83       	std	Y+5, r24	; 0x05
    9046:	8d 81       	ldd	r24, Y+5	; 0x05
    9048:	9e 81       	ldd	r25, Y+6	; 0x06
}
    904a:	27 96       	adiw	r28, 0x07	; 7
    904c:	0f b6       	in	r0, 0x3f	; 63
    904e:	f8 94       	cli
    9050:	de bf       	out	0x3e, r29	; 62
    9052:	0f be       	out	0x3f, r0	; 63
    9054:	cd bf       	out	0x3d, r28	; 61
    9056:	cf 91       	pop	r28
    9058:	df 91       	pop	r29
    905a:	08 95       	ret

0000905c <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
    905c:	df 93       	push	r29
    905e:	cf 93       	push	r28
    9060:	00 d0       	rcall	.+0      	; 0x9062 <_ZN6Stream13peekNextDigitEv+0x6>
    9062:	00 d0       	rcall	.+0      	; 0x9064 <_ZN6Stream13peekNextDigitEv+0x8>
    9064:	00 d0       	rcall	.+0      	; 0x9066 <_ZN6Stream13peekNextDigitEv+0xa>
    9066:	cd b7       	in	r28, 0x3d	; 61
    9068:	de b7       	in	r29, 0x3e	; 62
    906a:	9c 83       	std	Y+4, r25	; 0x04
    906c:	8b 83       	std	Y+3, r24	; 0x03
{
  int c;
  while (1) {
    c = timedPeek();
    906e:	8b 81       	ldd	r24, Y+3	; 0x03
    9070:	9c 81       	ldd	r25, Y+4	; 0x04
    9072:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <_ZN6Stream9timedPeekEv>
    9076:	9a 83       	std	Y+2, r25	; 0x02
    9078:	89 83       	std	Y+1, r24	; 0x01
    if (c < 0) return c;  // timeout
    907a:	89 81       	ldd	r24, Y+1	; 0x01
    907c:	9a 81       	ldd	r25, Y+2	; 0x02
    907e:	99 23       	and	r25, r25
    9080:	2c f4       	brge	.+10     	; 0x908c <_ZN6Stream13peekNextDigitEv+0x30>
    9082:	89 81       	ldd	r24, Y+1	; 0x01
    9084:	9a 81       	ldd	r25, Y+2	; 0x02
    9086:	9e 83       	std	Y+6, r25	; 0x06
    9088:	8d 83       	std	Y+5, r24	; 0x05
    908a:	26 c0       	rjmp	.+76     	; 0x90d8 <_ZN6Stream13peekNextDigitEv+0x7c>
    if (c == '-') return c;
    908c:	89 81       	ldd	r24, Y+1	; 0x01
    908e:	9a 81       	ldd	r25, Y+2	; 0x02
    9090:	8d 32       	cpi	r24, 0x2D	; 45
    9092:	91 05       	cpc	r25, r1
    9094:	29 f4       	brne	.+10     	; 0x90a0 <_ZN6Stream13peekNextDigitEv+0x44>
    9096:	89 81       	ldd	r24, Y+1	; 0x01
    9098:	9a 81       	ldd	r25, Y+2	; 0x02
    909a:	9e 83       	std	Y+6, r25	; 0x06
    909c:	8d 83       	std	Y+5, r24	; 0x05
    909e:	1c c0       	rjmp	.+56     	; 0x90d8 <_ZN6Stream13peekNextDigitEv+0x7c>
    if (c >= '0' && c <= '9') return c;
    90a0:	89 81       	ldd	r24, Y+1	; 0x01
    90a2:	9a 81       	ldd	r25, Y+2	; 0x02
    90a4:	80 33       	cpi	r24, 0x30	; 48
    90a6:	91 05       	cpc	r25, r1
    90a8:	54 f0       	brlt	.+20     	; 0x90be <_ZN6Stream13peekNextDigitEv+0x62>
    90aa:	89 81       	ldd	r24, Y+1	; 0x01
    90ac:	9a 81       	ldd	r25, Y+2	; 0x02
    90ae:	8a 33       	cpi	r24, 0x3A	; 58
    90b0:	91 05       	cpc	r25, r1
    90b2:	2c f4       	brge	.+10     	; 0x90be <_ZN6Stream13peekNextDigitEv+0x62>
    90b4:	89 81       	ldd	r24, Y+1	; 0x01
    90b6:	9a 81       	ldd	r25, Y+2	; 0x02
    90b8:	9e 83       	std	Y+6, r25	; 0x06
    90ba:	8d 83       	std	Y+5, r24	; 0x05
    90bc:	0d c0       	rjmp	.+26     	; 0x90d8 <_ZN6Stream13peekNextDigitEv+0x7c>
    read();  // discard non-numeric
    90be:	eb 81       	ldd	r30, Y+3	; 0x03
    90c0:	fc 81       	ldd	r31, Y+4	; 0x04
    90c2:	80 81       	ld	r24, Z
    90c4:	91 81       	ldd	r25, Z+1	; 0x01
    90c6:	fc 01       	movw	r30, r24
    90c8:	36 96       	adiw	r30, 0x06	; 6
    90ca:	01 90       	ld	r0, Z+
    90cc:	f0 81       	ld	r31, Z
    90ce:	e0 2d       	mov	r30, r0
    90d0:	8b 81       	ldd	r24, Y+3	; 0x03
    90d2:	9c 81       	ldd	r25, Y+4	; 0x04
    90d4:	09 95       	icall
    90d6:	cb cf       	rjmp	.-106    	; 0x906e <_ZN6Stream13peekNextDigitEv+0x12>
// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    90d8:	8d 81       	ldd	r24, Y+5	; 0x05
    90da:	9e 81       	ldd	r25, Y+6	; 0x06
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    90dc:	26 96       	adiw	r28, 0x06	; 6
    90de:	0f b6       	in	r0, 0x3f	; 63
    90e0:	f8 94       	cli
    90e2:	de bf       	out	0x3e, r29	; 62
    90e4:	0f be       	out	0x3f, r0	; 63
    90e6:	cd bf       	out	0x3d, r28	; 61
    90e8:	cf 91       	pop	r28
    90ea:	df 91       	pop	r29
    90ec:	08 95       	ret

000090ee <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
    90ee:	df 93       	push	r29
    90f0:	cf 93       	push	r28
    90f2:	cd b7       	in	r28, 0x3d	; 61
    90f4:	de b7       	in	r29, 0x3e	; 62
    90f6:	62 97       	sbiw	r28, 0x12	; 18
    90f8:	0f b6       	in	r0, 0x3f	; 63
    90fa:	f8 94       	cli
    90fc:	de bf       	out	0x3e, r29	; 62
    90fe:	0f be       	out	0x3f, r0	; 63
    9100:	cd bf       	out	0x3d, r28	; 61
    9102:	9d 87       	std	Y+13, r25	; 0x0d
    9104:	8c 87       	std	Y+12, r24	; 0x0c
    9106:	6e 87       	std	Y+14, r22	; 0x0e
  boolean isNegative = false;
    9108:	1b 86       	std	Y+11, r1	; 0x0b
  boolean isFraction = false;
    910a:	1a 86       	std	Y+10, r1	; 0x0a
  long value = 0;
    910c:	1e 82       	std	Y+6, r1	; 0x06
    910e:	1f 82       	std	Y+7, r1	; 0x07
    9110:	18 86       	std	Y+8, r1	; 0x08
    9112:	19 86       	std	Y+9, r1	; 0x09
  char c;
  float fraction = 1.0;
    9114:	80 e0       	ldi	r24, 0x00	; 0
    9116:	90 e0       	ldi	r25, 0x00	; 0
    9118:	a0 e8       	ldi	r26, 0x80	; 128
    911a:	bf e3       	ldi	r27, 0x3F	; 63
    911c:	89 83       	std	Y+1, r24	; 0x01
    911e:	9a 83       	std	Y+2, r25	; 0x02
    9120:	ab 83       	std	Y+3, r26	; 0x03
    9122:	bc 83       	std	Y+4, r27	; 0x04

  c = peekNextDigit();
    9124:	8c 85       	ldd	r24, Y+12	; 0x0c
    9126:	9d 85       	ldd	r25, Y+13	; 0x0d
    9128:	0e 94 2e 48 	call	0x905c	; 0x905c <_ZN6Stream13peekNextDigitEv>
    912c:	8d 83       	std	Y+5, r24	; 0x05
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    912e:	9d 81       	ldd	r25, Y+5	; 0x05
    9130:	8e 85       	ldd	r24, Y+14	; 0x0e
    9132:	98 17       	cp	r25, r24
    9134:	09 f4       	brne	.+2      	; 0x9138 <_ZN6Stream10parseFloatEc+0x4a>
    9136:	43 c0       	rjmp	.+134    	; 0x91be <_ZN6Stream10parseFloatEc+0xd0>
      ; // ignore
    else if(c == '-')
    9138:	8d 81       	ldd	r24, Y+5	; 0x05
    913a:	8d 32       	cpi	r24, 0x2D	; 45
    913c:	19 f4       	brne	.+6      	; 0x9144 <_ZN6Stream10parseFloatEc+0x56>
      isNegative = true;
    913e:	81 e0       	ldi	r24, 0x01	; 1
    9140:	8b 87       	std	Y+11, r24	; 0x0b
    9142:	3d c0       	rjmp	.+122    	; 0x91be <_ZN6Stream10parseFloatEc+0xd0>
    else if (c == '.')
    9144:	8d 81       	ldd	r24, Y+5	; 0x05
    9146:	8e 32       	cpi	r24, 0x2E	; 46
    9148:	19 f4       	brne	.+6      	; 0x9150 <_ZN6Stream10parseFloatEc+0x62>
      isFraction = true;
    914a:	81 e0       	ldi	r24, 0x01	; 1
    914c:	8a 87       	std	Y+10, r24	; 0x0a
    914e:	37 c0       	rjmp	.+110    	; 0x91be <_ZN6Stream10parseFloatEc+0xd0>
    else if(c >= '0' && c <= '9')  {      // is c a digit?
    9150:	8d 81       	ldd	r24, Y+5	; 0x05
    9152:	80 33       	cpi	r24, 0x30	; 48
    9154:	a0 f1       	brcs	.+104    	; 0x91be <_ZN6Stream10parseFloatEc+0xd0>
    9156:	8d 81       	ldd	r24, Y+5	; 0x05
    9158:	8a 33       	cpi	r24, 0x3A	; 58
    915a:	88 f5       	brcc	.+98     	; 0x91be <_ZN6Stream10parseFloatEc+0xd0>
      value = value * 10 + c - '0';
    915c:	8e 81       	ldd	r24, Y+6	; 0x06
    915e:	9f 81       	ldd	r25, Y+7	; 0x07
    9160:	a8 85       	ldd	r26, Y+8	; 0x08
    9162:	b9 85       	ldd	r27, Y+9	; 0x09
    9164:	2a e0       	ldi	r18, 0x0A	; 10
    9166:	30 e0       	ldi	r19, 0x00	; 0
    9168:	40 e0       	ldi	r20, 0x00	; 0
    916a:	50 e0       	ldi	r21, 0x00	; 0
    916c:	bc 01       	movw	r22, r24
    916e:	cd 01       	movw	r24, r26
    9170:	0e 94 b8 81 	call	0x10370	; 0x10370 <__mulsi3>
    9174:	9b 01       	movw	r18, r22
    9176:	ac 01       	movw	r20, r24
    9178:	8d 81       	ldd	r24, Y+5	; 0x05
    917a:	88 2f       	mov	r24, r24
    917c:	90 e0       	ldi	r25, 0x00	; 0
    917e:	a0 e0       	ldi	r26, 0x00	; 0
    9180:	b0 e0       	ldi	r27, 0x00	; 0
    9182:	82 0f       	add	r24, r18
    9184:	93 1f       	adc	r25, r19
    9186:	a4 1f       	adc	r26, r20
    9188:	b5 1f       	adc	r27, r21
    918a:	c0 97       	sbiw	r24, 0x30	; 48
    918c:	a1 09       	sbc	r26, r1
    918e:	b1 09       	sbc	r27, r1
    9190:	8e 83       	std	Y+6, r24	; 0x06
    9192:	9f 83       	std	Y+7, r25	; 0x07
    9194:	a8 87       	std	Y+8, r26	; 0x08
    9196:	b9 87       	std	Y+9, r27	; 0x09
      if(isFraction)
    9198:	8a 85       	ldd	r24, Y+10	; 0x0a
    919a:	88 23       	and	r24, r24
    919c:	81 f0       	breq	.+32     	; 0x91be <_ZN6Stream10parseFloatEc+0xd0>
         fraction *= 0.1;
    919e:	69 81       	ldd	r22, Y+1	; 0x01
    91a0:	7a 81       	ldd	r23, Y+2	; 0x02
    91a2:	8b 81       	ldd	r24, Y+3	; 0x03
    91a4:	9c 81       	ldd	r25, Y+4	; 0x04
    91a6:	2d ec       	ldi	r18, 0xCD	; 205
    91a8:	3c ec       	ldi	r19, 0xCC	; 204
    91aa:	4c ec       	ldi	r20, 0xCC	; 204
    91ac:	5d e3       	ldi	r21, 0x3D	; 61
    91ae:	0e 94 92 7c 	call	0xf924	; 0xf924 <__mulsf3>
    91b2:	dc 01       	movw	r26, r24
    91b4:	cb 01       	movw	r24, r22
    91b6:	89 83       	std	Y+1, r24	; 0x01
    91b8:	9a 83       	std	Y+2, r25	; 0x02
    91ba:	ab 83       	std	Y+3, r26	; 0x03
    91bc:	bc 83       	std	Y+4, r27	; 0x04
    }
    read();  // consume the character we got with peek
    91be:	ec 85       	ldd	r30, Y+12	; 0x0c
    91c0:	fd 85       	ldd	r31, Y+13	; 0x0d
    91c2:	80 81       	ld	r24, Z
    91c4:	91 81       	ldd	r25, Z+1	; 0x01
    91c6:	fc 01       	movw	r30, r24
    91c8:	36 96       	adiw	r30, 0x06	; 6
    91ca:	01 90       	ld	r0, Z+
    91cc:	f0 81       	ld	r31, Z
    91ce:	e0 2d       	mov	r30, r0
    91d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    91d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    91d4:	09 95       	icall
    c = timedPeek();
    91d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    91d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    91da:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <_ZN6Stream9timedPeekEv>
    91de:	8d 83       	std	Y+5, r24	; 0x05
  c = peekNextDigit();
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    91e0:	8d 81       	ldd	r24, Y+5	; 0x05
    91e2:	80 33       	cpi	r24, 0x30	; 48
    91e4:	20 f0       	brcs	.+8      	; 0x91ee <_ZN6Stream10parseFloatEc+0x100>
    91e6:	8d 81       	ldd	r24, Y+5	; 0x05
    91e8:	8a 33       	cpi	r24, 0x3A	; 58
    91ea:	08 f4       	brcc	.+2      	; 0x91ee <_ZN6Stream10parseFloatEc+0x100>
    91ec:	a0 cf       	rjmp	.-192    	; 0x912e <_ZN6Stream10parseFloatEc+0x40>
    91ee:	8d 81       	ldd	r24, Y+5	; 0x05
    91f0:	8e 32       	cpi	r24, 0x2E	; 46
    91f2:	09 f4       	brne	.+2      	; 0x91f6 <_ZN6Stream10parseFloatEc+0x108>
    91f4:	9c cf       	rjmp	.-200    	; 0x912e <_ZN6Stream10parseFloatEc+0x40>
    91f6:	9d 81       	ldd	r25, Y+5	; 0x05
    91f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    91fa:	98 17       	cp	r25, r24
    91fc:	09 f4       	brne	.+2      	; 0x9200 <_ZN6Stream10parseFloatEc+0x112>
    91fe:	97 cf       	rjmp	.-210    	; 0x912e <_ZN6Stream10parseFloatEc+0x40>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );

  if(isNegative)
    9200:	8b 85       	ldd	r24, Y+11	; 0x0b
    9202:	88 23       	and	r24, r24
    9204:	79 f0       	breq	.+30     	; 0x9224 <_ZN6Stream10parseFloatEc+0x136>
    value = -value;
    9206:	8e 81       	ldd	r24, Y+6	; 0x06
    9208:	9f 81       	ldd	r25, Y+7	; 0x07
    920a:	a8 85       	ldd	r26, Y+8	; 0x08
    920c:	b9 85       	ldd	r27, Y+9	; 0x09
    920e:	b0 95       	com	r27
    9210:	a0 95       	com	r26
    9212:	90 95       	com	r25
    9214:	81 95       	neg	r24
    9216:	9f 4f       	sbci	r25, 0xFF	; 255
    9218:	af 4f       	sbci	r26, 0xFF	; 255
    921a:	bf 4f       	sbci	r27, 0xFF	; 255
    921c:	8e 83       	std	Y+6, r24	; 0x06
    921e:	9f 83       	std	Y+7, r25	; 0x07
    9220:	a8 87       	std	Y+8, r26	; 0x08
    9222:	b9 87       	std	Y+9, r27	; 0x09
  if(isFraction)
    9224:	8a 85       	ldd	r24, Y+10	; 0x0a
    9226:	88 23       	and	r24, r24
    9228:	b9 f0       	breq	.+46     	; 0x9258 <_ZN6Stream10parseFloatEc+0x16a>
    return value * fraction;
    922a:	6e 81       	ldd	r22, Y+6	; 0x06
    922c:	7f 81       	ldd	r23, Y+7	; 0x07
    922e:	88 85       	ldd	r24, Y+8	; 0x08
    9230:	99 85       	ldd	r25, Y+9	; 0x09
    9232:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__floatsisf>
    9236:	dc 01       	movw	r26, r24
    9238:	cb 01       	movw	r24, r22
    923a:	bc 01       	movw	r22, r24
    923c:	cd 01       	movw	r24, r26
    923e:	29 81       	ldd	r18, Y+1	; 0x01
    9240:	3a 81       	ldd	r19, Y+2	; 0x02
    9242:	4b 81       	ldd	r20, Y+3	; 0x03
    9244:	5c 81       	ldd	r21, Y+4	; 0x04
    9246:	0e 94 92 7c 	call	0xf924	; 0xf924 <__mulsf3>
    924a:	dc 01       	movw	r26, r24
    924c:	cb 01       	movw	r24, r22
    924e:	8f 87       	std	Y+15, r24	; 0x0f
    9250:	98 8b       	std	Y+16, r25	; 0x10
    9252:	a9 8b       	std	Y+17, r26	; 0x11
    9254:	ba 8b       	std	Y+18, r27	; 0x12
    9256:	0a c0       	rjmp	.+20     	; 0x926c <_ZN6Stream10parseFloatEc+0x17e>
  else
    return value;
    9258:	6e 81       	ldd	r22, Y+6	; 0x06
    925a:	7f 81       	ldd	r23, Y+7	; 0x07
    925c:	88 85       	ldd	r24, Y+8	; 0x08
    925e:	99 85       	ldd	r25, Y+9	; 0x09
    9260:	0e 94 98 7e 	call	0xfd30	; 0xfd30 <__floatsisf>
    9264:	6f 87       	std	Y+15, r22	; 0x0f
    9266:	78 8b       	std	Y+16, r23	; 0x10
    9268:	89 8b       	std	Y+17, r24	; 0x11
    926a:	9a 8b       	std	Y+18, r25	; 0x12
    926c:	8f 85       	ldd	r24, Y+15	; 0x0f
    926e:	98 89       	ldd	r25, Y+16	; 0x10
    9270:	a9 89       	ldd	r26, Y+17	; 0x11
    9272:	ba 89       	ldd	r27, Y+18	; 0x12
}
    9274:	bc 01       	movw	r22, r24
    9276:	cd 01       	movw	r24, r26
    9278:	62 96       	adiw	r28, 0x12	; 18
    927a:	0f b6       	in	r0, 0x3f	; 63
    927c:	f8 94       	cli
    927e:	de bf       	out	0x3e, r29	; 62
    9280:	0f be       	out	0x3f, r0	; 63
    9282:	cd bf       	out	0x3d, r28	; 61
    9284:	cf 91       	pop	r28
    9286:	df 91       	pop	r29
    9288:	08 95       	ret

0000928a <_ZN6Stream10parseFloatEv>:
  return value;
}


// as parseInt but returns a floating point value
float Stream::parseFloat()
    928a:	df 93       	push	r29
    928c:	cf 93       	push	r28
    928e:	00 d0       	rcall	.+0      	; 0x9290 <_ZN6Stream10parseFloatEv+0x6>
    9290:	cd b7       	in	r28, 0x3d	; 61
    9292:	de b7       	in	r29, 0x3e	; 62
    9294:	9a 83       	std	Y+2, r25	; 0x02
    9296:	89 83       	std	Y+1, r24	; 0x01
{
  return parseFloat(NO_SKIP_CHAR);
    9298:	89 81       	ldd	r24, Y+1	; 0x01
    929a:	9a 81       	ldd	r25, Y+2	; 0x02
    929c:	61 e0       	ldi	r22, 0x01	; 1
    929e:	0e 94 77 48 	call	0x90ee	; 0x90ee <_ZN6Stream10parseFloatEc>
    92a2:	dc 01       	movw	r26, r24
    92a4:	cb 01       	movw	r24, r22
}
    92a6:	bc 01       	movw	r22, r24
    92a8:	cd 01       	movw	r24, r26
    92aa:	0f 90       	pop	r0
    92ac:	0f 90       	pop	r0
    92ae:	cf 91       	pop	r28
    92b0:	df 91       	pop	r29
    92b2:	08 95       	ret

000092b4 <_ZN6Stream8parseIntEc>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
    92b4:	df 93       	push	r29
    92b6:	cf 93       	push	r28
    92b8:	cd b7       	in	r28, 0x3d	; 61
    92ba:	de b7       	in	r29, 0x3e	; 62
    92bc:	2e 97       	sbiw	r28, 0x0e	; 14
    92be:	0f b6       	in	r0, 0x3f	; 63
    92c0:	f8 94       	cli
    92c2:	de bf       	out	0x3e, r29	; 62
    92c4:	0f be       	out	0x3f, r0	; 63
    92c6:	cd bf       	out	0x3d, r28	; 61
    92c8:	99 87       	std	Y+9, r25	; 0x09
    92ca:	88 87       	std	Y+8, r24	; 0x08
    92cc:	6a 87       	std	Y+10, r22	; 0x0a
{
  boolean isNegative = false;
    92ce:	1f 82       	std	Y+7, r1	; 0x07
  long value = 0;
    92d0:	1b 82       	std	Y+3, r1	; 0x03
    92d2:	1c 82       	std	Y+4, r1	; 0x04
    92d4:	1d 82       	std	Y+5, r1	; 0x05
    92d6:	1e 82       	std	Y+6, r1	; 0x06
  int c;

  c = peekNextDigit();
    92d8:	88 85       	ldd	r24, Y+8	; 0x08
    92da:	99 85       	ldd	r25, Y+9	; 0x09
    92dc:	0e 94 2e 48 	call	0x905c	; 0x905c <_ZN6Stream13peekNextDigitEv>
    92e0:	9a 83       	std	Y+2, r25	; 0x02
    92e2:	89 83       	std	Y+1, r24	; 0x01
  // ignore non numeric leading characters
  if(c < 0)
    92e4:	89 81       	ldd	r24, Y+1	; 0x01
    92e6:	9a 81       	ldd	r25, Y+2	; 0x02
    92e8:	99 23       	and	r25, r25
    92ea:	2c f4       	brge	.+10     	; 0x92f6 <_ZN6Stream8parseIntEc+0x42>
    return 0; // zero returned if timeout
    92ec:	1b 86       	std	Y+11, r1	; 0x0b
    92ee:	1c 86       	std	Y+12, r1	; 0x0c
    92f0:	1d 86       	std	Y+13, r1	; 0x0d
    92f2:	1e 86       	std	Y+14, r1	; 0x0e
    92f4:	79 c0       	rjmp	.+242    	; 0x93e8 <_ZN6Stream8parseIntEc+0x134>

  do{
    if(c == skipChar)
    92f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    92f8:	28 2f       	mov	r18, r24
    92fa:	30 e0       	ldi	r19, 0x00	; 0
    92fc:	89 81       	ldd	r24, Y+1	; 0x01
    92fe:	9a 81       	ldd	r25, Y+2	; 0x02
    9300:	28 17       	cp	r18, r24
    9302:	39 07       	cpc	r19, r25
    9304:	89 f1       	breq	.+98     	; 0x9368 <_ZN6Stream8parseIntEc+0xb4>
      ; // ignore this charactor
    else if(c == '-')
    9306:	89 81       	ldd	r24, Y+1	; 0x01
    9308:	9a 81       	ldd	r25, Y+2	; 0x02
    930a:	8d 32       	cpi	r24, 0x2D	; 45
    930c:	91 05       	cpc	r25, r1
    930e:	19 f4       	brne	.+6      	; 0x9316 <_ZN6Stream8parseIntEc+0x62>
      isNegative = true;
    9310:	81 e0       	ldi	r24, 0x01	; 1
    9312:	8f 83       	std	Y+7, r24	; 0x07
    9314:	29 c0       	rjmp	.+82     	; 0x9368 <_ZN6Stream8parseIntEc+0xb4>
    else if(c >= '0' && c <= '9')        // is c a digit?
    9316:	89 81       	ldd	r24, Y+1	; 0x01
    9318:	9a 81       	ldd	r25, Y+2	; 0x02
    931a:	80 33       	cpi	r24, 0x30	; 48
    931c:	91 05       	cpc	r25, r1
    931e:	24 f1       	brlt	.+72     	; 0x9368 <_ZN6Stream8parseIntEc+0xb4>
    9320:	89 81       	ldd	r24, Y+1	; 0x01
    9322:	9a 81       	ldd	r25, Y+2	; 0x02
    9324:	8a 33       	cpi	r24, 0x3A	; 58
    9326:	91 05       	cpc	r25, r1
    9328:	fc f4       	brge	.+62     	; 0x9368 <_ZN6Stream8parseIntEc+0xb4>
      value = value * 10 + c - '0';
    932a:	8b 81       	ldd	r24, Y+3	; 0x03
    932c:	9c 81       	ldd	r25, Y+4	; 0x04
    932e:	ad 81       	ldd	r26, Y+5	; 0x05
    9330:	be 81       	ldd	r27, Y+6	; 0x06
    9332:	2a e0       	ldi	r18, 0x0A	; 10
    9334:	30 e0       	ldi	r19, 0x00	; 0
    9336:	40 e0       	ldi	r20, 0x00	; 0
    9338:	50 e0       	ldi	r21, 0x00	; 0
    933a:	bc 01       	movw	r22, r24
    933c:	cd 01       	movw	r24, r26
    933e:	0e 94 b8 81 	call	0x10370	; 0x10370 <__mulsi3>
    9342:	9b 01       	movw	r18, r22
    9344:	ac 01       	movw	r20, r24
    9346:	89 81       	ldd	r24, Y+1	; 0x01
    9348:	9a 81       	ldd	r25, Y+2	; 0x02
    934a:	aa 27       	eor	r26, r26
    934c:	97 fd       	sbrc	r25, 7
    934e:	a0 95       	com	r26
    9350:	ba 2f       	mov	r27, r26
    9352:	82 0f       	add	r24, r18
    9354:	93 1f       	adc	r25, r19
    9356:	a4 1f       	adc	r26, r20
    9358:	b5 1f       	adc	r27, r21
    935a:	c0 97       	sbiw	r24, 0x30	; 48
    935c:	a1 09       	sbc	r26, r1
    935e:	b1 09       	sbc	r27, r1
    9360:	8b 83       	std	Y+3, r24	; 0x03
    9362:	9c 83       	std	Y+4, r25	; 0x04
    9364:	ad 83       	std	Y+5, r26	; 0x05
    9366:	be 83       	std	Y+6, r27	; 0x06
    read();  // consume the character we got with peek
    9368:	e8 85       	ldd	r30, Y+8	; 0x08
    936a:	f9 85       	ldd	r31, Y+9	; 0x09
    936c:	80 81       	ld	r24, Z
    936e:	91 81       	ldd	r25, Z+1	; 0x01
    9370:	fc 01       	movw	r30, r24
    9372:	36 96       	adiw	r30, 0x06	; 6
    9374:	01 90       	ld	r0, Z+
    9376:	f0 81       	ld	r31, Z
    9378:	e0 2d       	mov	r30, r0
    937a:	88 85       	ldd	r24, Y+8	; 0x08
    937c:	99 85       	ldd	r25, Y+9	; 0x09
    937e:	09 95       	icall
    c = timedPeek();
    9380:	88 85       	ldd	r24, Y+8	; 0x08
    9382:	99 85       	ldd	r25, Y+9	; 0x09
    9384:	0e 94 d3 47 	call	0x8fa6	; 0x8fa6 <_ZN6Stream9timedPeekEv>
    9388:	9a 83       	std	Y+2, r25	; 0x02
    938a:	89 83       	std	Y+1, r24	; 0x01
  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    938c:	89 81       	ldd	r24, Y+1	; 0x01
    938e:	9a 81       	ldd	r25, Y+2	; 0x02
    9390:	80 33       	cpi	r24, 0x30	; 48
    9392:	91 05       	cpc	r25, r1
    9394:	34 f0       	brlt	.+12     	; 0x93a2 <_ZN6Stream8parseIntEc+0xee>
    9396:	89 81       	ldd	r24, Y+1	; 0x01
    9398:	9a 81       	ldd	r25, Y+2	; 0x02
    939a:	8a 33       	cpi	r24, 0x3A	; 58
    939c:	91 05       	cpc	r25, r1
    939e:	0c f4       	brge	.+2      	; 0x93a2 <_ZN6Stream8parseIntEc+0xee>
    93a0:	aa cf       	rjmp	.-172    	; 0x92f6 <_ZN6Stream8parseIntEc+0x42>
    93a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    93a4:	28 2f       	mov	r18, r24
    93a6:	30 e0       	ldi	r19, 0x00	; 0
    93a8:	89 81       	ldd	r24, Y+1	; 0x01
    93aa:	9a 81       	ldd	r25, Y+2	; 0x02
    93ac:	28 17       	cp	r18, r24
    93ae:	39 07       	cpc	r19, r25
    93b0:	09 f4       	brne	.+2      	; 0x93b4 <_ZN6Stream8parseIntEc+0x100>
    93b2:	a1 cf       	rjmp	.-190    	; 0x92f6 <_ZN6Stream8parseIntEc+0x42>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    93b4:	8f 81       	ldd	r24, Y+7	; 0x07
    93b6:	88 23       	and	r24, r24
    93b8:	79 f0       	breq	.+30     	; 0x93d8 <_ZN6Stream8parseIntEc+0x124>
    value = -value;
    93ba:	8b 81       	ldd	r24, Y+3	; 0x03
    93bc:	9c 81       	ldd	r25, Y+4	; 0x04
    93be:	ad 81       	ldd	r26, Y+5	; 0x05
    93c0:	be 81       	ldd	r27, Y+6	; 0x06
    93c2:	b0 95       	com	r27
    93c4:	a0 95       	com	r26
    93c6:	90 95       	com	r25
    93c8:	81 95       	neg	r24
    93ca:	9f 4f       	sbci	r25, 0xFF	; 255
    93cc:	af 4f       	sbci	r26, 0xFF	; 255
    93ce:	bf 4f       	sbci	r27, 0xFF	; 255
    93d0:	8b 83       	std	Y+3, r24	; 0x03
    93d2:	9c 83       	std	Y+4, r25	; 0x04
    93d4:	ad 83       	std	Y+5, r26	; 0x05
    93d6:	be 83       	std	Y+6, r27	; 0x06
  return value;
    93d8:	8b 81       	ldd	r24, Y+3	; 0x03
    93da:	9c 81       	ldd	r25, Y+4	; 0x04
    93dc:	ad 81       	ldd	r26, Y+5	; 0x05
    93de:	be 81       	ldd	r27, Y+6	; 0x06
    93e0:	8b 87       	std	Y+11, r24	; 0x0b
    93e2:	9c 87       	std	Y+12, r25	; 0x0c
    93e4:	ad 87       	std	Y+13, r26	; 0x0d
    93e6:	be 87       	std	Y+14, r27	; 0x0e
    93e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    93ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    93ec:	ad 85       	ldd	r26, Y+13	; 0x0d
    93ee:	be 85       	ldd	r27, Y+14	; 0x0e
}
    93f0:	bc 01       	movw	r22, r24
    93f2:	cd 01       	movw	r24, r26
    93f4:	2e 96       	adiw	r28, 0x0e	; 14
    93f6:	0f b6       	in	r0, 0x3f	; 63
    93f8:	f8 94       	cli
    93fa:	de bf       	out	0x3e, r29	; 62
    93fc:	0f be       	out	0x3f, r0	; 63
    93fe:	cd bf       	out	0x3d, r28	; 61
    9400:	cf 91       	pop	r28
    9402:	df 91       	pop	r29
    9404:	08 95       	ret

00009406 <_ZN6Stream8parseIntEv>:


// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
    9406:	df 93       	push	r29
    9408:	cf 93       	push	r28
    940a:	00 d0       	rcall	.+0      	; 0x940c <_ZN6Stream8parseIntEv+0x6>
    940c:	cd b7       	in	r28, 0x3d	; 61
    940e:	de b7       	in	r29, 0x3e	; 62
    9410:	9a 83       	std	Y+2, r25	; 0x02
    9412:	89 83       	std	Y+1, r24	; 0x01
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    9414:	89 81       	ldd	r24, Y+1	; 0x01
    9416:	9a 81       	ldd	r25, Y+2	; 0x02
    9418:	61 e0       	ldi	r22, 0x01	; 1
    941a:	0e 94 5a 49 	call	0x92b4	; 0x92b4 <_ZN6Stream8parseIntEc>
    941e:	dc 01       	movw	r26, r24
    9420:	cb 01       	movw	r24, r22
}
    9422:	bc 01       	movw	r22, r24
    9424:	cd 01       	movw	r24, r26
    9426:	0f 90       	pop	r0
    9428:	0f 90       	pop	r0
    942a:	cf 91       	pop	r28
    942c:	df 91       	pop	r29
    942e:	08 95       	ret

00009430 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
    9430:	df 93       	push	r29
    9432:	cf 93       	push	r28
    9434:	cd b7       	in	r28, 0x3d	; 61
    9436:	de b7       	in	r29, 0x3e	; 62
    9438:	27 97       	sbiw	r28, 0x07	; 7
    943a:	0f b6       	in	r0, 0x3f	; 63
    943c:	f8 94       	cli
    943e:	de bf       	out	0x3e, r29	; 62
    9440:	0f be       	out	0x3f, r0	; 63
    9442:	cd bf       	out	0x3d, r28	; 61
    9444:	9c 83       	std	Y+4, r25	; 0x04
    9446:	8b 83       	std	Y+3, r24	; 0x03
{
  int c;
  _startMillis = millis();
    9448:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
    944c:	dc 01       	movw	r26, r24
    944e:	cb 01       	movw	r24, r22
    9450:	eb 81       	ldd	r30, Y+3	; 0x03
    9452:	fc 81       	ldd	r31, Y+4	; 0x04
    9454:	80 87       	std	Z+8, r24	; 0x08
    9456:	91 87       	std	Z+9, r25	; 0x09
    9458:	a2 87       	std	Z+10, r26	; 0x0a
    945a:	b3 87       	std	Z+11, r27	; 0x0b
  do {
    c = read();
    945c:	eb 81       	ldd	r30, Y+3	; 0x03
    945e:	fc 81       	ldd	r31, Y+4	; 0x04
    9460:	80 81       	ld	r24, Z
    9462:	91 81       	ldd	r25, Z+1	; 0x01
    9464:	fc 01       	movw	r30, r24
    9466:	36 96       	adiw	r30, 0x06	; 6
    9468:	01 90       	ld	r0, Z+
    946a:	f0 81       	ld	r31, Z
    946c:	e0 2d       	mov	r30, r0
    946e:	8b 81       	ldd	r24, Y+3	; 0x03
    9470:	9c 81       	ldd	r25, Y+4	; 0x04
    9472:	09 95       	icall
    9474:	9a 83       	std	Y+2, r25	; 0x02
    9476:	89 83       	std	Y+1, r24	; 0x01
    if (c >= 0) return c;
    9478:	89 81       	ldd	r24, Y+1	; 0x01
    947a:	9a 81       	ldd	r25, Y+2	; 0x02
    947c:	99 23       	and	r25, r25
    947e:	2c f0       	brlt	.+10     	; 0x948a <_ZN6Stream9timedReadEv+0x5a>
    9480:	89 81       	ldd	r24, Y+1	; 0x01
    9482:	9a 81       	ldd	r25, Y+2	; 0x02
    9484:	9e 83       	std	Y+6, r25	; 0x06
    9486:	8d 83       	std	Y+5, r24	; 0x05
    9488:	23 c0       	rjmp	.+70     	; 0x94d0 <_ZN6Stream9timedReadEv+0xa0>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    948a:	0e 94 1d 64 	call	0xc83a	; 0xc83a <millis>
    948e:	9b 01       	movw	r18, r22
    9490:	ac 01       	movw	r20, r24
    9492:	eb 81       	ldd	r30, Y+3	; 0x03
    9494:	fc 81       	ldd	r31, Y+4	; 0x04
    9496:	80 85       	ldd	r24, Z+8	; 0x08
    9498:	91 85       	ldd	r25, Z+9	; 0x09
    949a:	a2 85       	ldd	r26, Z+10	; 0x0a
    949c:	b3 85       	ldd	r27, Z+11	; 0x0b
    949e:	28 1b       	sub	r18, r24
    94a0:	39 0b       	sbc	r19, r25
    94a2:	4a 0b       	sbc	r20, r26
    94a4:	5b 0b       	sbc	r21, r27
    94a6:	eb 81       	ldd	r30, Y+3	; 0x03
    94a8:	fc 81       	ldd	r31, Y+4	; 0x04
    94aa:	84 81       	ldd	r24, Z+4	; 0x04
    94ac:	95 81       	ldd	r25, Z+5	; 0x05
    94ae:	a6 81       	ldd	r26, Z+6	; 0x06
    94b0:	b7 81       	ldd	r27, Z+7	; 0x07
    94b2:	1f 82       	std	Y+7, r1	; 0x07
    94b4:	28 17       	cp	r18, r24
    94b6:	39 07       	cpc	r19, r25
    94b8:	4a 07       	cpc	r20, r26
    94ba:	5b 07       	cpc	r21, r27
    94bc:	10 f4       	brcc	.+4      	; 0x94c2 <_ZN6Stream9timedReadEv+0x92>
    94be:	91 e0       	ldi	r25, 0x01	; 1
    94c0:	9f 83       	std	Y+7, r25	; 0x07
    94c2:	8f 81       	ldd	r24, Y+7	; 0x07
    94c4:	88 23       	and	r24, r24
    94c6:	51 f6       	brne	.-108    	; 0x945c <_ZN6Stream9timedReadEv+0x2c>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    94c8:	8f ef       	ldi	r24, 0xFF	; 255
    94ca:	9f ef       	ldi	r25, 0xFF	; 255
    94cc:	9e 83       	std	Y+6, r25	; 0x06
    94ce:	8d 83       	std	Y+5, r24	; 0x05
    94d0:	8d 81       	ldd	r24, Y+5	; 0x05
    94d2:	9e 81       	ldd	r25, Y+6	; 0x06
}
    94d4:	27 96       	adiw	r28, 0x07	; 7
    94d6:	0f b6       	in	r0, 0x3f	; 63
    94d8:	f8 94       	cli
    94da:	de bf       	out	0x3e, r29	; 62
    94dc:	0f be       	out	0x3f, r0	; 63
    94de:	cd bf       	out	0x3d, r28	; 61
    94e0:	cf 91       	pop	r28
    94e2:	df 91       	pop	r29
    94e4:	08 95       	ret

000094e6 <_ZN6Stream15readStringUntilEc>:
    c = timedRead();
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
    94e6:	df 93       	push	r29
    94e8:	cf 93       	push	r28
    94ea:	cd b7       	in	r28, 0x3d	; 61
    94ec:	de b7       	in	r29, 0x3e	; 62
    94ee:	2e 97       	sbiw	r28, 0x0e	; 14
    94f0:	0f b6       	in	r0, 0x3f	; 63
    94f2:	f8 94       	cli
    94f4:	de bf       	out	0x3e, r29	; 62
    94f6:	0f be       	out	0x3f, r0	; 63
    94f8:	cd bf       	out	0x3d, r28	; 61
    94fa:	9e 87       	std	Y+14, r25	; 0x0e
    94fc:	8d 87       	std	Y+13, r24	; 0x0d
    94fe:	7b 87       	std	Y+11, r23	; 0x0b
    9500:	6a 87       	std	Y+10, r22	; 0x0a
    9502:	4c 87       	std	Y+12, r20	; 0x0c
{
  String ret;
    9504:	8d 85       	ldd	r24, Y+13	; 0x0d
    9506:	9e 85       	ldd	r25, Y+14	; 0x0e
    9508:	24 ec       	ldi	r18, 0xC4	; 196
    950a:	30 e0       	ldi	r19, 0x00	; 0
    950c:	b9 01       	movw	r22, r18
    950e:	0e 94 55 5f 	call	0xbeaa	; 0xbeaa <_ZN6StringC1EPKc>
  int c = timedRead();
    9512:	8a 85       	ldd	r24, Y+10	; 0x0a
    9514:	9b 85       	ldd	r25, Y+11	; 0x0b
    9516:	0e 94 18 4a 	call	0x9430	; 0x9430 <_ZN6Stream9timedReadEv>
    951a:	9a 83       	std	Y+2, r25	; 0x02
    951c:	89 83       	std	Y+1, r24	; 0x01
    951e:	0c c0       	rjmp	.+24     	; 0x9538 <_ZN6Stream15readStringUntilEc+0x52>
  while (c >= 0 && c != terminator)
  {
    ret += (char)c;
    9520:	8d 85       	ldd	r24, Y+13	; 0x0d
    9522:	9e 85       	ldd	r25, Y+14	; 0x0e
    9524:	29 81       	ldd	r18, Y+1	; 0x01
    9526:	62 2f       	mov	r22, r18
    9528:	0e 94 bd 47 	call	0x8f7a	; 0x8f7a <_ZN6StringpLEc>
    c = timedRead();
    952c:	8a 85       	ldd	r24, Y+10	; 0x0a
    952e:	9b 85       	ldd	r25, Y+11	; 0x0b
    9530:	0e 94 18 4a 	call	0x9430	; 0x9430 <_ZN6Stream9timedReadEv>
    9534:	9a 83       	std	Y+2, r25	; 0x02
    9536:	89 83       	std	Y+1, r24	; 0x01

String Stream::readStringUntil(char terminator)
{
  String ret;
  int c = timedRead();
  while (c >= 0 && c != terminator)
    9538:	89 81       	ldd	r24, Y+1	; 0x01
    953a:	9a 81       	ldd	r25, Y+2	; 0x02
    953c:	99 23       	and	r25, r25
    953e:	44 f0       	brlt	.+16     	; 0x9550 <_ZN6Stream15readStringUntilEc+0x6a>
    9540:	8c 85       	ldd	r24, Y+12	; 0x0c
    9542:	28 2f       	mov	r18, r24
    9544:	30 e0       	ldi	r19, 0x00	; 0
    9546:	89 81       	ldd	r24, Y+1	; 0x01
    9548:	9a 81       	ldd	r25, Y+2	; 0x02
    954a:	28 17       	cp	r18, r24
    954c:	39 07       	cpc	r19, r25
    954e:	41 f7       	brne	.-48     	; 0x9520 <_ZN6Stream15readStringUntilEc+0x3a>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    9550:	8d 85       	ldd	r24, Y+13	; 0x0d
    9552:	9e 85       	ldd	r25, Y+14	; 0x0e
    9554:	8d 85       	ldd	r24, Y+13	; 0x0d
    9556:	9e 85       	ldd	r25, Y+14	; 0x0e
    9558:	2e 96       	adiw	r28, 0x0e	; 14
    955a:	0f b6       	in	r0, 0x3f	; 63
    955c:	f8 94       	cli
    955e:	de bf       	out	0x3e, r29	; 62
    9560:	0f be       	out	0x3f, r0	; 63
    9562:	cd bf       	out	0x3d, r28	; 61
    9564:	cf 91       	pop	r28
    9566:	df 91       	pop	r29
    9568:	08 95       	ret

0000956a <_ZN6Stream10readStringEv>:
    index++;
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
    956a:	df 93       	push	r29
    956c:	cf 93       	push	r28
    956e:	cd b7       	in	r28, 0x3d	; 61
    9570:	de b7       	in	r29, 0x3e	; 62
    9572:	2d 97       	sbiw	r28, 0x0d	; 13
    9574:	0f b6       	in	r0, 0x3f	; 63
    9576:	f8 94       	cli
    9578:	de bf       	out	0x3e, r29	; 62
    957a:	0f be       	out	0x3f, r0	; 63
    957c:	cd bf       	out	0x3d, r28	; 61
    957e:	9d 87       	std	Y+13, r25	; 0x0d
    9580:	8c 87       	std	Y+12, r24	; 0x0c
    9582:	7b 87       	std	Y+11, r23	; 0x0b
    9584:	6a 87       	std	Y+10, r22	; 0x0a
{
  String ret;
    9586:	8c 85       	ldd	r24, Y+12	; 0x0c
    9588:	9d 85       	ldd	r25, Y+13	; 0x0d
    958a:	24 ec       	ldi	r18, 0xC4	; 196
    958c:	30 e0       	ldi	r19, 0x00	; 0
    958e:	b9 01       	movw	r22, r18
    9590:	0e 94 55 5f 	call	0xbeaa	; 0xbeaa <_ZN6StringC1EPKc>
  int c = timedRead();
    9594:	8a 85       	ldd	r24, Y+10	; 0x0a
    9596:	9b 85       	ldd	r25, Y+11	; 0x0b
    9598:	0e 94 18 4a 	call	0x9430	; 0x9430 <_ZN6Stream9timedReadEv>
    959c:	9a 83       	std	Y+2, r25	; 0x02
    959e:	89 83       	std	Y+1, r24	; 0x01
    95a0:	0c c0       	rjmp	.+24     	; 0x95ba <_ZN6Stream10readStringEv+0x50>
  while (c >= 0)
  {
    ret += (char)c;
    95a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    95a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    95a6:	29 81       	ldd	r18, Y+1	; 0x01
    95a8:	62 2f       	mov	r22, r18
    95aa:	0e 94 bd 47 	call	0x8f7a	; 0x8f7a <_ZN6StringpLEc>
    c = timedRead();
    95ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    95b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    95b2:	0e 94 18 4a 	call	0x9430	; 0x9430 <_ZN6Stream9timedReadEv>
    95b6:	9a 83       	std	Y+2, r25	; 0x02
    95b8:	89 83       	std	Y+1, r24	; 0x01

String Stream::readString()
{
  String ret;
  int c = timedRead();
  while (c >= 0)
    95ba:	89 81       	ldd	r24, Y+1	; 0x01
    95bc:	9a 81       	ldd	r25, Y+2	; 0x02
    95be:	99 23       	and	r25, r25
    95c0:	84 f7       	brge	.-32     	; 0x95a2 <_ZN6Stream10readStringEv+0x38>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
    95c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    95c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    95c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    95c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    95ca:	2d 96       	adiw	r28, 0x0d	; 13
    95cc:	0f b6       	in	r0, 0x3f	; 63
    95ce:	f8 94       	cli
    95d0:	de bf       	out	0x3e, r29	; 62
    95d2:	0f be       	out	0x3f, r0	; 63
    95d4:	cd bf       	out	0x3d, r28	; 61
    95d6:	cf 91       	pop	r28
    95d8:	df 91       	pop	r29
    95da:	08 95       	ret

000095dc <_ZN6Stream14readBytesUntilEcPcj>:

// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
    95dc:	df 93       	push	r29
    95de:	cf 93       	push	r28
    95e0:	cd b7       	in	r28, 0x3d	; 61
    95e2:	de b7       	in	r29, 0x3e	; 62
    95e4:	2d 97       	sbiw	r28, 0x0d	; 13
    95e6:	0f b6       	in	r0, 0x3f	; 63
    95e8:	f8 94       	cli
    95ea:	de bf       	out	0x3e, r29	; 62
    95ec:	0f be       	out	0x3f, r0	; 63
    95ee:	cd bf       	out	0x3d, r28	; 61
    95f0:	9e 83       	std	Y+6, r25	; 0x06
    95f2:	8d 83       	std	Y+5, r24	; 0x05
    95f4:	6f 83       	std	Y+7, r22	; 0x07
    95f6:	59 87       	std	Y+9, r21	; 0x09
    95f8:	48 87       	std	Y+8, r20	; 0x08
    95fa:	3b 87       	std	Y+11, r19	; 0x0b
    95fc:	2a 87       	std	Y+10, r18	; 0x0a
{
  if (length < 1) return 0;
    95fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    9600:	9b 85       	ldd	r25, Y+11	; 0x0b
    9602:	00 97       	sbiw	r24, 0x00	; 0
    9604:	19 f4       	brne	.+6      	; 0x960c <_ZN6Stream14readBytesUntilEcPcj+0x30>
    9606:	1d 86       	std	Y+13, r1	; 0x0d
    9608:	1c 86       	std	Y+12, r1	; 0x0c
    960a:	2e c0       	rjmp	.+92     	; 0x9668 <_ZN6Stream14readBytesUntilEcPcj+0x8c>
  size_t index = 0;
    960c:	1c 82       	std	Y+4, r1	; 0x04
    960e:	1b 82       	std	Y+3, r1	; 0x03
    9610:	20 c0       	rjmp	.+64     	; 0x9652 <_ZN6Stream14readBytesUntilEcPcj+0x76>
  while (index < length) {
    int c = timedRead();
    9612:	8d 81       	ldd	r24, Y+5	; 0x05
    9614:	9e 81       	ldd	r25, Y+6	; 0x06
    9616:	0e 94 18 4a 	call	0x9430	; 0x9430 <_ZN6Stream9timedReadEv>
    961a:	9a 83       	std	Y+2, r25	; 0x02
    961c:	89 83       	std	Y+1, r24	; 0x01
    if (c < 0 || c == terminator) break;
    961e:	89 81       	ldd	r24, Y+1	; 0x01
    9620:	9a 81       	ldd	r25, Y+2	; 0x02
    9622:	99 23       	and	r25, r25
    9624:	ec f0       	brlt	.+58     	; 0x9660 <_ZN6Stream14readBytesUntilEcPcj+0x84>
    9626:	8f 81       	ldd	r24, Y+7	; 0x07
    9628:	28 2f       	mov	r18, r24
    962a:	30 e0       	ldi	r19, 0x00	; 0
    962c:	89 81       	ldd	r24, Y+1	; 0x01
    962e:	9a 81       	ldd	r25, Y+2	; 0x02
    9630:	28 17       	cp	r18, r24
    9632:	39 07       	cpc	r19, r25
    9634:	a9 f0       	breq	.+42     	; 0x9660 <_ZN6Stream14readBytesUntilEcPcj+0x84>
    *buffer++ = (char)c;
    9636:	89 81       	ldd	r24, Y+1	; 0x01
    9638:	e8 85       	ldd	r30, Y+8	; 0x08
    963a:	f9 85       	ldd	r31, Y+9	; 0x09
    963c:	80 83       	st	Z, r24
    963e:	88 85       	ldd	r24, Y+8	; 0x08
    9640:	99 85       	ldd	r25, Y+9	; 0x09
    9642:	01 96       	adiw	r24, 0x01	; 1
    9644:	99 87       	std	Y+9, r25	; 0x09
    9646:	88 87       	std	Y+8, r24	; 0x08
    index++;
    9648:	8b 81       	ldd	r24, Y+3	; 0x03
    964a:	9c 81       	ldd	r25, Y+4	; 0x04
    964c:	01 96       	adiw	r24, 0x01	; 1
    964e:	9c 83       	std	Y+4, r25	; 0x04
    9650:	8b 83       	std	Y+3, r24	; 0x03

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    9652:	2b 81       	ldd	r18, Y+3	; 0x03
    9654:	3c 81       	ldd	r19, Y+4	; 0x04
    9656:	8a 85       	ldd	r24, Y+10	; 0x0a
    9658:	9b 85       	ldd	r25, Y+11	; 0x0b
    965a:	28 17       	cp	r18, r24
    965c:	39 07       	cpc	r19, r25
    965e:	c8 f2       	brcs	.-78     	; 0x9612 <_ZN6Stream14readBytesUntilEcPcj+0x36>
    int c = timedRead();
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
    9660:	8b 81       	ldd	r24, Y+3	; 0x03
    9662:	9c 81       	ldd	r25, Y+4	; 0x04
    9664:	9d 87       	std	Y+13, r25	; 0x0d
    9666:	8c 87       	std	Y+12, r24	; 0x0c
    9668:	8c 85       	ldd	r24, Y+12	; 0x0c
    966a:	9d 85       	ldd	r25, Y+13	; 0x0d
}
    966c:	2d 96       	adiw	r28, 0x0d	; 13
    966e:	0f b6       	in	r0, 0x3f	; 63
    9670:	f8 94       	cli
    9672:	de bf       	out	0x3e, r29	; 62
    9674:	0f be       	out	0x3f, r0	; 63
    9676:	cd bf       	out	0x3d, r28	; 61
    9678:	cf 91       	pop	r28
    967a:	df 91       	pop	r29
    967c:	08 95       	ret

0000967e <_ZN6Stream9readBytesEPcj>:
// read characters from stream into buffer
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
    967e:	df 93       	push	r29
    9680:	cf 93       	push	r28
    9682:	cd b7       	in	r28, 0x3d	; 61
    9684:	de b7       	in	r29, 0x3e	; 62
    9686:	2a 97       	sbiw	r28, 0x0a	; 10
    9688:	0f b6       	in	r0, 0x3f	; 63
    968a:	f8 94       	cli
    968c:	de bf       	out	0x3e, r29	; 62
    968e:	0f be       	out	0x3f, r0	; 63
    9690:	cd bf       	out	0x3d, r28	; 61
    9692:	9e 83       	std	Y+6, r25	; 0x06
    9694:	8d 83       	std	Y+5, r24	; 0x05
    9696:	78 87       	std	Y+8, r23	; 0x08
    9698:	6f 83       	std	Y+7, r22	; 0x07
    969a:	5a 87       	std	Y+10, r21	; 0x0a
    969c:	49 87       	std	Y+9, r20	; 0x09
{
  size_t count = 0;
    969e:	1c 82       	std	Y+4, r1	; 0x04
    96a0:	1b 82       	std	Y+3, r1	; 0x03
    96a2:	18 c0       	rjmp	.+48     	; 0x96d4 <_ZN6Stream9readBytesEPcj+0x56>
  while (count < length) {
    int c = timedRead();
    96a4:	8d 81       	ldd	r24, Y+5	; 0x05
    96a6:	9e 81       	ldd	r25, Y+6	; 0x06
    96a8:	0e 94 18 4a 	call	0x9430	; 0x9430 <_ZN6Stream9timedReadEv>
    96ac:	9a 83       	std	Y+2, r25	; 0x02
    96ae:	89 83       	std	Y+1, r24	; 0x01
    if (c < 0) break;
    96b0:	89 81       	ldd	r24, Y+1	; 0x01
    96b2:	9a 81       	ldd	r25, Y+2	; 0x02
    96b4:	99 23       	and	r25, r25
    96b6:	ac f0       	brlt	.+42     	; 0x96e2 <_ZN6Stream9readBytesEPcj+0x64>
    *buffer++ = (char)c;
    96b8:	89 81       	ldd	r24, Y+1	; 0x01
    96ba:	ef 81       	ldd	r30, Y+7	; 0x07
    96bc:	f8 85       	ldd	r31, Y+8	; 0x08
    96be:	80 83       	st	Z, r24
    96c0:	8f 81       	ldd	r24, Y+7	; 0x07
    96c2:	98 85       	ldd	r25, Y+8	; 0x08
    96c4:	01 96       	adiw	r24, 0x01	; 1
    96c6:	98 87       	std	Y+8, r25	; 0x08
    96c8:	8f 83       	std	Y+7, r24	; 0x07
    count++;
    96ca:	8b 81       	ldd	r24, Y+3	; 0x03
    96cc:	9c 81       	ldd	r25, Y+4	; 0x04
    96ce:	01 96       	adiw	r24, 0x01	; 1
    96d0:	9c 83       	std	Y+4, r25	; 0x04
    96d2:	8b 83       	std	Y+3, r24	; 0x03
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    96d4:	2b 81       	ldd	r18, Y+3	; 0x03
    96d6:	3c 81       	ldd	r19, Y+4	; 0x04
    96d8:	89 85       	ldd	r24, Y+9	; 0x09
    96da:	9a 85       	ldd	r25, Y+10	; 0x0a
    96dc:	28 17       	cp	r18, r24
    96de:	39 07       	cpc	r19, r25
    96e0:	08 f3       	brcs	.-62     	; 0x96a4 <_ZN6Stream9readBytesEPcj+0x26>
    int c = timedRead();
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
    96e2:	8b 81       	ldd	r24, Y+3	; 0x03
    96e4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    96e6:	2a 96       	adiw	r28, 0x0a	; 10
    96e8:	0f b6       	in	r0, 0x3f	; 63
    96ea:	f8 94       	cli
    96ec:	de bf       	out	0x3e, r29	; 62
    96ee:	0f be       	out	0x3f, r0	; 63
    96f0:	cd bf       	out	0x3d, r28	; 61
    96f2:	cf 91       	pop	r28
    96f4:	df 91       	pop	r29
    96f6:	08 95       	ret

000096f8 <_ZN6Stream9findUntilEPcjS0_j>:
}

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
    96f8:	0f 93       	push	r16
    96fa:	1f 93       	push	r17
    96fc:	df 93       	push	r29
    96fe:	cf 93       	push	r28
    9700:	cd b7       	in	r28, 0x3d	; 61
    9702:	de b7       	in	r29, 0x3e	; 62
    9704:	64 97       	sbiw	r28, 0x14	; 20
    9706:	0f b6       	in	r0, 0x3f	; 63
    9708:	f8 94       	cli
    970a:	de bf       	out	0x3e, r29	; 62
    970c:	0f be       	out	0x3f, r0	; 63
    970e:	cd bf       	out	0x3d, r28	; 61
    9710:	98 87       	std	Y+8, r25	; 0x08
    9712:	8f 83       	std	Y+7, r24	; 0x07
    9714:	7a 87       	std	Y+10, r23	; 0x0a
    9716:	69 87       	std	Y+9, r22	; 0x09
    9718:	5c 87       	std	Y+12, r21	; 0x0c
    971a:	4b 87       	std	Y+11, r20	; 0x0b
    971c:	3e 87       	std	Y+14, r19	; 0x0e
    971e:	2d 87       	std	Y+13, r18	; 0x0d
    9720:	18 8b       	std	Y+16, r17	; 0x10
    9722:	0f 87       	std	Y+15, r16	; 0x0f
{
  size_t index = 0;  // maximum target string length is 64k bytes!
    9724:	1e 82       	std	Y+6, r1	; 0x06
    9726:	1d 82       	std	Y+5, r1	; 0x05
  size_t termIndex = 0;
    9728:	1c 82       	std	Y+4, r1	; 0x04
    972a:	1b 82       	std	Y+3, r1	; 0x03
  int c;
  
  if( *target == 0)
    972c:	e9 85       	ldd	r30, Y+9	; 0x09
    972e:	fa 85       	ldd	r31, Y+10	; 0x0a
    9730:	80 81       	ld	r24, Z
    9732:	88 23       	and	r24, r24
    9734:	09 f0       	breq	.+2      	; 0x9738 <_ZN6Stream9findUntilEPcjS0_j+0x40>
    9736:	61 c0       	rjmp	.+194    	; 0x97fa <_ZN6Stream9findUntilEPcjS0_j+0x102>
    return true;   // return true if target is a null string
    9738:	81 e0       	ldi	r24, 0x01	; 1
    973a:	8c 8b       	std	Y+20, r24	; 0x14
    973c:	71 c0       	rjmp	.+226    	; 0x9820 <_ZN6Stream9findUntilEPcjS0_j+0x128>
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
    973e:	29 85       	ldd	r18, Y+9	; 0x09
    9740:	3a 85       	ldd	r19, Y+10	; 0x0a
    9742:	8d 81       	ldd	r24, Y+5	; 0x05
    9744:	9e 81       	ldd	r25, Y+6	; 0x06
    9746:	f9 01       	movw	r30, r18
    9748:	e8 0f       	add	r30, r24
    974a:	f9 1f       	adc	r31, r25
    974c:	80 81       	ld	r24, Z
    974e:	28 2f       	mov	r18, r24
    9750:	30 e0       	ldi	r19, 0x00	; 0
    9752:	89 81       	ldd	r24, Y+1	; 0x01
    9754:	9a 81       	ldd	r25, Y+2	; 0x02
    9756:	28 17       	cp	r18, r24
    9758:	39 07       	cpc	r19, r25
    975a:	11 f0       	breq	.+4      	; 0x9760 <_ZN6Stream9findUntilEPcjS0_j+0x68>
      index = 0; // reset index if any char does not match
    975c:	1e 82       	std	Y+6, r1	; 0x06
    975e:	1d 82       	std	Y+5, r1	; 0x05
    
    if( c == target[index]){
    9760:	29 85       	ldd	r18, Y+9	; 0x09
    9762:	3a 85       	ldd	r19, Y+10	; 0x0a
    9764:	8d 81       	ldd	r24, Y+5	; 0x05
    9766:	9e 81       	ldd	r25, Y+6	; 0x06
    9768:	f9 01       	movw	r30, r18
    976a:	e8 0f       	add	r30, r24
    976c:	f9 1f       	adc	r31, r25
    976e:	80 81       	ld	r24, Z
    9770:	28 2f       	mov	r18, r24
    9772:	30 e0       	ldi	r19, 0x00	; 0
    9774:	89 81       	ldd	r24, Y+1	; 0x01
    9776:	9a 81       	ldd	r25, Y+2	; 0x02
    9778:	28 17       	cp	r18, r24
    977a:	39 07       	cpc	r19, r25
    977c:	a9 f4       	brne	.+42     	; 0x97a8 <_ZN6Stream9findUntilEPcjS0_j+0xb0>
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
    977e:	8d 81       	ldd	r24, Y+5	; 0x05
    9780:	9e 81       	ldd	r25, Y+6	; 0x06
    9782:	01 96       	adiw	r24, 0x01	; 1
    9784:	9e 83       	std	Y+6, r25	; 0x06
    9786:	8d 83       	std	Y+5, r24	; 0x05
    9788:	1a 8a       	std	Y+18, r1	; 0x12
    978a:	2d 81       	ldd	r18, Y+5	; 0x05
    978c:	3e 81       	ldd	r19, Y+6	; 0x06
    978e:	8b 85       	ldd	r24, Y+11	; 0x0b
    9790:	9c 85       	ldd	r25, Y+12	; 0x0c
    9792:	28 17       	cp	r18, r24
    9794:	39 07       	cpc	r19, r25
    9796:	10 f0       	brcs	.+4      	; 0x979c <_ZN6Stream9findUntilEPcjS0_j+0xa4>
    9798:	81 e0       	ldi	r24, 0x01	; 1
    979a:	8a 8b       	std	Y+18, r24	; 0x12
    979c:	8a 89       	ldd	r24, Y+18	; 0x12
    979e:	88 23       	and	r24, r24
    97a0:	19 f0       	breq	.+6      	; 0x97a8 <_ZN6Stream9findUntilEPcjS0_j+0xb0>
        return true;
    97a2:	81 e0       	ldi	r24, 0x01	; 1
    97a4:	8c 8b       	std	Y+20, r24	; 0x14
    97a6:	3c c0       	rjmp	.+120    	; 0x9820 <_ZN6Stream9findUntilEPcjS0_j+0x128>
      }
    }
    
    if(termLen > 0 && c == terminator[termIndex]){
    97a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    97aa:	98 89       	ldd	r25, Y+16	; 0x10
    97ac:	00 97       	sbiw	r24, 0x00	; 0
    97ae:	19 f1       	breq	.+70     	; 0x97f6 <_ZN6Stream9findUntilEPcjS0_j+0xfe>
    97b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    97b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    97b4:	8b 81       	ldd	r24, Y+3	; 0x03
    97b6:	9c 81       	ldd	r25, Y+4	; 0x04
    97b8:	f9 01       	movw	r30, r18
    97ba:	e8 0f       	add	r30, r24
    97bc:	f9 1f       	adc	r31, r25
    97be:	80 81       	ld	r24, Z
    97c0:	28 2f       	mov	r18, r24
    97c2:	30 e0       	ldi	r19, 0x00	; 0
    97c4:	89 81       	ldd	r24, Y+1	; 0x01
    97c6:	9a 81       	ldd	r25, Y+2	; 0x02
    97c8:	28 17       	cp	r18, r24
    97ca:	39 07       	cpc	r19, r25
    97cc:	a1 f4       	brne	.+40     	; 0x97f6 <_ZN6Stream9findUntilEPcjS0_j+0xfe>
      if(++termIndex >= termLen)
    97ce:	8b 81       	ldd	r24, Y+3	; 0x03
    97d0:	9c 81       	ldd	r25, Y+4	; 0x04
    97d2:	01 96       	adiw	r24, 0x01	; 1
    97d4:	9c 83       	std	Y+4, r25	; 0x04
    97d6:	8b 83       	std	Y+3, r24	; 0x03
    97d8:	19 8a       	std	Y+17, r1	; 0x11
    97da:	2b 81       	ldd	r18, Y+3	; 0x03
    97dc:	3c 81       	ldd	r19, Y+4	; 0x04
    97de:	8f 85       	ldd	r24, Y+15	; 0x0f
    97e0:	98 89       	ldd	r25, Y+16	; 0x10
    97e2:	28 17       	cp	r18, r24
    97e4:	39 07       	cpc	r19, r25
    97e6:	10 f0       	brcs	.+4      	; 0x97ec <_ZN6Stream9findUntilEPcjS0_j+0xf4>
    97e8:	81 e0       	ldi	r24, 0x01	; 1
    97ea:	89 8b       	std	Y+17, r24	; 0x11
    97ec:	89 89       	ldd	r24, Y+17	; 0x11
    97ee:	88 23       	and	r24, r24
    97f0:	21 f0       	breq	.+8      	; 0x97fa <_ZN6Stream9findUntilEPcjS0_j+0x102>
        return false;       // return false if terminate string found before target string
    97f2:	1c 8a       	std	Y+20, r1	; 0x14
    97f4:	15 c0       	rjmp	.+42     	; 0x9820 <_ZN6Stream9findUntilEPcjS0_j+0x128>
    }
    else
      termIndex = 0;
    97f6:	1c 82       	std	Y+4, r1	; 0x04
    97f8:	1b 82       	std	Y+3, r1	; 0x03
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    97fa:	8f 81       	ldd	r24, Y+7	; 0x07
    97fc:	98 85       	ldd	r25, Y+8	; 0x08
    97fe:	0e 94 18 4a 	call	0x9430	; 0x9430 <_ZN6Stream9timedReadEv>
    9802:	9a 83       	std	Y+2, r25	; 0x02
    9804:	89 83       	std	Y+1, r24	; 0x01
    9806:	1b 8a       	std	Y+19, r1	; 0x13
    9808:	89 81       	ldd	r24, Y+1	; 0x01
    980a:	9a 81       	ldd	r25, Y+2	; 0x02
    980c:	18 16       	cp	r1, r24
    980e:	19 06       	cpc	r1, r25
    9810:	14 f4       	brge	.+4      	; 0x9816 <_ZN6Stream9findUntilEPcjS0_j+0x11e>
    9812:	81 e0       	ldi	r24, 0x01	; 1
    9814:	8b 8b       	std	Y+19, r24	; 0x13
    9816:	8b 89       	ldd	r24, Y+19	; 0x13
    9818:	88 23       	and	r24, r24
    981a:	09 f0       	breq	.+2      	; 0x981e <_ZN6Stream9findUntilEPcjS0_j+0x126>
    981c:	90 cf       	rjmp	.-224    	; 0x973e <_ZN6Stream9findUntilEPcjS0_j+0x46>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
  }
  return false;
    981e:	1c 8a       	std	Y+20, r1	; 0x14
    9820:	8c 89       	ldd	r24, Y+20	; 0x14
}
    9822:	64 96       	adiw	r28, 0x14	; 20
    9824:	0f b6       	in	r0, 0x3f	; 63
    9826:	f8 94       	cli
    9828:	de bf       	out	0x3e, r29	; 62
    982a:	0f be       	out	0x3f, r0	; 63
    982c:	cd bf       	out	0x3d, r28	; 61
    982e:	cf 91       	pop	r28
    9830:	df 91       	pop	r29
    9832:	1f 91       	pop	r17
    9834:	0f 91       	pop	r16
    9836:	08 95       	ret

00009838 <_ZN6Stream9findUntilEPcS0_>:
{
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
    9838:	0f 93       	push	r16
    983a:	1f 93       	push	r17
    983c:	df 93       	push	r29
    983e:	cf 93       	push	r28
    9840:	00 d0       	rcall	.+0      	; 0x9842 <_ZN6Stream9findUntilEPcS0_+0xa>
    9842:	00 d0       	rcall	.+0      	; 0x9844 <_ZN6Stream9findUntilEPcS0_+0xc>
    9844:	00 d0       	rcall	.+0      	; 0x9846 <_ZN6Stream9findUntilEPcS0_+0xe>
    9846:	cd b7       	in	r28, 0x3d	; 61
    9848:	de b7       	in	r29, 0x3e	; 62
    984a:	9a 83       	std	Y+2, r25	; 0x02
    984c:	89 83       	std	Y+1, r24	; 0x01
    984e:	7c 83       	std	Y+4, r23	; 0x04
    9850:	6b 83       	std	Y+3, r22	; 0x03
    9852:	5e 83       	std	Y+6, r21	; 0x06
    9854:	4d 83       	std	Y+5, r20	; 0x05
{
  return findUntil(target, strlen(target), terminator, strlen(terminator));
    9856:	8b 81       	ldd	r24, Y+3	; 0x03
    9858:	9c 81       	ldd	r25, Y+4	; 0x04
    985a:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    985e:	8c 01       	movw	r16, r24
    9860:	8d 81       	ldd	r24, Y+5	; 0x05
    9862:	9e 81       	ldd	r25, Y+6	; 0x06
    9864:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    9868:	dc 01       	movw	r26, r24
    986a:	89 81       	ldd	r24, Y+1	; 0x01
    986c:	9a 81       	ldd	r25, Y+2	; 0x02
    986e:	2b 81       	ldd	r18, Y+3	; 0x03
    9870:	3c 81       	ldd	r19, Y+4	; 0x04
    9872:	ed 81       	ldd	r30, Y+5	; 0x05
    9874:	fe 81       	ldd	r31, Y+6	; 0x06
    9876:	b9 01       	movw	r22, r18
    9878:	a8 01       	movw	r20, r16
    987a:	9f 01       	movw	r18, r30
    987c:	8d 01       	movw	r16, r26
    987e:	0e 94 7c 4b 	call	0x96f8	; 0x96f8 <_ZN6Stream9findUntilEPcjS0_j>
}
    9882:	26 96       	adiw	r28, 0x06	; 6
    9884:	0f b6       	in	r0, 0x3f	; 63
    9886:	f8 94       	cli
    9888:	de bf       	out	0x3e, r29	; 62
    988a:	0f be       	out	0x3f, r0	; 63
    988c:	cd bf       	out	0x3d, r28	; 61
    988e:	cf 91       	pop	r28
    9890:	df 91       	pop	r29
    9892:	1f 91       	pop	r17
    9894:	0f 91       	pop	r16
    9896:	08 95       	ret

00009898 <_ZN6Stream4findEPc>:
{
  _timeout = timeout;
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
    9898:	df 93       	push	r29
    989a:	cf 93       	push	r28
    989c:	00 d0       	rcall	.+0      	; 0x989e <_ZN6Stream4findEPc+0x6>
    989e:	00 d0       	rcall	.+0      	; 0x98a0 <_ZN6Stream4findEPc+0x8>
    98a0:	cd b7       	in	r28, 0x3d	; 61
    98a2:	de b7       	in	r29, 0x3e	; 62
    98a4:	9a 83       	std	Y+2, r25	; 0x02
    98a6:	89 83       	std	Y+1, r24	; 0x01
    98a8:	7c 83       	std	Y+4, r23	; 0x04
    98aa:	6b 83       	std	Y+3, r22	; 0x03
{
  return findUntil(target, NULL);
    98ac:	89 81       	ldd	r24, Y+1	; 0x01
    98ae:	9a 81       	ldd	r25, Y+2	; 0x02
    98b0:	2b 81       	ldd	r18, Y+3	; 0x03
    98b2:	3c 81       	ldd	r19, Y+4	; 0x04
    98b4:	b9 01       	movw	r22, r18
    98b6:	40 e0       	ldi	r20, 0x00	; 0
    98b8:	50 e0       	ldi	r21, 0x00	; 0
    98ba:	0e 94 1c 4c 	call	0x9838	; 0x9838 <_ZN6Stream9findUntilEPcS0_>
}
    98be:	0f 90       	pop	r0
    98c0:	0f 90       	pop	r0
    98c2:	0f 90       	pop	r0
    98c4:	0f 90       	pop	r0
    98c6:	cf 91       	pop	r28
    98c8:	df 91       	pop	r29
    98ca:	08 95       	ret

000098cc <_ZN6Stream4findEPcj>:

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
    98cc:	0f 93       	push	r16
    98ce:	1f 93       	push	r17
    98d0:	df 93       	push	r29
    98d2:	cf 93       	push	r28
    98d4:	00 d0       	rcall	.+0      	; 0x98d6 <_ZN6Stream4findEPcj+0xa>
    98d6:	00 d0       	rcall	.+0      	; 0x98d8 <_ZN6Stream4findEPcj+0xc>
    98d8:	00 d0       	rcall	.+0      	; 0x98da <_ZN6Stream4findEPcj+0xe>
    98da:	cd b7       	in	r28, 0x3d	; 61
    98dc:	de b7       	in	r29, 0x3e	; 62
    98de:	9a 83       	std	Y+2, r25	; 0x02
    98e0:	89 83       	std	Y+1, r24	; 0x01
    98e2:	7c 83       	std	Y+4, r23	; 0x04
    98e4:	6b 83       	std	Y+3, r22	; 0x03
    98e6:	5e 83       	std	Y+6, r21	; 0x06
    98e8:	4d 83       	std	Y+5, r20	; 0x05
{
  return findUntil(target, length, NULL, 0);
    98ea:	89 81       	ldd	r24, Y+1	; 0x01
    98ec:	9a 81       	ldd	r25, Y+2	; 0x02
    98ee:	2b 81       	ldd	r18, Y+3	; 0x03
    98f0:	3c 81       	ldd	r19, Y+4	; 0x04
    98f2:	4d 81       	ldd	r20, Y+5	; 0x05
    98f4:	5e 81       	ldd	r21, Y+6	; 0x06
    98f6:	b9 01       	movw	r22, r18
    98f8:	20 e0       	ldi	r18, 0x00	; 0
    98fa:	30 e0       	ldi	r19, 0x00	; 0
    98fc:	00 e0       	ldi	r16, 0x00	; 0
    98fe:	10 e0       	ldi	r17, 0x00	; 0
    9900:	0e 94 7c 4b 	call	0x96f8	; 0x96f8 <_ZN6Stream9findUntilEPcjS0_j>
}
    9904:	26 96       	adiw	r28, 0x06	; 6
    9906:	0f b6       	in	r0, 0x3f	; 63
    9908:	f8 94       	cli
    990a:	de bf       	out	0x3e, r29	; 62
    990c:	0f be       	out	0x3f, r0	; 63
    990e:	cd bf       	out	0x3d, r28	; 61
    9910:	cf 91       	pop	r28
    9912:	df 91       	pop	r29
    9914:	1f 91       	pop	r17
    9916:	0f 91       	pop	r16
    9918:	08 95       	ret

0000991a <_ZL9toneBeginh>:

#endif



static int8_t toneBegin(uint8_t _pin)
    991a:	df 93       	push	r29
    991c:	cf 93       	push	r28
    991e:	cd b7       	in	r28, 0x3d	; 61
    9920:	de b7       	in	r29, 0x3e	; 62
    9922:	67 97       	sbiw	r28, 0x17	; 23
    9924:	0f b6       	in	r0, 0x3f	; 63
    9926:	f8 94       	cli
    9928:	de bf       	out	0x3e, r29	; 62
    992a:	0f be       	out	0x3f, r0	; 63
    992c:	cd bf       	out	0x3d, r28	; 61
    992e:	8e 8b       	std	Y+22, r24	; 0x16
{
  int8_t _timer = -1;
    9930:	8f ef       	ldi	r24, 0xFF	; 255
    9932:	8d 8b       	std	Y+21, r24	; 0x15

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    9934:	1c 8a       	std	Y+20, r1	; 0x14
    9936:	1b 8a       	std	Y+19, r1	; 0x13
    9938:	1b c0       	rjmp	.+54     	; 0x9970 <_ZL9toneBeginh+0x56>
    if (tone_pins[i] == _pin) {
    993a:	8b 89       	ldd	r24, Y+19	; 0x13
    993c:	9c 89       	ldd	r25, Y+20	; 0x14
    993e:	fc 01       	movw	r30, r24
    9940:	eb 53       	subi	r30, 0x3B	; 59
    9942:	ff 4f       	sbci	r31, 0xFF	; 255
    9944:	90 81       	ld	r25, Z
    9946:	8e 89       	ldd	r24, Y+22	; 0x16
    9948:	98 17       	cp	r25, r24
    994a:	69 f4       	brne	.+26     	; 0x9966 <_ZL9toneBeginh+0x4c>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    994c:	8b 89       	ldd	r24, Y+19	; 0x13
    994e:	9c 89       	ldd	r25, Y+20	; 0x14
    9950:	8c 59       	subi	r24, 0x9C	; 156
    9952:	9f 4f       	sbci	r25, 0xFF	; 255
    9954:	9a 8b       	std	Y+18, r25	; 0x12
    9956:	89 8b       	std	Y+17, r24	; 0x11
    9958:	e9 89       	ldd	r30, Y+17	; 0x11
    995a:	fa 89       	ldd	r31, Y+18	; 0x12
    995c:	84 91       	lpm	r24, Z+
    995e:	88 8b       	std	Y+16, r24	; 0x10
    9960:	88 89       	ldd	r24, Y+16	; 0x10
    9962:	8f 8b       	std	Y+23, r24	; 0x17
    9964:	82 c0       	rjmp	.+260    	; 0x9a6a <_ZL9toneBeginh+0x150>
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    9966:	8b 89       	ldd	r24, Y+19	; 0x13
    9968:	9c 89       	ldd	r25, Y+20	; 0x14
    996a:	01 96       	adiw	r24, 0x01	; 1
    996c:	9c 8b       	std	Y+20, r25	; 0x14
    996e:	8b 8b       	std	Y+19, r24	; 0x13
    9970:	8b 89       	ldd	r24, Y+19	; 0x13
    9972:	9c 89       	ldd	r25, Y+20	; 0x14
    9974:	18 16       	cp	r1, r24
    9976:	19 06       	cpc	r1, r25
    9978:	04 f7       	brge	.-64     	; 0x993a <_ZL9toneBeginh+0x20>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    997a:	1f 86       	std	Y+15, r1	; 0x0f
    997c:	1e 86       	std	Y+14, r1	; 0x0e
    997e:	21 c0       	rjmp	.+66     	; 0x99c2 <_ZL9toneBeginh+0xa8>
    if (tone_pins[i] == 255) {
    9980:	8e 85       	ldd	r24, Y+14	; 0x0e
    9982:	9f 85       	ldd	r25, Y+15	; 0x0f
    9984:	fc 01       	movw	r30, r24
    9986:	eb 53       	subi	r30, 0x3B	; 59
    9988:	ff 4f       	sbci	r31, 0xFF	; 255
    998a:	80 81       	ld	r24, Z
    998c:	8f 3f       	cpi	r24, 0xFF	; 255
    998e:	a1 f4       	brne	.+40     	; 0x99b8 <_ZL9toneBeginh+0x9e>
      tone_pins[i] = _pin;
    9990:	8e 85       	ldd	r24, Y+14	; 0x0e
    9992:	9f 85       	ldd	r25, Y+15	; 0x0f
    9994:	fc 01       	movw	r30, r24
    9996:	eb 53       	subi	r30, 0x3B	; 59
    9998:	ff 4f       	sbci	r31, 0xFF	; 255
    999a:	8e 89       	ldd	r24, Y+22	; 0x16
    999c:	80 83       	st	Z, r24
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    999e:	8e 85       	ldd	r24, Y+14	; 0x0e
    99a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    99a2:	8c 59       	subi	r24, 0x9C	; 156
    99a4:	9f 4f       	sbci	r25, 0xFF	; 255
    99a6:	9d 87       	std	Y+13, r25	; 0x0d
    99a8:	8c 87       	std	Y+12, r24	; 0x0c
    99aa:	ec 85       	ldd	r30, Y+12	; 0x0c
    99ac:	fd 85       	ldd	r31, Y+13	; 0x0d
    99ae:	84 91       	lpm	r24, Z+
    99b0:	8b 87       	std	Y+11, r24	; 0x0b
    99b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    99b4:	8d 8b       	std	Y+21, r24	; 0x15
    99b6:	0a c0       	rjmp	.+20     	; 0x99cc <_ZL9toneBeginh+0xb2>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    99b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    99ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    99bc:	01 96       	adiw	r24, 0x01	; 1
    99be:	9f 87       	std	Y+15, r25	; 0x0f
    99c0:	8e 87       	std	Y+14, r24	; 0x0e
    99c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    99c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    99c6:	18 16       	cp	r1, r24
    99c8:	19 06       	cpc	r1, r25
    99ca:	d4 f6       	brge	.-76     	; 0x9980 <_ZL9toneBeginh+0x66>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      break;
    }
  }
  
  if (_timer != -1)
    99cc:	8d 89       	ldd	r24, Y+21	; 0x15
    99ce:	8f 3f       	cpi	r24, 0xFF	; 255
    99d0:	09 f4       	brne	.+2      	; 0x99d4 <_ZL9toneBeginh+0xba>
    99d2:	49 c0       	rjmp	.+146    	; 0x9a66 <_ZL9toneBeginh+0x14c>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    99d4:	8d 89       	ldd	r24, Y+21	; 0x15
    99d6:	81 30       	cpi	r24, 0x01	; 1
    99d8:	09 f0       	breq	.+2      	; 0x99dc <_ZL9toneBeginh+0xc2>
    99da:	45 c0       	rjmp	.+138    	; 0x9a66 <_ZL9toneBeginh+0x14c>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    99dc:	ef e4       	ldi	r30, 0x4F	; 79
    99de:	f0 e0       	ldi	r31, 0x00	; 0
    99e0:	10 82       	st	Z, r1
        TCCR1B = 0;
    99e2:	ee e4       	ldi	r30, 0x4E	; 78
    99e4:	f0 e0       	ldi	r31, 0x00	; 0
    99e6:	10 82       	st	Z, r1
        bitWrite(TCCR1B, WGM12, 1);
    99e8:	ae e4       	ldi	r26, 0x4E	; 78
    99ea:	b0 e0       	ldi	r27, 0x00	; 0
    99ec:	ee e4       	ldi	r30, 0x4E	; 78
    99ee:	f0 e0       	ldi	r31, 0x00	; 0
    99f0:	80 81       	ld	r24, Z
    99f2:	88 60       	ori	r24, 0x08	; 8
    99f4:	8c 93       	st	X, r24
        bitWrite(TCCR1B, CS10, 1);
    99f6:	ae e4       	ldi	r26, 0x4E	; 78
    99f8:	b0 e0       	ldi	r27, 0x00	; 0
    99fa:	ee e4       	ldi	r30, 0x4E	; 78
    99fc:	f0 e0       	ldi	r31, 0x00	; 0
    99fe:	80 81       	ld	r24, Z
    9a00:	81 60       	ori	r24, 0x01	; 1
    9a02:	8c 93       	st	X, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    9a04:	8e 89       	ldd	r24, Y+22	; 0x16
    9a06:	88 2f       	mov	r24, r24
    9a08:	90 e0       	ldi	r25, 0x00	; 0
    9a0a:	8d 57       	subi	r24, 0x7D	; 125
    9a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    9a0e:	9e 83       	std	Y+6, r25	; 0x06
    9a10:	8d 83       	std	Y+5, r24	; 0x05
    9a12:	ed 81       	ldd	r30, Y+5	; 0x05
    9a14:	fe 81       	ldd	r31, Y+6	; 0x06
    9a16:	84 91       	lpm	r24, Z+
    9a18:	8c 83       	std	Y+4, r24	; 0x04
    9a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    9a1c:	88 2f       	mov	r24, r24
    9a1e:	90 e0       	ldi	r25, 0x00	; 0
    9a20:	88 0f       	add	r24, r24
    9a22:	99 1f       	adc	r25, r25
    9a24:	81 59       	subi	r24, 0x91	; 145
    9a26:	9f 4f       	sbci	r25, 0xFF	; 255
    9a28:	9a 87       	std	Y+10, r25	; 0x0a
    9a2a:	89 87       	std	Y+9, r24	; 0x09
    9a2c:	89 85       	ldd	r24, Y+9	; 0x09
    9a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    9a30:	fc 01       	movw	r30, r24
    9a32:	85 91       	lpm	r24, Z+
    9a34:	94 91       	lpm	r25, Z+
    9a36:	98 87       	std	Y+8, r25	; 0x08
    9a38:	8f 83       	std	Y+7, r24	; 0x07
    9a3a:	fa 87       	std	Y+10, r31	; 0x0a
    9a3c:	e9 87       	std	Y+9, r30	; 0x09
    9a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    9a40:	98 85       	ldd	r25, Y+8	; 0x08
    9a42:	90 93 4d 06 	sts	0x064D, r25
    9a46:	80 93 4c 06 	sts	0x064C, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
    9a4a:	8e 89       	ldd	r24, Y+22	; 0x16
    9a4c:	88 2f       	mov	r24, r24
    9a4e:	90 e0       	ldi	r25, 0x00	; 0
    9a50:	89 56       	subi	r24, 0x69	; 105
    9a52:	9f 4f       	sbci	r25, 0xFF	; 255
    9a54:	9b 83       	std	Y+3, r25	; 0x03
    9a56:	8a 83       	std	Y+2, r24	; 0x02
    9a58:	ea 81       	ldd	r30, Y+2	; 0x02
    9a5a:	fb 81       	ldd	r31, Y+3	; 0x03
    9a5c:	84 91       	lpm	r24, Z+
    9a5e:	89 83       	std	Y+1, r24	; 0x01
    9a60:	89 81       	ldd	r24, Y+1	; 0x01
    9a62:	80 93 4e 06 	sts	0x064E, r24
        break;
      #endif
    }
  }

  return _timer;
    9a66:	8d 89       	ldd	r24, Y+21	; 0x15
    9a68:	8f 8b       	std	Y+23, r24	; 0x17
    9a6a:	8f 89       	ldd	r24, Y+23	; 0x17
}
    9a6c:	67 96       	adiw	r28, 0x17	; 23
    9a6e:	0f b6       	in	r0, 0x3f	; 63
    9a70:	f8 94       	cli
    9a72:	de bf       	out	0x3e, r29	; 62
    9a74:	0f be       	out	0x3f, r0	; 63
    9a76:	cd bf       	out	0x3d, r28	; 61
    9a78:	cf 91       	pop	r28
    9a7a:	df 91       	pop	r29
    9a7c:	08 95       	ret

00009a7e <_Z12disableTimerh>:


// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
    9a7e:	df 93       	push	r29
    9a80:	cf 93       	push	r28
    9a82:	0f 92       	push	r0
    9a84:	cd b7       	in	r28, 0x3d	; 61
    9a86:	de b7       	in	r29, 0x3e	; 62
    9a88:	89 83       	std	Y+1, r24	; 0x01
{
  switch (_timer)
    9a8a:	89 81       	ldd	r24, Y+1	; 0x01
    9a8c:	88 2f       	mov	r24, r24
    9a8e:	90 e0       	ldi	r25, 0x00	; 0
    9a90:	00 97       	sbiw	r24, 0x00	; 0
    9a92:	19 f4       	brne	.+6      	; 0x9a9a <_Z12disableTimerh+0x1c>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
    9a94:	e9 e5       	ldi	r30, 0x59	; 89
    9a96:	f0 e0       	ldi	r31, 0x00	; 0
    9a98:	10 82       	st	Z, r1
    case 5:
      TIMSK5 = 0;
      break;
#endif
  }
}
    9a9a:	0f 90       	pop	r0
    9a9c:	cf 91       	pop	r28
    9a9e:	df 91       	pop	r29
    9aa0:	08 95       	ret

00009aa2 <_Z6noToneh>:


void noTone(uint8_t _pin)
    9aa2:	df 93       	push	r29
    9aa4:	cf 93       	push	r28
    9aa6:	cd b7       	in	r28, 0x3d	; 61
    9aa8:	de b7       	in	r29, 0x3e	; 62
    9aaa:	27 97       	sbiw	r28, 0x07	; 7
    9aac:	0f b6       	in	r0, 0x3f	; 63
    9aae:	f8 94       	cli
    9ab0:	de bf       	out	0x3e, r29	; 62
    9ab2:	0f be       	out	0x3f, r0	; 63
    9ab4:	cd bf       	out	0x3d, r28	; 61
    9ab6:	8f 83       	std	Y+7, r24	; 0x07
{
  int8_t _timer = -1;
    9ab8:	8f ef       	ldi	r24, 0xFF	; 255
    9aba:	8e 83       	std	Y+6, r24	; 0x06
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    9abc:	1d 82       	std	Y+5, r1	; 0x05
    9abe:	1c 82       	std	Y+4, r1	; 0x04
    9ac0:	21 c0       	rjmp	.+66     	; 0x9b04 <_Z6noToneh+0x62>
    if (tone_pins[i] == _pin) {
    9ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    9ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    9ac6:	fc 01       	movw	r30, r24
    9ac8:	eb 53       	subi	r30, 0x3B	; 59
    9aca:	ff 4f       	sbci	r31, 0xFF	; 255
    9acc:	90 81       	ld	r25, Z
    9ace:	8f 81       	ldd	r24, Y+7	; 0x07
    9ad0:	98 17       	cp	r25, r24
    9ad2:	99 f4       	brne	.+38     	; 0x9afa <_Z6noToneh+0x58>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    9ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    9ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    9ad8:	8c 59       	subi	r24, 0x9C	; 156
    9ada:	9f 4f       	sbci	r25, 0xFF	; 255
    9adc:	9b 83       	std	Y+3, r25	; 0x03
    9ade:	8a 83       	std	Y+2, r24	; 0x02
    9ae0:	ea 81       	ldd	r30, Y+2	; 0x02
    9ae2:	fb 81       	ldd	r31, Y+3	; 0x03
    9ae4:	84 91       	lpm	r24, Z+
    9ae6:	89 83       	std	Y+1, r24	; 0x01
    9ae8:	89 81       	ldd	r24, Y+1	; 0x01
    9aea:	8e 83       	std	Y+6, r24	; 0x06
      tone_pins[i] = 255;
    9aec:	8c 81       	ldd	r24, Y+4	; 0x04
    9aee:	9d 81       	ldd	r25, Y+5	; 0x05
    9af0:	fc 01       	movw	r30, r24
    9af2:	eb 53       	subi	r30, 0x3B	; 59
    9af4:	ff 4f       	sbci	r31, 0xFF	; 255
    9af6:	8f ef       	ldi	r24, 0xFF	; 255
    9af8:	80 83       	st	Z, r24

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    9afa:	8c 81       	ldd	r24, Y+4	; 0x04
    9afc:	9d 81       	ldd	r25, Y+5	; 0x05
    9afe:	01 96       	adiw	r24, 0x01	; 1
    9b00:	9d 83       	std	Y+5, r25	; 0x05
    9b02:	8c 83       	std	Y+4, r24	; 0x04
    9b04:	8c 81       	ldd	r24, Y+4	; 0x04
    9b06:	9d 81       	ldd	r25, Y+5	; 0x05
    9b08:	18 16       	cp	r1, r24
    9b0a:	19 06       	cpc	r1, r25
    9b0c:	d4 f6       	brge	.-76     	; 0x9ac2 <_Z6noToneh+0x20>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
    9b0e:	8e 81       	ldd	r24, Y+6	; 0x06
    9b10:	0e 94 3f 4d 	call	0x9a7e	; 0x9a7e <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    9b14:	8f 81       	ldd	r24, Y+7	; 0x07
    9b16:	60 e0       	ldi	r22, 0x00	; 0
    9b18:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
}
    9b1c:	27 96       	adiw	r28, 0x07	; 7
    9b1e:	0f b6       	in	r0, 0x3f	; 63
    9b20:	f8 94       	cli
    9b22:	de bf       	out	0x3e, r29	; 62
    9b24:	0f be       	out	0x3f, r0	; 63
    9b26:	cd bf       	out	0x3d, r28	; 61
    9b28:	cf 91       	pop	r28
    9b2a:	df 91       	pop	r29
    9b2c:	08 95       	ret

00009b2e <TIMER2_COMPA_vect>:
  }
}
#endif


ISR(TIMER2_COMPA_vect)
    9b2e:	1f 92       	push	r1
    9b30:	0f 92       	push	r0
    9b32:	0f b6       	in	r0, 0x3f	; 63
    9b34:	0f 92       	push	r0
    9b36:	11 24       	eor	r1, r1
    9b38:	2f 93       	push	r18
    9b3a:	3f 93       	push	r19
    9b3c:	4f 93       	push	r20
    9b3e:	5f 93       	push	r21
    9b40:	6f 93       	push	r22
    9b42:	7f 93       	push	r23
    9b44:	8f 93       	push	r24
    9b46:	9f 93       	push	r25
    9b48:	af 93       	push	r26
    9b4a:	bf 93       	push	r27
    9b4c:	ef 93       	push	r30
    9b4e:	ff 93       	push	r31
    9b50:	df 93       	push	r29
    9b52:	cf 93       	push	r28
    9b54:	00 d0       	rcall	.+0      	; 0x9b56 <TIMER2_COMPA_vect+0x28>
    9b56:	cd b7       	in	r28, 0x3d	; 61
    9b58:	de b7       	in	r29, 0x3e	; 62
{

  if (timer2_toggle_count != 0)
    9b5a:	80 91 4f 06 	lds	r24, 0x064F
    9b5e:	90 91 50 06 	lds	r25, 0x0650
    9b62:	a0 91 51 06 	lds	r26, 0x0651
    9b66:	b0 91 52 06 	lds	r27, 0x0652
    9b6a:	1a 82       	std	Y+2, r1	; 0x02
    9b6c:	00 97       	sbiw	r24, 0x00	; 0
    9b6e:	a1 05       	cpc	r26, r1
    9b70:	b1 05       	cpc	r27, r1
    9b72:	11 f0       	breq	.+4      	; 0x9b78 <TIMER2_COMPA_vect+0x4a>
    9b74:	81 e0       	ldi	r24, 0x01	; 1
    9b76:	8a 83       	std	Y+2, r24	; 0x02
    9b78:	8a 81       	ldd	r24, Y+2	; 0x02
    9b7a:	88 23       	and	r24, r24
    9b7c:	a1 f1       	breq	.+104    	; 0x9be6 <TIMER2_COMPA_vect+0xb8>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    9b7e:	a0 91 53 06 	lds	r26, 0x0653
    9b82:	b0 91 54 06 	lds	r27, 0x0654
    9b86:	e0 91 53 06 	lds	r30, 0x0653
    9b8a:	f0 91 54 06 	lds	r31, 0x0654
    9b8e:	90 81       	ld	r25, Z
    9b90:	80 91 55 06 	lds	r24, 0x0655
    9b94:	89 27       	eor	r24, r25
    9b96:	8c 93       	st	X, r24

    if (timer2_toggle_count > 0)
    9b98:	80 91 4f 06 	lds	r24, 0x064F
    9b9c:	90 91 50 06 	lds	r25, 0x0650
    9ba0:	a0 91 51 06 	lds	r26, 0x0651
    9ba4:	b0 91 52 06 	lds	r27, 0x0652
    9ba8:	19 82       	std	Y+1, r1	; 0x01
    9baa:	18 16       	cp	r1, r24
    9bac:	19 06       	cpc	r1, r25
    9bae:	1a 06       	cpc	r1, r26
    9bb0:	1b 06       	cpc	r1, r27
    9bb2:	14 f4       	brge	.+4      	; 0x9bb8 <TIMER2_COMPA_vect+0x8a>
    9bb4:	81 e0       	ldi	r24, 0x01	; 1
    9bb6:	89 83       	std	Y+1, r24	; 0x01
    9bb8:	89 81       	ldd	r24, Y+1	; 0x01
    9bba:	88 23       	and	r24, r24
    9bbc:	c1 f0       	breq	.+48     	; 0x9bee <TIMER2_COMPA_vect+0xc0>
      timer2_toggle_count--;
    9bbe:	80 91 4f 06 	lds	r24, 0x064F
    9bc2:	90 91 50 06 	lds	r25, 0x0650
    9bc6:	a0 91 51 06 	lds	r26, 0x0651
    9bca:	b0 91 52 06 	lds	r27, 0x0652
    9bce:	01 97       	sbiw	r24, 0x01	; 1
    9bd0:	a1 09       	sbc	r26, r1
    9bd2:	b1 09       	sbc	r27, r1
    9bd4:	80 93 4f 06 	sts	0x064F, r24
    9bd8:	90 93 50 06 	sts	0x0650, r25
    9bdc:	a0 93 51 06 	sts	0x0651, r26
    9be0:	b0 93 52 06 	sts	0x0652, r27
    9be4:	04 c0       	rjmp	.+8      	; 0x9bee <TIMER2_COMPA_vect+0xc0>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    9be6:	80 91 c5 00 	lds	r24, 0x00C5
    9bea:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    9bee:	0f 90       	pop	r0
    9bf0:	0f 90       	pop	r0
    9bf2:	cf 91       	pop	r28
    9bf4:	df 91       	pop	r29
    9bf6:	ff 91       	pop	r31
    9bf8:	ef 91       	pop	r30
    9bfa:	bf 91       	pop	r27
    9bfc:	af 91       	pop	r26
    9bfe:	9f 91       	pop	r25
    9c00:	8f 91       	pop	r24
    9c02:	7f 91       	pop	r23
    9c04:	6f 91       	pop	r22
    9c06:	5f 91       	pop	r21
    9c08:	4f 91       	pop	r20
    9c0a:	3f 91       	pop	r19
    9c0c:	2f 91       	pop	r18
    9c0e:	0f 90       	pop	r0
    9c10:	0f be       	out	0x3f, r0	; 63
    9c12:	0f 90       	pop	r0
    9c14:	1f 90       	pop	r1
    9c16:	18 95       	reti

00009c18 <_Z4tonehjm>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
    9c18:	df 93       	push	r29
    9c1a:	cf 93       	push	r28
    9c1c:	cd b7       	in	r28, 0x3d	; 61
    9c1e:	de b7       	in	r29, 0x3e	; 62
    9c20:	64 97       	sbiw	r28, 0x14	; 20
    9c22:	0f b6       	in	r0, 0x3f	; 63
    9c24:	f8 94       	cli
    9c26:	de bf       	out	0x3e, r29	; 62
    9c28:	0f be       	out	0x3f, r0	; 63
    9c2a:	cd bf       	out	0x3d, r28	; 61
    9c2c:	8b 87       	std	Y+11, r24	; 0x0b
    9c2e:	7d 87       	std	Y+13, r23	; 0x0d
    9c30:	6c 87       	std	Y+12, r22	; 0x0c
    9c32:	2e 87       	std	Y+14, r18	; 0x0e
    9c34:	3f 87       	std	Y+15, r19	; 0x0f
    9c36:	48 8b       	std	Y+16, r20	; 0x10
    9c38:	59 8b       	std	Y+17, r21	; 0x11
{
  uint8_t prescalarbits = 0b001;
    9c3a:	81 e0       	ldi	r24, 0x01	; 1
    9c3c:	8a 87       	std	Y+10, r24	; 0x0a
  long toggle_count = 0;
    9c3e:	1e 82       	std	Y+6, r1	; 0x06
    9c40:	1f 82       	std	Y+7, r1	; 0x07
    9c42:	18 86       	std	Y+8, r1	; 0x08
    9c44:	19 86       	std	Y+9, r1	; 0x09
  uint32_t ocr = 0;
    9c46:	1a 82       	std	Y+2, r1	; 0x02
    9c48:	1b 82       	std	Y+3, r1	; 0x03
    9c4a:	1c 82       	std	Y+4, r1	; 0x04
    9c4c:	1d 82       	std	Y+5, r1	; 0x05
  int8_t _timer;

  _timer = toneBegin(_pin);
    9c4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    9c50:	0e 94 8d 4c 	call	0x991a	; 0x991a <_ZL9toneBeginh>
    9c54:	89 83       	std	Y+1, r24	; 0x01

  if (_timer >= 0)
    9c56:	89 81       	ldd	r24, Y+1	; 0x01
    9c58:	88 23       	and	r24, r24
    9c5a:	0c f4       	brge	.+2      	; 0x9c5e <_Z4tonehjm+0x46>
    9c5c:	cc c1       	rjmp	.+920    	; 0x9ff6 <_Z4tonehjm+0x3de>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    9c5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    9c60:	61 e0       	ldi	r22, 0x01	; 1
    9c62:	0e 94 6f 66 	call	0xccde	; 0xccde <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    9c66:	89 81       	ldd	r24, Y+1	; 0x01
    9c68:	88 23       	and	r24, r24
    9c6a:	21 f0       	breq	.+8      	; 0x9c74 <_Z4tonehjm+0x5c>
    9c6c:	89 81       	ldd	r24, Y+1	; 0x01
    9c6e:	82 30       	cpi	r24, 0x02	; 2
    9c70:	09 f0       	breq	.+2      	; 0x9c74 <_Z4tonehjm+0x5c>
    9c72:	24 c1       	rjmp	.+584    	; 0x9ebc <_Z4tonehjm+0x2a4>
    {
      ocr = F_CPU / frequency / 2 - 1;
    9c74:	8c 85       	ldd	r24, Y+12	; 0x0c
    9c76:	9d 85       	ldd	r25, Y+13	; 0x0d
    9c78:	9c 01       	movw	r18, r24
    9c7a:	40 e0       	ldi	r20, 0x00	; 0
    9c7c:	50 e0       	ldi	r21, 0x00	; 0
    9c7e:	80 e2       	ldi	r24, 0x20	; 32
    9c80:	91 ea       	ldi	r25, 0xA1	; 161
    9c82:	a7 e0       	ldi	r26, 0x07	; 7
    9c84:	b0 e0       	ldi	r27, 0x00	; 0
    9c86:	bc 01       	movw	r22, r24
    9c88:	cd 01       	movw	r24, r26
    9c8a:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    9c8e:	da 01       	movw	r26, r20
    9c90:	c9 01       	movw	r24, r18
    9c92:	01 97       	sbiw	r24, 0x01	; 1
    9c94:	a1 09       	sbc	r26, r1
    9c96:	b1 09       	sbc	r27, r1
    9c98:	8a 83       	std	Y+2, r24	; 0x02
    9c9a:	9b 83       	std	Y+3, r25	; 0x03
    9c9c:	ac 83       	std	Y+4, r26	; 0x04
    9c9e:	bd 83       	std	Y+5, r27	; 0x05
      prescalarbits = 0b001;  // ck/1: same for both timers
    9ca0:	81 e0       	ldi	r24, 0x01	; 1
    9ca2:	8a 87       	std	Y+10, r24	; 0x0a
      if (ocr > 255)
    9ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    9ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    9ca8:	ac 81       	ldd	r26, Y+4	; 0x04
    9caa:	bd 81       	ldd	r27, Y+5	; 0x05
    9cac:	8f 3f       	cpi	r24, 0xFF	; 255
    9cae:	91 05       	cpc	r25, r1
    9cb0:	a1 05       	cpc	r26, r1
    9cb2:	b1 05       	cpc	r27, r1
    9cb4:	09 f0       	breq	.+2      	; 0x9cb8 <_Z4tonehjm+0xa0>
    9cb6:	08 f4       	brcc	.+2      	; 0x9cba <_Z4tonehjm+0xa2>
    9cb8:	52 c1       	rjmp	.+676    	; 0x9f5e <_Z4tonehjm+0x346>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    9cba:	8c 85       	ldd	r24, Y+12	; 0x0c
    9cbc:	9d 85       	ldd	r25, Y+13	; 0x0d
    9cbe:	9c 01       	movw	r18, r24
    9cc0:	40 e0       	ldi	r20, 0x00	; 0
    9cc2:	50 e0       	ldi	r21, 0x00	; 0
    9cc4:	84 e2       	ldi	r24, 0x24	; 36
    9cc6:	94 ef       	ldi	r25, 0xF4	; 244
    9cc8:	a0 e0       	ldi	r26, 0x00	; 0
    9cca:	b0 e0       	ldi	r27, 0x00	; 0
    9ccc:	bc 01       	movw	r22, r24
    9cce:	cd 01       	movw	r24, r26
    9cd0:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    9cd4:	da 01       	movw	r26, r20
    9cd6:	c9 01       	movw	r24, r18
    9cd8:	01 97       	sbiw	r24, 0x01	; 1
    9cda:	a1 09       	sbc	r26, r1
    9cdc:	b1 09       	sbc	r27, r1
    9cde:	8a 83       	std	Y+2, r24	; 0x02
    9ce0:	9b 83       	std	Y+3, r25	; 0x03
    9ce2:	ac 83       	std	Y+4, r26	; 0x04
    9ce4:	bd 83       	std	Y+5, r27	; 0x05
        prescalarbits = 0b010;  // ck/8: same for both timers
    9ce6:	82 e0       	ldi	r24, 0x02	; 2
    9ce8:	8a 87       	std	Y+10, r24	; 0x0a

        if (_timer == 2 && ocr > 255)
    9cea:	89 81       	ldd	r24, Y+1	; 0x01
    9cec:	82 30       	cpi	r24, 0x02	; 2
    9cee:	11 f5       	brne	.+68     	; 0x9d34 <_Z4tonehjm+0x11c>
    9cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    9cf2:	9b 81       	ldd	r25, Y+3	; 0x03
    9cf4:	ac 81       	ldd	r26, Y+4	; 0x04
    9cf6:	bd 81       	ldd	r27, Y+5	; 0x05
    9cf8:	8f 3f       	cpi	r24, 0xFF	; 255
    9cfa:	91 05       	cpc	r25, r1
    9cfc:	a1 05       	cpc	r26, r1
    9cfe:	b1 05       	cpc	r27, r1
    9d00:	c9 f0       	breq	.+50     	; 0x9d34 <_Z4tonehjm+0x11c>
    9d02:	c0 f0       	brcs	.+48     	; 0x9d34 <_Z4tonehjm+0x11c>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    9d04:	8c 85       	ldd	r24, Y+12	; 0x0c
    9d06:	9d 85       	ldd	r25, Y+13	; 0x0d
    9d08:	9c 01       	movw	r18, r24
    9d0a:	40 e0       	ldi	r20, 0x00	; 0
    9d0c:	50 e0       	ldi	r21, 0x00	; 0
    9d0e:	89 e0       	ldi	r24, 0x09	; 9
    9d10:	9d e3       	ldi	r25, 0x3D	; 61
    9d12:	a0 e0       	ldi	r26, 0x00	; 0
    9d14:	b0 e0       	ldi	r27, 0x00	; 0
    9d16:	bc 01       	movw	r22, r24
    9d18:	cd 01       	movw	r24, r26
    9d1a:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    9d1e:	da 01       	movw	r26, r20
    9d20:	c9 01       	movw	r24, r18
    9d22:	01 97       	sbiw	r24, 0x01	; 1
    9d24:	a1 09       	sbc	r26, r1
    9d26:	b1 09       	sbc	r27, r1
    9d28:	8a 83       	std	Y+2, r24	; 0x02
    9d2a:	9b 83       	std	Y+3, r25	; 0x03
    9d2c:	ac 83       	std	Y+4, r26	; 0x04
    9d2e:	bd 83       	std	Y+5, r27	; 0x05
          prescalarbits = 0b011;
    9d30:	83 e0       	ldi	r24, 0x03	; 3
    9d32:	8a 87       	std	Y+10, r24	; 0x0a
        }

        if (ocr > 255)
    9d34:	8a 81       	ldd	r24, Y+2	; 0x02
    9d36:	9b 81       	ldd	r25, Y+3	; 0x03
    9d38:	ac 81       	ldd	r26, Y+4	; 0x04
    9d3a:	bd 81       	ldd	r27, Y+5	; 0x05
    9d3c:	8f 3f       	cpi	r24, 0xFF	; 255
    9d3e:	91 05       	cpc	r25, r1
    9d40:	a1 05       	cpc	r26, r1
    9d42:	b1 05       	cpc	r27, r1
    9d44:	09 f0       	breq	.+2      	; 0x9d48 <_Z4tonehjm+0x130>
    9d46:	08 f4       	brcc	.+2      	; 0x9d4a <_Z4tonehjm+0x132>
    9d48:	0a c1       	rjmp	.+532    	; 0x9f5e <_Z4tonehjm+0x346>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    9d4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    9d4c:	9d 85       	ldd	r25, Y+13	; 0x0d
    9d4e:	9c 01       	movw	r18, r24
    9d50:	40 e0       	ldi	r20, 0x00	; 0
    9d52:	50 e0       	ldi	r21, 0x00	; 0
    9d54:	80 e2       	ldi	r24, 0x20	; 32
    9d56:	91 ea       	ldi	r25, 0xA1	; 161
    9d58:	a7 e0       	ldi	r26, 0x07	; 7
    9d5a:	b0 e0       	ldi	r27, 0x00	; 0
    9d5c:	bc 01       	movw	r22, r24
    9d5e:	cd 01       	movw	r24, r26
    9d60:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    9d64:	da 01       	movw	r26, r20
    9d66:	c9 01       	movw	r24, r18
    9d68:	68 94       	set
    9d6a:	15 f8       	bld	r1, 5
    9d6c:	b6 95       	lsr	r27
    9d6e:	a7 95       	ror	r26
    9d70:	97 95       	ror	r25
    9d72:	87 95       	ror	r24
    9d74:	16 94       	lsr	r1
    9d76:	d1 f7       	brne	.-12     	; 0x9d6c <_Z4tonehjm+0x154>
    9d78:	01 97       	sbiw	r24, 0x01	; 1
    9d7a:	a1 09       	sbc	r26, r1
    9d7c:	b1 09       	sbc	r27, r1
    9d7e:	8a 83       	std	Y+2, r24	; 0x02
    9d80:	9b 83       	std	Y+3, r25	; 0x03
    9d82:	ac 83       	std	Y+4, r26	; 0x04
    9d84:	bd 83       	std	Y+5, r27	; 0x05
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    9d86:	89 81       	ldd	r24, Y+1	; 0x01
    9d88:	88 23       	and	r24, r24
    9d8a:	19 f4       	brne	.+6      	; 0x9d92 <_Z4tonehjm+0x17a>
    9d8c:	23 e0       	ldi	r18, 0x03	; 3
    9d8e:	2c 8b       	std	Y+20, r18	; 0x14
    9d90:	02 c0       	rjmp	.+4      	; 0x9d96 <_Z4tonehjm+0x17e>
    9d92:	84 e0       	ldi	r24, 0x04	; 4
    9d94:	8c 8b       	std	Y+20, r24	; 0x14
    9d96:	2c 89       	ldd	r18, Y+20	; 0x14
    9d98:	2a 87       	std	Y+10, r18	; 0x0a

          if (_timer == 2 && ocr > 255)
    9d9a:	89 81       	ldd	r24, Y+1	; 0x01
    9d9c:	82 30       	cpi	r24, 0x02	; 2
    9d9e:	51 f5       	brne	.+84     	; 0x9df4 <_Z4tonehjm+0x1dc>
    9da0:	8a 81       	ldd	r24, Y+2	; 0x02
    9da2:	9b 81       	ldd	r25, Y+3	; 0x03
    9da4:	ac 81       	ldd	r26, Y+4	; 0x04
    9da6:	bd 81       	ldd	r27, Y+5	; 0x05
    9da8:	8f 3f       	cpi	r24, 0xFF	; 255
    9daa:	91 05       	cpc	r25, r1
    9dac:	a1 05       	cpc	r26, r1
    9dae:	b1 05       	cpc	r27, r1
    9db0:	09 f1       	breq	.+66     	; 0x9df4 <_Z4tonehjm+0x1dc>
    9db2:	00 f1       	brcs	.+64     	; 0x9df4 <_Z4tonehjm+0x1dc>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    9db4:	8c 85       	ldd	r24, Y+12	; 0x0c
    9db6:	9d 85       	ldd	r25, Y+13	; 0x0d
    9db8:	9c 01       	movw	r18, r24
    9dba:	40 e0       	ldi	r20, 0x00	; 0
    9dbc:	50 e0       	ldi	r21, 0x00	; 0
    9dbe:	80 e2       	ldi	r24, 0x20	; 32
    9dc0:	91 ea       	ldi	r25, 0xA1	; 161
    9dc2:	a7 e0       	ldi	r26, 0x07	; 7
    9dc4:	b0 e0       	ldi	r27, 0x00	; 0
    9dc6:	bc 01       	movw	r22, r24
    9dc8:	cd 01       	movw	r24, r26
    9dca:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    9dce:	da 01       	movw	r26, r20
    9dd0:	c9 01       	movw	r24, r18
    9dd2:	68 94       	set
    9dd4:	16 f8       	bld	r1, 6
    9dd6:	b6 95       	lsr	r27
    9dd8:	a7 95       	ror	r26
    9dda:	97 95       	ror	r25
    9ddc:	87 95       	ror	r24
    9dde:	16 94       	lsr	r1
    9de0:	d1 f7       	brne	.-12     	; 0x9dd6 <_Z4tonehjm+0x1be>
    9de2:	01 97       	sbiw	r24, 0x01	; 1
    9de4:	a1 09       	sbc	r26, r1
    9de6:	b1 09       	sbc	r27, r1
    9de8:	8a 83       	std	Y+2, r24	; 0x02
    9dea:	9b 83       	std	Y+3, r25	; 0x03
    9dec:	ac 83       	std	Y+4, r26	; 0x04
    9dee:	bd 83       	std	Y+5, r27	; 0x05
            prescalarbits = 0b101;
    9df0:	85 e0       	ldi	r24, 0x05	; 5
    9df2:	8a 87       	std	Y+10, r24	; 0x0a
          }

          if (ocr > 255)
    9df4:	8a 81       	ldd	r24, Y+2	; 0x02
    9df6:	9b 81       	ldd	r25, Y+3	; 0x03
    9df8:	ac 81       	ldd	r26, Y+4	; 0x04
    9dfa:	bd 81       	ldd	r27, Y+5	; 0x05
    9dfc:	8f 3f       	cpi	r24, 0xFF	; 255
    9dfe:	91 05       	cpc	r25, r1
    9e00:	a1 05       	cpc	r26, r1
    9e02:	b1 05       	cpc	r27, r1
    9e04:	09 f0       	breq	.+2      	; 0x9e08 <_Z4tonehjm+0x1f0>
    9e06:	08 f4       	brcc	.+2      	; 0x9e0a <_Z4tonehjm+0x1f2>
    9e08:	aa c0       	rjmp	.+340    	; 0x9f5e <_Z4tonehjm+0x346>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    9e0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    9e0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    9e0e:	9c 01       	movw	r18, r24
    9e10:	40 e0       	ldi	r20, 0x00	; 0
    9e12:	50 e0       	ldi	r21, 0x00	; 0
    9e14:	80 e2       	ldi	r24, 0x20	; 32
    9e16:	91 ea       	ldi	r25, 0xA1	; 161
    9e18:	a7 e0       	ldi	r26, 0x07	; 7
    9e1a:	b0 e0       	ldi	r27, 0x00	; 0
    9e1c:	bc 01       	movw	r22, r24
    9e1e:	cd 01       	movw	r24, r26
    9e20:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    9e24:	da 01       	movw	r26, r20
    9e26:	c9 01       	movw	r24, r18
    9e28:	89 2f       	mov	r24, r25
    9e2a:	9a 2f       	mov	r25, r26
    9e2c:	ab 2f       	mov	r26, r27
    9e2e:	bb 27       	eor	r27, r27
    9e30:	01 97       	sbiw	r24, 0x01	; 1
    9e32:	a1 09       	sbc	r26, r1
    9e34:	b1 09       	sbc	r27, r1
    9e36:	8a 83       	std	Y+2, r24	; 0x02
    9e38:	9b 83       	std	Y+3, r25	; 0x03
    9e3a:	ac 83       	std	Y+4, r26	; 0x04
    9e3c:	bd 83       	std	Y+5, r27	; 0x05
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    9e3e:	89 81       	ldd	r24, Y+1	; 0x01
    9e40:	88 23       	and	r24, r24
    9e42:	19 f4       	brne	.+6      	; 0x9e4a <_Z4tonehjm+0x232>
    9e44:	84 e0       	ldi	r24, 0x04	; 4
    9e46:	8b 8b       	std	Y+19, r24	; 0x13
    9e48:	02 c0       	rjmp	.+4      	; 0x9e4e <_Z4tonehjm+0x236>
    9e4a:	26 e0       	ldi	r18, 0x06	; 6
    9e4c:	2b 8b       	std	Y+19, r18	; 0x13
    9e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    9e50:	8a 87       	std	Y+10, r24	; 0x0a
            if (ocr > 255)
    9e52:	8a 81       	ldd	r24, Y+2	; 0x02
    9e54:	9b 81       	ldd	r25, Y+3	; 0x03
    9e56:	ac 81       	ldd	r26, Y+4	; 0x04
    9e58:	bd 81       	ldd	r27, Y+5	; 0x05
    9e5a:	8f 3f       	cpi	r24, 0xFF	; 255
    9e5c:	91 05       	cpc	r25, r1
    9e5e:	a1 05       	cpc	r26, r1
    9e60:	b1 05       	cpc	r27, r1
    9e62:	09 f0       	breq	.+2      	; 0x9e66 <_Z4tonehjm+0x24e>
    9e64:	08 f4       	brcc	.+2      	; 0x9e68 <_Z4tonehjm+0x250>
    9e66:	7b c0       	rjmp	.+246    	; 0x9f5e <_Z4tonehjm+0x346>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    9e68:	8c 85       	ldd	r24, Y+12	; 0x0c
    9e6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    9e6c:	9c 01       	movw	r18, r24
    9e6e:	40 e0       	ldi	r20, 0x00	; 0
    9e70:	50 e0       	ldi	r21, 0x00	; 0
    9e72:	80 e2       	ldi	r24, 0x20	; 32
    9e74:	91 ea       	ldi	r25, 0xA1	; 161
    9e76:	a7 e0       	ldi	r26, 0x07	; 7
    9e78:	b0 e0       	ldi	r27, 0x00	; 0
    9e7a:	bc 01       	movw	r22, r24
    9e7c:	cd 01       	movw	r24, r26
    9e7e:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    9e82:	da 01       	movw	r26, r20
    9e84:	c9 01       	movw	r24, r18
    9e86:	07 2e       	mov	r0, r23
    9e88:	7a e0       	ldi	r23, 0x0A	; 10
    9e8a:	b6 95       	lsr	r27
    9e8c:	a7 95       	ror	r26
    9e8e:	97 95       	ror	r25
    9e90:	87 95       	ror	r24
    9e92:	7a 95       	dec	r23
    9e94:	d1 f7       	brne	.-12     	; 0x9e8a <_Z4tonehjm+0x272>
    9e96:	70 2d       	mov	r23, r0
    9e98:	01 97       	sbiw	r24, 0x01	; 1
    9e9a:	a1 09       	sbc	r26, r1
    9e9c:	b1 09       	sbc	r27, r1
    9e9e:	8a 83       	std	Y+2, r24	; 0x02
    9ea0:	9b 83       	std	Y+3, r25	; 0x03
    9ea2:	ac 83       	std	Y+4, r26	; 0x04
    9ea4:	bd 83       	std	Y+5, r27	; 0x05
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    9ea6:	89 81       	ldd	r24, Y+1	; 0x01
    9ea8:	88 23       	and	r24, r24
    9eaa:	19 f4       	brne	.+6      	; 0x9eb2 <_Z4tonehjm+0x29a>
    9eac:	25 e0       	ldi	r18, 0x05	; 5
    9eae:	2a 8b       	std	Y+18, r18	; 0x12
    9eb0:	02 c0       	rjmp	.+4      	; 0x9eb6 <_Z4tonehjm+0x29e>
    9eb2:	87 e0       	ldi	r24, 0x07	; 7
    9eb4:	8a 8b       	std	Y+18, r24	; 0x12
    9eb6:	2a 89       	ldd	r18, Y+18	; 0x12
    9eb8:	2a 87       	std	Y+10, r18	; 0x0a
    9eba:	51 c0       	rjmp	.+162    	; 0x9f5e <_Z4tonehjm+0x346>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    9ebc:	8c 85       	ldd	r24, Y+12	; 0x0c
    9ebe:	9d 85       	ldd	r25, Y+13	; 0x0d
    9ec0:	9c 01       	movw	r18, r24
    9ec2:	40 e0       	ldi	r20, 0x00	; 0
    9ec4:	50 e0       	ldi	r21, 0x00	; 0
    9ec6:	80 e2       	ldi	r24, 0x20	; 32
    9ec8:	91 ea       	ldi	r25, 0xA1	; 161
    9eca:	a7 e0       	ldi	r26, 0x07	; 7
    9ecc:	b0 e0       	ldi	r27, 0x00	; 0
    9ece:	bc 01       	movw	r22, r24
    9ed0:	cd 01       	movw	r24, r26
    9ed2:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    9ed6:	da 01       	movw	r26, r20
    9ed8:	c9 01       	movw	r24, r18
    9eda:	01 97       	sbiw	r24, 0x01	; 1
    9edc:	a1 09       	sbc	r26, r1
    9ede:	b1 09       	sbc	r27, r1
    9ee0:	8a 83       	std	Y+2, r24	; 0x02
    9ee2:	9b 83       	std	Y+3, r25	; 0x03
    9ee4:	ac 83       	std	Y+4, r26	; 0x04
    9ee6:	bd 83       	std	Y+5, r27	; 0x05

      prescalarbits = 0b001;
    9ee8:	81 e0       	ldi	r24, 0x01	; 1
    9eea:	8a 87       	std	Y+10, r24	; 0x0a
      if (ocr > 0xffff)
    9eec:	8a 81       	ldd	r24, Y+2	; 0x02
    9eee:	9b 81       	ldd	r25, Y+3	; 0x03
    9ef0:	ac 81       	ldd	r26, Y+4	; 0x04
    9ef2:	bd 81       	ldd	r27, Y+5	; 0x05
    9ef4:	80 30       	cpi	r24, 0x00	; 0
    9ef6:	20 e0       	ldi	r18, 0x00	; 0
    9ef8:	92 07       	cpc	r25, r18
    9efa:	21 e0       	ldi	r18, 0x01	; 1
    9efc:	a2 07       	cpc	r26, r18
    9efe:	20 e0       	ldi	r18, 0x00	; 0
    9f00:	b2 07       	cpc	r27, r18
    9f02:	00 f1       	brcs	.+64     	; 0x9f44 <_Z4tonehjm+0x32c>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    9f04:	8c 85       	ldd	r24, Y+12	; 0x0c
    9f06:	9d 85       	ldd	r25, Y+13	; 0x0d
    9f08:	9c 01       	movw	r18, r24
    9f0a:	40 e0       	ldi	r20, 0x00	; 0
    9f0c:	50 e0       	ldi	r21, 0x00	; 0
    9f0e:	80 e2       	ldi	r24, 0x20	; 32
    9f10:	91 ea       	ldi	r25, 0xA1	; 161
    9f12:	a7 e0       	ldi	r26, 0x07	; 7
    9f14:	b0 e0       	ldi	r27, 0x00	; 0
    9f16:	bc 01       	movw	r22, r24
    9f18:	cd 01       	movw	r24, r26
    9f1a:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    9f1e:	da 01       	movw	r26, r20
    9f20:	c9 01       	movw	r24, r18
    9f22:	68 94       	set
    9f24:	15 f8       	bld	r1, 5
    9f26:	b6 95       	lsr	r27
    9f28:	a7 95       	ror	r26
    9f2a:	97 95       	ror	r25
    9f2c:	87 95       	ror	r24
    9f2e:	16 94       	lsr	r1
    9f30:	d1 f7       	brne	.-12     	; 0x9f26 <_Z4tonehjm+0x30e>
    9f32:	01 97       	sbiw	r24, 0x01	; 1
    9f34:	a1 09       	sbc	r26, r1
    9f36:	b1 09       	sbc	r27, r1
    9f38:	8a 83       	std	Y+2, r24	; 0x02
    9f3a:	9b 83       	std	Y+3, r25	; 0x03
    9f3c:	ac 83       	std	Y+4, r26	; 0x04
    9f3e:	bd 83       	std	Y+5, r27	; 0x05
        prescalarbits = 0b011;
    9f40:	83 e0       	ldi	r24, 0x03	; 3
    9f42:	8a 87       	std	Y+10, r24	; 0x0a
      }

      if (_timer == 1)
    9f44:	89 81       	ldd	r24, Y+1	; 0x01
    9f46:	81 30       	cpi	r24, 0x01	; 1
    9f48:	51 f4       	brne	.+20     	; 0x9f5e <_Z4tonehjm+0x346>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    9f4a:	ae e4       	ldi	r26, 0x4E	; 78
    9f4c:	b0 e0       	ldi	r27, 0x00	; 0
    9f4e:	ee e4       	ldi	r30, 0x4E	; 78
    9f50:	f0 e0       	ldi	r31, 0x00	; 0
    9f52:	80 81       	ld	r24, Z
    9f54:	98 2f       	mov	r25, r24
    9f56:	98 7f       	andi	r25, 0xF8	; 248
    9f58:	8a 85       	ldd	r24, Y+10	; 0x0a
    9f5a:	89 2b       	or	r24, r25
    9f5c:	8c 93       	st	X, r24

    }
    

    // Calculate the toggle count
    if (duration > 0)
    9f5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    9f60:	9f 85       	ldd	r25, Y+15	; 0x0f
    9f62:	a8 89       	ldd	r26, Y+16	; 0x10
    9f64:	b9 89       	ldd	r27, Y+17	; 0x11
    9f66:	00 97       	sbiw	r24, 0x00	; 0
    9f68:	a1 05       	cpc	r26, r1
    9f6a:	b1 05       	cpc	r27, r1
    9f6c:	01 f1       	breq	.+64     	; 0x9fae <_Z4tonehjm+0x396>
    {
      toggle_count = 2 * frequency * duration / 1000;
    9f6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    9f70:	9d 85       	ldd	r25, Y+13	; 0x0d
    9f72:	88 0f       	add	r24, r24
    9f74:	99 1f       	adc	r25, r25
    9f76:	cc 01       	movw	r24, r24
    9f78:	a0 e0       	ldi	r26, 0x00	; 0
    9f7a:	b0 e0       	ldi	r27, 0x00	; 0
    9f7c:	2e 85       	ldd	r18, Y+14	; 0x0e
    9f7e:	3f 85       	ldd	r19, Y+15	; 0x0f
    9f80:	48 89       	ldd	r20, Y+16	; 0x10
    9f82:	59 89       	ldd	r21, Y+17	; 0x11
    9f84:	bc 01       	movw	r22, r24
    9f86:	cd 01       	movw	r24, r26
    9f88:	0e 94 b8 81 	call	0x10370	; 0x10370 <__mulsi3>
    9f8c:	dc 01       	movw	r26, r24
    9f8e:	cb 01       	movw	r24, r22
    9f90:	28 ee       	ldi	r18, 0xE8	; 232
    9f92:	33 e0       	ldi	r19, 0x03	; 3
    9f94:	40 e0       	ldi	r20, 0x00	; 0
    9f96:	50 e0       	ldi	r21, 0x00	; 0
    9f98:	bc 01       	movw	r22, r24
    9f9a:	cd 01       	movw	r24, r26
    9f9c:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
    9fa0:	da 01       	movw	r26, r20
    9fa2:	c9 01       	movw	r24, r18
    9fa4:	8e 83       	std	Y+6, r24	; 0x06
    9fa6:	9f 83       	std	Y+7, r25	; 0x07
    9fa8:	a8 87       	std	Y+8, r26	; 0x08
    9faa:	b9 87       	std	Y+9, r27	; 0x09
    9fac:	08 c0       	rjmp	.+16     	; 0x9fbe <_Z4tonehjm+0x3a6>
    }
    else
    {
      toggle_count = -1;
    9fae:	8f ef       	ldi	r24, 0xFF	; 255
    9fb0:	9f ef       	ldi	r25, 0xFF	; 255
    9fb2:	af ef       	ldi	r26, 0xFF	; 255
    9fb4:	bf ef       	ldi	r27, 0xFF	; 255
    9fb6:	8e 83       	std	Y+6, r24	; 0x06
    9fb8:	9f 83       	std	Y+7, r25	; 0x07
    9fba:	a8 87       	std	Y+8, r26	; 0x08
    9fbc:	b9 87       	std	Y+9, r27	; 0x09
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    9fbe:	89 81       	ldd	r24, Y+1	; 0x01
    9fc0:	81 30       	cpi	r24, 0x01	; 1
    9fc2:	c9 f4       	brne	.+50     	; 0x9ff6 <_Z4tonehjm+0x3de>
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK1, OCIE1A, 1);
#elif defined(OCR1A) && defined(TIMSK) && defined(OCIE1A)
        // this combination is for at least the ATmega32
        OCR1A = ocr;
    9fc4:	ea e4       	ldi	r30, 0x4A	; 74
    9fc6:	f0 e0       	ldi	r31, 0x00	; 0
    9fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    9fca:	9b 81       	ldd	r25, Y+3	; 0x03
    9fcc:	91 83       	std	Z+1, r25	; 0x01
    9fce:	80 83       	st	Z, r24
        timer1_toggle_count = toggle_count;
    9fd0:	8e 81       	ldd	r24, Y+6	; 0x06
    9fd2:	9f 81       	ldd	r25, Y+7	; 0x07
    9fd4:	a8 85       	ldd	r26, Y+8	; 0x08
    9fd6:	b9 85       	ldd	r27, Y+9	; 0x09
    9fd8:	80 93 48 06 	sts	0x0648, r24
    9fdc:	90 93 49 06 	sts	0x0649, r25
    9fe0:	a0 93 4a 06 	sts	0x064A, r26
    9fe4:	b0 93 4b 06 	sts	0x064B, r27
        bitWrite(TIMSK, OCIE1A, 1);
    9fe8:	a9 e5       	ldi	r26, 0x59	; 89
    9fea:	b0 e0       	ldi	r27, 0x00	; 0
    9fec:	e9 e5       	ldi	r30, 0x59	; 89
    9fee:	f0 e0       	ldi	r31, 0x00	; 0
    9ff0:	80 81       	ld	r24, Z
    9ff2:	80 61       	ori	r24, 0x10	; 16
    9ff4:	8c 93       	st	X, r24
        break;
#endif

    }
  }
}
    9ff6:	64 96       	adiw	r28, 0x14	; 20
    9ff8:	0f b6       	in	r0, 0x3f	; 63
    9ffa:	f8 94       	cli
    9ffc:	de bf       	out	0x3e, r29	; 62
    9ffe:	0f be       	out	0x3f, r0	; 63
    a000:	cd bf       	out	0x3d, r28	; 61
    a002:	cf 91       	pop	r28
    a004:	df 91       	pop	r29
    a006:	08 95       	ret

0000a008 <attachInterrupt>:
#include "wiring_private.h"

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
    a008:	df 93       	push	r29
    a00a:	cf 93       	push	r28
    a00c:	cd b7       	in	r28, 0x3d	; 61
    a00e:	de b7       	in	r29, 0x3e	; 62
    a010:	27 97       	sbiw	r28, 0x07	; 7
    a012:	0f b6       	in	r0, 0x3f	; 63
    a014:	f8 94       	cli
    a016:	de bf       	out	0x3e, r29	; 62
    a018:	0f be       	out	0x3f, r0	; 63
    a01a:	cd bf       	out	0x3d, r28	; 61
    a01c:	89 83       	std	Y+1, r24	; 0x01
    a01e:	7b 83       	std	Y+3, r23	; 0x03
    a020:	6a 83       	std	Y+2, r22	; 0x02
    a022:	5d 83       	std	Y+5, r21	; 0x05
    a024:	4c 83       	std	Y+4, r20	; 0x04
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    a026:	89 81       	ldd	r24, Y+1	; 0x01
    a028:	82 30       	cpi	r24, 0x02	; 2
    a02a:	08 f0       	brcs	.+2      	; 0xa02e <attachInterrupt+0x26>
    a02c:	43 c0       	rjmp	.+134    	; 0xa0b4 <attachInterrupt+0xac>
    intFunc[interruptNum] = userFunc;
    a02e:	89 81       	ldd	r24, Y+1	; 0x01
    a030:	88 2f       	mov	r24, r24
    a032:	90 e0       	ldi	r25, 0x00	; 0
    a034:	88 0f       	add	r24, r24
    a036:	99 1f       	adc	r25, r25
    a038:	fc 01       	movw	r30, r24
    a03a:	ea 5a       	subi	r30, 0xAA	; 170
    a03c:	f9 4f       	sbci	r31, 0xF9	; 249
    a03e:	8a 81       	ldd	r24, Y+2	; 0x02
    a040:	9b 81       	ldd	r25, Y+3	; 0x03
    a042:	91 83       	std	Z+1, r25	; 0x01
    a044:	80 83       	st	Z, r24
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    a046:	89 81       	ldd	r24, Y+1	; 0x01
    a048:	28 2f       	mov	r18, r24
    a04a:	30 e0       	ldi	r19, 0x00	; 0
    a04c:	3f 83       	std	Y+7, r19	; 0x07
    a04e:	2e 83       	std	Y+6, r18	; 0x06
    a050:	8e 81       	ldd	r24, Y+6	; 0x06
    a052:	9f 81       	ldd	r25, Y+7	; 0x07
    a054:	00 97       	sbiw	r24, 0x00	; 0
    a056:	31 f0       	breq	.+12     	; 0xa064 <attachInterrupt+0x5c>
    a058:	2e 81       	ldd	r18, Y+6	; 0x06
    a05a:	3f 81       	ldd	r19, Y+7	; 0x07
    a05c:	21 30       	cpi	r18, 0x01	; 1
    a05e:	31 05       	cpc	r19, r1
    a060:	99 f0       	breq	.+38     	; 0xa088 <attachInterrupt+0x80>
    a062:	28 c0       	rjmp	.+80     	; 0xa0b4 <attachInterrupt+0xac>
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      EIMSK |= (1 << INT0);
    #elif defined(MCUCR) && defined(ISC00) && defined(GICR)
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    a064:	a5 e5       	ldi	r26, 0x55	; 85
    a066:	b0 e0       	ldi	r27, 0x00	; 0
    a068:	e5 e5       	ldi	r30, 0x55	; 85
    a06a:	f0 e0       	ldi	r31, 0x00	; 0
    a06c:	80 81       	ld	r24, Z
    a06e:	98 2f       	mov	r25, r24
    a070:	9c 7f       	andi	r25, 0xFC	; 252
    a072:	8c 81       	ldd	r24, Y+4	; 0x04
    a074:	89 2b       	or	r24, r25
    a076:	8c 93       	st	X, r24
      GICR |= (1 << INT0);
    a078:	ab e5       	ldi	r26, 0x5B	; 91
    a07a:	b0 e0       	ldi	r27, 0x00	; 0
    a07c:	eb e5       	ldi	r30, 0x5B	; 91
    a07e:	f0 e0       	ldi	r31, 0x00	; 0
    a080:	80 81       	ld	r24, Z
    a082:	80 64       	ori	r24, 0x40	; 64
    a084:	8c 93       	st	X, r24
    a086:	16 c0       	rjmp	.+44     	; 0xa0b4 <attachInterrupt+0xac>
    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
      EIMSK |= (1 << INT1);
    #elif defined(MCUCR) && defined(ISC10) && defined(ISC11) && defined(GICR)
      MCUCR = (MCUCR & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    a088:	a5 e5       	ldi	r26, 0x55	; 85
    a08a:	b0 e0       	ldi	r27, 0x00	; 0
    a08c:	e5 e5       	ldi	r30, 0x55	; 85
    a08e:	f0 e0       	ldi	r31, 0x00	; 0
    a090:	80 81       	ld	r24, Z
    a092:	28 2f       	mov	r18, r24
    a094:	23 7f       	andi	r18, 0xF3	; 243
    a096:	8c 81       	ldd	r24, Y+4	; 0x04
    a098:	9d 81       	ldd	r25, Y+5	; 0x05
    a09a:	88 0f       	add	r24, r24
    a09c:	99 1f       	adc	r25, r25
    a09e:	88 0f       	add	r24, r24
    a0a0:	99 1f       	adc	r25, r25
    a0a2:	82 2b       	or	r24, r18
    a0a4:	8c 93       	st	X, r24
      GICR |= (1 << INT1);
    a0a6:	ab e5       	ldi	r26, 0x5B	; 91
    a0a8:	b0 e0       	ldi	r27, 0x00	; 0
    a0aa:	eb e5       	ldi	r30, 0x5B	; 91
    a0ac:	f0 e0       	ldi	r31, 0x00	; 0
    a0ae:	80 81       	ld	r24, Z
    a0b0:	80 68       	ori	r24, 0x80	; 128
    a0b2:	8c 93       	st	X, r24
    #endif
      break;
#endif
    }
  }
}
    a0b4:	27 96       	adiw	r28, 0x07	; 7
    a0b6:	0f b6       	in	r0, 0x3f	; 63
    a0b8:	f8 94       	cli
    a0ba:	de bf       	out	0x3e, r29	; 62
    a0bc:	0f be       	out	0x3f, r0	; 63
    a0be:	cd bf       	out	0x3d, r28	; 61
    a0c0:	cf 91       	pop	r28
    a0c2:	df 91       	pop	r29
    a0c4:	08 95       	ret

0000a0c6 <detachInterrupt>:

void detachInterrupt(uint8_t interruptNum) {
    a0c6:	df 93       	push	r29
    a0c8:	cf 93       	push	r28
    a0ca:	00 d0       	rcall	.+0      	; 0xa0cc <detachInterrupt+0x6>
    a0cc:	0f 92       	push	r0
    a0ce:	cd b7       	in	r28, 0x3d	; 61
    a0d0:	de b7       	in	r29, 0x3e	; 62
    a0d2:	89 83       	std	Y+1, r24	; 0x01
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    a0d4:	89 81       	ldd	r24, Y+1	; 0x01
    a0d6:	82 30       	cpi	r24, 0x02	; 2
    a0d8:	40 f5       	brcc	.+80     	; 0xa12a <detachInterrupt+0x64>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    a0da:	89 81       	ldd	r24, Y+1	; 0x01
    a0dc:	28 2f       	mov	r18, r24
    a0de:	30 e0       	ldi	r19, 0x00	; 0
    a0e0:	3b 83       	std	Y+3, r19	; 0x03
    a0e2:	2a 83       	std	Y+2, r18	; 0x02
    a0e4:	8a 81       	ldd	r24, Y+2	; 0x02
    a0e6:	9b 81       	ldd	r25, Y+3	; 0x03
    a0e8:	00 97       	sbiw	r24, 0x00	; 0
    a0ea:	31 f0       	breq	.+12     	; 0xa0f8 <detachInterrupt+0x32>
    a0ec:	2a 81       	ldd	r18, Y+2	; 0x02
    a0ee:	3b 81       	ldd	r19, Y+3	; 0x03
    a0f0:	21 30       	cpi	r18, 0x01	; 1
    a0f2:	31 05       	cpc	r19, r1
    a0f4:	49 f0       	breq	.+18     	; 0xa108 <detachInterrupt+0x42>
    a0f6:	0f c0       	rjmp	.+30     	; 0xa116 <detachInterrupt+0x50>
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    #elif defined(GICR) && defined(ISC00)
      GICR &= ~(1 << INT0); // atmega32
    a0f8:	ab e5       	ldi	r26, 0x5B	; 91
    a0fa:	b0 e0       	ldi	r27, 0x00	; 0
    a0fc:	eb e5       	ldi	r30, 0x5B	; 91
    a0fe:	f0 e0       	ldi	r31, 0x00	; 0
    a100:	80 81       	ld	r24, Z
    a102:	8f 7b       	andi	r24, 0xBF	; 191
    a104:	8c 93       	st	X, r24
    a106:	07 c0       	rjmp	.+14     	; 0xa116 <detachInterrupt+0x50>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    #elif defined(GICR) && defined(INT1)
      GICR &= ~(1 << INT1); // atmega32
    a108:	ab e5       	ldi	r26, 0x5B	; 91
    a10a:	b0 e0       	ldi	r27, 0x00	; 0
    a10c:	eb e5       	ldi	r30, 0x5B	; 91
    a10e:	f0 e0       	ldi	r31, 0x00	; 0
    a110:	80 81       	ld	r24, Z
    a112:	8f 77       	andi	r24, 0x7F	; 127
    a114:	8c 93       	st	X, r24
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    a116:	89 81       	ldd	r24, Y+1	; 0x01
    a118:	88 2f       	mov	r24, r24
    a11a:	90 e0       	ldi	r25, 0x00	; 0
    a11c:	88 0f       	add	r24, r24
    a11e:	99 1f       	adc	r25, r25
    a120:	fc 01       	movw	r30, r24
    a122:	ea 5a       	subi	r30, 0xAA	; 170
    a124:	f9 4f       	sbci	r31, 0xF9	; 249
    a126:	11 82       	std	Z+1, r1	; 0x01
    a128:	10 82       	st	Z, r1
  }
}
    a12a:	0f 90       	pop	r0
    a12c:	0f 90       	pop	r0
    a12e:	0f 90       	pop	r0
    a130:	cf 91       	pop	r28
    a132:	df 91       	pop	r29
    a134:	08 95       	ret

0000a136 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
    a136:	1f 92       	push	r1
    a138:	0f 92       	push	r0
    a13a:	0f b6       	in	r0, 0x3f	; 63
    a13c:	0f 92       	push	r0
    a13e:	11 24       	eor	r1, r1
    a140:	2f 93       	push	r18
    a142:	3f 93       	push	r19
    a144:	4f 93       	push	r20
    a146:	5f 93       	push	r21
    a148:	6f 93       	push	r22
    a14a:	7f 93       	push	r23
    a14c:	8f 93       	push	r24
    a14e:	9f 93       	push	r25
    a150:	af 93       	push	r26
    a152:	bf 93       	push	r27
    a154:	ef 93       	push	r30
    a156:	ff 93       	push	r31
    a158:	df 93       	push	r29
    a15a:	cf 93       	push	r28
    a15c:	cd b7       	in	r28, 0x3d	; 61
    a15e:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_0])
    a160:	80 91 56 06 	lds	r24, 0x0656
    a164:	90 91 57 06 	lds	r25, 0x0657
    a168:	00 97       	sbiw	r24, 0x00	; 0
    a16a:	29 f0       	breq	.+10     	; 0xa176 <__vector_1+0x40>
    intFunc[EXTERNAL_INT_0]();
    a16c:	e0 91 56 06 	lds	r30, 0x0656
    a170:	f0 91 57 06 	lds	r31, 0x0657
    a174:	09 95       	icall
}
    a176:	cf 91       	pop	r28
    a178:	df 91       	pop	r29
    a17a:	ff 91       	pop	r31
    a17c:	ef 91       	pop	r30
    a17e:	bf 91       	pop	r27
    a180:	af 91       	pop	r26
    a182:	9f 91       	pop	r25
    a184:	8f 91       	pop	r24
    a186:	7f 91       	pop	r23
    a188:	6f 91       	pop	r22
    a18a:	5f 91       	pop	r21
    a18c:	4f 91       	pop	r20
    a18e:	3f 91       	pop	r19
    a190:	2f 91       	pop	r18
    a192:	0f 90       	pop	r0
    a194:	0f be       	out	0x3f, r0	; 63
    a196:	0f 90       	pop	r0
    a198:	1f 90       	pop	r1
    a19a:	18 95       	reti

0000a19c <__vector_2>:

SIGNAL(INT1_vect) {
    a19c:	1f 92       	push	r1
    a19e:	0f 92       	push	r0
    a1a0:	0f b6       	in	r0, 0x3f	; 63
    a1a2:	0f 92       	push	r0
    a1a4:	11 24       	eor	r1, r1
    a1a6:	2f 93       	push	r18
    a1a8:	3f 93       	push	r19
    a1aa:	4f 93       	push	r20
    a1ac:	5f 93       	push	r21
    a1ae:	6f 93       	push	r22
    a1b0:	7f 93       	push	r23
    a1b2:	8f 93       	push	r24
    a1b4:	9f 93       	push	r25
    a1b6:	af 93       	push	r26
    a1b8:	bf 93       	push	r27
    a1ba:	ef 93       	push	r30
    a1bc:	ff 93       	push	r31
    a1be:	df 93       	push	r29
    a1c0:	cf 93       	push	r28
    a1c2:	cd b7       	in	r28, 0x3d	; 61
    a1c4:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_1])
    a1c6:	80 91 58 06 	lds	r24, 0x0658
    a1ca:	90 91 59 06 	lds	r25, 0x0659
    a1ce:	00 97       	sbiw	r24, 0x00	; 0
    a1d0:	29 f0       	breq	.+10     	; 0xa1dc <__vector_2+0x40>
    intFunc[EXTERNAL_INT_1]();
    a1d2:	e0 91 58 06 	lds	r30, 0x0658
    a1d6:	f0 91 59 06 	lds	r31, 0x0659
    a1da:	09 95       	icall
}
    a1dc:	cf 91       	pop	r28
    a1de:	df 91       	pop	r29
    a1e0:	ff 91       	pop	r31
    a1e2:	ef 91       	pop	r30
    a1e4:	bf 91       	pop	r27
    a1e6:	af 91       	pop	r26
    a1e8:	9f 91       	pop	r25
    a1ea:	8f 91       	pop	r24
    a1ec:	7f 91       	pop	r23
    a1ee:	6f 91       	pop	r22
    a1f0:	5f 91       	pop	r21
    a1f2:	4f 91       	pop	r20
    a1f4:	3f 91       	pop	r19
    a1f6:	2f 91       	pop	r18
    a1f8:	0f 90       	pop	r0
    a1fa:	0f be       	out	0x3f, r0	; 63
    a1fc:	0f 90       	pop	r0
    a1fe:	1f 90       	pop	r1
    a200:	18 95       	reti

0000a202 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
    a202:	af 92       	push	r10
    a204:	bf 92       	push	r11
    a206:	cf 92       	push	r12
    a208:	df 92       	push	r13
    a20a:	ef 92       	push	r14
    a20c:	ff 92       	push	r15
    a20e:	0f 93       	push	r16
    a210:	1f 93       	push	r17
    a212:	df 93       	push	r29
    a214:	cf 93       	push	r28
    a216:	cd b7       	in	r28, 0x3d	; 61
    a218:	de b7       	in	r29, 0x3e	; 62
    a21a:	60 97       	sbiw	r28, 0x10	; 16
    a21c:	0f b6       	in	r0, 0x3f	; 63
    a21e:	f8 94       	cli
    a220:	de bf       	out	0x3e, r29	; 62
    a222:	0f be       	out	0x3f, r0	; 63
    a224:	cd bf       	out	0x3d, r28	; 61
    a226:	69 83       	std	Y+1, r22	; 0x01
    a228:	7a 83       	std	Y+2, r23	; 0x02
    a22a:	8b 83       	std	Y+3, r24	; 0x03
    a22c:	9c 83       	std	Y+4, r25	; 0x04
    a22e:	2d 83       	std	Y+5, r18	; 0x05
    a230:	3e 83       	std	Y+6, r19	; 0x06
    a232:	4f 83       	std	Y+7, r20	; 0x07
    a234:	58 87       	std	Y+8, r21	; 0x08
    a236:	e9 86       	std	Y+9, r14	; 0x09
    a238:	fa 86       	std	Y+10, r15	; 0x0a
    a23a:	0b 87       	std	Y+11, r16	; 0x0b
    a23c:	1c 87       	std	Y+12, r17	; 0x0c
    a23e:	ad 86       	std	Y+13, r10	; 0x0d
    a240:	be 86       	std	Y+14, r11	; 0x0e
    a242:	cf 86       	std	Y+15, r12	; 0x0f
    a244:	d8 8a       	std	Y+16, r13	; 0x10
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    a246:	29 81       	ldd	r18, Y+1	; 0x01
    a248:	3a 81       	ldd	r19, Y+2	; 0x02
    a24a:	4b 81       	ldd	r20, Y+3	; 0x03
    a24c:	5c 81       	ldd	r21, Y+4	; 0x04
    a24e:	8d 81       	ldd	r24, Y+5	; 0x05
    a250:	9e 81       	ldd	r25, Y+6	; 0x06
    a252:	af 81       	ldd	r26, Y+7	; 0x07
    a254:	b8 85       	ldd	r27, Y+8	; 0x08
    a256:	79 01       	movw	r14, r18
    a258:	8a 01       	movw	r16, r20
    a25a:	e8 1a       	sub	r14, r24
    a25c:	f9 0a       	sbc	r15, r25
    a25e:	0a 0b       	sbc	r16, r26
    a260:	1b 0b       	sbc	r17, r27
    a262:	2d 8d       	ldd	r18, Y+29	; 0x1d
    a264:	3e 8d       	ldd	r19, Y+30	; 0x1e
    a266:	4f 8d       	ldd	r20, Y+31	; 0x1f
    a268:	58 a1       	ldd	r21, Y+32	; 0x20
    a26a:	8d 85       	ldd	r24, Y+13	; 0x0d
    a26c:	9e 85       	ldd	r25, Y+14	; 0x0e
    a26e:	af 85       	ldd	r26, Y+15	; 0x0f
    a270:	b8 89       	ldd	r27, Y+16	; 0x10
    a272:	28 1b       	sub	r18, r24
    a274:	39 0b       	sbc	r19, r25
    a276:	4a 0b       	sbc	r20, r26
    a278:	5b 0b       	sbc	r21, r27
    a27a:	c8 01       	movw	r24, r16
    a27c:	b7 01       	movw	r22, r14
    a27e:	0e 94 b8 81 	call	0x10370	; 0x10370 <__mulsi3>
    a282:	7b 01       	movw	r14, r22
    a284:	8c 01       	movw	r16, r24
    a286:	29 85       	ldd	r18, Y+9	; 0x09
    a288:	3a 85       	ldd	r19, Y+10	; 0x0a
    a28a:	4b 85       	ldd	r20, Y+11	; 0x0b
    a28c:	5c 85       	ldd	r21, Y+12	; 0x0c
    a28e:	8d 81       	ldd	r24, Y+5	; 0x05
    a290:	9e 81       	ldd	r25, Y+6	; 0x06
    a292:	af 81       	ldd	r26, Y+7	; 0x07
    a294:	b8 85       	ldd	r27, Y+8	; 0x08
    a296:	28 1b       	sub	r18, r24
    a298:	39 0b       	sbc	r19, r25
    a29a:	4a 0b       	sbc	r20, r26
    a29c:	5b 0b       	sbc	r21, r27
    a29e:	c8 01       	movw	r24, r16
    a2a0:	b7 01       	movw	r22, r14
    a2a2:	0e 94 2c 82 	call	0x10458	; 0x10458 <__divmodsi4>
    a2a6:	da 01       	movw	r26, r20
    a2a8:	c9 01       	movw	r24, r18
    a2aa:	9c 01       	movw	r18, r24
    a2ac:	ad 01       	movw	r20, r26
    a2ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    a2b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    a2b2:	af 85       	ldd	r26, Y+15	; 0x0f
    a2b4:	b8 89       	ldd	r27, Y+16	; 0x10
    a2b6:	82 0f       	add	r24, r18
    a2b8:	93 1f       	adc	r25, r19
    a2ba:	a4 1f       	adc	r26, r20
    a2bc:	b5 1f       	adc	r27, r21
}
    a2be:	bc 01       	movw	r22, r24
    a2c0:	cd 01       	movw	r24, r26
    a2c2:	60 96       	adiw	r28, 0x10	; 16
    a2c4:	0f b6       	in	r0, 0x3f	; 63
    a2c6:	f8 94       	cli
    a2c8:	de bf       	out	0x3e, r29	; 62
    a2ca:	0f be       	out	0x3f, r0	; 63
    a2cc:	cd bf       	out	0x3d, r28	; 61
    a2ce:	cf 91       	pop	r28
    a2d0:	df 91       	pop	r29
    a2d2:	1f 91       	pop	r17
    a2d4:	0f 91       	pop	r16
    a2d6:	ff 90       	pop	r15
    a2d8:	ef 90       	pop	r14
    a2da:	df 90       	pop	r13
    a2dc:	cf 90       	pop	r12
    a2de:	bf 90       	pop	r11
    a2e0:	af 90       	pop	r10
    a2e2:	08 95       	ret

0000a2e4 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
    a2e4:	df 93       	push	r29
    a2e6:	cf 93       	push	r28
    a2e8:	00 d0       	rcall	.+0      	; 0xa2ea <_Z8makeWordj+0x6>
    a2ea:	cd b7       	in	r28, 0x3d	; 61
    a2ec:	de b7       	in	r29, 0x3e	; 62
    a2ee:	9a 83       	std	Y+2, r25	; 0x02
    a2f0:	89 83       	std	Y+1, r24	; 0x01
    a2f2:	89 81       	ldd	r24, Y+1	; 0x01
    a2f4:	9a 81       	ldd	r25, Y+2	; 0x02
    a2f6:	0f 90       	pop	r0
    a2f8:	0f 90       	pop	r0
    a2fa:	cf 91       	pop	r28
    a2fc:	df 91       	pop	r29
    a2fe:	08 95       	ret

0000a300 <_Z8makeWordhh>:
    a300:	df 93       	push	r29
    a302:	cf 93       	push	r28
    a304:	00 d0       	rcall	.+0      	; 0xa306 <_Z8makeWordhh+0x6>
    a306:	cd b7       	in	r28, 0x3d	; 61
    a308:	de b7       	in	r29, 0x3e	; 62
    a30a:	89 83       	std	Y+1, r24	; 0x01
    a30c:	6a 83       	std	Y+2, r22	; 0x02
    a30e:	89 81       	ldd	r24, Y+1	; 0x01
    a310:	88 2f       	mov	r24, r24
    a312:	90 e0       	ldi	r25, 0x00	; 0
    a314:	38 2f       	mov	r19, r24
    a316:	22 27       	eor	r18, r18
    a318:	8a 81       	ldd	r24, Y+2	; 0x02
    a31a:	88 2f       	mov	r24, r24
    a31c:	90 e0       	ldi	r25, 0x00	; 0
    a31e:	82 2b       	or	r24, r18
    a320:	93 2b       	or	r25, r19
    a322:	0f 90       	pop	r0
    a324:	0f 90       	pop	r0
    a326:	cf 91       	pop	r28
    a328:	df 91       	pop	r29
    a32a:	08 95       	ret

0000a32c <_Z6randoml>:
  if (seed != 0) {
    srandom(seed);
  }
}

long random(long howbig)
    a32c:	df 93       	push	r29
    a32e:	cf 93       	push	r28
    a330:	cd b7       	in	r28, 0x3d	; 61
    a332:	de b7       	in	r29, 0x3e	; 62
    a334:	28 97       	sbiw	r28, 0x08	; 8
    a336:	0f b6       	in	r0, 0x3f	; 63
    a338:	f8 94       	cli
    a33a:	de bf       	out	0x3e, r29	; 62
    a33c:	0f be       	out	0x3f, r0	; 63
    a33e:	cd bf       	out	0x3d, r28	; 61
    a340:	69 83       	std	Y+1, r22	; 0x01
    a342:	7a 83       	std	Y+2, r23	; 0x02
    a344:	8b 83       	std	Y+3, r24	; 0x03
    a346:	9c 83       	std	Y+4, r25	; 0x04
{
  if (howbig == 0) {
    a348:	89 81       	ldd	r24, Y+1	; 0x01
    a34a:	9a 81       	ldd	r25, Y+2	; 0x02
    a34c:	ab 81       	ldd	r26, Y+3	; 0x03
    a34e:	bc 81       	ldd	r27, Y+4	; 0x04
    a350:	00 97       	sbiw	r24, 0x00	; 0
    a352:	a1 05       	cpc	r26, r1
    a354:	b1 05       	cpc	r27, r1
    a356:	29 f4       	brne	.+10     	; 0xa362 <_Z6randoml+0x36>
    return 0;
    a358:	1d 82       	std	Y+5, r1	; 0x05
    a35a:	1e 82       	std	Y+6, r1	; 0x06
    a35c:	1f 82       	std	Y+7, r1	; 0x07
    a35e:	18 86       	std	Y+8, r1	; 0x08
    a360:	12 c0       	rjmp	.+36     	; 0xa386 <_Z6randoml+0x5a>
  }
  return random() % howbig;
    a362:	0e 94 dc 83 	call	0x107b8	; 0x107b8 <random>
    a366:	dc 01       	movw	r26, r24
    a368:	cb 01       	movw	r24, r22
    a36a:	29 81       	ldd	r18, Y+1	; 0x01
    a36c:	3a 81       	ldd	r19, Y+2	; 0x02
    a36e:	4b 81       	ldd	r20, Y+3	; 0x03
    a370:	5c 81       	ldd	r21, Y+4	; 0x04
    a372:	bc 01       	movw	r22, r24
    a374:	cd 01       	movw	r24, r26
    a376:	0e 94 2c 82 	call	0x10458	; 0x10458 <__divmodsi4>
    a37a:	dc 01       	movw	r26, r24
    a37c:	cb 01       	movw	r24, r22
    a37e:	8d 83       	std	Y+5, r24	; 0x05
    a380:	9e 83       	std	Y+6, r25	; 0x06
    a382:	af 83       	std	Y+7, r26	; 0x07
    a384:	b8 87       	std	Y+8, r27	; 0x08
    a386:	8d 81       	ldd	r24, Y+5	; 0x05
    a388:	9e 81       	ldd	r25, Y+6	; 0x06
    a38a:	af 81       	ldd	r26, Y+7	; 0x07
    a38c:	b8 85       	ldd	r27, Y+8	; 0x08
}
    a38e:	bc 01       	movw	r22, r24
    a390:	cd 01       	movw	r24, r26
    a392:	28 96       	adiw	r28, 0x08	; 8
    a394:	0f b6       	in	r0, 0x3f	; 63
    a396:	f8 94       	cli
    a398:	de bf       	out	0x3e, r29	; 62
    a39a:	0f be       	out	0x3f, r0	; 63
    a39c:	cd bf       	out	0x3d, r28	; 61
    a39e:	cf 91       	pop	r28
    a3a0:	df 91       	pop	r29
    a3a2:	08 95       	ret

0000a3a4 <_Z6randomll>:

long random(long howsmall, long howbig)
    a3a4:	ef 92       	push	r14
    a3a6:	ff 92       	push	r15
    a3a8:	0f 93       	push	r16
    a3aa:	1f 93       	push	r17
    a3ac:	df 93       	push	r29
    a3ae:	cf 93       	push	r28
    a3b0:	cd b7       	in	r28, 0x3d	; 61
    a3b2:	de b7       	in	r29, 0x3e	; 62
    a3b4:	60 97       	sbiw	r28, 0x10	; 16
    a3b6:	0f b6       	in	r0, 0x3f	; 63
    a3b8:	f8 94       	cli
    a3ba:	de bf       	out	0x3e, r29	; 62
    a3bc:	0f be       	out	0x3f, r0	; 63
    a3be:	cd bf       	out	0x3d, r28	; 61
    a3c0:	6d 83       	std	Y+5, r22	; 0x05
    a3c2:	7e 83       	std	Y+6, r23	; 0x06
    a3c4:	8f 83       	std	Y+7, r24	; 0x07
    a3c6:	98 87       	std	Y+8, r25	; 0x08
    a3c8:	29 87       	std	Y+9, r18	; 0x09
    a3ca:	3a 87       	std	Y+10, r19	; 0x0a
    a3cc:	4b 87       	std	Y+11, r20	; 0x0b
    a3ce:	5c 87       	std	Y+12, r21	; 0x0c
{
  if (howsmall >= howbig) {
    a3d0:	2d 81       	ldd	r18, Y+5	; 0x05
    a3d2:	3e 81       	ldd	r19, Y+6	; 0x06
    a3d4:	4f 81       	ldd	r20, Y+7	; 0x07
    a3d6:	58 85       	ldd	r21, Y+8	; 0x08
    a3d8:	89 85       	ldd	r24, Y+9	; 0x09
    a3da:	9a 85       	ldd	r25, Y+10	; 0x0a
    a3dc:	ab 85       	ldd	r26, Y+11	; 0x0b
    a3de:	bc 85       	ldd	r27, Y+12	; 0x0c
    a3e0:	28 17       	cp	r18, r24
    a3e2:	39 07       	cpc	r19, r25
    a3e4:	4a 07       	cpc	r20, r26
    a3e6:	5b 07       	cpc	r21, r27
    a3e8:	4c f0       	brlt	.+18     	; 0xa3fc <_Z6randomll+0x58>
    return howsmall;
    a3ea:	ed 80       	ldd	r14, Y+5	; 0x05
    a3ec:	fe 80       	ldd	r15, Y+6	; 0x06
    a3ee:	0f 81       	ldd	r16, Y+7	; 0x07
    a3f0:	18 85       	ldd	r17, Y+8	; 0x08
    a3f2:	ed 86       	std	Y+13, r14	; 0x0d
    a3f4:	fe 86       	std	Y+14, r15	; 0x0e
    a3f6:	0f 87       	std	Y+15, r16	; 0x0f
    a3f8:	18 8b       	std	Y+16, r17	; 0x10
    a3fa:	2c c0       	rjmp	.+88     	; 0xa454 <_Z6randomll+0xb0>
  }
  long diff = howbig - howsmall;
    a3fc:	29 85       	ldd	r18, Y+9	; 0x09
    a3fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    a400:	4b 85       	ldd	r20, Y+11	; 0x0b
    a402:	5c 85       	ldd	r21, Y+12	; 0x0c
    a404:	8d 81       	ldd	r24, Y+5	; 0x05
    a406:	9e 81       	ldd	r25, Y+6	; 0x06
    a408:	af 81       	ldd	r26, Y+7	; 0x07
    a40a:	b8 85       	ldd	r27, Y+8	; 0x08
    a40c:	79 01       	movw	r14, r18
    a40e:	8a 01       	movw	r16, r20
    a410:	e8 1a       	sub	r14, r24
    a412:	f9 0a       	sbc	r15, r25
    a414:	0a 0b       	sbc	r16, r26
    a416:	1b 0b       	sbc	r17, r27
    a418:	d8 01       	movw	r26, r16
    a41a:	c7 01       	movw	r24, r14
    a41c:	89 83       	std	Y+1, r24	; 0x01
    a41e:	9a 83       	std	Y+2, r25	; 0x02
    a420:	ab 83       	std	Y+3, r26	; 0x03
    a422:	bc 83       	std	Y+4, r27	; 0x04
  return random(diff) + howsmall;
    a424:	89 81       	ldd	r24, Y+1	; 0x01
    a426:	9a 81       	ldd	r25, Y+2	; 0x02
    a428:	ab 81       	ldd	r26, Y+3	; 0x03
    a42a:	bc 81       	ldd	r27, Y+4	; 0x04
    a42c:	bc 01       	movw	r22, r24
    a42e:	cd 01       	movw	r24, r26
    a430:	0e 94 96 51 	call	0xa32c	; 0xa32c <_Z6randoml>
    a434:	9b 01       	movw	r18, r22
    a436:	ac 01       	movw	r20, r24
    a438:	8d 81       	ldd	r24, Y+5	; 0x05
    a43a:	9e 81       	ldd	r25, Y+6	; 0x06
    a43c:	af 81       	ldd	r26, Y+7	; 0x07
    a43e:	b8 85       	ldd	r27, Y+8	; 0x08
    a440:	79 01       	movw	r14, r18
    a442:	8a 01       	movw	r16, r20
    a444:	e8 0e       	add	r14, r24
    a446:	f9 1e       	adc	r15, r25
    a448:	0a 1f       	adc	r16, r26
    a44a:	1b 1f       	adc	r17, r27
    a44c:	ed 86       	std	Y+13, r14	; 0x0d
    a44e:	fe 86       	std	Y+14, r15	; 0x0e
    a450:	0f 87       	std	Y+15, r16	; 0x0f
    a452:	18 8b       	std	Y+16, r17	; 0x10
    a454:	8d 85       	ldd	r24, Y+13	; 0x0d
    a456:	9e 85       	ldd	r25, Y+14	; 0x0e
    a458:	af 85       	ldd	r26, Y+15	; 0x0f
    a45a:	b8 89       	ldd	r27, Y+16	; 0x10
}
    a45c:	bc 01       	movw	r22, r24
    a45e:	cd 01       	movw	r24, r26
    a460:	60 96       	adiw	r28, 0x10	; 16
    a462:	0f b6       	in	r0, 0x3f	; 63
    a464:	f8 94       	cli
    a466:	de bf       	out	0x3e, r29	; 62
    a468:	0f be       	out	0x3f, r0	; 63
    a46a:	cd bf       	out	0x3d, r28	; 61
    a46c:	cf 91       	pop	r28
    a46e:	df 91       	pop	r29
    a470:	1f 91       	pop	r17
    a472:	0f 91       	pop	r16
    a474:	ff 90       	pop	r15
    a476:	ef 90       	pop	r14
    a478:	08 95       	ret

0000a47a <_Z10randomSeedj>:

extern "C" {
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
    a47a:	df 93       	push	r29
    a47c:	cf 93       	push	r28
    a47e:	00 d0       	rcall	.+0      	; 0xa480 <_Z10randomSeedj+0x6>
    a480:	cd b7       	in	r28, 0x3d	; 61
    a482:	de b7       	in	r29, 0x3e	; 62
    a484:	9a 83       	std	Y+2, r25	; 0x02
    a486:	89 83       	std	Y+1, r24	; 0x01
{
  if (seed != 0) {
    a488:	89 81       	ldd	r24, Y+1	; 0x01
    a48a:	9a 81       	ldd	r25, Y+2	; 0x02
    a48c:	00 97       	sbiw	r24, 0x00	; 0
    a48e:	49 f0       	breq	.+18     	; 0xa4a2 <_Z10randomSeedj+0x28>
    srandom(seed);
    a490:	89 81       	ldd	r24, Y+1	; 0x01
    a492:	9a 81       	ldd	r25, Y+2	; 0x02
    a494:	cc 01       	movw	r24, r24
    a496:	a0 e0       	ldi	r26, 0x00	; 0
    a498:	b0 e0       	ldi	r27, 0x00	; 0
    a49a:	bc 01       	movw	r22, r24
    a49c:	cd 01       	movw	r24, r26
    a49e:	0e 94 e1 83 	call	0x107c2	; 0x107c2 <srandom>
  }
}
    a4a2:	0f 90       	pop	r0
    a4a4:	0f 90       	pop	r0
    a4a6:	cf 91       	pop	r28
    a4a8:	df 91       	pop	r29
    a4aa:	08 95       	ret

0000a4ac <_ZN6String4initEv>:

/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
    a4ac:	df 93       	push	r29
    a4ae:	cf 93       	push	r28
    a4b0:	00 d0       	rcall	.+0      	; 0xa4b2 <_ZN6String4initEv+0x6>
    a4b2:	cd b7       	in	r28, 0x3d	; 61
    a4b4:	de b7       	in	r29, 0x3e	; 62
    a4b6:	9a 83       	std	Y+2, r25	; 0x02
    a4b8:	89 83       	std	Y+1, r24	; 0x01
{
	buffer = NULL;
    a4ba:	e9 81       	ldd	r30, Y+1	; 0x01
    a4bc:	fa 81       	ldd	r31, Y+2	; 0x02
    a4be:	11 82       	std	Z+1, r1	; 0x01
    a4c0:	10 82       	st	Z, r1
	capacity = 0;
    a4c2:	e9 81       	ldd	r30, Y+1	; 0x01
    a4c4:	fa 81       	ldd	r31, Y+2	; 0x02
    a4c6:	13 82       	std	Z+3, r1	; 0x03
    a4c8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    a4ca:	e9 81       	ldd	r30, Y+1	; 0x01
    a4cc:	fa 81       	ldd	r31, Y+2	; 0x02
    a4ce:	15 82       	std	Z+5, r1	; 0x05
    a4d0:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    a4d2:	e9 81       	ldd	r30, Y+1	; 0x01
    a4d4:	fa 81       	ldd	r31, Y+2	; 0x02
    a4d6:	16 82       	std	Z+6, r1	; 0x06
}
    a4d8:	0f 90       	pop	r0
    a4da:	0f 90       	pop	r0
    a4dc:	cf 91       	pop	r28
    a4de:	df 91       	pop	r29
    a4e0:	08 95       	ret

0000a4e2 <_ZN6String9setCharAtEjc>:
char String::charAt(unsigned int loc) const
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
    a4e2:	df 93       	push	r29
    a4e4:	cf 93       	push	r28
    a4e6:	00 d0       	rcall	.+0      	; 0xa4e8 <_ZN6String9setCharAtEjc+0x6>
    a4e8:	00 d0       	rcall	.+0      	; 0xa4ea <_ZN6String9setCharAtEjc+0x8>
    a4ea:	0f 92       	push	r0
    a4ec:	cd b7       	in	r28, 0x3d	; 61
    a4ee:	de b7       	in	r29, 0x3e	; 62
    a4f0:	9a 83       	std	Y+2, r25	; 0x02
    a4f2:	89 83       	std	Y+1, r24	; 0x01
    a4f4:	7c 83       	std	Y+4, r23	; 0x04
    a4f6:	6b 83       	std	Y+3, r22	; 0x03
    a4f8:	4d 83       	std	Y+5, r20	; 0x05
{
	if (loc < len) buffer[loc] = c;
    a4fa:	e9 81       	ldd	r30, Y+1	; 0x01
    a4fc:	fa 81       	ldd	r31, Y+2	; 0x02
    a4fe:	24 81       	ldd	r18, Z+4	; 0x04
    a500:	35 81       	ldd	r19, Z+5	; 0x05
    a502:	8b 81       	ldd	r24, Y+3	; 0x03
    a504:	9c 81       	ldd	r25, Y+4	; 0x04
    a506:	82 17       	cp	r24, r18
    a508:	93 07       	cpc	r25, r19
    a50a:	58 f4       	brcc	.+22     	; 0xa522 <_ZN6String9setCharAtEjc+0x40>
    a50c:	e9 81       	ldd	r30, Y+1	; 0x01
    a50e:	fa 81       	ldd	r31, Y+2	; 0x02
    a510:	20 81       	ld	r18, Z
    a512:	31 81       	ldd	r19, Z+1	; 0x01
    a514:	8b 81       	ldd	r24, Y+3	; 0x03
    a516:	9c 81       	ldd	r25, Y+4	; 0x04
    a518:	f9 01       	movw	r30, r18
    a51a:	e8 0f       	add	r30, r24
    a51c:	f9 1f       	adc	r31, r25
    a51e:	8d 81       	ldd	r24, Y+5	; 0x05
    a520:	80 83       	st	Z, r24
}
    a522:	0f 90       	pop	r0
    a524:	0f 90       	pop	r0
    a526:	0f 90       	pop	r0
    a528:	0f 90       	pop	r0
    a52a:	0f 90       	pop	r0
    a52c:	cf 91       	pop	r28
    a52e:	df 91       	pop	r29
    a530:	08 95       	ret

0000a532 <_ZN6StringixEj>:

char & String::operator[](unsigned int index)
    a532:	df 93       	push	r29
    a534:	cf 93       	push	r28
    a536:	00 d0       	rcall	.+0      	; 0xa538 <_ZN6StringixEj+0x6>
    a538:	00 d0       	rcall	.+0      	; 0xa53a <_ZN6StringixEj+0x8>
    a53a:	00 d0       	rcall	.+0      	; 0xa53c <_ZN6StringixEj+0xa>
    a53c:	cd b7       	in	r28, 0x3d	; 61
    a53e:	de b7       	in	r29, 0x3e	; 62
    a540:	9a 83       	std	Y+2, r25	; 0x02
    a542:	89 83       	std	Y+1, r24	; 0x01
    a544:	7c 83       	std	Y+4, r23	; 0x04
    a546:	6b 83       	std	Y+3, r22	; 0x03
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    a548:	e9 81       	ldd	r30, Y+1	; 0x01
    a54a:	fa 81       	ldd	r31, Y+2	; 0x02
    a54c:	24 81       	ldd	r18, Z+4	; 0x04
    a54e:	35 81       	ldd	r19, Z+5	; 0x05
    a550:	8b 81       	ldd	r24, Y+3	; 0x03
    a552:	9c 81       	ldd	r25, Y+4	; 0x04
    a554:	82 17       	cp	r24, r18
    a556:	93 07       	cpc	r25, r19
    a558:	30 f4       	brcc	.+12     	; 0xa566 <_ZN6StringixEj+0x34>
    a55a:	e9 81       	ldd	r30, Y+1	; 0x01
    a55c:	fa 81       	ldd	r31, Y+2	; 0x02
    a55e:	80 81       	ld	r24, Z
    a560:	91 81       	ldd	r25, Z+1	; 0x01
    a562:	00 97       	sbiw	r24, 0x00	; 0
    a564:	39 f4       	brne	.+14     	; 0xa574 <_ZN6StringixEj+0x42>
		dummy_writable_char = 0;
    a566:	10 92 5a 06 	sts	0x065A, r1
		return dummy_writable_char;
    a56a:	4a e5       	ldi	r20, 0x5A	; 90
    a56c:	56 e0       	ldi	r21, 0x06	; 6
    a56e:	5e 83       	std	Y+6, r21	; 0x06
    a570:	4d 83       	std	Y+5, r20	; 0x05
    a572:	0b c0       	rjmp	.+22     	; 0xa58a <_ZN6StringixEj+0x58>
	}
	return buffer[index];
    a574:	e9 81       	ldd	r30, Y+1	; 0x01
    a576:	fa 81       	ldd	r31, Y+2	; 0x02
    a578:	20 81       	ld	r18, Z
    a57a:	31 81       	ldd	r19, Z+1	; 0x01
    a57c:	8b 81       	ldd	r24, Y+3	; 0x03
    a57e:	9c 81       	ldd	r25, Y+4	; 0x04
    a580:	a9 01       	movw	r20, r18
    a582:	48 0f       	add	r20, r24
    a584:	59 1f       	adc	r21, r25
    a586:	5e 83       	std	Y+6, r21	; 0x06
    a588:	4d 83       	std	Y+5, r20	; 0x05
    a58a:	8d 81       	ldd	r24, Y+5	; 0x05
    a58c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    a58e:	26 96       	adiw	r28, 0x06	; 6
    a590:	0f b6       	in	r0, 0x3f	; 63
    a592:	f8 94       	cli
    a594:	de bf       	out	0x3e, r29	; 62
    a596:	0f be       	out	0x3f, r0	; 63
    a598:	cd bf       	out	0x3d, r28	; 61
    a59a:	cf 91       	pop	r28
    a59c:	df 91       	pop	r29
    a59e:	08 95       	ret

0000a5a0 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
    a5a0:	df 93       	push	r29
    a5a2:	cf 93       	push	r28
    a5a4:	00 d0       	rcall	.+0      	; 0xa5a6 <_ZNK6StringixEj+0x6>
    a5a6:	00 d0       	rcall	.+0      	; 0xa5a8 <_ZNK6StringixEj+0x8>
    a5a8:	0f 92       	push	r0
    a5aa:	cd b7       	in	r28, 0x3d	; 61
    a5ac:	de b7       	in	r29, 0x3e	; 62
    a5ae:	9a 83       	std	Y+2, r25	; 0x02
    a5b0:	89 83       	std	Y+1, r24	; 0x01
    a5b2:	7c 83       	std	Y+4, r23	; 0x04
    a5b4:	6b 83       	std	Y+3, r22	; 0x03
{
	if (index >= len || !buffer) return 0;
    a5b6:	e9 81       	ldd	r30, Y+1	; 0x01
    a5b8:	fa 81       	ldd	r31, Y+2	; 0x02
    a5ba:	24 81       	ldd	r18, Z+4	; 0x04
    a5bc:	35 81       	ldd	r19, Z+5	; 0x05
    a5be:	8b 81       	ldd	r24, Y+3	; 0x03
    a5c0:	9c 81       	ldd	r25, Y+4	; 0x04
    a5c2:	82 17       	cp	r24, r18
    a5c4:	93 07       	cpc	r25, r19
    a5c6:	30 f4       	brcc	.+12     	; 0xa5d4 <_ZNK6StringixEj+0x34>
    a5c8:	e9 81       	ldd	r30, Y+1	; 0x01
    a5ca:	fa 81       	ldd	r31, Y+2	; 0x02
    a5cc:	80 81       	ld	r24, Z
    a5ce:	91 81       	ldd	r25, Z+1	; 0x01
    a5d0:	00 97       	sbiw	r24, 0x00	; 0
    a5d2:	11 f4       	brne	.+4      	; 0xa5d8 <_ZNK6StringixEj+0x38>
    a5d4:	1d 82       	std	Y+5, r1	; 0x05
    a5d6:	0b c0       	rjmp	.+22     	; 0xa5ee <_ZNK6StringixEj+0x4e>
	return buffer[index];
    a5d8:	e9 81       	ldd	r30, Y+1	; 0x01
    a5da:	fa 81       	ldd	r31, Y+2	; 0x02
    a5dc:	20 81       	ld	r18, Z
    a5de:	31 81       	ldd	r19, Z+1	; 0x01
    a5e0:	8b 81       	ldd	r24, Y+3	; 0x03
    a5e2:	9c 81       	ldd	r25, Y+4	; 0x04
    a5e4:	f9 01       	movw	r30, r18
    a5e6:	e8 0f       	add	r30, r24
    a5e8:	f9 1f       	adc	r31, r25
    a5ea:	80 81       	ld	r24, Z
    a5ec:	8d 83       	std	Y+5, r24	; 0x05
    a5ee:	8d 81       	ldd	r24, Y+5	; 0x05
}
    a5f0:	0f 90       	pop	r0
    a5f2:	0f 90       	pop	r0
    a5f4:	0f 90       	pop	r0
    a5f6:	0f 90       	pop	r0
    a5f8:	0f 90       	pop	r0
    a5fa:	cf 91       	pop	r28
    a5fc:	df 91       	pop	r29
    a5fe:	08 95       	ret

0000a600 <_ZNK6String6charAtEj>:

/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
    a600:	df 93       	push	r29
    a602:	cf 93       	push	r28
    a604:	00 d0       	rcall	.+0      	; 0xa606 <_ZNK6String6charAtEj+0x6>
    a606:	00 d0       	rcall	.+0      	; 0xa608 <_ZNK6String6charAtEj+0x8>
    a608:	cd b7       	in	r28, 0x3d	; 61
    a60a:	de b7       	in	r29, 0x3e	; 62
    a60c:	9a 83       	std	Y+2, r25	; 0x02
    a60e:	89 83       	std	Y+1, r24	; 0x01
    a610:	7c 83       	std	Y+4, r23	; 0x04
    a612:	6b 83       	std	Y+3, r22	; 0x03
{
	return operator[](loc);
    a614:	89 81       	ldd	r24, Y+1	; 0x01
    a616:	9a 81       	ldd	r25, Y+2	; 0x02
    a618:	2b 81       	ldd	r18, Y+3	; 0x03
    a61a:	3c 81       	ldd	r19, Y+4	; 0x04
    a61c:	b9 01       	movw	r22, r18
    a61e:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <_ZNK6StringixEj>
}
    a622:	0f 90       	pop	r0
    a624:	0f 90       	pop	r0
    a626:	0f 90       	pop	r0
    a628:	0f 90       	pop	r0
    a62a:	cf 91       	pop	r28
    a62c:	df 91       	pop	r29
    a62e:	08 95       	ret

0000a630 <_ZN6String7replaceEcc>:

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
    a630:	df 93       	push	r29
    a632:	cf 93       	push	r28
    a634:	00 d0       	rcall	.+0      	; 0xa636 <_ZN6String7replaceEcc+0x6>
    a636:	00 d0       	rcall	.+0      	; 0xa638 <_ZN6String7replaceEcc+0x8>
    a638:	00 d0       	rcall	.+0      	; 0xa63a <_ZN6String7replaceEcc+0xa>
    a63a:	cd b7       	in	r28, 0x3d	; 61
    a63c:	de b7       	in	r29, 0x3e	; 62
    a63e:	9c 83       	std	Y+4, r25	; 0x04
    a640:	8b 83       	std	Y+3, r24	; 0x03
    a642:	6d 83       	std	Y+5, r22	; 0x05
    a644:	4e 83       	std	Y+6, r20	; 0x06
{
	if (!buffer) return;
    a646:	eb 81       	ldd	r30, Y+3	; 0x03
    a648:	fc 81       	ldd	r31, Y+4	; 0x04
    a64a:	80 81       	ld	r24, Z
    a64c:	91 81       	ldd	r25, Z+1	; 0x01
    a64e:	00 97       	sbiw	r24, 0x00	; 0
    a650:	d9 f0       	breq	.+54     	; 0xa688 <_ZN6String7replaceEcc+0x58>
	for (char *p = buffer; *p; p++) {
    a652:	eb 81       	ldd	r30, Y+3	; 0x03
    a654:	fc 81       	ldd	r31, Y+4	; 0x04
    a656:	80 81       	ld	r24, Z
    a658:	91 81       	ldd	r25, Z+1	; 0x01
    a65a:	9a 83       	std	Y+2, r25	; 0x02
    a65c:	89 83       	std	Y+1, r24	; 0x01
    a65e:	0f c0       	rjmp	.+30     	; 0xa67e <_ZN6String7replaceEcc+0x4e>
		if (*p == find) *p = replace;
    a660:	e9 81       	ldd	r30, Y+1	; 0x01
    a662:	fa 81       	ldd	r31, Y+2	; 0x02
    a664:	90 81       	ld	r25, Z
    a666:	8d 81       	ldd	r24, Y+5	; 0x05
    a668:	98 17       	cp	r25, r24
    a66a:	21 f4       	brne	.+8      	; 0xa674 <_ZN6String7replaceEcc+0x44>
    a66c:	e9 81       	ldd	r30, Y+1	; 0x01
    a66e:	fa 81       	ldd	r31, Y+2	; 0x02
    a670:	8e 81       	ldd	r24, Y+6	; 0x06
    a672:	80 83       	st	Z, r24
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    a674:	89 81       	ldd	r24, Y+1	; 0x01
    a676:	9a 81       	ldd	r25, Y+2	; 0x02
    a678:	01 96       	adiw	r24, 0x01	; 1
    a67a:	9a 83       	std	Y+2, r25	; 0x02
    a67c:	89 83       	std	Y+1, r24	; 0x01
    a67e:	e9 81       	ldd	r30, Y+1	; 0x01
    a680:	fa 81       	ldd	r31, Y+2	; 0x02
    a682:	80 81       	ld	r24, Z
    a684:	88 23       	and	r24, r24
    a686:	61 f7       	brne	.-40     	; 0xa660 <_ZN6String7replaceEcc+0x30>
		if (*p == find) *p = replace;
	}
}
    a688:	26 96       	adiw	r28, 0x06	; 6
    a68a:	0f b6       	in	r0, 0x3f	; 63
    a68c:	f8 94       	cli
    a68e:	de bf       	out	0x3e, r29	; 62
    a690:	0f be       	out	0x3f, r0	; 63
    a692:	cd bf       	out	0x3d, r28	; 61
    a694:	cf 91       	pop	r28
    a696:	df 91       	pop	r29
    a698:	08 95       	ret

0000a69a <_ZNK6String5toIntEv>:

/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
    a69a:	df 93       	push	r29
    a69c:	cf 93       	push	r28
    a69e:	00 d0       	rcall	.+0      	; 0xa6a0 <_ZNK6String5toIntEv+0x6>
    a6a0:	00 d0       	rcall	.+0      	; 0xa6a2 <_ZNK6String5toIntEv+0x8>
    a6a2:	00 d0       	rcall	.+0      	; 0xa6a4 <_ZNK6String5toIntEv+0xa>
    a6a4:	cd b7       	in	r28, 0x3d	; 61
    a6a6:	de b7       	in	r29, 0x3e	; 62
    a6a8:	9a 83       	std	Y+2, r25	; 0x02
    a6aa:	89 83       	std	Y+1, r24	; 0x01
{
	if (buffer) return atol(buffer);
    a6ac:	e9 81       	ldd	r30, Y+1	; 0x01
    a6ae:	fa 81       	ldd	r31, Y+2	; 0x02
    a6b0:	80 81       	ld	r24, Z
    a6b2:	91 81       	ldd	r25, Z+1	; 0x01
    a6b4:	00 97       	sbiw	r24, 0x00	; 0
    a6b6:	59 f0       	breq	.+22     	; 0xa6ce <_ZNK6String5toIntEv+0x34>
    a6b8:	e9 81       	ldd	r30, Y+1	; 0x01
    a6ba:	fa 81       	ldd	r31, Y+2	; 0x02
    a6bc:	80 81       	ld	r24, Z
    a6be:	91 81       	ldd	r25, Z+1	; 0x01
    a6c0:	0e 94 b8 84 	call	0x10970	; 0x10970 <atol>
    a6c4:	6b 83       	std	Y+3, r22	; 0x03
    a6c6:	7c 83       	std	Y+4, r23	; 0x04
    a6c8:	8d 83       	std	Y+5, r24	; 0x05
    a6ca:	9e 83       	std	Y+6, r25	; 0x06
    a6cc:	04 c0       	rjmp	.+8      	; 0xa6d6 <_ZNK6String5toIntEv+0x3c>
	return 0;
    a6ce:	1b 82       	std	Y+3, r1	; 0x03
    a6d0:	1c 82       	std	Y+4, r1	; 0x04
    a6d2:	1d 82       	std	Y+5, r1	; 0x05
    a6d4:	1e 82       	std	Y+6, r1	; 0x06
    a6d6:	8b 81       	ldd	r24, Y+3	; 0x03
    a6d8:	9c 81       	ldd	r25, Y+4	; 0x04
    a6da:	ad 81       	ldd	r26, Y+5	; 0x05
    a6dc:	be 81       	ldd	r27, Y+6	; 0x06
}
    a6de:	bc 01       	movw	r22, r24
    a6e0:	cd 01       	movw	r24, r26
    a6e2:	26 96       	adiw	r28, 0x06	; 6
    a6e4:	0f b6       	in	r0, 0x3f	; 63
    a6e6:	f8 94       	cli
    a6e8:	de bf       	out	0x3e, r29	; 62
    a6ea:	0f be       	out	0x3f, r0	; 63
    a6ec:	cd bf       	out	0x3d, r28	; 61
    a6ee:	cf 91       	pop	r28
    a6f0:	df 91       	pop	r29
    a6f2:	08 95       	ret

0000a6f4 <_ZN6String4trimEv>:
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}

void String::trim(void)
    a6f4:	df 93       	push	r29
    a6f6:	cf 93       	push	r28
    a6f8:	00 d0       	rcall	.+0      	; 0xa6fa <_ZN6String4trimEv+0x6>
    a6fa:	00 d0       	rcall	.+0      	; 0xa6fc <_ZN6String4trimEv+0x8>
    a6fc:	00 d0       	rcall	.+0      	; 0xa6fe <_ZN6String4trimEv+0xa>
    a6fe:	cd b7       	in	r28, 0x3d	; 61
    a700:	de b7       	in	r29, 0x3e	; 62
    a702:	9e 83       	std	Y+6, r25	; 0x06
    a704:	8d 83       	std	Y+5, r24	; 0x05
{
	if (!buffer || len == 0) return;
    a706:	ed 81       	ldd	r30, Y+5	; 0x05
    a708:	fe 81       	ldd	r31, Y+6	; 0x06
    a70a:	80 81       	ld	r24, Z
    a70c:	91 81       	ldd	r25, Z+1	; 0x01
    a70e:	00 97       	sbiw	r24, 0x00	; 0
    a710:	09 f4       	brne	.+2      	; 0xa714 <_ZN6String4trimEv+0x20>
    a712:	6f c0       	rjmp	.+222    	; 0xa7f2 <_ZN6String4trimEv+0xfe>
    a714:	ed 81       	ldd	r30, Y+5	; 0x05
    a716:	fe 81       	ldd	r31, Y+6	; 0x06
    a718:	84 81       	ldd	r24, Z+4	; 0x04
    a71a:	95 81       	ldd	r25, Z+5	; 0x05
    a71c:	00 97       	sbiw	r24, 0x00	; 0
    a71e:	09 f4       	brne	.+2      	; 0xa722 <_ZN6String4trimEv+0x2e>
    a720:	68 c0       	rjmp	.+208    	; 0xa7f2 <_ZN6String4trimEv+0xfe>
	char *begin = buffer;
    a722:	ed 81       	ldd	r30, Y+5	; 0x05
    a724:	fe 81       	ldd	r31, Y+6	; 0x06
    a726:	80 81       	ld	r24, Z
    a728:	91 81       	ldd	r25, Z+1	; 0x01
    a72a:	9c 83       	std	Y+4, r25	; 0x04
    a72c:	8b 83       	std	Y+3, r24	; 0x03
    a72e:	05 c0       	rjmp	.+10     	; 0xa73a <_ZN6String4trimEv+0x46>
	while (isspace(*begin)) begin++;
    a730:	8b 81       	ldd	r24, Y+3	; 0x03
    a732:	9c 81       	ldd	r25, Y+4	; 0x04
    a734:	01 96       	adiw	r24, 0x01	; 1
    a736:	9c 83       	std	Y+4, r25	; 0x04
    a738:	8b 83       	std	Y+3, r24	; 0x03
    a73a:	eb 81       	ldd	r30, Y+3	; 0x03
    a73c:	fc 81       	ldd	r31, Y+4	; 0x04
    a73e:	80 81       	ld	r24, Z
    a740:	88 2f       	mov	r24, r24
    a742:	90 e0       	ldi	r25, 0x00	; 0
    a744:	0e 94 df 84 	call	0x109be	; 0x109be <isspace>
    a748:	00 97       	sbiw	r24, 0x00	; 0
    a74a:	91 f7       	brne	.-28     	; 0xa730 <_ZN6String4trimEv+0x3c>
	char *end = buffer + len - 1;
    a74c:	ed 81       	ldd	r30, Y+5	; 0x05
    a74e:	fe 81       	ldd	r31, Y+6	; 0x06
    a750:	20 81       	ld	r18, Z
    a752:	31 81       	ldd	r19, Z+1	; 0x01
    a754:	ed 81       	ldd	r30, Y+5	; 0x05
    a756:	fe 81       	ldd	r31, Y+6	; 0x06
    a758:	84 81       	ldd	r24, Z+4	; 0x04
    a75a:	95 81       	ldd	r25, Z+5	; 0x05
    a75c:	01 97       	sbiw	r24, 0x01	; 1
    a75e:	82 0f       	add	r24, r18
    a760:	93 1f       	adc	r25, r19
    a762:	9a 83       	std	Y+2, r25	; 0x02
    a764:	89 83       	std	Y+1, r24	; 0x01
    a766:	05 c0       	rjmp	.+10     	; 0xa772 <_ZN6String4trimEv+0x7e>
	while (isspace(*end) && end >= begin) end--;
    a768:	89 81       	ldd	r24, Y+1	; 0x01
    a76a:	9a 81       	ldd	r25, Y+2	; 0x02
    a76c:	01 97       	sbiw	r24, 0x01	; 1
    a76e:	9a 83       	std	Y+2, r25	; 0x02
    a770:	89 83       	std	Y+1, r24	; 0x01
    a772:	e9 81       	ldd	r30, Y+1	; 0x01
    a774:	fa 81       	ldd	r31, Y+2	; 0x02
    a776:	80 81       	ld	r24, Z
    a778:	88 2f       	mov	r24, r24
    a77a:	90 e0       	ldi	r25, 0x00	; 0
    a77c:	0e 94 df 84 	call	0x109be	; 0x109be <isspace>
    a780:	00 97       	sbiw	r24, 0x00	; 0
    a782:	39 f0       	breq	.+14     	; 0xa792 <_ZN6String4trimEv+0x9e>
    a784:	29 81       	ldd	r18, Y+1	; 0x01
    a786:	3a 81       	ldd	r19, Y+2	; 0x02
    a788:	8b 81       	ldd	r24, Y+3	; 0x03
    a78a:	9c 81       	ldd	r25, Y+4	; 0x04
    a78c:	28 17       	cp	r18, r24
    a78e:	39 07       	cpc	r19, r25
    a790:	58 f7       	brcc	.-42     	; 0xa768 <_ZN6String4trimEv+0x74>
	len = end + 1 - begin;
    a792:	89 81       	ldd	r24, Y+1	; 0x01
    a794:	9a 81       	ldd	r25, Y+2	; 0x02
    a796:	01 96       	adiw	r24, 0x01	; 1
    a798:	9c 01       	movw	r18, r24
    a79a:	8b 81       	ldd	r24, Y+3	; 0x03
    a79c:	9c 81       	ldd	r25, Y+4	; 0x04
    a79e:	a9 01       	movw	r20, r18
    a7a0:	48 1b       	sub	r20, r24
    a7a2:	59 0b       	sbc	r21, r25
    a7a4:	ca 01       	movw	r24, r20
    a7a6:	ed 81       	ldd	r30, Y+5	; 0x05
    a7a8:	fe 81       	ldd	r31, Y+6	; 0x06
    a7aa:	95 83       	std	Z+5, r25	; 0x05
    a7ac:	84 83       	std	Z+4, r24	; 0x04
	if (begin > buffer) memcpy(buffer, begin, len);
    a7ae:	ed 81       	ldd	r30, Y+5	; 0x05
    a7b0:	fe 81       	ldd	r31, Y+6	; 0x06
    a7b2:	20 81       	ld	r18, Z
    a7b4:	31 81       	ldd	r19, Z+1	; 0x01
    a7b6:	8b 81       	ldd	r24, Y+3	; 0x03
    a7b8:	9c 81       	ldd	r25, Y+4	; 0x04
    a7ba:	28 17       	cp	r18, r24
    a7bc:	39 07       	cpc	r19, r25
    a7be:	68 f4       	brcc	.+26     	; 0xa7da <_ZN6String4trimEv+0xe6>
    a7c0:	ed 81       	ldd	r30, Y+5	; 0x05
    a7c2:	fe 81       	ldd	r31, Y+6	; 0x06
    a7c4:	80 81       	ld	r24, Z
    a7c6:	91 81       	ldd	r25, Z+1	; 0x01
    a7c8:	ed 81       	ldd	r30, Y+5	; 0x05
    a7ca:	fe 81       	ldd	r31, Y+6	; 0x06
    a7cc:	44 81       	ldd	r20, Z+4	; 0x04
    a7ce:	55 81       	ldd	r21, Z+5	; 0x05
    a7d0:	2b 81       	ldd	r18, Y+3	; 0x03
    a7d2:	3c 81       	ldd	r19, Y+4	; 0x04
    a7d4:	b9 01       	movw	r22, r18
    a7d6:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
	buffer[len] = 0;
    a7da:	ed 81       	ldd	r30, Y+5	; 0x05
    a7dc:	fe 81       	ldd	r31, Y+6	; 0x06
    a7de:	20 81       	ld	r18, Z
    a7e0:	31 81       	ldd	r19, Z+1	; 0x01
    a7e2:	ed 81       	ldd	r30, Y+5	; 0x05
    a7e4:	fe 81       	ldd	r31, Y+6	; 0x06
    a7e6:	84 81       	ldd	r24, Z+4	; 0x04
    a7e8:	95 81       	ldd	r25, Z+5	; 0x05
    a7ea:	f9 01       	movw	r30, r18
    a7ec:	e8 0f       	add	r30, r24
    a7ee:	f9 1f       	adc	r31, r25
    a7f0:	10 82       	st	Z, r1
}
    a7f2:	26 96       	adiw	r28, 0x06	; 6
    a7f4:	0f b6       	in	r0, 0x3f	; 63
    a7f6:	f8 94       	cli
    a7f8:	de bf       	out	0x3e, r29	; 62
    a7fa:	0f be       	out	0x3f, r0	; 63
    a7fc:	cd bf       	out	0x3d, r28	; 61
    a7fe:	cf 91       	pop	r28
    a800:	df 91       	pop	r29
    a802:	08 95       	ret

0000a804 <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
    a804:	df 93       	push	r29
    a806:	cf 93       	push	r28
    a808:	00 d0       	rcall	.+0      	; 0xa80a <_ZN6String11toUpperCaseEv+0x6>
    a80a:	00 d0       	rcall	.+0      	; 0xa80c <_ZN6String11toUpperCaseEv+0x8>
    a80c:	cd b7       	in	r28, 0x3d	; 61
    a80e:	de b7       	in	r29, 0x3e	; 62
    a810:	9c 83       	std	Y+4, r25	; 0x04
    a812:	8b 83       	std	Y+3, r24	; 0x03
{
	if (!buffer) return;
    a814:	eb 81       	ldd	r30, Y+3	; 0x03
    a816:	fc 81       	ldd	r31, Y+4	; 0x04
    a818:	80 81       	ld	r24, Z
    a81a:	91 81       	ldd	r25, Z+1	; 0x01
    a81c:	00 97       	sbiw	r24, 0x00	; 0
    a81e:	d9 f0       	breq	.+54     	; 0xa856 <_ZN6String11toUpperCaseEv+0x52>
	for (char *p = buffer; *p; p++) {
    a820:	eb 81       	ldd	r30, Y+3	; 0x03
    a822:	fc 81       	ldd	r31, Y+4	; 0x04
    a824:	80 81       	ld	r24, Z
    a826:	91 81       	ldd	r25, Z+1	; 0x01
    a828:	9a 83       	std	Y+2, r25	; 0x02
    a82a:	89 83       	std	Y+1, r24	; 0x01
    a82c:	0f c0       	rjmp	.+30     	; 0xa84c <_ZN6String11toUpperCaseEv+0x48>
		*p = toupper(*p);
    a82e:	e9 81       	ldd	r30, Y+1	; 0x01
    a830:	fa 81       	ldd	r31, Y+2	; 0x02
    a832:	80 81       	ld	r24, Z
    a834:	88 2f       	mov	r24, r24
    a836:	90 e0       	ldi	r25, 0x00	; 0
    a838:	0e 94 ef 84 	call	0x109de	; 0x109de <toupper>
    a83c:	e9 81       	ldd	r30, Y+1	; 0x01
    a83e:	fa 81       	ldd	r31, Y+2	; 0x02
    a840:	80 83       	st	Z, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    a842:	89 81       	ldd	r24, Y+1	; 0x01
    a844:	9a 81       	ldd	r25, Y+2	; 0x02
    a846:	01 96       	adiw	r24, 0x01	; 1
    a848:	9a 83       	std	Y+2, r25	; 0x02
    a84a:	89 83       	std	Y+1, r24	; 0x01
    a84c:	e9 81       	ldd	r30, Y+1	; 0x01
    a84e:	fa 81       	ldd	r31, Y+2	; 0x02
    a850:	80 81       	ld	r24, Z
    a852:	88 23       	and	r24, r24
    a854:	61 f7       	brne	.-40     	; 0xa82e <_ZN6String11toUpperCaseEv+0x2a>
		*p = toupper(*p);
	}
}
    a856:	0f 90       	pop	r0
    a858:	0f 90       	pop	r0
    a85a:	0f 90       	pop	r0
    a85c:	0f 90       	pop	r0
    a85e:	cf 91       	pop	r28
    a860:	df 91       	pop	r29
    a862:	08 95       	ret

0000a864 <_ZN6String11toLowerCaseEv>:
			index--;
		}
	}
}

void String::toLowerCase(void)
    a864:	df 93       	push	r29
    a866:	cf 93       	push	r28
    a868:	00 d0       	rcall	.+0      	; 0xa86a <_ZN6String11toLowerCaseEv+0x6>
    a86a:	00 d0       	rcall	.+0      	; 0xa86c <_ZN6String11toLowerCaseEv+0x8>
    a86c:	cd b7       	in	r28, 0x3d	; 61
    a86e:	de b7       	in	r29, 0x3e	; 62
    a870:	9c 83       	std	Y+4, r25	; 0x04
    a872:	8b 83       	std	Y+3, r24	; 0x03
{
	if (!buffer) return;
    a874:	eb 81       	ldd	r30, Y+3	; 0x03
    a876:	fc 81       	ldd	r31, Y+4	; 0x04
    a878:	80 81       	ld	r24, Z
    a87a:	91 81       	ldd	r25, Z+1	; 0x01
    a87c:	00 97       	sbiw	r24, 0x00	; 0
    a87e:	d9 f0       	breq	.+54     	; 0xa8b6 <_ZN6String11toLowerCaseEv+0x52>
	for (char *p = buffer; *p; p++) {
    a880:	eb 81       	ldd	r30, Y+3	; 0x03
    a882:	fc 81       	ldd	r31, Y+4	; 0x04
    a884:	80 81       	ld	r24, Z
    a886:	91 81       	ldd	r25, Z+1	; 0x01
    a888:	9a 83       	std	Y+2, r25	; 0x02
    a88a:	89 83       	std	Y+1, r24	; 0x01
    a88c:	0f c0       	rjmp	.+30     	; 0xa8ac <_ZN6String11toLowerCaseEv+0x48>
		*p = tolower(*p);
    a88e:	e9 81       	ldd	r30, Y+1	; 0x01
    a890:	fa 81       	ldd	r31, Y+2	; 0x02
    a892:	80 81       	ld	r24, Z
    a894:	88 2f       	mov	r24, r24
    a896:	90 e0       	ldi	r25, 0x00	; 0
    a898:	0e 94 e7 84 	call	0x109ce	; 0x109ce <tolower>
    a89c:	e9 81       	ldd	r30, Y+1	; 0x01
    a89e:	fa 81       	ldd	r31, Y+2	; 0x02
    a8a0:	80 83       	st	Z, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    a8a2:	89 81       	ldd	r24, Y+1	; 0x01
    a8a4:	9a 81       	ldd	r25, Y+2	; 0x02
    a8a6:	01 96       	adiw	r24, 0x01	; 1
    a8a8:	9a 83       	std	Y+2, r25	; 0x02
    a8aa:	89 83       	std	Y+1, r24	; 0x01
    a8ac:	e9 81       	ldd	r30, Y+1	; 0x01
    a8ae:	fa 81       	ldd	r31, Y+2	; 0x02
    a8b0:	80 81       	ld	r24, Z
    a8b2:	88 23       	and	r24, r24
    a8b4:	61 f7       	brne	.-40     	; 0xa88e <_ZN6String11toLowerCaseEv+0x2a>
		*p = tolower(*p);
	}
}
    a8b6:	0f 90       	pop	r0
    a8b8:	0f 90       	pop	r0
    a8ba:	0f 90       	pop	r0
    a8bc:	0f 90       	pop	r0
    a8be:	cf 91       	pop	r28
    a8c0:	df 91       	pop	r29
    a8c2:	08 95       	ret

0000a8c4 <_ZNK6String16equalsIgnoreCaseERKS_>:
unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
    a8c4:	0f 93       	push	r16
    a8c6:	1f 93       	push	r17
    a8c8:	df 93       	push	r29
    a8ca:	cf 93       	push	r28
    a8cc:	cd b7       	in	r28, 0x3d	; 61
    a8ce:	de b7       	in	r29, 0x3e	; 62
    a8d0:	2a 97       	sbiw	r28, 0x0a	; 10
    a8d2:	0f b6       	in	r0, 0x3f	; 63
    a8d4:	f8 94       	cli
    a8d6:	de bf       	out	0x3e, r29	; 62
    a8d8:	0f be       	out	0x3f, r0	; 63
    a8da:	cd bf       	out	0x3d, r28	; 61
    a8dc:	9e 83       	std	Y+6, r25	; 0x06
    a8de:	8d 83       	std	Y+5, r24	; 0x05
    a8e0:	78 87       	std	Y+8, r23	; 0x08
    a8e2:	6f 83       	std	Y+7, r22	; 0x07
{
	if (this == &s2) return 1;
    a8e4:	2d 81       	ldd	r18, Y+5	; 0x05
    a8e6:	3e 81       	ldd	r19, Y+6	; 0x06
    a8e8:	8f 81       	ldd	r24, Y+7	; 0x07
    a8ea:	98 85       	ldd	r25, Y+8	; 0x08
    a8ec:	28 17       	cp	r18, r24
    a8ee:	39 07       	cpc	r19, r25
    a8f0:	19 f4       	brne	.+6      	; 0xa8f8 <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
    a8f2:	81 e0       	ldi	r24, 0x01	; 1
    a8f4:	8a 87       	std	Y+10, r24	; 0x0a
    a8f6:	50 c0       	rjmp	.+160    	; 0xa998 <_ZNK6String16equalsIgnoreCaseERKS_+0xd4>
	if (len != s2.len) return 0;
    a8f8:	ed 81       	ldd	r30, Y+5	; 0x05
    a8fa:	fe 81       	ldd	r31, Y+6	; 0x06
    a8fc:	24 81       	ldd	r18, Z+4	; 0x04
    a8fe:	35 81       	ldd	r19, Z+5	; 0x05
    a900:	ef 81       	ldd	r30, Y+7	; 0x07
    a902:	f8 85       	ldd	r31, Y+8	; 0x08
    a904:	84 81       	ldd	r24, Z+4	; 0x04
    a906:	95 81       	ldd	r25, Z+5	; 0x05
    a908:	28 17       	cp	r18, r24
    a90a:	39 07       	cpc	r19, r25
    a90c:	11 f0       	breq	.+4      	; 0xa912 <_ZNK6String16equalsIgnoreCaseERKS_+0x4e>
    a90e:	1a 86       	std	Y+10, r1	; 0x0a
    a910:	43 c0       	rjmp	.+134    	; 0xa998 <_ZNK6String16equalsIgnoreCaseERKS_+0xd4>
	if (len == 0) return 1;
    a912:	ed 81       	ldd	r30, Y+5	; 0x05
    a914:	fe 81       	ldd	r31, Y+6	; 0x06
    a916:	84 81       	ldd	r24, Z+4	; 0x04
    a918:	95 81       	ldd	r25, Z+5	; 0x05
    a91a:	00 97       	sbiw	r24, 0x00	; 0
    a91c:	19 f4       	brne	.+6      	; 0xa924 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
    a91e:	81 e0       	ldi	r24, 0x01	; 1
    a920:	8a 87       	std	Y+10, r24	; 0x0a
    a922:	3a c0       	rjmp	.+116    	; 0xa998 <_ZNK6String16equalsIgnoreCaseERKS_+0xd4>
	const char *p1 = buffer;
    a924:	ed 81       	ldd	r30, Y+5	; 0x05
    a926:	fe 81       	ldd	r31, Y+6	; 0x06
    a928:	80 81       	ld	r24, Z
    a92a:	91 81       	ldd	r25, Z+1	; 0x01
    a92c:	9c 83       	std	Y+4, r25	; 0x04
    a92e:	8b 83       	std	Y+3, r24	; 0x03
	const char *p2 = s2.buffer;
    a930:	ef 81       	ldd	r30, Y+7	; 0x07
    a932:	f8 85       	ldd	r31, Y+8	; 0x08
    a934:	80 81       	ld	r24, Z
    a936:	91 81       	ldd	r25, Z+1	; 0x01
    a938:	9a 83       	std	Y+2, r25	; 0x02
    a93a:	89 83       	std	Y+1, r24	; 0x01
    a93c:	26 c0       	rjmp	.+76     	; 0xa98a <_ZNK6String16equalsIgnoreCaseERKS_+0xc6>
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    a93e:	eb 81       	ldd	r30, Y+3	; 0x03
    a940:	fc 81       	ldd	r31, Y+4	; 0x04
    a942:	80 81       	ld	r24, Z
    a944:	28 2f       	mov	r18, r24
    a946:	30 e0       	ldi	r19, 0x00	; 0
    a948:	8b 81       	ldd	r24, Y+3	; 0x03
    a94a:	9c 81       	ldd	r25, Y+4	; 0x04
    a94c:	01 96       	adiw	r24, 0x01	; 1
    a94e:	9c 83       	std	Y+4, r25	; 0x04
    a950:	8b 83       	std	Y+3, r24	; 0x03
    a952:	c9 01       	movw	r24, r18
    a954:	0e 94 e7 84 	call	0x109ce	; 0x109ce <tolower>
    a958:	8c 01       	movw	r16, r24
    a95a:	e9 81       	ldd	r30, Y+1	; 0x01
    a95c:	fa 81       	ldd	r31, Y+2	; 0x02
    a95e:	80 81       	ld	r24, Z
    a960:	28 2f       	mov	r18, r24
    a962:	30 e0       	ldi	r19, 0x00	; 0
    a964:	89 81       	ldd	r24, Y+1	; 0x01
    a966:	9a 81       	ldd	r25, Y+2	; 0x02
    a968:	01 96       	adiw	r24, 0x01	; 1
    a96a:	9a 83       	std	Y+2, r25	; 0x02
    a96c:	89 83       	std	Y+1, r24	; 0x01
    a96e:	c9 01       	movw	r24, r18
    a970:	0e 94 e7 84 	call	0x109ce	; 0x109ce <tolower>
    a974:	19 86       	std	Y+9, r1	; 0x09
    a976:	08 17       	cp	r16, r24
    a978:	19 07       	cpc	r17, r25
    a97a:	11 f0       	breq	.+4      	; 0xa980 <_ZNK6String16equalsIgnoreCaseERKS_+0xbc>
    a97c:	81 e0       	ldi	r24, 0x01	; 1
    a97e:	89 87       	std	Y+9, r24	; 0x09
    a980:	89 85       	ldd	r24, Y+9	; 0x09
    a982:	88 23       	and	r24, r24
    a984:	11 f0       	breq	.+4      	; 0xa98a <_ZNK6String16equalsIgnoreCaseERKS_+0xc6>
    a986:	1a 86       	std	Y+10, r1	; 0x0a
    a988:	07 c0       	rjmp	.+14     	; 0xa998 <_ZNK6String16equalsIgnoreCaseERKS_+0xd4>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    a98a:	eb 81       	ldd	r30, Y+3	; 0x03
    a98c:	fc 81       	ldd	r31, Y+4	; 0x04
    a98e:	80 81       	ld	r24, Z
    a990:	88 23       	and	r24, r24
    a992:	a9 f6       	brne	.-86     	; 0xa93e <_ZNK6String16equalsIgnoreCaseERKS_+0x7a>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
    a994:	81 e0       	ldi	r24, 0x01	; 1
    a996:	8a 87       	std	Y+10, r24	; 0x0a
    a998:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    a99a:	2a 96       	adiw	r28, 0x0a	; 10
    a99c:	0f b6       	in	r0, 0x3f	; 63
    a99e:	f8 94       	cli
    a9a0:	de bf       	out	0x3e, r29	; 62
    a9a2:	0f be       	out	0x3f, r0	; 63
    a9a4:	cd bf       	out	0x3d, r28	; 61
    a9a6:	cf 91       	pop	r28
    a9a8:	df 91       	pop	r29
    a9aa:	1f 91       	pop	r17
    a9ac:	0f 91       	pop	r16
    a9ae:	08 95       	ret

0000a9b0 <_ZNK6String11lastIndexOfERKS_j>:
int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
    a9b0:	df 93       	push	r29
    a9b2:	cf 93       	push	r28
    a9b4:	cd b7       	in	r28, 0x3d	; 61
    a9b6:	de b7       	in	r29, 0x3e	; 62
    a9b8:	2c 97       	sbiw	r28, 0x0c	; 12
    a9ba:	0f b6       	in	r0, 0x3f	; 63
    a9bc:	f8 94       	cli
    a9be:	de bf       	out	0x3e, r29	; 62
    a9c0:	0f be       	out	0x3f, r0	; 63
    a9c2:	cd bf       	out	0x3d, r28	; 61
    a9c4:	9e 83       	std	Y+6, r25	; 0x06
    a9c6:	8d 83       	std	Y+5, r24	; 0x05
    a9c8:	78 87       	std	Y+8, r23	; 0x08
    a9ca:	6f 83       	std	Y+7, r22	; 0x07
    a9cc:	5a 87       	std	Y+10, r21	; 0x0a
    a9ce:	49 87       	std	Y+9, r20	; 0x09
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
    a9d0:	ef 81       	ldd	r30, Y+7	; 0x07
    a9d2:	f8 85       	ldd	r31, Y+8	; 0x08
    a9d4:	84 81       	ldd	r24, Z+4	; 0x04
    a9d6:	95 81       	ldd	r25, Z+5	; 0x05
    a9d8:	00 97       	sbiw	r24, 0x00	; 0
    a9da:	89 f0       	breq	.+34     	; 0xa9fe <_ZNK6String11lastIndexOfERKS_j+0x4e>
    a9dc:	ed 81       	ldd	r30, Y+5	; 0x05
    a9de:	fe 81       	ldd	r31, Y+6	; 0x06
    a9e0:	84 81       	ldd	r24, Z+4	; 0x04
    a9e2:	95 81       	ldd	r25, Z+5	; 0x05
    a9e4:	00 97       	sbiw	r24, 0x00	; 0
    a9e6:	59 f0       	breq	.+22     	; 0xa9fe <_ZNK6String11lastIndexOfERKS_j+0x4e>
    a9e8:	ef 81       	ldd	r30, Y+7	; 0x07
    a9ea:	f8 85       	ldd	r31, Y+8	; 0x08
    a9ec:	24 81       	ldd	r18, Z+4	; 0x04
    a9ee:	35 81       	ldd	r19, Z+5	; 0x05
    a9f0:	ed 81       	ldd	r30, Y+5	; 0x05
    a9f2:	fe 81       	ldd	r31, Y+6	; 0x06
    a9f4:	84 81       	ldd	r24, Z+4	; 0x04
    a9f6:	95 81       	ldd	r25, Z+5	; 0x05
    a9f8:	82 17       	cp	r24, r18
    a9fa:	93 07       	cpc	r25, r19
    a9fc:	28 f4       	brcc	.+10     	; 0xaa08 <_ZNK6String11lastIndexOfERKS_j+0x58>
    a9fe:	4f ef       	ldi	r20, 0xFF	; 255
    aa00:	5f ef       	ldi	r21, 0xFF	; 255
    aa02:	5c 87       	std	Y+12, r21	; 0x0c
    aa04:	4b 87       	std	Y+11, r20	; 0x0b
    aa06:	5c c0       	rjmp	.+184    	; 0xaac0 <_ZNK6String11lastIndexOfERKS_j+0x110>
	if (fromIndex >= len) fromIndex = len - 1;
    aa08:	ed 81       	ldd	r30, Y+5	; 0x05
    aa0a:	fe 81       	ldd	r31, Y+6	; 0x06
    aa0c:	24 81       	ldd	r18, Z+4	; 0x04
    aa0e:	35 81       	ldd	r19, Z+5	; 0x05
    aa10:	89 85       	ldd	r24, Y+9	; 0x09
    aa12:	9a 85       	ldd	r25, Y+10	; 0x0a
    aa14:	82 17       	cp	r24, r18
    aa16:	93 07       	cpc	r25, r19
    aa18:	38 f0       	brcs	.+14     	; 0xaa28 <_ZNK6String11lastIndexOfERKS_j+0x78>
    aa1a:	ed 81       	ldd	r30, Y+5	; 0x05
    aa1c:	fe 81       	ldd	r31, Y+6	; 0x06
    aa1e:	84 81       	ldd	r24, Z+4	; 0x04
    aa20:	95 81       	ldd	r25, Z+5	; 0x05
    aa22:	01 97       	sbiw	r24, 0x01	; 1
    aa24:	9a 87       	std	Y+10, r25	; 0x0a
    aa26:	89 87       	std	Y+9, r24	; 0x09
	int found = -1;
    aa28:	8f ef       	ldi	r24, 0xFF	; 255
    aa2a:	9f ef       	ldi	r25, 0xFF	; 255
    aa2c:	9c 83       	std	Y+4, r25	; 0x04
    aa2e:	8b 83       	std	Y+3, r24	; 0x03
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    aa30:	ed 81       	ldd	r30, Y+5	; 0x05
    aa32:	fe 81       	ldd	r31, Y+6	; 0x06
    aa34:	80 81       	ld	r24, Z
    aa36:	91 81       	ldd	r25, Z+1	; 0x01
    aa38:	9a 83       	std	Y+2, r25	; 0x02
    aa3a:	89 83       	std	Y+1, r24	; 0x01
    aa3c:	30 c0       	rjmp	.+96     	; 0xaa9e <_ZNK6String11lastIndexOfERKS_j+0xee>
		p = strstr(p, s2.buffer);
    aa3e:	ef 81       	ldd	r30, Y+7	; 0x07
    aa40:	f8 85       	ldd	r31, Y+8	; 0x08
    aa42:	20 81       	ld	r18, Z
    aa44:	31 81       	ldd	r19, Z+1	; 0x01
    aa46:	89 81       	ldd	r24, Y+1	; 0x01
    aa48:	9a 81       	ldd	r25, Y+2	; 0x02
    aa4a:	b9 01       	movw	r22, r18
    aa4c:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <strstr>
    aa50:	9a 83       	std	Y+2, r25	; 0x02
    aa52:	89 83       	std	Y+1, r24	; 0x01
		if (!p) break;
    aa54:	89 81       	ldd	r24, Y+1	; 0x01
    aa56:	9a 81       	ldd	r25, Y+2	; 0x02
    aa58:	00 97       	sbiw	r24, 0x00	; 0
    aa5a:	71 f1       	breq	.+92     	; 0xaab8 <_ZNK6String11lastIndexOfERKS_j+0x108>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    aa5c:	29 81       	ldd	r18, Y+1	; 0x01
    aa5e:	3a 81       	ldd	r19, Y+2	; 0x02
    aa60:	ed 81       	ldd	r30, Y+5	; 0x05
    aa62:	fe 81       	ldd	r31, Y+6	; 0x06
    aa64:	80 81       	ld	r24, Z
    aa66:	91 81       	ldd	r25, Z+1	; 0x01
    aa68:	a9 01       	movw	r20, r18
    aa6a:	48 1b       	sub	r20, r24
    aa6c:	59 0b       	sbc	r21, r25
    aa6e:	ca 01       	movw	r24, r20
    aa70:	9c 01       	movw	r18, r24
    aa72:	89 85       	ldd	r24, Y+9	; 0x09
    aa74:	9a 85       	ldd	r25, Y+10	; 0x0a
    aa76:	82 17       	cp	r24, r18
    aa78:	93 07       	cpc	r25, r19
    aa7a:	60 f0       	brcs	.+24     	; 0xaa94 <_ZNK6String11lastIndexOfERKS_j+0xe4>
    aa7c:	29 81       	ldd	r18, Y+1	; 0x01
    aa7e:	3a 81       	ldd	r19, Y+2	; 0x02
    aa80:	ed 81       	ldd	r30, Y+5	; 0x05
    aa82:	fe 81       	ldd	r31, Y+6	; 0x06
    aa84:	80 81       	ld	r24, Z
    aa86:	91 81       	ldd	r25, Z+1	; 0x01
    aa88:	a9 01       	movw	r20, r18
    aa8a:	48 1b       	sub	r20, r24
    aa8c:	59 0b       	sbc	r21, r25
    aa8e:	ca 01       	movw	r24, r20
    aa90:	9c 83       	std	Y+4, r25	; 0x04
    aa92:	8b 83       	std	Y+3, r24	; 0x03
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    aa94:	89 81       	ldd	r24, Y+1	; 0x01
    aa96:	9a 81       	ldd	r25, Y+2	; 0x02
    aa98:	01 96       	adiw	r24, 0x01	; 1
    aa9a:	9a 83       	std	Y+2, r25	; 0x02
    aa9c:	89 83       	std	Y+1, r24	; 0x01
    aa9e:	ed 81       	ldd	r30, Y+5	; 0x05
    aaa0:	fe 81       	ldd	r31, Y+6	; 0x06
    aaa2:	20 81       	ld	r18, Z
    aaa4:	31 81       	ldd	r19, Z+1	; 0x01
    aaa6:	89 85       	ldd	r24, Y+9	; 0x09
    aaa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    aaaa:	28 0f       	add	r18, r24
    aaac:	39 1f       	adc	r19, r25
    aaae:	89 81       	ldd	r24, Y+1	; 0x01
    aab0:	9a 81       	ldd	r25, Y+2	; 0x02
    aab2:	28 17       	cp	r18, r24
    aab4:	39 07       	cpc	r19, r25
    aab6:	18 f6       	brcc	.-122    	; 0xaa3e <_ZNK6String11lastIndexOfERKS_j+0x8e>
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
    aab8:	8b 81       	ldd	r24, Y+3	; 0x03
    aaba:	9c 81       	ldd	r25, Y+4	; 0x04
    aabc:	9c 87       	std	Y+12, r25	; 0x0c
    aabe:	8b 87       	std	Y+11, r24	; 0x0b
    aac0:	8b 85       	ldd	r24, Y+11	; 0x0b
    aac2:	9c 85       	ldd	r25, Y+12	; 0x0c
}
    aac4:	2c 96       	adiw	r28, 0x0c	; 12
    aac6:	0f b6       	in	r0, 0x3f	; 63
    aac8:	f8 94       	cli
    aaca:	de bf       	out	0x3e, r29	; 62
    aacc:	0f be       	out	0x3f, r0	; 63
    aace:	cd bf       	out	0x3d, r28	; 61
    aad0:	cf 91       	pop	r28
    aad2:	df 91       	pop	r29
    aad4:	08 95       	ret

0000aad6 <_ZNK6String11lastIndexOfERKS_>:
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
    aad6:	df 93       	push	r29
    aad8:	cf 93       	push	r28
    aada:	00 d0       	rcall	.+0      	; 0xaadc <_ZNK6String11lastIndexOfERKS_+0x6>
    aadc:	00 d0       	rcall	.+0      	; 0xaade <_ZNK6String11lastIndexOfERKS_+0x8>
    aade:	cd b7       	in	r28, 0x3d	; 61
    aae0:	de b7       	in	r29, 0x3e	; 62
    aae2:	9a 83       	std	Y+2, r25	; 0x02
    aae4:	89 83       	std	Y+1, r24	; 0x01
    aae6:	7c 83       	std	Y+4, r23	; 0x04
    aae8:	6b 83       	std	Y+3, r22	; 0x03
{
	return lastIndexOf(s2, len - s2.len);
    aaea:	e9 81       	ldd	r30, Y+1	; 0x01
    aaec:	fa 81       	ldd	r31, Y+2	; 0x02
    aaee:	24 81       	ldd	r18, Z+4	; 0x04
    aaf0:	35 81       	ldd	r19, Z+5	; 0x05
    aaf2:	eb 81       	ldd	r30, Y+3	; 0x03
    aaf4:	fc 81       	ldd	r31, Y+4	; 0x04
    aaf6:	84 81       	ldd	r24, Z+4	; 0x04
    aaf8:	95 81       	ldd	r25, Z+5	; 0x05
    aafa:	a9 01       	movw	r20, r18
    aafc:	48 1b       	sub	r20, r24
    aafe:	59 0b       	sbc	r21, r25
    ab00:	89 81       	ldd	r24, Y+1	; 0x01
    ab02:	9a 81       	ldd	r25, Y+2	; 0x02
    ab04:	2b 81       	ldd	r18, Y+3	; 0x03
    ab06:	3c 81       	ldd	r19, Y+4	; 0x04
    ab08:	b9 01       	movw	r22, r18
    ab0a:	0e 94 d8 54 	call	0xa9b0	; 0xa9b0 <_ZNK6String11lastIndexOfERKS_j>
}
    ab0e:	0f 90       	pop	r0
    ab10:	0f 90       	pop	r0
    ab12:	0f 90       	pop	r0
    ab14:	0f 90       	pop	r0
    ab16:	cf 91       	pop	r28
    ab18:	df 91       	pop	r29
    ab1a:	08 95       	ret

0000ab1c <_ZNK6String7indexOfERKS_j>:
int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
    ab1c:	df 93       	push	r29
    ab1e:	cf 93       	push	r28
    ab20:	cd b7       	in	r28, 0x3d	; 61
    ab22:	de b7       	in	r29, 0x3e	; 62
    ab24:	2a 97       	sbiw	r28, 0x0a	; 10
    ab26:	0f b6       	in	r0, 0x3f	; 63
    ab28:	f8 94       	cli
    ab2a:	de bf       	out	0x3e, r29	; 62
    ab2c:	0f be       	out	0x3f, r0	; 63
    ab2e:	cd bf       	out	0x3d, r28	; 61
    ab30:	9c 83       	std	Y+4, r25	; 0x04
    ab32:	8b 83       	std	Y+3, r24	; 0x03
    ab34:	7e 83       	std	Y+6, r23	; 0x06
    ab36:	6d 83       	std	Y+5, r22	; 0x05
    ab38:	58 87       	std	Y+8, r21	; 0x08
    ab3a:	4f 83       	std	Y+7, r20	; 0x07
{
	if (fromIndex >= len) return -1;
    ab3c:	eb 81       	ldd	r30, Y+3	; 0x03
    ab3e:	fc 81       	ldd	r31, Y+4	; 0x04
    ab40:	24 81       	ldd	r18, Z+4	; 0x04
    ab42:	35 81       	ldd	r19, Z+5	; 0x05
    ab44:	8f 81       	ldd	r24, Y+7	; 0x07
    ab46:	98 85       	ldd	r25, Y+8	; 0x08
    ab48:	82 17       	cp	r24, r18
    ab4a:	93 07       	cpc	r25, r19
    ab4c:	28 f0       	brcs	.+10     	; 0xab58 <_ZNK6String7indexOfERKS_j+0x3c>
    ab4e:	4f ef       	ldi	r20, 0xFF	; 255
    ab50:	5f ef       	ldi	r21, 0xFF	; 255
    ab52:	5a 87       	std	Y+10, r21	; 0x0a
    ab54:	49 87       	std	Y+9, r20	; 0x09
    ab56:	25 c0       	rjmp	.+74     	; 0xaba2 <_ZNK6String7indexOfERKS_j+0x86>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    ab58:	eb 81       	ldd	r30, Y+3	; 0x03
    ab5a:	fc 81       	ldd	r31, Y+4	; 0x04
    ab5c:	20 81       	ld	r18, Z
    ab5e:	31 81       	ldd	r19, Z+1	; 0x01
    ab60:	8f 81       	ldd	r24, Y+7	; 0x07
    ab62:	98 85       	ldd	r25, Y+8	; 0x08
    ab64:	82 0f       	add	r24, r18
    ab66:	93 1f       	adc	r25, r19
    ab68:	ed 81       	ldd	r30, Y+5	; 0x05
    ab6a:	fe 81       	ldd	r31, Y+6	; 0x06
    ab6c:	20 81       	ld	r18, Z
    ab6e:	31 81       	ldd	r19, Z+1	; 0x01
    ab70:	b9 01       	movw	r22, r18
    ab72:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <strstr>
    ab76:	9a 83       	std	Y+2, r25	; 0x02
    ab78:	89 83       	std	Y+1, r24	; 0x01
	if (found == NULL) return -1;
    ab7a:	89 81       	ldd	r24, Y+1	; 0x01
    ab7c:	9a 81       	ldd	r25, Y+2	; 0x02
    ab7e:	00 97       	sbiw	r24, 0x00	; 0
    ab80:	29 f4       	brne	.+10     	; 0xab8c <_ZNK6String7indexOfERKS_j+0x70>
    ab82:	8f ef       	ldi	r24, 0xFF	; 255
    ab84:	9f ef       	ldi	r25, 0xFF	; 255
    ab86:	9a 87       	std	Y+10, r25	; 0x0a
    ab88:	89 87       	std	Y+9, r24	; 0x09
    ab8a:	0b c0       	rjmp	.+22     	; 0xaba2 <_ZNK6String7indexOfERKS_j+0x86>
	return found - buffer;
    ab8c:	29 81       	ldd	r18, Y+1	; 0x01
    ab8e:	3a 81       	ldd	r19, Y+2	; 0x02
    ab90:	eb 81       	ldd	r30, Y+3	; 0x03
    ab92:	fc 81       	ldd	r31, Y+4	; 0x04
    ab94:	80 81       	ld	r24, Z
    ab96:	91 81       	ldd	r25, Z+1	; 0x01
    ab98:	a9 01       	movw	r20, r18
    ab9a:	48 1b       	sub	r20, r24
    ab9c:	59 0b       	sbc	r21, r25
    ab9e:	5a 87       	std	Y+10, r21	; 0x0a
    aba0:	49 87       	std	Y+9, r20	; 0x09
    aba2:	89 85       	ldd	r24, Y+9	; 0x09
    aba4:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    aba6:	2a 96       	adiw	r28, 0x0a	; 10
    aba8:	0f b6       	in	r0, 0x3f	; 63
    abaa:	f8 94       	cli
    abac:	de bf       	out	0x3e, r29	; 62
    abae:	0f be       	out	0x3f, r0	; 63
    abb0:	cd bf       	out	0x3d, r28	; 61
    abb2:	cf 91       	pop	r28
    abb4:	df 91       	pop	r29
    abb6:	08 95       	ret

0000abb8 <_ZNK6String7indexOfERKS_>:
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::indexOf(const String &s2) const
    abb8:	df 93       	push	r29
    abba:	cf 93       	push	r28
    abbc:	00 d0       	rcall	.+0      	; 0xabbe <_ZNK6String7indexOfERKS_+0x6>
    abbe:	00 d0       	rcall	.+0      	; 0xabc0 <_ZNK6String7indexOfERKS_+0x8>
    abc0:	cd b7       	in	r28, 0x3d	; 61
    abc2:	de b7       	in	r29, 0x3e	; 62
    abc4:	9a 83       	std	Y+2, r25	; 0x02
    abc6:	89 83       	std	Y+1, r24	; 0x01
    abc8:	7c 83       	std	Y+4, r23	; 0x04
    abca:	6b 83       	std	Y+3, r22	; 0x03
{
	return indexOf(s2, 0);
    abcc:	89 81       	ldd	r24, Y+1	; 0x01
    abce:	9a 81       	ldd	r25, Y+2	; 0x02
    abd0:	2b 81       	ldd	r18, Y+3	; 0x03
    abd2:	3c 81       	ldd	r19, Y+4	; 0x04
    abd4:	b9 01       	movw	r22, r18
    abd6:	40 e0       	ldi	r20, 0x00	; 0
    abd8:	50 e0       	ldi	r21, 0x00	; 0
    abda:	0e 94 8e 55 	call	0xab1c	; 0xab1c <_ZNK6String7indexOfERKS_j>
}
    abde:	0f 90       	pop	r0
    abe0:	0f 90       	pop	r0
    abe2:	0f 90       	pop	r0
    abe4:	0f 90       	pop	r0
    abe6:	cf 91       	pop	r28
    abe8:	df 91       	pop	r29
    abea:	08 95       	ret

0000abec <_ZNK6String11lastIndexOfEcj>:
int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
    abec:	df 93       	push	r29
    abee:	cf 93       	push	r28
    abf0:	cd b7       	in	r28, 0x3d	; 61
    abf2:	de b7       	in	r29, 0x3e	; 62
    abf4:	2a 97       	sbiw	r28, 0x0a	; 10
    abf6:	0f b6       	in	r0, 0x3f	; 63
    abf8:	f8 94       	cli
    abfa:	de bf       	out	0x3e, r29	; 62
    abfc:	0f be       	out	0x3f, r0	; 63
    abfe:	cd bf       	out	0x3d, r28	; 61
    ac00:	9d 83       	std	Y+5, r25	; 0x05
    ac02:	8c 83       	std	Y+4, r24	; 0x04
    ac04:	6e 83       	std	Y+6, r22	; 0x06
    ac06:	58 87       	std	Y+8, r21	; 0x08
    ac08:	4f 83       	std	Y+7, r20	; 0x07
{
	if (fromIndex >= len) return -1;
    ac0a:	ec 81       	ldd	r30, Y+4	; 0x04
    ac0c:	fd 81       	ldd	r31, Y+5	; 0x05
    ac0e:	24 81       	ldd	r18, Z+4	; 0x04
    ac10:	35 81       	ldd	r19, Z+5	; 0x05
    ac12:	8f 81       	ldd	r24, Y+7	; 0x07
    ac14:	98 85       	ldd	r25, Y+8	; 0x08
    ac16:	82 17       	cp	r24, r18
    ac18:	93 07       	cpc	r25, r19
    ac1a:	28 f0       	brcs	.+10     	; 0xac26 <_ZNK6String11lastIndexOfEcj+0x3a>
    ac1c:	4f ef       	ldi	r20, 0xFF	; 255
    ac1e:	5f ef       	ldi	r21, 0xFF	; 255
    ac20:	5a 87       	std	Y+10, r21	; 0x0a
    ac22:	49 87       	std	Y+9, r20	; 0x09
    ac24:	44 c0       	rjmp	.+136    	; 0xacae <_ZNK6String11lastIndexOfEcj+0xc2>
	char tempchar = buffer[fromIndex + 1];
    ac26:	ec 81       	ldd	r30, Y+4	; 0x04
    ac28:	fd 81       	ldd	r31, Y+5	; 0x05
    ac2a:	20 81       	ld	r18, Z
    ac2c:	31 81       	ldd	r19, Z+1	; 0x01
    ac2e:	8f 81       	ldd	r24, Y+7	; 0x07
    ac30:	98 85       	ldd	r25, Y+8	; 0x08
    ac32:	01 96       	adiw	r24, 0x01	; 1
    ac34:	f9 01       	movw	r30, r18
    ac36:	e8 0f       	add	r30, r24
    ac38:	f9 1f       	adc	r31, r25
    ac3a:	80 81       	ld	r24, Z
    ac3c:	8b 83       	std	Y+3, r24	; 0x03
	buffer[fromIndex + 1] = '\0';
    ac3e:	ec 81       	ldd	r30, Y+4	; 0x04
    ac40:	fd 81       	ldd	r31, Y+5	; 0x05
    ac42:	20 81       	ld	r18, Z
    ac44:	31 81       	ldd	r19, Z+1	; 0x01
    ac46:	8f 81       	ldd	r24, Y+7	; 0x07
    ac48:	98 85       	ldd	r25, Y+8	; 0x08
    ac4a:	01 96       	adiw	r24, 0x01	; 1
    ac4c:	f9 01       	movw	r30, r18
    ac4e:	e8 0f       	add	r30, r24
    ac50:	f9 1f       	adc	r31, r25
    ac52:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    ac54:	ec 81       	ldd	r30, Y+4	; 0x04
    ac56:	fd 81       	ldd	r31, Y+5	; 0x05
    ac58:	40 81       	ld	r20, Z
    ac5a:	51 81       	ldd	r21, Z+1	; 0x01
    ac5c:	8e 81       	ldd	r24, Y+6	; 0x06
    ac5e:	28 2f       	mov	r18, r24
    ac60:	30 e0       	ldi	r19, 0x00	; 0
    ac62:	ca 01       	movw	r24, r20
    ac64:	b9 01       	movw	r22, r18
    ac66:	0e 94 67 85 	call	0x10ace	; 0x10ace <strrchr>
    ac6a:	9a 83       	std	Y+2, r25	; 0x02
    ac6c:	89 83       	std	Y+1, r24	; 0x01
	buffer[fromIndex + 1] = tempchar;
    ac6e:	ec 81       	ldd	r30, Y+4	; 0x04
    ac70:	fd 81       	ldd	r31, Y+5	; 0x05
    ac72:	20 81       	ld	r18, Z
    ac74:	31 81       	ldd	r19, Z+1	; 0x01
    ac76:	8f 81       	ldd	r24, Y+7	; 0x07
    ac78:	98 85       	ldd	r25, Y+8	; 0x08
    ac7a:	01 96       	adiw	r24, 0x01	; 1
    ac7c:	f9 01       	movw	r30, r18
    ac7e:	e8 0f       	add	r30, r24
    ac80:	f9 1f       	adc	r31, r25
    ac82:	8b 81       	ldd	r24, Y+3	; 0x03
    ac84:	80 83       	st	Z, r24
	if (temp == NULL) return -1;
    ac86:	89 81       	ldd	r24, Y+1	; 0x01
    ac88:	9a 81       	ldd	r25, Y+2	; 0x02
    ac8a:	00 97       	sbiw	r24, 0x00	; 0
    ac8c:	29 f4       	brne	.+10     	; 0xac98 <_ZNK6String11lastIndexOfEcj+0xac>
    ac8e:	8f ef       	ldi	r24, 0xFF	; 255
    ac90:	9f ef       	ldi	r25, 0xFF	; 255
    ac92:	9a 87       	std	Y+10, r25	; 0x0a
    ac94:	89 87       	std	Y+9, r24	; 0x09
    ac96:	0b c0       	rjmp	.+22     	; 0xacae <_ZNK6String11lastIndexOfEcj+0xc2>
	return temp - buffer;
    ac98:	29 81       	ldd	r18, Y+1	; 0x01
    ac9a:	3a 81       	ldd	r19, Y+2	; 0x02
    ac9c:	ec 81       	ldd	r30, Y+4	; 0x04
    ac9e:	fd 81       	ldd	r31, Y+5	; 0x05
    aca0:	80 81       	ld	r24, Z
    aca2:	91 81       	ldd	r25, Z+1	; 0x01
    aca4:	a9 01       	movw	r20, r18
    aca6:	48 1b       	sub	r20, r24
    aca8:	59 0b       	sbc	r21, r25
    acaa:	5a 87       	std	Y+10, r21	; 0x0a
    acac:	49 87       	std	Y+9, r20	; 0x09
    acae:	89 85       	ldd	r24, Y+9	; 0x09
    acb0:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    acb2:	2a 96       	adiw	r28, 0x0a	; 10
    acb4:	0f b6       	in	r0, 0x3f	; 63
    acb6:	f8 94       	cli
    acb8:	de bf       	out	0x3e, r29	; 62
    acba:	0f be       	out	0x3f, r0	; 63
    acbc:	cd bf       	out	0x3d, r28	; 61
    acbe:	cf 91       	pop	r28
    acc0:	df 91       	pop	r29
    acc2:	08 95       	ret

0000acc4 <_ZNK6String11lastIndexOfEc>:
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
    acc4:	df 93       	push	r29
    acc6:	cf 93       	push	r28
    acc8:	00 d0       	rcall	.+0      	; 0xacca <_ZNK6String11lastIndexOfEc+0x6>
    acca:	0f 92       	push	r0
    accc:	cd b7       	in	r28, 0x3d	; 61
    acce:	de b7       	in	r29, 0x3e	; 62
    acd0:	9a 83       	std	Y+2, r25	; 0x02
    acd2:	89 83       	std	Y+1, r24	; 0x01
    acd4:	6b 83       	std	Y+3, r22	; 0x03
{
	return lastIndexOf(theChar, len - 1);
    acd6:	e9 81       	ldd	r30, Y+1	; 0x01
    acd8:	fa 81       	ldd	r31, Y+2	; 0x02
    acda:	84 81       	ldd	r24, Z+4	; 0x04
    acdc:	95 81       	ldd	r25, Z+5	; 0x05
    acde:	9c 01       	movw	r18, r24
    ace0:	21 50       	subi	r18, 0x01	; 1
    ace2:	30 40       	sbci	r19, 0x00	; 0
    ace4:	89 81       	ldd	r24, Y+1	; 0x01
    ace6:	9a 81       	ldd	r25, Y+2	; 0x02
    ace8:	6b 81       	ldd	r22, Y+3	; 0x03
    acea:	a9 01       	movw	r20, r18
    acec:	0e 94 f6 55 	call	0xabec	; 0xabec <_ZNK6String11lastIndexOfEcj>
}
    acf0:	0f 90       	pop	r0
    acf2:	0f 90       	pop	r0
    acf4:	0f 90       	pop	r0
    acf6:	cf 91       	pop	r28
    acf8:	df 91       	pop	r29
    acfa:	08 95       	ret

0000acfc <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
    acfc:	df 93       	push	r29
    acfe:	cf 93       	push	r28
    ad00:	cd b7       	in	r28, 0x3d	; 61
    ad02:	de b7       	in	r29, 0x3e	; 62
    ad04:	29 97       	sbiw	r28, 0x09	; 9
    ad06:	0f b6       	in	r0, 0x3f	; 63
    ad08:	f8 94       	cli
    ad0a:	de bf       	out	0x3e, r29	; 62
    ad0c:	0f be       	out	0x3f, r0	; 63
    ad0e:	cd bf       	out	0x3d, r28	; 61
    ad10:	9c 83       	std	Y+4, r25	; 0x04
    ad12:	8b 83       	std	Y+3, r24	; 0x03
    ad14:	6d 83       	std	Y+5, r22	; 0x05
    ad16:	5f 83       	std	Y+7, r21	; 0x07
    ad18:	4e 83       	std	Y+6, r20	; 0x06
{
	if (fromIndex >= len) return -1;
    ad1a:	eb 81       	ldd	r30, Y+3	; 0x03
    ad1c:	fc 81       	ldd	r31, Y+4	; 0x04
    ad1e:	24 81       	ldd	r18, Z+4	; 0x04
    ad20:	35 81       	ldd	r19, Z+5	; 0x05
    ad22:	8e 81       	ldd	r24, Y+6	; 0x06
    ad24:	9f 81       	ldd	r25, Y+7	; 0x07
    ad26:	82 17       	cp	r24, r18
    ad28:	93 07       	cpc	r25, r19
    ad2a:	28 f0       	brcs	.+10     	; 0xad36 <_ZNK6String7indexOfEcj+0x3a>
    ad2c:	4f ef       	ldi	r20, 0xFF	; 255
    ad2e:	5f ef       	ldi	r21, 0xFF	; 255
    ad30:	59 87       	std	Y+9, r21	; 0x09
    ad32:	48 87       	std	Y+8, r20	; 0x08
    ad34:	26 c0       	rjmp	.+76     	; 0xad82 <_ZNK6String7indexOfEcj+0x86>
	const char* temp = strchr(buffer + fromIndex, ch);
    ad36:	eb 81       	ldd	r30, Y+3	; 0x03
    ad38:	fc 81       	ldd	r31, Y+4	; 0x04
    ad3a:	20 81       	ld	r18, Z
    ad3c:	31 81       	ldd	r19, Z+1	; 0x01
    ad3e:	8e 81       	ldd	r24, Y+6	; 0x06
    ad40:	9f 81       	ldd	r25, Y+7	; 0x07
    ad42:	a9 01       	movw	r20, r18
    ad44:	48 0f       	add	r20, r24
    ad46:	59 1f       	adc	r21, r25
    ad48:	8d 81       	ldd	r24, Y+5	; 0x05
    ad4a:	28 2f       	mov	r18, r24
    ad4c:	30 e0       	ldi	r19, 0x00	; 0
    ad4e:	ca 01       	movw	r24, r20
    ad50:	b9 01       	movw	r22, r18
    ad52:	0e 94 26 85 	call	0x10a4c	; 0x10a4c <strchr>
    ad56:	9a 83       	std	Y+2, r25	; 0x02
    ad58:	89 83       	std	Y+1, r24	; 0x01
	if (temp == NULL) return -1;
    ad5a:	89 81       	ldd	r24, Y+1	; 0x01
    ad5c:	9a 81       	ldd	r25, Y+2	; 0x02
    ad5e:	00 97       	sbiw	r24, 0x00	; 0
    ad60:	29 f4       	brne	.+10     	; 0xad6c <_ZNK6String7indexOfEcj+0x70>
    ad62:	8f ef       	ldi	r24, 0xFF	; 255
    ad64:	9f ef       	ldi	r25, 0xFF	; 255
    ad66:	99 87       	std	Y+9, r25	; 0x09
    ad68:	88 87       	std	Y+8, r24	; 0x08
    ad6a:	0b c0       	rjmp	.+22     	; 0xad82 <_ZNK6String7indexOfEcj+0x86>
	return temp - buffer;
    ad6c:	29 81       	ldd	r18, Y+1	; 0x01
    ad6e:	3a 81       	ldd	r19, Y+2	; 0x02
    ad70:	eb 81       	ldd	r30, Y+3	; 0x03
    ad72:	fc 81       	ldd	r31, Y+4	; 0x04
    ad74:	80 81       	ld	r24, Z
    ad76:	91 81       	ldd	r25, Z+1	; 0x01
    ad78:	a9 01       	movw	r20, r18
    ad7a:	48 1b       	sub	r20, r24
    ad7c:	59 0b       	sbc	r21, r25
    ad7e:	59 87       	std	Y+9, r21	; 0x09
    ad80:	48 87       	std	Y+8, r20	; 0x08
    ad82:	88 85       	ldd	r24, Y+8	; 0x08
    ad84:	99 85       	ldd	r25, Y+9	; 0x09
}
    ad86:	29 96       	adiw	r28, 0x09	; 9
    ad88:	0f b6       	in	r0, 0x3f	; 63
    ad8a:	f8 94       	cli
    ad8c:	de bf       	out	0x3e, r29	; 62
    ad8e:	0f be       	out	0x3f, r0	; 63
    ad90:	cd bf       	out	0x3d, r28	; 61
    ad92:	cf 91       	pop	r28
    ad94:	df 91       	pop	r29
    ad96:	08 95       	ret

0000ad98 <_ZNK6String7indexOfEc>:

/*********************************************/
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
    ad98:	df 93       	push	r29
    ad9a:	cf 93       	push	r28
    ad9c:	00 d0       	rcall	.+0      	; 0xad9e <_ZNK6String7indexOfEc+0x6>
    ad9e:	0f 92       	push	r0
    ada0:	cd b7       	in	r28, 0x3d	; 61
    ada2:	de b7       	in	r29, 0x3e	; 62
    ada4:	9a 83       	std	Y+2, r25	; 0x02
    ada6:	89 83       	std	Y+1, r24	; 0x01
    ada8:	6b 83       	std	Y+3, r22	; 0x03
{
	return indexOf(c, 0);
    adaa:	89 81       	ldd	r24, Y+1	; 0x01
    adac:	9a 81       	ldd	r25, Y+2	; 0x02
    adae:	6b 81       	ldd	r22, Y+3	; 0x03
    adb0:	40 e0       	ldi	r20, 0x00	; 0
    adb2:	50 e0       	ldi	r21, 0x00	; 0
    adb4:	0e 94 7e 56 	call	0xacfc	; 0xacfc <_ZNK6String7indexOfEcj>
}
    adb8:	0f 90       	pop	r0
    adba:	0f 90       	pop	r0
    adbc:	0f 90       	pop	r0
    adbe:	cf 91       	pop	r28
    adc0:	df 91       	pop	r29
    adc2:	08 95       	ret

0000adc4 <_ZNK6String8getBytesEPhjj>:
{
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
    adc4:	df 93       	push	r29
    adc6:	cf 93       	push	r28
    adc8:	cd b7       	in	r28, 0x3d	; 61
    adca:	de b7       	in	r29, 0x3e	; 62
    adcc:	2a 97       	sbiw	r28, 0x0a	; 10
    adce:	0f b6       	in	r0, 0x3f	; 63
    add0:	f8 94       	cli
    add2:	de bf       	out	0x3e, r29	; 62
    add4:	0f be       	out	0x3f, r0	; 63
    add6:	cd bf       	out	0x3d, r28	; 61
    add8:	9c 83       	std	Y+4, r25	; 0x04
    adda:	8b 83       	std	Y+3, r24	; 0x03
    addc:	7e 83       	std	Y+6, r23	; 0x06
    adde:	6d 83       	std	Y+5, r22	; 0x05
    ade0:	58 87       	std	Y+8, r21	; 0x08
    ade2:	4f 83       	std	Y+7, r20	; 0x07
    ade4:	3a 87       	std	Y+10, r19	; 0x0a
    ade6:	29 87       	std	Y+9, r18	; 0x09
{
	if (!bufsize || !buf) return;
    ade8:	8f 81       	ldd	r24, Y+7	; 0x07
    adea:	98 85       	ldd	r25, Y+8	; 0x08
    adec:	00 97       	sbiw	r24, 0x00	; 0
    adee:	09 f4       	brne	.+2      	; 0xadf2 <_ZNK6String8getBytesEPhjj+0x2e>
    adf0:	49 c0       	rjmp	.+146    	; 0xae84 <_ZNK6String8getBytesEPhjj+0xc0>
    adf2:	8d 81       	ldd	r24, Y+5	; 0x05
    adf4:	9e 81       	ldd	r25, Y+6	; 0x06
    adf6:	00 97       	sbiw	r24, 0x00	; 0
    adf8:	09 f4       	brne	.+2      	; 0xadfc <_ZNK6String8getBytesEPhjj+0x38>
    adfa:	44 c0       	rjmp	.+136    	; 0xae84 <_ZNK6String8getBytesEPhjj+0xc0>
	if (index >= len) {
    adfc:	eb 81       	ldd	r30, Y+3	; 0x03
    adfe:	fc 81       	ldd	r31, Y+4	; 0x04
    ae00:	24 81       	ldd	r18, Z+4	; 0x04
    ae02:	35 81       	ldd	r19, Z+5	; 0x05
    ae04:	89 85       	ldd	r24, Y+9	; 0x09
    ae06:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae08:	82 17       	cp	r24, r18
    ae0a:	93 07       	cpc	r25, r19
    ae0c:	20 f0       	brcs	.+8      	; 0xae16 <_ZNK6String8getBytesEPhjj+0x52>
		buf[0] = 0;
    ae0e:	ed 81       	ldd	r30, Y+5	; 0x05
    ae10:	fe 81       	ldd	r31, Y+6	; 0x06
    ae12:	10 82       	st	Z, r1
    ae14:	37 c0       	rjmp	.+110    	; 0xae84 <_ZNK6String8getBytesEPhjj+0xc0>
		return;
	}
	unsigned int n = bufsize - 1;
    ae16:	8f 81       	ldd	r24, Y+7	; 0x07
    ae18:	98 85       	ldd	r25, Y+8	; 0x08
    ae1a:	01 97       	sbiw	r24, 0x01	; 1
    ae1c:	9a 83       	std	Y+2, r25	; 0x02
    ae1e:	89 83       	std	Y+1, r24	; 0x01
	if (n > len - index) n = len - index;
    ae20:	eb 81       	ldd	r30, Y+3	; 0x03
    ae22:	fc 81       	ldd	r31, Y+4	; 0x04
    ae24:	24 81       	ldd	r18, Z+4	; 0x04
    ae26:	35 81       	ldd	r19, Z+5	; 0x05
    ae28:	89 85       	ldd	r24, Y+9	; 0x09
    ae2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae2c:	28 1b       	sub	r18, r24
    ae2e:	39 0b       	sbc	r19, r25
    ae30:	89 81       	ldd	r24, Y+1	; 0x01
    ae32:	9a 81       	ldd	r25, Y+2	; 0x02
    ae34:	28 17       	cp	r18, r24
    ae36:	39 07       	cpc	r19, r25
    ae38:	60 f4       	brcc	.+24     	; 0xae52 <_ZNK6String8getBytesEPhjj+0x8e>
    ae3a:	eb 81       	ldd	r30, Y+3	; 0x03
    ae3c:	fc 81       	ldd	r31, Y+4	; 0x04
    ae3e:	24 81       	ldd	r18, Z+4	; 0x04
    ae40:	35 81       	ldd	r19, Z+5	; 0x05
    ae42:	89 85       	ldd	r24, Y+9	; 0x09
    ae44:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae46:	a9 01       	movw	r20, r18
    ae48:	48 1b       	sub	r20, r24
    ae4a:	59 0b       	sbc	r21, r25
    ae4c:	ca 01       	movw	r24, r20
    ae4e:	9a 83       	std	Y+2, r25	; 0x02
    ae50:	89 83       	std	Y+1, r24	; 0x01
	strncpy((char *)buf, buffer + index, n);
    ae52:	eb 81       	ldd	r30, Y+3	; 0x03
    ae54:	fc 81       	ldd	r31, Y+4	; 0x04
    ae56:	20 81       	ld	r18, Z
    ae58:	31 81       	ldd	r19, Z+1	; 0x01
    ae5a:	89 85       	ldd	r24, Y+9	; 0x09
    ae5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ae5e:	a9 01       	movw	r20, r18
    ae60:	48 0f       	add	r20, r24
    ae62:	59 1f       	adc	r21, r25
    ae64:	8d 81       	ldd	r24, Y+5	; 0x05
    ae66:	9e 81       	ldd	r25, Y+6	; 0x06
    ae68:	29 81       	ldd	r18, Y+1	; 0x01
    ae6a:	3a 81       	ldd	r19, Y+2	; 0x02
    ae6c:	ba 01       	movw	r22, r20
    ae6e:	a9 01       	movw	r20, r18
    ae70:	0e 94 58 85 	call	0x10ab0	; 0x10ab0 <strncpy>
	buf[n] = 0;
    ae74:	2d 81       	ldd	r18, Y+5	; 0x05
    ae76:	3e 81       	ldd	r19, Y+6	; 0x06
    ae78:	89 81       	ldd	r24, Y+1	; 0x01
    ae7a:	9a 81       	ldd	r25, Y+2	; 0x02
    ae7c:	f9 01       	movw	r30, r18
    ae7e:	e8 0f       	add	r30, r24
    ae80:	f9 1f       	adc	r31, r25
    ae82:	10 82       	st	Z, r1
}
    ae84:	2a 96       	adiw	r28, 0x0a	; 10
    ae86:	0f b6       	in	r0, 0x3f	; 63
    ae88:	f8 94       	cli
    ae8a:	de bf       	out	0x3e, r29	; 62
    ae8c:	0f be       	out	0x3f, r0	; 63
    ae8e:	cd bf       	out	0x3d, r28	; 61
    ae90:	cf 91       	pop	r28
    ae92:	df 91       	pop	r29
    ae94:	08 95       	ret

0000ae96 <_ZNK6String8endsWithERKS_>:
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
    ae96:	df 93       	push	r29
    ae98:	cf 93       	push	r28
    ae9a:	00 d0       	rcall	.+0      	; 0xae9c <_ZNK6String8endsWithERKS_+0x6>
    ae9c:	00 d0       	rcall	.+0      	; 0xae9e <_ZNK6String8endsWithERKS_+0x8>
    ae9e:	0f 92       	push	r0
    aea0:	cd b7       	in	r28, 0x3d	; 61
    aea2:	de b7       	in	r29, 0x3e	; 62
    aea4:	9a 83       	std	Y+2, r25	; 0x02
    aea6:	89 83       	std	Y+1, r24	; 0x01
    aea8:	7c 83       	std	Y+4, r23	; 0x04
    aeaa:	6b 83       	std	Y+3, r22	; 0x03
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    aeac:	e9 81       	ldd	r30, Y+1	; 0x01
    aeae:	fa 81       	ldd	r31, Y+2	; 0x02
    aeb0:	24 81       	ldd	r18, Z+4	; 0x04
    aeb2:	35 81       	ldd	r19, Z+5	; 0x05
    aeb4:	eb 81       	ldd	r30, Y+3	; 0x03
    aeb6:	fc 81       	ldd	r31, Y+4	; 0x04
    aeb8:	84 81       	ldd	r24, Z+4	; 0x04
    aeba:	95 81       	ldd	r25, Z+5	; 0x05
    aebc:	28 17       	cp	r18, r24
    aebe:	39 07       	cpc	r19, r25
    aec0:	60 f0       	brcs	.+24     	; 0xaeda <_ZNK6String8endsWithERKS_+0x44>
    aec2:	e9 81       	ldd	r30, Y+1	; 0x01
    aec4:	fa 81       	ldd	r31, Y+2	; 0x02
    aec6:	80 81       	ld	r24, Z
    aec8:	91 81       	ldd	r25, Z+1	; 0x01
    aeca:	00 97       	sbiw	r24, 0x00	; 0
    aecc:	31 f0       	breq	.+12     	; 0xaeda <_ZNK6String8endsWithERKS_+0x44>
    aece:	eb 81       	ldd	r30, Y+3	; 0x03
    aed0:	fc 81       	ldd	r31, Y+4	; 0x04
    aed2:	80 81       	ld	r24, Z
    aed4:	91 81       	ldd	r25, Z+1	; 0x01
    aed6:	00 97       	sbiw	r24, 0x00	; 0
    aed8:	11 f4       	brne	.+4      	; 0xaede <_ZNK6String8endsWithERKS_+0x48>
    aeda:	1d 82       	std	Y+5, r1	; 0x05
    aedc:	1e c0       	rjmp	.+60     	; 0xaf1a <_ZNK6String8endsWithERKS_+0x84>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    aede:	e9 81       	ldd	r30, Y+1	; 0x01
    aee0:	fa 81       	ldd	r31, Y+2	; 0x02
    aee2:	40 81       	ld	r20, Z
    aee4:	51 81       	ldd	r21, Z+1	; 0x01
    aee6:	e9 81       	ldd	r30, Y+1	; 0x01
    aee8:	fa 81       	ldd	r31, Y+2	; 0x02
    aeea:	24 81       	ldd	r18, Z+4	; 0x04
    aeec:	35 81       	ldd	r19, Z+5	; 0x05
    aeee:	eb 81       	ldd	r30, Y+3	; 0x03
    aef0:	fc 81       	ldd	r31, Y+4	; 0x04
    aef2:	84 81       	ldd	r24, Z+4	; 0x04
    aef4:	95 81       	ldd	r25, Z+5	; 0x05
    aef6:	b9 01       	movw	r22, r18
    aef8:	68 1b       	sub	r22, r24
    aefa:	79 0b       	sbc	r23, r25
    aefc:	cb 01       	movw	r24, r22
    aefe:	84 0f       	add	r24, r20
    af00:	95 1f       	adc	r25, r21
    af02:	eb 81       	ldd	r30, Y+3	; 0x03
    af04:	fc 81       	ldd	r31, Y+4	; 0x04
    af06:	20 81       	ld	r18, Z
    af08:	31 81       	ldd	r19, Z+1	; 0x01
    af0a:	b9 01       	movw	r22, r18
    af0c:	0e 94 31 85 	call	0x10a62	; 0x10a62 <strcmp>
    af10:	1d 82       	std	Y+5, r1	; 0x05
    af12:	00 97       	sbiw	r24, 0x00	; 0
    af14:	11 f4       	brne	.+4      	; 0xaf1a <_ZNK6String8endsWithERKS_+0x84>
    af16:	71 e0       	ldi	r23, 0x01	; 1
    af18:	7d 83       	std	Y+5, r23	; 0x05
    af1a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    af1c:	0f 90       	pop	r0
    af1e:	0f 90       	pop	r0
    af20:	0f 90       	pop	r0
    af22:	0f 90       	pop	r0
    af24:	0f 90       	pop	r0
    af26:	cf 91       	pop	r28
    af28:	df 91       	pop	r29
    af2a:	08 95       	ret

0000af2c <_ZNK6String6equalsEPKc>:
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    af2c:	df 93       	push	r29
    af2e:	cf 93       	push	r28
    af30:	00 d0       	rcall	.+0      	; 0xaf32 <_ZNK6String6equalsEPKc+0x6>
    af32:	00 d0       	rcall	.+0      	; 0xaf34 <_ZNK6String6equalsEPKc+0x8>
    af34:	00 d0       	rcall	.+0      	; 0xaf36 <_ZNK6String6equalsEPKc+0xa>
    af36:	cd b7       	in	r28, 0x3d	; 61
    af38:	de b7       	in	r29, 0x3e	; 62
    af3a:	9a 83       	std	Y+2, r25	; 0x02
    af3c:	89 83       	std	Y+1, r24	; 0x01
    af3e:	7c 83       	std	Y+4, r23	; 0x04
    af40:	6b 83       	std	Y+3, r22	; 0x03
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    af42:	e9 81       	ldd	r30, Y+1	; 0x01
    af44:	fa 81       	ldd	r31, Y+2	; 0x02
    af46:	84 81       	ldd	r24, Z+4	; 0x04
    af48:	95 81       	ldd	r25, Z+5	; 0x05
    af4a:	00 97       	sbiw	r24, 0x00	; 0
    af4c:	81 f4       	brne	.+32     	; 0xaf6e <_ZNK6String6equalsEPKc+0x42>
    af4e:	8b 81       	ldd	r24, Y+3	; 0x03
    af50:	9c 81       	ldd	r25, Y+4	; 0x04
    af52:	00 97       	sbiw	r24, 0x00	; 0
    af54:	29 f0       	breq	.+10     	; 0xaf60 <_ZNK6String6equalsEPKc+0x34>
    af56:	eb 81       	ldd	r30, Y+3	; 0x03
    af58:	fc 81       	ldd	r31, Y+4	; 0x04
    af5a:	80 81       	ld	r24, Z
    af5c:	88 23       	and	r24, r24
    af5e:	19 f4       	brne	.+6      	; 0xaf66 <_ZNK6String6equalsEPKc+0x3a>
    af60:	81 e0       	ldi	r24, 0x01	; 1
    af62:	8d 83       	std	Y+5, r24	; 0x05
    af64:	01 c0       	rjmp	.+2      	; 0xaf68 <_ZNK6String6equalsEPKc+0x3c>
    af66:	1d 82       	std	Y+5, r1	; 0x05
    af68:	8d 81       	ldd	r24, Y+5	; 0x05
    af6a:	8e 83       	std	Y+6, r24	; 0x06
    af6c:	1e c0       	rjmp	.+60     	; 0xafaa <_ZNK6String6equalsEPKc+0x7e>
	if (cstr == NULL) return buffer[0] == 0;
    af6e:	8b 81       	ldd	r24, Y+3	; 0x03
    af70:	9c 81       	ldd	r25, Y+4	; 0x04
    af72:	00 97       	sbiw	r24, 0x00	; 0
    af74:	61 f4       	brne	.+24     	; 0xaf8e <_ZNK6String6equalsEPKc+0x62>
    af76:	e9 81       	ldd	r30, Y+1	; 0x01
    af78:	fa 81       	ldd	r31, Y+2	; 0x02
    af7a:	01 90       	ld	r0, Z+
    af7c:	f0 81       	ld	r31, Z
    af7e:	e0 2d       	mov	r30, r0
    af80:	80 81       	ld	r24, Z
    af82:	1e 82       	std	Y+6, r1	; 0x06
    af84:	88 23       	and	r24, r24
    af86:	89 f4       	brne	.+34     	; 0xafaa <_ZNK6String6equalsEPKc+0x7e>
    af88:	81 e0       	ldi	r24, 0x01	; 1
    af8a:	8e 83       	std	Y+6, r24	; 0x06
    af8c:	0e c0       	rjmp	.+28     	; 0xafaa <_ZNK6String6equalsEPKc+0x7e>
	return strcmp(buffer, cstr) == 0;
    af8e:	e9 81       	ldd	r30, Y+1	; 0x01
    af90:	fa 81       	ldd	r31, Y+2	; 0x02
    af92:	80 81       	ld	r24, Z
    af94:	91 81       	ldd	r25, Z+1	; 0x01
    af96:	2b 81       	ldd	r18, Y+3	; 0x03
    af98:	3c 81       	ldd	r19, Y+4	; 0x04
    af9a:	b9 01       	movw	r22, r18
    af9c:	0e 94 31 85 	call	0x10a62	; 0x10a62 <strcmp>
    afa0:	1e 82       	std	Y+6, r1	; 0x06
    afa2:	00 97       	sbiw	r24, 0x00	; 0
    afa4:	11 f4       	brne	.+4      	; 0xafaa <_ZNK6String6equalsEPKc+0x7e>
    afa6:	81 e0       	ldi	r24, 0x01	; 1
    afa8:	8e 83       	std	Y+6, r24	; 0x06
    afaa:	8e 81       	ldd	r24, Y+6	; 0x06
}
    afac:	26 96       	adiw	r28, 0x06	; 6
    afae:	0f b6       	in	r0, 0x3f	; 63
    afb0:	f8 94       	cli
    afb2:	de bf       	out	0x3e, r29	; 62
    afb4:	0f be       	out	0x3f, r0	; 63
    afb6:	cd bf       	out	0x3d, r28	; 61
    afb8:	cf 91       	pop	r28
    afba:	df 91       	pop	r29
    afbc:	08 95       	ret

0000afbe <_ZNK6String9compareToERKS_>:

/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
    afbe:	df 93       	push	r29
    afc0:	cf 93       	push	r28
    afc2:	00 d0       	rcall	.+0      	; 0xafc4 <_ZNK6String9compareToERKS_+0x6>
    afc4:	00 d0       	rcall	.+0      	; 0xafc6 <_ZNK6String9compareToERKS_+0x8>
    afc6:	00 d0       	rcall	.+0      	; 0xafc8 <_ZNK6String9compareToERKS_+0xa>
    afc8:	cd b7       	in	r28, 0x3d	; 61
    afca:	de b7       	in	r29, 0x3e	; 62
    afcc:	9a 83       	std	Y+2, r25	; 0x02
    afce:	89 83       	std	Y+1, r24	; 0x01
    afd0:	7c 83       	std	Y+4, r23	; 0x04
    afd2:	6b 83       	std	Y+3, r22	; 0x03
{
	if (!buffer || !s.buffer) {
    afd4:	e9 81       	ldd	r30, Y+1	; 0x01
    afd6:	fa 81       	ldd	r31, Y+2	; 0x02
    afd8:	80 81       	ld	r24, Z
    afda:	91 81       	ldd	r25, Z+1	; 0x01
    afdc:	00 97       	sbiw	r24, 0x00	; 0
    afde:	31 f0       	breq	.+12     	; 0xafec <_ZNK6String9compareToERKS_+0x2e>
    afe0:	eb 81       	ldd	r30, Y+3	; 0x03
    afe2:	fc 81       	ldd	r31, Y+4	; 0x04
    afe4:	80 81       	ld	r24, Z
    afe6:	91 81       	ldd	r25, Z+1	; 0x01
    afe8:	00 97       	sbiw	r24, 0x00	; 0
    afea:	a9 f5       	brne	.+106    	; 0xb056 <_ZNK6String9compareToERKS_+0x98>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    afec:	eb 81       	ldd	r30, Y+3	; 0x03
    afee:	fc 81       	ldd	r31, Y+4	; 0x04
    aff0:	80 81       	ld	r24, Z
    aff2:	91 81       	ldd	r25, Z+1	; 0x01
    aff4:	00 97       	sbiw	r24, 0x00	; 0
    aff6:	a9 f0       	breq	.+42     	; 0xb022 <_ZNK6String9compareToERKS_+0x64>
    aff8:	eb 81       	ldd	r30, Y+3	; 0x03
    affa:	fc 81       	ldd	r31, Y+4	; 0x04
    affc:	84 81       	ldd	r24, Z+4	; 0x04
    affe:	95 81       	ldd	r25, Z+5	; 0x05
    b000:	00 97       	sbiw	r24, 0x00	; 0
    b002:	79 f0       	breq	.+30     	; 0xb022 <_ZNK6String9compareToERKS_+0x64>
    b004:	eb 81       	ldd	r30, Y+3	; 0x03
    b006:	fc 81       	ldd	r31, Y+4	; 0x04
    b008:	01 90       	ld	r0, Z+
    b00a:	f0 81       	ld	r31, Z
    b00c:	e0 2d       	mov	r30, r0
    b00e:	80 81       	ld	r24, Z
    b010:	88 2f       	mov	r24, r24
    b012:	90 e0       	ldi	r25, 0x00	; 0
    b014:	22 27       	eor	r18, r18
    b016:	33 27       	eor	r19, r19
    b018:	28 1b       	sub	r18, r24
    b01a:	39 0b       	sbc	r19, r25
    b01c:	3e 83       	std	Y+6, r19	; 0x06
    b01e:	2d 83       	std	Y+5, r18	; 0x05
    b020:	27 c0       	rjmp	.+78     	; 0xb070 <_ZNK6String9compareToERKS_+0xb2>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    b022:	e9 81       	ldd	r30, Y+1	; 0x01
    b024:	fa 81       	ldd	r31, Y+2	; 0x02
    b026:	80 81       	ld	r24, Z
    b028:	91 81       	ldd	r25, Z+1	; 0x01
    b02a:	00 97       	sbiw	r24, 0x00	; 0
    b02c:	89 f0       	breq	.+34     	; 0xb050 <_ZNK6String9compareToERKS_+0x92>
    b02e:	e9 81       	ldd	r30, Y+1	; 0x01
    b030:	fa 81       	ldd	r31, Y+2	; 0x02
    b032:	84 81       	ldd	r24, Z+4	; 0x04
    b034:	95 81       	ldd	r25, Z+5	; 0x05
    b036:	00 97       	sbiw	r24, 0x00	; 0
    b038:	59 f0       	breq	.+22     	; 0xb050 <_ZNK6String9compareToERKS_+0x92>
    b03a:	e9 81       	ldd	r30, Y+1	; 0x01
    b03c:	fa 81       	ldd	r31, Y+2	; 0x02
    b03e:	01 90       	ld	r0, Z+
    b040:	f0 81       	ld	r31, Z
    b042:	e0 2d       	mov	r30, r0
    b044:	80 81       	ld	r24, Z
    b046:	28 2f       	mov	r18, r24
    b048:	30 e0       	ldi	r19, 0x00	; 0
    b04a:	3e 83       	std	Y+6, r19	; 0x06
    b04c:	2d 83       	std	Y+5, r18	; 0x05
    b04e:	10 c0       	rjmp	.+32     	; 0xb070 <_ZNK6String9compareToERKS_+0xb2>
		return 0;
    b050:	1e 82       	std	Y+6, r1	; 0x06
    b052:	1d 82       	std	Y+5, r1	; 0x05
    b054:	0d c0       	rjmp	.+26     	; 0xb070 <_ZNK6String9compareToERKS_+0xb2>
	}
	return strcmp(buffer, s.buffer);
    b056:	e9 81       	ldd	r30, Y+1	; 0x01
    b058:	fa 81       	ldd	r31, Y+2	; 0x02
    b05a:	80 81       	ld	r24, Z
    b05c:	91 81       	ldd	r25, Z+1	; 0x01
    b05e:	eb 81       	ldd	r30, Y+3	; 0x03
    b060:	fc 81       	ldd	r31, Y+4	; 0x04
    b062:	20 81       	ld	r18, Z
    b064:	31 81       	ldd	r19, Z+1	; 0x01
    b066:	b9 01       	movw	r22, r18
    b068:	0e 94 31 85 	call	0x10a62	; 0x10a62 <strcmp>
    b06c:	9e 83       	std	Y+6, r25	; 0x06
    b06e:	8d 83       	std	Y+5, r24	; 0x05
    b070:	8d 81       	ldd	r24, Y+5	; 0x05
    b072:	9e 81       	ldd	r25, Y+6	; 0x06
}
    b074:	26 96       	adiw	r28, 0x06	; 6
    b076:	0f b6       	in	r0, 0x3f	; 63
    b078:	f8 94       	cli
    b07a:	de bf       	out	0x3e, r29	; 62
    b07c:	0f be       	out	0x3f, r0	; 63
    b07e:	cd bf       	out	0x3d, r28	; 61
    b080:	cf 91       	pop	r28
    b082:	df 91       	pop	r29
    b084:	08 95       	ret

0000b086 <_ZNK6StringgeERKS_>:
unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
}

unsigned char String::operator>=(const String &rhs) const
    b086:	df 93       	push	r29
    b088:	cf 93       	push	r28
    b08a:	00 d0       	rcall	.+0      	; 0xb08c <_ZNK6StringgeERKS_+0x6>
    b08c:	00 d0       	rcall	.+0      	; 0xb08e <_ZNK6StringgeERKS_+0x8>
    b08e:	0f 92       	push	r0
    b090:	cd b7       	in	r28, 0x3d	; 61
    b092:	de b7       	in	r29, 0x3e	; 62
    b094:	9a 83       	std	Y+2, r25	; 0x02
    b096:	89 83       	std	Y+1, r24	; 0x01
    b098:	7c 83       	std	Y+4, r23	; 0x04
    b09a:	6b 83       	std	Y+3, r22	; 0x03
{
	return compareTo(rhs) >= 0;
    b09c:	89 81       	ldd	r24, Y+1	; 0x01
    b09e:	9a 81       	ldd	r25, Y+2	; 0x02
    b0a0:	2b 81       	ldd	r18, Y+3	; 0x03
    b0a2:	3c 81       	ldd	r19, Y+4	; 0x04
    b0a4:	b9 01       	movw	r22, r18
    b0a6:	0e 94 df 57 	call	0xafbe	; 0xafbe <_ZNK6String9compareToERKS_>
    b0aa:	1d 82       	std	Y+5, r1	; 0x05
    b0ac:	99 23       	and	r25, r25
    b0ae:	14 f0       	brlt	.+4      	; 0xb0b4 <_ZNK6StringgeERKS_+0x2e>
    b0b0:	81 e0       	ldi	r24, 0x01	; 1
    b0b2:	8d 83       	std	Y+5, r24	; 0x05
    b0b4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    b0b6:	0f 90       	pop	r0
    b0b8:	0f 90       	pop	r0
    b0ba:	0f 90       	pop	r0
    b0bc:	0f 90       	pop	r0
    b0be:	0f 90       	pop	r0
    b0c0:	cf 91       	pop	r28
    b0c2:	df 91       	pop	r29
    b0c4:	08 95       	ret

0000b0c6 <_ZNK6StringleERKS_>:
unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
}

unsigned char String::operator<=(const String &rhs) const
    b0c6:	df 93       	push	r29
    b0c8:	cf 93       	push	r28
    b0ca:	00 d0       	rcall	.+0      	; 0xb0cc <_ZNK6StringleERKS_+0x6>
    b0cc:	00 d0       	rcall	.+0      	; 0xb0ce <_ZNK6StringleERKS_+0x8>
    b0ce:	0f 92       	push	r0
    b0d0:	cd b7       	in	r28, 0x3d	; 61
    b0d2:	de b7       	in	r29, 0x3e	; 62
    b0d4:	9a 83       	std	Y+2, r25	; 0x02
    b0d6:	89 83       	std	Y+1, r24	; 0x01
    b0d8:	7c 83       	std	Y+4, r23	; 0x04
    b0da:	6b 83       	std	Y+3, r22	; 0x03
{
	return compareTo(rhs) <= 0;
    b0dc:	89 81       	ldd	r24, Y+1	; 0x01
    b0de:	9a 81       	ldd	r25, Y+2	; 0x02
    b0e0:	2b 81       	ldd	r18, Y+3	; 0x03
    b0e2:	3c 81       	ldd	r19, Y+4	; 0x04
    b0e4:	b9 01       	movw	r22, r18
    b0e6:	0e 94 df 57 	call	0xafbe	; 0xafbe <_ZNK6String9compareToERKS_>
    b0ea:	1d 82       	std	Y+5, r1	; 0x05
    b0ec:	18 16       	cp	r1, r24
    b0ee:	19 06       	cpc	r1, r25
    b0f0:	14 f0       	brlt	.+4      	; 0xb0f6 <_ZNK6StringleERKS_+0x30>
    b0f2:	81 e0       	ldi	r24, 0x01	; 1
    b0f4:	8d 83       	std	Y+5, r24	; 0x05
    b0f6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    b0f8:	0f 90       	pop	r0
    b0fa:	0f 90       	pop	r0
    b0fc:	0f 90       	pop	r0
    b0fe:	0f 90       	pop	r0
    b100:	0f 90       	pop	r0
    b102:	cf 91       	pop	r28
    b104:	df 91       	pop	r29
    b106:	08 95       	ret

0000b108 <_ZNK6StringgtERKS_>:
unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
}

unsigned char String::operator>(const String &rhs) const
    b108:	df 93       	push	r29
    b10a:	cf 93       	push	r28
    b10c:	00 d0       	rcall	.+0      	; 0xb10e <_ZNK6StringgtERKS_+0x6>
    b10e:	00 d0       	rcall	.+0      	; 0xb110 <_ZNK6StringgtERKS_+0x8>
    b110:	0f 92       	push	r0
    b112:	cd b7       	in	r28, 0x3d	; 61
    b114:	de b7       	in	r29, 0x3e	; 62
    b116:	9a 83       	std	Y+2, r25	; 0x02
    b118:	89 83       	std	Y+1, r24	; 0x01
    b11a:	7c 83       	std	Y+4, r23	; 0x04
    b11c:	6b 83       	std	Y+3, r22	; 0x03
{
	return compareTo(rhs) > 0;
    b11e:	89 81       	ldd	r24, Y+1	; 0x01
    b120:	9a 81       	ldd	r25, Y+2	; 0x02
    b122:	2b 81       	ldd	r18, Y+3	; 0x03
    b124:	3c 81       	ldd	r19, Y+4	; 0x04
    b126:	b9 01       	movw	r22, r18
    b128:	0e 94 df 57 	call	0xafbe	; 0xafbe <_ZNK6String9compareToERKS_>
    b12c:	1d 82       	std	Y+5, r1	; 0x05
    b12e:	18 16       	cp	r1, r24
    b130:	19 06       	cpc	r1, r25
    b132:	14 f4       	brge	.+4      	; 0xb138 <_ZNK6StringgtERKS_+0x30>
    b134:	81 e0       	ldi	r24, 0x01	; 1
    b136:	8d 83       	std	Y+5, r24	; 0x05
    b138:	8d 81       	ldd	r24, Y+5	; 0x05
}
    b13a:	0f 90       	pop	r0
    b13c:	0f 90       	pop	r0
    b13e:	0f 90       	pop	r0
    b140:	0f 90       	pop	r0
    b142:	0f 90       	pop	r0
    b144:	cf 91       	pop	r28
    b146:	df 91       	pop	r29
    b148:	08 95       	ret

0000b14a <_ZNK6StringltERKS_>:
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
    b14a:	df 93       	push	r29
    b14c:	cf 93       	push	r28
    b14e:	00 d0       	rcall	.+0      	; 0xb150 <_ZNK6StringltERKS_+0x6>
    b150:	00 d0       	rcall	.+0      	; 0xb152 <_ZNK6StringltERKS_+0x8>
    b152:	0f 92       	push	r0
    b154:	cd b7       	in	r28, 0x3d	; 61
    b156:	de b7       	in	r29, 0x3e	; 62
    b158:	9a 83       	std	Y+2, r25	; 0x02
    b15a:	89 83       	std	Y+1, r24	; 0x01
    b15c:	7c 83       	std	Y+4, r23	; 0x04
    b15e:	6b 83       	std	Y+3, r22	; 0x03
{
	return compareTo(rhs) < 0;
    b160:	89 81       	ldd	r24, Y+1	; 0x01
    b162:	9a 81       	ldd	r25, Y+2	; 0x02
    b164:	2b 81       	ldd	r18, Y+3	; 0x03
    b166:	3c 81       	ldd	r19, Y+4	; 0x04
    b168:	b9 01       	movw	r22, r18
    b16a:	0e 94 df 57 	call	0xafbe	; 0xafbe <_ZNK6String9compareToERKS_>
    b16e:	1d 82       	std	Y+5, r1	; 0x05
    b170:	99 23       	and	r25, r25
    b172:	14 f4       	brge	.+4      	; 0xb178 <_ZNK6StringltERKS_+0x2e>
    b174:	81 e0       	ldi	r24, 0x01	; 1
    b176:	8d 83       	std	Y+5, r24	; 0x05
    b178:	8d 81       	ldd	r24, Y+5	; 0x05
}
    b17a:	0f 90       	pop	r0
    b17c:	0f 90       	pop	r0
    b17e:	0f 90       	pop	r0
    b180:	0f 90       	pop	r0
    b182:	0f 90       	pop	r0
    b184:	cf 91       	pop	r28
    b186:	df 91       	pop	r29
    b188:	08 95       	ret

0000b18a <_ZNK6String6equalsERKS_>:
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    b18a:	df 93       	push	r29
    b18c:	cf 93       	push	r28
    b18e:	00 d0       	rcall	.+0      	; 0xb190 <_ZNK6String6equalsERKS_+0x6>
    b190:	00 d0       	rcall	.+0      	; 0xb192 <_ZNK6String6equalsERKS_+0x8>
    b192:	0f 92       	push	r0
    b194:	cd b7       	in	r28, 0x3d	; 61
    b196:	de b7       	in	r29, 0x3e	; 62
    b198:	9a 83       	std	Y+2, r25	; 0x02
    b19a:	89 83       	std	Y+1, r24	; 0x01
    b19c:	7c 83       	std	Y+4, r23	; 0x04
    b19e:	6b 83       	std	Y+3, r22	; 0x03
{
	return (len == s2.len && compareTo(s2) == 0);
    b1a0:	e9 81       	ldd	r30, Y+1	; 0x01
    b1a2:	fa 81       	ldd	r31, Y+2	; 0x02
    b1a4:	24 81       	ldd	r18, Z+4	; 0x04
    b1a6:	35 81       	ldd	r19, Z+5	; 0x05
    b1a8:	eb 81       	ldd	r30, Y+3	; 0x03
    b1aa:	fc 81       	ldd	r31, Y+4	; 0x04
    b1ac:	84 81       	ldd	r24, Z+4	; 0x04
    b1ae:	95 81       	ldd	r25, Z+5	; 0x05
    b1b0:	28 17       	cp	r18, r24
    b1b2:	39 07       	cpc	r19, r25
    b1b4:	61 f4       	brne	.+24     	; 0xb1ce <_ZNK6String6equalsERKS_+0x44>
    b1b6:	89 81       	ldd	r24, Y+1	; 0x01
    b1b8:	9a 81       	ldd	r25, Y+2	; 0x02
    b1ba:	2b 81       	ldd	r18, Y+3	; 0x03
    b1bc:	3c 81       	ldd	r19, Y+4	; 0x04
    b1be:	b9 01       	movw	r22, r18
    b1c0:	0e 94 df 57 	call	0xafbe	; 0xafbe <_ZNK6String9compareToERKS_>
    b1c4:	00 97       	sbiw	r24, 0x00	; 0
    b1c6:	19 f4       	brne	.+6      	; 0xb1ce <_ZNK6String6equalsERKS_+0x44>
    b1c8:	81 e0       	ldi	r24, 0x01	; 1
    b1ca:	8d 83       	std	Y+5, r24	; 0x05
    b1cc:	01 c0       	rjmp	.+2      	; 0xb1d0 <_ZNK6String6equalsERKS_+0x46>
    b1ce:	1d 82       	std	Y+5, r1	; 0x05
    b1d0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    b1d2:	0f 90       	pop	r0
    b1d4:	0f 90       	pop	r0
    b1d6:	0f 90       	pop	r0
    b1d8:	0f 90       	pop	r0
    b1da:	0f 90       	pop	r0
    b1dc:	cf 91       	pop	r28
    b1de:	df 91       	pop	r29
    b1e0:	08 95       	ret

0000b1e2 <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
    b1e2:	df 93       	push	r29
    b1e4:	cf 93       	push	r28
    b1e6:	cd b7       	in	r28, 0x3d	; 61
    b1e8:	de b7       	in	r29, 0x3e	; 62
    b1ea:	27 97       	sbiw	r28, 0x07	; 7
    b1ec:	0f b6       	in	r0, 0x3f	; 63
    b1ee:	f8 94       	cli
    b1f0:	de bf       	out	0x3e, r29	; 62
    b1f2:	0f be       	out	0x3f, r0	; 63
    b1f4:	cd bf       	out	0x3d, r28	; 61
    b1f6:	9a 83       	std	Y+2, r25	; 0x02
    b1f8:	89 83       	std	Y+1, r24	; 0x01
    b1fa:	7c 83       	std	Y+4, r23	; 0x04
    b1fc:	6b 83       	std	Y+3, r22	; 0x03
    b1fe:	5e 83       	std	Y+6, r21	; 0x06
    b200:	4d 83       	std	Y+5, r20	; 0x05
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    b202:	e9 81       	ldd	r30, Y+1	; 0x01
    b204:	fa 81       	ldd	r31, Y+2	; 0x02
    b206:	24 81       	ldd	r18, Z+4	; 0x04
    b208:	35 81       	ldd	r19, Z+5	; 0x05
    b20a:	eb 81       	ldd	r30, Y+3	; 0x03
    b20c:	fc 81       	ldd	r31, Y+4	; 0x04
    b20e:	84 81       	ldd	r24, Z+4	; 0x04
    b210:	95 81       	ldd	r25, Z+5	; 0x05
    b212:	28 1b       	sub	r18, r24
    b214:	39 0b       	sbc	r19, r25
    b216:	8d 81       	ldd	r24, Y+5	; 0x05
    b218:	9e 81       	ldd	r25, Y+6	; 0x06
    b21a:	28 17       	cp	r18, r24
    b21c:	39 07       	cpc	r19, r25
    b21e:	60 f0       	brcs	.+24     	; 0xb238 <_ZNK6String10startsWithERKS_j+0x56>
    b220:	e9 81       	ldd	r30, Y+1	; 0x01
    b222:	fa 81       	ldd	r31, Y+2	; 0x02
    b224:	80 81       	ld	r24, Z
    b226:	91 81       	ldd	r25, Z+1	; 0x01
    b228:	00 97       	sbiw	r24, 0x00	; 0
    b22a:	31 f0       	breq	.+12     	; 0xb238 <_ZNK6String10startsWithERKS_j+0x56>
    b22c:	eb 81       	ldd	r30, Y+3	; 0x03
    b22e:	fc 81       	ldd	r31, Y+4	; 0x04
    b230:	80 81       	ld	r24, Z
    b232:	91 81       	ldd	r25, Z+1	; 0x01
    b234:	00 97       	sbiw	r24, 0x00	; 0
    b236:	11 f4       	brne	.+4      	; 0xb23c <_ZNK6String10startsWithERKS_j+0x5a>
    b238:	1f 82       	std	Y+7, r1	; 0x07
    b23a:	19 c0       	rjmp	.+50     	; 0xb26e <_ZNK6String10startsWithERKS_j+0x8c>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    b23c:	e9 81       	ldd	r30, Y+1	; 0x01
    b23e:	fa 81       	ldd	r31, Y+2	; 0x02
    b240:	20 81       	ld	r18, Z
    b242:	31 81       	ldd	r19, Z+1	; 0x01
    b244:	8d 81       	ldd	r24, Y+5	; 0x05
    b246:	9e 81       	ldd	r25, Y+6	; 0x06
    b248:	82 0f       	add	r24, r18
    b24a:	93 1f       	adc	r25, r19
    b24c:	eb 81       	ldd	r30, Y+3	; 0x03
    b24e:	fc 81       	ldd	r31, Y+4	; 0x04
    b250:	40 81       	ld	r20, Z
    b252:	51 81       	ldd	r21, Z+1	; 0x01
    b254:	eb 81       	ldd	r30, Y+3	; 0x03
    b256:	fc 81       	ldd	r31, Y+4	; 0x04
    b258:	24 81       	ldd	r18, Z+4	; 0x04
    b25a:	35 81       	ldd	r19, Z+5	; 0x05
    b25c:	ba 01       	movw	r22, r20
    b25e:	a9 01       	movw	r20, r18
    b260:	0e 94 4a 85 	call	0x10a94	; 0x10a94 <strncmp>
    b264:	1f 82       	std	Y+7, r1	; 0x07
    b266:	00 97       	sbiw	r24, 0x00	; 0
    b268:	11 f4       	brne	.+4      	; 0xb26e <_ZNK6String10startsWithERKS_j+0x8c>
    b26a:	81 e0       	ldi	r24, 0x01	; 1
    b26c:	8f 83       	std	Y+7, r24	; 0x07
    b26e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    b270:	27 96       	adiw	r28, 0x07	; 7
    b272:	0f b6       	in	r0, 0x3f	; 63
    b274:	f8 94       	cli
    b276:	de bf       	out	0x3e, r29	; 62
    b278:	0f be       	out	0x3f, r0	; 63
    b27a:	cd bf       	out	0x3d, r28	; 61
    b27c:	cf 91       	pop	r28
    b27e:	df 91       	pop	r29
    b280:	08 95       	ret

0000b282 <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
    b282:	df 93       	push	r29
    b284:	cf 93       	push	r28
    b286:	00 d0       	rcall	.+0      	; 0xb288 <_ZNK6String10startsWithERKS_+0x6>
    b288:	00 d0       	rcall	.+0      	; 0xb28a <_ZNK6String10startsWithERKS_+0x8>
    b28a:	0f 92       	push	r0
    b28c:	cd b7       	in	r28, 0x3d	; 61
    b28e:	de b7       	in	r29, 0x3e	; 62
    b290:	9a 83       	std	Y+2, r25	; 0x02
    b292:	89 83       	std	Y+1, r24	; 0x01
    b294:	7c 83       	std	Y+4, r23	; 0x04
    b296:	6b 83       	std	Y+3, r22	; 0x03
{
	if (len < s2.len) return 0;
    b298:	e9 81       	ldd	r30, Y+1	; 0x01
    b29a:	fa 81       	ldd	r31, Y+2	; 0x02
    b29c:	24 81       	ldd	r18, Z+4	; 0x04
    b29e:	35 81       	ldd	r19, Z+5	; 0x05
    b2a0:	eb 81       	ldd	r30, Y+3	; 0x03
    b2a2:	fc 81       	ldd	r31, Y+4	; 0x04
    b2a4:	84 81       	ldd	r24, Z+4	; 0x04
    b2a6:	95 81       	ldd	r25, Z+5	; 0x05
    b2a8:	28 17       	cp	r18, r24
    b2aa:	39 07       	cpc	r19, r25
    b2ac:	10 f4       	brcc	.+4      	; 0xb2b2 <_ZNK6String10startsWithERKS_+0x30>
    b2ae:	1d 82       	std	Y+5, r1	; 0x05
    b2b0:	0a c0       	rjmp	.+20     	; 0xb2c6 <_ZNK6String10startsWithERKS_+0x44>
	return startsWith(s2, 0);
    b2b2:	89 81       	ldd	r24, Y+1	; 0x01
    b2b4:	9a 81       	ldd	r25, Y+2	; 0x02
    b2b6:	2b 81       	ldd	r18, Y+3	; 0x03
    b2b8:	3c 81       	ldd	r19, Y+4	; 0x04
    b2ba:	b9 01       	movw	r22, r18
    b2bc:	40 e0       	ldi	r20, 0x00	; 0
    b2be:	50 e0       	ldi	r21, 0x00	; 0
    b2c0:	0e 94 f1 58 	call	0xb1e2	; 0xb1e2 <_ZNK6String10startsWithERKS_j>
    b2c4:	8d 83       	std	Y+5, r24	; 0x05
    b2c6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    b2c8:	0f 90       	pop	r0
    b2ca:	0f 90       	pop	r0
    b2cc:	0f 90       	pop	r0
    b2ce:	0f 90       	pop	r0
    b2d0:	0f 90       	pop	r0
    b2d2:	cf 91       	pop	r28
    b2d4:	df 91       	pop	r29
    b2d6:	08 95       	ret

0000b2d8 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
    b2d8:	df 93       	push	r29
    b2da:	cf 93       	push	r28
    b2dc:	cd b7       	in	r28, 0x3d	; 61
    b2de:	de b7       	in	r29, 0x3e	; 62
    b2e0:	27 97       	sbiw	r28, 0x07	; 7
    b2e2:	0f b6       	in	r0, 0x3f	; 63
    b2e4:	f8 94       	cli
    b2e6:	de bf       	out	0x3e, r29	; 62
    b2e8:	0f be       	out	0x3f, r0	; 63
    b2ea:	cd bf       	out	0x3d, r28	; 61
    b2ec:	9c 83       	std	Y+4, r25	; 0x04
    b2ee:	8b 83       	std	Y+3, r24	; 0x03
    b2f0:	7e 83       	std	Y+6, r23	; 0x06
    b2f2:	6d 83       	std	Y+5, r22	; 0x05
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    b2f4:	eb 81       	ldd	r30, Y+3	; 0x03
    b2f6:	fc 81       	ldd	r31, Y+4	; 0x04
    b2f8:	40 81       	ld	r20, Z
    b2fa:	51 81       	ldd	r21, Z+1	; 0x01
    b2fc:	8d 81       	ldd	r24, Y+5	; 0x05
    b2fe:	9e 81       	ldd	r25, Y+6	; 0x06
    b300:	9c 01       	movw	r18, r24
    b302:	2f 5f       	subi	r18, 0xFF	; 255
    b304:	3f 4f       	sbci	r19, 0xFF	; 255
    b306:	ca 01       	movw	r24, r20
    b308:	b9 01       	movw	r22, r18
    b30a:	0e 94 ea 83 	call	0x107d4	; 0x107d4 <realloc>
    b30e:	9a 83       	std	Y+2, r25	; 0x02
    b310:	89 83       	std	Y+1, r24	; 0x01
	if (newbuffer) {
    b312:	89 81       	ldd	r24, Y+1	; 0x01
    b314:	9a 81       	ldd	r25, Y+2	; 0x02
    b316:	00 97       	sbiw	r24, 0x00	; 0
    b318:	79 f0       	breq	.+30     	; 0xb338 <_ZN6String12changeBufferEj+0x60>
		buffer = newbuffer;
    b31a:	eb 81       	ldd	r30, Y+3	; 0x03
    b31c:	fc 81       	ldd	r31, Y+4	; 0x04
    b31e:	89 81       	ldd	r24, Y+1	; 0x01
    b320:	9a 81       	ldd	r25, Y+2	; 0x02
    b322:	91 83       	std	Z+1, r25	; 0x01
    b324:	80 83       	st	Z, r24
		capacity = maxStrLen;
    b326:	eb 81       	ldd	r30, Y+3	; 0x03
    b328:	fc 81       	ldd	r31, Y+4	; 0x04
    b32a:	8d 81       	ldd	r24, Y+5	; 0x05
    b32c:	9e 81       	ldd	r25, Y+6	; 0x06
    b32e:	93 83       	std	Z+3, r25	; 0x03
    b330:	82 83       	std	Z+2, r24	; 0x02
		return 1;
    b332:	81 e0       	ldi	r24, 0x01	; 1
    b334:	8f 83       	std	Y+7, r24	; 0x07
    b336:	01 c0       	rjmp	.+2      	; 0xb33a <_ZN6String12changeBufferEj+0x62>
	}
	return 0;
    b338:	1f 82       	std	Y+7, r1	; 0x07
    b33a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    b33c:	27 96       	adiw	r28, 0x07	; 7
    b33e:	0f b6       	in	r0, 0x3f	; 63
    b340:	f8 94       	cli
    b342:	de bf       	out	0x3e, r29	; 62
    b344:	0f be       	out	0x3f, r0	; 63
    b346:	cd bf       	out	0x3d, r28	; 61
    b348:	cf 91       	pop	r28
    b34a:	df 91       	pop	r29
    b34c:	08 95       	ret

0000b34e <_ZN6String7replaceERKS_S1_>:
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
    b34e:	df 93       	push	r29
    b350:	cf 93       	push	r28
    b352:	cd b7       	in	r28, 0x3d	; 61
    b354:	de b7       	in	r29, 0x3e	; 62
    b356:	69 97       	sbiw	r28, 0x19	; 25
    b358:	0f b6       	in	r0, 0x3f	; 63
    b35a:	f8 94       	cli
    b35c:	de bf       	out	0x3e, r29	; 62
    b35e:	0f be       	out	0x3f, r0	; 63
    b360:	cd bf       	out	0x3d, r28	; 61
    b362:	98 8b       	std	Y+16, r25	; 0x10
    b364:	8f 87       	std	Y+15, r24	; 0x0f
    b366:	7a 8b       	std	Y+18, r23	; 0x12
    b368:	69 8b       	std	Y+17, r22	; 0x11
    b36a:	5c 8b       	std	Y+20, r21	; 0x14
    b36c:	4b 8b       	std	Y+19, r20	; 0x13
{
	if (len == 0 || find.len == 0) return;
    b36e:	ef 85       	ldd	r30, Y+15	; 0x0f
    b370:	f8 89       	ldd	r31, Y+16	; 0x10
    b372:	84 81       	ldd	r24, Z+4	; 0x04
    b374:	95 81       	ldd	r25, Z+5	; 0x05
    b376:	00 97       	sbiw	r24, 0x00	; 0
    b378:	09 f4       	brne	.+2      	; 0xb37c <_ZN6String7replaceERKS_S1_+0x2e>
    b37a:	95 c1       	rjmp	.+810    	; 0xb6a6 <_ZN6String7replaceERKS_S1_+0x358>
    b37c:	e9 89       	ldd	r30, Y+17	; 0x11
    b37e:	fa 89       	ldd	r31, Y+18	; 0x12
    b380:	84 81       	ldd	r24, Z+4	; 0x04
    b382:	95 81       	ldd	r25, Z+5	; 0x05
    b384:	00 97       	sbiw	r24, 0x00	; 0
    b386:	09 f4       	brne	.+2      	; 0xb38a <_ZN6String7replaceERKS_S1_+0x3c>
    b388:	8e c1       	rjmp	.+796    	; 0xb6a6 <_ZN6String7replaceERKS_S1_+0x358>
	int diff = replace.len - find.len;
    b38a:	eb 89       	ldd	r30, Y+19	; 0x13
    b38c:	fc 89       	ldd	r31, Y+20	; 0x14
    b38e:	24 81       	ldd	r18, Z+4	; 0x04
    b390:	35 81       	ldd	r19, Z+5	; 0x05
    b392:	e9 89       	ldd	r30, Y+17	; 0x11
    b394:	fa 89       	ldd	r31, Y+18	; 0x12
    b396:	84 81       	ldd	r24, Z+4	; 0x04
    b398:	95 81       	ldd	r25, Z+5	; 0x05
    b39a:	a9 01       	movw	r20, r18
    b39c:	48 1b       	sub	r20, r24
    b39e:	59 0b       	sbc	r21, r25
    b3a0:	ca 01       	movw	r24, r20
    b3a2:	9e 87       	std	Y+14, r25	; 0x0e
    b3a4:	8d 87       	std	Y+13, r24	; 0x0d
	char *readFrom = buffer;
    b3a6:	ef 85       	ldd	r30, Y+15	; 0x0f
    b3a8:	f8 89       	ldd	r31, Y+16	; 0x10
    b3aa:	80 81       	ld	r24, Z
    b3ac:	91 81       	ldd	r25, Z+1	; 0x01
    b3ae:	9c 87       	std	Y+12, r25	; 0x0c
    b3b0:	8b 87       	std	Y+11, r24	; 0x0b
	char *foundAt;
	if (diff == 0) {
    b3b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    b3b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    b3b6:	00 97       	sbiw	r24, 0x00	; 0
    b3b8:	79 f5       	brne	.+94     	; 0xb418 <_ZN6String7replaceERKS_S1_+0xca>
    b3ba:	18 c0       	rjmp	.+48     	; 0xb3ec <_ZN6String7replaceERKS_S1_+0x9e>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    b3bc:	eb 89       	ldd	r30, Y+19	; 0x13
    b3be:	fc 89       	ldd	r31, Y+20	; 0x14
    b3c0:	40 81       	ld	r20, Z
    b3c2:	51 81       	ldd	r21, Z+1	; 0x01
    b3c4:	eb 89       	ldd	r30, Y+19	; 0x13
    b3c6:	fc 89       	ldd	r31, Y+20	; 0x14
    b3c8:	24 81       	ldd	r18, Z+4	; 0x04
    b3ca:	35 81       	ldd	r19, Z+5	; 0x05
    b3cc:	89 85       	ldd	r24, Y+9	; 0x09
    b3ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    b3d0:	ba 01       	movw	r22, r20
    b3d2:	a9 01       	movw	r20, r18
    b3d4:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
			readFrom = foundAt + replace.len;
    b3d8:	eb 89       	ldd	r30, Y+19	; 0x13
    b3da:	fc 89       	ldd	r31, Y+20	; 0x14
    b3dc:	24 81       	ldd	r18, Z+4	; 0x04
    b3de:	35 81       	ldd	r19, Z+5	; 0x05
    b3e0:	89 85       	ldd	r24, Y+9	; 0x09
    b3e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    b3e4:	82 0f       	add	r24, r18
    b3e6:	93 1f       	adc	r25, r19
    b3e8:	9c 87       	std	Y+12, r25	; 0x0c
    b3ea:	8b 87       	std	Y+11, r24	; 0x0b
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    b3ec:	e9 89       	ldd	r30, Y+17	; 0x11
    b3ee:	fa 89       	ldd	r31, Y+18	; 0x12
    b3f0:	20 81       	ld	r18, Z
    b3f2:	31 81       	ldd	r19, Z+1	; 0x01
    b3f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    b3f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    b3f8:	b9 01       	movw	r22, r18
    b3fa:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <strstr>
    b3fe:	9a 87       	std	Y+10, r25	; 0x0a
    b400:	89 87       	std	Y+9, r24	; 0x09
    b402:	19 8e       	std	Y+25, r1	; 0x19
    b404:	89 85       	ldd	r24, Y+9	; 0x09
    b406:	9a 85       	ldd	r25, Y+10	; 0x0a
    b408:	00 97       	sbiw	r24, 0x00	; 0
    b40a:	11 f0       	breq	.+4      	; 0xb410 <_ZN6String7replaceERKS_S1_+0xc2>
    b40c:	51 e0       	ldi	r21, 0x01	; 1
    b40e:	59 8f       	std	Y+25, r21	; 0x19
    b410:	89 8d       	ldd	r24, Y+25	; 0x19
    b412:	88 23       	and	r24, r24
    b414:	99 f6       	brne	.-90     	; 0xb3bc <_ZN6String7replaceERKS_S1_+0x6e>
    b416:	47 c1       	rjmp	.+654    	; 0xb6a6 <_ZN6String7replaceERKS_S1_+0x358>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    b418:	8d 85       	ldd	r24, Y+13	; 0x0d
    b41a:	9e 85       	ldd	r25, Y+14	; 0x0e
    b41c:	99 23       	and	r25, r25
    b41e:	0c f0       	brlt	.+2      	; 0xb422 <_ZN6String7replaceERKS_S1_+0xd4>
    b420:	6e c0       	rjmp	.+220    	; 0xb4fe <_ZN6String7replaceERKS_S1_+0x1b0>
		char *writeTo = buffer;
    b422:	ef 85       	ldd	r30, Y+15	; 0x0f
    b424:	f8 89       	ldd	r31, Y+16	; 0x10
    b426:	80 81       	ld	r24, Z
    b428:	91 81       	ldd	r25, Z+1	; 0x01
    b42a:	98 87       	std	Y+8, r25	; 0x08
    b42c:	8f 83       	std	Y+7, r24	; 0x07
    b42e:	49 c0       	rjmp	.+146    	; 0xb4c2 <_ZN6String7replaceERKS_S1_+0x174>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    b430:	29 85       	ldd	r18, Y+9	; 0x09
    b432:	3a 85       	ldd	r19, Y+10	; 0x0a
    b434:	8b 85       	ldd	r24, Y+11	; 0x0b
    b436:	9c 85       	ldd	r25, Y+12	; 0x0c
    b438:	f9 01       	movw	r30, r18
    b43a:	e8 1b       	sub	r30, r24
    b43c:	f9 0b       	sbc	r31, r25
    b43e:	cf 01       	movw	r24, r30
    b440:	9e 83       	std	Y+6, r25	; 0x06
    b442:	8d 83       	std	Y+5, r24	; 0x05
			memcpy(writeTo, readFrom, n);
    b444:	8f 81       	ldd	r24, Y+7	; 0x07
    b446:	98 85       	ldd	r25, Y+8	; 0x08
    b448:	2b 85       	ldd	r18, Y+11	; 0x0b
    b44a:	3c 85       	ldd	r19, Y+12	; 0x0c
    b44c:	4d 81       	ldd	r20, Y+5	; 0x05
    b44e:	5e 81       	ldd	r21, Y+6	; 0x06
    b450:	b9 01       	movw	r22, r18
    b452:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
			writeTo += n;
    b456:	2f 81       	ldd	r18, Y+7	; 0x07
    b458:	38 85       	ldd	r19, Y+8	; 0x08
    b45a:	8d 81       	ldd	r24, Y+5	; 0x05
    b45c:	9e 81       	ldd	r25, Y+6	; 0x06
    b45e:	82 0f       	add	r24, r18
    b460:	93 1f       	adc	r25, r19
    b462:	98 87       	std	Y+8, r25	; 0x08
    b464:	8f 83       	std	Y+7, r24	; 0x07
			memcpy(writeTo, replace.buffer, replace.len);
    b466:	eb 89       	ldd	r30, Y+19	; 0x13
    b468:	fc 89       	ldd	r31, Y+20	; 0x14
    b46a:	40 81       	ld	r20, Z
    b46c:	51 81       	ldd	r21, Z+1	; 0x01
    b46e:	eb 89       	ldd	r30, Y+19	; 0x13
    b470:	fc 89       	ldd	r31, Y+20	; 0x14
    b472:	24 81       	ldd	r18, Z+4	; 0x04
    b474:	35 81       	ldd	r19, Z+5	; 0x05
    b476:	8f 81       	ldd	r24, Y+7	; 0x07
    b478:	98 85       	ldd	r25, Y+8	; 0x08
    b47a:	ba 01       	movw	r22, r20
    b47c:	a9 01       	movw	r20, r18
    b47e:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
			writeTo += replace.len;
    b482:	eb 89       	ldd	r30, Y+19	; 0x13
    b484:	fc 89       	ldd	r31, Y+20	; 0x14
    b486:	24 81       	ldd	r18, Z+4	; 0x04
    b488:	35 81       	ldd	r19, Z+5	; 0x05
    b48a:	8f 81       	ldd	r24, Y+7	; 0x07
    b48c:	98 85       	ldd	r25, Y+8	; 0x08
    b48e:	82 0f       	add	r24, r18
    b490:	93 1f       	adc	r25, r19
    b492:	98 87       	std	Y+8, r25	; 0x08
    b494:	8f 83       	std	Y+7, r24	; 0x07
			readFrom = foundAt + find.len;
    b496:	e9 89       	ldd	r30, Y+17	; 0x11
    b498:	fa 89       	ldd	r31, Y+18	; 0x12
    b49a:	24 81       	ldd	r18, Z+4	; 0x04
    b49c:	35 81       	ldd	r19, Z+5	; 0x05
    b49e:	89 85       	ldd	r24, Y+9	; 0x09
    b4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    b4a2:	82 0f       	add	r24, r18
    b4a4:	93 1f       	adc	r25, r19
    b4a6:	9c 87       	std	Y+12, r25	; 0x0c
    b4a8:	8b 87       	std	Y+11, r24	; 0x0b
			len += diff;
    b4aa:	ef 85       	ldd	r30, Y+15	; 0x0f
    b4ac:	f8 89       	ldd	r31, Y+16	; 0x10
    b4ae:	24 81       	ldd	r18, Z+4	; 0x04
    b4b0:	35 81       	ldd	r19, Z+5	; 0x05
    b4b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    b4b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    b4b6:	82 0f       	add	r24, r18
    b4b8:	93 1f       	adc	r25, r19
    b4ba:	ef 85       	ldd	r30, Y+15	; 0x0f
    b4bc:	f8 89       	ldd	r31, Y+16	; 0x10
    b4be:	95 83       	std	Z+5, r25	; 0x05
    b4c0:	84 83       	std	Z+4, r24	; 0x04
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    b4c2:	e9 89       	ldd	r30, Y+17	; 0x11
    b4c4:	fa 89       	ldd	r31, Y+18	; 0x12
    b4c6:	20 81       	ld	r18, Z
    b4c8:	31 81       	ldd	r19, Z+1	; 0x01
    b4ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    b4cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    b4ce:	b9 01       	movw	r22, r18
    b4d0:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <strstr>
    b4d4:	9a 87       	std	Y+10, r25	; 0x0a
    b4d6:	89 87       	std	Y+9, r24	; 0x09
    b4d8:	18 8e       	std	Y+24, r1	; 0x18
    b4da:	89 85       	ldd	r24, Y+9	; 0x09
    b4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    b4de:	00 97       	sbiw	r24, 0x00	; 0
    b4e0:	11 f0       	breq	.+4      	; 0xb4e6 <_ZN6String7replaceERKS_S1_+0x198>
    b4e2:	f1 e0       	ldi	r31, 0x01	; 1
    b4e4:	f8 8f       	std	Y+24, r31	; 0x18
    b4e6:	48 8d       	ldd	r20, Y+24	; 0x18
    b4e8:	44 23       	and	r20, r20
    b4ea:	09 f0       	breq	.+2      	; 0xb4ee <_ZN6String7replaceERKS_S1_+0x1a0>
    b4ec:	a1 cf       	rjmp	.-190    	; 0xb430 <_ZN6String7replaceERKS_S1_+0xe2>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    b4ee:	8f 81       	ldd	r24, Y+7	; 0x07
    b4f0:	98 85       	ldd	r25, Y+8	; 0x08
    b4f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    b4f4:	3c 85       	ldd	r19, Y+12	; 0x0c
    b4f6:	b9 01       	movw	r22, r18
    b4f8:	0e 94 3a 85 	call	0x10a74	; 0x10a74 <strcpy>
    b4fc:	d4 c0       	rjmp	.+424    	; 0xb6a6 <_ZN6String7replaceERKS_S1_+0x358>
	} else {
		unsigned int size = len; // compute size needed for result
    b4fe:	ef 85       	ldd	r30, Y+15	; 0x0f
    b500:	f8 89       	ldd	r31, Y+16	; 0x10
    b502:	84 81       	ldd	r24, Z+4	; 0x04
    b504:	95 81       	ldd	r25, Z+5	; 0x05
    b506:	9c 83       	std	Y+4, r25	; 0x04
    b508:	8b 83       	std	Y+3, r24	; 0x03
    b50a:	12 c0       	rjmp	.+36     	; 0xb530 <_ZN6String7replaceERKS_S1_+0x1e2>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    b50c:	e9 89       	ldd	r30, Y+17	; 0x11
    b50e:	fa 89       	ldd	r31, Y+18	; 0x12
    b510:	24 81       	ldd	r18, Z+4	; 0x04
    b512:	35 81       	ldd	r19, Z+5	; 0x05
    b514:	89 85       	ldd	r24, Y+9	; 0x09
    b516:	9a 85       	ldd	r25, Y+10	; 0x0a
    b518:	82 0f       	add	r24, r18
    b51a:	93 1f       	adc	r25, r19
    b51c:	9c 87       	std	Y+12, r25	; 0x0c
    b51e:	8b 87       	std	Y+11, r24	; 0x0b
			size += diff;
    b520:	2d 85       	ldd	r18, Y+13	; 0x0d
    b522:	3e 85       	ldd	r19, Y+14	; 0x0e
    b524:	8b 81       	ldd	r24, Y+3	; 0x03
    b526:	9c 81       	ldd	r25, Y+4	; 0x04
    b528:	82 0f       	add	r24, r18
    b52a:	93 1f       	adc	r25, r19
    b52c:	9c 83       	std	Y+4, r25	; 0x04
    b52e:	8b 83       	std	Y+3, r24	; 0x03
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    b530:	e9 89       	ldd	r30, Y+17	; 0x11
    b532:	fa 89       	ldd	r31, Y+18	; 0x12
    b534:	20 81       	ld	r18, Z
    b536:	31 81       	ldd	r19, Z+1	; 0x01
    b538:	8b 85       	ldd	r24, Y+11	; 0x0b
    b53a:	9c 85       	ldd	r25, Y+12	; 0x0c
    b53c:	b9 01       	movw	r22, r18
    b53e:	0e 94 72 85 	call	0x10ae4	; 0x10ae4 <strstr>
    b542:	9a 87       	std	Y+10, r25	; 0x0a
    b544:	89 87       	std	Y+9, r24	; 0x09
    b546:	1f 8a       	std	Y+23, r1	; 0x17
    b548:	89 85       	ldd	r24, Y+9	; 0x09
    b54a:	9a 85       	ldd	r25, Y+10	; 0x0a
    b54c:	00 97       	sbiw	r24, 0x00	; 0
    b54e:	11 f0       	breq	.+4      	; 0xb554 <_ZN6String7replaceERKS_S1_+0x206>
    b550:	51 e0       	ldi	r21, 0x01	; 1
    b552:	5f 8b       	std	Y+23, r21	; 0x17
    b554:	8f 89       	ldd	r24, Y+23	; 0x17
    b556:	88 23       	and	r24, r24
    b558:	c9 f6       	brne	.-78     	; 0xb50c <_ZN6String7replaceERKS_S1_+0x1be>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    b55a:	ef 85       	ldd	r30, Y+15	; 0x0f
    b55c:	f8 89       	ldd	r31, Y+16	; 0x10
    b55e:	24 81       	ldd	r18, Z+4	; 0x04
    b560:	35 81       	ldd	r19, Z+5	; 0x05
    b562:	8b 81       	ldd	r24, Y+3	; 0x03
    b564:	9c 81       	ldd	r25, Y+4	; 0x04
    b566:	28 17       	cp	r18, r24
    b568:	39 07       	cpc	r19, r25
    b56a:	09 f4       	brne	.+2      	; 0xb56e <_ZN6String7replaceERKS_S1_+0x220>
    b56c:	9c c0       	rjmp	.+312    	; 0xb6a6 <_ZN6String7replaceERKS_S1_+0x358>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    b56e:	ef 85       	ldd	r30, Y+15	; 0x0f
    b570:	f8 89       	ldd	r31, Y+16	; 0x10
    b572:	22 81       	ldd	r18, Z+2	; 0x02
    b574:	33 81       	ldd	r19, Z+3	; 0x03
    b576:	8b 81       	ldd	r24, Y+3	; 0x03
    b578:	9c 81       	ldd	r25, Y+4	; 0x04
    b57a:	28 17       	cp	r18, r24
    b57c:	39 07       	cpc	r19, r25
    b57e:	60 f4       	brcc	.+24     	; 0xb598 <_ZN6String7replaceERKS_S1_+0x24a>
    b580:	8f 85       	ldd	r24, Y+15	; 0x0f
    b582:	98 89       	ldd	r25, Y+16	; 0x10
    b584:	2b 81       	ldd	r18, Y+3	; 0x03
    b586:	3c 81       	ldd	r19, Y+4	; 0x04
    b588:	b9 01       	movw	r22, r18
    b58a:	0e 94 6c 59 	call	0xb2d8	; 0xb2d8 <_ZN6String12changeBufferEj>
    b58e:	88 23       	and	r24, r24
    b590:	19 f4       	brne	.+6      	; 0xb598 <_ZN6String7replaceERKS_S1_+0x24a>
    b592:	e1 e0       	ldi	r30, 0x01	; 1
    b594:	ee 8b       	std	Y+22, r30	; 0x16
    b596:	01 c0       	rjmp	.+2      	; 0xb59a <_ZN6String7replaceERKS_S1_+0x24c>
    b598:	1e 8a       	std	Y+22, r1	; 0x16
    b59a:	8e 89       	ldd	r24, Y+22	; 0x16
    b59c:	88 23       	and	r24, r24
    b59e:	09 f0       	breq	.+2      	; 0xb5a2 <_ZN6String7replaceERKS_S1_+0x254>
    b5a0:	82 c0       	rjmp	.+260    	; 0xb6a6 <_ZN6String7replaceERKS_S1_+0x358>
		int index = len - 1;
    b5a2:	ef 85       	ldd	r30, Y+15	; 0x0f
    b5a4:	f8 89       	ldd	r31, Y+16	; 0x10
    b5a6:	84 81       	ldd	r24, Z+4	; 0x04
    b5a8:	95 81       	ldd	r25, Z+5	; 0x05
    b5aa:	01 97       	sbiw	r24, 0x01	; 1
    b5ac:	9a 83       	std	Y+2, r25	; 0x02
    b5ae:	89 83       	std	Y+1, r24	; 0x01
    b5b0:	5f c0       	rjmp	.+190    	; 0xb670 <_ZN6String7replaceERKS_S1_+0x322>
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
    b5b2:	ef 85       	ldd	r30, Y+15	; 0x0f
    b5b4:	f8 89       	ldd	r31, Y+16	; 0x10
    b5b6:	40 81       	ld	r20, Z
    b5b8:	51 81       	ldd	r21, Z+1	; 0x01
    b5ba:	e9 89       	ldd	r30, Y+17	; 0x11
    b5bc:	fa 89       	ldd	r31, Y+18	; 0x12
    b5be:	24 81       	ldd	r18, Z+4	; 0x04
    b5c0:	35 81       	ldd	r19, Z+5	; 0x05
    b5c2:	89 81       	ldd	r24, Y+1	; 0x01
    b5c4:	9a 81       	ldd	r25, Y+2	; 0x02
    b5c6:	82 0f       	add	r24, r18
    b5c8:	93 1f       	adc	r25, r19
    b5ca:	84 0f       	add	r24, r20
    b5cc:	95 1f       	adc	r25, r21
    b5ce:	9c 87       	std	Y+12, r25	; 0x0c
    b5d0:	8b 87       	std	Y+11, r24	; 0x0b
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    b5d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    b5d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    b5d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    b5d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    b5da:	bc 01       	movw	r22, r24
    b5dc:	62 0f       	add	r22, r18
    b5de:	73 1f       	adc	r23, r19
    b5e0:	ef 85       	ldd	r30, Y+15	; 0x0f
    b5e2:	f8 89       	ldd	r31, Y+16	; 0x10
    b5e4:	44 81       	ldd	r20, Z+4	; 0x04
    b5e6:	55 81       	ldd	r21, Z+5	; 0x05
    b5e8:	ef 85       	ldd	r30, Y+15	; 0x0f
    b5ea:	f8 89       	ldd	r31, Y+16	; 0x10
    b5ec:	80 81       	ld	r24, Z
    b5ee:	91 81       	ldd	r25, Z+1	; 0x01
    b5f0:	9c 01       	movw	r18, r24
    b5f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    b5f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    b5f6:	f9 01       	movw	r30, r18
    b5f8:	e8 1b       	sub	r30, r24
    b5fa:	f9 0b       	sbc	r31, r25
    b5fc:	cf 01       	movw	r24, r30
    b5fe:	48 0f       	add	r20, r24
    b600:	59 1f       	adc	r21, r25
    b602:	2b 85       	ldd	r18, Y+11	; 0x0b
    b604:	3c 85       	ldd	r19, Y+12	; 0x0c
    b606:	cb 01       	movw	r24, r22
    b608:	b9 01       	movw	r22, r18
    b60a:	0e 94 0d 85 	call	0x10a1a	; 0x10a1a <memmove>
			len += diff;
    b60e:	ef 85       	ldd	r30, Y+15	; 0x0f
    b610:	f8 89       	ldd	r31, Y+16	; 0x10
    b612:	24 81       	ldd	r18, Z+4	; 0x04
    b614:	35 81       	ldd	r19, Z+5	; 0x05
    b616:	8d 85       	ldd	r24, Y+13	; 0x0d
    b618:	9e 85       	ldd	r25, Y+14	; 0x0e
    b61a:	82 0f       	add	r24, r18
    b61c:	93 1f       	adc	r25, r19
    b61e:	ef 85       	ldd	r30, Y+15	; 0x0f
    b620:	f8 89       	ldd	r31, Y+16	; 0x10
    b622:	95 83       	std	Z+5, r25	; 0x05
    b624:	84 83       	std	Z+4, r24	; 0x04
			buffer[len] = 0;
    b626:	ef 85       	ldd	r30, Y+15	; 0x0f
    b628:	f8 89       	ldd	r31, Y+16	; 0x10
    b62a:	20 81       	ld	r18, Z
    b62c:	31 81       	ldd	r19, Z+1	; 0x01
    b62e:	ef 85       	ldd	r30, Y+15	; 0x0f
    b630:	f8 89       	ldd	r31, Y+16	; 0x10
    b632:	84 81       	ldd	r24, Z+4	; 0x04
    b634:	95 81       	ldd	r25, Z+5	; 0x05
    b636:	f9 01       	movw	r30, r18
    b638:	e8 0f       	add	r30, r24
    b63a:	f9 1f       	adc	r31, r25
    b63c:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    b63e:	ef 85       	ldd	r30, Y+15	; 0x0f
    b640:	f8 89       	ldd	r31, Y+16	; 0x10
    b642:	20 81       	ld	r18, Z
    b644:	31 81       	ldd	r19, Z+1	; 0x01
    b646:	89 81       	ldd	r24, Y+1	; 0x01
    b648:	9a 81       	ldd	r25, Y+2	; 0x02
    b64a:	82 0f       	add	r24, r18
    b64c:	93 1f       	adc	r25, r19
    b64e:	eb 89       	ldd	r30, Y+19	; 0x13
    b650:	fc 89       	ldd	r31, Y+20	; 0x14
    b652:	40 81       	ld	r20, Z
    b654:	51 81       	ldd	r21, Z+1	; 0x01
    b656:	eb 89       	ldd	r30, Y+19	; 0x13
    b658:	fc 89       	ldd	r31, Y+20	; 0x14
    b65a:	24 81       	ldd	r18, Z+4	; 0x04
    b65c:	35 81       	ldd	r19, Z+5	; 0x05
    b65e:	ba 01       	movw	r22, r20
    b660:	a9 01       	movw	r20, r18
    b662:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
			index--;
    b666:	89 81       	ldd	r24, Y+1	; 0x01
    b668:	9a 81       	ldd	r25, Y+2	; 0x02
    b66a:	01 97       	sbiw	r24, 0x01	; 1
    b66c:	9a 83       	std	Y+2, r25	; 0x02
    b66e:	89 83       	std	Y+1, r24	; 0x01
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    b670:	89 81       	ldd	r24, Y+1	; 0x01
    b672:	9a 81       	ldd	r25, Y+2	; 0x02
    b674:	99 23       	and	r25, r25
    b676:	94 f0       	brlt	.+36     	; 0xb69c <_ZN6String7replaceERKS_S1_+0x34e>
    b678:	49 81       	ldd	r20, Y+1	; 0x01
    b67a:	5a 81       	ldd	r21, Y+2	; 0x02
    b67c:	8f 85       	ldd	r24, Y+15	; 0x0f
    b67e:	98 89       	ldd	r25, Y+16	; 0x10
    b680:	29 89       	ldd	r18, Y+17	; 0x11
    b682:	3a 89       	ldd	r19, Y+18	; 0x12
    b684:	b9 01       	movw	r22, r18
    b686:	0e 94 d8 54 	call	0xa9b0	; 0xa9b0 <_ZNK6String11lastIndexOfERKS_j>
    b68a:	9a 83       	std	Y+2, r25	; 0x02
    b68c:	89 83       	std	Y+1, r24	; 0x01
    b68e:	89 81       	ldd	r24, Y+1	; 0x01
    b690:	9a 81       	ldd	r25, Y+2	; 0x02
    b692:	99 23       	and	r25, r25
    b694:	1c f0       	brlt	.+6      	; 0xb69c <_ZN6String7replaceERKS_S1_+0x34e>
    b696:	f1 e0       	ldi	r31, 0x01	; 1
    b698:	fd 8b       	std	Y+21, r31	; 0x15
    b69a:	01 c0       	rjmp	.+2      	; 0xb69e <_ZN6String7replaceERKS_S1_+0x350>
    b69c:	1d 8a       	std	Y+21, r1	; 0x15
    b69e:	8d 89       	ldd	r24, Y+21	; 0x15
    b6a0:	88 23       	and	r24, r24
    b6a2:	09 f0       	breq	.+2      	; 0xb6a6 <_ZN6String7replaceERKS_S1_+0x358>
    b6a4:	86 cf       	rjmp	.-244    	; 0xb5b2 <_ZN6String7replaceERKS_S1_+0x264>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    b6a6:	69 96       	adiw	r28, 0x19	; 25
    b6a8:	0f b6       	in	r0, 0x3f	; 63
    b6aa:	f8 94       	cli
    b6ac:	de bf       	out	0x3e, r29	; 62
    b6ae:	0f be       	out	0x3f, r0	; 63
    b6b0:	cd bf       	out	0x3d, r28	; 61
    b6b2:	cf 91       	pop	r28
    b6b4:	df 91       	pop	r29
    b6b6:	08 95       	ret

0000b6b8 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
    b6b8:	df 93       	push	r29
    b6ba:	cf 93       	push	r28
    b6bc:	00 d0       	rcall	.+0      	; 0xb6be <_ZN6String7reserveEj+0x6>
    b6be:	00 d0       	rcall	.+0      	; 0xb6c0 <_ZN6String7reserveEj+0x8>
    b6c0:	00 d0       	rcall	.+0      	; 0xb6c2 <_ZN6String7reserveEj+0xa>
    b6c2:	cd b7       	in	r28, 0x3d	; 61
    b6c4:	de b7       	in	r29, 0x3e	; 62
    b6c6:	9a 83       	std	Y+2, r25	; 0x02
    b6c8:	89 83       	std	Y+1, r24	; 0x01
    b6ca:	7c 83       	std	Y+4, r23	; 0x04
    b6cc:	6b 83       	std	Y+3, r22	; 0x03
{
	if (buffer && capacity >= size) return 1;
    b6ce:	e9 81       	ldd	r30, Y+1	; 0x01
    b6d0:	fa 81       	ldd	r31, Y+2	; 0x02
    b6d2:	80 81       	ld	r24, Z
    b6d4:	91 81       	ldd	r25, Z+1	; 0x01
    b6d6:	00 97       	sbiw	r24, 0x00	; 0
    b6d8:	61 f0       	breq	.+24     	; 0xb6f2 <_ZN6String7reserveEj+0x3a>
    b6da:	e9 81       	ldd	r30, Y+1	; 0x01
    b6dc:	fa 81       	ldd	r31, Y+2	; 0x02
    b6de:	22 81       	ldd	r18, Z+2	; 0x02
    b6e0:	33 81       	ldd	r19, Z+3	; 0x03
    b6e2:	8b 81       	ldd	r24, Y+3	; 0x03
    b6e4:	9c 81       	ldd	r25, Y+4	; 0x04
    b6e6:	28 17       	cp	r18, r24
    b6e8:	39 07       	cpc	r19, r25
    b6ea:	18 f0       	brcs	.+6      	; 0xb6f2 <_ZN6String7reserveEj+0x3a>
    b6ec:	81 e0       	ldi	r24, 0x01	; 1
    b6ee:	8d 83       	std	Y+5, r24	; 0x05
    b6f0:	20 c0       	rjmp	.+64     	; 0xb732 <_ZN6String7reserveEj+0x7a>
	if (changeBuffer(size)) {
    b6f2:	89 81       	ldd	r24, Y+1	; 0x01
    b6f4:	9a 81       	ldd	r25, Y+2	; 0x02
    b6f6:	2b 81       	ldd	r18, Y+3	; 0x03
    b6f8:	3c 81       	ldd	r19, Y+4	; 0x04
    b6fa:	b9 01       	movw	r22, r18
    b6fc:	0e 94 6c 59 	call	0xb2d8	; 0xb2d8 <_ZN6String12changeBufferEj>
    b700:	8e 83       	std	Y+6, r24	; 0x06
    b702:	8e 81       	ldd	r24, Y+6	; 0x06
    b704:	88 23       	and	r24, r24
    b706:	11 f0       	breq	.+4      	; 0xb70c <_ZN6String7reserveEj+0x54>
    b708:	81 e0       	ldi	r24, 0x01	; 1
    b70a:	8e 83       	std	Y+6, r24	; 0x06
    b70c:	8e 81       	ldd	r24, Y+6	; 0x06
    b70e:	88 23       	and	r24, r24
    b710:	79 f0       	breq	.+30     	; 0xb730 <_ZN6String7reserveEj+0x78>
		if (len == 0) buffer[0] = 0;
    b712:	e9 81       	ldd	r30, Y+1	; 0x01
    b714:	fa 81       	ldd	r31, Y+2	; 0x02
    b716:	84 81       	ldd	r24, Z+4	; 0x04
    b718:	95 81       	ldd	r25, Z+5	; 0x05
    b71a:	00 97       	sbiw	r24, 0x00	; 0
    b71c:	31 f4       	brne	.+12     	; 0xb72a <_ZN6String7reserveEj+0x72>
    b71e:	e9 81       	ldd	r30, Y+1	; 0x01
    b720:	fa 81       	ldd	r31, Y+2	; 0x02
    b722:	01 90       	ld	r0, Z+
    b724:	f0 81       	ld	r31, Z
    b726:	e0 2d       	mov	r30, r0
    b728:	10 82       	st	Z, r1
		return 1;
    b72a:	81 e0       	ldi	r24, 0x01	; 1
    b72c:	8d 83       	std	Y+5, r24	; 0x05
    b72e:	01 c0       	rjmp	.+2      	; 0xb732 <_ZN6String7reserveEj+0x7a>
	}
	return 0;
    b730:	1d 82       	std	Y+5, r1	; 0x05
    b732:	8d 81       	ldd	r24, Y+5	; 0x05
}
    b734:	26 96       	adiw	r28, 0x06	; 6
    b736:	0f b6       	in	r0, 0x3f	; 63
    b738:	f8 94       	cli
    b73a:	de bf       	out	0x3e, r29	; 62
    b73c:	0f be       	out	0x3f, r0	; 63
    b73e:	cd bf       	out	0x3d, r28	; 61
    b740:	cf 91       	pop	r28
    b742:	df 91       	pop	r29
    b744:	08 95       	ret

0000b746 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
    b746:	df 93       	push	r29
    b748:	cf 93       	push	r28
    b74a:	cd b7       	in	r28, 0x3d	; 61
    b74c:	de b7       	in	r29, 0x3e	; 62
    b74e:	2a 97       	sbiw	r28, 0x0a	; 10
    b750:	0f b6       	in	r0, 0x3f	; 63
    b752:	f8 94       	cli
    b754:	de bf       	out	0x3e, r29	; 62
    b756:	0f be       	out	0x3f, r0	; 63
    b758:	cd bf       	out	0x3d, r28	; 61
    b75a:	9c 83       	std	Y+4, r25	; 0x04
    b75c:	8b 83       	std	Y+3, r24	; 0x03
    b75e:	7e 83       	std	Y+6, r23	; 0x06
    b760:	6d 83       	std	Y+5, r22	; 0x05
    b762:	58 87       	std	Y+8, r21	; 0x08
    b764:	4f 83       	std	Y+7, r20	; 0x07
{
	unsigned int newlen = len + length;
    b766:	eb 81       	ldd	r30, Y+3	; 0x03
    b768:	fc 81       	ldd	r31, Y+4	; 0x04
    b76a:	24 81       	ldd	r18, Z+4	; 0x04
    b76c:	35 81       	ldd	r19, Z+5	; 0x05
    b76e:	8f 81       	ldd	r24, Y+7	; 0x07
    b770:	98 85       	ldd	r25, Y+8	; 0x08
    b772:	82 0f       	add	r24, r18
    b774:	93 1f       	adc	r25, r19
    b776:	9a 83       	std	Y+2, r25	; 0x02
    b778:	89 83       	std	Y+1, r24	; 0x01
	if (!cstr) return 0;
    b77a:	8d 81       	ldd	r24, Y+5	; 0x05
    b77c:	9e 81       	ldd	r25, Y+6	; 0x06
    b77e:	00 97       	sbiw	r24, 0x00	; 0
    b780:	11 f4       	brne	.+4      	; 0xb786 <_ZN6String6concatEPKcj+0x40>
    b782:	1a 86       	std	Y+10, r1	; 0x0a
    b784:	2f c0       	rjmp	.+94     	; 0xb7e4 <_ZN6String6concatEPKcj+0x9e>
	if (length == 0) return 1;
    b786:	8f 81       	ldd	r24, Y+7	; 0x07
    b788:	98 85       	ldd	r25, Y+8	; 0x08
    b78a:	00 97       	sbiw	r24, 0x00	; 0
    b78c:	19 f4       	brne	.+6      	; 0xb794 <_ZN6String6concatEPKcj+0x4e>
    b78e:	81 e0       	ldi	r24, 0x01	; 1
    b790:	8a 87       	std	Y+10, r24	; 0x0a
    b792:	28 c0       	rjmp	.+80     	; 0xb7e4 <_ZN6String6concatEPKcj+0x9e>
	if (!reserve(newlen)) return 0;
    b794:	8b 81       	ldd	r24, Y+3	; 0x03
    b796:	9c 81       	ldd	r25, Y+4	; 0x04
    b798:	29 81       	ldd	r18, Y+1	; 0x01
    b79a:	3a 81       	ldd	r19, Y+2	; 0x02
    b79c:	b9 01       	movw	r22, r18
    b79e:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <_ZN6String7reserveEj>
    b7a2:	19 86       	std	Y+9, r1	; 0x09
    b7a4:	88 23       	and	r24, r24
    b7a6:	11 f4       	brne	.+4      	; 0xb7ac <_ZN6String6concatEPKcj+0x66>
    b7a8:	81 e0       	ldi	r24, 0x01	; 1
    b7aa:	89 87       	std	Y+9, r24	; 0x09
    b7ac:	89 85       	ldd	r24, Y+9	; 0x09
    b7ae:	88 23       	and	r24, r24
    b7b0:	11 f0       	breq	.+4      	; 0xb7b6 <_ZN6String6concatEPKcj+0x70>
    b7b2:	1a 86       	std	Y+10, r1	; 0x0a
    b7b4:	17 c0       	rjmp	.+46     	; 0xb7e4 <_ZN6String6concatEPKcj+0x9e>
	strcpy(buffer + len, cstr);
    b7b6:	eb 81       	ldd	r30, Y+3	; 0x03
    b7b8:	fc 81       	ldd	r31, Y+4	; 0x04
    b7ba:	20 81       	ld	r18, Z
    b7bc:	31 81       	ldd	r19, Z+1	; 0x01
    b7be:	eb 81       	ldd	r30, Y+3	; 0x03
    b7c0:	fc 81       	ldd	r31, Y+4	; 0x04
    b7c2:	84 81       	ldd	r24, Z+4	; 0x04
    b7c4:	95 81       	ldd	r25, Z+5	; 0x05
    b7c6:	82 0f       	add	r24, r18
    b7c8:	93 1f       	adc	r25, r19
    b7ca:	2d 81       	ldd	r18, Y+5	; 0x05
    b7cc:	3e 81       	ldd	r19, Y+6	; 0x06
    b7ce:	b9 01       	movw	r22, r18
    b7d0:	0e 94 3a 85 	call	0x10a74	; 0x10a74 <strcpy>
	len = newlen;
    b7d4:	eb 81       	ldd	r30, Y+3	; 0x03
    b7d6:	fc 81       	ldd	r31, Y+4	; 0x04
    b7d8:	89 81       	ldd	r24, Y+1	; 0x01
    b7da:	9a 81       	ldd	r25, Y+2	; 0x02
    b7dc:	95 83       	std	Z+5, r25	; 0x05
    b7de:	84 83       	std	Z+4, r24	; 0x04
	return 1;
    b7e0:	81 e0       	ldi	r24, 0x01	; 1
    b7e2:	8a 87       	std	Y+10, r24	; 0x0a
    b7e4:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    b7e6:	2a 96       	adiw	r28, 0x0a	; 10
    b7e8:	0f b6       	in	r0, 0x3f	; 63
    b7ea:	f8 94       	cli
    b7ec:	de bf       	out	0x3e, r29	; 62
    b7ee:	0f be       	out	0x3f, r0	; 63
    b7f0:	cd bf       	out	0x3d, r28	; 61
    b7f2:	cf 91       	pop	r28
    b7f4:	df 91       	pop	r29
    b7f6:	08 95       	ret

0000b7f8 <_ZN6String6concatEm>:
	char buf[12];
	ltoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned long num)
    b7f8:	df 93       	push	r29
    b7fa:	cf 93       	push	r28
    b7fc:	cd b7       	in	r28, 0x3d	; 61
    b7fe:	de b7       	in	r29, 0x3e	; 62
    b800:	61 97       	sbiw	r28, 0x11	; 17
    b802:	0f b6       	in	r0, 0x3f	; 63
    b804:	f8 94       	cli
    b806:	de bf       	out	0x3e, r29	; 62
    b808:	0f be       	out	0x3f, r0	; 63
    b80a:	cd bf       	out	0x3d, r28	; 61
    b80c:	9d 87       	std	Y+13, r25	; 0x0d
    b80e:	8c 87       	std	Y+12, r24	; 0x0c
    b810:	4e 87       	std	Y+14, r20	; 0x0e
    b812:	5f 87       	std	Y+15, r21	; 0x0f
    b814:	68 8b       	std	Y+16, r22	; 0x10
    b816:	79 8b       	std	Y+17, r23	; 0x11
{
	char buf[11];
	ultoa(num, buf, 10);
    b818:	8e 85       	ldd	r24, Y+14	; 0x0e
    b81a:	9f 85       	ldd	r25, Y+15	; 0x0f
    b81c:	a8 89       	ldd	r26, Y+16	; 0x10
    b81e:	b9 89       	ldd	r27, Y+17	; 0x11
    b820:	bc 01       	movw	r22, r24
    b822:	cd 01       	movw	r24, r26
    b824:	9e 01       	movw	r18, r28
    b826:	2f 5f       	subi	r18, 0xFF	; 255
    b828:	3f 4f       	sbci	r19, 0xFF	; 255
    b82a:	a9 01       	movw	r20, r18
    b82c:	2a e0       	ldi	r18, 0x0A	; 10
    b82e:	30 e0       	ldi	r19, 0x00	; 0
    b830:	0e 94 f6 85 	call	0x10bec	; 0x10bec <ultoa>
	return concat(buf, strlen(buf));
    b834:	ce 01       	movw	r24, r28
    b836:	01 96       	adiw	r24, 0x01	; 1
    b838:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    b83c:	ac 01       	movw	r20, r24
    b83e:	8c 85       	ldd	r24, Y+12	; 0x0c
    b840:	9d 85       	ldd	r25, Y+13	; 0x0d
    b842:	9e 01       	movw	r18, r28
    b844:	2f 5f       	subi	r18, 0xFF	; 255
    b846:	3f 4f       	sbci	r19, 0xFF	; 255
    b848:	b9 01       	movw	r22, r18
    b84a:	0e 94 a3 5b 	call	0xb746	; 0xb746 <_ZN6String6concatEPKcj>
}
    b84e:	61 96       	adiw	r28, 0x11	; 17
    b850:	0f b6       	in	r0, 0x3f	; 63
    b852:	f8 94       	cli
    b854:	de bf       	out	0x3e, r29	; 62
    b856:	0f be       	out	0x3f, r0	; 63
    b858:	cd bf       	out	0x3d, r28	; 61
    b85a:	cf 91       	pop	r28
    b85c:	df 91       	pop	r29
    b85e:	08 95       	ret

0000b860 <_ZN6String6concatEl>:
	char buf[6];
	utoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(long num)
    b860:	df 93       	push	r29
    b862:	cf 93       	push	r28
    b864:	cd b7       	in	r28, 0x3d	; 61
    b866:	de b7       	in	r29, 0x3e	; 62
    b868:	62 97       	sbiw	r28, 0x12	; 18
    b86a:	0f b6       	in	r0, 0x3f	; 63
    b86c:	f8 94       	cli
    b86e:	de bf       	out	0x3e, r29	; 62
    b870:	0f be       	out	0x3f, r0	; 63
    b872:	cd bf       	out	0x3d, r28	; 61
    b874:	9e 87       	std	Y+14, r25	; 0x0e
    b876:	8d 87       	std	Y+13, r24	; 0x0d
    b878:	4f 87       	std	Y+15, r20	; 0x0f
    b87a:	58 8b       	std	Y+16, r21	; 0x10
    b87c:	69 8b       	std	Y+17, r22	; 0x11
    b87e:	7a 8b       	std	Y+18, r23	; 0x12
{
	char buf[12];
	ltoa(num, buf, 10);
    b880:	8f 85       	ldd	r24, Y+15	; 0x0f
    b882:	98 89       	ldd	r25, Y+16	; 0x10
    b884:	a9 89       	ldd	r26, Y+17	; 0x11
    b886:	ba 89       	ldd	r27, Y+18	; 0x12
    b888:	bc 01       	movw	r22, r24
    b88a:	cd 01       	movw	r24, r26
    b88c:	9e 01       	movw	r18, r28
    b88e:	2f 5f       	subi	r18, 0xFF	; 255
    b890:	3f 4f       	sbci	r19, 0xFF	; 255
    b892:	a9 01       	movw	r20, r18
    b894:	2a e0       	ldi	r18, 0x0A	; 10
    b896:	30 e0       	ldi	r19, 0x00	; 0
    b898:	0e 94 ad 85 	call	0x10b5a	; 0x10b5a <ltoa>
	return concat(buf, strlen(buf));
    b89c:	ce 01       	movw	r24, r28
    b89e:	01 96       	adiw	r24, 0x01	; 1
    b8a0:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    b8a4:	ac 01       	movw	r20, r24
    b8a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    b8a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    b8aa:	9e 01       	movw	r18, r28
    b8ac:	2f 5f       	subi	r18, 0xFF	; 255
    b8ae:	3f 4f       	sbci	r19, 0xFF	; 255
    b8b0:	b9 01       	movw	r22, r18
    b8b2:	0e 94 a3 5b 	call	0xb746	; 0xb746 <_ZN6String6concatEPKcj>
}
    b8b6:	62 96       	adiw	r28, 0x12	; 18
    b8b8:	0f b6       	in	r0, 0x3f	; 63
    b8ba:	f8 94       	cli
    b8bc:	de bf       	out	0x3e, r29	; 62
    b8be:	0f be       	out	0x3f, r0	; 63
    b8c0:	cd bf       	out	0x3d, r28	; 61
    b8c2:	cf 91       	pop	r28
    b8c4:	df 91       	pop	r29
    b8c6:	08 95       	ret

0000b8c8 <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
    b8c8:	df 93       	push	r29
    b8ca:	cf 93       	push	r28
    b8cc:	cd b7       	in	r28, 0x3d	; 61
    b8ce:	de b7       	in	r29, 0x3e	; 62
    b8d0:	2a 97       	sbiw	r28, 0x0a	; 10
    b8d2:	0f b6       	in	r0, 0x3f	; 63
    b8d4:	f8 94       	cli
    b8d6:	de bf       	out	0x3e, r29	; 62
    b8d8:	0f be       	out	0x3f, r0	; 63
    b8da:	cd bf       	out	0x3d, r28	; 61
    b8dc:	98 87       	std	Y+8, r25	; 0x08
    b8de:	8f 83       	std	Y+7, r24	; 0x07
    b8e0:	7a 87       	std	Y+10, r23	; 0x0a
    b8e2:	69 87       	std	Y+9, r22	; 0x09
{
	char buf[6];
	utoa(num, buf, 10);
    b8e4:	89 85       	ldd	r24, Y+9	; 0x09
    b8e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    b8e8:	9e 01       	movw	r18, r28
    b8ea:	2f 5f       	subi	r18, 0xFF	; 255
    b8ec:	3f 4f       	sbci	r19, 0xFF	; 255
    b8ee:	b9 01       	movw	r22, r18
    b8f0:	4a e0       	ldi	r20, 0x0A	; 10
    b8f2:	50 e0       	ldi	r21, 0x00	; 0
    b8f4:	0e 94 1b 86 	call	0x10c36	; 0x10c36 <utoa>
	return concat(buf, strlen(buf));
    b8f8:	ce 01       	movw	r24, r28
    b8fa:	01 96       	adiw	r24, 0x01	; 1
    b8fc:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    b900:	ac 01       	movw	r20, r24
    b902:	8f 81       	ldd	r24, Y+7	; 0x07
    b904:	98 85       	ldd	r25, Y+8	; 0x08
    b906:	9e 01       	movw	r18, r28
    b908:	2f 5f       	subi	r18, 0xFF	; 255
    b90a:	3f 4f       	sbci	r19, 0xFF	; 255
    b90c:	b9 01       	movw	r22, r18
    b90e:	0e 94 a3 5b 	call	0xb746	; 0xb746 <_ZN6String6concatEPKcj>
}
    b912:	2a 96       	adiw	r28, 0x0a	; 10
    b914:	0f b6       	in	r0, 0x3f	; 63
    b916:	f8 94       	cli
    b918:	de bf       	out	0x3e, r29	; 62
    b91a:	0f be       	out	0x3f, r0	; 63
    b91c:	cd bf       	out	0x3d, r28	; 61
    b91e:	cf 91       	pop	r28
    b920:	df 91       	pop	r29
    b922:	08 95       	ret

0000b924 <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
    b924:	df 93       	push	r29
    b926:	cf 93       	push	r28
    b928:	cd b7       	in	r28, 0x3d	; 61
    b92a:	de b7       	in	r29, 0x3e	; 62
    b92c:	2b 97       	sbiw	r28, 0x0b	; 11
    b92e:	0f b6       	in	r0, 0x3f	; 63
    b930:	f8 94       	cli
    b932:	de bf       	out	0x3e, r29	; 62
    b934:	0f be       	out	0x3f, r0	; 63
    b936:	cd bf       	out	0x3d, r28	; 61
    b938:	99 87       	std	Y+9, r25	; 0x09
    b93a:	88 87       	std	Y+8, r24	; 0x08
    b93c:	7b 87       	std	Y+11, r23	; 0x0b
    b93e:	6a 87       	std	Y+10, r22	; 0x0a
{
	char buf[7];
	itoa(num, buf, 10);
    b940:	8a 85       	ldd	r24, Y+10	; 0x0a
    b942:	9b 85       	ldd	r25, Y+11	; 0x0b
    b944:	9e 01       	movw	r18, r28
    b946:	2f 5f       	subi	r18, 0xFF	; 255
    b948:	3f 4f       	sbci	r19, 0xFF	; 255
    b94a:	b9 01       	movw	r22, r18
    b94c:	4a e0       	ldi	r20, 0x0A	; 10
    b94e:	50 e0       	ldi	r21, 0x00	; 0
    b950:	0e 94 8c 85 	call	0x10b18	; 0x10b18 <itoa>
	return concat(buf, strlen(buf));
    b954:	ce 01       	movw	r24, r28
    b956:	01 96       	adiw	r24, 0x01	; 1
    b958:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    b95c:	ac 01       	movw	r20, r24
    b95e:	88 85       	ldd	r24, Y+8	; 0x08
    b960:	99 85       	ldd	r25, Y+9	; 0x09
    b962:	9e 01       	movw	r18, r28
    b964:	2f 5f       	subi	r18, 0xFF	; 255
    b966:	3f 4f       	sbci	r19, 0xFF	; 255
    b968:	b9 01       	movw	r22, r18
    b96a:	0e 94 a3 5b 	call	0xb746	; 0xb746 <_ZN6String6concatEPKcj>
}
    b96e:	2b 96       	adiw	r28, 0x0b	; 11
    b970:	0f b6       	in	r0, 0x3f	; 63
    b972:	f8 94       	cli
    b974:	de bf       	out	0x3e, r29	; 62
    b976:	0f be       	out	0x3f, r0	; 63
    b978:	cd bf       	out	0x3d, r28	; 61
    b97a:	cf 91       	pop	r28
    b97c:	df 91       	pop	r29
    b97e:	08 95       	ret

0000b980 <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
    b980:	df 93       	push	r29
    b982:	cf 93       	push	r28
    b984:	cd b7       	in	r28, 0x3d	; 61
    b986:	de b7       	in	r29, 0x3e	; 62
    b988:	27 97       	sbiw	r28, 0x07	; 7
    b98a:	0f b6       	in	r0, 0x3f	; 63
    b98c:	f8 94       	cli
    b98e:	de bf       	out	0x3e, r29	; 62
    b990:	0f be       	out	0x3f, r0	; 63
    b992:	cd bf       	out	0x3d, r28	; 61
    b994:	9e 83       	std	Y+6, r25	; 0x06
    b996:	8d 83       	std	Y+5, r24	; 0x05
    b998:	6f 83       	std	Y+7, r22	; 0x07
{
	char buf[4];
	itoa(num, buf, 10);
    b99a:	8f 81       	ldd	r24, Y+7	; 0x07
    b99c:	88 2f       	mov	r24, r24
    b99e:	90 e0       	ldi	r25, 0x00	; 0
    b9a0:	9e 01       	movw	r18, r28
    b9a2:	2f 5f       	subi	r18, 0xFF	; 255
    b9a4:	3f 4f       	sbci	r19, 0xFF	; 255
    b9a6:	b9 01       	movw	r22, r18
    b9a8:	4a e0       	ldi	r20, 0x0A	; 10
    b9aa:	50 e0       	ldi	r21, 0x00	; 0
    b9ac:	0e 94 8c 85 	call	0x10b18	; 0x10b18 <itoa>
	return concat(buf, strlen(buf));
    b9b0:	ce 01       	movw	r24, r28
    b9b2:	01 96       	adiw	r24, 0x01	; 1
    b9b4:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    b9b8:	ac 01       	movw	r20, r24
    b9ba:	8d 81       	ldd	r24, Y+5	; 0x05
    b9bc:	9e 81       	ldd	r25, Y+6	; 0x06
    b9be:	9e 01       	movw	r18, r28
    b9c0:	2f 5f       	subi	r18, 0xFF	; 255
    b9c2:	3f 4f       	sbci	r19, 0xFF	; 255
    b9c4:	b9 01       	movw	r22, r18
    b9c6:	0e 94 a3 5b 	call	0xb746	; 0xb746 <_ZN6String6concatEPKcj>
}
    b9ca:	27 96       	adiw	r28, 0x07	; 7
    b9cc:	0f b6       	in	r0, 0x3f	; 63
    b9ce:	f8 94       	cli
    b9d0:	de bf       	out	0x3e, r29	; 62
    b9d2:	0f be       	out	0x3f, r0	; 63
    b9d4:	cd bf       	out	0x3d, r28	; 61
    b9d6:	cf 91       	pop	r28
    b9d8:	df 91       	pop	r29
    b9da:	08 95       	ret

0000b9dc <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
    b9dc:	df 93       	push	r29
    b9de:	cf 93       	push	r28
    b9e0:	00 d0       	rcall	.+0      	; 0xb9e2 <_ZN6String6concatEc+0x6>
    b9e2:	00 d0       	rcall	.+0      	; 0xb9e4 <_ZN6String6concatEc+0x8>
    b9e4:	0f 92       	push	r0
    b9e6:	cd b7       	in	r28, 0x3d	; 61
    b9e8:	de b7       	in	r29, 0x3e	; 62
    b9ea:	9c 83       	std	Y+4, r25	; 0x04
    b9ec:	8b 83       	std	Y+3, r24	; 0x03
    b9ee:	6d 83       	std	Y+5, r22	; 0x05
{
	char buf[2];
	buf[0] = c;
    b9f0:	8d 81       	ldd	r24, Y+5	; 0x05
    b9f2:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0;
    b9f4:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    b9f6:	8b 81       	ldd	r24, Y+3	; 0x03
    b9f8:	9c 81       	ldd	r25, Y+4	; 0x04
    b9fa:	9e 01       	movw	r18, r28
    b9fc:	2f 5f       	subi	r18, 0xFF	; 255
    b9fe:	3f 4f       	sbci	r19, 0xFF	; 255
    ba00:	b9 01       	movw	r22, r18
    ba02:	41 e0       	ldi	r20, 0x01	; 1
    ba04:	50 e0       	ldi	r21, 0x00	; 0
    ba06:	0e 94 a3 5b 	call	0xb746	; 0xb746 <_ZN6String6concatEPKcj>
}
    ba0a:	0f 90       	pop	r0
    ba0c:	0f 90       	pop	r0
    ba0e:	0f 90       	pop	r0
    ba10:	0f 90       	pop	r0
    ba12:	0f 90       	pop	r0
    ba14:	cf 91       	pop	r28
    ba16:	df 91       	pop	r29
    ba18:	08 95       	ret

0000ba1a <_ZN6String6concatEPKc>:
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
    ba1a:	df 93       	push	r29
    ba1c:	cf 93       	push	r28
    ba1e:	00 d0       	rcall	.+0      	; 0xba20 <_ZN6String6concatEPKc+0x6>
    ba20:	00 d0       	rcall	.+0      	; 0xba22 <_ZN6String6concatEPKc+0x8>
    ba22:	0f 92       	push	r0
    ba24:	cd b7       	in	r28, 0x3d	; 61
    ba26:	de b7       	in	r29, 0x3e	; 62
    ba28:	9a 83       	std	Y+2, r25	; 0x02
    ba2a:	89 83       	std	Y+1, r24	; 0x01
    ba2c:	7c 83       	std	Y+4, r23	; 0x04
    ba2e:	6b 83       	std	Y+3, r22	; 0x03
{
	if (!cstr) return 0;
    ba30:	8b 81       	ldd	r24, Y+3	; 0x03
    ba32:	9c 81       	ldd	r25, Y+4	; 0x04
    ba34:	00 97       	sbiw	r24, 0x00	; 0
    ba36:	11 f4       	brne	.+4      	; 0xba3c <_ZN6String6concatEPKc+0x22>
    ba38:	1d 82       	std	Y+5, r1	; 0x05
    ba3a:	0d c0       	rjmp	.+26     	; 0xba56 <_ZN6String6concatEPKc+0x3c>
	return concat(cstr, strlen(cstr));
    ba3c:	8b 81       	ldd	r24, Y+3	; 0x03
    ba3e:	9c 81       	ldd	r25, Y+4	; 0x04
    ba40:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    ba44:	ac 01       	movw	r20, r24
    ba46:	89 81       	ldd	r24, Y+1	; 0x01
    ba48:	9a 81       	ldd	r25, Y+2	; 0x02
    ba4a:	2b 81       	ldd	r18, Y+3	; 0x03
    ba4c:	3c 81       	ldd	r19, Y+4	; 0x04
    ba4e:	b9 01       	movw	r22, r18
    ba50:	0e 94 a3 5b 	call	0xb746	; 0xb746 <_ZN6String6concatEPKcj>
    ba54:	8d 83       	std	Y+5, r24	; 0x05
    ba56:	8d 81       	ldd	r24, Y+5	; 0x05
}
    ba58:	0f 90       	pop	r0
    ba5a:	0f 90       	pop	r0
    ba5c:	0f 90       	pop	r0
    ba5e:	0f 90       	pop	r0
    ba60:	0f 90       	pop	r0
    ba62:	cf 91       	pop	r28
    ba64:	df 91       	pop	r29
    ba66:	08 95       	ret

0000ba68 <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
    ba68:	df 93       	push	r29
    ba6a:	cf 93       	push	r28
    ba6c:	00 d0       	rcall	.+0      	; 0xba6e <_ZN6String6concatERKS_+0x6>
    ba6e:	00 d0       	rcall	.+0      	; 0xba70 <_ZN6String6concatERKS_+0x8>
    ba70:	cd b7       	in	r28, 0x3d	; 61
    ba72:	de b7       	in	r29, 0x3e	; 62
    ba74:	9a 83       	std	Y+2, r25	; 0x02
    ba76:	89 83       	std	Y+1, r24	; 0x01
    ba78:	7c 83       	std	Y+4, r23	; 0x04
    ba7a:	6b 83       	std	Y+3, r22	; 0x03
{
	return concat(s.buffer, s.len);
    ba7c:	eb 81       	ldd	r30, Y+3	; 0x03
    ba7e:	fc 81       	ldd	r31, Y+4	; 0x04
    ba80:	40 81       	ld	r20, Z
    ba82:	51 81       	ldd	r21, Z+1	; 0x01
    ba84:	eb 81       	ldd	r30, Y+3	; 0x03
    ba86:	fc 81       	ldd	r31, Y+4	; 0x04
    ba88:	24 81       	ldd	r18, Z+4	; 0x04
    ba8a:	35 81       	ldd	r19, Z+5	; 0x05
    ba8c:	89 81       	ldd	r24, Y+1	; 0x01
    ba8e:	9a 81       	ldd	r25, Y+2	; 0x02
    ba90:	ba 01       	movw	r22, r20
    ba92:	a9 01       	movw	r20, r18
    ba94:	0e 94 a3 5b 	call	0xb746	; 0xb746 <_ZN6String6concatEPKcj>
}
    ba98:	0f 90       	pop	r0
    ba9a:	0f 90       	pop	r0
    ba9c:	0f 90       	pop	r0
    ba9e:	0f 90       	pop	r0
    baa0:	cf 91       	pop	r28
    baa2:	df 91       	pop	r29
    baa4:	08 95       	ret

0000baa6 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
    baa6:	df 93       	push	r29
    baa8:	cf 93       	push	r28
    baaa:	00 d0       	rcall	.+0      	; 0xbaac <_ZN6String10invalidateEv+0x6>
    baac:	cd b7       	in	r28, 0x3d	; 61
    baae:	de b7       	in	r29, 0x3e	; 62
    bab0:	9a 83       	std	Y+2, r25	; 0x02
    bab2:	89 83       	std	Y+1, r24	; 0x01
{
	if (buffer) free(buffer);
    bab4:	e9 81       	ldd	r30, Y+1	; 0x01
    bab6:	fa 81       	ldd	r31, Y+2	; 0x02
    bab8:	80 81       	ld	r24, Z
    baba:	91 81       	ldd	r25, Z+1	; 0x01
    babc:	00 97       	sbiw	r24, 0x00	; 0
    babe:	31 f0       	breq	.+12     	; 0xbacc <_ZN6String10invalidateEv+0x26>
    bac0:	e9 81       	ldd	r30, Y+1	; 0x01
    bac2:	fa 81       	ldd	r31, Y+2	; 0x02
    bac4:	80 81       	ld	r24, Z
    bac6:	91 81       	ldd	r25, Z+1	; 0x01
    bac8:	0e 94 31 83 	call	0x10662	; 0x10662 <free>
	buffer = NULL;
    bacc:	e9 81       	ldd	r30, Y+1	; 0x01
    bace:	fa 81       	ldd	r31, Y+2	; 0x02
    bad0:	11 82       	std	Z+1, r1	; 0x01
    bad2:	10 82       	st	Z, r1
	capacity = len = 0;
    bad4:	e9 81       	ldd	r30, Y+1	; 0x01
    bad6:	fa 81       	ldd	r31, Y+2	; 0x02
    bad8:	15 82       	std	Z+5, r1	; 0x05
    bada:	14 82       	std	Z+4, r1	; 0x04
    badc:	e9 81       	ldd	r30, Y+1	; 0x01
    bade:	fa 81       	ldd	r31, Y+2	; 0x02
    bae0:	84 81       	ldd	r24, Z+4	; 0x04
    bae2:	95 81       	ldd	r25, Z+5	; 0x05
    bae4:	e9 81       	ldd	r30, Y+1	; 0x01
    bae6:	fa 81       	ldd	r31, Y+2	; 0x02
    bae8:	93 83       	std	Z+3, r25	; 0x03
    baea:	82 83       	std	Z+2, r24	; 0x02
}
    baec:	0f 90       	pop	r0
    baee:	0f 90       	pop	r0
    baf0:	cf 91       	pop	r28
    baf2:	df 91       	pop	r29
    baf4:	08 95       	ret

0000baf6 <_ZplRK15StringSumHelperm>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
    baf6:	df 93       	push	r29
    baf8:	cf 93       	push	r28
    bafa:	cd b7       	in	r28, 0x3d	; 61
    bafc:	de b7       	in	r29, 0x3e	; 62
    bafe:	29 97       	sbiw	r28, 0x09	; 9
    bb00:	0f b6       	in	r0, 0x3f	; 63
    bb02:	f8 94       	cli
    bb04:	de bf       	out	0x3e, r29	; 62
    bb06:	0f be       	out	0x3f, r0	; 63
    bb08:	cd bf       	out	0x3d, r28	; 61
    bb0a:	9c 83       	std	Y+4, r25	; 0x04
    bb0c:	8b 83       	std	Y+3, r24	; 0x03
    bb0e:	4d 83       	std	Y+5, r20	; 0x05
    bb10:	5e 83       	std	Y+6, r21	; 0x06
    bb12:	6f 83       	std	Y+7, r22	; 0x07
    bb14:	78 87       	std	Y+8, r23	; 0x08
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    bb16:	8b 81       	ldd	r24, Y+3	; 0x03
    bb18:	9c 81       	ldd	r25, Y+4	; 0x04
    bb1a:	9a 83       	std	Y+2, r25	; 0x02
    bb1c:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    bb1e:	89 81       	ldd	r24, Y+1	; 0x01
    bb20:	9a 81       	ldd	r25, Y+2	; 0x02
    bb22:	2d 81       	ldd	r18, Y+5	; 0x05
    bb24:	3e 81       	ldd	r19, Y+6	; 0x06
    bb26:	4f 81       	ldd	r20, Y+7	; 0x07
    bb28:	58 85       	ldd	r21, Y+8	; 0x08
    bb2a:	ba 01       	movw	r22, r20
    bb2c:	a9 01       	movw	r20, r18
    bb2e:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <_ZN6String6concatEm>
    bb32:	19 86       	std	Y+9, r1	; 0x09
    bb34:	88 23       	and	r24, r24
    bb36:	11 f4       	brne	.+4      	; 0xbb3c <_ZplRK15StringSumHelperm+0x46>
    bb38:	81 e0       	ldi	r24, 0x01	; 1
    bb3a:	89 87       	std	Y+9, r24	; 0x09
    bb3c:	89 85       	ldd	r24, Y+9	; 0x09
    bb3e:	88 23       	and	r24, r24
    bb40:	21 f0       	breq	.+8      	; 0xbb4a <_ZplRK15StringSumHelperm+0x54>
    bb42:	89 81       	ldd	r24, Y+1	; 0x01
    bb44:	9a 81       	ldd	r25, Y+2	; 0x02
    bb46:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
	return a;
    bb4a:	89 81       	ldd	r24, Y+1	; 0x01
    bb4c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    bb4e:	29 96       	adiw	r28, 0x09	; 9
    bb50:	0f b6       	in	r0, 0x3f	; 63
    bb52:	f8 94       	cli
    bb54:	de bf       	out	0x3e, r29	; 62
    bb56:	0f be       	out	0x3f, r0	; 63
    bb58:	cd bf       	out	0x3d, r28	; 61
    bb5a:	cf 91       	pop	r28
    bb5c:	df 91       	pop	r29
    bb5e:	08 95       	ret

0000bb60 <_ZplRK15StringSumHelperl>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
    bb60:	df 93       	push	r29
    bb62:	cf 93       	push	r28
    bb64:	cd b7       	in	r28, 0x3d	; 61
    bb66:	de b7       	in	r29, 0x3e	; 62
    bb68:	29 97       	sbiw	r28, 0x09	; 9
    bb6a:	0f b6       	in	r0, 0x3f	; 63
    bb6c:	f8 94       	cli
    bb6e:	de bf       	out	0x3e, r29	; 62
    bb70:	0f be       	out	0x3f, r0	; 63
    bb72:	cd bf       	out	0x3d, r28	; 61
    bb74:	9c 83       	std	Y+4, r25	; 0x04
    bb76:	8b 83       	std	Y+3, r24	; 0x03
    bb78:	4d 83       	std	Y+5, r20	; 0x05
    bb7a:	5e 83       	std	Y+6, r21	; 0x06
    bb7c:	6f 83       	std	Y+7, r22	; 0x07
    bb7e:	78 87       	std	Y+8, r23	; 0x08
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    bb80:	8b 81       	ldd	r24, Y+3	; 0x03
    bb82:	9c 81       	ldd	r25, Y+4	; 0x04
    bb84:	9a 83       	std	Y+2, r25	; 0x02
    bb86:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    bb88:	89 81       	ldd	r24, Y+1	; 0x01
    bb8a:	9a 81       	ldd	r25, Y+2	; 0x02
    bb8c:	2d 81       	ldd	r18, Y+5	; 0x05
    bb8e:	3e 81       	ldd	r19, Y+6	; 0x06
    bb90:	4f 81       	ldd	r20, Y+7	; 0x07
    bb92:	58 85       	ldd	r21, Y+8	; 0x08
    bb94:	ba 01       	movw	r22, r20
    bb96:	a9 01       	movw	r20, r18
    bb98:	0e 94 30 5c 	call	0xb860	; 0xb860 <_ZN6String6concatEl>
    bb9c:	19 86       	std	Y+9, r1	; 0x09
    bb9e:	88 23       	and	r24, r24
    bba0:	11 f4       	brne	.+4      	; 0xbba6 <_ZplRK15StringSumHelperl+0x46>
    bba2:	81 e0       	ldi	r24, 0x01	; 1
    bba4:	89 87       	std	Y+9, r24	; 0x09
    bba6:	89 85       	ldd	r24, Y+9	; 0x09
    bba8:	88 23       	and	r24, r24
    bbaa:	21 f0       	breq	.+8      	; 0xbbb4 <_ZplRK15StringSumHelperl+0x54>
    bbac:	89 81       	ldd	r24, Y+1	; 0x01
    bbae:	9a 81       	ldd	r25, Y+2	; 0x02
    bbb0:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
	return a;
    bbb4:	89 81       	ldd	r24, Y+1	; 0x01
    bbb6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    bbb8:	29 96       	adiw	r28, 0x09	; 9
    bbba:	0f b6       	in	r0, 0x3f	; 63
    bbbc:	f8 94       	cli
    bbbe:	de bf       	out	0x3e, r29	; 62
    bbc0:	0f be       	out	0x3f, r0	; 63
    bbc2:	cd bf       	out	0x3d, r28	; 61
    bbc4:	cf 91       	pop	r28
    bbc6:	df 91       	pop	r29
    bbc8:	08 95       	ret

0000bbca <_ZplRK15StringSumHelperj>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
    bbca:	df 93       	push	r29
    bbcc:	cf 93       	push	r28
    bbce:	cd b7       	in	r28, 0x3d	; 61
    bbd0:	de b7       	in	r29, 0x3e	; 62
    bbd2:	27 97       	sbiw	r28, 0x07	; 7
    bbd4:	0f b6       	in	r0, 0x3f	; 63
    bbd6:	f8 94       	cli
    bbd8:	de bf       	out	0x3e, r29	; 62
    bbda:	0f be       	out	0x3f, r0	; 63
    bbdc:	cd bf       	out	0x3d, r28	; 61
    bbde:	9c 83       	std	Y+4, r25	; 0x04
    bbe0:	8b 83       	std	Y+3, r24	; 0x03
    bbe2:	7e 83       	std	Y+6, r23	; 0x06
    bbe4:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    bbe6:	8b 81       	ldd	r24, Y+3	; 0x03
    bbe8:	9c 81       	ldd	r25, Y+4	; 0x04
    bbea:	9a 83       	std	Y+2, r25	; 0x02
    bbec:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    bbee:	89 81       	ldd	r24, Y+1	; 0x01
    bbf0:	9a 81       	ldd	r25, Y+2	; 0x02
    bbf2:	2d 81       	ldd	r18, Y+5	; 0x05
    bbf4:	3e 81       	ldd	r19, Y+6	; 0x06
    bbf6:	b9 01       	movw	r22, r18
    bbf8:	0e 94 64 5c 	call	0xb8c8	; 0xb8c8 <_ZN6String6concatEj>
    bbfc:	1f 82       	std	Y+7, r1	; 0x07
    bbfe:	88 23       	and	r24, r24
    bc00:	11 f4       	brne	.+4      	; 0xbc06 <_ZplRK15StringSumHelperj+0x3c>
    bc02:	81 e0       	ldi	r24, 0x01	; 1
    bc04:	8f 83       	std	Y+7, r24	; 0x07
    bc06:	8f 81       	ldd	r24, Y+7	; 0x07
    bc08:	88 23       	and	r24, r24
    bc0a:	21 f0       	breq	.+8      	; 0xbc14 <_ZplRK15StringSumHelperj+0x4a>
    bc0c:	89 81       	ldd	r24, Y+1	; 0x01
    bc0e:	9a 81       	ldd	r25, Y+2	; 0x02
    bc10:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
	return a;
    bc14:	89 81       	ldd	r24, Y+1	; 0x01
    bc16:	9a 81       	ldd	r25, Y+2	; 0x02
}
    bc18:	27 96       	adiw	r28, 0x07	; 7
    bc1a:	0f b6       	in	r0, 0x3f	; 63
    bc1c:	f8 94       	cli
    bc1e:	de bf       	out	0x3e, r29	; 62
    bc20:	0f be       	out	0x3f, r0	; 63
    bc22:	cd bf       	out	0x3d, r28	; 61
    bc24:	cf 91       	pop	r28
    bc26:	df 91       	pop	r29
    bc28:	08 95       	ret

0000bc2a <_ZplRK15StringSumHelperi>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
    bc2a:	df 93       	push	r29
    bc2c:	cf 93       	push	r28
    bc2e:	cd b7       	in	r28, 0x3d	; 61
    bc30:	de b7       	in	r29, 0x3e	; 62
    bc32:	27 97       	sbiw	r28, 0x07	; 7
    bc34:	0f b6       	in	r0, 0x3f	; 63
    bc36:	f8 94       	cli
    bc38:	de bf       	out	0x3e, r29	; 62
    bc3a:	0f be       	out	0x3f, r0	; 63
    bc3c:	cd bf       	out	0x3d, r28	; 61
    bc3e:	9c 83       	std	Y+4, r25	; 0x04
    bc40:	8b 83       	std	Y+3, r24	; 0x03
    bc42:	7e 83       	std	Y+6, r23	; 0x06
    bc44:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    bc46:	8b 81       	ldd	r24, Y+3	; 0x03
    bc48:	9c 81       	ldd	r25, Y+4	; 0x04
    bc4a:	9a 83       	std	Y+2, r25	; 0x02
    bc4c:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    bc4e:	89 81       	ldd	r24, Y+1	; 0x01
    bc50:	9a 81       	ldd	r25, Y+2	; 0x02
    bc52:	2d 81       	ldd	r18, Y+5	; 0x05
    bc54:	3e 81       	ldd	r19, Y+6	; 0x06
    bc56:	b9 01       	movw	r22, r18
    bc58:	0e 94 92 5c 	call	0xb924	; 0xb924 <_ZN6String6concatEi>
    bc5c:	1f 82       	std	Y+7, r1	; 0x07
    bc5e:	88 23       	and	r24, r24
    bc60:	11 f4       	brne	.+4      	; 0xbc66 <_ZplRK15StringSumHelperi+0x3c>
    bc62:	81 e0       	ldi	r24, 0x01	; 1
    bc64:	8f 83       	std	Y+7, r24	; 0x07
    bc66:	8f 81       	ldd	r24, Y+7	; 0x07
    bc68:	88 23       	and	r24, r24
    bc6a:	21 f0       	breq	.+8      	; 0xbc74 <_ZplRK15StringSumHelperi+0x4a>
    bc6c:	89 81       	ldd	r24, Y+1	; 0x01
    bc6e:	9a 81       	ldd	r25, Y+2	; 0x02
    bc70:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
	return a;
    bc74:	89 81       	ldd	r24, Y+1	; 0x01
    bc76:	9a 81       	ldd	r25, Y+2	; 0x02
}
    bc78:	27 96       	adiw	r28, 0x07	; 7
    bc7a:	0f b6       	in	r0, 0x3f	; 63
    bc7c:	f8 94       	cli
    bc7e:	de bf       	out	0x3e, r29	; 62
    bc80:	0f be       	out	0x3f, r0	; 63
    bc82:	cd bf       	out	0x3d, r28	; 61
    bc84:	cf 91       	pop	r28
    bc86:	df 91       	pop	r29
    bc88:	08 95       	ret

0000bc8a <_ZplRK15StringSumHelperh>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
    bc8a:	df 93       	push	r29
    bc8c:	cf 93       	push	r28
    bc8e:	00 d0       	rcall	.+0      	; 0xbc90 <_ZplRK15StringSumHelperh+0x6>
    bc90:	00 d0       	rcall	.+0      	; 0xbc92 <_ZplRK15StringSumHelperh+0x8>
    bc92:	00 d0       	rcall	.+0      	; 0xbc94 <_ZplRK15StringSumHelperh+0xa>
    bc94:	cd b7       	in	r28, 0x3d	; 61
    bc96:	de b7       	in	r29, 0x3e	; 62
    bc98:	9c 83       	std	Y+4, r25	; 0x04
    bc9a:	8b 83       	std	Y+3, r24	; 0x03
    bc9c:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    bc9e:	8b 81       	ldd	r24, Y+3	; 0x03
    bca0:	9c 81       	ldd	r25, Y+4	; 0x04
    bca2:	9a 83       	std	Y+2, r25	; 0x02
    bca4:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(num)) a.invalidate();
    bca6:	89 81       	ldd	r24, Y+1	; 0x01
    bca8:	9a 81       	ldd	r25, Y+2	; 0x02
    bcaa:	6d 81       	ldd	r22, Y+5	; 0x05
    bcac:	0e 94 c0 5c 	call	0xb980	; 0xb980 <_ZN6String6concatEh>
    bcb0:	1e 82       	std	Y+6, r1	; 0x06
    bcb2:	88 23       	and	r24, r24
    bcb4:	11 f4       	brne	.+4      	; 0xbcba <_ZplRK15StringSumHelperh+0x30>
    bcb6:	81 e0       	ldi	r24, 0x01	; 1
    bcb8:	8e 83       	std	Y+6, r24	; 0x06
    bcba:	8e 81       	ldd	r24, Y+6	; 0x06
    bcbc:	88 23       	and	r24, r24
    bcbe:	21 f0       	breq	.+8      	; 0xbcc8 <_ZplRK15StringSumHelperh+0x3e>
    bcc0:	89 81       	ldd	r24, Y+1	; 0x01
    bcc2:	9a 81       	ldd	r25, Y+2	; 0x02
    bcc4:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
	return a;
    bcc8:	89 81       	ldd	r24, Y+1	; 0x01
    bcca:	9a 81       	ldd	r25, Y+2	; 0x02
}
    bccc:	26 96       	adiw	r28, 0x06	; 6
    bcce:	0f b6       	in	r0, 0x3f	; 63
    bcd0:	f8 94       	cli
    bcd2:	de bf       	out	0x3e, r29	; 62
    bcd4:	0f be       	out	0x3f, r0	; 63
    bcd6:	cd bf       	out	0x3d, r28	; 61
    bcd8:	cf 91       	pop	r28
    bcda:	df 91       	pop	r29
    bcdc:	08 95       	ret

0000bcde <_ZplRK15StringSumHelperc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
    bcde:	df 93       	push	r29
    bce0:	cf 93       	push	r28
    bce2:	00 d0       	rcall	.+0      	; 0xbce4 <_ZplRK15StringSumHelperc+0x6>
    bce4:	00 d0       	rcall	.+0      	; 0xbce6 <_ZplRK15StringSumHelperc+0x8>
    bce6:	00 d0       	rcall	.+0      	; 0xbce8 <_ZplRK15StringSumHelperc+0xa>
    bce8:	cd b7       	in	r28, 0x3d	; 61
    bcea:	de b7       	in	r29, 0x3e	; 62
    bcec:	9c 83       	std	Y+4, r25	; 0x04
    bcee:	8b 83       	std	Y+3, r24	; 0x03
    bcf0:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    bcf2:	8b 81       	ldd	r24, Y+3	; 0x03
    bcf4:	9c 81       	ldd	r25, Y+4	; 0x04
    bcf6:	9a 83       	std	Y+2, r25	; 0x02
    bcf8:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(c)) a.invalidate();
    bcfa:	89 81       	ldd	r24, Y+1	; 0x01
    bcfc:	9a 81       	ldd	r25, Y+2	; 0x02
    bcfe:	6d 81       	ldd	r22, Y+5	; 0x05
    bd00:	0e 94 ee 5c 	call	0xb9dc	; 0xb9dc <_ZN6String6concatEc>
    bd04:	1e 82       	std	Y+6, r1	; 0x06
    bd06:	88 23       	and	r24, r24
    bd08:	11 f4       	brne	.+4      	; 0xbd0e <_ZplRK15StringSumHelperc+0x30>
    bd0a:	81 e0       	ldi	r24, 0x01	; 1
    bd0c:	8e 83       	std	Y+6, r24	; 0x06
    bd0e:	8e 81       	ldd	r24, Y+6	; 0x06
    bd10:	88 23       	and	r24, r24
    bd12:	21 f0       	breq	.+8      	; 0xbd1c <_ZplRK15StringSumHelperc+0x3e>
    bd14:	89 81       	ldd	r24, Y+1	; 0x01
    bd16:	9a 81       	ldd	r25, Y+2	; 0x02
    bd18:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
	return a;
    bd1c:	89 81       	ldd	r24, Y+1	; 0x01
    bd1e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    bd20:	26 96       	adiw	r28, 0x06	; 6
    bd22:	0f b6       	in	r0, 0x3f	; 63
    bd24:	f8 94       	cli
    bd26:	de bf       	out	0x3e, r29	; 62
    bd28:	0f be       	out	0x3f, r0	; 63
    bd2a:	cd bf       	out	0x3d, r28	; 61
    bd2c:	cf 91       	pop	r28
    bd2e:	df 91       	pop	r29
    bd30:	08 95       	ret

0000bd32 <_ZplRK15StringSumHelperPKc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
    bd32:	0f 93       	push	r16
    bd34:	1f 93       	push	r17
    bd36:	df 93       	push	r29
    bd38:	cf 93       	push	r28
    bd3a:	cd b7       	in	r28, 0x3d	; 61
    bd3c:	de b7       	in	r29, 0x3e	; 62
    bd3e:	27 97       	sbiw	r28, 0x07	; 7
    bd40:	0f b6       	in	r0, 0x3f	; 63
    bd42:	f8 94       	cli
    bd44:	de bf       	out	0x3e, r29	; 62
    bd46:	0f be       	out	0x3f, r0	; 63
    bd48:	cd bf       	out	0x3d, r28	; 61
    bd4a:	9c 83       	std	Y+4, r25	; 0x04
    bd4c:	8b 83       	std	Y+3, r24	; 0x03
    bd4e:	7e 83       	std	Y+6, r23	; 0x06
    bd50:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    bd52:	8b 81       	ldd	r24, Y+3	; 0x03
    bd54:	9c 81       	ldd	r25, Y+4	; 0x04
    bd56:	9a 83       	std	Y+2, r25	; 0x02
    bd58:	89 83       	std	Y+1, r24	; 0x01
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    bd5a:	8d 81       	ldd	r24, Y+5	; 0x05
    bd5c:	9e 81       	ldd	r25, Y+6	; 0x06
    bd5e:	00 97       	sbiw	r24, 0x00	; 0
    bd60:	79 f0       	breq	.+30     	; 0xbd80 <_ZplRK15StringSumHelperPKc+0x4e>
    bd62:	09 81       	ldd	r16, Y+1	; 0x01
    bd64:	1a 81       	ldd	r17, Y+2	; 0x02
    bd66:	8d 81       	ldd	r24, Y+5	; 0x05
    bd68:	9e 81       	ldd	r25, Y+6	; 0x06
    bd6a:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    bd6e:	ac 01       	movw	r20, r24
    bd70:	2d 81       	ldd	r18, Y+5	; 0x05
    bd72:	3e 81       	ldd	r19, Y+6	; 0x06
    bd74:	c8 01       	movw	r24, r16
    bd76:	b9 01       	movw	r22, r18
    bd78:	0e 94 a3 5b 	call	0xb746	; 0xb746 <_ZN6String6concatEPKcj>
    bd7c:	88 23       	and	r24, r24
    bd7e:	19 f4       	brne	.+6      	; 0xbd86 <_ZplRK15StringSumHelperPKc+0x54>
    bd80:	81 e0       	ldi	r24, 0x01	; 1
    bd82:	8f 83       	std	Y+7, r24	; 0x07
    bd84:	01 c0       	rjmp	.+2      	; 0xbd88 <_ZplRK15StringSumHelperPKc+0x56>
    bd86:	1f 82       	std	Y+7, r1	; 0x07
    bd88:	8f 81       	ldd	r24, Y+7	; 0x07
    bd8a:	88 23       	and	r24, r24
    bd8c:	21 f0       	breq	.+8      	; 0xbd96 <_ZplRK15StringSumHelperPKc+0x64>
    bd8e:	89 81       	ldd	r24, Y+1	; 0x01
    bd90:	9a 81       	ldd	r25, Y+2	; 0x02
    bd92:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
	return a;
    bd96:	89 81       	ldd	r24, Y+1	; 0x01
    bd98:	9a 81       	ldd	r25, Y+2	; 0x02
}
    bd9a:	27 96       	adiw	r28, 0x07	; 7
    bd9c:	0f b6       	in	r0, 0x3f	; 63
    bd9e:	f8 94       	cli
    bda0:	de bf       	out	0x3e, r29	; 62
    bda2:	0f be       	out	0x3f, r0	; 63
    bda4:	cd bf       	out	0x3d, r28	; 61
    bda6:	cf 91       	pop	r28
    bda8:	df 91       	pop	r29
    bdaa:	1f 91       	pop	r17
    bdac:	0f 91       	pop	r16
    bdae:	08 95       	ret

0000bdb0 <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
    bdb0:	df 93       	push	r29
    bdb2:	cf 93       	push	r28
    bdb4:	cd b7       	in	r28, 0x3d	; 61
    bdb6:	de b7       	in	r29, 0x3e	; 62
    bdb8:	27 97       	sbiw	r28, 0x07	; 7
    bdba:	0f b6       	in	r0, 0x3f	; 63
    bdbc:	f8 94       	cli
    bdbe:	de bf       	out	0x3e, r29	; 62
    bdc0:	0f be       	out	0x3f, r0	; 63
    bdc2:	cd bf       	out	0x3d, r28	; 61
    bdc4:	9c 83       	std	Y+4, r25	; 0x04
    bdc6:	8b 83       	std	Y+3, r24	; 0x03
    bdc8:	7e 83       	std	Y+6, r23	; 0x06
    bdca:	6d 83       	std	Y+5, r22	; 0x05
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
    bdcc:	8b 81       	ldd	r24, Y+3	; 0x03
    bdce:	9c 81       	ldd	r25, Y+4	; 0x04
    bdd0:	9a 83       	std	Y+2, r25	; 0x02
    bdd2:	89 83       	std	Y+1, r24	; 0x01
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    bdd4:	89 81       	ldd	r24, Y+1	; 0x01
    bdd6:	9a 81       	ldd	r25, Y+2	; 0x02
    bdd8:	ed 81       	ldd	r30, Y+5	; 0x05
    bdda:	fe 81       	ldd	r31, Y+6	; 0x06
    bddc:	40 81       	ld	r20, Z
    bdde:	51 81       	ldd	r21, Z+1	; 0x01
    bde0:	ed 81       	ldd	r30, Y+5	; 0x05
    bde2:	fe 81       	ldd	r31, Y+6	; 0x06
    bde4:	24 81       	ldd	r18, Z+4	; 0x04
    bde6:	35 81       	ldd	r19, Z+5	; 0x05
    bde8:	ba 01       	movw	r22, r20
    bdea:	a9 01       	movw	r20, r18
    bdec:	0e 94 a3 5b 	call	0xb746	; 0xb746 <_ZN6String6concatEPKcj>
    bdf0:	1f 82       	std	Y+7, r1	; 0x07
    bdf2:	88 23       	and	r24, r24
    bdf4:	11 f4       	brne	.+4      	; 0xbdfa <_ZplRK15StringSumHelperRK6String+0x4a>
    bdf6:	81 e0       	ldi	r24, 0x01	; 1
    bdf8:	8f 83       	std	Y+7, r24	; 0x07
    bdfa:	8f 81       	ldd	r24, Y+7	; 0x07
    bdfc:	88 23       	and	r24, r24
    bdfe:	21 f0       	breq	.+8      	; 0xbe08 <_ZplRK15StringSumHelperRK6String+0x58>
    be00:	89 81       	ldd	r24, Y+1	; 0x01
    be02:	9a 81       	ldd	r25, Y+2	; 0x02
    be04:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
	return a;
    be08:	89 81       	ldd	r24, Y+1	; 0x01
    be0a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    be0c:	27 96       	adiw	r28, 0x07	; 7
    be0e:	0f b6       	in	r0, 0x3f	; 63
    be10:	f8 94       	cli
    be12:	de bf       	out	0x3e, r29	; 62
    be14:	0f be       	out	0x3f, r0	; 63
    be16:	cd bf       	out	0x3d, r28	; 61
    be18:	cf 91       	pop	r28
    be1a:	df 91       	pop	r29
    be1c:	08 95       	ret

0000be1e <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
    be1e:	df 93       	push	r29
    be20:	cf 93       	push	r28
    be22:	cd b7       	in	r28, 0x3d	; 61
    be24:	de b7       	in	r29, 0x3e	; 62
    be26:	29 97       	sbiw	r28, 0x09	; 9
    be28:	0f b6       	in	r0, 0x3f	; 63
    be2a:	f8 94       	cli
    be2c:	de bf       	out	0x3e, r29	; 62
    be2e:	0f be       	out	0x3f, r0	; 63
    be30:	cd bf       	out	0x3d, r28	; 61
    be32:	9a 83       	std	Y+2, r25	; 0x02
    be34:	89 83       	std	Y+1, r24	; 0x01
    be36:	7c 83       	std	Y+4, r23	; 0x04
    be38:	6b 83       	std	Y+3, r22	; 0x03
    be3a:	5e 83       	std	Y+6, r21	; 0x06
    be3c:	4d 83       	std	Y+5, r20	; 0x05
{
	if (!reserve(length)) {
    be3e:	89 81       	ldd	r24, Y+1	; 0x01
    be40:	9a 81       	ldd	r25, Y+2	; 0x02
    be42:	2d 81       	ldd	r18, Y+5	; 0x05
    be44:	3e 81       	ldd	r19, Y+6	; 0x06
    be46:	b9 01       	movw	r22, r18
    be48:	0e 94 5c 5b 	call	0xb6b8	; 0xb6b8 <_ZN6String7reserveEj>
    be4c:	19 86       	std	Y+9, r1	; 0x09
    be4e:	88 23       	and	r24, r24
    be50:	11 f4       	brne	.+4      	; 0xbe56 <_ZN6String4copyEPKcj+0x38>
    be52:	81 e0       	ldi	r24, 0x01	; 1
    be54:	89 87       	std	Y+9, r24	; 0x09
    be56:	99 85       	ldd	r25, Y+9	; 0x09
    be58:	99 23       	and	r25, r25
    be5a:	49 f0       	breq	.+18     	; 0xbe6e <_ZN6String4copyEPKcj+0x50>
		invalidate();
    be5c:	89 81       	ldd	r24, Y+1	; 0x01
    be5e:	9a 81       	ldd	r25, Y+2	; 0x02
    be60:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
		return *this;
    be64:	89 81       	ldd	r24, Y+1	; 0x01
    be66:	9a 81       	ldd	r25, Y+2	; 0x02
    be68:	98 87       	std	Y+8, r25	; 0x08
    be6a:	8f 83       	std	Y+7, r24	; 0x07
    be6c:	13 c0       	rjmp	.+38     	; 0xbe94 <_ZN6String4copyEPKcj+0x76>
	}
	len = length;
    be6e:	e9 81       	ldd	r30, Y+1	; 0x01
    be70:	fa 81       	ldd	r31, Y+2	; 0x02
    be72:	8d 81       	ldd	r24, Y+5	; 0x05
    be74:	9e 81       	ldd	r25, Y+6	; 0x06
    be76:	95 83       	std	Z+5, r25	; 0x05
    be78:	84 83       	std	Z+4, r24	; 0x04
	strcpy(buffer, cstr);
    be7a:	e9 81       	ldd	r30, Y+1	; 0x01
    be7c:	fa 81       	ldd	r31, Y+2	; 0x02
    be7e:	80 81       	ld	r24, Z
    be80:	91 81       	ldd	r25, Z+1	; 0x01
    be82:	2b 81       	ldd	r18, Y+3	; 0x03
    be84:	3c 81       	ldd	r19, Y+4	; 0x04
    be86:	b9 01       	movw	r22, r18
    be88:	0e 94 3a 85 	call	0x10a74	; 0x10a74 <strcpy>
	return *this;
    be8c:	89 81       	ldd	r24, Y+1	; 0x01
    be8e:	9a 81       	ldd	r25, Y+2	; 0x02
    be90:	98 87       	std	Y+8, r25	; 0x08
    be92:	8f 83       	std	Y+7, r24	; 0x07
    be94:	8f 81       	ldd	r24, Y+7	; 0x07
    be96:	98 85       	ldd	r25, Y+8	; 0x08
}
    be98:	29 96       	adiw	r28, 0x09	; 9
    be9a:	0f b6       	in	r0, 0x3f	; 63
    be9c:	f8 94       	cli
    be9e:	de bf       	out	0x3e, r29	; 62
    bea0:	0f be       	out	0x3f, r0	; 63
    bea2:	cd bf       	out	0x3d, r28	; 61
    bea4:	cf 91       	pop	r28
    bea6:	df 91       	pop	r29
    bea8:	08 95       	ret

0000beaa <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    beaa:	df 93       	push	r29
    beac:	cf 93       	push	r28
    beae:	00 d0       	rcall	.+0      	; 0xbeb0 <_ZN6StringC1EPKc+0x6>
    beb0:	00 d0       	rcall	.+0      	; 0xbeb2 <_ZN6StringC1EPKc+0x8>
    beb2:	cd b7       	in	r28, 0x3d	; 61
    beb4:	de b7       	in	r29, 0x3e	; 62
    beb6:	9a 83       	std	Y+2, r25	; 0x02
    beb8:	89 83       	std	Y+1, r24	; 0x01
    beba:	7c 83       	std	Y+4, r23	; 0x04
    bebc:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    bebe:	89 81       	ldd	r24, Y+1	; 0x01
    bec0:	9a 81       	ldd	r25, Y+2	; 0x02
    bec2:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	if (cstr) copy(cstr, strlen(cstr));
    bec6:	8b 81       	ldd	r24, Y+3	; 0x03
    bec8:	9c 81       	ldd	r25, Y+4	; 0x04
    beca:	00 97       	sbiw	r24, 0x00	; 0
    becc:	61 f0       	breq	.+24     	; 0xbee6 <_ZN6StringC1EPKc+0x3c>
    bece:	8b 81       	ldd	r24, Y+3	; 0x03
    bed0:	9c 81       	ldd	r25, Y+4	; 0x04
    bed2:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    bed6:	ac 01       	movw	r20, r24
    bed8:	89 81       	ldd	r24, Y+1	; 0x01
    beda:	9a 81       	ldd	r25, Y+2	; 0x02
    bedc:	2b 81       	ldd	r18, Y+3	; 0x03
    bede:	3c 81       	ldd	r19, Y+4	; 0x04
    bee0:	b9 01       	movw	r22, r18
    bee2:	0e 94 0f 5f 	call	0xbe1e	; 0xbe1e <_ZN6String4copyEPKcj>
}
    bee6:	0f 90       	pop	r0
    bee8:	0f 90       	pop	r0
    beea:	0f 90       	pop	r0
    beec:	0f 90       	pop	r0
    beee:	cf 91       	pop	r28
    bef0:	df 91       	pop	r29
    bef2:	08 95       	ret

0000bef4 <_ZN6StringC2EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    bef4:	df 93       	push	r29
    bef6:	cf 93       	push	r28
    bef8:	00 d0       	rcall	.+0      	; 0xbefa <_ZN6StringC2EPKc+0x6>
    befa:	00 d0       	rcall	.+0      	; 0xbefc <_ZN6StringC2EPKc+0x8>
    befc:	cd b7       	in	r28, 0x3d	; 61
    befe:	de b7       	in	r29, 0x3e	; 62
    bf00:	9a 83       	std	Y+2, r25	; 0x02
    bf02:	89 83       	std	Y+1, r24	; 0x01
    bf04:	7c 83       	std	Y+4, r23	; 0x04
    bf06:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    bf08:	89 81       	ldd	r24, Y+1	; 0x01
    bf0a:	9a 81       	ldd	r25, Y+2	; 0x02
    bf0c:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	if (cstr) copy(cstr, strlen(cstr));
    bf10:	8b 81       	ldd	r24, Y+3	; 0x03
    bf12:	9c 81       	ldd	r25, Y+4	; 0x04
    bf14:	00 97       	sbiw	r24, 0x00	; 0
    bf16:	61 f0       	breq	.+24     	; 0xbf30 <_ZN6StringC2EPKc+0x3c>
    bf18:	8b 81       	ldd	r24, Y+3	; 0x03
    bf1a:	9c 81       	ldd	r25, Y+4	; 0x04
    bf1c:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    bf20:	ac 01       	movw	r20, r24
    bf22:	89 81       	ldd	r24, Y+1	; 0x01
    bf24:	9a 81       	ldd	r25, Y+2	; 0x02
    bf26:	2b 81       	ldd	r18, Y+3	; 0x03
    bf28:	3c 81       	ldd	r19, Y+4	; 0x04
    bf2a:	b9 01       	movw	r22, r18
    bf2c:	0e 94 0f 5f 	call	0xbe1e	; 0xbe1e <_ZN6String4copyEPKcj>
}
    bf30:	0f 90       	pop	r0
    bf32:	0f 90       	pop	r0
    bf34:	0f 90       	pop	r0
    bf36:	0f 90       	pop	r0
    bf38:	cf 91       	pop	r28
    bf3a:	df 91       	pop	r29
    bf3c:	08 95       	ret

0000bf3e <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
    bf3e:	df 93       	push	r29
    bf40:	cf 93       	push	r28
    bf42:	00 d0       	rcall	.+0      	; 0xbf44 <_ZN6StringaSEPKc+0x6>
    bf44:	00 d0       	rcall	.+0      	; 0xbf46 <_ZN6StringaSEPKc+0x8>
    bf46:	cd b7       	in	r28, 0x3d	; 61
    bf48:	de b7       	in	r29, 0x3e	; 62
    bf4a:	9a 83       	std	Y+2, r25	; 0x02
    bf4c:	89 83       	std	Y+1, r24	; 0x01
    bf4e:	7c 83       	std	Y+4, r23	; 0x04
    bf50:	6b 83       	std	Y+3, r22	; 0x03
{
	if (cstr) copy(cstr, strlen(cstr));
    bf52:	8b 81       	ldd	r24, Y+3	; 0x03
    bf54:	9c 81       	ldd	r25, Y+4	; 0x04
    bf56:	00 97       	sbiw	r24, 0x00	; 0
    bf58:	69 f0       	breq	.+26     	; 0xbf74 <_ZN6StringaSEPKc+0x36>
    bf5a:	8b 81       	ldd	r24, Y+3	; 0x03
    bf5c:	9c 81       	ldd	r25, Y+4	; 0x04
    bf5e:	0e 94 41 85 	call	0x10a82	; 0x10a82 <strlen>
    bf62:	ac 01       	movw	r20, r24
    bf64:	89 81       	ldd	r24, Y+1	; 0x01
    bf66:	9a 81       	ldd	r25, Y+2	; 0x02
    bf68:	2b 81       	ldd	r18, Y+3	; 0x03
    bf6a:	3c 81       	ldd	r19, Y+4	; 0x04
    bf6c:	b9 01       	movw	r22, r18
    bf6e:	0e 94 0f 5f 	call	0xbe1e	; 0xbe1e <_ZN6String4copyEPKcj>
    bf72:	04 c0       	rjmp	.+8      	; 0xbf7c <_ZN6StringaSEPKc+0x3e>
	else invalidate();
    bf74:	89 81       	ldd	r24, Y+1	; 0x01
    bf76:	9a 81       	ldd	r25, Y+2	; 0x02
    bf78:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
	
	return *this;
    bf7c:	89 81       	ldd	r24, Y+1	; 0x01
    bf7e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    bf80:	0f 90       	pop	r0
    bf82:	0f 90       	pop	r0
    bf84:	0f 90       	pop	r0
    bf86:	0f 90       	pop	r0
    bf88:	cf 91       	pop	r28
    bf8a:	df 91       	pop	r29
    bf8c:	08 95       	ret

0000bf8e <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    bf8e:	df 93       	push	r29
    bf90:	cf 93       	push	r28
    bf92:	cd b7       	in	r28, 0x3d	; 61
    bf94:	de b7       	in	r29, 0x3e	; 62
    bf96:	a8 97       	sbiw	r28, 0x28	; 40
    bf98:	0f b6       	in	r0, 0x3f	; 63
    bf9a:	f8 94       	cli
    bf9c:	de bf       	out	0x3e, r29	; 62
    bf9e:	0f be       	out	0x3f, r0	; 63
    bfa0:	cd bf       	out	0x3d, r28	; 61
    bfa2:	9b a3       	std	Y+35, r25	; 0x23
    bfa4:	8a a3       	std	Y+34, r24	; 0x22
    bfa6:	4c a3       	std	Y+36, r20	; 0x24
    bfa8:	5d a3       	std	Y+37, r21	; 0x25
    bfaa:	6e a3       	std	Y+38, r22	; 0x26
    bfac:	7f a3       	std	Y+39, r23	; 0x27
    bfae:	28 a7       	std	Y+40, r18	; 0x28
{
	init();
    bfb0:	8a a1       	ldd	r24, Y+34	; 0x22
    bfb2:	9b a1       	ldd	r25, Y+35	; 0x23
    bfb4:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[33];
	ultoa(value, buf, base);
    bfb8:	88 a5       	ldd	r24, Y+40	; 0x28
    bfba:	e8 2f       	mov	r30, r24
    bfbc:	f0 e0       	ldi	r31, 0x00	; 0
    bfbe:	8c a1       	ldd	r24, Y+36	; 0x24
    bfc0:	9d a1       	ldd	r25, Y+37	; 0x25
    bfc2:	ae a1       	ldd	r26, Y+38	; 0x26
    bfc4:	bf a1       	ldd	r27, Y+39	; 0x27
    bfc6:	bc 01       	movw	r22, r24
    bfc8:	cd 01       	movw	r24, r26
    bfca:	9e 01       	movw	r18, r28
    bfcc:	2f 5f       	subi	r18, 0xFF	; 255
    bfce:	3f 4f       	sbci	r19, 0xFF	; 255
    bfd0:	a9 01       	movw	r20, r18
    bfd2:	9f 01       	movw	r18, r30
    bfd4:	0e 94 f6 85 	call	0x10bec	; 0x10bec <ultoa>
	*this = buf;
    bfd8:	8a a1       	ldd	r24, Y+34	; 0x22
    bfda:	9b a1       	ldd	r25, Y+35	; 0x23
    bfdc:	9e 01       	movw	r18, r28
    bfde:	2f 5f       	subi	r18, 0xFF	; 255
    bfe0:	3f 4f       	sbci	r19, 0xFF	; 255
    bfe2:	b9 01       	movw	r22, r18
    bfe4:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    bfe8:	a8 96       	adiw	r28, 0x28	; 40
    bfea:	0f b6       	in	r0, 0x3f	; 63
    bfec:	f8 94       	cli
    bfee:	de bf       	out	0x3e, r29	; 62
    bff0:	0f be       	out	0x3f, r0	; 63
    bff2:	cd bf       	out	0x3d, r28	; 61
    bff4:	cf 91       	pop	r28
    bff6:	df 91       	pop	r29
    bff8:	08 95       	ret

0000bffa <_ZN6StringC2Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    bffa:	df 93       	push	r29
    bffc:	cf 93       	push	r28
    bffe:	cd b7       	in	r28, 0x3d	; 61
    c000:	de b7       	in	r29, 0x3e	; 62
    c002:	a8 97       	sbiw	r28, 0x28	; 40
    c004:	0f b6       	in	r0, 0x3f	; 63
    c006:	f8 94       	cli
    c008:	de bf       	out	0x3e, r29	; 62
    c00a:	0f be       	out	0x3f, r0	; 63
    c00c:	cd bf       	out	0x3d, r28	; 61
    c00e:	9b a3       	std	Y+35, r25	; 0x23
    c010:	8a a3       	std	Y+34, r24	; 0x22
    c012:	4c a3       	std	Y+36, r20	; 0x24
    c014:	5d a3       	std	Y+37, r21	; 0x25
    c016:	6e a3       	std	Y+38, r22	; 0x26
    c018:	7f a3       	std	Y+39, r23	; 0x27
    c01a:	28 a7       	std	Y+40, r18	; 0x28
{
	init();
    c01c:	8a a1       	ldd	r24, Y+34	; 0x22
    c01e:	9b a1       	ldd	r25, Y+35	; 0x23
    c020:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[33];
	ultoa(value, buf, base);
    c024:	88 a5       	ldd	r24, Y+40	; 0x28
    c026:	e8 2f       	mov	r30, r24
    c028:	f0 e0       	ldi	r31, 0x00	; 0
    c02a:	8c a1       	ldd	r24, Y+36	; 0x24
    c02c:	9d a1       	ldd	r25, Y+37	; 0x25
    c02e:	ae a1       	ldd	r26, Y+38	; 0x26
    c030:	bf a1       	ldd	r27, Y+39	; 0x27
    c032:	bc 01       	movw	r22, r24
    c034:	cd 01       	movw	r24, r26
    c036:	9e 01       	movw	r18, r28
    c038:	2f 5f       	subi	r18, 0xFF	; 255
    c03a:	3f 4f       	sbci	r19, 0xFF	; 255
    c03c:	a9 01       	movw	r20, r18
    c03e:	9f 01       	movw	r18, r30
    c040:	0e 94 f6 85 	call	0x10bec	; 0x10bec <ultoa>
	*this = buf;
    c044:	8a a1       	ldd	r24, Y+34	; 0x22
    c046:	9b a1       	ldd	r25, Y+35	; 0x23
    c048:	9e 01       	movw	r18, r28
    c04a:	2f 5f       	subi	r18, 0xFF	; 255
    c04c:	3f 4f       	sbci	r19, 0xFF	; 255
    c04e:	b9 01       	movw	r22, r18
    c050:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c054:	a8 96       	adiw	r28, 0x28	; 40
    c056:	0f b6       	in	r0, 0x3f	; 63
    c058:	f8 94       	cli
    c05a:	de bf       	out	0x3e, r29	; 62
    c05c:	0f be       	out	0x3f, r0	; 63
    c05e:	cd bf       	out	0x3d, r28	; 61
    c060:	cf 91       	pop	r28
    c062:	df 91       	pop	r29
    c064:	08 95       	ret

0000c066 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    c066:	df 93       	push	r29
    c068:	cf 93       	push	r28
    c06a:	cd b7       	in	r28, 0x3d	; 61
    c06c:	de b7       	in	r29, 0x3e	; 62
    c06e:	a9 97       	sbiw	r28, 0x29	; 41
    c070:	0f b6       	in	r0, 0x3f	; 63
    c072:	f8 94       	cli
    c074:	de bf       	out	0x3e, r29	; 62
    c076:	0f be       	out	0x3f, r0	; 63
    c078:	cd bf       	out	0x3d, r28	; 61
    c07a:	9c a3       	std	Y+36, r25	; 0x24
    c07c:	8b a3       	std	Y+35, r24	; 0x23
    c07e:	4d a3       	std	Y+37, r20	; 0x25
    c080:	5e a3       	std	Y+38, r21	; 0x26
    c082:	6f a3       	std	Y+39, r22	; 0x27
    c084:	78 a7       	std	Y+40, r23	; 0x28
    c086:	29 a7       	std	Y+41, r18	; 0x29
{
	init();
    c088:	8b a1       	ldd	r24, Y+35	; 0x23
    c08a:	9c a1       	ldd	r25, Y+36	; 0x24
    c08c:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[34];
	ltoa(value, buf, base);
    c090:	89 a5       	ldd	r24, Y+41	; 0x29
    c092:	e8 2f       	mov	r30, r24
    c094:	f0 e0       	ldi	r31, 0x00	; 0
    c096:	8d a1       	ldd	r24, Y+37	; 0x25
    c098:	9e a1       	ldd	r25, Y+38	; 0x26
    c09a:	af a1       	ldd	r26, Y+39	; 0x27
    c09c:	b8 a5       	ldd	r27, Y+40	; 0x28
    c09e:	bc 01       	movw	r22, r24
    c0a0:	cd 01       	movw	r24, r26
    c0a2:	9e 01       	movw	r18, r28
    c0a4:	2f 5f       	subi	r18, 0xFF	; 255
    c0a6:	3f 4f       	sbci	r19, 0xFF	; 255
    c0a8:	a9 01       	movw	r20, r18
    c0aa:	9f 01       	movw	r18, r30
    c0ac:	0e 94 ad 85 	call	0x10b5a	; 0x10b5a <ltoa>
	*this = buf;
    c0b0:	8b a1       	ldd	r24, Y+35	; 0x23
    c0b2:	9c a1       	ldd	r25, Y+36	; 0x24
    c0b4:	9e 01       	movw	r18, r28
    c0b6:	2f 5f       	subi	r18, 0xFF	; 255
    c0b8:	3f 4f       	sbci	r19, 0xFF	; 255
    c0ba:	b9 01       	movw	r22, r18
    c0bc:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c0c0:	a9 96       	adiw	r28, 0x29	; 41
    c0c2:	0f b6       	in	r0, 0x3f	; 63
    c0c4:	f8 94       	cli
    c0c6:	de bf       	out	0x3e, r29	; 62
    c0c8:	0f be       	out	0x3f, r0	; 63
    c0ca:	cd bf       	out	0x3d, r28	; 61
    c0cc:	cf 91       	pop	r28
    c0ce:	df 91       	pop	r29
    c0d0:	08 95       	ret

0000c0d2 <_ZN6StringC2Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    c0d2:	df 93       	push	r29
    c0d4:	cf 93       	push	r28
    c0d6:	cd b7       	in	r28, 0x3d	; 61
    c0d8:	de b7       	in	r29, 0x3e	; 62
    c0da:	a9 97       	sbiw	r28, 0x29	; 41
    c0dc:	0f b6       	in	r0, 0x3f	; 63
    c0de:	f8 94       	cli
    c0e0:	de bf       	out	0x3e, r29	; 62
    c0e2:	0f be       	out	0x3f, r0	; 63
    c0e4:	cd bf       	out	0x3d, r28	; 61
    c0e6:	9c a3       	std	Y+36, r25	; 0x24
    c0e8:	8b a3       	std	Y+35, r24	; 0x23
    c0ea:	4d a3       	std	Y+37, r20	; 0x25
    c0ec:	5e a3       	std	Y+38, r21	; 0x26
    c0ee:	6f a3       	std	Y+39, r22	; 0x27
    c0f0:	78 a7       	std	Y+40, r23	; 0x28
    c0f2:	29 a7       	std	Y+41, r18	; 0x29
{
	init();
    c0f4:	8b a1       	ldd	r24, Y+35	; 0x23
    c0f6:	9c a1       	ldd	r25, Y+36	; 0x24
    c0f8:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[34];
	ltoa(value, buf, base);
    c0fc:	89 a5       	ldd	r24, Y+41	; 0x29
    c0fe:	e8 2f       	mov	r30, r24
    c100:	f0 e0       	ldi	r31, 0x00	; 0
    c102:	8d a1       	ldd	r24, Y+37	; 0x25
    c104:	9e a1       	ldd	r25, Y+38	; 0x26
    c106:	af a1       	ldd	r26, Y+39	; 0x27
    c108:	b8 a5       	ldd	r27, Y+40	; 0x28
    c10a:	bc 01       	movw	r22, r24
    c10c:	cd 01       	movw	r24, r26
    c10e:	9e 01       	movw	r18, r28
    c110:	2f 5f       	subi	r18, 0xFF	; 255
    c112:	3f 4f       	sbci	r19, 0xFF	; 255
    c114:	a9 01       	movw	r20, r18
    c116:	9f 01       	movw	r18, r30
    c118:	0e 94 ad 85 	call	0x10b5a	; 0x10b5a <ltoa>
	*this = buf;
    c11c:	8b a1       	ldd	r24, Y+35	; 0x23
    c11e:	9c a1       	ldd	r25, Y+36	; 0x24
    c120:	9e 01       	movw	r18, r28
    c122:	2f 5f       	subi	r18, 0xFF	; 255
    c124:	3f 4f       	sbci	r19, 0xFF	; 255
    c126:	b9 01       	movw	r22, r18
    c128:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c12c:	a9 96       	adiw	r28, 0x29	; 41
    c12e:	0f b6       	in	r0, 0x3f	; 63
    c130:	f8 94       	cli
    c132:	de bf       	out	0x3e, r29	; 62
    c134:	0f be       	out	0x3f, r0	; 63
    c136:	cd bf       	out	0x3d, r28	; 61
    c138:	cf 91       	pop	r28
    c13a:	df 91       	pop	r29
    c13c:	08 95       	ret

0000c13e <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    c13e:	df 93       	push	r29
    c140:	cf 93       	push	r28
    c142:	cd b7       	in	r28, 0x3d	; 61
    c144:	de b7       	in	r29, 0x3e	; 62
    c146:	66 97       	sbiw	r28, 0x16	; 22
    c148:	0f b6       	in	r0, 0x3f	; 63
    c14a:	f8 94       	cli
    c14c:	de bf       	out	0x3e, r29	; 62
    c14e:	0f be       	out	0x3f, r0	; 63
    c150:	cd bf       	out	0x3d, r28	; 61
    c152:	9b 8b       	std	Y+19, r25	; 0x13
    c154:	8a 8b       	std	Y+18, r24	; 0x12
    c156:	7d 8b       	std	Y+21, r23	; 0x15
    c158:	6c 8b       	std	Y+20, r22	; 0x14
    c15a:	4e 8b       	std	Y+22, r20	; 0x16
{
	init();
    c15c:	8a 89       	ldd	r24, Y+18	; 0x12
    c15e:	9b 89       	ldd	r25, Y+19	; 0x13
    c160:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[17];
	utoa(value, buf, base);
    c164:	8e 89       	ldd	r24, Y+22	; 0x16
    c166:	48 2f       	mov	r20, r24
    c168:	50 e0       	ldi	r21, 0x00	; 0
    c16a:	8c 89       	ldd	r24, Y+20	; 0x14
    c16c:	9d 89       	ldd	r25, Y+21	; 0x15
    c16e:	9e 01       	movw	r18, r28
    c170:	2f 5f       	subi	r18, 0xFF	; 255
    c172:	3f 4f       	sbci	r19, 0xFF	; 255
    c174:	b9 01       	movw	r22, r18
    c176:	0e 94 1b 86 	call	0x10c36	; 0x10c36 <utoa>
	*this = buf;
    c17a:	8a 89       	ldd	r24, Y+18	; 0x12
    c17c:	9b 89       	ldd	r25, Y+19	; 0x13
    c17e:	9e 01       	movw	r18, r28
    c180:	2f 5f       	subi	r18, 0xFF	; 255
    c182:	3f 4f       	sbci	r19, 0xFF	; 255
    c184:	b9 01       	movw	r22, r18
    c186:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c18a:	66 96       	adiw	r28, 0x16	; 22
    c18c:	0f b6       	in	r0, 0x3f	; 63
    c18e:	f8 94       	cli
    c190:	de bf       	out	0x3e, r29	; 62
    c192:	0f be       	out	0x3f, r0	; 63
    c194:	cd bf       	out	0x3d, r28	; 61
    c196:	cf 91       	pop	r28
    c198:	df 91       	pop	r29
    c19a:	08 95       	ret

0000c19c <_ZN6StringC2Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    c19c:	df 93       	push	r29
    c19e:	cf 93       	push	r28
    c1a0:	cd b7       	in	r28, 0x3d	; 61
    c1a2:	de b7       	in	r29, 0x3e	; 62
    c1a4:	66 97       	sbiw	r28, 0x16	; 22
    c1a6:	0f b6       	in	r0, 0x3f	; 63
    c1a8:	f8 94       	cli
    c1aa:	de bf       	out	0x3e, r29	; 62
    c1ac:	0f be       	out	0x3f, r0	; 63
    c1ae:	cd bf       	out	0x3d, r28	; 61
    c1b0:	9b 8b       	std	Y+19, r25	; 0x13
    c1b2:	8a 8b       	std	Y+18, r24	; 0x12
    c1b4:	7d 8b       	std	Y+21, r23	; 0x15
    c1b6:	6c 8b       	std	Y+20, r22	; 0x14
    c1b8:	4e 8b       	std	Y+22, r20	; 0x16
{
	init();
    c1ba:	8a 89       	ldd	r24, Y+18	; 0x12
    c1bc:	9b 89       	ldd	r25, Y+19	; 0x13
    c1be:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[17];
	utoa(value, buf, base);
    c1c2:	8e 89       	ldd	r24, Y+22	; 0x16
    c1c4:	48 2f       	mov	r20, r24
    c1c6:	50 e0       	ldi	r21, 0x00	; 0
    c1c8:	8c 89       	ldd	r24, Y+20	; 0x14
    c1ca:	9d 89       	ldd	r25, Y+21	; 0x15
    c1cc:	9e 01       	movw	r18, r28
    c1ce:	2f 5f       	subi	r18, 0xFF	; 255
    c1d0:	3f 4f       	sbci	r19, 0xFF	; 255
    c1d2:	b9 01       	movw	r22, r18
    c1d4:	0e 94 1b 86 	call	0x10c36	; 0x10c36 <utoa>
	*this = buf;
    c1d8:	8a 89       	ldd	r24, Y+18	; 0x12
    c1da:	9b 89       	ldd	r25, Y+19	; 0x13
    c1dc:	9e 01       	movw	r18, r28
    c1de:	2f 5f       	subi	r18, 0xFF	; 255
    c1e0:	3f 4f       	sbci	r19, 0xFF	; 255
    c1e2:	b9 01       	movw	r22, r18
    c1e4:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c1e8:	66 96       	adiw	r28, 0x16	; 22
    c1ea:	0f b6       	in	r0, 0x3f	; 63
    c1ec:	f8 94       	cli
    c1ee:	de bf       	out	0x3e, r29	; 62
    c1f0:	0f be       	out	0x3f, r0	; 63
    c1f2:	cd bf       	out	0x3d, r28	; 61
    c1f4:	cf 91       	pop	r28
    c1f6:	df 91       	pop	r29
    c1f8:	08 95       	ret

0000c1fa <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    c1fa:	df 93       	push	r29
    c1fc:	cf 93       	push	r28
    c1fe:	cd b7       	in	r28, 0x3d	; 61
    c200:	de b7       	in	r29, 0x3e	; 62
    c202:	67 97       	sbiw	r28, 0x17	; 23
    c204:	0f b6       	in	r0, 0x3f	; 63
    c206:	f8 94       	cli
    c208:	de bf       	out	0x3e, r29	; 62
    c20a:	0f be       	out	0x3f, r0	; 63
    c20c:	cd bf       	out	0x3d, r28	; 61
    c20e:	9c 8b       	std	Y+20, r25	; 0x14
    c210:	8b 8b       	std	Y+19, r24	; 0x13
    c212:	7e 8b       	std	Y+22, r23	; 0x16
    c214:	6d 8b       	std	Y+21, r22	; 0x15
    c216:	4f 8b       	std	Y+23, r20	; 0x17
{
	init();
    c218:	8b 89       	ldd	r24, Y+19	; 0x13
    c21a:	9c 89       	ldd	r25, Y+20	; 0x14
    c21c:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[18];
	itoa(value, buf, base);
    c220:	8f 89       	ldd	r24, Y+23	; 0x17
    c222:	48 2f       	mov	r20, r24
    c224:	50 e0       	ldi	r21, 0x00	; 0
    c226:	8d 89       	ldd	r24, Y+21	; 0x15
    c228:	9e 89       	ldd	r25, Y+22	; 0x16
    c22a:	9e 01       	movw	r18, r28
    c22c:	2f 5f       	subi	r18, 0xFF	; 255
    c22e:	3f 4f       	sbci	r19, 0xFF	; 255
    c230:	b9 01       	movw	r22, r18
    c232:	0e 94 8c 85 	call	0x10b18	; 0x10b18 <itoa>
	*this = buf;
    c236:	8b 89       	ldd	r24, Y+19	; 0x13
    c238:	9c 89       	ldd	r25, Y+20	; 0x14
    c23a:	9e 01       	movw	r18, r28
    c23c:	2f 5f       	subi	r18, 0xFF	; 255
    c23e:	3f 4f       	sbci	r19, 0xFF	; 255
    c240:	b9 01       	movw	r22, r18
    c242:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c246:	67 96       	adiw	r28, 0x17	; 23
    c248:	0f b6       	in	r0, 0x3f	; 63
    c24a:	f8 94       	cli
    c24c:	de bf       	out	0x3e, r29	; 62
    c24e:	0f be       	out	0x3f, r0	; 63
    c250:	cd bf       	out	0x3d, r28	; 61
    c252:	cf 91       	pop	r28
    c254:	df 91       	pop	r29
    c256:	08 95       	ret

0000c258 <_ZN6StringC2Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    c258:	df 93       	push	r29
    c25a:	cf 93       	push	r28
    c25c:	cd b7       	in	r28, 0x3d	; 61
    c25e:	de b7       	in	r29, 0x3e	; 62
    c260:	67 97       	sbiw	r28, 0x17	; 23
    c262:	0f b6       	in	r0, 0x3f	; 63
    c264:	f8 94       	cli
    c266:	de bf       	out	0x3e, r29	; 62
    c268:	0f be       	out	0x3f, r0	; 63
    c26a:	cd bf       	out	0x3d, r28	; 61
    c26c:	9c 8b       	std	Y+20, r25	; 0x14
    c26e:	8b 8b       	std	Y+19, r24	; 0x13
    c270:	7e 8b       	std	Y+22, r23	; 0x16
    c272:	6d 8b       	std	Y+21, r22	; 0x15
    c274:	4f 8b       	std	Y+23, r20	; 0x17
{
	init();
    c276:	8b 89       	ldd	r24, Y+19	; 0x13
    c278:	9c 89       	ldd	r25, Y+20	; 0x14
    c27a:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[18];
	itoa(value, buf, base);
    c27e:	8f 89       	ldd	r24, Y+23	; 0x17
    c280:	48 2f       	mov	r20, r24
    c282:	50 e0       	ldi	r21, 0x00	; 0
    c284:	8d 89       	ldd	r24, Y+21	; 0x15
    c286:	9e 89       	ldd	r25, Y+22	; 0x16
    c288:	9e 01       	movw	r18, r28
    c28a:	2f 5f       	subi	r18, 0xFF	; 255
    c28c:	3f 4f       	sbci	r19, 0xFF	; 255
    c28e:	b9 01       	movw	r22, r18
    c290:	0e 94 8c 85 	call	0x10b18	; 0x10b18 <itoa>
	*this = buf;
    c294:	8b 89       	ldd	r24, Y+19	; 0x13
    c296:	9c 89       	ldd	r25, Y+20	; 0x14
    c298:	9e 01       	movw	r18, r28
    c29a:	2f 5f       	subi	r18, 0xFF	; 255
    c29c:	3f 4f       	sbci	r19, 0xFF	; 255
    c29e:	b9 01       	movw	r22, r18
    c2a0:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c2a4:	67 96       	adiw	r28, 0x17	; 23
    c2a6:	0f b6       	in	r0, 0x3f	; 63
    c2a8:	f8 94       	cli
    c2aa:	de bf       	out	0x3e, r29	; 62
    c2ac:	0f be       	out	0x3f, r0	; 63
    c2ae:	cd bf       	out	0x3d, r28	; 61
    c2b0:	cf 91       	pop	r28
    c2b2:	df 91       	pop	r29
    c2b4:	08 95       	ret

0000c2b6 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    c2b6:	df 93       	push	r29
    c2b8:	cf 93       	push	r28
    c2ba:	cd b7       	in	r28, 0x3d	; 61
    c2bc:	de b7       	in	r29, 0x3e	; 62
    c2be:	2d 97       	sbiw	r28, 0x0d	; 13
    c2c0:	0f b6       	in	r0, 0x3f	; 63
    c2c2:	f8 94       	cli
    c2c4:	de bf       	out	0x3e, r29	; 62
    c2c6:	0f be       	out	0x3f, r0	; 63
    c2c8:	cd bf       	out	0x3d, r28	; 61
    c2ca:	9b 87       	std	Y+11, r25	; 0x0b
    c2cc:	8a 87       	std	Y+10, r24	; 0x0a
    c2ce:	6c 87       	std	Y+12, r22	; 0x0c
    c2d0:	4d 87       	std	Y+13, r20	; 0x0d
{
	init();
    c2d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    c2d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    c2d6:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[9];
	utoa(value, buf, base);
    c2da:	8c 85       	ldd	r24, Y+12	; 0x0c
    c2dc:	28 2f       	mov	r18, r24
    c2de:	30 e0       	ldi	r19, 0x00	; 0
    c2e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    c2e2:	48 2f       	mov	r20, r24
    c2e4:	50 e0       	ldi	r21, 0x00	; 0
    c2e6:	c9 01       	movw	r24, r18
    c2e8:	9e 01       	movw	r18, r28
    c2ea:	2f 5f       	subi	r18, 0xFF	; 255
    c2ec:	3f 4f       	sbci	r19, 0xFF	; 255
    c2ee:	b9 01       	movw	r22, r18
    c2f0:	0e 94 1b 86 	call	0x10c36	; 0x10c36 <utoa>
	*this = buf;
    c2f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    c2f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    c2f8:	9e 01       	movw	r18, r28
    c2fa:	2f 5f       	subi	r18, 0xFF	; 255
    c2fc:	3f 4f       	sbci	r19, 0xFF	; 255
    c2fe:	b9 01       	movw	r22, r18
    c300:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c304:	2d 96       	adiw	r28, 0x0d	; 13
    c306:	0f b6       	in	r0, 0x3f	; 63
    c308:	f8 94       	cli
    c30a:	de bf       	out	0x3e, r29	; 62
    c30c:	0f be       	out	0x3f, r0	; 63
    c30e:	cd bf       	out	0x3d, r28	; 61
    c310:	cf 91       	pop	r28
    c312:	df 91       	pop	r29
    c314:	08 95       	ret

0000c316 <_ZN6StringC2Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    c316:	df 93       	push	r29
    c318:	cf 93       	push	r28
    c31a:	cd b7       	in	r28, 0x3d	; 61
    c31c:	de b7       	in	r29, 0x3e	; 62
    c31e:	2d 97       	sbiw	r28, 0x0d	; 13
    c320:	0f b6       	in	r0, 0x3f	; 63
    c322:	f8 94       	cli
    c324:	de bf       	out	0x3e, r29	; 62
    c326:	0f be       	out	0x3f, r0	; 63
    c328:	cd bf       	out	0x3d, r28	; 61
    c32a:	9b 87       	std	Y+11, r25	; 0x0b
    c32c:	8a 87       	std	Y+10, r24	; 0x0a
    c32e:	6c 87       	std	Y+12, r22	; 0x0c
    c330:	4d 87       	std	Y+13, r20	; 0x0d
{
	init();
    c332:	8a 85       	ldd	r24, Y+10	; 0x0a
    c334:	9b 85       	ldd	r25, Y+11	; 0x0b
    c336:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[9];
	utoa(value, buf, base);
    c33a:	8c 85       	ldd	r24, Y+12	; 0x0c
    c33c:	28 2f       	mov	r18, r24
    c33e:	30 e0       	ldi	r19, 0x00	; 0
    c340:	8d 85       	ldd	r24, Y+13	; 0x0d
    c342:	48 2f       	mov	r20, r24
    c344:	50 e0       	ldi	r21, 0x00	; 0
    c346:	c9 01       	movw	r24, r18
    c348:	9e 01       	movw	r18, r28
    c34a:	2f 5f       	subi	r18, 0xFF	; 255
    c34c:	3f 4f       	sbci	r19, 0xFF	; 255
    c34e:	b9 01       	movw	r22, r18
    c350:	0e 94 1b 86 	call	0x10c36	; 0x10c36 <utoa>
	*this = buf;
    c354:	8a 85       	ldd	r24, Y+10	; 0x0a
    c356:	9b 85       	ldd	r25, Y+11	; 0x0b
    c358:	9e 01       	movw	r18, r28
    c35a:	2f 5f       	subi	r18, 0xFF	; 255
    c35c:	3f 4f       	sbci	r19, 0xFF	; 255
    c35e:	b9 01       	movw	r22, r18
    c360:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c364:	2d 96       	adiw	r28, 0x0d	; 13
    c366:	0f b6       	in	r0, 0x3f	; 63
    c368:	f8 94       	cli
    c36a:	de bf       	out	0x3e, r29	; 62
    c36c:	0f be       	out	0x3f, r0	; 63
    c36e:	cd bf       	out	0x3d, r28	; 61
    c370:	cf 91       	pop	r28
    c372:	df 91       	pop	r29
    c374:	08 95       	ret

0000c376 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    c376:	df 93       	push	r29
    c378:	cf 93       	push	r28
    c37a:	00 d0       	rcall	.+0      	; 0xc37c <_ZN6StringC1Ec+0x6>
    c37c:	00 d0       	rcall	.+0      	; 0xc37e <_ZN6StringC1Ec+0x8>
    c37e:	0f 92       	push	r0
    c380:	cd b7       	in	r28, 0x3d	; 61
    c382:	de b7       	in	r29, 0x3e	; 62
    c384:	9c 83       	std	Y+4, r25	; 0x04
    c386:	8b 83       	std	Y+3, r24	; 0x03
    c388:	6d 83       	std	Y+5, r22	; 0x05
{
	init();
    c38a:	8b 81       	ldd	r24, Y+3	; 0x03
    c38c:	9c 81       	ldd	r25, Y+4	; 0x04
    c38e:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[2];
	buf[0] = c;
    c392:	8d 81       	ldd	r24, Y+5	; 0x05
    c394:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0;
    c396:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    c398:	8b 81       	ldd	r24, Y+3	; 0x03
    c39a:	9c 81       	ldd	r25, Y+4	; 0x04
    c39c:	9e 01       	movw	r18, r28
    c39e:	2f 5f       	subi	r18, 0xFF	; 255
    c3a0:	3f 4f       	sbci	r19, 0xFF	; 255
    c3a2:	b9 01       	movw	r22, r18
    c3a4:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c3a8:	0f 90       	pop	r0
    c3aa:	0f 90       	pop	r0
    c3ac:	0f 90       	pop	r0
    c3ae:	0f 90       	pop	r0
    c3b0:	0f 90       	pop	r0
    c3b2:	cf 91       	pop	r28
    c3b4:	df 91       	pop	r29
    c3b6:	08 95       	ret

0000c3b8 <_ZN6StringC2Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    c3b8:	df 93       	push	r29
    c3ba:	cf 93       	push	r28
    c3bc:	00 d0       	rcall	.+0      	; 0xc3be <_ZN6StringC2Ec+0x6>
    c3be:	00 d0       	rcall	.+0      	; 0xc3c0 <_ZN6StringC2Ec+0x8>
    c3c0:	0f 92       	push	r0
    c3c2:	cd b7       	in	r28, 0x3d	; 61
    c3c4:	de b7       	in	r29, 0x3e	; 62
    c3c6:	9c 83       	std	Y+4, r25	; 0x04
    c3c8:	8b 83       	std	Y+3, r24	; 0x03
    c3ca:	6d 83       	std	Y+5, r22	; 0x05
{
	init();
    c3cc:	8b 81       	ldd	r24, Y+3	; 0x03
    c3ce:	9c 81       	ldd	r25, Y+4	; 0x04
    c3d0:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	char buf[2];
	buf[0] = c;
    c3d4:	8d 81       	ldd	r24, Y+5	; 0x05
    c3d6:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0;
    c3d8:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    c3da:	8b 81       	ldd	r24, Y+3	; 0x03
    c3dc:	9c 81       	ldd	r25, Y+4	; 0x04
    c3de:	9e 01       	movw	r18, r28
    c3e0:	2f 5f       	subi	r18, 0xFF	; 255
    c3e2:	3f 4f       	sbci	r19, 0xFF	; 255
    c3e4:	b9 01       	movw	r22, r18
    c3e6:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
}
    c3ea:	0f 90       	pop	r0
    c3ec:	0f 90       	pop	r0
    c3ee:	0f 90       	pop	r0
    c3f0:	0f 90       	pop	r0
    c3f2:	0f 90       	pop	r0
    c3f4:	cf 91       	pop	r28
    c3f6:	df 91       	pop	r29
    c3f8:	08 95       	ret

0000c3fa <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
    c3fa:	df 93       	push	r29
    c3fc:	cf 93       	push	r28
    c3fe:	cd b7       	in	r28, 0x3d	; 61
    c400:	de b7       	in	r29, 0x3e	; 62
    c402:	62 97       	sbiw	r28, 0x12	; 18
    c404:	0f b6       	in	r0, 0x3f	; 63
    c406:	f8 94       	cli
    c408:	de bf       	out	0x3e, r29	; 62
    c40a:	0f be       	out	0x3f, r0	; 63
    c40c:	cd bf       	out	0x3d, r28	; 61
    c40e:	9a 8b       	std	Y+18, r25	; 0x12
    c410:	89 8b       	std	Y+17, r24	; 0x11
    c412:	7c 87       	std	Y+12, r23	; 0x0c
    c414:	6b 87       	std	Y+11, r22	; 0x0b
    c416:	5e 87       	std	Y+14, r21	; 0x0e
    c418:	4d 87       	std	Y+13, r20	; 0x0d
    c41a:	38 8b       	std	Y+16, r19	; 0x10
    c41c:	2f 87       	std	Y+15, r18	; 0x0f
{
	if (left > right) {
    c41e:	2d 85       	ldd	r18, Y+13	; 0x0d
    c420:	3e 85       	ldd	r19, Y+14	; 0x0e
    c422:	8f 85       	ldd	r24, Y+15	; 0x0f
    c424:	98 89       	ldd	r25, Y+16	; 0x10
    c426:	82 17       	cp	r24, r18
    c428:	93 07       	cpc	r25, r19
    c42a:	60 f4       	brcc	.+24     	; 0xc444 <_ZNK6String9substringEjj+0x4a>
		unsigned int temp = right;
    c42c:	8f 85       	ldd	r24, Y+15	; 0x0f
    c42e:	98 89       	ldd	r25, Y+16	; 0x10
    c430:	9a 83       	std	Y+2, r25	; 0x02
    c432:	89 83       	std	Y+1, r24	; 0x01
		right = left;
    c434:	8d 85       	ldd	r24, Y+13	; 0x0d
    c436:	9e 85       	ldd	r25, Y+14	; 0x0e
    c438:	98 8b       	std	Y+16, r25	; 0x10
    c43a:	8f 87       	std	Y+15, r24	; 0x0f
		left = temp;
    c43c:	89 81       	ldd	r24, Y+1	; 0x01
    c43e:	9a 81       	ldd	r25, Y+2	; 0x02
    c440:	9e 87       	std	Y+14, r25	; 0x0e
    c442:	8d 87       	std	Y+13, r24	; 0x0d
	}
	String out;
    c444:	89 89       	ldd	r24, Y+17	; 0x11
    c446:	9a 89       	ldd	r25, Y+18	; 0x12
    c448:	25 ed       	ldi	r18, 0xD5	; 213
    c44a:	30 e0       	ldi	r19, 0x00	; 0
    c44c:	b9 01       	movw	r22, r18
    c44e:	0e 94 55 5f 	call	0xbeaa	; 0xbeaa <_ZN6StringC1EPKc>
	if (left > len) return out;
    c452:	eb 85       	ldd	r30, Y+11	; 0x0b
    c454:	fc 85       	ldd	r31, Y+12	; 0x0c
    c456:	24 81       	ldd	r18, Z+4	; 0x04
    c458:	35 81       	ldd	r19, Z+5	; 0x05
    c45a:	8d 85       	ldd	r24, Y+13	; 0x0d
    c45c:	9e 85       	ldd	r25, Y+14	; 0x0e
    c45e:	28 17       	cp	r18, r24
    c460:	39 07       	cpc	r19, r25
    c462:	e8 f1       	brcs	.+122    	; 0xc4de <_ZNK6String9substringEjj+0xe4>
	if (right > len) right = len;
    c464:	eb 85       	ldd	r30, Y+11	; 0x0b
    c466:	fc 85       	ldd	r31, Y+12	; 0x0c
    c468:	24 81       	ldd	r18, Z+4	; 0x04
    c46a:	35 81       	ldd	r19, Z+5	; 0x05
    c46c:	8f 85       	ldd	r24, Y+15	; 0x0f
    c46e:	98 89       	ldd	r25, Y+16	; 0x10
    c470:	28 17       	cp	r18, r24
    c472:	39 07       	cpc	r19, r25
    c474:	30 f4       	brcc	.+12     	; 0xc482 <_ZNK6String9substringEjj+0x88>
    c476:	eb 85       	ldd	r30, Y+11	; 0x0b
    c478:	fc 85       	ldd	r31, Y+12	; 0x0c
    c47a:	84 81       	ldd	r24, Z+4	; 0x04
    c47c:	95 81       	ldd	r25, Z+5	; 0x05
    c47e:	98 8b       	std	Y+16, r25	; 0x10
    c480:	8f 87       	std	Y+15, r24	; 0x0f
	char temp = buffer[right];  // save the replaced character
    c482:	eb 85       	ldd	r30, Y+11	; 0x0b
    c484:	fc 85       	ldd	r31, Y+12	; 0x0c
    c486:	20 81       	ld	r18, Z
    c488:	31 81       	ldd	r19, Z+1	; 0x01
    c48a:	8f 85       	ldd	r24, Y+15	; 0x0f
    c48c:	98 89       	ldd	r25, Y+16	; 0x10
    c48e:	f9 01       	movw	r30, r18
    c490:	e8 0f       	add	r30, r24
    c492:	f9 1f       	adc	r31, r25
    c494:	80 81       	ld	r24, Z
    c496:	8b 83       	std	Y+3, r24	; 0x03
	buffer[right] = '\0';	
    c498:	eb 85       	ldd	r30, Y+11	; 0x0b
    c49a:	fc 85       	ldd	r31, Y+12	; 0x0c
    c49c:	20 81       	ld	r18, Z
    c49e:	31 81       	ldd	r19, Z+1	; 0x01
    c4a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    c4a2:	98 89       	ldd	r25, Y+16	; 0x10
    c4a4:	f9 01       	movw	r30, r18
    c4a6:	e8 0f       	add	r30, r24
    c4a8:	f9 1f       	adc	r31, r25
    c4aa:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    c4ac:	49 89       	ldd	r20, Y+17	; 0x11
    c4ae:	5a 89       	ldd	r21, Y+18	; 0x12
    c4b0:	eb 85       	ldd	r30, Y+11	; 0x0b
    c4b2:	fc 85       	ldd	r31, Y+12	; 0x0c
    c4b4:	20 81       	ld	r18, Z
    c4b6:	31 81       	ldd	r19, Z+1	; 0x01
    c4b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    c4ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    c4bc:	28 0f       	add	r18, r24
    c4be:	39 1f       	adc	r19, r25
    c4c0:	ca 01       	movw	r24, r20
    c4c2:	b9 01       	movw	r22, r18
    c4c4:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    c4c8:	eb 85       	ldd	r30, Y+11	; 0x0b
    c4ca:	fc 85       	ldd	r31, Y+12	; 0x0c
    c4cc:	20 81       	ld	r18, Z
    c4ce:	31 81       	ldd	r19, Z+1	; 0x01
    c4d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    c4d2:	98 89       	ldd	r25, Y+16	; 0x10
    c4d4:	f9 01       	movw	r30, r18
    c4d6:	e8 0f       	add	r30, r24
    c4d8:	f9 1f       	adc	r31, r25
    c4da:	8b 81       	ldd	r24, Y+3	; 0x03
    c4dc:	80 83       	st	Z, r24
	return out;
}
    c4de:	89 89       	ldd	r24, Y+17	; 0x11
    c4e0:	9a 89       	ldd	r25, Y+18	; 0x12
    c4e2:	89 89       	ldd	r24, Y+17	; 0x11
    c4e4:	9a 89       	ldd	r25, Y+18	; 0x12
    c4e6:	62 96       	adiw	r28, 0x12	; 18
    c4e8:	0f b6       	in	r0, 0x3f	; 63
    c4ea:	f8 94       	cli
    c4ec:	de bf       	out	0x3e, r29	; 62
    c4ee:	0f be       	out	0x3f, r0	; 63
    c4f0:	cd bf       	out	0x3d, r28	; 61
    c4f2:	cf 91       	pop	r28
    c4f4:	df 91       	pop	r29
    c4f6:	08 95       	ret

0000c4f8 <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
    c4f8:	0f 93       	push	r16
    c4fa:	1f 93       	push	r17
    c4fc:	df 93       	push	r29
    c4fe:	cf 93       	push	r28
    c500:	00 d0       	rcall	.+0      	; 0xc502 <_ZNK6String9substringEj+0xa>
    c502:	00 d0       	rcall	.+0      	; 0xc504 <_ZNK6String9substringEj+0xc>
    c504:	cd b7       	in	r28, 0x3d	; 61
    c506:	de b7       	in	r29, 0x3e	; 62
    c508:	8c 01       	movw	r16, r24
    c50a:	7a 83       	std	Y+2, r23	; 0x02
    c50c:	69 83       	std	Y+1, r22	; 0x01
    c50e:	5c 83       	std	Y+4, r21	; 0x04
    c510:	4b 83       	std	Y+3, r20	; 0x03
{
	return substring(left, len);
    c512:	c8 01       	movw	r24, r16
    c514:	e9 81       	ldd	r30, Y+1	; 0x01
    c516:	fa 81       	ldd	r31, Y+2	; 0x02
    c518:	04 80       	ldd	r0, Z+4	; 0x04
    c51a:	f5 81       	ldd	r31, Z+5	; 0x05
    c51c:	e0 2d       	mov	r30, r0
    c51e:	29 81       	ldd	r18, Y+1	; 0x01
    c520:	3a 81       	ldd	r19, Y+2	; 0x02
    c522:	4b 81       	ldd	r20, Y+3	; 0x03
    c524:	5c 81       	ldd	r21, Y+4	; 0x04
    c526:	b9 01       	movw	r22, r18
    c528:	9f 01       	movw	r18, r30
    c52a:	0e 94 fd 61 	call	0xc3fa	; 0xc3fa <_ZNK6String9substringEjj>
}
    c52e:	c8 01       	movw	r24, r16
    c530:	c8 01       	movw	r24, r16
    c532:	0f 90       	pop	r0
    c534:	0f 90       	pop	r0
    c536:	0f 90       	pop	r0
    c538:	0f 90       	pop	r0
    c53a:	cf 91       	pop	r28
    c53c:	df 91       	pop	r29
    c53e:	1f 91       	pop	r17
    c540:	0f 91       	pop	r16
    c542:	08 95       	ret

0000c544 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    c544:	df 93       	push	r29
    c546:	cf 93       	push	r28
    c548:	00 d0       	rcall	.+0      	; 0xc54a <_ZN6StringaSERKS_+0x6>
    c54a:	00 d0       	rcall	.+0      	; 0xc54c <_ZN6StringaSERKS_+0x8>
    c54c:	00 d0       	rcall	.+0      	; 0xc54e <_ZN6StringaSERKS_+0xa>
    c54e:	cd b7       	in	r28, 0x3d	; 61
    c550:	de b7       	in	r29, 0x3e	; 62
    c552:	9a 83       	std	Y+2, r25	; 0x02
    c554:	89 83       	std	Y+1, r24	; 0x01
    c556:	7c 83       	std	Y+4, r23	; 0x04
    c558:	6b 83       	std	Y+3, r22	; 0x03
{
	if (this == &rhs) return *this;
    c55a:	29 81       	ldd	r18, Y+1	; 0x01
    c55c:	3a 81       	ldd	r19, Y+2	; 0x02
    c55e:	8b 81       	ldd	r24, Y+3	; 0x03
    c560:	9c 81       	ldd	r25, Y+4	; 0x04
    c562:	28 17       	cp	r18, r24
    c564:	39 07       	cpc	r19, r25
    c566:	29 f4       	brne	.+10     	; 0xc572 <_ZN6StringaSERKS_+0x2e>
    c568:	89 81       	ldd	r24, Y+1	; 0x01
    c56a:	9a 81       	ldd	r25, Y+2	; 0x02
    c56c:	9e 83       	std	Y+6, r25	; 0x06
    c56e:	8d 83       	std	Y+5, r24	; 0x05
    c570:	1d c0       	rjmp	.+58     	; 0xc5ac <_ZN6StringaSERKS_+0x68>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    c572:	eb 81       	ldd	r30, Y+3	; 0x03
    c574:	fc 81       	ldd	r31, Y+4	; 0x04
    c576:	80 81       	ld	r24, Z
    c578:	91 81       	ldd	r25, Z+1	; 0x01
    c57a:	00 97       	sbiw	r24, 0x00	; 0
    c57c:	79 f0       	breq	.+30     	; 0xc59c <_ZN6StringaSERKS_+0x58>
    c57e:	eb 81       	ldd	r30, Y+3	; 0x03
    c580:	fc 81       	ldd	r31, Y+4	; 0x04
    c582:	40 81       	ld	r20, Z
    c584:	51 81       	ldd	r21, Z+1	; 0x01
    c586:	eb 81       	ldd	r30, Y+3	; 0x03
    c588:	fc 81       	ldd	r31, Y+4	; 0x04
    c58a:	24 81       	ldd	r18, Z+4	; 0x04
    c58c:	35 81       	ldd	r19, Z+5	; 0x05
    c58e:	89 81       	ldd	r24, Y+1	; 0x01
    c590:	9a 81       	ldd	r25, Y+2	; 0x02
    c592:	ba 01       	movw	r22, r20
    c594:	a9 01       	movw	r20, r18
    c596:	0e 94 0f 5f 	call	0xbe1e	; 0xbe1e <_ZN6String4copyEPKcj>
    c59a:	04 c0       	rjmp	.+8      	; 0xc5a4 <_ZN6StringaSERKS_+0x60>
	else invalidate();
    c59c:	89 81       	ldd	r24, Y+1	; 0x01
    c59e:	9a 81       	ldd	r25, Y+2	; 0x02
    c5a0:	0e 94 53 5d 	call	0xbaa6	; 0xbaa6 <_ZN6String10invalidateEv>
	
	return *this;
    c5a4:	89 81       	ldd	r24, Y+1	; 0x01
    c5a6:	9a 81       	ldd	r25, Y+2	; 0x02
    c5a8:	9e 83       	std	Y+6, r25	; 0x06
    c5aa:	8d 83       	std	Y+5, r24	; 0x05
    c5ac:	8d 81       	ldd	r24, Y+5	; 0x05
    c5ae:	9e 81       	ldd	r25, Y+6	; 0x06
}
    c5b0:	26 96       	adiw	r28, 0x06	; 6
    c5b2:	0f b6       	in	r0, 0x3f	; 63
    c5b4:	f8 94       	cli
    c5b6:	de bf       	out	0x3e, r29	; 62
    c5b8:	0f be       	out	0x3f, r0	; 63
    c5ba:	cd bf       	out	0x3d, r28	; 61
    c5bc:	cf 91       	pop	r28
    c5be:	df 91       	pop	r29
    c5c0:	08 95       	ret

0000c5c2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    c5c2:	df 93       	push	r29
    c5c4:	cf 93       	push	r28
    c5c6:	00 d0       	rcall	.+0      	; 0xc5c8 <_ZN6StringC1ERKS_+0x6>
    c5c8:	00 d0       	rcall	.+0      	; 0xc5ca <_ZN6StringC1ERKS_+0x8>
    c5ca:	cd b7       	in	r28, 0x3d	; 61
    c5cc:	de b7       	in	r29, 0x3e	; 62
    c5ce:	9a 83       	std	Y+2, r25	; 0x02
    c5d0:	89 83       	std	Y+1, r24	; 0x01
    c5d2:	7c 83       	std	Y+4, r23	; 0x04
    c5d4:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    c5d6:	89 81       	ldd	r24, Y+1	; 0x01
    c5d8:	9a 81       	ldd	r25, Y+2	; 0x02
    c5da:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	*this = value;
    c5de:	89 81       	ldd	r24, Y+1	; 0x01
    c5e0:	9a 81       	ldd	r25, Y+2	; 0x02
    c5e2:	2b 81       	ldd	r18, Y+3	; 0x03
    c5e4:	3c 81       	ldd	r19, Y+4	; 0x04
    c5e6:	b9 01       	movw	r22, r18
    c5e8:	0e 94 a2 62 	call	0xc544	; 0xc544 <_ZN6StringaSERKS_>
}
    c5ec:	0f 90       	pop	r0
    c5ee:	0f 90       	pop	r0
    c5f0:	0f 90       	pop	r0
    c5f2:	0f 90       	pop	r0
    c5f4:	cf 91       	pop	r28
    c5f6:	df 91       	pop	r29
    c5f8:	08 95       	ret

0000c5fa <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    c5fa:	df 93       	push	r29
    c5fc:	cf 93       	push	r28
    c5fe:	00 d0       	rcall	.+0      	; 0xc600 <_ZN6StringC2ERKS_+0x6>
    c600:	00 d0       	rcall	.+0      	; 0xc602 <_ZN6StringC2ERKS_+0x8>
    c602:	cd b7       	in	r28, 0x3d	; 61
    c604:	de b7       	in	r29, 0x3e	; 62
    c606:	9a 83       	std	Y+2, r25	; 0x02
    c608:	89 83       	std	Y+1, r24	; 0x01
    c60a:	7c 83       	std	Y+4, r23	; 0x04
    c60c:	6b 83       	std	Y+3, r22	; 0x03
{
	init();
    c60e:	89 81       	ldd	r24, Y+1	; 0x01
    c610:	9a 81       	ldd	r25, Y+2	; 0x02
    c612:	0e 94 56 52 	call	0xa4ac	; 0xa4ac <_ZN6String4initEv>
	*this = value;
    c616:	89 81       	ldd	r24, Y+1	; 0x01
    c618:	9a 81       	ldd	r25, Y+2	; 0x02
    c61a:	2b 81       	ldd	r18, Y+3	; 0x03
    c61c:	3c 81       	ldd	r19, Y+4	; 0x04
    c61e:	b9 01       	movw	r22, r18
    c620:	0e 94 a2 62 	call	0xc544	; 0xc544 <_ZN6StringaSERKS_>
}
    c624:	0f 90       	pop	r0
    c626:	0f 90       	pop	r0
    c628:	0f 90       	pop	r0
    c62a:	0f 90       	pop	r0
    c62c:	cf 91       	pop	r28
    c62e:	df 91       	pop	r29
    c630:	08 95       	ret

0000c632 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    c632:	df 93       	push	r29
    c634:	cf 93       	push	r28
    c636:	00 d0       	rcall	.+0      	; 0xc638 <_ZN6StringD1Ev+0x6>
    c638:	cd b7       	in	r28, 0x3d	; 61
    c63a:	de b7       	in	r29, 0x3e	; 62
    c63c:	9a 83       	std	Y+2, r25	; 0x02
    c63e:	89 83       	std	Y+1, r24	; 0x01
{
	free(buffer);
    c640:	e9 81       	ldd	r30, Y+1	; 0x01
    c642:	fa 81       	ldd	r31, Y+2	; 0x02
    c644:	80 81       	ld	r24, Z
    c646:	91 81       	ldd	r25, Z+1	; 0x01
    c648:	0e 94 31 83 	call	0x10662	; 0x10662 <free>
}
    c64c:	0f 90       	pop	r0
    c64e:	0f 90       	pop	r0
    c650:	cf 91       	pop	r28
    c652:	df 91       	pop	r29
    c654:	08 95       	ret

0000c656 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    c656:	df 93       	push	r29
    c658:	cf 93       	push	r28
    c65a:	00 d0       	rcall	.+0      	; 0xc65c <_ZN6StringD2Ev+0x6>
    c65c:	cd b7       	in	r28, 0x3d	; 61
    c65e:	de b7       	in	r29, 0x3e	; 62
    c660:	9a 83       	std	Y+2, r25	; 0x02
    c662:	89 83       	std	Y+1, r24	; 0x01
{
	free(buffer);
    c664:	e9 81       	ldd	r30, Y+1	; 0x01
    c666:	fa 81       	ldd	r31, Y+2	; 0x02
    c668:	80 81       	ld	r24, Z
    c66a:	91 81       	ldd	r25, Z+1	; 0x01
    c66c:	0e 94 31 83 	call	0x10662	; 0x10662 <free>
}
    c670:	0f 90       	pop	r0
    c672:	0f 90       	pop	r0
    c674:	cf 91       	pop	r28
    c676:	df 91       	pop	r29
    c678:	08 95       	ret

0000c67a <main>:
#include <Arduino.h>

int main(void)
    c67a:	df 93       	push	r29
    c67c:	cf 93       	push	r28
    c67e:	cd b7       	in	r28, 0x3d	; 61
    c680:	de b7       	in	r29, 0x3e	; 62
{
	init();
    c682:	0e 94 24 65 	call	0xca48	; 0xca48 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    c686:	0e 94 3a 6e 	call	0xdc74	; 0xdc74 <setup>
    
	for (;;) {
		loop();
    c68a:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <loop>
		if (serialEventRun) serialEventRun();
    c68e:	8b e1       	ldi	r24, 0x1B	; 27
    c690:	9d e3       	ldi	r25, 0x3D	; 61
    c692:	00 97       	sbiw	r24, 0x00	; 0
    c694:	d1 f3       	breq	.-12     	; 0xc68a <main+0x10>
    c696:	0e 94 1b 3d 	call	0x7a36	; 0x7a36 <_Z14serialEventRunv>
    c69a:	f7 cf       	rjmp	.-18     	; 0xc68a <main+0x10>

0000c69c <__cxa_guard_acquire>:
void operator delete(void * ptr)
{
  free(ptr);
} 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    c69c:	df 93       	push	r29
    c69e:	cf 93       	push	r28
    c6a0:	00 d0       	rcall	.+0      	; 0xc6a2 <__cxa_guard_acquire+0x6>
    c6a2:	00 d0       	rcall	.+0      	; 0xc6a4 <__cxa_guard_acquire+0x8>
    c6a4:	cd b7       	in	r28, 0x3d	; 61
    c6a6:	de b7       	in	r29, 0x3e	; 62
    c6a8:	9a 83       	std	Y+2, r25	; 0x02
    c6aa:	89 83       	std	Y+1, r24	; 0x01
    c6ac:	e9 81       	ldd	r30, Y+1	; 0x01
    c6ae:	fa 81       	ldd	r31, Y+2	; 0x02
    c6b0:	80 81       	ld	r24, Z
    c6b2:	1c 82       	std	Y+4, r1	; 0x04
    c6b4:	1b 82       	std	Y+3, r1	; 0x03
    c6b6:	88 23       	and	r24, r24
    c6b8:	21 f4       	brne	.+8      	; 0xc6c2 <__cxa_guard_acquire+0x26>
    c6ba:	81 e0       	ldi	r24, 0x01	; 1
    c6bc:	90 e0       	ldi	r25, 0x00	; 0
    c6be:	9c 83       	std	Y+4, r25	; 0x04
    c6c0:	8b 83       	std	Y+3, r24	; 0x03
    c6c2:	8b 81       	ldd	r24, Y+3	; 0x03
    c6c4:	9c 81       	ldd	r25, Y+4	; 0x04
    c6c6:	0f 90       	pop	r0
    c6c8:	0f 90       	pop	r0
    c6ca:	0f 90       	pop	r0
    c6cc:	0f 90       	pop	r0
    c6ce:	cf 91       	pop	r28
    c6d0:	df 91       	pop	r29
    c6d2:	08 95       	ret

0000c6d4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    c6d4:	df 93       	push	r29
    c6d6:	cf 93       	push	r28
    c6d8:	00 d0       	rcall	.+0      	; 0xc6da <__cxa_guard_release+0x6>
    c6da:	cd b7       	in	r28, 0x3d	; 61
    c6dc:	de b7       	in	r29, 0x3e	; 62
    c6de:	9a 83       	std	Y+2, r25	; 0x02
    c6e0:	89 83       	std	Y+1, r24	; 0x01
    c6e2:	e9 81       	ldd	r30, Y+1	; 0x01
    c6e4:	fa 81       	ldd	r31, Y+2	; 0x02
    c6e6:	81 e0       	ldi	r24, 0x01	; 1
    c6e8:	80 83       	st	Z, r24
    c6ea:	0f 90       	pop	r0
    c6ec:	0f 90       	pop	r0
    c6ee:	cf 91       	pop	r28
    c6f0:	df 91       	pop	r29
    c6f2:	08 95       	ret

0000c6f4 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    c6f4:	df 93       	push	r29
    c6f6:	cf 93       	push	r28
    c6f8:	00 d0       	rcall	.+0      	; 0xc6fa <__cxa_guard_abort+0x6>
    c6fa:	cd b7       	in	r28, 0x3d	; 61
    c6fc:	de b7       	in	r29, 0x3e	; 62
    c6fe:	9a 83       	std	Y+2, r25	; 0x02
    c700:	89 83       	std	Y+1, r24	; 0x01
    c702:	0f 90       	pop	r0
    c704:	0f 90       	pop	r0
    c706:	cf 91       	pop	r28
    c708:	df 91       	pop	r29
    c70a:	08 95       	ret

0000c70c <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    c70c:	df 93       	push	r29
    c70e:	cf 93       	push	r28
    c710:	cd b7       	in	r28, 0x3d	; 61
    c712:	de b7       	in	r29, 0x3e	; 62
    c714:	cf 91       	pop	r28
    c716:	df 91       	pop	r29
    c718:	08 95       	ret

0000c71a <_ZdlPv>:
void * operator new(size_t size)
{
  return malloc(size);
}

void operator delete(void * ptr)
    c71a:	df 93       	push	r29
    c71c:	cf 93       	push	r28
    c71e:	00 d0       	rcall	.+0      	; 0xc720 <_ZdlPv+0x6>
    c720:	cd b7       	in	r28, 0x3d	; 61
    c722:	de b7       	in	r29, 0x3e	; 62
    c724:	9a 83       	std	Y+2, r25	; 0x02
    c726:	89 83       	std	Y+1, r24	; 0x01
{
  free(ptr);
    c728:	89 81       	ldd	r24, Y+1	; 0x01
    c72a:	9a 81       	ldd	r25, Y+2	; 0x02
    c72c:	0e 94 31 83 	call	0x10662	; 0x10662 <free>
} 
    c730:	0f 90       	pop	r0
    c732:	0f 90       	pop	r0
    c734:	cf 91       	pop	r28
    c736:	df 91       	pop	r29
    c738:	08 95       	ret

0000c73a <_Znwj>:
#include <new.h>

void * operator new(size_t size)
    c73a:	df 93       	push	r29
    c73c:	cf 93       	push	r28
    c73e:	00 d0       	rcall	.+0      	; 0xc740 <_Znwj+0x6>
    c740:	cd b7       	in	r28, 0x3d	; 61
    c742:	de b7       	in	r29, 0x3e	; 62
    c744:	9a 83       	std	Y+2, r25	; 0x02
    c746:	89 83       	std	Y+1, r24	; 0x01
{
  return malloc(size);
    c748:	89 81       	ldd	r24, Y+1	; 0x01
    c74a:	9a 81       	ldd	r25, Y+2	; 0x02
    c74c:	0e 94 84 82 	call	0x10508	; 0x10508 <malloc>
}
    c750:	0f 90       	pop	r0
    c752:	0f 90       	pop	r0
    c754:	cf 91       	pop	r28
    c756:	df 91       	pop	r29
    c758:	08 95       	ret

0000c75a <__vector_9>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    c75a:	1f 92       	push	r1
    c75c:	0f 92       	push	r0
    c75e:	0f b6       	in	r0, 0x3f	; 63
    c760:	0f 92       	push	r0
    c762:	11 24       	eor	r1, r1
    c764:	8f 93       	push	r24
    c766:	9f 93       	push	r25
    c768:	af 93       	push	r26
    c76a:	bf 93       	push	r27
    c76c:	df 93       	push	r29
    c76e:	cf 93       	push	r28
    c770:	00 d0       	rcall	.+0      	; 0xc772 <__vector_9+0x18>
    c772:	00 d0       	rcall	.+0      	; 0xc774 <__vector_9+0x1a>
    c774:	0f 92       	push	r0
    c776:	cd b7       	in	r28, 0x3d	; 61
    c778:	de b7       	in	r29, 0x3e	; 62
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    c77a:	80 91 5f 06 	lds	r24, 0x065F
    c77e:	90 91 60 06 	lds	r25, 0x0660
    c782:	a0 91 61 06 	lds	r26, 0x0661
    c786:	b0 91 62 06 	lds	r27, 0x0662
    c78a:	8a 83       	std	Y+2, r24	; 0x02
    c78c:	9b 83       	std	Y+3, r25	; 0x03
    c78e:	ac 83       	std	Y+4, r26	; 0x04
    c790:	bd 83       	std	Y+5, r27	; 0x05
	unsigned char f = timer0_fract;
    c792:	80 91 63 06 	lds	r24, 0x0663
    c796:	89 83       	std	Y+1, r24	; 0x01

	m += MILLIS_INC;
    c798:	8a 81       	ldd	r24, Y+2	; 0x02
    c79a:	9b 81       	ldd	r25, Y+3	; 0x03
    c79c:	ac 81       	ldd	r26, Y+4	; 0x04
    c79e:	bd 81       	ldd	r27, Y+5	; 0x05
    c7a0:	40 96       	adiw	r24, 0x10	; 16
    c7a2:	a1 1d       	adc	r26, r1
    c7a4:	b1 1d       	adc	r27, r1
    c7a6:	8a 83       	std	Y+2, r24	; 0x02
    c7a8:	9b 83       	std	Y+3, r25	; 0x03
    c7aa:	ac 83       	std	Y+4, r26	; 0x04
    c7ac:	bd 83       	std	Y+5, r27	; 0x05
	f += FRACT_INC;
    c7ae:	89 81       	ldd	r24, Y+1	; 0x01
    c7b0:	80 5d       	subi	r24, 0xD0	; 208
    c7b2:	89 83       	std	Y+1, r24	; 0x01
	if (f >= FRACT_MAX) {
    c7b4:	89 81       	ldd	r24, Y+1	; 0x01
    c7b6:	8d 37       	cpi	r24, 0x7D	; 125
    c7b8:	70 f0       	brcs	.+28     	; 0xc7d6 <__vector_9+0x7c>
		f -= FRACT_MAX;
    c7ba:	89 81       	ldd	r24, Y+1	; 0x01
    c7bc:	8d 57       	subi	r24, 0x7D	; 125
    c7be:	89 83       	std	Y+1, r24	; 0x01
		m += 1;
    c7c0:	8a 81       	ldd	r24, Y+2	; 0x02
    c7c2:	9b 81       	ldd	r25, Y+3	; 0x03
    c7c4:	ac 81       	ldd	r26, Y+4	; 0x04
    c7c6:	bd 81       	ldd	r27, Y+5	; 0x05
    c7c8:	01 96       	adiw	r24, 0x01	; 1
    c7ca:	a1 1d       	adc	r26, r1
    c7cc:	b1 1d       	adc	r27, r1
    c7ce:	8a 83       	std	Y+2, r24	; 0x02
    c7d0:	9b 83       	std	Y+3, r25	; 0x03
    c7d2:	ac 83       	std	Y+4, r26	; 0x04
    c7d4:	bd 83       	std	Y+5, r27	; 0x05
	}

	timer0_fract = f;
    c7d6:	89 81       	ldd	r24, Y+1	; 0x01
    c7d8:	80 93 63 06 	sts	0x0663, r24
	timer0_millis = m;
    c7dc:	8a 81       	ldd	r24, Y+2	; 0x02
    c7de:	9b 81       	ldd	r25, Y+3	; 0x03
    c7e0:	ac 81       	ldd	r26, Y+4	; 0x04
    c7e2:	bd 81       	ldd	r27, Y+5	; 0x05
    c7e4:	80 93 5f 06 	sts	0x065F, r24
    c7e8:	90 93 60 06 	sts	0x0660, r25
    c7ec:	a0 93 61 06 	sts	0x0661, r26
    c7f0:	b0 93 62 06 	sts	0x0662, r27
	timer0_overflow_count++;
    c7f4:	80 91 5b 06 	lds	r24, 0x065B
    c7f8:	90 91 5c 06 	lds	r25, 0x065C
    c7fc:	a0 91 5d 06 	lds	r26, 0x065D
    c800:	b0 91 5e 06 	lds	r27, 0x065E
    c804:	01 96       	adiw	r24, 0x01	; 1
    c806:	a1 1d       	adc	r26, r1
    c808:	b1 1d       	adc	r27, r1
    c80a:	80 93 5b 06 	sts	0x065B, r24
    c80e:	90 93 5c 06 	sts	0x065C, r25
    c812:	a0 93 5d 06 	sts	0x065D, r26
    c816:	b0 93 5e 06 	sts	0x065E, r27
}
    c81a:	0f 90       	pop	r0
    c81c:	0f 90       	pop	r0
    c81e:	0f 90       	pop	r0
    c820:	0f 90       	pop	r0
    c822:	0f 90       	pop	r0
    c824:	cf 91       	pop	r28
    c826:	df 91       	pop	r29
    c828:	bf 91       	pop	r27
    c82a:	af 91       	pop	r26
    c82c:	9f 91       	pop	r25
    c82e:	8f 91       	pop	r24
    c830:	0f 90       	pop	r0
    c832:	0f be       	out	0x3f, r0	; 63
    c834:	0f 90       	pop	r0
    c836:	1f 90       	pop	r1
    c838:	18 95       	reti

0000c83a <millis>:

unsigned long millis()
{
    c83a:	df 93       	push	r29
    c83c:	cf 93       	push	r28
    c83e:	00 d0       	rcall	.+0      	; 0xc840 <millis+0x6>
    c840:	00 d0       	rcall	.+0      	; 0xc842 <millis+0x8>
    c842:	0f 92       	push	r0
    c844:	cd b7       	in	r28, 0x3d	; 61
    c846:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG;
    c848:	ef e5       	ldi	r30, 0x5F	; 95
    c84a:	f0 e0       	ldi	r31, 0x00	; 0
    c84c:	80 81       	ld	r24, Z
    c84e:	89 83       	std	Y+1, r24	; 0x01

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    c850:	f8 94       	cli
	m = timer0_millis;
    c852:	80 91 5f 06 	lds	r24, 0x065F
    c856:	90 91 60 06 	lds	r25, 0x0660
    c85a:	a0 91 61 06 	lds	r26, 0x0661
    c85e:	b0 91 62 06 	lds	r27, 0x0662
    c862:	8a 83       	std	Y+2, r24	; 0x02
    c864:	9b 83       	std	Y+3, r25	; 0x03
    c866:	ac 83       	std	Y+4, r26	; 0x04
    c868:	bd 83       	std	Y+5, r27	; 0x05
	SREG = oldSREG;
    c86a:	ef e5       	ldi	r30, 0x5F	; 95
    c86c:	f0 e0       	ldi	r31, 0x00	; 0
    c86e:	89 81       	ldd	r24, Y+1	; 0x01
    c870:	80 83       	st	Z, r24

	return m;
    c872:	8a 81       	ldd	r24, Y+2	; 0x02
    c874:	9b 81       	ldd	r25, Y+3	; 0x03
    c876:	ac 81       	ldd	r26, Y+4	; 0x04
    c878:	bd 81       	ldd	r27, Y+5	; 0x05
}
    c87a:	bc 01       	movw	r22, r24
    c87c:	cd 01       	movw	r24, r26
    c87e:	0f 90       	pop	r0
    c880:	0f 90       	pop	r0
    c882:	0f 90       	pop	r0
    c884:	0f 90       	pop	r0
    c886:	0f 90       	pop	r0
    c888:	cf 91       	pop	r28
    c88a:	df 91       	pop	r29
    c88c:	08 95       	ret

0000c88e <micros>:

unsigned long micros() {
    c88e:	df 93       	push	r29
    c890:	cf 93       	push	r28
    c892:	00 d0       	rcall	.+0      	; 0xc894 <micros+0x6>
    c894:	00 d0       	rcall	.+0      	; 0xc896 <micros+0x8>
    c896:	00 d0       	rcall	.+0      	; 0xc898 <micros+0xa>
    c898:	cd b7       	in	r28, 0x3d	; 61
    c89a:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    c89c:	ef e5       	ldi	r30, 0x5F	; 95
    c89e:	f0 e0       	ldi	r31, 0x00	; 0
    c8a0:	80 81       	ld	r24, Z
    c8a2:	8a 83       	std	Y+2, r24	; 0x02
	
	cli();
    c8a4:	f8 94       	cli
	m = timer0_overflow_count;
    c8a6:	80 91 5b 06 	lds	r24, 0x065B
    c8aa:	90 91 5c 06 	lds	r25, 0x065C
    c8ae:	a0 91 5d 06 	lds	r26, 0x065D
    c8b2:	b0 91 5e 06 	lds	r27, 0x065E
    c8b6:	8b 83       	std	Y+3, r24	; 0x03
    c8b8:	9c 83       	std	Y+4, r25	; 0x04
    c8ba:	ad 83       	std	Y+5, r26	; 0x05
    c8bc:	be 83       	std	Y+6, r27	; 0x06
#if defined(TCNT0)
	t = TCNT0;
    c8be:	e2 e5       	ldi	r30, 0x52	; 82
    c8c0:	f0 e0       	ldi	r31, 0x00	; 0
    c8c2:	80 81       	ld	r24, Z
    c8c4:	89 83       	std	Y+1, r24	; 0x01
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
		m++;
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
    c8c6:	e8 e5       	ldi	r30, 0x58	; 88
    c8c8:	f0 e0       	ldi	r31, 0x00	; 0
    c8ca:	80 81       	ld	r24, Z
    c8cc:	88 2f       	mov	r24, r24
    c8ce:	90 e0       	ldi	r25, 0x00	; 0
    c8d0:	81 70       	andi	r24, 0x01	; 1
    c8d2:	90 70       	andi	r25, 0x00	; 0
    c8d4:	88 23       	and	r24, r24
    c8d6:	71 f0       	breq	.+28     	; 0xc8f4 <micros+0x66>
    c8d8:	89 81       	ldd	r24, Y+1	; 0x01
    c8da:	8f 3f       	cpi	r24, 0xFF	; 255
    c8dc:	59 f0       	breq	.+22     	; 0xc8f4 <micros+0x66>
		m++;
    c8de:	8b 81       	ldd	r24, Y+3	; 0x03
    c8e0:	9c 81       	ldd	r25, Y+4	; 0x04
    c8e2:	ad 81       	ldd	r26, Y+5	; 0x05
    c8e4:	be 81       	ldd	r27, Y+6	; 0x06
    c8e6:	01 96       	adiw	r24, 0x01	; 1
    c8e8:	a1 1d       	adc	r26, r1
    c8ea:	b1 1d       	adc	r27, r1
    c8ec:	8b 83       	std	Y+3, r24	; 0x03
    c8ee:	9c 83       	std	Y+4, r25	; 0x04
    c8f0:	ad 83       	std	Y+5, r26	; 0x05
    c8f2:	be 83       	std	Y+6, r27	; 0x06
#endif

	SREG = oldSREG;
    c8f4:	ef e5       	ldi	r30, 0x5F	; 95
    c8f6:	f0 e0       	ldi	r31, 0x00	; 0
    c8f8:	8a 81       	ldd	r24, Y+2	; 0x02
    c8fa:	80 83       	st	Z, r24
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    c8fc:	8b 81       	ldd	r24, Y+3	; 0x03
    c8fe:	9c 81       	ldd	r25, Y+4	; 0x04
    c900:	ad 81       	ldd	r26, Y+5	; 0x05
    c902:	be 81       	ldd	r27, Y+6	; 0x06
    c904:	22 27       	eor	r18, r18
    c906:	38 2f       	mov	r19, r24
    c908:	49 2f       	mov	r20, r25
    c90a:	5a 2f       	mov	r21, r26
    c90c:	89 81       	ldd	r24, Y+1	; 0x01
    c90e:	88 2f       	mov	r24, r24
    c910:	90 e0       	ldi	r25, 0x00	; 0
    c912:	a0 e0       	ldi	r26, 0x00	; 0
    c914:	b0 e0       	ldi	r27, 0x00	; 0
    c916:	82 0f       	add	r24, r18
    c918:	93 1f       	adc	r25, r19
    c91a:	a4 1f       	adc	r26, r20
    c91c:	b5 1f       	adc	r27, r21
    c91e:	88 0f       	add	r24, r24
    c920:	99 1f       	adc	r25, r25
    c922:	aa 1f       	adc	r26, r26
    c924:	bb 1f       	adc	r27, r27
    c926:	88 0f       	add	r24, r24
    c928:	99 1f       	adc	r25, r25
    c92a:	aa 1f       	adc	r26, r26
    c92c:	bb 1f       	adc	r27, r27
    c92e:	88 0f       	add	r24, r24
    c930:	99 1f       	adc	r25, r25
    c932:	aa 1f       	adc	r26, r26
    c934:	bb 1f       	adc	r27, r27
    c936:	88 0f       	add	r24, r24
    c938:	99 1f       	adc	r25, r25
    c93a:	aa 1f       	adc	r26, r26
    c93c:	bb 1f       	adc	r27, r27
    c93e:	88 0f       	add	r24, r24
    c940:	99 1f       	adc	r25, r25
    c942:	aa 1f       	adc	r26, r26
    c944:	bb 1f       	adc	r27, r27
    c946:	88 0f       	add	r24, r24
    c948:	99 1f       	adc	r25, r25
    c94a:	aa 1f       	adc	r26, r26
    c94c:	bb 1f       	adc	r27, r27
}
    c94e:	bc 01       	movw	r22, r24
    c950:	cd 01       	movw	r24, r26
    c952:	26 96       	adiw	r28, 0x06	; 6
    c954:	0f b6       	in	r0, 0x3f	; 63
    c956:	f8 94       	cli
    c958:	de bf       	out	0x3e, r29	; 62
    c95a:	0f be       	out	0x3f, r0	; 63
    c95c:	cd bf       	out	0x3d, r28	; 61
    c95e:	cf 91       	pop	r28
    c960:	df 91       	pop	r29
    c962:	08 95       	ret

0000c964 <delay>:

void delay(unsigned long ms)
{
    c964:	df 93       	push	r29
    c966:	cf 93       	push	r28
    c968:	00 d0       	rcall	.+0      	; 0xc96a <delay+0x6>
    c96a:	00 d0       	rcall	.+0      	; 0xc96c <delay+0x8>
    c96c:	00 d0       	rcall	.+0      	; 0xc96e <delay+0xa>
    c96e:	cd b7       	in	r28, 0x3d	; 61
    c970:	de b7       	in	r29, 0x3e	; 62
    c972:	6b 83       	std	Y+3, r22	; 0x03
    c974:	7c 83       	std	Y+4, r23	; 0x04
    c976:	8d 83       	std	Y+5, r24	; 0x05
    c978:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t start = (uint16_t)micros();
    c97a:	0e 94 47 64 	call	0xc88e	; 0xc88e <micros>
    c97e:	dc 01       	movw	r26, r24
    c980:	cb 01       	movw	r24, r22
    c982:	9a 83       	std	Y+2, r25	; 0x02
    c984:	89 83       	std	Y+1, r24	; 0x01
    c986:	20 c0       	rjmp	.+64     	; 0xc9c8 <delay+0x64>

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    c988:	0e 94 47 64 	call	0xc88e	; 0xc88e <micros>
    c98c:	dc 01       	movw	r26, r24
    c98e:	cb 01       	movw	r24, r22
    c990:	9c 01       	movw	r18, r24
    c992:	89 81       	ldd	r24, Y+1	; 0x01
    c994:	9a 81       	ldd	r25, Y+2	; 0x02
    c996:	a9 01       	movw	r20, r18
    c998:	48 1b       	sub	r20, r24
    c99a:	59 0b       	sbc	r21, r25
    c99c:	ca 01       	movw	r24, r20
    c99e:	53 e0       	ldi	r21, 0x03	; 3
    c9a0:	88 3e       	cpi	r24, 0xE8	; 232
    c9a2:	95 07       	cpc	r25, r21
    c9a4:	88 f0       	brcs	.+34     	; 0xc9c8 <delay+0x64>
			ms--;
    c9a6:	8b 81       	ldd	r24, Y+3	; 0x03
    c9a8:	9c 81       	ldd	r25, Y+4	; 0x04
    c9aa:	ad 81       	ldd	r26, Y+5	; 0x05
    c9ac:	be 81       	ldd	r27, Y+6	; 0x06
    c9ae:	01 97       	sbiw	r24, 0x01	; 1
    c9b0:	a1 09       	sbc	r26, r1
    c9b2:	b1 09       	sbc	r27, r1
    c9b4:	8b 83       	std	Y+3, r24	; 0x03
    c9b6:	9c 83       	std	Y+4, r25	; 0x04
    c9b8:	ad 83       	std	Y+5, r26	; 0x05
    c9ba:	be 83       	std	Y+6, r27	; 0x06
			start += 1000;
    c9bc:	89 81       	ldd	r24, Y+1	; 0x01
    c9be:	9a 81       	ldd	r25, Y+2	; 0x02
    c9c0:	88 51       	subi	r24, 0x18	; 24
    c9c2:	9c 4f       	sbci	r25, 0xFC	; 252
    c9c4:	9a 83       	std	Y+2, r25	; 0x02
    c9c6:	89 83       	std	Y+1, r24	; 0x01

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    c9c8:	8b 81       	ldd	r24, Y+3	; 0x03
    c9ca:	9c 81       	ldd	r25, Y+4	; 0x04
    c9cc:	ad 81       	ldd	r26, Y+5	; 0x05
    c9ce:	be 81       	ldd	r27, Y+6	; 0x06
    c9d0:	00 97       	sbiw	r24, 0x00	; 0
    c9d2:	a1 05       	cpc	r26, r1
    c9d4:	b1 05       	cpc	r27, r1
    c9d6:	c1 f6       	brne	.-80     	; 0xc988 <delay+0x24>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    c9d8:	26 96       	adiw	r28, 0x06	; 6
    c9da:	0f b6       	in	r0, 0x3f	; 63
    c9dc:	f8 94       	cli
    c9de:	de bf       	out	0x3e, r29	; 62
    c9e0:	0f be       	out	0x3f, r0	; 63
    c9e2:	cd bf       	out	0x3d, r28	; 61
    c9e4:	cf 91       	pop	r28
    c9e6:	df 91       	pop	r29
    c9e8:	08 95       	ret

0000c9ea <delayMicroseconds>:

/* Delay for the given number of microseconds.  Assumes a 8 or 16 MHz clock. */
void delayMicroseconds(unsigned int us)
{
    c9ea:	df 93       	push	r29
    c9ec:	cf 93       	push	r28
    c9ee:	00 d0       	rcall	.+0      	; 0xc9f0 <delayMicroseconds+0x6>
    c9f0:	cd b7       	in	r28, 0x3d	; 61
    c9f2:	de b7       	in	r29, 0x3e	; 62
    c9f4:	9a 83       	std	Y+2, r25	; 0x02
    c9f6:	89 83       	std	Y+1, r24	; 0x01
	// for the 8 MHz internal clock on the ATmega168

	// for a one- or two-microsecond delay, simply return.  the overhead of
	// the function calls takes more than two microseconds.  can't just
	// subtract two, since us is unsigned; we'd overflow.
	if (--us == 0)
    c9f8:	89 81       	ldd	r24, Y+1	; 0x01
    c9fa:	9a 81       	ldd	r25, Y+2	; 0x02
    c9fc:	01 97       	sbiw	r24, 0x01	; 1
    c9fe:	9a 83       	std	Y+2, r25	; 0x02
    ca00:	89 83       	std	Y+1, r24	; 0x01
    ca02:	89 81       	ldd	r24, Y+1	; 0x01
    ca04:	9a 81       	ldd	r25, Y+2	; 0x02
    ca06:	00 97       	sbiw	r24, 0x00	; 0
    ca08:	d1 f0       	breq	.+52     	; 0xca3e <delayMicroseconds+0x54>
		return;
	if (--us == 0)
    ca0a:	89 81       	ldd	r24, Y+1	; 0x01
    ca0c:	9a 81       	ldd	r25, Y+2	; 0x02
    ca0e:	01 97       	sbiw	r24, 0x01	; 1
    ca10:	9a 83       	std	Y+2, r25	; 0x02
    ca12:	89 83       	std	Y+1, r24	; 0x01
    ca14:	89 81       	ldd	r24, Y+1	; 0x01
    ca16:	9a 81       	ldd	r25, Y+2	; 0x02
    ca18:	00 97       	sbiw	r24, 0x00	; 0
    ca1a:	89 f0       	breq	.+34     	; 0xca3e <delayMicroseconds+0x54>
		return;

	// the following loop takes half of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1;
    ca1c:	89 81       	ldd	r24, Y+1	; 0x01
    ca1e:	9a 81       	ldd	r25, Y+2	; 0x02
    ca20:	88 0f       	add	r24, r24
    ca22:	99 1f       	adc	r25, r25
    ca24:	9a 83       	std	Y+2, r25	; 0x02
    ca26:	89 83       	std	Y+1, r24	; 0x01
    
	// partially compensate for the time taken by the preceeding commands.
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
    ca28:	89 81       	ldd	r24, Y+1	; 0x01
    ca2a:	9a 81       	ldd	r25, Y+2	; 0x02
    ca2c:	01 97       	sbiw	r24, 0x01	; 1
    ca2e:	9a 83       	std	Y+2, r25	; 0x02
    ca30:	89 83       	std	Y+1, r24	; 0x01
#endif

	// busy wait
	__asm__ __volatile__ (
    ca32:	89 81       	ldd	r24, Y+1	; 0x01
    ca34:	9a 81       	ldd	r25, Y+2	; 0x02
    ca36:	01 97       	sbiw	r24, 0x01	; 1
    ca38:	f1 f7       	brne	.-4      	; 0xca36 <delayMicroseconds+0x4c>
    ca3a:	9a 83       	std	Y+2, r25	; 0x02
    ca3c:	89 83       	std	Y+1, r24	; 0x01
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
}
    ca3e:	0f 90       	pop	r0
    ca40:	0f 90       	pop	r0
    ca42:	cf 91       	pop	r28
    ca44:	df 91       	pop	r29
    ca46:	08 95       	ret

0000ca48 <init>:

void init()
{
    ca48:	df 93       	push	r29
    ca4a:	cf 93       	push	r28
    ca4c:	cd b7       	in	r28, 0x3d	; 61
    ca4e:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    ca50:	78 94       	sei
#if defined(__AVR_ATmega128__)
	// CPU specific: different values for the ATmega128
	sbi(TCCR0, CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
    ca52:	a3 e5       	ldi	r26, 0x53	; 83
    ca54:	b0 e0       	ldi	r27, 0x00	; 0
    ca56:	e3 e5       	ldi	r30, 0x53	; 83
    ca58:	f0 e0       	ldi	r31, 0x00	; 0
    ca5a:	80 81       	ld	r24, Z
    ca5c:	82 60       	ori	r24, 0x02	; 2
    ca5e:	8c 93       	st	X, r24
	sbi(TCCR0, CS00);
    ca60:	a3 e5       	ldi	r26, 0x53	; 83
    ca62:	b0 e0       	ldi	r27, 0x00	; 0
    ca64:	e3 e5       	ldi	r30, 0x53	; 83
    ca66:	f0 e0       	ldi	r31, 0x00	; 0
    ca68:	80 81       	ld	r24, Z
    ca6a:	81 60       	ori	r24, 0x01	; 1
    ca6c:	8c 93       	st	X, r24
	#error Timer 0 prescale factor 64 not set correctly
#endif

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
    ca6e:	a9 e5       	ldi	r26, 0x59	; 89
    ca70:	b0 e0       	ldi	r27, 0x00	; 0
    ca72:	e9 e5       	ldi	r30, 0x59	; 89
    ca74:	f0 e0       	ldi	r31, 0x00	; 0
    ca76:	80 81       	ld	r24, Z
    ca78:	81 60       	ori	r24, 0x01	; 1
    ca7a:	8c 93       	st	X, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    ca7c:	ee e4       	ldi	r30, 0x4E	; 78
    ca7e:	f0 e0       	ldi	r31, 0x00	; 0
    ca80:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    ca82:	ae e4       	ldi	r26, 0x4E	; 78
    ca84:	b0 e0       	ldi	r27, 0x00	; 0
    ca86:	ee e4       	ldi	r30, 0x4E	; 78
    ca88:	f0 e0       	ldi	r31, 0x00	; 0
    ca8a:	80 81       	ld	r24, Z
    ca8c:	82 60       	ori	r24, 0x02	; 2
    ca8e:	8c 93       	st	X, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    ca90:	af e4       	ldi	r26, 0x4F	; 79
    ca92:	b0 e0       	ldi	r27, 0x00	; 0
    ca94:	ef e4       	ldi	r30, 0x4F	; 79
    ca96:	f0 e0       	ldi	r31, 0x00	; 0
    ca98:	80 81       	ld	r24, Z
    ca9a:	81 60       	ori	r24, 0x01	; 1
    ca9c:	8c 93       	st	X, r24
	#warning this needs to be finished
#endif

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
    ca9e:	a5 e4       	ldi	r26, 0x45	; 69
    caa0:	b0 e0       	ldi	r27, 0x00	; 0
    caa2:	e5 e4       	ldi	r30, 0x45	; 69
    caa4:	f0 e0       	ldi	r31, 0x00	; 0
    caa6:	80 81       	ld	r24, Z
    caa8:	84 60       	ori	r24, 0x04	; 4
    caaa:	8c 93       	st	X, r24
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
    caac:	a5 e4       	ldi	r26, 0x45	; 69
    caae:	b0 e0       	ldi	r27, 0x00	; 0
    cab0:	e5 e4       	ldi	r30, 0x45	; 69
    cab2:	f0 e0       	ldi	r31, 0x00	; 0
    cab4:	80 81       	ld	r24, Z
    cab6:	80 64       	ori	r24, 0x40	; 64
    cab8:	8c 93       	st	X, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    caba:	a6 e2       	ldi	r26, 0x26	; 38
    cabc:	b0 e0       	ldi	r27, 0x00	; 0
    cabe:	e6 e2       	ldi	r30, 0x26	; 38
    cac0:	f0 e0       	ldi	r31, 0x00	; 0
    cac2:	80 81       	ld	r24, Z
    cac4:	84 60       	ori	r24, 0x04	; 4
    cac6:	8c 93       	st	X, r24
	sbi(ADCSRA, ADPS1);
    cac8:	a6 e2       	ldi	r26, 0x26	; 38
    caca:	b0 e0       	ldi	r27, 0x00	; 0
    cacc:	e6 e2       	ldi	r30, 0x26	; 38
    cace:	f0 e0       	ldi	r31, 0x00	; 0
    cad0:	80 81       	ld	r24, Z
    cad2:	82 60       	ori	r24, 0x02	; 2
    cad4:	8c 93       	st	X, r24
	sbi(ADCSRA, ADPS0);
    cad6:	a6 e2       	ldi	r26, 0x26	; 38
    cad8:	b0 e0       	ldi	r27, 0x00	; 0
    cada:	e6 e2       	ldi	r30, 0x26	; 38
    cadc:	f0 e0       	ldi	r31, 0x00	; 0
    cade:	80 81       	ld	r24, Z
    cae0:	81 60       	ori	r24, 0x01	; 1
    cae2:	8c 93       	st	X, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    cae4:	a6 e2       	ldi	r26, 0x26	; 38
    cae6:	b0 e0       	ldi	r27, 0x00	; 0
    cae8:	e6 e2       	ldi	r30, 0x26	; 38
    caea:	f0 e0       	ldi	r31, 0x00	; 0
    caec:	80 81       	ld	r24, Z
    caee:	80 68       	ori	r24, 0x80	; 128
    caf0:	8c 93       	st	X, r24

	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
    caf2:	ea e2       	ldi	r30, 0x2A	; 42
    caf4:	f0 e0       	ldi	r31, 0x00	; 0
    caf6:	10 82       	st	Z, r1
#elif defined(UCSR0B)
	UCSR0B = 0;
#endif
}
    caf8:	cf 91       	pop	r28
    cafa:	df 91       	pop	r29
    cafc:	08 95       	ret

0000cafe <analogReference>:
#include "pins_arduino.h"

uint8_t analog_reference = DEFAULT;

void analogReference(uint8_t mode)
{
    cafe:	df 93       	push	r29
    cb00:	cf 93       	push	r28
    cb02:	0f 92       	push	r0
    cb04:	cd b7       	in	r28, 0x3d	; 61
    cb06:	de b7       	in	r29, 0x3e	; 62
    cb08:	89 83       	std	Y+1, r24	; 0x01
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    cb0a:	89 81       	ldd	r24, Y+1	; 0x01
    cb0c:	80 93 f4 00 	sts	0x00F4, r24
}
    cb10:	0f 90       	pop	r0
    cb12:	cf 91       	pop	r28
    cb14:	df 91       	pop	r29
    cb16:	08 95       	ret

0000cb18 <analogRead>:

int analogRead(uint8_t pin)
{
    cb18:	df 93       	push	r29
    cb1a:	cf 93       	push	r28
    cb1c:	00 d0       	rcall	.+0      	; 0xcb1e <analogRead+0x6>
    cb1e:	0f 92       	push	r0
    cb20:	cd b7       	in	r28, 0x3d	; 61
    cb22:	de b7       	in	r29, 0x3e	; 62
    cb24:	8b 83       	std	Y+3, r24	; 0x03
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    cb26:	8b 81       	ldd	r24, Y+3	; 0x03
    cb28:	8e 30       	cpi	r24, 0x0E	; 14
    cb2a:	18 f0       	brcs	.+6      	; 0xcb32 <analogRead+0x1a>
    cb2c:	8b 81       	ldd	r24, Y+3	; 0x03
    cb2e:	8e 50       	subi	r24, 0x0E	; 14
    cb30:	8b 83       	std	Y+3, r24	; 0x03
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    cb32:	e7 e2       	ldi	r30, 0x27	; 39
    cb34:	f0 e0       	ldi	r31, 0x00	; 0
    cb36:	80 91 f4 00 	lds	r24, 0x00F4
    cb3a:	88 2f       	mov	r24, r24
    cb3c:	90 e0       	ldi	r25, 0x00	; 0
    cb3e:	00 24       	eor	r0, r0
    cb40:	96 95       	lsr	r25
    cb42:	87 95       	ror	r24
    cb44:	07 94       	ror	r0
    cb46:	96 95       	lsr	r25
    cb48:	87 95       	ror	r24
    cb4a:	07 94       	ror	r0
    cb4c:	98 2f       	mov	r25, r24
    cb4e:	80 2d       	mov	r24, r0
    cb50:	98 2f       	mov	r25, r24
    cb52:	8b 81       	ldd	r24, Y+3	; 0x03
    cb54:	87 70       	andi	r24, 0x07	; 7
    cb56:	89 2b       	or	r24, r25
    cb58:	80 83       	st	Z, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    cb5a:	a6 e2       	ldi	r26, 0x26	; 38
    cb5c:	b0 e0       	ldi	r27, 0x00	; 0
    cb5e:	e6 e2       	ldi	r30, 0x26	; 38
    cb60:	f0 e0       	ldi	r31, 0x00	; 0
    cb62:	80 81       	ld	r24, Z
    cb64:	80 64       	ori	r24, 0x40	; 64
    cb66:	8c 93       	st	X, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    cb68:	e6 e2       	ldi	r30, 0x26	; 38
    cb6a:	f0 e0       	ldi	r31, 0x00	; 0
    cb6c:	80 81       	ld	r24, Z
    cb6e:	88 2f       	mov	r24, r24
    cb70:	90 e0       	ldi	r25, 0x00	; 0
    cb72:	80 74       	andi	r24, 0x40	; 64
    cb74:	90 70       	andi	r25, 0x00	; 0
    cb76:	00 97       	sbiw	r24, 0x00	; 0
    cb78:	b9 f7       	brne	.-18     	; 0xcb68 <analogRead+0x50>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    cb7a:	e4 e2       	ldi	r30, 0x24	; 36
    cb7c:	f0 e0       	ldi	r31, 0x00	; 0
    cb7e:	80 81       	ld	r24, Z
    cb80:	8a 83       	std	Y+2, r24	; 0x02
	high = ADCH;
    cb82:	e5 e2       	ldi	r30, 0x25	; 37
    cb84:	f0 e0       	ldi	r31, 0x00	; 0
    cb86:	80 81       	ld	r24, Z
    cb88:	89 83       	std	Y+1, r24	; 0x01
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    cb8a:	89 81       	ldd	r24, Y+1	; 0x01
    cb8c:	88 2f       	mov	r24, r24
    cb8e:	90 e0       	ldi	r25, 0x00	; 0
    cb90:	38 2f       	mov	r19, r24
    cb92:	22 27       	eor	r18, r18
    cb94:	8a 81       	ldd	r24, Y+2	; 0x02
    cb96:	88 2f       	mov	r24, r24
    cb98:	90 e0       	ldi	r25, 0x00	; 0
    cb9a:	82 2b       	or	r24, r18
    cb9c:	93 2b       	or	r25, r19
}
    cb9e:	0f 90       	pop	r0
    cba0:	0f 90       	pop	r0
    cba2:	0f 90       	pop	r0
    cba4:	cf 91       	pop	r28
    cba6:	df 91       	pop	r29
    cba8:	08 95       	ret

0000cbaa <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    cbaa:	df 93       	push	r29
    cbac:	cf 93       	push	r28
    cbae:	cd b7       	in	r28, 0x3d	; 61
    cbb0:	de b7       	in	r29, 0x3e	; 62
    cbb2:	28 97       	sbiw	r28, 0x08	; 8
    cbb4:	0f b6       	in	r0, 0x3f	; 63
    cbb6:	f8 94       	cli
    cbb8:	de bf       	out	0x3e, r29	; 62
    cbba:	0f be       	out	0x3f, r0	; 63
    cbbc:	cd bf       	out	0x3d, r28	; 61
    cbbe:	8c 83       	std	Y+4, r24	; 0x04
    cbc0:	7e 83       	std	Y+6, r23	; 0x06
    cbc2:	6d 83       	std	Y+5, r22	; 0x05
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    cbc4:	8c 81       	ldd	r24, Y+4	; 0x04
    cbc6:	61 e0       	ldi	r22, 0x01	; 1
    cbc8:	0e 94 6f 66 	call	0xccde	; 0xccde <pinMode>
	if (val == 0)
    cbcc:	8d 81       	ldd	r24, Y+5	; 0x05
    cbce:	9e 81       	ldd	r25, Y+6	; 0x06
    cbd0:	00 97       	sbiw	r24, 0x00	; 0
    cbd2:	29 f4       	brne	.+10     	; 0xcbde <analogWrite+0x34>
	{
		digitalWrite(pin, LOW);
    cbd4:	8c 81       	ldd	r24, Y+4	; 0x04
    cbd6:	60 e0       	ldi	r22, 0x00	; 0
    cbd8:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
    cbdc:	77 c0       	rjmp	.+238    	; 0xcccc <analogWrite+0x122>
	}
	else if (val == 255)
    cbde:	8d 81       	ldd	r24, Y+5	; 0x05
    cbe0:	9e 81       	ldd	r25, Y+6	; 0x06
    cbe2:	8f 3f       	cpi	r24, 0xFF	; 255
    cbe4:	91 05       	cpc	r25, r1
    cbe6:	29 f4       	brne	.+10     	; 0xcbf2 <analogWrite+0x48>
	{
		digitalWrite(pin, HIGH);
    cbe8:	8c 81       	ldd	r24, Y+4	; 0x04
    cbea:	61 e0       	ldi	r22, 0x01	; 1
    cbec:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
    cbf0:	6d c0       	rjmp	.+218    	; 0xcccc <analogWrite+0x122>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    cbf2:	8c 81       	ldd	r24, Y+4	; 0x04
    cbf4:	88 2f       	mov	r24, r24
    cbf6:	90 e0       	ldi	r25, 0x00	; 0
    cbf8:	85 55       	subi	r24, 0x55	; 85
    cbfa:	9f 4f       	sbci	r25, 0xFF	; 255
    cbfc:	9b 83       	std	Y+3, r25	; 0x03
    cbfe:	8a 83       	std	Y+2, r24	; 0x02
    cc00:	ea 81       	ldd	r30, Y+2	; 0x02
    cc02:	fb 81       	ldd	r31, Y+3	; 0x03
    cc04:	84 91       	lpm	r24, Z+
    cc06:	89 83       	std	Y+1, r24	; 0x01
    cc08:	89 81       	ldd	r24, Y+1	; 0x01
    cc0a:	28 2f       	mov	r18, r24
    cc0c:	30 e0       	ldi	r19, 0x00	; 0
    cc0e:	38 87       	std	Y+8, r19	; 0x08
    cc10:	2f 83       	std	Y+7, r18	; 0x07
    cc12:	8f 81       	ldd	r24, Y+7	; 0x07
    cc14:	98 85       	ldd	r25, Y+8	; 0x08
    cc16:	83 30       	cpi	r24, 0x03	; 3
    cc18:	91 05       	cpc	r25, r1
    cc1a:	11 f1       	breq	.+68     	; 0xcc60 <analogWrite+0xb6>
    cc1c:	2f 81       	ldd	r18, Y+7	; 0x07
    cc1e:	38 85       	ldd	r19, Y+8	; 0x08
    cc20:	24 30       	cpi	r18, 0x04	; 4
    cc22:	31 05       	cpc	r19, r1
    cc24:	34 f4       	brge	.+12     	; 0xcc32 <analogWrite+0x88>
    cc26:	8f 81       	ldd	r24, Y+7	; 0x07
    cc28:	98 85       	ldd	r25, Y+8	; 0x08
    cc2a:	81 30       	cpi	r24, 0x01	; 1
    cc2c:	91 05       	cpc	r25, r1
    cc2e:	61 f0       	breq	.+24     	; 0xcc48 <analogWrite+0x9e>
    cc30:	3f c0       	rjmp	.+126    	; 0xccb0 <analogWrite+0x106>
    cc32:	2f 81       	ldd	r18, Y+7	; 0x07
    cc34:	38 85       	ldd	r19, Y+8	; 0x08
    cc36:	24 30       	cpi	r18, 0x04	; 4
    cc38:	31 05       	cpc	r19, r1
    cc3a:	01 f1       	breq	.+64     	; 0xcc7c <analogWrite+0xd2>
    cc3c:	8f 81       	ldd	r24, Y+7	; 0x07
    cc3e:	98 85       	ldd	r25, Y+8	; 0x08
    cc40:	85 30       	cpi	r24, 0x05	; 5
    cc42:	91 05       	cpc	r25, r1
    cc44:	49 f1       	breq	.+82     	; 0xcc98 <analogWrite+0xee>
    cc46:	34 c0       	rjmp	.+104    	; 0xccb0 <analogWrite+0x106>
		{
			// XXX fix needed for atmega8
			#if defined(TCCR0) && defined(COM00) && !defined(__AVR_ATmega8__)
			case TIMER0A:
				// connect pwm to pin on timer 0
				sbi(TCCR0, COM00);
    cc48:	a3 e5       	ldi	r26, 0x53	; 83
    cc4a:	b0 e0       	ldi	r27, 0x00	; 0
    cc4c:	e3 e5       	ldi	r30, 0x53	; 83
    cc4e:	f0 e0       	ldi	r31, 0x00	; 0
    cc50:	80 81       	ld	r24, Z
    cc52:	80 61       	ori	r24, 0x10	; 16
    cc54:	8c 93       	st	X, r24
				OCR0 = val; // set pwm duty
    cc56:	ec e5       	ldi	r30, 0x5C	; 92
    cc58:	f0 e0       	ldi	r31, 0x00	; 0
    cc5a:	8d 81       	ldd	r24, Y+5	; 0x05
    cc5c:	80 83       	st	Z, r24
    cc5e:	36 c0       	rjmp	.+108    	; 0xcccc <analogWrite+0x122>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    cc60:	af e4       	ldi	r26, 0x4F	; 79
    cc62:	b0 e0       	ldi	r27, 0x00	; 0
    cc64:	ef e4       	ldi	r30, 0x4F	; 79
    cc66:	f0 e0       	ldi	r31, 0x00	; 0
    cc68:	80 81       	ld	r24, Z
    cc6a:	80 68       	ori	r24, 0x80	; 128
    cc6c:	8c 93       	st	X, r24
				OCR1A = val; // set pwm duty
    cc6e:	ea e4       	ldi	r30, 0x4A	; 74
    cc70:	f0 e0       	ldi	r31, 0x00	; 0
    cc72:	8d 81       	ldd	r24, Y+5	; 0x05
    cc74:	9e 81       	ldd	r25, Y+6	; 0x06
    cc76:	91 83       	std	Z+1, r25	; 0x01
    cc78:	80 83       	st	Z, r24
    cc7a:	28 c0       	rjmp	.+80     	; 0xcccc <analogWrite+0x122>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    cc7c:	af e4       	ldi	r26, 0x4F	; 79
    cc7e:	b0 e0       	ldi	r27, 0x00	; 0
    cc80:	ef e4       	ldi	r30, 0x4F	; 79
    cc82:	f0 e0       	ldi	r31, 0x00	; 0
    cc84:	80 81       	ld	r24, Z
    cc86:	80 62       	ori	r24, 0x20	; 32
    cc88:	8c 93       	st	X, r24
				OCR1B = val; // set pwm duty
    cc8a:	e8 e4       	ldi	r30, 0x48	; 72
    cc8c:	f0 e0       	ldi	r31, 0x00	; 0
    cc8e:	8d 81       	ldd	r24, Y+5	; 0x05
    cc90:	9e 81       	ldd	r25, Y+6	; 0x06
    cc92:	91 83       	std	Z+1, r25	; 0x01
    cc94:	80 83       	st	Z, r24
    cc96:	1a c0       	rjmp	.+52     	; 0xcccc <analogWrite+0x122>
			#endif

			#if defined(TCCR2) && defined(COM21)
			case TIMER2:
				// connect pwm to pin on timer 2
				sbi(TCCR2, COM21);
    cc98:	a5 e4       	ldi	r26, 0x45	; 69
    cc9a:	b0 e0       	ldi	r27, 0x00	; 0
    cc9c:	e5 e4       	ldi	r30, 0x45	; 69
    cc9e:	f0 e0       	ldi	r31, 0x00	; 0
    cca0:	80 81       	ld	r24, Z
    cca2:	80 62       	ori	r24, 0x20	; 32
    cca4:	8c 93       	st	X, r24
				OCR2 = val; // set pwm duty
    cca6:	e3 e4       	ldi	r30, 0x43	; 67
    cca8:	f0 e0       	ldi	r31, 0x00	; 0
    ccaa:	8d 81       	ldd	r24, Y+5	; 0x05
    ccac:	80 83       	st	Z, r24
    ccae:	0e c0       	rjmp	.+28     	; 0xcccc <analogWrite+0x122>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    ccb0:	8d 81       	ldd	r24, Y+5	; 0x05
    ccb2:	9e 81       	ldd	r25, Y+6	; 0x06
    ccb4:	80 38       	cpi	r24, 0x80	; 128
    ccb6:	91 05       	cpc	r25, r1
    ccb8:	2c f4       	brge	.+10     	; 0xccc4 <analogWrite+0x11a>
					digitalWrite(pin, LOW);
    ccba:	8c 81       	ldd	r24, Y+4	; 0x04
    ccbc:	60 e0       	ldi	r22, 0x00	; 0
    ccbe:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
    ccc2:	04 c0       	rjmp	.+8      	; 0xcccc <analogWrite+0x122>
				} else {
					digitalWrite(pin, HIGH);
    ccc4:	8c 81       	ldd	r24, Y+4	; 0x04
    ccc6:	61 e0       	ldi	r22, 0x01	; 1
    ccc8:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
				}
		}
	}
}
    cccc:	28 96       	adiw	r28, 0x08	; 8
    ccce:	0f b6       	in	r0, 0x3f	; 63
    ccd0:	f8 94       	cli
    ccd2:	de bf       	out	0x3e, r29	; 62
    ccd4:	0f be       	out	0x3f, r0	; 63
    ccd6:	cd bf       	out	0x3d, r28	; 61
    ccd8:	cf 91       	pop	r28
    ccda:	df 91       	pop	r29
    ccdc:	08 95       	ret

0000ccde <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    ccde:	df 93       	push	r29
    cce0:	cf 93       	push	r28
    cce2:	cd b7       	in	r28, 0x3d	; 61
    cce4:	de b7       	in	r29, 0x3e	; 62
    cce6:	69 97       	sbiw	r28, 0x19	; 25
    cce8:	0f b6       	in	r0, 0x3f	; 63
    ccea:	f8 94       	cli
    ccec:	de bf       	out	0x3e, r29	; 62
    ccee:	0f be       	out	0x3f, r0	; 63
    ccf0:	cd bf       	out	0x3d, r28	; 61
    ccf2:	88 8f       	std	Y+24, r24	; 0x18
    ccf4:	69 8f       	std	Y+25, r22	; 0x19
	uint8_t bit = digitalPinToBitMask(pin);
    ccf6:	88 8d       	ldd	r24, Y+24	; 0x18
    ccf8:	88 2f       	mov	r24, r24
    ccfa:	90 e0       	ldi	r25, 0x00	; 0
    ccfc:	89 56       	subi	r24, 0x69	; 105
    ccfe:	9f 4f       	sbci	r25, 0xFF	; 255
    cd00:	99 8b       	std	Y+17, r25	; 0x11
    cd02:	88 8b       	std	Y+16, r24	; 0x10
    cd04:	e8 89       	ldd	r30, Y+16	; 0x10
    cd06:	f9 89       	ldd	r31, Y+17	; 0x11
    cd08:	84 91       	lpm	r24, Z+
    cd0a:	8f 87       	std	Y+15, r24	; 0x0f
    cd0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    cd0e:	8f 8b       	std	Y+23, r24	; 0x17
	uint8_t port = digitalPinToPort(pin);
    cd10:	88 8d       	ldd	r24, Y+24	; 0x18
    cd12:	88 2f       	mov	r24, r24
    cd14:	90 e0       	ldi	r25, 0x00	; 0
    cd16:	8d 57       	subi	r24, 0x7D	; 125
    cd18:	9f 4f       	sbci	r25, 0xFF	; 255
    cd1a:	9e 87       	std	Y+14, r25	; 0x0e
    cd1c:	8d 87       	std	Y+13, r24	; 0x0d
    cd1e:	ed 85       	ldd	r30, Y+13	; 0x0d
    cd20:	fe 85       	ldd	r31, Y+14	; 0x0e
    cd22:	84 91       	lpm	r24, Z+
    cd24:	8c 87       	std	Y+12, r24	; 0x0c
    cd26:	8c 85       	ldd	r24, Y+12	; 0x0c
    cd28:	8e 8b       	std	Y+22, r24	; 0x16
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    cd2a:	8e 89       	ldd	r24, Y+22	; 0x16
    cd2c:	88 23       	and	r24, r24
    cd2e:	09 f4       	brne	.+2      	; 0xcd32 <pinMode+0x54>
    cd30:	7d c0       	rjmp	.+250    	; 0xce2c <pinMode+0x14e>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    cd32:	8e 89       	ldd	r24, Y+22	; 0x16
    cd34:	88 2f       	mov	r24, r24
    cd36:	90 e0       	ldi	r25, 0x00	; 0
    cd38:	88 0f       	add	r24, r24
    cd3a:	99 1f       	adc	r25, r25
    cd3c:	8b 59       	subi	r24, 0x9B	; 155
    cd3e:	9f 4f       	sbci	r25, 0xFF	; 255
    cd40:	9b 87       	std	Y+11, r25	; 0x0b
    cd42:	8a 87       	std	Y+10, r24	; 0x0a
    cd44:	8a 85       	ldd	r24, Y+10	; 0x0a
    cd46:	9b 85       	ldd	r25, Y+11	; 0x0b
    cd48:	fc 01       	movw	r30, r24
    cd4a:	85 91       	lpm	r24, Z+
    cd4c:	94 91       	lpm	r25, Z+
    cd4e:	99 87       	std	Y+9, r25	; 0x09
    cd50:	88 87       	std	Y+8, r24	; 0x08
    cd52:	fb 87       	std	Y+11, r31	; 0x0b
    cd54:	ea 87       	std	Y+10, r30	; 0x0a
    cd56:	88 85       	ldd	r24, Y+8	; 0x08
    cd58:	99 85       	ldd	r25, Y+9	; 0x09
    cd5a:	9d 8b       	std	Y+21, r25	; 0x15
    cd5c:	8c 8b       	std	Y+20, r24	; 0x14
	out = portOutputRegister(port);
    cd5e:	8e 89       	ldd	r24, Y+22	; 0x16
    cd60:	88 2f       	mov	r24, r24
    cd62:	90 e0       	ldi	r25, 0x00	; 0
    cd64:	88 0f       	add	r24, r24
    cd66:	99 1f       	adc	r25, r25
    cd68:	81 59       	subi	r24, 0x91	; 145
    cd6a:	9f 4f       	sbci	r25, 0xFF	; 255
    cd6c:	9f 83       	std	Y+7, r25	; 0x07
    cd6e:	8e 83       	std	Y+6, r24	; 0x06
    cd70:	8e 81       	ldd	r24, Y+6	; 0x06
    cd72:	9f 81       	ldd	r25, Y+7	; 0x07
    cd74:	fc 01       	movw	r30, r24
    cd76:	85 91       	lpm	r24, Z+
    cd78:	94 91       	lpm	r25, Z+
    cd7a:	9d 83       	std	Y+5, r25	; 0x05
    cd7c:	8c 83       	std	Y+4, r24	; 0x04
    cd7e:	ff 83       	std	Y+7, r31	; 0x07
    cd80:	ee 83       	std	Y+6, r30	; 0x06
    cd82:	8c 81       	ldd	r24, Y+4	; 0x04
    cd84:	9d 81       	ldd	r25, Y+5	; 0x05
    cd86:	9b 8b       	std	Y+19, r25	; 0x13
    cd88:	8a 8b       	std	Y+18, r24	; 0x12

	if (mode == INPUT) { 
    cd8a:	89 8d       	ldd	r24, Y+25	; 0x19
    cd8c:	88 23       	and	r24, r24
    cd8e:	f1 f4       	brne	.+60     	; 0xcdcc <pinMode+0xee>
		uint8_t oldSREG = SREG;
    cd90:	ef e5       	ldi	r30, 0x5F	; 95
    cd92:	f0 e0       	ldi	r31, 0x00	; 0
    cd94:	80 81       	ld	r24, Z
    cd96:	8b 83       	std	Y+3, r24	; 0x03
                cli();
    cd98:	f8 94       	cli
		*reg &= ~bit;
    cd9a:	ec 89       	ldd	r30, Y+20	; 0x14
    cd9c:	fd 89       	ldd	r31, Y+21	; 0x15
    cd9e:	80 81       	ld	r24, Z
    cda0:	98 2f       	mov	r25, r24
    cda2:	8f 89       	ldd	r24, Y+23	; 0x17
    cda4:	80 95       	com	r24
    cda6:	89 23       	and	r24, r25
    cda8:	ec 89       	ldd	r30, Y+20	; 0x14
    cdaa:	fd 89       	ldd	r31, Y+21	; 0x15
    cdac:	80 83       	st	Z, r24
		*out &= ~bit;
    cdae:	ea 89       	ldd	r30, Y+18	; 0x12
    cdb0:	fb 89       	ldd	r31, Y+19	; 0x13
    cdb2:	80 81       	ld	r24, Z
    cdb4:	98 2f       	mov	r25, r24
    cdb6:	8f 89       	ldd	r24, Y+23	; 0x17
    cdb8:	80 95       	com	r24
    cdba:	89 23       	and	r24, r25
    cdbc:	ea 89       	ldd	r30, Y+18	; 0x12
    cdbe:	fb 89       	ldd	r31, Y+19	; 0x13
    cdc0:	80 83       	st	Z, r24
		SREG = oldSREG;
    cdc2:	ef e5       	ldi	r30, 0x5F	; 95
    cdc4:	f0 e0       	ldi	r31, 0x00	; 0
    cdc6:	8b 81       	ldd	r24, Y+3	; 0x03
    cdc8:	80 83       	st	Z, r24
    cdca:	30 c0       	rjmp	.+96     	; 0xce2c <pinMode+0x14e>
	} else if (mode == INPUT_PULLUP) {
    cdcc:	89 8d       	ldd	r24, Y+25	; 0x19
    cdce:	82 30       	cpi	r24, 0x02	; 2
    cdd0:	e1 f4       	brne	.+56     	; 0xce0a <pinMode+0x12c>
		uint8_t oldSREG = SREG;
    cdd2:	ef e5       	ldi	r30, 0x5F	; 95
    cdd4:	f0 e0       	ldi	r31, 0x00	; 0
    cdd6:	80 81       	ld	r24, Z
    cdd8:	8a 83       	std	Y+2, r24	; 0x02
                cli();
    cdda:	f8 94       	cli
		*reg &= ~bit;
    cddc:	ec 89       	ldd	r30, Y+20	; 0x14
    cdde:	fd 89       	ldd	r31, Y+21	; 0x15
    cde0:	80 81       	ld	r24, Z
    cde2:	98 2f       	mov	r25, r24
    cde4:	8f 89       	ldd	r24, Y+23	; 0x17
    cde6:	80 95       	com	r24
    cde8:	89 23       	and	r24, r25
    cdea:	ec 89       	ldd	r30, Y+20	; 0x14
    cdec:	fd 89       	ldd	r31, Y+21	; 0x15
    cdee:	80 83       	st	Z, r24
		*out |= bit;
    cdf0:	ea 89       	ldd	r30, Y+18	; 0x12
    cdf2:	fb 89       	ldd	r31, Y+19	; 0x13
    cdf4:	90 81       	ld	r25, Z
    cdf6:	8f 89       	ldd	r24, Y+23	; 0x17
    cdf8:	89 2b       	or	r24, r25
    cdfa:	ea 89       	ldd	r30, Y+18	; 0x12
    cdfc:	fb 89       	ldd	r31, Y+19	; 0x13
    cdfe:	80 83       	st	Z, r24
		SREG = oldSREG;
    ce00:	ef e5       	ldi	r30, 0x5F	; 95
    ce02:	f0 e0       	ldi	r31, 0x00	; 0
    ce04:	8a 81       	ldd	r24, Y+2	; 0x02
    ce06:	80 83       	st	Z, r24
    ce08:	11 c0       	rjmp	.+34     	; 0xce2c <pinMode+0x14e>
	} else {
		uint8_t oldSREG = SREG;
    ce0a:	ef e5       	ldi	r30, 0x5F	; 95
    ce0c:	f0 e0       	ldi	r31, 0x00	; 0
    ce0e:	80 81       	ld	r24, Z
    ce10:	89 83       	std	Y+1, r24	; 0x01
                cli();
    ce12:	f8 94       	cli
		*reg |= bit;
    ce14:	ec 89       	ldd	r30, Y+20	; 0x14
    ce16:	fd 89       	ldd	r31, Y+21	; 0x15
    ce18:	90 81       	ld	r25, Z
    ce1a:	8f 89       	ldd	r24, Y+23	; 0x17
    ce1c:	89 2b       	or	r24, r25
    ce1e:	ec 89       	ldd	r30, Y+20	; 0x14
    ce20:	fd 89       	ldd	r31, Y+21	; 0x15
    ce22:	80 83       	st	Z, r24
		SREG = oldSREG;
    ce24:	ef e5       	ldi	r30, 0x5F	; 95
    ce26:	f0 e0       	ldi	r31, 0x00	; 0
    ce28:	89 81       	ldd	r24, Y+1	; 0x01
    ce2a:	80 83       	st	Z, r24
	}
}
    ce2c:	69 96       	adiw	r28, 0x19	; 25
    ce2e:	0f b6       	in	r0, 0x3f	; 63
    ce30:	f8 94       	cli
    ce32:	de bf       	out	0x3e, r29	; 62
    ce34:	0f be       	out	0x3f, r0	; 63
    ce36:	cd bf       	out	0x3d, r28	; 61
    ce38:	cf 91       	pop	r28
    ce3a:	df 91       	pop	r29
    ce3c:	08 95       	ret

0000ce3e <turnOffPWM>:
// - Added more #ifdefs, now compiles for atmega645
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
    ce3e:	df 93       	push	r29
    ce40:	cf 93       	push	r28
    ce42:	00 d0       	rcall	.+0      	; 0xce44 <turnOffPWM+0x6>
    ce44:	0f 92       	push	r0
    ce46:	cd b7       	in	r28, 0x3d	; 61
    ce48:	de b7       	in	r29, 0x3e	; 62
    ce4a:	89 83       	std	Y+1, r24	; 0x01
	switch (timer)
    ce4c:	89 81       	ldd	r24, Y+1	; 0x01
    ce4e:	28 2f       	mov	r18, r24
    ce50:	30 e0       	ldi	r19, 0x00	; 0
    ce52:	3b 83       	std	Y+3, r19	; 0x03
    ce54:	2a 83       	std	Y+2, r18	; 0x02
    ce56:	8a 81       	ldd	r24, Y+2	; 0x02
    ce58:	9b 81       	ldd	r25, Y+3	; 0x03
    ce5a:	84 30       	cpi	r24, 0x04	; 4
    ce5c:	91 05       	cpc	r25, r1
    ce5e:	91 f0       	breq	.+36     	; 0xce84 <turnOffPWM+0x46>
    ce60:	2a 81       	ldd	r18, Y+2	; 0x02
    ce62:	3b 81       	ldd	r19, Y+3	; 0x03
    ce64:	25 30       	cpi	r18, 0x05	; 5
    ce66:	31 05       	cpc	r19, r1
    ce68:	a9 f0       	breq	.+42     	; 0xce94 <turnOffPWM+0x56>
    ce6a:	8a 81       	ldd	r24, Y+2	; 0x02
    ce6c:	9b 81       	ldd	r25, Y+3	; 0x03
    ce6e:	83 30       	cpi	r24, 0x03	; 3
    ce70:	91 05       	cpc	r25, r1
    ce72:	b9 f4       	brne	.+46     	; 0xcea2 <turnOffPWM+0x64>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    ce74:	af e4       	ldi	r26, 0x4F	; 79
    ce76:	b0 e0       	ldi	r27, 0x00	; 0
    ce78:	ef e4       	ldi	r30, 0x4F	; 79
    ce7a:	f0 e0       	ldi	r31, 0x00	; 0
    ce7c:	80 81       	ld	r24, Z
    ce7e:	8f 77       	andi	r24, 0x7F	; 127
    ce80:	8c 93       	st	X, r24
    ce82:	0f c0       	rjmp	.+30     	; 0xcea2 <turnOffPWM+0x64>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    ce84:	af e4       	ldi	r26, 0x4F	; 79
    ce86:	b0 e0       	ldi	r27, 0x00	; 0
    ce88:	ef e4       	ldi	r30, 0x4F	; 79
    ce8a:	f0 e0       	ldi	r31, 0x00	; 0
    ce8c:	80 81       	ld	r24, Z
    ce8e:	8f 7d       	andi	r24, 0xDF	; 223
    ce90:	8c 93       	st	X, r24
    ce92:	07 c0       	rjmp	.+14     	; 0xcea2 <turnOffPWM+0x64>
		#endif
		
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
    ce94:	a5 e4       	ldi	r26, 0x45	; 69
    ce96:	b0 e0       	ldi	r27, 0x00	; 0
    ce98:	e5 e4       	ldi	r30, 0x45	; 69
    ce9a:	f0 e0       	ldi	r31, 0x00	; 0
    ce9c:	80 81       	ld	r24, Z
    ce9e:	8f 7d       	andi	r24, 0xDF	; 223
    cea0:	8c 93       	st	X, r24
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
    cea2:	0f 90       	pop	r0
    cea4:	0f 90       	pop	r0
    cea6:	0f 90       	pop	r0
    cea8:	cf 91       	pop	r28
    ceaa:	df 91       	pop	r29
    ceac:	08 95       	ret

0000ceae <digitalWrite>:

void digitalWrite(uint8_t pin, uint8_t val)
{
    ceae:	df 93       	push	r29
    ceb0:	cf 93       	push	r28
    ceb2:	cd b7       	in	r28, 0x3d	; 61
    ceb4:	de b7       	in	r29, 0x3e	; 62
    ceb6:	65 97       	sbiw	r28, 0x15	; 21
    ceb8:	0f b6       	in	r0, 0x3f	; 63
    ceba:	f8 94       	cli
    cebc:	de bf       	out	0x3e, r29	; 62
    cebe:	0f be       	out	0x3f, r0	; 63
    cec0:	cd bf       	out	0x3d, r28	; 61
    cec2:	8c 8b       	std	Y+20, r24	; 0x14
    cec4:	6d 8b       	std	Y+21, r22	; 0x15
	uint8_t timer = digitalPinToTimer(pin);
    cec6:	8c 89       	ldd	r24, Y+20	; 0x14
    cec8:	88 2f       	mov	r24, r24
    ceca:	90 e0       	ldi	r25, 0x00	; 0
    cecc:	85 55       	subi	r24, 0x55	; 85
    cece:	9f 4f       	sbci	r25, 0xFF	; 255
    ced0:	9d 87       	std	Y+13, r25	; 0x0d
    ced2:	8c 87       	std	Y+12, r24	; 0x0c
    ced4:	ec 85       	ldd	r30, Y+12	; 0x0c
    ced6:	fd 85       	ldd	r31, Y+13	; 0x0d
    ced8:	84 91       	lpm	r24, Z+
    ceda:	8b 87       	std	Y+11, r24	; 0x0b
    cedc:	8b 85       	ldd	r24, Y+11	; 0x0b
    cede:	8b 8b       	std	Y+19, r24	; 0x13
	uint8_t bit = digitalPinToBitMask(pin);
    cee0:	8c 89       	ldd	r24, Y+20	; 0x14
    cee2:	88 2f       	mov	r24, r24
    cee4:	90 e0       	ldi	r25, 0x00	; 0
    cee6:	89 56       	subi	r24, 0x69	; 105
    cee8:	9f 4f       	sbci	r25, 0xFF	; 255
    ceea:	9a 87       	std	Y+10, r25	; 0x0a
    ceec:	89 87       	std	Y+9, r24	; 0x09
    ceee:	e9 85       	ldd	r30, Y+9	; 0x09
    cef0:	fa 85       	ldd	r31, Y+10	; 0x0a
    cef2:	84 91       	lpm	r24, Z+
    cef4:	88 87       	std	Y+8, r24	; 0x08
    cef6:	88 85       	ldd	r24, Y+8	; 0x08
    cef8:	8a 8b       	std	Y+18, r24	; 0x12
	uint8_t port = digitalPinToPort(pin);
    cefa:	8c 89       	ldd	r24, Y+20	; 0x14
    cefc:	88 2f       	mov	r24, r24
    cefe:	90 e0       	ldi	r25, 0x00	; 0
    cf00:	8d 57       	subi	r24, 0x7D	; 125
    cf02:	9f 4f       	sbci	r25, 0xFF	; 255
    cf04:	9f 83       	std	Y+7, r25	; 0x07
    cf06:	8e 83       	std	Y+6, r24	; 0x06
    cf08:	ee 81       	ldd	r30, Y+6	; 0x06
    cf0a:	ff 81       	ldd	r31, Y+7	; 0x07
    cf0c:	84 91       	lpm	r24, Z+
    cf0e:	8d 83       	std	Y+5, r24	; 0x05
    cf10:	8d 81       	ldd	r24, Y+5	; 0x05
    cf12:	89 8b       	std	Y+17, r24	; 0x11
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    cf14:	89 89       	ldd	r24, Y+17	; 0x11
    cf16:	88 23       	and	r24, r24
    cf18:	09 f4       	brne	.+2      	; 0xcf1c <digitalWrite+0x6e>
    cf1a:	3b c0       	rjmp	.+118    	; 0xcf92 <digitalWrite+0xe4>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    cf1c:	8b 89       	ldd	r24, Y+19	; 0x13
    cf1e:	88 23       	and	r24, r24
    cf20:	19 f0       	breq	.+6      	; 0xcf28 <digitalWrite+0x7a>
    cf22:	8b 89       	ldd	r24, Y+19	; 0x13
    cf24:	0e 94 1f 67 	call	0xce3e	; 0xce3e <turnOffPWM>

	out = portOutputRegister(port);
    cf28:	89 89       	ldd	r24, Y+17	; 0x11
    cf2a:	88 2f       	mov	r24, r24
    cf2c:	90 e0       	ldi	r25, 0x00	; 0
    cf2e:	88 0f       	add	r24, r24
    cf30:	99 1f       	adc	r25, r25
    cf32:	81 59       	subi	r24, 0x91	; 145
    cf34:	9f 4f       	sbci	r25, 0xFF	; 255
    cf36:	9c 83       	std	Y+4, r25	; 0x04
    cf38:	8b 83       	std	Y+3, r24	; 0x03
    cf3a:	8b 81       	ldd	r24, Y+3	; 0x03
    cf3c:	9c 81       	ldd	r25, Y+4	; 0x04
    cf3e:	fc 01       	movw	r30, r24
    cf40:	85 91       	lpm	r24, Z+
    cf42:	94 91       	lpm	r25, Z+
    cf44:	9a 83       	std	Y+2, r25	; 0x02
    cf46:	89 83       	std	Y+1, r24	; 0x01
    cf48:	fc 83       	std	Y+4, r31	; 0x04
    cf4a:	eb 83       	std	Y+3, r30	; 0x03
    cf4c:	89 81       	ldd	r24, Y+1	; 0x01
    cf4e:	9a 81       	ldd	r25, Y+2	; 0x02
    cf50:	98 8b       	std	Y+16, r25	; 0x10
    cf52:	8f 87       	std	Y+15, r24	; 0x0f

	uint8_t oldSREG = SREG;
    cf54:	ef e5       	ldi	r30, 0x5F	; 95
    cf56:	f0 e0       	ldi	r31, 0x00	; 0
    cf58:	80 81       	ld	r24, Z
    cf5a:	8e 87       	std	Y+14, r24	; 0x0e
	cli();
    cf5c:	f8 94       	cli

	if (val == LOW) {
    cf5e:	8d 89       	ldd	r24, Y+21	; 0x15
    cf60:	88 23       	and	r24, r24
    cf62:	59 f4       	brne	.+22     	; 0xcf7a <digitalWrite+0xcc>
		*out &= ~bit;
    cf64:	ef 85       	ldd	r30, Y+15	; 0x0f
    cf66:	f8 89       	ldd	r31, Y+16	; 0x10
    cf68:	80 81       	ld	r24, Z
    cf6a:	98 2f       	mov	r25, r24
    cf6c:	8a 89       	ldd	r24, Y+18	; 0x12
    cf6e:	80 95       	com	r24
    cf70:	89 23       	and	r24, r25
    cf72:	ef 85       	ldd	r30, Y+15	; 0x0f
    cf74:	f8 89       	ldd	r31, Y+16	; 0x10
    cf76:	80 83       	st	Z, r24
    cf78:	08 c0       	rjmp	.+16     	; 0xcf8a <digitalWrite+0xdc>
	} else {
		*out |= bit;
    cf7a:	ef 85       	ldd	r30, Y+15	; 0x0f
    cf7c:	f8 89       	ldd	r31, Y+16	; 0x10
    cf7e:	90 81       	ld	r25, Z
    cf80:	8a 89       	ldd	r24, Y+18	; 0x12
    cf82:	89 2b       	or	r24, r25
    cf84:	ef 85       	ldd	r30, Y+15	; 0x0f
    cf86:	f8 89       	ldd	r31, Y+16	; 0x10
    cf88:	80 83       	st	Z, r24
	}

	SREG = oldSREG;
    cf8a:	ef e5       	ldi	r30, 0x5F	; 95
    cf8c:	f0 e0       	ldi	r31, 0x00	; 0
    cf8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    cf90:	80 83       	st	Z, r24
}
    cf92:	65 96       	adiw	r28, 0x15	; 21
    cf94:	0f b6       	in	r0, 0x3f	; 63
    cf96:	f8 94       	cli
    cf98:	de bf       	out	0x3e, r29	; 62
    cf9a:	0f be       	out	0x3f, r0	; 63
    cf9c:	cd bf       	out	0x3d, r28	; 61
    cf9e:	cf 91       	pop	r28
    cfa0:	df 91       	pop	r29
    cfa2:	08 95       	ret

0000cfa4 <digitalRead>:

int digitalRead(uint8_t pin)
{
    cfa4:	df 93       	push	r29
    cfa6:	cf 93       	push	r28
    cfa8:	cd b7       	in	r28, 0x3d	; 61
    cfaa:	de b7       	in	r29, 0x3e	; 62
    cfac:	63 97       	sbiw	r28, 0x13	; 19
    cfae:	0f b6       	in	r0, 0x3f	; 63
    cfb0:	f8 94       	cli
    cfb2:	de bf       	out	0x3e, r29	; 62
    cfb4:	0f be       	out	0x3f, r0	; 63
    cfb6:	cd bf       	out	0x3d, r28	; 61
    cfb8:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t timer = digitalPinToTimer(pin);
    cfba:	89 89       	ldd	r24, Y+17	; 0x11
    cfbc:	88 2f       	mov	r24, r24
    cfbe:	90 e0       	ldi	r25, 0x00	; 0
    cfc0:	85 55       	subi	r24, 0x55	; 85
    cfc2:	9f 4f       	sbci	r25, 0xFF	; 255
    cfc4:	9d 87       	std	Y+13, r25	; 0x0d
    cfc6:	8c 87       	std	Y+12, r24	; 0x0c
    cfc8:	ec 85       	ldd	r30, Y+12	; 0x0c
    cfca:	fd 85       	ldd	r31, Y+13	; 0x0d
    cfcc:	84 91       	lpm	r24, Z+
    cfce:	8b 87       	std	Y+11, r24	; 0x0b
    cfd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    cfd2:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t bit = digitalPinToBitMask(pin);
    cfd4:	89 89       	ldd	r24, Y+17	; 0x11
    cfd6:	88 2f       	mov	r24, r24
    cfd8:	90 e0       	ldi	r25, 0x00	; 0
    cfda:	89 56       	subi	r24, 0x69	; 105
    cfdc:	9f 4f       	sbci	r25, 0xFF	; 255
    cfde:	9a 87       	std	Y+10, r25	; 0x0a
    cfe0:	89 87       	std	Y+9, r24	; 0x09
    cfe2:	e9 85       	ldd	r30, Y+9	; 0x09
    cfe4:	fa 85       	ldd	r31, Y+10	; 0x0a
    cfe6:	84 91       	lpm	r24, Z+
    cfe8:	88 87       	std	Y+8, r24	; 0x08
    cfea:	88 85       	ldd	r24, Y+8	; 0x08
    cfec:	8f 87       	std	Y+15, r24	; 0x0f
	uint8_t port = digitalPinToPort(pin);
    cfee:	89 89       	ldd	r24, Y+17	; 0x11
    cff0:	88 2f       	mov	r24, r24
    cff2:	90 e0       	ldi	r25, 0x00	; 0
    cff4:	8d 57       	subi	r24, 0x7D	; 125
    cff6:	9f 4f       	sbci	r25, 0xFF	; 255
    cff8:	9f 83       	std	Y+7, r25	; 0x07
    cffa:	8e 83       	std	Y+6, r24	; 0x06
    cffc:	ee 81       	ldd	r30, Y+6	; 0x06
    cffe:	ff 81       	ldd	r31, Y+7	; 0x07
    d000:	84 91       	lpm	r24, Z+
    d002:	8d 83       	std	Y+5, r24	; 0x05
    d004:	8d 81       	ldd	r24, Y+5	; 0x05
    d006:	8e 87       	std	Y+14, r24	; 0x0e

	if (port == NOT_A_PIN) return LOW;
    d008:	8e 85       	ldd	r24, Y+14	; 0x0e
    d00a:	88 23       	and	r24, r24
    d00c:	19 f4       	brne	.+6      	; 0xd014 <digitalRead+0x70>
    d00e:	1b 8a       	std	Y+19, r1	; 0x13
    d010:	1a 8a       	std	Y+18, r1	; 0x12
    d012:	27 c0       	rjmp	.+78     	; 0xd062 <digitalRead+0xbe>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    d014:	88 89       	ldd	r24, Y+16	; 0x10
    d016:	88 23       	and	r24, r24
    d018:	19 f0       	breq	.+6      	; 0xd020 <digitalRead+0x7c>
    d01a:	88 89       	ldd	r24, Y+16	; 0x10
    d01c:	0e 94 1f 67 	call	0xce3e	; 0xce3e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    d020:	8e 85       	ldd	r24, Y+14	; 0x0e
    d022:	88 2f       	mov	r24, r24
    d024:	90 e0       	ldi	r25, 0x00	; 0
    d026:	88 0f       	add	r24, r24
    d028:	99 1f       	adc	r25, r25
    d02a:	87 58       	subi	r24, 0x87	; 135
    d02c:	9f 4f       	sbci	r25, 0xFF	; 255
    d02e:	9c 83       	std	Y+4, r25	; 0x04
    d030:	8b 83       	std	Y+3, r24	; 0x03
    d032:	8b 81       	ldd	r24, Y+3	; 0x03
    d034:	9c 81       	ldd	r25, Y+4	; 0x04
    d036:	fc 01       	movw	r30, r24
    d038:	85 91       	lpm	r24, Z+
    d03a:	94 91       	lpm	r25, Z+
    d03c:	9a 83       	std	Y+2, r25	; 0x02
    d03e:	89 83       	std	Y+1, r24	; 0x01
    d040:	fc 83       	std	Y+4, r31	; 0x04
    d042:	eb 83       	std	Y+3, r30	; 0x03
    d044:	89 81       	ldd	r24, Y+1	; 0x01
    d046:	9a 81       	ldd	r25, Y+2	; 0x02
    d048:	fc 01       	movw	r30, r24
    d04a:	90 81       	ld	r25, Z
    d04c:	8f 85       	ldd	r24, Y+15	; 0x0f
    d04e:	89 23       	and	r24, r25
    d050:	88 23       	and	r24, r24
    d052:	29 f0       	breq	.+10     	; 0xd05e <digitalRead+0xba>
    d054:	81 e0       	ldi	r24, 0x01	; 1
    d056:	90 e0       	ldi	r25, 0x00	; 0
    d058:	9b 8b       	std	Y+19, r25	; 0x13
    d05a:	8a 8b       	std	Y+18, r24	; 0x12
    d05c:	02 c0       	rjmp	.+4      	; 0xd062 <digitalRead+0xbe>
	return LOW;
    d05e:	1b 8a       	std	Y+19, r1	; 0x13
    d060:	1a 8a       	std	Y+18, r1	; 0x12
    d062:	8a 89       	ldd	r24, Y+18	; 0x12
    d064:	9b 89       	ldd	r25, Y+19	; 0x13
}
    d066:	63 96       	adiw	r28, 0x13	; 19
    d068:	0f b6       	in	r0, 0x3f	; 63
    d06a:	f8 94       	cli
    d06c:	de bf       	out	0x3e, r29	; 62
    d06e:	0f be       	out	0x3f, r0	; 63
    d070:	cd bf       	out	0x3d, r28	; 61
    d072:	cf 91       	pop	r28
    d074:	df 91       	pop	r29
    d076:	08 95       	ret

0000d078 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
    d078:	df 93       	push	r29
    d07a:	cf 93       	push	r28
    d07c:	cd b7       	in	r28, 0x3d	; 61
    d07e:	de b7       	in	r29, 0x3e	; 62
    d080:	af 97       	sbiw	r28, 0x2f	; 47
    d082:	0f b6       	in	r0, 0x3f	; 63
    d084:	f8 94       	cli
    d086:	de bf       	out	0x3e, r29	; 62
    d088:	0f be       	out	0x3f, r0	; 63
    d08a:	cd bf       	out	0x3d, r28	; 61
    d08c:	8a a3       	std	Y+34, r24	; 0x22
    d08e:	6b a3       	std	Y+35, r22	; 0x23
    d090:	2c a3       	std	Y+36, r18	; 0x24
    d092:	3d a3       	std	Y+37, r19	; 0x25
    d094:	4e a3       	std	Y+38, r20	; 0x26
    d096:	5f a3       	std	Y+39, r21	; 0x27
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
    d098:	8a a1       	ldd	r24, Y+34	; 0x22
    d09a:	88 2f       	mov	r24, r24
    d09c:	90 e0       	ldi	r25, 0x00	; 0
    d09e:	89 56       	subi	r24, 0x69	; 105
    d0a0:	9f 4f       	sbci	r25, 0xFF	; 255
    d0a2:	9a 8b       	std	Y+18, r25	; 0x12
    d0a4:	89 8b       	std	Y+17, r24	; 0x11
    d0a6:	e9 89       	ldd	r30, Y+17	; 0x11
    d0a8:	fa 89       	ldd	r31, Y+18	; 0x12
    d0aa:	84 91       	lpm	r24, Z+
    d0ac:	88 8b       	std	Y+16, r24	; 0x10
    d0ae:	88 89       	ldd	r24, Y+16	; 0x10
    d0b0:	89 a3       	std	Y+33, r24	; 0x21
	uint8_t port = digitalPinToPort(pin);
    d0b2:	8a a1       	ldd	r24, Y+34	; 0x22
    d0b4:	88 2f       	mov	r24, r24
    d0b6:	90 e0       	ldi	r25, 0x00	; 0
    d0b8:	8d 57       	subi	r24, 0x7D	; 125
    d0ba:	9f 4f       	sbci	r25, 0xFF	; 255
    d0bc:	9f 87       	std	Y+15, r25	; 0x0f
    d0be:	8e 87       	std	Y+14, r24	; 0x0e
    d0c0:	ee 85       	ldd	r30, Y+14	; 0x0e
    d0c2:	ff 85       	ldd	r31, Y+15	; 0x0f
    d0c4:	84 91       	lpm	r24, Z+
    d0c6:	8d 87       	std	Y+13, r24	; 0x0d
    d0c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    d0ca:	88 a3       	std	Y+32, r24	; 0x20
	uint8_t stateMask = (state ? bit : 0);
    d0cc:	8b a1       	ldd	r24, Y+35	; 0x23
    d0ce:	88 23       	and	r24, r24
    d0d0:	19 f0       	breq	.+6      	; 0xd0d8 <pulseIn+0x60>
    d0d2:	29 a1       	ldd	r18, Y+33	; 0x21
    d0d4:	2f a7       	std	Y+47, r18	; 0x2f
    d0d6:	01 c0       	rjmp	.+2      	; 0xd0da <pulseIn+0x62>
    d0d8:	1f a6       	std	Y+47, r1	; 0x2f
    d0da:	3f a5       	ldd	r19, Y+47	; 0x2f
    d0dc:	3f 8f       	std	Y+31, r19	; 0x1f
	unsigned long width = 0; // keep initialization out of time critical area
    d0de:	1b 8e       	std	Y+27, r1	; 0x1b
    d0e0:	1c 8e       	std	Y+28, r1	; 0x1c
    d0e2:	1d 8e       	std	Y+29, r1	; 0x1d
    d0e4:	1e 8e       	std	Y+30, r1	; 0x1e
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
    d0e6:	1f 8a       	std	Y+23, r1	; 0x17
    d0e8:	18 8e       	std	Y+24, r1	; 0x18
    d0ea:	19 8e       	std	Y+25, r1	; 0x19
    d0ec:	1a 8e       	std	Y+26, r1	; 0x1a
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
    d0ee:	8c a1       	ldd	r24, Y+36	; 0x24
    d0f0:	9d a1       	ldd	r25, Y+37	; 0x25
    d0f2:	ae a1       	ldd	r26, Y+38	; 0x26
    d0f4:	bf a1       	ldd	r27, Y+39	; 0x27
    d0f6:	68 94       	set
    d0f8:	13 f8       	bld	r1, 3
    d0fa:	b6 95       	lsr	r27
    d0fc:	a7 95       	ror	r26
    d0fe:	97 95       	ror	r25
    d100:	87 95       	ror	r24
    d102:	16 94       	lsr	r1
    d104:	d1 f7       	brne	.-12     	; 0xd0fa <pulseIn+0x82>
    d106:	8b 8b       	std	Y+19, r24	; 0x13
    d108:	9c 8b       	std	Y+20, r25	; 0x14
    d10a:	ad 8b       	std	Y+21, r26	; 0x15
    d10c:	be 8b       	std	Y+22, r27	; 0x16
    d10e:	23 c0       	rjmp	.+70     	; 0xd156 <pulseIn+0xde>
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
    d110:	1e a6       	std	Y+46, r1	; 0x2e
    d112:	2f 89       	ldd	r18, Y+23	; 0x17
    d114:	38 8d       	ldd	r19, Y+24	; 0x18
    d116:	49 8d       	ldd	r20, Y+25	; 0x19
    d118:	5a 8d       	ldd	r21, Y+26	; 0x1a
    d11a:	8b 89       	ldd	r24, Y+19	; 0x13
    d11c:	9c 89       	ldd	r25, Y+20	; 0x14
    d11e:	ad 89       	ldd	r26, Y+21	; 0x15
    d120:	be 89       	ldd	r27, Y+22	; 0x16
    d122:	28 17       	cp	r18, r24
    d124:	39 07       	cpc	r19, r25
    d126:	4a 07       	cpc	r20, r26
    d128:	5b 07       	cpc	r21, r27
    d12a:	11 f4       	brne	.+4      	; 0xd130 <pulseIn+0xb8>
    d12c:	41 e0       	ldi	r20, 0x01	; 1
    d12e:	4e a7       	std	Y+46, r20	; 0x2e
    d130:	8f 89       	ldd	r24, Y+23	; 0x17
    d132:	98 8d       	ldd	r25, Y+24	; 0x18
    d134:	a9 8d       	ldd	r26, Y+25	; 0x19
    d136:	ba 8d       	ldd	r27, Y+26	; 0x1a
    d138:	01 96       	adiw	r24, 0x01	; 1
    d13a:	a1 1d       	adc	r26, r1
    d13c:	b1 1d       	adc	r27, r1
    d13e:	8f 8b       	std	Y+23, r24	; 0x17
    d140:	98 8f       	std	Y+24, r25	; 0x18
    d142:	a9 8f       	std	Y+25, r26	; 0x19
    d144:	ba 8f       	std	Y+26, r27	; 0x1a
    d146:	5e a5       	ldd	r21, Y+46	; 0x2e
    d148:	55 23       	and	r21, r21
    d14a:	29 f0       	breq	.+10     	; 0xd156 <pulseIn+0xde>
			return 0;
    d14c:	1a a6       	std	Y+42, r1	; 0x2a
    d14e:	1b a6       	std	Y+43, r1	; 0x2b
    d150:	1c a6       	std	Y+44, r1	; 0x2c
    d152:	1d a6       	std	Y+45, r1	; 0x2d
    d154:	bf c0       	rjmp	.+382    	; 0xd2d4 <pulseIn+0x25c>
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
    d156:	88 a1       	ldd	r24, Y+32	; 0x20
    d158:	88 2f       	mov	r24, r24
    d15a:	90 e0       	ldi	r25, 0x00	; 0
    d15c:	88 0f       	add	r24, r24
    d15e:	99 1f       	adc	r25, r25
    d160:	87 58       	subi	r24, 0x87	; 135
    d162:	9f 4f       	sbci	r25, 0xFF	; 255
    d164:	9c 87       	std	Y+12, r25	; 0x0c
    d166:	8b 87       	std	Y+11, r24	; 0x0b
    d168:	8b 85       	ldd	r24, Y+11	; 0x0b
    d16a:	9c 85       	ldd	r25, Y+12	; 0x0c
    d16c:	fc 01       	movw	r30, r24
    d16e:	85 91       	lpm	r24, Z+
    d170:	94 91       	lpm	r25, Z+
    d172:	9a 87       	std	Y+10, r25	; 0x0a
    d174:	89 87       	std	Y+9, r24	; 0x09
    d176:	fc 87       	std	Y+12, r31	; 0x0c
    d178:	eb 87       	std	Y+11, r30	; 0x0b
    d17a:	89 85       	ldd	r24, Y+9	; 0x09
    d17c:	9a 85       	ldd	r25, Y+10	; 0x0a
    d17e:	fc 01       	movw	r30, r24
    d180:	90 81       	ld	r25, Z
    d182:	89 a1       	ldd	r24, Y+33	; 0x21
    d184:	98 23       	and	r25, r24
    d186:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d188:	98 17       	cp	r25, r24
    d18a:	09 f4       	brne	.+2      	; 0xd18e <pulseIn+0x116>
    d18c:	c1 cf       	rjmp	.-126    	; 0xd110 <pulseIn+0x98>
    d18e:	23 c0       	rjmp	.+70     	; 0xd1d6 <pulseIn+0x15e>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
    d190:	19 a6       	std	Y+41, r1	; 0x29
    d192:	2f 89       	ldd	r18, Y+23	; 0x17
    d194:	38 8d       	ldd	r19, Y+24	; 0x18
    d196:	49 8d       	ldd	r20, Y+25	; 0x19
    d198:	5a 8d       	ldd	r21, Y+26	; 0x1a
    d19a:	8b 89       	ldd	r24, Y+19	; 0x13
    d19c:	9c 89       	ldd	r25, Y+20	; 0x14
    d19e:	ad 89       	ldd	r26, Y+21	; 0x15
    d1a0:	be 89       	ldd	r27, Y+22	; 0x16
    d1a2:	28 17       	cp	r18, r24
    d1a4:	39 07       	cpc	r19, r25
    d1a6:	4a 07       	cpc	r20, r26
    d1a8:	5b 07       	cpc	r21, r27
    d1aa:	11 f4       	brne	.+4      	; 0xd1b0 <pulseIn+0x138>
    d1ac:	81 e0       	ldi	r24, 0x01	; 1
    d1ae:	89 a7       	std	Y+41, r24	; 0x29
    d1b0:	8f 89       	ldd	r24, Y+23	; 0x17
    d1b2:	98 8d       	ldd	r25, Y+24	; 0x18
    d1b4:	a9 8d       	ldd	r26, Y+25	; 0x19
    d1b6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    d1b8:	01 96       	adiw	r24, 0x01	; 1
    d1ba:	a1 1d       	adc	r26, r1
    d1bc:	b1 1d       	adc	r27, r1
    d1be:	8f 8b       	std	Y+23, r24	; 0x17
    d1c0:	98 8f       	std	Y+24, r25	; 0x18
    d1c2:	a9 8f       	std	Y+25, r26	; 0x19
    d1c4:	ba 8f       	std	Y+26, r27	; 0x1a
    d1c6:	29 a5       	ldd	r18, Y+41	; 0x29
    d1c8:	22 23       	and	r18, r18
    d1ca:	29 f0       	breq	.+10     	; 0xd1d6 <pulseIn+0x15e>
			return 0;
    d1cc:	1a a6       	std	Y+42, r1	; 0x2a
    d1ce:	1b a6       	std	Y+43, r1	; 0x2b
    d1d0:	1c a6       	std	Y+44, r1	; 0x2c
    d1d2:	1d a6       	std	Y+45, r1	; 0x2d
    d1d4:	7f c0       	rjmp	.+254    	; 0xd2d4 <pulseIn+0x25c>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
    d1d6:	88 a1       	ldd	r24, Y+32	; 0x20
    d1d8:	88 2f       	mov	r24, r24
    d1da:	90 e0       	ldi	r25, 0x00	; 0
    d1dc:	88 0f       	add	r24, r24
    d1de:	99 1f       	adc	r25, r25
    d1e0:	87 58       	subi	r24, 0x87	; 135
    d1e2:	9f 4f       	sbci	r25, 0xFF	; 255
    d1e4:	98 87       	std	Y+8, r25	; 0x08
    d1e6:	8f 83       	std	Y+7, r24	; 0x07
    d1e8:	8f 81       	ldd	r24, Y+7	; 0x07
    d1ea:	98 85       	ldd	r25, Y+8	; 0x08
    d1ec:	fc 01       	movw	r30, r24
    d1ee:	85 91       	lpm	r24, Z+
    d1f0:	94 91       	lpm	r25, Z+
    d1f2:	9e 83       	std	Y+6, r25	; 0x06
    d1f4:	8d 83       	std	Y+5, r24	; 0x05
    d1f6:	f8 87       	std	Y+8, r31	; 0x08
    d1f8:	ef 83       	std	Y+7, r30	; 0x07
    d1fa:	8d 81       	ldd	r24, Y+5	; 0x05
    d1fc:	9e 81       	ldd	r25, Y+6	; 0x06
    d1fe:	fc 01       	movw	r30, r24
    d200:	90 81       	ld	r25, Z
    d202:	89 a1       	ldd	r24, Y+33	; 0x21
    d204:	98 23       	and	r25, r24
    d206:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d208:	98 17       	cp	r25, r24
    d20a:	09 f0       	breq	.+2      	; 0xd20e <pulseIn+0x196>
    d20c:	c1 cf       	rjmp	.-126    	; 0xd190 <pulseIn+0x118>
    d20e:	2e c0       	rjmp	.+92     	; 0xd26c <pulseIn+0x1f4>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
    d210:	18 a6       	std	Y+40, r1	; 0x28
    d212:	2f 89       	ldd	r18, Y+23	; 0x17
    d214:	38 8d       	ldd	r19, Y+24	; 0x18
    d216:	49 8d       	ldd	r20, Y+25	; 0x19
    d218:	5a 8d       	ldd	r21, Y+26	; 0x1a
    d21a:	8b 89       	ldd	r24, Y+19	; 0x13
    d21c:	9c 89       	ldd	r25, Y+20	; 0x14
    d21e:	ad 89       	ldd	r26, Y+21	; 0x15
    d220:	be 89       	ldd	r27, Y+22	; 0x16
    d222:	28 17       	cp	r18, r24
    d224:	39 07       	cpc	r19, r25
    d226:	4a 07       	cpc	r20, r26
    d228:	5b 07       	cpc	r21, r27
    d22a:	11 f4       	brne	.+4      	; 0xd230 <pulseIn+0x1b8>
    d22c:	31 e0       	ldi	r19, 0x01	; 1
    d22e:	38 a7       	std	Y+40, r19	; 0x28
    d230:	8f 89       	ldd	r24, Y+23	; 0x17
    d232:	98 8d       	ldd	r25, Y+24	; 0x18
    d234:	a9 8d       	ldd	r26, Y+25	; 0x19
    d236:	ba 8d       	ldd	r27, Y+26	; 0x1a
    d238:	01 96       	adiw	r24, 0x01	; 1
    d23a:	a1 1d       	adc	r26, r1
    d23c:	b1 1d       	adc	r27, r1
    d23e:	8f 8b       	std	Y+23, r24	; 0x17
    d240:	98 8f       	std	Y+24, r25	; 0x18
    d242:	a9 8f       	std	Y+25, r26	; 0x19
    d244:	ba 8f       	std	Y+26, r27	; 0x1a
    d246:	48 a5       	ldd	r20, Y+40	; 0x28
    d248:	44 23       	and	r20, r20
    d24a:	29 f0       	breq	.+10     	; 0xd256 <pulseIn+0x1de>
			return 0;
    d24c:	1a a6       	std	Y+42, r1	; 0x2a
    d24e:	1b a6       	std	Y+43, r1	; 0x2b
    d250:	1c a6       	std	Y+44, r1	; 0x2c
    d252:	1d a6       	std	Y+45, r1	; 0x2d
    d254:	3f c0       	rjmp	.+126    	; 0xd2d4 <pulseIn+0x25c>
		width++;
    d256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d25a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    d25c:	be 8d       	ldd	r27, Y+30	; 0x1e
    d25e:	01 96       	adiw	r24, 0x01	; 1
    d260:	a1 1d       	adc	r26, r1
    d262:	b1 1d       	adc	r27, r1
    d264:	8b 8f       	std	Y+27, r24	; 0x1b
    d266:	9c 8f       	std	Y+28, r25	; 0x1c
    d268:	ad 8f       	std	Y+29, r26	; 0x1d
    d26a:	be 8f       	std	Y+30, r27	; 0x1e
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
    d26c:	88 a1       	ldd	r24, Y+32	; 0x20
    d26e:	88 2f       	mov	r24, r24
    d270:	90 e0       	ldi	r25, 0x00	; 0
    d272:	88 0f       	add	r24, r24
    d274:	99 1f       	adc	r25, r25
    d276:	87 58       	subi	r24, 0x87	; 135
    d278:	9f 4f       	sbci	r25, 0xFF	; 255
    d27a:	9c 83       	std	Y+4, r25	; 0x04
    d27c:	8b 83       	std	Y+3, r24	; 0x03
    d27e:	8b 81       	ldd	r24, Y+3	; 0x03
    d280:	9c 81       	ldd	r25, Y+4	; 0x04
    d282:	fc 01       	movw	r30, r24
    d284:	85 91       	lpm	r24, Z+
    d286:	94 91       	lpm	r25, Z+
    d288:	9a 83       	std	Y+2, r25	; 0x02
    d28a:	89 83       	std	Y+1, r24	; 0x01
    d28c:	fc 83       	std	Y+4, r31	; 0x04
    d28e:	eb 83       	std	Y+3, r30	; 0x03
    d290:	89 81       	ldd	r24, Y+1	; 0x01
    d292:	9a 81       	ldd	r25, Y+2	; 0x02
    d294:	fc 01       	movw	r30, r24
    d296:	90 81       	ld	r25, Z
    d298:	89 a1       	ldd	r24, Y+33	; 0x21
    d29a:	98 23       	and	r25, r24
    d29c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d29e:	98 17       	cp	r25, r24
    d2a0:	09 f4       	brne	.+2      	; 0xd2a4 <pulseIn+0x22c>
    d2a2:	b6 cf       	rjmp	.-148    	; 0xd210 <pulseIn+0x198>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
    d2a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d2a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d2a8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    d2aa:	be 8d       	ldd	r27, Y+30	; 0x1e
    d2ac:	25 e1       	ldi	r18, 0x15	; 21
    d2ae:	30 e0       	ldi	r19, 0x00	; 0
    d2b0:	40 e0       	ldi	r20, 0x00	; 0
    d2b2:	50 e0       	ldi	r21, 0x00	; 0
    d2b4:	bc 01       	movw	r22, r24
    d2b6:	cd 01       	movw	r24, r26
    d2b8:	0e 94 b8 81 	call	0x10370	; 0x10370 <__mulsi3>
    d2bc:	dc 01       	movw	r26, r24
    d2be:	cb 01       	movw	r24, r22
    d2c0:	9c 01       	movw	r18, r24
    d2c2:	ad 01       	movw	r20, r26
    d2c4:	20 5f       	subi	r18, 0xF0	; 240
    d2c6:	3f 4f       	sbci	r19, 0xFF	; 255
    d2c8:	4f 4f       	sbci	r20, 0xFF	; 255
    d2ca:	5f 4f       	sbci	r21, 0xFF	; 255
    d2cc:	2a a7       	std	Y+42, r18	; 0x2a
    d2ce:	3b a7       	std	Y+43, r19	; 0x2b
    d2d0:	4c a7       	std	Y+44, r20	; 0x2c
    d2d2:	5d a7       	std	Y+45, r21	; 0x2d
    d2d4:	8a a5       	ldd	r24, Y+42	; 0x2a
    d2d6:	9b a5       	ldd	r25, Y+43	; 0x2b
    d2d8:	ac a5       	ldd	r26, Y+44	; 0x2c
    d2da:	bd a5       	ldd	r27, Y+45	; 0x2d
}
    d2dc:	bc 01       	movw	r22, r24
    d2de:	cd 01       	movw	r24, r26
    d2e0:	af 96       	adiw	r28, 0x2f	; 47
    d2e2:	0f b6       	in	r0, 0x3f	; 63
    d2e4:	f8 94       	cli
    d2e6:	de bf       	out	0x3e, r29	; 62
    d2e8:	0f be       	out	0x3f, r0	; 63
    d2ea:	cd bf       	out	0x3d, r28	; 61
    d2ec:	cf 91       	pop	r28
    d2ee:	df 91       	pop	r29
    d2f0:	08 95       	ret

0000d2f2 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
    d2f2:	df 93       	push	r29
    d2f4:	cf 93       	push	r28
    d2f6:	00 d0       	rcall	.+0      	; 0xd2f8 <shiftIn+0x6>
    d2f8:	00 d0       	rcall	.+0      	; 0xd2fa <shiftIn+0x8>
    d2fa:	0f 92       	push	r0
    d2fc:	cd b7       	in	r28, 0x3d	; 61
    d2fe:	de b7       	in	r29, 0x3e	; 62
    d300:	8b 83       	std	Y+3, r24	; 0x03
    d302:	6c 83       	std	Y+4, r22	; 0x04
    d304:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t value = 0;
    d306:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i;

	for (i = 0; i < 8; ++i) {
    d308:	19 82       	std	Y+1, r1	; 0x01
    d30a:	37 c0       	rjmp	.+110    	; 0xd37a <shiftIn+0x88>
		digitalWrite(clockPin, HIGH);
    d30c:	8c 81       	ldd	r24, Y+4	; 0x04
    d30e:	61 e0       	ldi	r22, 0x01	; 1
    d310:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
		if (bitOrder == LSBFIRST)
    d314:	8d 81       	ldd	r24, Y+5	; 0x05
    d316:	88 23       	and	r24, r24
    d318:	99 f4       	brne	.+38     	; 0xd340 <shiftIn+0x4e>
			value |= digitalRead(dataPin) << i;
    d31a:	8b 81       	ldd	r24, Y+3	; 0x03
    d31c:	0e 94 d2 67 	call	0xcfa4	; 0xcfa4 <digitalRead>
    d320:	9c 01       	movw	r18, r24
    d322:	89 81       	ldd	r24, Y+1	; 0x01
    d324:	88 2f       	mov	r24, r24
    d326:	90 e0       	ldi	r25, 0x00	; 0
    d328:	a9 01       	movw	r20, r18
    d32a:	02 c0       	rjmp	.+4      	; 0xd330 <shiftIn+0x3e>
    d32c:	44 0f       	add	r20, r20
    d32e:	55 1f       	adc	r21, r21
    d330:	8a 95       	dec	r24
    d332:	e2 f7       	brpl	.-8      	; 0xd32c <shiftIn+0x3a>
    d334:	ca 01       	movw	r24, r20
    d336:	98 2f       	mov	r25, r24
    d338:	8a 81       	ldd	r24, Y+2	; 0x02
    d33a:	89 2b       	or	r24, r25
    d33c:	8a 83       	std	Y+2, r24	; 0x02
    d33e:	16 c0       	rjmp	.+44     	; 0xd36c <shiftIn+0x7a>
		else
			value |= digitalRead(dataPin) << (7 - i);
    d340:	8b 81       	ldd	r24, Y+3	; 0x03
    d342:	0e 94 d2 67 	call	0xcfa4	; 0xcfa4 <digitalRead>
    d346:	ac 01       	movw	r20, r24
    d348:	89 81       	ldd	r24, Y+1	; 0x01
    d34a:	28 2f       	mov	r18, r24
    d34c:	30 e0       	ldi	r19, 0x00	; 0
    d34e:	87 e0       	ldi	r24, 0x07	; 7
    d350:	90 e0       	ldi	r25, 0x00	; 0
    d352:	82 1b       	sub	r24, r18
    d354:	93 0b       	sbc	r25, r19
    d356:	9a 01       	movw	r18, r20
    d358:	02 c0       	rjmp	.+4      	; 0xd35e <shiftIn+0x6c>
    d35a:	22 0f       	add	r18, r18
    d35c:	33 1f       	adc	r19, r19
    d35e:	8a 95       	dec	r24
    d360:	e2 f7       	brpl	.-8      	; 0xd35a <shiftIn+0x68>
    d362:	c9 01       	movw	r24, r18
    d364:	98 2f       	mov	r25, r24
    d366:	8a 81       	ldd	r24, Y+2	; 0x02
    d368:	89 2b       	or	r24, r25
    d36a:	8a 83       	std	Y+2, r24	; 0x02
		digitalWrite(clockPin, LOW);
    d36c:	8c 81       	ldd	r24, Y+4	; 0x04
    d36e:	60 e0       	ldi	r22, 0x00	; 0
    d370:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
    d374:	89 81       	ldd	r24, Y+1	; 0x01
    d376:	8f 5f       	subi	r24, 0xFF	; 255
    d378:	89 83       	std	Y+1, r24	; 0x01
    d37a:	89 81       	ldd	r24, Y+1	; 0x01
    d37c:	88 30       	cpi	r24, 0x08	; 8
    d37e:	30 f2       	brcs	.-116    	; 0xd30c <shiftIn+0x1a>
			value |= digitalRead(dataPin) << i;
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
    d380:	8a 81       	ldd	r24, Y+2	; 0x02
}
    d382:	0f 90       	pop	r0
    d384:	0f 90       	pop	r0
    d386:	0f 90       	pop	r0
    d388:	0f 90       	pop	r0
    d38a:	0f 90       	pop	r0
    d38c:	cf 91       	pop	r28
    d38e:	df 91       	pop	r29
    d390:	08 95       	ret

0000d392 <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    d392:	df 93       	push	r29
    d394:	cf 93       	push	r28
    d396:	00 d0       	rcall	.+0      	; 0xd398 <shiftOut+0x6>
    d398:	00 d0       	rcall	.+0      	; 0xd39a <shiftOut+0x8>
    d39a:	0f 92       	push	r0
    d39c:	cd b7       	in	r28, 0x3d	; 61
    d39e:	de b7       	in	r29, 0x3e	; 62
    d3a0:	8a 83       	std	Y+2, r24	; 0x02
    d3a2:	6b 83       	std	Y+3, r22	; 0x03
    d3a4:	4c 83       	std	Y+4, r20	; 0x04
    d3a6:	2d 83       	std	Y+5, r18	; 0x05
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    d3a8:	19 82       	std	Y+1, r1	; 0x01
    d3aa:	39 c0       	rjmp	.+114    	; 0xd41e <shiftOut+0x8c>
		if (bitOrder == LSBFIRST)
    d3ac:	8c 81       	ldd	r24, Y+4	; 0x04
    d3ae:	88 23       	and	r24, r24
    d3b0:	a1 f4       	brne	.+40     	; 0xd3da <shiftOut+0x48>
			digitalWrite(dataPin, !!(val & (1 << i)));
    d3b2:	8d 81       	ldd	r24, Y+5	; 0x05
    d3b4:	28 2f       	mov	r18, r24
    d3b6:	30 e0       	ldi	r19, 0x00	; 0
    d3b8:	89 81       	ldd	r24, Y+1	; 0x01
    d3ba:	88 2f       	mov	r24, r24
    d3bc:	90 e0       	ldi	r25, 0x00	; 0
    d3be:	a9 01       	movw	r20, r18
    d3c0:	02 c0       	rjmp	.+4      	; 0xd3c6 <shiftOut+0x34>
    d3c2:	55 95       	asr	r21
    d3c4:	47 95       	ror	r20
    d3c6:	8a 95       	dec	r24
    d3c8:	e2 f7       	brpl	.-8      	; 0xd3c2 <shiftOut+0x30>
    d3ca:	ca 01       	movw	r24, r20
    d3cc:	98 2f       	mov	r25, r24
    d3ce:	91 70       	andi	r25, 0x01	; 1
    d3d0:	8a 81       	ldd	r24, Y+2	; 0x02
    d3d2:	69 2f       	mov	r22, r25
    d3d4:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
    d3d8:	17 c0       	rjmp	.+46     	; 0xd408 <shiftOut+0x76>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    d3da:	8d 81       	ldd	r24, Y+5	; 0x05
    d3dc:	48 2f       	mov	r20, r24
    d3de:	50 e0       	ldi	r21, 0x00	; 0
    d3e0:	89 81       	ldd	r24, Y+1	; 0x01
    d3e2:	28 2f       	mov	r18, r24
    d3e4:	30 e0       	ldi	r19, 0x00	; 0
    d3e6:	87 e0       	ldi	r24, 0x07	; 7
    d3e8:	90 e0       	ldi	r25, 0x00	; 0
    d3ea:	82 1b       	sub	r24, r18
    d3ec:	93 0b       	sbc	r25, r19
    d3ee:	9a 01       	movw	r18, r20
    d3f0:	02 c0       	rjmp	.+4      	; 0xd3f6 <shiftOut+0x64>
    d3f2:	35 95       	asr	r19
    d3f4:	27 95       	ror	r18
    d3f6:	8a 95       	dec	r24
    d3f8:	e2 f7       	brpl	.-8      	; 0xd3f2 <shiftOut+0x60>
    d3fa:	c9 01       	movw	r24, r18
    d3fc:	98 2f       	mov	r25, r24
    d3fe:	91 70       	andi	r25, 0x01	; 1
    d400:	8a 81       	ldd	r24, Y+2	; 0x02
    d402:	69 2f       	mov	r22, r25
    d404:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    d408:	8b 81       	ldd	r24, Y+3	; 0x03
    d40a:	61 e0       	ldi	r22, 0x01	; 1
    d40c:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
		digitalWrite(clockPin, LOW);		
    d410:	8b 81       	ldd	r24, Y+3	; 0x03
    d412:	60 e0       	ldi	r22, 0x00	; 0
    d414:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
    d418:	89 81       	ldd	r24, Y+1	; 0x01
    d41a:	8f 5f       	subi	r24, 0xFF	; 255
    d41c:	89 83       	std	Y+1, r24	; 0x01
    d41e:	89 81       	ldd	r24, Y+1	; 0x01
    d420:	88 30       	cpi	r24, 0x08	; 8
    d422:	20 f2       	brcs	.-120    	; 0xd3ac <shiftOut+0x1a>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
    d424:	0f 90       	pop	r0
    d426:	0f 90       	pop	r0
    d428:	0f 90       	pop	r0
    d42a:	0f 90       	pop	r0
    d42c:	0f 90       	pop	r0
    d42e:	cf 91       	pop	r28
    d430:	df 91       	pop	r29
    d432:	08 95       	ret

0000d434 <_ZL13ignore_blanksv>:
static void outchar(unsigned char c);
static void line_terminator(void);
static short int expression(void);
static unsigned char breakcheck(void);
/***************************************************************************/
static void ignore_blanks(void)
    d434:	df 93       	push	r29
    d436:	cf 93       	push	r28
    d438:	cd b7       	in	r28, 0x3d	; 61
    d43a:	de b7       	in	r29, 0x3e	; 62
    d43c:	09 c0       	rjmp	.+18     	; 0xd450 <_ZL13ignore_blanksv+0x1c>
{
	while(*txtpos == SPACE || *txtpos == TAB)
		txtpos++;
    d43e:	80 91 70 07 	lds	r24, 0x0770
    d442:	90 91 71 07 	lds	r25, 0x0771
    d446:	01 96       	adiw	r24, 0x01	; 1
    d448:	90 93 71 07 	sts	0x0771, r25
    d44c:	80 93 70 07 	sts	0x0770, r24
static short int expression(void);
static unsigned char breakcheck(void);
/***************************************************************************/
static void ignore_blanks(void)
{
	while(*txtpos == SPACE || *txtpos == TAB)
    d450:	e0 91 70 07 	lds	r30, 0x0770
    d454:	f0 91 71 07 	lds	r31, 0x0771
    d458:	80 81       	ld	r24, Z
    d45a:	80 32       	cpi	r24, 0x20	; 32
    d45c:	81 f3       	breq	.-32     	; 0xd43e <_ZL13ignore_blanksv+0xa>
    d45e:	e0 91 70 07 	lds	r30, 0x0770
    d462:	f0 91 71 07 	lds	r31, 0x0771
    d466:	80 81       	ld	r24, Z
    d468:	89 30       	cpi	r24, 0x09	; 9
    d46a:	49 f3       	breq	.-46     	; 0xd43e <_ZL13ignore_blanksv+0xa>
		txtpos++;
}
    d46c:	cf 91       	pop	r28
    d46e:	df 91       	pop	r29
    d470:	08 95       	ret

0000d472 <_ZL9scantablePh>:


/***************************************************************************/
static void scantable(unsigned char *table)
    d472:	df 93       	push	r29
    d474:	cf 93       	push	r28
    d476:	00 d0       	rcall	.+0      	; 0xd478 <_ZL9scantablePh+0x6>
    d478:	00 d0       	rcall	.+0      	; 0xd47a <_ZL9scantablePh+0x8>
    d47a:	cd b7       	in	r28, 0x3d	; 61
    d47c:	de b7       	in	r29, 0x3e	; 62
    d47e:	9c 83       	std	Y+4, r25	; 0x04
    d480:	8b 83       	std	Y+3, r24	; 0x03
{
	int i = 0;
    d482:	1a 82       	std	Y+2, r1	; 0x02
    d484:	19 82       	std	Y+1, r1	; 0x01
	table_index = 0;
    d486:	10 92 76 07 	sts	0x0776, r1
	while(1)
	{
		// Run out of table entries?
		if(table[0] == 0)
    d48a:	eb 81       	ldd	r30, Y+3	; 0x03
    d48c:	fc 81       	ldd	r31, Y+4	; 0x04
    d48e:	80 81       	ld	r24, Z
    d490:	88 23       	and	r24, r24
    d492:	09 f4       	brne	.+2      	; 0xd496 <_ZL9scantablePh+0x24>
    d494:	5a c0       	rjmp	.+180    	; 0xd54a <_ZL9scantablePh+0xd8>
            return;

		// Do we match this character?
		if(txtpos[i] == table[0])
    d496:	20 91 70 07 	lds	r18, 0x0770
    d49a:	30 91 71 07 	lds	r19, 0x0771
    d49e:	89 81       	ldd	r24, Y+1	; 0x01
    d4a0:	9a 81       	ldd	r25, Y+2	; 0x02
    d4a2:	f9 01       	movw	r30, r18
    d4a4:	e8 0f       	add	r30, r24
    d4a6:	f9 1f       	adc	r31, r25
    d4a8:	90 81       	ld	r25, Z
    d4aa:	eb 81       	ldd	r30, Y+3	; 0x03
    d4ac:	fc 81       	ldd	r31, Y+4	; 0x04
    d4ae:	80 81       	ld	r24, Z
    d4b0:	98 17       	cp	r25, r24
    d4b2:	59 f4       	brne	.+22     	; 0xd4ca <_ZL9scantablePh+0x58>
		{
			i++;
    d4b4:	89 81       	ldd	r24, Y+1	; 0x01
    d4b6:	9a 81       	ldd	r25, Y+2	; 0x02
    d4b8:	01 96       	adiw	r24, 0x01	; 1
    d4ba:	9a 83       	std	Y+2, r25	; 0x02
    d4bc:	89 83       	std	Y+1, r24	; 0x01
			table++;
    d4be:	8b 81       	ldd	r24, Y+3	; 0x03
    d4c0:	9c 81       	ldd	r25, Y+4	; 0x04
    d4c2:	01 96       	adiw	r24, 0x01	; 1
    d4c4:	9c 83       	std	Y+4, r25	; 0x04
    d4c6:	8b 83       	std	Y+3, r24	; 0x03
    d4c8:	e0 cf       	rjmp	.-64     	; 0xd48a <_ZL9scantablePh+0x18>
		}
		else
		{
			// do we match the last character of keywork (with 0x80 added)? If so, return
			if(txtpos[i]+0x80 == table[0])
    d4ca:	20 91 70 07 	lds	r18, 0x0770
    d4ce:	30 91 71 07 	lds	r19, 0x0771
    d4d2:	89 81       	ldd	r24, Y+1	; 0x01
    d4d4:	9a 81       	ldd	r25, Y+2	; 0x02
    d4d6:	f9 01       	movw	r30, r18
    d4d8:	e8 0f       	add	r30, r24
    d4da:	f9 1f       	adc	r31, r25
    d4dc:	80 81       	ld	r24, Z
    d4de:	88 2f       	mov	r24, r24
    d4e0:	90 e0       	ldi	r25, 0x00	; 0
    d4e2:	9c 01       	movw	r18, r24
    d4e4:	20 58       	subi	r18, 0x80	; 128
    d4e6:	3f 4f       	sbci	r19, 0xFF	; 255
    d4e8:	eb 81       	ldd	r30, Y+3	; 0x03
    d4ea:	fc 81       	ldd	r31, Y+4	; 0x04
    d4ec:	80 81       	ld	r24, Z
    d4ee:	88 2f       	mov	r24, r24
    d4f0:	90 e0       	ldi	r25, 0x00	; 0
    d4f2:	28 17       	cp	r18, r24
    d4f4:	39 07       	cpc	r19, r25
    d4f6:	a9 f4       	brne	.+42     	; 0xd522 <_ZL9scantablePh+0xb0>
			{
				txtpos += i+1;  // Advance the pointer to following the keyword
    d4f8:	20 91 70 07 	lds	r18, 0x0770
    d4fc:	30 91 71 07 	lds	r19, 0x0771
    d500:	89 81       	ldd	r24, Y+1	; 0x01
    d502:	9a 81       	ldd	r25, Y+2	; 0x02
    d504:	01 96       	adiw	r24, 0x01	; 1
    d506:	82 0f       	add	r24, r18
    d508:	93 1f       	adc	r25, r19
    d50a:	90 93 71 07 	sts	0x0771, r25
    d50e:	80 93 70 07 	sts	0x0770, r24
				ignore_blanks();
    d512:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
    d516:	19 c0       	rjmp	.+50     	; 0xd54a <_ZL9scantablePh+0xd8>
				return;
			}

			// Forward to the end of this keyword
			while((table[0] & 0x80) == 0)
				table++;
    d518:	8b 81       	ldd	r24, Y+3	; 0x03
    d51a:	9c 81       	ldd	r25, Y+4	; 0x04
    d51c:	01 96       	adiw	r24, 0x01	; 1
    d51e:	9c 83       	std	Y+4, r25	; 0x04
    d520:	8b 83       	std	Y+3, r24	; 0x03
				ignore_blanks();
				return;
			}

			// Forward to the end of this keyword
			while((table[0] & 0x80) == 0)
    d522:	eb 81       	ldd	r30, Y+3	; 0x03
    d524:	fc 81       	ldd	r31, Y+4	; 0x04
    d526:	80 81       	ld	r24, Z
    d528:	88 23       	and	r24, r24
    d52a:	b4 f7       	brge	.-20     	; 0xd518 <_ZL9scantablePh+0xa6>
				table++;

			// Now move on to the first character of the next word, and reset the position index
			table++;
    d52c:	8b 81       	ldd	r24, Y+3	; 0x03
    d52e:	9c 81       	ldd	r25, Y+4	; 0x04
    d530:	01 96       	adiw	r24, 0x01	; 1
    d532:	9c 83       	std	Y+4, r25	; 0x04
    d534:	8b 83       	std	Y+3, r24	; 0x03
			table_index++;
    d536:	80 91 76 07 	lds	r24, 0x0776
    d53a:	8f 5f       	subi	r24, 0xFF	; 255
    d53c:	80 93 76 07 	sts	0x0776, r24
			ignore_blanks();
    d540:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
			i = 0;
    d544:	1a 82       	std	Y+2, r1	; 0x02
    d546:	19 82       	std	Y+1, r1	; 0x01
    d548:	a0 cf       	rjmp	.-192    	; 0xd48a <_ZL9scantablePh+0x18>
		}
	}
}
    d54a:	0f 90       	pop	r0
    d54c:	0f 90       	pop	r0
    d54e:	0f 90       	pop	r0
    d550:	0f 90       	pop	r0
    d552:	cf 91       	pop	r28
    d554:	df 91       	pop	r29
    d556:	08 95       	ret

0000d558 <_ZL5pushbh>:

/***************************************************************************/
static void pushb(unsigned char b)
    d558:	df 93       	push	r29
    d55a:	cf 93       	push	r28
    d55c:	0f 92       	push	r0
    d55e:	cd b7       	in	r28, 0x3d	; 61
    d560:	de b7       	in	r29, 0x3e	; 62
    d562:	89 83       	std	Y+1, r24	; 0x01
{
	sp--;
    d564:	80 91 67 07 	lds	r24, 0x0767
    d568:	90 91 68 07 	lds	r25, 0x0768
    d56c:	01 97       	sbiw	r24, 0x01	; 1
    d56e:	90 93 68 07 	sts	0x0768, r25
    d572:	80 93 67 07 	sts	0x0767, r24
	*sp = b;
    d576:	e0 91 67 07 	lds	r30, 0x0767
    d57a:	f0 91 68 07 	lds	r31, 0x0768
    d57e:	89 81       	ldd	r24, Y+1	; 0x01
    d580:	80 83       	st	Z, r24
}
    d582:	0f 90       	pop	r0
    d584:	cf 91       	pop	r28
    d586:	df 91       	pop	r29
    d588:	08 95       	ret

0000d58a <_ZL4popbv>:

/***************************************************************************/
static unsigned char popb()
    d58a:	df 93       	push	r29
    d58c:	cf 93       	push	r28
    d58e:	0f 92       	push	r0
    d590:	cd b7       	in	r28, 0x3d	; 61
    d592:	de b7       	in	r29, 0x3e	; 62
{
	unsigned char b;
	b = *sp;
    d594:	e0 91 67 07 	lds	r30, 0x0767
    d598:	f0 91 68 07 	lds	r31, 0x0768
    d59c:	80 81       	ld	r24, Z
    d59e:	89 83       	std	Y+1, r24	; 0x01
	sp++;
    d5a0:	80 91 67 07 	lds	r24, 0x0767
    d5a4:	90 91 68 07 	lds	r25, 0x0768
    d5a8:	01 96       	adiw	r24, 0x01	; 1
    d5aa:	90 93 68 07 	sts	0x0768, r25
    d5ae:	80 93 67 07 	sts	0x0767, r24
	return b;
    d5b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    d5b4:	0f 90       	pop	r0
    d5b6:	cf 91       	pop	r28
    d5b8:	df 91       	pop	r29
    d5ba:	08 95       	ret

0000d5bc <_ZL7testnumv>:
		digits--;
	}
}

/***************************************************************************/
static unsigned short testnum(void)
    d5bc:	df 93       	push	r29
    d5be:	cf 93       	push	r28
    d5c0:	00 d0       	rcall	.+0      	; 0xd5c2 <_ZL7testnumv+0x6>
    d5c2:	cd b7       	in	r28, 0x3d	; 61
    d5c4:	de b7       	in	r29, 0x3e	; 62
{
	unsigned short num = 0;
    d5c6:	1a 82       	std	Y+2, r1	; 0x02
    d5c8:	19 82       	std	Y+1, r1	; 0x01
	ignore_blanks();
    d5ca:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
    d5ce:	2c c0       	rjmp	.+88     	; 0xd628 <_ZL7testnumv+0x6c>
	
	while(*txtpos>= '0' && *txtpos <= '9' )
	{
		// Trap overflows
		if(num >= 0xFFFF/10)
    d5d0:	89 81       	ldd	r24, Y+1	; 0x01
    d5d2:	9a 81       	ldd	r25, Y+2	; 0x02
    d5d4:	29 e1       	ldi	r18, 0x19	; 25
    d5d6:	89 39       	cpi	r24, 0x99	; 153
    d5d8:	92 07       	cpc	r25, r18
    d5da:	28 f0       	brcs	.+10     	; 0xd5e6 <_ZL7testnumv+0x2a>
		{
			num = 0xFFFF;
    d5dc:	8f ef       	ldi	r24, 0xFF	; 255
    d5de:	9f ef       	ldi	r25, 0xFF	; 255
    d5e0:	9a 83       	std	Y+2, r25	; 0x02
    d5e2:	89 83       	std	Y+1, r24	; 0x01
    d5e4:	2f c0       	rjmp	.+94     	; 0xd644 <_ZL7testnumv+0x88>
			break;
		}

		num = num *10 + *txtpos - '0';
    d5e6:	89 81       	ldd	r24, Y+1	; 0x01
    d5e8:	9a 81       	ldd	r25, Y+2	; 0x02
    d5ea:	9c 01       	movw	r18, r24
    d5ec:	22 0f       	add	r18, r18
    d5ee:	33 1f       	adc	r19, r19
    d5f0:	c9 01       	movw	r24, r18
    d5f2:	88 0f       	add	r24, r24
    d5f4:	99 1f       	adc	r25, r25
    d5f6:	88 0f       	add	r24, r24
    d5f8:	99 1f       	adc	r25, r25
    d5fa:	28 0f       	add	r18, r24
    d5fc:	39 1f       	adc	r19, r25
    d5fe:	e0 91 70 07 	lds	r30, 0x0770
    d602:	f0 91 71 07 	lds	r31, 0x0771
    d606:	80 81       	ld	r24, Z
    d608:	88 2f       	mov	r24, r24
    d60a:	90 e0       	ldi	r25, 0x00	; 0
    d60c:	82 0f       	add	r24, r18
    d60e:	93 1f       	adc	r25, r19
    d610:	c0 97       	sbiw	r24, 0x30	; 48
    d612:	9a 83       	std	Y+2, r25	; 0x02
    d614:	89 83       	std	Y+1, r24	; 0x01
		txtpos++;
    d616:	80 91 70 07 	lds	r24, 0x0770
    d61a:	90 91 71 07 	lds	r25, 0x0771
    d61e:	01 96       	adiw	r24, 0x01	; 1
    d620:	90 93 71 07 	sts	0x0771, r25
    d624:	80 93 70 07 	sts	0x0770, r24
static unsigned short testnum(void)
{
	unsigned short num = 0;
	ignore_blanks();
	
	while(*txtpos>= '0' && *txtpos <= '9' )
    d628:	e0 91 70 07 	lds	r30, 0x0770
    d62c:	f0 91 71 07 	lds	r31, 0x0771
    d630:	80 81       	ld	r24, Z
    d632:	80 33       	cpi	r24, 0x30	; 48
    d634:	38 f0       	brcs	.+14     	; 0xd644 <_ZL7testnumv+0x88>
    d636:	e0 91 70 07 	lds	r30, 0x0770
    d63a:	f0 91 71 07 	lds	r31, 0x0771
    d63e:	80 81       	ld	r24, Z
    d640:	8a 33       	cpi	r24, 0x3A	; 58
    d642:	30 f2       	brcs	.-116    	; 0xd5d0 <_ZL7testnumv+0x14>
		}

		num = num *10 + *txtpos - '0';
		txtpos++;
	}
	return	num;
    d644:	89 81       	ldd	r24, Y+1	; 0x01
    d646:	9a 81       	ldd	r25, Y+2	; 0x02
}
    d648:	0f 90       	pop	r0
    d64a:	0f 90       	pop	r0
    d64c:	cf 91       	pop	r28
    d64e:	df 91       	pop	r29
    d650:	08 95       	ret

0000d652 <_ZL8findlinev>:
		}
	}
}

/***************************************************************************/
static unsigned char *findline(void)
    d652:	df 93       	push	r29
    d654:	cf 93       	push	r28
    d656:	00 d0       	rcall	.+0      	; 0xd658 <_ZL8findlinev+0x6>
    d658:	00 d0       	rcall	.+0      	; 0xd65a <_ZL8findlinev+0x8>
    d65a:	cd b7       	in	r28, 0x3d	; 61
    d65c:	de b7       	in	r29, 0x3e	; 62
{
	unsigned char *line = program_start;
    d65e:	80 91 64 06 	lds	r24, 0x0664
    d662:	90 91 65 06 	lds	r25, 0x0665
    d666:	9a 83       	std	Y+2, r25	; 0x02
    d668:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		if(line == program_end)
    d66a:	20 91 65 07 	lds	r18, 0x0765
    d66e:	30 91 66 07 	lds	r19, 0x0766
    d672:	89 81       	ldd	r24, Y+1	; 0x01
    d674:	9a 81       	ldd	r25, Y+2	; 0x02
    d676:	82 17       	cp	r24, r18
    d678:	93 07       	cpc	r25, r19
    d67a:	29 f4       	brne	.+10     	; 0xd686 <_ZL8findlinev+0x34>
			return line;
    d67c:	89 81       	ldd	r24, Y+1	; 0x01
    d67e:	9a 81       	ldd	r25, Y+2	; 0x02
    d680:	9c 83       	std	Y+4, r25	; 0x04
    d682:	8b 83       	std	Y+3, r24	; 0x03
    d684:	1e c0       	rjmp	.+60     	; 0xd6c2 <_ZL8findlinev+0x70>

		if(((LINENUM *)line)[0] >= linenum)
    d686:	e9 81       	ldd	r30, Y+1	; 0x01
    d688:	fa 81       	ldd	r31, Y+2	; 0x02
    d68a:	20 81       	ld	r18, Z
    d68c:	31 81       	ldd	r19, Z+1	; 0x01
    d68e:	80 91 72 07 	lds	r24, 0x0772
    d692:	90 91 73 07 	lds	r25, 0x0773
    d696:	28 17       	cp	r18, r24
    d698:	39 07       	cpc	r19, r25
    d69a:	28 f0       	brcs	.+10     	; 0xd6a6 <_ZL8findlinev+0x54>
			return line;
    d69c:	89 81       	ldd	r24, Y+1	; 0x01
    d69e:	9a 81       	ldd	r25, Y+2	; 0x02
    d6a0:	9c 83       	std	Y+4, r25	; 0x04
    d6a2:	8b 83       	std	Y+3, r24	; 0x03
    d6a4:	0e c0       	rjmp	.+28     	; 0xd6c2 <_ZL8findlinev+0x70>

		// Add the line length onto the current address, to get to the next line;
		line += line[sizeof(LINENUM)];
    d6a6:	89 81       	ldd	r24, Y+1	; 0x01
    d6a8:	9a 81       	ldd	r25, Y+2	; 0x02
    d6aa:	fc 01       	movw	r30, r24
    d6ac:	32 96       	adiw	r30, 0x02	; 2
    d6ae:	80 81       	ld	r24, Z
    d6b0:	28 2f       	mov	r18, r24
    d6b2:	30 e0       	ldi	r19, 0x00	; 0
    d6b4:	89 81       	ldd	r24, Y+1	; 0x01
    d6b6:	9a 81       	ldd	r25, Y+2	; 0x02
    d6b8:	82 0f       	add	r24, r18
    d6ba:	93 1f       	adc	r25, r19
    d6bc:	9a 83       	std	Y+2, r25	; 0x02
    d6be:	89 83       	std	Y+1, r24	; 0x01
    d6c0:	d4 cf       	rjmp	.-88     	; 0xd66a <_ZL8findlinev+0x18>

/***************************************************************************/
static unsigned char *findline(void)
{
	unsigned char *line = program_start;
	while(1)
    d6c2:	8b 81       	ldd	r24, Y+3	; 0x03
    d6c4:	9c 81       	ldd	r25, Y+4	; 0x04
			return line;

		// Add the line length onto the current address, to get to the next line;
		line += line[sizeof(LINENUM)];
	}
}
    d6c6:	0f 90       	pop	r0
    d6c8:	0f 90       	pop	r0
    d6ca:	0f 90       	pop	r0
    d6cc:	0f 90       	pop	r0
    d6ce:	cf 91       	pop	r28
    d6d0:	df 91       	pop	r29
    d6d2:	08 95       	ret

0000d6d4 <_ZL17toUppercaseBufferv>:

/***************************************************************************/
static void toUppercaseBuffer(void)
    d6d4:	df 93       	push	r29
    d6d6:	cf 93       	push	r28
    d6d8:	00 d0       	rcall	.+0      	; 0xd6da <_ZL17toUppercaseBufferv+0x6>
    d6da:	0f 92       	push	r0
    d6dc:	cd b7       	in	r28, 0x3d	; 61
    d6de:	de b7       	in	r29, 0x3e	; 62
{
	unsigned char *c = program_end+sizeof(LINENUM);
    d6e0:	80 91 65 07 	lds	r24, 0x0765
    d6e4:	90 91 66 07 	lds	r25, 0x0766
    d6e8:	02 96       	adiw	r24, 0x02	; 2
    d6ea:	9b 83       	std	Y+3, r25	; 0x03
    d6ec:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char quote = 0;
    d6ee:	19 82       	std	Y+1, r1	; 0x01
    d6f0:	30 c0       	rjmp	.+96     	; 0xd752 <_ZL17toUppercaseBufferv+0x7e>

	while(*c != NL)
	{
		// Are we in a quoted string?
		if(*c == quote)
    d6f2:	ea 81       	ldd	r30, Y+2	; 0x02
    d6f4:	fb 81       	ldd	r31, Y+3	; 0x03
    d6f6:	90 81       	ld	r25, Z
    d6f8:	89 81       	ldd	r24, Y+1	; 0x01
    d6fa:	98 17       	cp	r25, r24
    d6fc:	11 f4       	brne	.+4      	; 0xd702 <_ZL17toUppercaseBufferv+0x2e>
			quote = 0;
    d6fe:	19 82       	std	Y+1, r1	; 0x01
    d700:	23 c0       	rjmp	.+70     	; 0xd748 <_ZL17toUppercaseBufferv+0x74>
		else if(*c == '"' || *c == '\'')
    d702:	ea 81       	ldd	r30, Y+2	; 0x02
    d704:	fb 81       	ldd	r31, Y+3	; 0x03
    d706:	80 81       	ld	r24, Z
    d708:	82 32       	cpi	r24, 0x22	; 34
    d70a:	29 f0       	breq	.+10     	; 0xd716 <_ZL17toUppercaseBufferv+0x42>
    d70c:	ea 81       	ldd	r30, Y+2	; 0x02
    d70e:	fb 81       	ldd	r31, Y+3	; 0x03
    d710:	80 81       	ld	r24, Z
    d712:	87 32       	cpi	r24, 0x27	; 39
    d714:	29 f4       	brne	.+10     	; 0xd720 <_ZL17toUppercaseBufferv+0x4c>
			quote = *c;
    d716:	ea 81       	ldd	r30, Y+2	; 0x02
    d718:	fb 81       	ldd	r31, Y+3	; 0x03
    d71a:	80 81       	ld	r24, Z
    d71c:	89 83       	std	Y+1, r24	; 0x01
    d71e:	14 c0       	rjmp	.+40     	; 0xd748 <_ZL17toUppercaseBufferv+0x74>
		else if(quote == 0 && *c >= 'a' && *c <= 'z')
    d720:	89 81       	ldd	r24, Y+1	; 0x01
    d722:	88 23       	and	r24, r24
    d724:	89 f4       	brne	.+34     	; 0xd748 <_ZL17toUppercaseBufferv+0x74>
    d726:	ea 81       	ldd	r30, Y+2	; 0x02
    d728:	fb 81       	ldd	r31, Y+3	; 0x03
    d72a:	80 81       	ld	r24, Z
    d72c:	81 36       	cpi	r24, 0x61	; 97
    d72e:	60 f0       	brcs	.+24     	; 0xd748 <_ZL17toUppercaseBufferv+0x74>
    d730:	ea 81       	ldd	r30, Y+2	; 0x02
    d732:	fb 81       	ldd	r31, Y+3	; 0x03
    d734:	80 81       	ld	r24, Z
    d736:	8b 37       	cpi	r24, 0x7B	; 123
    d738:	38 f4       	brcc	.+14     	; 0xd748 <_ZL17toUppercaseBufferv+0x74>
			*c = *c + 'A' - 'a';
    d73a:	ea 81       	ldd	r30, Y+2	; 0x02
    d73c:	fb 81       	ldd	r31, Y+3	; 0x03
    d73e:	80 81       	ld	r24, Z
    d740:	80 52       	subi	r24, 0x20	; 32
    d742:	ea 81       	ldd	r30, Y+2	; 0x02
    d744:	fb 81       	ldd	r31, Y+3	; 0x03
    d746:	80 83       	st	Z, r24
		c++;
    d748:	8a 81       	ldd	r24, Y+2	; 0x02
    d74a:	9b 81       	ldd	r25, Y+3	; 0x03
    d74c:	01 96       	adiw	r24, 0x01	; 1
    d74e:	9b 83       	std	Y+3, r25	; 0x03
    d750:	8a 83       	std	Y+2, r24	; 0x02
static void toUppercaseBuffer(void)
{
	unsigned char *c = program_end+sizeof(LINENUM);
	unsigned char quote = 0;

	while(*c != NL)
    d752:	ea 81       	ldd	r30, Y+2	; 0x02
    d754:	fb 81       	ldd	r31, Y+3	; 0x03
    d756:	80 81       	ld	r24, Z
    d758:	8a 30       	cpi	r24, 0x0A	; 10
    d75a:	59 f6       	brne	.-106    	; 0xd6f2 <_ZL17toUppercaseBufferv+0x1e>
			quote = *c;
		else if(quote == 0 && *c >= 'a' && *c <= 'z')
			*c = *c + 'A' - 'a';
		c++;
	}
}
    d75c:	0f 90       	pop	r0
    d75e:	0f 90       	pop	r0
    d760:	0f 90       	pop	r0
    d762:	cf 91       	pop	r28
    d764:	df 91       	pop	r29
    d766:	08 95       	ret

0000d768 <_ZL13isValidFnCharc>:
#endif

}

// returns 1 if the character is valid in a filename
static int isValidFnChar( char c )
    d768:	df 93       	push	r29
    d76a:	cf 93       	push	r28
    d76c:	00 d0       	rcall	.+0      	; 0xd76e <_ZL13isValidFnCharc+0x6>
    d76e:	0f 92       	push	r0
    d770:	cd b7       	in	r28, 0x3d	; 61
    d772:	de b7       	in	r29, 0x3e	; 62
    d774:	89 83       	std	Y+1, r24	; 0x01
{
  if( c >= '0' && c <= '9' ) return 1; // number
    d776:	89 81       	ldd	r24, Y+1	; 0x01
    d778:	80 33       	cpi	r24, 0x30	; 48
    d77a:	40 f0       	brcs	.+16     	; 0xd78c <_ZL13isValidFnCharc+0x24>
    d77c:	89 81       	ldd	r24, Y+1	; 0x01
    d77e:	8a 33       	cpi	r24, 0x3A	; 58
    d780:	28 f4       	brcc	.+10     	; 0xd78c <_ZL13isValidFnCharc+0x24>
    d782:	81 e0       	ldi	r24, 0x01	; 1
    d784:	90 e0       	ldi	r25, 0x00	; 0
    d786:	9b 83       	std	Y+3, r25	; 0x03
    d788:	8a 83       	std	Y+2, r24	; 0x02
    d78a:	38 c0       	rjmp	.+112    	; 0xd7fc <_ZL13isValidFnCharc+0x94>
  if( c >= 'A' && c <= 'Z' ) return 1; // LETTER
    d78c:	89 81       	ldd	r24, Y+1	; 0x01
    d78e:	81 34       	cpi	r24, 0x41	; 65
    d790:	40 f0       	brcs	.+16     	; 0xd7a2 <_ZL13isValidFnCharc+0x3a>
    d792:	89 81       	ldd	r24, Y+1	; 0x01
    d794:	8b 35       	cpi	r24, 0x5B	; 91
    d796:	28 f4       	brcc	.+10     	; 0xd7a2 <_ZL13isValidFnCharc+0x3a>
    d798:	81 e0       	ldi	r24, 0x01	; 1
    d79a:	90 e0       	ldi	r25, 0x00	; 0
    d79c:	9b 83       	std	Y+3, r25	; 0x03
    d79e:	8a 83       	std	Y+2, r24	; 0x02
    d7a0:	2d c0       	rjmp	.+90     	; 0xd7fc <_ZL13isValidFnCharc+0x94>
  if( c >= 'a' && c <= 'z' ) return 1; // letter (for completeness)
    d7a2:	89 81       	ldd	r24, Y+1	; 0x01
    d7a4:	81 36       	cpi	r24, 0x61	; 97
    d7a6:	40 f0       	brcs	.+16     	; 0xd7b8 <_ZL13isValidFnCharc+0x50>
    d7a8:	89 81       	ldd	r24, Y+1	; 0x01
    d7aa:	8b 37       	cpi	r24, 0x7B	; 123
    d7ac:	28 f4       	brcc	.+10     	; 0xd7b8 <_ZL13isValidFnCharc+0x50>
    d7ae:	81 e0       	ldi	r24, 0x01	; 1
    d7b0:	90 e0       	ldi	r25, 0x00	; 0
    d7b2:	9b 83       	std	Y+3, r25	; 0x03
    d7b4:	8a 83       	std	Y+2, r24	; 0x02
    d7b6:	22 c0       	rjmp	.+68     	; 0xd7fc <_ZL13isValidFnCharc+0x94>
  if( c == '_' ) return 1;
    d7b8:	89 81       	ldd	r24, Y+1	; 0x01
    d7ba:	8f 35       	cpi	r24, 0x5F	; 95
    d7bc:	29 f4       	brne	.+10     	; 0xd7c8 <_ZL13isValidFnCharc+0x60>
    d7be:	81 e0       	ldi	r24, 0x01	; 1
    d7c0:	90 e0       	ldi	r25, 0x00	; 0
    d7c2:	9b 83       	std	Y+3, r25	; 0x03
    d7c4:	8a 83       	std	Y+2, r24	; 0x02
    d7c6:	1a c0       	rjmp	.+52     	; 0xd7fc <_ZL13isValidFnCharc+0x94>
  if( c == '+' ) return 1;
    d7c8:	89 81       	ldd	r24, Y+1	; 0x01
    d7ca:	8b 32       	cpi	r24, 0x2B	; 43
    d7cc:	29 f4       	brne	.+10     	; 0xd7d8 <_ZL13isValidFnCharc+0x70>
    d7ce:	81 e0       	ldi	r24, 0x01	; 1
    d7d0:	90 e0       	ldi	r25, 0x00	; 0
    d7d2:	9b 83       	std	Y+3, r25	; 0x03
    d7d4:	8a 83       	std	Y+2, r24	; 0x02
    d7d6:	12 c0       	rjmp	.+36     	; 0xd7fc <_ZL13isValidFnCharc+0x94>
  if( c == '.' ) return 1;
    d7d8:	89 81       	ldd	r24, Y+1	; 0x01
    d7da:	8e 32       	cpi	r24, 0x2E	; 46
    d7dc:	29 f4       	brne	.+10     	; 0xd7e8 <_ZL13isValidFnCharc+0x80>
    d7de:	81 e0       	ldi	r24, 0x01	; 1
    d7e0:	90 e0       	ldi	r25, 0x00	; 0
    d7e2:	9b 83       	std	Y+3, r25	; 0x03
    d7e4:	8a 83       	std	Y+2, r24	; 0x02
    d7e6:	0a c0       	rjmp	.+20     	; 0xd7fc <_ZL13isValidFnCharc+0x94>
  if( c == '~' ) return 1;  // Window~1.txt
    d7e8:	89 81       	ldd	r24, Y+1	; 0x01
    d7ea:	8e 37       	cpi	r24, 0x7E	; 126
    d7ec:	29 f4       	brne	.+10     	; 0xd7f8 <_ZL13isValidFnCharc+0x90>
    d7ee:	81 e0       	ldi	r24, 0x01	; 1
    d7f0:	90 e0       	ldi	r25, 0x00	; 0
    d7f2:	9b 83       	std	Y+3, r25	; 0x03
    d7f4:	8a 83       	std	Y+2, r24	; 0x02
    d7f6:	02 c0       	rjmp	.+4      	; 0xd7fc <_ZL13isValidFnCharc+0x94>
  
  return 0;
    d7f8:	1b 82       	std	Y+3, r1	; 0x03
    d7fa:	1a 82       	std	Y+2, r1	; 0x02
    d7fc:	8a 81       	ldd	r24, Y+2	; 0x02
    d7fe:	9b 81       	ldd	r25, Y+3	; 0x03
}
    d800:	0f 90       	pop	r0
    d802:	0f 90       	pop	r0
    d804:	0f 90       	pop	r0
    d806:	cf 91       	pop	r28
    d808:	df 91       	pop	r29
    d80a:	08 95       	ret

0000d80c <_ZL7outcharh>:
	return got;
#endif
}

/***********************************************************/
static void outchar(unsigned char c)
    d80c:	df 93       	push	r29
    d80e:	cf 93       	push	r28
    d810:	0f 92       	push	r0
    d812:	cd b7       	in	r28, 0x3d	; 61
    d814:	de b7       	in	r29, 0x3e	; 62
    d816:	89 83       	std	Y+1, r24	; 0x01
#endif

#else
	putchar(c);
#endif
}
    d818:	0f 90       	pop	r0
    d81a:	cf 91       	pop	r28
    d81c:	df 91       	pop	r29
    d81e:	08 95       	ret

0000d820 <_ZL15line_terminatorv>:
}

#endif

/***************************************************************************/
static void line_terminator(void)
    d820:	df 93       	push	r29
    d822:	cf 93       	push	r28
    d824:	cd b7       	in	r28, 0x3d	; 61
    d826:	de b7       	in	r29, 0x3e	; 62
{
  	outchar(NL);
    d828:	8a e0       	ldi	r24, 0x0A	; 10
    d82a:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
	outchar(CR);
    d82e:	8d e0       	ldi	r24, 0x0D	; 13
    d830:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
}
    d834:	cf 91       	pop	r28
    d836:	df 91       	pop	r29
    d838:	08 95       	ret

0000d83a <_ZL19print_quoted_stringv>:
		msg++;
	}
}

/***************************************************************************/
static unsigned char print_quoted_string(void)
    d83a:	df 93       	push	r29
    d83c:	cf 93       	push	r28
    d83e:	00 d0       	rcall	.+0      	; 0xd840 <_ZL19print_quoted_stringv+0x6>
    d840:	00 d0       	rcall	.+0      	; 0xd842 <_ZL19print_quoted_stringv+0x8>
    d842:	cd b7       	in	r28, 0x3d	; 61
    d844:	de b7       	in	r29, 0x3e	; 62
{
	int i=0;
    d846:	1b 82       	std	Y+3, r1	; 0x03
    d848:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char delim = *txtpos;
    d84a:	e0 91 70 07 	lds	r30, 0x0770
    d84e:	f0 91 71 07 	lds	r31, 0x0771
    d852:	80 81       	ld	r24, Z
    d854:	89 83       	std	Y+1, r24	; 0x01
	if(delim != '"' && delim != '\'')
    d856:	89 81       	ldd	r24, Y+1	; 0x01
    d858:	82 32       	cpi	r24, 0x22	; 34
    d85a:	29 f0       	breq	.+10     	; 0xd866 <_ZL19print_quoted_stringv+0x2c>
    d85c:	89 81       	ldd	r24, Y+1	; 0x01
    d85e:	87 32       	cpi	r24, 0x27	; 39
    d860:	11 f0       	breq	.+4      	; 0xd866 <_ZL19print_quoted_stringv+0x2c>
		return 0;
    d862:	1c 82       	std	Y+4, r1	; 0x04
    d864:	4e c0       	rjmp	.+156    	; 0xd902 <_ZL19print_quoted_stringv+0xc8>
	txtpos++;
    d866:	80 91 70 07 	lds	r24, 0x0770
    d86a:	90 91 71 07 	lds	r25, 0x0771
    d86e:	01 96       	adiw	r24, 0x01	; 1
    d870:	90 93 71 07 	sts	0x0771, r25
    d874:	80 93 70 07 	sts	0x0770, r24
    d878:	13 c0       	rjmp	.+38     	; 0xd8a0 <_ZL19print_quoted_stringv+0x66>

	// Check we have a closing delimiter
	while(txtpos[i] != delim)
	{
		if(txtpos[i] == NL)
    d87a:	20 91 70 07 	lds	r18, 0x0770
    d87e:	30 91 71 07 	lds	r19, 0x0771
    d882:	8a 81       	ldd	r24, Y+2	; 0x02
    d884:	9b 81       	ldd	r25, Y+3	; 0x03
    d886:	f9 01       	movw	r30, r18
    d888:	e8 0f       	add	r30, r24
    d88a:	f9 1f       	adc	r31, r25
    d88c:	80 81       	ld	r24, Z
    d88e:	8a 30       	cpi	r24, 0x0A	; 10
    d890:	11 f4       	brne	.+4      	; 0xd896 <_ZL19print_quoted_stringv+0x5c>
			return 0;
    d892:	1c 82       	std	Y+4, r1	; 0x04
    d894:	36 c0       	rjmp	.+108    	; 0xd902 <_ZL19print_quoted_stringv+0xc8>
		i++;
    d896:	8a 81       	ldd	r24, Y+2	; 0x02
    d898:	9b 81       	ldd	r25, Y+3	; 0x03
    d89a:	01 96       	adiw	r24, 0x01	; 1
    d89c:	9b 83       	std	Y+3, r25	; 0x03
    d89e:	8a 83       	std	Y+2, r24	; 0x02
	if(delim != '"' && delim != '\'')
		return 0;
	txtpos++;

	// Check we have a closing delimiter
	while(txtpos[i] != delim)
    d8a0:	20 91 70 07 	lds	r18, 0x0770
    d8a4:	30 91 71 07 	lds	r19, 0x0771
    d8a8:	8a 81       	ldd	r24, Y+2	; 0x02
    d8aa:	9b 81       	ldd	r25, Y+3	; 0x03
    d8ac:	f9 01       	movw	r30, r18
    d8ae:	e8 0f       	add	r30, r24
    d8b0:	f9 1f       	adc	r31, r25
    d8b2:	90 81       	ld	r25, Z
    d8b4:	89 81       	ldd	r24, Y+1	; 0x01
    d8b6:	98 17       	cp	r25, r24
    d8b8:	01 f7       	brne	.-64     	; 0xd87a <_ZL19print_quoted_stringv+0x40>
    d8ba:	10 c0       	rjmp	.+32     	; 0xd8dc <_ZL19print_quoted_stringv+0xa2>
	}

	// Print the characters
	while(*txtpos != delim)
	{
		outchar(*txtpos);
    d8bc:	e0 91 70 07 	lds	r30, 0x0770
    d8c0:	f0 91 71 07 	lds	r31, 0x0771
    d8c4:	80 81       	ld	r24, Z
    d8c6:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
		txtpos++;
    d8ca:	80 91 70 07 	lds	r24, 0x0770
    d8ce:	90 91 71 07 	lds	r25, 0x0771
    d8d2:	01 96       	adiw	r24, 0x01	; 1
    d8d4:	90 93 71 07 	sts	0x0771, r25
    d8d8:	80 93 70 07 	sts	0x0770, r24
			return 0;
		i++;
	}

	// Print the characters
	while(*txtpos != delim)
    d8dc:	e0 91 70 07 	lds	r30, 0x0770
    d8e0:	f0 91 71 07 	lds	r31, 0x0771
    d8e4:	90 81       	ld	r25, Z
    d8e6:	89 81       	ldd	r24, Y+1	; 0x01
    d8e8:	98 17       	cp	r25, r24
    d8ea:	41 f7       	brne	.-48     	; 0xd8bc <_ZL19print_quoted_stringv+0x82>
	{
		outchar(*txtpos);
		txtpos++;
	}
	txtpos++; // Skip over the last delimiter
    d8ec:	80 91 70 07 	lds	r24, 0x0770
    d8f0:	90 91 71 07 	lds	r25, 0x0771
    d8f4:	01 96       	adiw	r24, 0x01	; 1
    d8f6:	90 93 71 07 	sts	0x0771, r25
    d8fa:	80 93 70 07 	sts	0x0770, r24

	return 1;
    d8fe:	81 e0       	ldi	r24, 0x01	; 1
    d900:	8c 83       	std	Y+4, r24	; 0x04
    d902:	8c 81       	ldd	r24, Y+4	; 0x04
}
    d904:	0f 90       	pop	r0
    d906:	0f 90       	pop	r0
    d908:	0f 90       	pop	r0
    d90a:	0f 90       	pop	r0
    d90c:	cf 91       	pop	r28
    d90e:	df 91       	pop	r29
    d910:	08 95       	ret

0000d912 <_Z12printmsgNoNLPKh>:
	}
	return	num;
}

/***************************************************************************/
void printmsgNoNL(const unsigned char *msg)
    d912:	df 93       	push	r29
    d914:	cf 93       	push	r28
    d916:	00 d0       	rcall	.+0      	; 0xd918 <_Z12printmsgNoNLPKh+0x6>
    d918:	cd b7       	in	r28, 0x3d	; 61
    d91a:	de b7       	in	r29, 0x3e	; 62
    d91c:	9a 83       	std	Y+2, r25	; 0x02
    d91e:	89 83       	std	Y+1, r24	; 0x01
    d920:	0a c0       	rjmp	.+20     	; 0xd936 <_Z12printmsgNoNLPKh+0x24>
{
	while(*msg)
	{
		outchar(*msg);
    d922:	e9 81       	ldd	r30, Y+1	; 0x01
    d924:	fa 81       	ldd	r31, Y+2	; 0x02
    d926:	80 81       	ld	r24, Z
    d928:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
		msg++;
    d92c:	89 81       	ldd	r24, Y+1	; 0x01
    d92e:	9a 81       	ldd	r25, Y+2	; 0x02
    d930:	01 96       	adiw	r24, 0x01	; 1
    d932:	9a 83       	std	Y+2, r25	; 0x02
    d934:	89 83       	std	Y+1, r24	; 0x01
}

/***************************************************************************/
void printmsgNoNL(const unsigned char *msg)
{
	while(*msg)
    d936:	e9 81       	ldd	r30, Y+1	; 0x01
    d938:	fa 81       	ldd	r31, Y+2	; 0x02
    d93a:	80 81       	ld	r24, Z
    d93c:	88 23       	and	r24, r24
    d93e:	89 f7       	brne	.-30     	; 0xd922 <_Z12printmsgNoNLPKh+0x10>
	{
		outchar(*msg);
		msg++;
	}
}
    d940:	0f 90       	pop	r0
    d942:	0f 90       	pop	r0
    d944:	cf 91       	pop	r28
    d946:	df 91       	pop	r29
    d948:	08 95       	ret

0000d94a <_Z8printmsgPKh>:

	return 1;
}

/***************************************************************************/
void printmsg(const unsigned char *msg)
    d94a:	df 93       	push	r29
    d94c:	cf 93       	push	r28
    d94e:	00 d0       	rcall	.+0      	; 0xd950 <_Z8printmsgPKh+0x6>
    d950:	cd b7       	in	r28, 0x3d	; 61
    d952:	de b7       	in	r29, 0x3e	; 62
    d954:	9a 83       	std	Y+2, r25	; 0x02
    d956:	89 83       	std	Y+1, r24	; 0x01
{
	printmsgNoNL(msg);
    d958:	89 81       	ldd	r24, Y+1	; 0x01
    d95a:	9a 81       	ldd	r25, Y+2	; 0x02
    d95c:	0e 94 89 6c 	call	0xd912	; 0xd912 <_Z12printmsgNoNLPKh>
    line_terminator();
    d960:	0e 94 10 6c 	call	0xd820	; 0xd820 <_ZL15line_terminatorv>
}
    d964:	0f 90       	pop	r0
    d966:	0f 90       	pop	r0
    d968:	cf 91       	pop	r28
    d96a:	df 91       	pop	r29
    d96c:	08 95       	ret

0000d96e <_Z9printUnumj>:
		outchar(popb());
		digits--;
	}
}

void printUnum(unsigned int num)
    d96e:	df 93       	push	r29
    d970:	cf 93       	push	r28
    d972:	00 d0       	rcall	.+0      	; 0xd974 <_Z9printUnumj+0x6>
    d974:	00 d0       	rcall	.+0      	; 0xd976 <_Z9printUnumj+0x8>
    d976:	cd b7       	in	r28, 0x3d	; 61
    d978:	de b7       	in	r29, 0x3e	; 62
    d97a:	9c 83       	std	Y+4, r25	; 0x04
    d97c:	8b 83       	std	Y+3, r24	; 0x03
{
	int digits = 0;
    d97e:	1a 82       	std	Y+2, r1	; 0x02
    d980:	19 82       	std	Y+1, r1	; 0x01

	do {
		pushb(num%10+'0');
    d982:	8b 81       	ldd	r24, Y+3	; 0x03
    d984:	9c 81       	ldd	r25, Y+4	; 0x04
    d986:	2a e0       	ldi	r18, 0x0A	; 10
    d988:	30 e0       	ldi	r19, 0x00	; 0
    d98a:	b9 01       	movw	r22, r18
    d98c:	0e 94 e3 81 	call	0x103c6	; 0x103c6 <__udivmodhi4>
    d990:	80 5d       	subi	r24, 0xD0	; 208
    d992:	0e 94 ac 6a 	call	0xd558	; 0xd558 <_ZL5pushbh>
		num = num/10;
    d996:	8b 81       	ldd	r24, Y+3	; 0x03
    d998:	9c 81       	ldd	r25, Y+4	; 0x04
    d99a:	2a e0       	ldi	r18, 0x0A	; 10
    d99c:	30 e0       	ldi	r19, 0x00	; 0
    d99e:	b9 01       	movw	r22, r18
    d9a0:	0e 94 e3 81 	call	0x103c6	; 0x103c6 <__udivmodhi4>
    d9a4:	cb 01       	movw	r24, r22
    d9a6:	9c 83       	std	Y+4, r25	; 0x04
    d9a8:	8b 83       	std	Y+3, r24	; 0x03
		digits++;
    d9aa:	89 81       	ldd	r24, Y+1	; 0x01
    d9ac:	9a 81       	ldd	r25, Y+2	; 0x02
    d9ae:	01 96       	adiw	r24, 0x01	; 1
    d9b0:	9a 83       	std	Y+2, r25	; 0x02
    d9b2:	89 83       	std	Y+1, r24	; 0x01

void printUnum(unsigned int num)
{
	int digits = 0;

	do {
    d9b4:	8b 81       	ldd	r24, Y+3	; 0x03
    d9b6:	9c 81       	ldd	r25, Y+4	; 0x04
    d9b8:	00 97       	sbiw	r24, 0x00	; 0
    d9ba:	19 f7       	brne	.-58     	; 0xd982 <_Z9printUnumj+0x14>
    d9bc:	09 c0       	rjmp	.+18     	; 0xd9d0 <_Z9printUnumj+0x62>
	}
	while (num > 0);

	while(digits > 0)
	{
		outchar(popb());
    d9be:	0e 94 c5 6a 	call	0xd58a	; 0xd58a <_ZL4popbv>
    d9c2:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
		digits--;
    d9c6:	89 81       	ldd	r24, Y+1	; 0x01
    d9c8:	9a 81       	ldd	r25, Y+2	; 0x02
    d9ca:	01 97       	sbiw	r24, 0x01	; 1
    d9cc:	9a 83       	std	Y+2, r25	; 0x02
    d9ce:	89 83       	std	Y+1, r24	; 0x01
		num = num/10;
		digits++;
	}
	while (num > 0);

	while(digits > 0)
    d9d0:	89 81       	ldd	r24, Y+1	; 0x01
    d9d2:	9a 81       	ldd	r25, Y+2	; 0x02
    d9d4:	18 16       	cp	r1, r24
    d9d6:	19 06       	cpc	r1, r25
    d9d8:	94 f3       	brlt	.-28     	; 0xd9be <_Z9printUnumj+0x50>
	{
		outchar(popb());
		digits--;
	}
}
    d9da:	0f 90       	pop	r0
    d9dc:	0f 90       	pop	r0
    d9de:	0f 90       	pop	r0
    d9e0:	0f 90       	pop	r0
    d9e2:	cf 91       	pop	r28
    d9e4:	df 91       	pop	r29
    d9e6:	08 95       	ret

0000d9e8 <_Z8printnumi>:
	sp++;
	return b;
}

/***************************************************************************/
void printnum(int num)
    d9e8:	df 93       	push	r29
    d9ea:	cf 93       	push	r28
    d9ec:	00 d0       	rcall	.+0      	; 0xd9ee <_Z8printnumi+0x6>
    d9ee:	00 d0       	rcall	.+0      	; 0xd9f0 <_Z8printnumi+0x8>
    d9f0:	cd b7       	in	r28, 0x3d	; 61
    d9f2:	de b7       	in	r29, 0x3e	; 62
    d9f4:	9c 83       	std	Y+4, r25	; 0x04
    d9f6:	8b 83       	std	Y+3, r24	; 0x03
{
	int digits = 0;
    d9f8:	1a 82       	std	Y+2, r1	; 0x02
    d9fa:	19 82       	std	Y+1, r1	; 0x01

	if(num < 0)
    d9fc:	8b 81       	ldd	r24, Y+3	; 0x03
    d9fe:	9c 81       	ldd	r25, Y+4	; 0x04
    da00:	99 23       	and	r25, r25
    da02:	54 f4       	brge	.+20     	; 0xda18 <_Z8printnumi+0x30>
	{
		num = -num;
    da04:	8b 81       	ldd	r24, Y+3	; 0x03
    da06:	9c 81       	ldd	r25, Y+4	; 0x04
    da08:	90 95       	com	r25
    da0a:	81 95       	neg	r24
    da0c:	9f 4f       	sbci	r25, 0xFF	; 255
    da0e:	9c 83       	std	Y+4, r25	; 0x04
    da10:	8b 83       	std	Y+3, r24	; 0x03
		outchar('-');
    da12:	8d e2       	ldi	r24, 0x2D	; 45
    da14:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
	}
	do {
		pushb(num%10+'0');
    da18:	8b 81       	ldd	r24, Y+3	; 0x03
    da1a:	9c 81       	ldd	r25, Y+4	; 0x04
    da1c:	2a e0       	ldi	r18, 0x0A	; 10
    da1e:	30 e0       	ldi	r19, 0x00	; 0
    da20:	b9 01       	movw	r22, r18
    da22:	0e 94 f7 81 	call	0x103ee	; 0x103ee <__divmodhi4>
    da26:	80 5d       	subi	r24, 0xD0	; 208
    da28:	0e 94 ac 6a 	call	0xd558	; 0xd558 <_ZL5pushbh>
		num = num/10;
    da2c:	8b 81       	ldd	r24, Y+3	; 0x03
    da2e:	9c 81       	ldd	r25, Y+4	; 0x04
    da30:	2a e0       	ldi	r18, 0x0A	; 10
    da32:	30 e0       	ldi	r19, 0x00	; 0
    da34:	b9 01       	movw	r22, r18
    da36:	0e 94 f7 81 	call	0x103ee	; 0x103ee <__divmodhi4>
    da3a:	cb 01       	movw	r24, r22
    da3c:	9c 83       	std	Y+4, r25	; 0x04
    da3e:	8b 83       	std	Y+3, r24	; 0x03
		digits++;
    da40:	89 81       	ldd	r24, Y+1	; 0x01
    da42:	9a 81       	ldd	r25, Y+2	; 0x02
    da44:	01 96       	adiw	r24, 0x01	; 1
    da46:	9a 83       	std	Y+2, r25	; 0x02
    da48:	89 83       	std	Y+1, r24	; 0x01
	if(num < 0)
	{
		num = -num;
		outchar('-');
	}
	do {
    da4a:	8b 81       	ldd	r24, Y+3	; 0x03
    da4c:	9c 81       	ldd	r25, Y+4	; 0x04
    da4e:	18 16       	cp	r1, r24
    da50:	19 06       	cpc	r1, r25
    da52:	14 f3       	brlt	.-60     	; 0xda18 <_Z8printnumi+0x30>
    da54:	09 c0       	rjmp	.+18     	; 0xda68 <_Z8printnumi+0x80>
	}
	while (num > 0);

	while(digits > 0)
	{
		outchar(popb());
    da56:	0e 94 c5 6a 	call	0xd58a	; 0xd58a <_ZL4popbv>
    da5a:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
		digits--;
    da5e:	89 81       	ldd	r24, Y+1	; 0x01
    da60:	9a 81       	ldd	r25, Y+2	; 0x02
    da62:	01 97       	sbiw	r24, 0x01	; 1
    da64:	9a 83       	std	Y+2, r25	; 0x02
    da66:	89 83       	std	Y+1, r24	; 0x01
		num = num/10;
		digits++;
	}
	while (num > 0);

	while(digits > 0)
    da68:	89 81       	ldd	r24, Y+1	; 0x01
    da6a:	9a 81       	ldd	r25, Y+2	; 0x02
    da6c:	18 16       	cp	r1, r24
    da6e:	19 06       	cpc	r1, r25
    da70:	94 f3       	brlt	.-28     	; 0xda56 <_Z8printnumi+0x6e>
	{
		outchar(popb());
		digits--;
	}
}
    da72:	0f 90       	pop	r0
    da74:	0f 90       	pop	r0
    da76:	0f 90       	pop	r0
    da78:	0f 90       	pop	r0
    da7a:	cf 91       	pop	r28
    da7c:	df 91       	pop	r29
    da7e:	08 95       	ret

0000da80 <_Z9printlinev>:
		c++;
	}
}

/***************************************************************************/
void printline()
    da80:	df 93       	push	r29
    da82:	cf 93       	push	r28
    da84:	00 d0       	rcall	.+0      	; 0xda86 <_Z9printlinev+0x6>
    da86:	cd b7       	in	r28, 0x3d	; 61
    da88:	de b7       	in	r29, 0x3e	; 62
{
	LINENUM line_num;
	
	line_num = *((LINENUM *)(list_line));
    da8a:	80 91 74 07 	lds	r24, 0x0774
    da8e:	90 91 75 07 	lds	r25, 0x0775
    da92:	fc 01       	movw	r30, r24
    da94:	80 81       	ld	r24, Z
    da96:	91 81       	ldd	r25, Z+1	; 0x01
    da98:	9a 83       	std	Y+2, r25	; 0x02
    da9a:	89 83       	std	Y+1, r24	; 0x01
    list_line += sizeof(LINENUM) + sizeof(char);
    da9c:	80 91 74 07 	lds	r24, 0x0774
    daa0:	90 91 75 07 	lds	r25, 0x0775
    daa4:	03 96       	adiw	r24, 0x03	; 3
    daa6:	90 93 75 07 	sts	0x0775, r25
    daaa:	80 93 74 07 	sts	0x0774, r24

	// Output the line */
	printnum(line_num);
    daae:	89 81       	ldd	r24, Y+1	; 0x01
    dab0:	9a 81       	ldd	r25, Y+2	; 0x02
    dab2:	0e 94 f4 6c 	call	0xd9e8	; 0xd9e8 <_Z8printnumi>
	outchar(' ');
    dab6:	80 e2       	ldi	r24, 0x20	; 32
    dab8:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
    dabc:	10 c0       	rjmp	.+32     	; 0xdade <_Z9printlinev+0x5e>
	while(*list_line != NL)
    {
		outchar(*list_line);
    dabe:	e0 91 74 07 	lds	r30, 0x0774
    dac2:	f0 91 75 07 	lds	r31, 0x0775
    dac6:	80 81       	ld	r24, Z
    dac8:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
		list_line++;
    dacc:	80 91 74 07 	lds	r24, 0x0774
    dad0:	90 91 75 07 	lds	r25, 0x0775
    dad4:	01 96       	adiw	r24, 0x01	; 1
    dad6:	90 93 75 07 	sts	0x0775, r25
    dada:	80 93 74 07 	sts	0x0774, r24
    list_line += sizeof(LINENUM) + sizeof(char);

	// Output the line */
	printnum(line_num);
	outchar(' ');
	while(*list_line != NL)
    dade:	e0 91 74 07 	lds	r30, 0x0774
    dae2:	f0 91 75 07 	lds	r31, 0x0775
    dae6:	80 81       	ld	r24, Z
    dae8:	8a 30       	cpi	r24, 0x0A	; 10
    daea:	49 f7       	brne	.-46     	; 0xdabe <_Z9printlinev+0x3e>
    {
		outchar(*list_line);
		list_line++;
	}
	list_line++;
    daec:	80 91 74 07 	lds	r24, 0x0774
    daf0:	90 91 75 07 	lds	r25, 0x0775
    daf4:	01 96       	adiw	r24, 0x01	; 1
    daf6:	90 93 75 07 	sts	0x0775, r25
    dafa:	80 93 74 07 	sts	0x0774, r24
	line_terminator();
    dafe:	0e 94 10 6c 	call	0xd820	; 0xd820 <_ZL15line_terminatorv>
}
    db02:	0f 90       	pop	r0
    db04:	0f 90       	pop	r0
    db06:	cf 91       	pop	r28
    db08:	df 91       	pop	r29
    db0a:	08 95       	ret

0000db0c <_ZL6incharv>:
#endif
     return 0;
#endif
}
/***********************************************************/
static int inchar()
    db0c:	df 93       	push	r29
    db0e:	cf 93       	push	r28
    db10:	0f 92       	push	r0
    db12:	cd b7       	in	r28, 0x3d	; 61
    db14:	de b7       	in	r29, 0x3e	; 62
  } else {
#endif
    // 2. SERIAL INPUT
    while(1)
    {
      if(Serial.available())
    db16:	8c e1       	ldi	r24, 0x1C	; 28
    db18:	96 e0       	ldi	r25, 0x06	; 6
    db1a:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <_ZN14HardwareSerial9availableEv>
    db1e:	19 82       	std	Y+1, r1	; 0x01
    db20:	00 97       	sbiw	r24, 0x00	; 0
    db22:	11 f0       	breq	.+4      	; 0xdb28 <_ZL6incharv+0x1c>
    db24:	81 e0       	ldi	r24, 0x01	; 1
    db26:	89 83       	std	Y+1, r24	; 0x01
    db28:	89 81       	ldd	r24, Y+1	; 0x01
    db2a:	88 23       	and	r24, r24
    db2c:	a1 f3       	breq	.-24     	; 0xdb16 <_ZL6incharv+0xa>
        return Serial.read();
    db2e:	8c e1       	ldi	r24, 0x1C	; 28
    db30:	96 e0       	ldi	r25, 0x06	; 6
    db32:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <_ZN14HardwareSerial4readEv>
	// translation for desktop systems
	if( got == LF ) got = CR;

	return got;
#endif
}
    db36:	0f 90       	pop	r0
    db38:	cf 91       	pop	r28
    db3a:	df 91       	pop	r29
    db3c:	08 95       	ret

0000db3e <_ZL5getlnc>:
	printmsgNoNL(msg);
    line_terminator();
}

/***************************************************************************/
static void getln(char prompt)
    db3e:	df 93       	push	r29
    db40:	cf 93       	push	r28
    db42:	00 d0       	rcall	.+0      	; 0xdb44 <_ZL5getlnc+0x6>
    db44:	00 d0       	rcall	.+0      	; 0xdb46 <_ZL5getlnc+0x8>
    db46:	cd b7       	in	r28, 0x3d	; 61
    db48:	de b7       	in	r29, 0x3e	; 62
    db4a:	8a 83       	std	Y+2, r24	; 0x02
{
  	outchar(prompt);
    db4c:	8a 81       	ldd	r24, Y+2	; 0x02
    db4e:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
	txtpos = program_end+sizeof(LINENUM);
    db52:	80 91 65 07 	lds	r24, 0x0765
    db56:	90 91 66 07 	lds	r25, 0x0766
    db5a:	02 96       	adiw	r24, 0x02	; 2
    db5c:	90 93 71 07 	sts	0x0771, r25
    db60:	80 93 70 07 	sts	0x0770, r24

	while(1)
	{
		char c = inchar();
    db64:	0e 94 86 6d 	call	0xdb0c	; 0xdb0c <_ZL6incharv>
    db68:	89 83       	std	Y+1, r24	; 0x01
		switch(c)
    db6a:	89 81       	ldd	r24, Y+1	; 0x01
    db6c:	28 2f       	mov	r18, r24
    db6e:	30 e0       	ldi	r19, 0x00	; 0
    db70:	3c 83       	std	Y+4, r19	; 0x04
    db72:	2b 83       	std	Y+3, r18	; 0x03
    db74:	8b 81       	ldd	r24, Y+3	; 0x03
    db76:	9c 81       	ldd	r25, Y+4	; 0x04
    db78:	8a 30       	cpi	r24, 0x0A	; 10
    db7a:	91 05       	cpc	r25, r1
    db7c:	99 f3       	breq	.-26     	; 0xdb64 <_ZL5getlnc+0x26>
    db7e:	2b 81       	ldd	r18, Y+3	; 0x03
    db80:	3c 81       	ldd	r19, Y+4	; 0x04
    db82:	2d 30       	cpi	r18, 0x0D	; 13
    db84:	31 05       	cpc	r19, r1
    db86:	31 f0       	breq	.+12     	; 0xdb94 <_ZL5getlnc+0x56>
    db88:	8b 81       	ldd	r24, Y+3	; 0x03
    db8a:	9c 81       	ldd	r25, Y+4	; 0x04
    db8c:	88 30       	cpi	r24, 0x08	; 8
    db8e:	91 05       	cpc	r25, r1
    db90:	81 f0       	breq	.+32     	; 0xdbb2 <_ZL5getlnc+0x74>
    db92:	28 c0       	rjmp	.+80     	; 0xdbe4 <_ZL5getlnc+0xa6>
		{
			case NL:
				break;
			case CR:
                                line_terminator();
    db94:	0e 94 10 6c 	call	0xd820	; 0xd820 <_ZL15line_terminatorv>
				// Terminate all strings with a NL
				txtpos[0] = NL;
    db98:	e0 91 70 07 	lds	r30, 0x0770
    db9c:	f0 91 71 07 	lds	r31, 0x0771
    dba0:	8a e0       	ldi	r24, 0x0A	; 10
    dba2:	80 83       	st	Z, r24
					txtpos++;
					outchar(c);
				}
		}
	}
}
    dba4:	0f 90       	pop	r0
    dba6:	0f 90       	pop	r0
    dba8:	0f 90       	pop	r0
    dbaa:	0f 90       	pop	r0
    dbac:	cf 91       	pop	r28
    dbae:	df 91       	pop	r29
    dbb0:	08 95       	ret
                                line_terminator();
				// Terminate all strings with a NL
				txtpos[0] = NL;
				return;
			case CTRLH:
				if(txtpos == program_end)
    dbb2:	20 91 70 07 	lds	r18, 0x0770
    dbb6:	30 91 71 07 	lds	r19, 0x0771
    dbba:	80 91 65 07 	lds	r24, 0x0765
    dbbe:	90 91 66 07 	lds	r25, 0x0766
    dbc2:	28 17       	cp	r18, r24
    dbc4:	39 07       	cpc	r19, r25
    dbc6:	71 f2       	breq	.-100    	; 0xdb64 <_ZL5getlnc+0x26>
					break;
				txtpos--;
    dbc8:	80 91 70 07 	lds	r24, 0x0770
    dbcc:	90 91 71 07 	lds	r25, 0x0771
    dbd0:	01 97       	sbiw	r24, 0x01	; 1
    dbd2:	90 93 71 07 	sts	0x0771, r25
    dbd6:	80 93 70 07 	sts	0x0770, r24

  				printmsg(backspacemsg);
    dbda:	8a e2       	ldi	r24, 0x2A	; 42
    dbdc:	92 e0       	ldi	r25, 0x02	; 2
    dbde:	0e 94 a5 6c 	call	0xd94a	; 0xd94a <_Z8printmsgPKh>
    dbe2:	c0 cf       	rjmp	.-128    	; 0xdb64 <_ZL5getlnc+0x26>
				break;
			default:
				// We need to leave at least one space to allow us to shuffle the line into order
				if(txtpos == variables_begin-2)
    dbe4:	80 91 6b 07 	lds	r24, 0x076B
    dbe8:	90 91 6c 07 	lds	r25, 0x076C
    dbec:	9c 01       	movw	r18, r24
    dbee:	22 50       	subi	r18, 0x02	; 2
    dbf0:	30 40       	sbci	r19, 0x00	; 0
    dbf2:	80 91 70 07 	lds	r24, 0x0770
    dbf6:	90 91 71 07 	lds	r25, 0x0771
    dbfa:	28 17       	cp	r18, r24
    dbfc:	39 07       	cpc	r19, r25
    dbfe:	21 f4       	brne	.+8      	; 0xdc08 <_ZL5getlnc+0xca>
					outchar(BELL);
    dc00:	88 e0       	ldi	r24, 0x08	; 8
    dc02:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
    dc06:	ae cf       	rjmp	.-164    	; 0xdb64 <_ZL5getlnc+0x26>
				else
				{
					txtpos[0] = c;
    dc08:	e0 91 70 07 	lds	r30, 0x0770
    dc0c:	f0 91 71 07 	lds	r31, 0x0771
    dc10:	89 81       	ldd	r24, Y+1	; 0x01
    dc12:	80 83       	st	Z, r24
					txtpos++;
    dc14:	80 91 70 07 	lds	r24, 0x0770
    dc18:	90 91 71 07 	lds	r25, 0x0771
    dc1c:	01 96       	adiw	r24, 0x01	; 1
    dc1e:	90 93 71 07 	sts	0x0771, r25
    dc22:	80 93 70 07 	sts	0x0770, r24
					outchar(c);
    dc26:	89 81       	ldd	r24, Y+1	; 0x01
    dc28:	0e 94 06 6c 	call	0xd80c	; 0xd80c <_ZL7outcharh>
    dc2c:	9b cf       	rjmp	.-202    	; 0xdb64 <_ZL5getlnc+0x26>

0000dc2e <_ZL10breakcheckv>:

}


/***********************************************************/
static unsigned char breakcheck(void)
    dc2e:	df 93       	push	r29
    dc30:	cf 93       	push	r28
    dc32:	00 d0       	rcall	.+0      	; 0xdc34 <_ZL10breakcheckv+0x6>
    dc34:	cd b7       	in	r28, 0x3d	; 61
    dc36:	de b7       	in	r29, 0x3e	; 62
{
#if ARDUINO
  if(Serial.available())
    dc38:	8c e1       	ldi	r24, 0x1C	; 28
    dc3a:	96 e0       	ldi	r25, 0x06	; 6
    dc3c:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <_ZN14HardwareSerial9availableEv>
    dc40:	1a 82       	std	Y+2, r1	; 0x02
    dc42:	00 97       	sbiw	r24, 0x00	; 0
    dc44:	11 f0       	breq	.+4      	; 0xdc4a <_ZL10breakcheckv+0x1c>
    dc46:	81 e0       	ldi	r24, 0x01	; 1
    dc48:	8a 83       	std	Y+2, r24	; 0x02
    dc4a:	8a 81       	ldd	r24, Y+2	; 0x02
    dc4c:	88 23       	and	r24, r24
    dc4e:	59 f0       	breq	.+22     	; 0xdc66 <_ZL10breakcheckv+0x38>
    return Serial.read() == CTRLC;
    dc50:	8c e1       	ldi	r24, 0x1C	; 28
    dc52:	96 e0       	ldi	r25, 0x06	; 6
    dc54:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <_ZN14HardwareSerial4readEv>
    dc58:	19 82       	std	Y+1, r1	; 0x01
    dc5a:	83 30       	cpi	r24, 0x03	; 3
    dc5c:	91 05       	cpc	r25, r1
    dc5e:	21 f4       	brne	.+8      	; 0xdc68 <_ZL10breakcheckv+0x3a>
    dc60:	81 e0       	ldi	r24, 0x01	; 1
    dc62:	89 83       	std	Y+1, r24	; 0x01
    dc64:	01 c0       	rjmp	.+2      	; 0xdc68 <_ZL10breakcheckv+0x3a>
#if ENABLE_SECOND_SERIAL
  if(ssSerial.available())
    return ssSerial.read() == CTRLC;
#endif
  return 0;
    dc66:	19 82       	std	Y+1, r1	; 0x01
    dc68:	89 81       	ldd	r24, Y+1	; 0x01
    return getch() == CTRLC;
   else
#endif
     return 0;
#endif
}
    dc6a:	0f 90       	pop	r0
    dc6c:	0f 90       	pop	r0
    dc6e:	cf 91       	pop	r28
    dc70:	df 91       	pop	r29
    dc72:	08 95       	ret

0000dc74 <setup>:
  	outchar(NL);
	outchar(CR);
}

/***********************************************************/
void setup()
    dc74:	df 93       	push	r29
    dc76:	cf 93       	push	r28
    dc78:	cd b7       	in	r28, 0x3d	; 61
    dc7a:	de b7       	in	r29, 0x3e	; 62
{
#if ARDUINO
  Serial.begin(kConsoleBaud);	// opens serial port
    dc7c:	8c e1       	ldi	r24, 0x1C	; 28
    dc7e:	96 e0       	ldi	r25, 0x06	; 6
    dc80:	40 e8       	ldi	r20, 0x80	; 128
    dc82:	55 e2       	ldi	r21, 0x25	; 37
    dc84:	60 e0       	ldi	r22, 0x00	; 0
    dc86:	70 e0       	ldi	r23, 0x00	; 0
    dc88:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <_ZN14HardwareSerial5beginEm>
  while( !Serial ); // for Leonardo
    dc8c:	8c e1       	ldi	r24, 0x1C	; 28
    dc8e:	96 e0       	ldi	r25, 0x06	; 6
    dc90:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <_ZN14HardwareSerialcvbEv>
    dc94:	98 2f       	mov	r25, r24
    dc96:	81 e0       	ldi	r24, 0x01	; 1
    dc98:	89 27       	eor	r24, r25
    dc9a:	88 23       	and	r24, r24
    dc9c:	b9 f7       	brne	.-18     	; 0xdc8c <setup+0x18>
  ssSerial.begin(9600);
#endif /* ENABLE_SECOND_SERIAL */
#endif /* ARDUINO */


}
    dc9e:	cf 91       	pop	r28
    dca0:	df 91       	pop	r29
    dca2:	08 95       	ret

0000dca4 <_ZL5expr4v>:
	list_line++;
	line_terminator();
}

/***************************************************************************/
static short int expr4(void)
    dca4:	df 93       	push	r29
    dca6:	cf 93       	push	r28
    dca8:	cd b7       	in	r28, 0x3d	; 61
    dcaa:	de b7       	in	r29, 0x3e	; 62
    dcac:	2b 97       	sbiw	r28, 0x0b	; 11
    dcae:	0f b6       	in	r0, 0x3f	; 63
    dcb0:	f8 94       	cli
    dcb2:	de bf       	out	0x3e, r29	; 62
    dcb4:	0f be       	out	0x3f, r0	; 63
    dcb6:	cd bf       	out	0x3d, r28	; 61
{
        // fix provided by Jurg Wullschleger wullschleger@gmail.com
        // fixes whitespace and unary operations
        ignore_blanks();
    dcb8:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
        
        if( *txtpos == '-' ) {
    dcbc:	e0 91 70 07 	lds	r30, 0x0770
    dcc0:	f0 91 71 07 	lds	r31, 0x0771
    dcc4:	80 81       	ld	r24, Z
    dcc6:	8d 32       	cpi	r24, 0x2D	; 45
    dcc8:	91 f4       	brne	.+36     	; 0xdcee <_ZL5expr4v+0x4a>
          txtpos++;
    dcca:	80 91 70 07 	lds	r24, 0x0770
    dcce:	90 91 71 07 	lds	r25, 0x0771
    dcd2:	01 96       	adiw	r24, 0x01	; 1
    dcd4:	90 93 71 07 	sts	0x0771, r25
    dcd8:	80 93 70 07 	sts	0x0770, r24
          return -expr4();
    dcdc:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <_ZL5expr4v>
    dce0:	22 27       	eor	r18, r18
    dce2:	33 27       	eor	r19, r19
    dce4:	28 1b       	sub	r18, r24
    dce6:	39 0b       	sbc	r19, r25
    dce8:	3b 87       	std	Y+11, r19	; 0x0b
    dcea:	2a 87       	std	Y+10, r18	; 0x0a
    dcec:	62 c1       	rjmp	.+708    	; 0xdfb2 <_ZL5expr4v+0x30e>
        }
	// end fix

	if(*txtpos == '0')
    dcee:	e0 91 70 07 	lds	r30, 0x0770
    dcf2:	f0 91 71 07 	lds	r31, 0x0771
    dcf6:	80 81       	ld	r24, Z
    dcf8:	80 33       	cpi	r24, 0x30	; 48
    dcfa:	61 f4       	brne	.+24     	; 0xdd14 <_ZL5expr4v+0x70>
	{
		txtpos++;
    dcfc:	80 91 70 07 	lds	r24, 0x0770
    dd00:	90 91 71 07 	lds	r25, 0x0771
    dd04:	01 96       	adiw	r24, 0x01	; 1
    dd06:	90 93 71 07 	sts	0x0771, r25
    dd0a:	80 93 70 07 	sts	0x0770, r24
		return 0;
    dd0e:	1b 86       	std	Y+11, r1	; 0x0b
    dd10:	1a 86       	std	Y+10, r1	; 0x0a
    dd12:	4f c1       	rjmp	.+670    	; 0xdfb2 <_ZL5expr4v+0x30e>
	}

	if(*txtpos >= '1' && *txtpos <= '9')
    dd14:	e0 91 70 07 	lds	r30, 0x0770
    dd18:	f0 91 71 07 	lds	r31, 0x0771
    dd1c:	80 81       	ld	r24, Z
    dd1e:	81 33       	cpi	r24, 0x31	; 49
    dd20:	e8 f1       	brcs	.+122    	; 0xdd9c <_ZL5expr4v+0xf8>
    dd22:	e0 91 70 07 	lds	r30, 0x0770
    dd26:	f0 91 71 07 	lds	r31, 0x0771
    dd2a:	80 81       	ld	r24, Z
    dd2c:	8a 33       	cpi	r24, 0x3A	; 58
    dd2e:	b0 f5       	brcc	.+108    	; 0xdd9c <_ZL5expr4v+0xf8>
	{
		short int a = 0;
    dd30:	1f 82       	std	Y+7, r1	; 0x07
    dd32:	1e 82       	std	Y+6, r1	; 0x06
		do 	{
			a = a*10 + *txtpos - '0';
    dd34:	8e 81       	ldd	r24, Y+6	; 0x06
    dd36:	9f 81       	ldd	r25, Y+7	; 0x07
    dd38:	9c 01       	movw	r18, r24
    dd3a:	22 0f       	add	r18, r18
    dd3c:	33 1f       	adc	r19, r19
    dd3e:	c9 01       	movw	r24, r18
    dd40:	88 0f       	add	r24, r24
    dd42:	99 1f       	adc	r25, r25
    dd44:	88 0f       	add	r24, r24
    dd46:	99 1f       	adc	r25, r25
    dd48:	28 0f       	add	r18, r24
    dd4a:	39 1f       	adc	r19, r25
    dd4c:	e0 91 70 07 	lds	r30, 0x0770
    dd50:	f0 91 71 07 	lds	r31, 0x0771
    dd54:	80 81       	ld	r24, Z
    dd56:	88 2f       	mov	r24, r24
    dd58:	90 e0       	ldi	r25, 0x00	; 0
    dd5a:	82 0f       	add	r24, r18
    dd5c:	93 1f       	adc	r25, r19
    dd5e:	c0 97       	sbiw	r24, 0x30	; 48
    dd60:	9f 83       	std	Y+7, r25	; 0x07
    dd62:	8e 83       	std	Y+6, r24	; 0x06
			txtpos++;
    dd64:	80 91 70 07 	lds	r24, 0x0770
    dd68:	90 91 71 07 	lds	r25, 0x0771
    dd6c:	01 96       	adiw	r24, 0x01	; 1
    dd6e:	90 93 71 07 	sts	0x0771, r25
    dd72:	80 93 70 07 	sts	0x0770, r24
	}

	if(*txtpos >= '1' && *txtpos <= '9')
	{
		short int a = 0;
		do 	{
    dd76:	e0 91 70 07 	lds	r30, 0x0770
    dd7a:	f0 91 71 07 	lds	r31, 0x0771
    dd7e:	80 81       	ld	r24, Z
    dd80:	80 33       	cpi	r24, 0x30	; 48
    dd82:	38 f0       	brcs	.+14     	; 0xdd92 <_ZL5expr4v+0xee>
    dd84:	e0 91 70 07 	lds	r30, 0x0770
    dd88:	f0 91 71 07 	lds	r31, 0x0771
    dd8c:	80 81       	ld	r24, Z
    dd8e:	8a 33       	cpi	r24, 0x3A	; 58
    dd90:	88 f2       	brcs	.-94     	; 0xdd34 <_ZL5expr4v+0x90>
			a = a*10 + *txtpos - '0';
			txtpos++;
		} while(*txtpos >= '0' && *txtpos <= '9');
		return a;
    dd92:	8e 81       	ldd	r24, Y+6	; 0x06
    dd94:	9f 81       	ldd	r25, Y+7	; 0x07
    dd96:	9b 87       	std	Y+11, r25	; 0x0b
    dd98:	8a 87       	std	Y+10, r24	; 0x0a
    dd9a:	0b c1       	rjmp	.+534    	; 0xdfb2 <_ZL5expr4v+0x30e>
	}

	// Is it a function or variable reference?
	if(txtpos[0] >= 'A' && txtpos[0] <= 'Z')
    dd9c:	e0 91 70 07 	lds	r30, 0x0770
    dda0:	f0 91 71 07 	lds	r31, 0x0771
    dda4:	80 81       	ld	r24, Z
    dda6:	81 34       	cpi	r24, 0x41	; 65
    dda8:	08 f4       	brcc	.+2      	; 0xddac <_ZL5expr4v+0x108>
    ddaa:	d5 c0       	rjmp	.+426    	; 0xdf56 <_ZL5expr4v+0x2b2>
    ddac:	e0 91 70 07 	lds	r30, 0x0770
    ddb0:	f0 91 71 07 	lds	r31, 0x0771
    ddb4:	80 81       	ld	r24, Z
    ddb6:	8b 35       	cpi	r24, 0x5B	; 91
    ddb8:	08 f0       	brcs	.+2      	; 0xddbc <_ZL5expr4v+0x118>
    ddba:	cd c0       	rjmp	.+410    	; 0xdf56 <_ZL5expr4v+0x2b2>
	{
		short int a;
		// Is it a variable reference (single alpha)
		if(txtpos[1] < 'A' || txtpos[1] > 'Z')
    ddbc:	80 91 70 07 	lds	r24, 0x0770
    ddc0:	90 91 71 07 	lds	r25, 0x0771
    ddc4:	fc 01       	movw	r30, r24
    ddc6:	31 96       	adiw	r30, 0x01	; 1
    ddc8:	80 81       	ld	r24, Z
    ddca:	81 34       	cpi	r24, 0x41	; 65
    ddcc:	48 f0       	brcs	.+18     	; 0xdde0 <_ZL5expr4v+0x13c>
    ddce:	80 91 70 07 	lds	r24, 0x0770
    ddd2:	90 91 71 07 	lds	r25, 0x0771
    ddd6:	fc 01       	movw	r30, r24
    ddd8:	31 96       	adiw	r30, 0x01	; 1
    ddda:	80 81       	ld	r24, Z
    dddc:	8b 35       	cpi	r24, 0x5B	; 91
    ddde:	28 f1       	brcs	.+74     	; 0xde2a <_ZL5expr4v+0x186>
		{
			a = ((short int *)variables_begin)[*txtpos - 'A'];
    dde0:	80 91 6b 07 	lds	r24, 0x076B
    dde4:	90 91 6c 07 	lds	r25, 0x076C
    dde8:	9c 01       	movw	r18, r24
    ddea:	e0 91 70 07 	lds	r30, 0x0770
    ddee:	f0 91 71 07 	lds	r31, 0x0771
    ddf2:	80 81       	ld	r24, Z
    ddf4:	88 2f       	mov	r24, r24
    ddf6:	90 e0       	ldi	r25, 0x00	; 0
    ddf8:	81 54       	subi	r24, 0x41	; 65
    ddfa:	90 40       	sbci	r25, 0x00	; 0
    ddfc:	88 0f       	add	r24, r24
    ddfe:	99 1f       	adc	r25, r25
    de00:	f9 01       	movw	r30, r18
    de02:	e8 0f       	add	r30, r24
    de04:	f9 1f       	adc	r31, r25
    de06:	80 81       	ld	r24, Z
    de08:	91 81       	ldd	r25, Z+1	; 0x01
    de0a:	9d 83       	std	Y+5, r25	; 0x05
    de0c:	8c 83       	std	Y+4, r24	; 0x04
			txtpos++;
    de0e:	80 91 70 07 	lds	r24, 0x0770
    de12:	90 91 71 07 	lds	r25, 0x0771
    de16:	01 96       	adiw	r24, 0x01	; 1
    de18:	90 93 71 07 	sts	0x0771, r25
    de1c:	80 93 70 07 	sts	0x0770, r24
			return a;
    de20:	2c 81       	ldd	r18, Y+4	; 0x04
    de22:	3d 81       	ldd	r19, Y+5	; 0x05
    de24:	3b 87       	std	Y+11, r19	; 0x0b
    de26:	2a 87       	std	Y+10, r18	; 0x0a
    de28:	c4 c0       	rjmp	.+392    	; 0xdfb2 <_ZL5expr4v+0x30e>
		}

		// Is it a function with a single parameter
		scantable(func_tab);
    de2a:	85 e1       	ldi	r24, 0x15	; 21
    de2c:	92 e0       	ldi	r25, 0x02	; 2
    de2e:	0e 94 39 6a 	call	0xd472	; 0xd472 <_ZL9scantablePh>
		if(table_index == FUNC_UNKNOWN)
    de32:	80 91 76 07 	lds	r24, 0x0776
    de36:	85 30       	cpi	r24, 0x05	; 5
    de38:	09 f4       	brne	.+2      	; 0xde3c <_ZL5expr4v+0x198>
    de3a:	b6 c0       	rjmp	.+364    	; 0xdfa8 <_ZL5expr4v+0x304>
			goto expr4_error;

		unsigned char f = table_index;
    de3c:	80 91 76 07 	lds	r24, 0x0776
    de40:	8b 83       	std	Y+3, r24	; 0x03

		if(*txtpos != '(')
    de42:	e0 91 70 07 	lds	r30, 0x0770
    de46:	f0 91 71 07 	lds	r31, 0x0771
    de4a:	80 81       	ld	r24, Z
    de4c:	88 32       	cpi	r24, 0x28	; 40
    de4e:	09 f0       	breq	.+2      	; 0xde52 <_ZL5expr4v+0x1ae>
    de50:	ab c0       	rjmp	.+342    	; 0xdfa8 <_ZL5expr4v+0x304>
			goto expr4_error;

		txtpos++;
    de52:	80 91 70 07 	lds	r24, 0x0770
    de56:	90 91 71 07 	lds	r25, 0x0771
    de5a:	01 96       	adiw	r24, 0x01	; 1
    de5c:	90 93 71 07 	sts	0x0771, r25
    de60:	80 93 70 07 	sts	0x0770, r24
		a = expression();
    de64:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    de68:	9d 83       	std	Y+5, r25	; 0x05
    de6a:	8c 83       	std	Y+4, r24	; 0x04
		if(*txtpos != ')')
    de6c:	e0 91 70 07 	lds	r30, 0x0770
    de70:	f0 91 71 07 	lds	r31, 0x0771
    de74:	80 81       	ld	r24, Z
    de76:	89 32       	cpi	r24, 0x29	; 41
    de78:	09 f0       	breq	.+2      	; 0xde7c <_ZL5expr4v+0x1d8>
    de7a:	96 c0       	rjmp	.+300    	; 0xdfa8 <_ZL5expr4v+0x304>
				goto expr4_error;
		txtpos++;
    de7c:	80 91 70 07 	lds	r24, 0x0770
    de80:	90 91 71 07 	lds	r25, 0x0771
    de84:	01 96       	adiw	r24, 0x01	; 1
    de86:	90 93 71 07 	sts	0x0771, r25
    de8a:	80 93 70 07 	sts	0x0770, r24
		switch(f)
    de8e:	8b 81       	ldd	r24, Y+3	; 0x03
    de90:	28 2f       	mov	r18, r24
    de92:	30 e0       	ldi	r19, 0x00	; 0
    de94:	39 87       	std	Y+9, r19	; 0x09
    de96:	28 87       	std	Y+8, r18	; 0x08
    de98:	88 85       	ldd	r24, Y+8	; 0x08
    de9a:	99 85       	ldd	r25, Y+9	; 0x09
    de9c:	82 30       	cpi	r24, 0x02	; 2
    de9e:	91 05       	cpc	r25, r1
    dea0:	b9 f1       	breq	.+110    	; 0xdf10 <_ZL5expr4v+0x26c>
    dea2:	28 85       	ldd	r18, Y+8	; 0x08
    dea4:	39 85       	ldd	r19, Y+9	; 0x09
    dea6:	23 30       	cpi	r18, 0x03	; 3
    dea8:	31 05       	cpc	r19, r1
    deaa:	54 f4       	brge	.+20     	; 0xdec0 <_ZL5expr4v+0x21c>
    deac:	88 85       	ldd	r24, Y+8	; 0x08
    deae:	99 85       	ldd	r25, Y+9	; 0x09
    deb0:	00 97       	sbiw	r24, 0x00	; 0
    deb2:	89 f0       	breq	.+34     	; 0xded6 <_ZL5expr4v+0x232>
    deb4:	28 85       	ldd	r18, Y+8	; 0x08
    deb6:	39 85       	ldd	r19, Y+9	; 0x09
    deb8:	21 30       	cpi	r18, 0x01	; 1
    deba:	31 05       	cpc	r19, r1
    debc:	b9 f0       	breq	.+46     	; 0xdeec <_ZL5expr4v+0x248>
    debe:	4b c0       	rjmp	.+150    	; 0xdf56 <_ZL5expr4v+0x2b2>
    dec0:	88 85       	ldd	r24, Y+8	; 0x08
    dec2:	99 85       	ldd	r25, Y+9	; 0x09
    dec4:	83 30       	cpi	r24, 0x03	; 3
    dec6:	91 05       	cpc	r25, r1
    dec8:	69 f1       	breq	.+90     	; 0xdf24 <_ZL5expr4v+0x280>
    deca:	28 85       	ldd	r18, Y+8	; 0x08
    decc:	39 85       	ldd	r19, Y+9	; 0x09
    dece:	24 30       	cpi	r18, 0x04	; 4
    ded0:	31 05       	cpc	r19, r1
    ded2:	91 f1       	breq	.+100    	; 0xdf38 <_ZL5expr4v+0x294>
    ded4:	40 c0       	rjmp	.+128    	; 0xdf56 <_ZL5expr4v+0x2b2>
		{
			case FUNC_PEEK:
				return program[a];
    ded6:	8c 81       	ldd	r24, Y+4	; 0x04
    ded8:	9d 81       	ldd	r25, Y+5	; 0x05
    deda:	fc 01       	movw	r30, r24
    dedc:	ea 59       	subi	r30, 0x9A	; 154
    dede:	f9 4f       	sbci	r31, 0xF9	; 249
    dee0:	80 81       	ld	r24, Z
    dee2:	28 2f       	mov	r18, r24
    dee4:	30 e0       	ldi	r19, 0x00	; 0
    dee6:	3b 87       	std	Y+11, r19	; 0x0b
    dee8:	2a 87       	std	Y+10, r18	; 0x0a
    deea:	63 c0       	rjmp	.+198    	; 0xdfb2 <_ZL5expr4v+0x30e>
			case FUNC_ABS:
				if(a < 0) 
    deec:	8c 81       	ldd	r24, Y+4	; 0x04
    deee:	9d 81       	ldd	r25, Y+5	; 0x05
    def0:	99 23       	and	r25, r25
    def2:	4c f4       	brge	.+18     	; 0xdf06 <_ZL5expr4v+0x262>
					return -a;
    def4:	8c 81       	ldd	r24, Y+4	; 0x04
    def6:	9d 81       	ldd	r25, Y+5	; 0x05
    def8:	22 27       	eor	r18, r18
    defa:	33 27       	eor	r19, r19
    defc:	28 1b       	sub	r18, r24
    defe:	39 0b       	sbc	r19, r25
    df00:	3b 87       	std	Y+11, r19	; 0x0b
    df02:	2a 87       	std	Y+10, r18	; 0x0a
    df04:	56 c0       	rjmp	.+172    	; 0xdfb2 <_ZL5expr4v+0x30e>
				return a;
    df06:	8c 81       	ldd	r24, Y+4	; 0x04
    df08:	9d 81       	ldd	r25, Y+5	; 0x05
    df0a:	9b 87       	std	Y+11, r25	; 0x0b
    df0c:	8a 87       	std	Y+10, r24	; 0x0a
    df0e:	51 c0       	rjmp	.+162    	; 0xdfb2 <_ZL5expr4v+0x30e>

                        case FUNC_AREAD:
#ifdef kAutoConf
                                pinMode( a, INPUT );
    df10:	8c 81       	ldd	r24, Y+4	; 0x04
    df12:	60 e0       	ldi	r22, 0x00	; 0
    df14:	0e 94 6f 66 	call	0xccde	; 0xccde <pinMode>
#endif
                                return analogRead( a );                        
    df18:	8c 81       	ldd	r24, Y+4	; 0x04
    df1a:	0e 94 8c 65 	call	0xcb18	; 0xcb18 <analogRead>
    df1e:	9b 87       	std	Y+11, r25	; 0x0b
    df20:	8a 87       	std	Y+10, r24	; 0x0a
    df22:	47 c0       	rjmp	.+142    	; 0xdfb2 <_ZL5expr4v+0x30e>
                        case FUNC_DREAD:
#ifdef kAutoConf
                                pinMode( a, INPUT );
    df24:	8c 81       	ldd	r24, Y+4	; 0x04
    df26:	60 e0       	ldi	r22, 0x00	; 0
    df28:	0e 94 6f 66 	call	0xccde	; 0xccde <pinMode>
#endif
                                return digitalRead( a );
    df2c:	8c 81       	ldd	r24, Y+4	; 0x04
    df2e:	0e 94 d2 67 	call	0xcfa4	; 0xcfa4 <digitalRead>
    df32:	9b 87       	std	Y+11, r25	; 0x0b
    df34:	8a 87       	std	Y+10, r24	; 0x0a
    df36:	3d c0       	rjmp	.+122    	; 0xdfb2 <_ZL5expr4v+0x30e>
                                
                        case FUNC_RND:
                                return( random( a ));
    df38:	8c 81       	ldd	r24, Y+4	; 0x04
    df3a:	9d 81       	ldd	r25, Y+5	; 0x05
    df3c:	aa 27       	eor	r26, r26
    df3e:	97 fd       	sbrc	r25, 7
    df40:	a0 95       	com	r26
    df42:	ba 2f       	mov	r27, r26
    df44:	bc 01       	movw	r22, r24
    df46:	cd 01       	movw	r24, r26
    df48:	0e 94 96 51 	call	0xa32c	; 0xa32c <_Z6randoml>
    df4c:	dc 01       	movw	r26, r24
    df4e:	cb 01       	movw	r24, r22
    df50:	9b 87       	std	Y+11, r25	; 0x0b
    df52:	8a 87       	std	Y+10, r24	; 0x0a
    df54:	2e c0       	rjmp	.+92     	; 0xdfb2 <_ZL5expr4v+0x30e>
		}
	}

	if(*txtpos == '(')
    df56:	e0 91 70 07 	lds	r30, 0x0770
    df5a:	f0 91 71 07 	lds	r31, 0x0771
    df5e:	80 81       	ld	r24, Z
    df60:	88 32       	cpi	r24, 0x28	; 40
    df62:	11 f5       	brne	.+68     	; 0xdfa8 <_ZL5expr4v+0x304>
	{
		short int a;
		txtpos++;
    df64:	80 91 70 07 	lds	r24, 0x0770
    df68:	90 91 71 07 	lds	r25, 0x0771
    df6c:	01 96       	adiw	r24, 0x01	; 1
    df6e:	90 93 71 07 	sts	0x0771, r25
    df72:	80 93 70 07 	sts	0x0770, r24
		a = expression();
    df76:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    df7a:	9a 83       	std	Y+2, r25	; 0x02
    df7c:	89 83       	std	Y+1, r24	; 0x01
		if(*txtpos != ')')
    df7e:	e0 91 70 07 	lds	r30, 0x0770
    df82:	f0 91 71 07 	lds	r31, 0x0771
    df86:	80 81       	ld	r24, Z
    df88:	89 32       	cpi	r24, 0x29	; 41
    df8a:	71 f4       	brne	.+28     	; 0xdfa8 <_ZL5expr4v+0x304>
			goto expr4_error;

		txtpos++;
    df8c:	80 91 70 07 	lds	r24, 0x0770
    df90:	90 91 71 07 	lds	r25, 0x0771
    df94:	01 96       	adiw	r24, 0x01	; 1
    df96:	90 93 71 07 	sts	0x0771, r25
    df9a:	80 93 70 07 	sts	0x0770, r24
		return a;
    df9e:	29 81       	ldd	r18, Y+1	; 0x01
    dfa0:	3a 81       	ldd	r19, Y+2	; 0x02
    dfa2:	3b 87       	std	Y+11, r19	; 0x0b
    dfa4:	2a 87       	std	Y+10, r18	; 0x0a
    dfa6:	05 c0       	rjmp	.+10     	; 0xdfb2 <_ZL5expr4v+0x30e>
	}

expr4_error:
	expression_error = 1;
    dfa8:	81 e0       	ldi	r24, 0x01	; 1
    dfaa:	80 93 77 07 	sts	0x0777, r24
	return 0;
    dfae:	1b 86       	std	Y+11, r1	; 0x0b
    dfb0:	1a 86       	std	Y+10, r1	; 0x0a
    dfb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    dfb4:	9b 85       	ldd	r25, Y+11	; 0x0b

}
    dfb6:	2b 96       	adiw	r28, 0x0b	; 11
    dfb8:	0f b6       	in	r0, 0x3f	; 63
    dfba:	f8 94       	cli
    dfbc:	de bf       	out	0x3e, r29	; 62
    dfbe:	0f be       	out	0x3f, r0	; 63
    dfc0:	cd bf       	out	0x3d, r28	; 61
    dfc2:	cf 91       	pop	r28
    dfc4:	df 91       	pop	r29
    dfc6:	08 95       	ret

0000dfc8 <_ZL5expr3v>:

/***************************************************************************/
static short int expr3(void)
    dfc8:	df 93       	push	r29
    dfca:	cf 93       	push	r28
    dfcc:	00 d0       	rcall	.+0      	; 0xdfce <_ZL5expr3v+0x6>
    dfce:	00 d0       	rcall	.+0      	; 0xdfd0 <_ZL5expr3v+0x8>
    dfd0:	cd b7       	in	r28, 0x3d	; 61
    dfd2:	de b7       	in	r29, 0x3e	; 62
{
	short int a,b;

	a = expr4();
    dfd4:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <_ZL5expr4v>
    dfd8:	9c 83       	std	Y+4, r25	; 0x04
    dfda:	8b 83       	std	Y+3, r24	; 0x03

        ignore_blanks(); // fix for eg:  100 a = a + 1
    dfdc:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>

	while(1)
	{
		if(*txtpos == '*')
    dfe0:	e0 91 70 07 	lds	r30, 0x0770
    dfe4:	f0 91 71 07 	lds	r31, 0x0771
    dfe8:	80 81       	ld	r24, Z
    dfea:	8a 32       	cpi	r24, 0x2A	; 42
    dfec:	e1 f4       	brne	.+56     	; 0xe026 <_ZL5expr3v+0x5e>
		{
			txtpos++;
    dfee:	80 91 70 07 	lds	r24, 0x0770
    dff2:	90 91 71 07 	lds	r25, 0x0771
    dff6:	01 96       	adiw	r24, 0x01	; 1
    dff8:	90 93 71 07 	sts	0x0771, r25
    dffc:	80 93 70 07 	sts	0x0770, r24
			b = expr4();
    e000:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <_ZL5expr4v>
    e004:	9a 83       	std	Y+2, r25	; 0x02
    e006:	89 83       	std	Y+1, r24	; 0x01
			a *= b;
    e008:	2b 81       	ldd	r18, Y+3	; 0x03
    e00a:	3c 81       	ldd	r19, Y+4	; 0x04
    e00c:	89 81       	ldd	r24, Y+1	; 0x01
    e00e:	9a 81       	ldd	r25, Y+2	; 0x02
    e010:	ac 01       	movw	r20, r24
    e012:	24 9f       	mul	r18, r20
    e014:	c0 01       	movw	r24, r0
    e016:	25 9f       	mul	r18, r21
    e018:	90 0d       	add	r25, r0
    e01a:	34 9f       	mul	r19, r20
    e01c:	90 0d       	add	r25, r0
    e01e:	11 24       	eor	r1, r1
    e020:	9c 83       	std	Y+4, r25	; 0x04
    e022:	8b 83       	std	Y+3, r24	; 0x03
    e024:	dd cf       	rjmp	.-70     	; 0xdfe0 <_ZL5expr3v+0x18>
		}
		else if(*txtpos == '/')
    e026:	e0 91 70 07 	lds	r30, 0x0770
    e02a:	f0 91 71 07 	lds	r31, 0x0771
    e02e:	80 81       	ld	r24, Z
    e030:	8f 32       	cpi	r24, 0x2F	; 47
    e032:	01 f5       	brne	.+64     	; 0xe074 <_ZL5expr3v+0xac>
		{
			txtpos++;
    e034:	80 91 70 07 	lds	r24, 0x0770
    e038:	90 91 71 07 	lds	r25, 0x0771
    e03c:	01 96       	adiw	r24, 0x01	; 1
    e03e:	90 93 71 07 	sts	0x0771, r25
    e042:	80 93 70 07 	sts	0x0770, r24
			b = expr4();
    e046:	0e 94 52 6e 	call	0xdca4	; 0xdca4 <_ZL5expr4v>
    e04a:	9a 83       	std	Y+2, r25	; 0x02
    e04c:	89 83       	std	Y+1, r24	; 0x01
			if(b != 0)
    e04e:	89 81       	ldd	r24, Y+1	; 0x01
    e050:	9a 81       	ldd	r25, Y+2	; 0x02
    e052:	00 97       	sbiw	r24, 0x00	; 0
    e054:	59 f0       	breq	.+22     	; 0xe06c <_ZL5expr3v+0xa4>
				a /= b;
    e056:	8b 81       	ldd	r24, Y+3	; 0x03
    e058:	9c 81       	ldd	r25, Y+4	; 0x04
    e05a:	29 81       	ldd	r18, Y+1	; 0x01
    e05c:	3a 81       	ldd	r19, Y+2	; 0x02
    e05e:	b9 01       	movw	r22, r18
    e060:	0e 94 f7 81 	call	0x103ee	; 0x103ee <__divmodhi4>
    e064:	cb 01       	movw	r24, r22
    e066:	9c 83       	std	Y+4, r25	; 0x04
    e068:	8b 83       	std	Y+3, r24	; 0x03
    e06a:	ba cf       	rjmp	.-140    	; 0xdfe0 <_ZL5expr3v+0x18>
			else
				expression_error = 1;
    e06c:	81 e0       	ldi	r24, 0x01	; 1
    e06e:	80 93 77 07 	sts	0x0777, r24
    e072:	b6 cf       	rjmp	.-148    	; 0xdfe0 <_ZL5expr3v+0x18>
		}
		else
			return a;
    e074:	8b 81       	ldd	r24, Y+3	; 0x03
    e076:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
    e078:	0f 90       	pop	r0
    e07a:	0f 90       	pop	r0
    e07c:	0f 90       	pop	r0
    e07e:	0f 90       	pop	r0
    e080:	cf 91       	pop	r28
    e082:	df 91       	pop	r29
    e084:	08 95       	ret

0000e086 <_ZL5expr2v>:

/***************************************************************************/
static short int expr2(void)
    e086:	df 93       	push	r29
    e088:	cf 93       	push	r28
    e08a:	00 d0       	rcall	.+0      	; 0xe08c <_ZL5expr2v+0x6>
    e08c:	00 d0       	rcall	.+0      	; 0xe08e <_ZL5expr2v+0x8>
    e08e:	cd b7       	in	r28, 0x3d	; 61
    e090:	de b7       	in	r29, 0x3e	; 62
{
	short int a,b;

	if(*txtpos == '-' || *txtpos == '+')
    e092:	e0 91 70 07 	lds	r30, 0x0770
    e096:	f0 91 71 07 	lds	r31, 0x0771
    e09a:	80 81       	ld	r24, Z
    e09c:	8d 32       	cpi	r24, 0x2D	; 45
    e09e:	39 f0       	breq	.+14     	; 0xe0ae <_ZL5expr2v+0x28>
    e0a0:	e0 91 70 07 	lds	r30, 0x0770
    e0a4:	f0 91 71 07 	lds	r31, 0x0771
    e0a8:	80 81       	ld	r24, Z
    e0aa:	8b 32       	cpi	r24, 0x2B	; 43
    e0ac:	19 f4       	brne	.+6      	; 0xe0b4 <_ZL5expr2v+0x2e>
		a = 0;
    e0ae:	1c 82       	std	Y+4, r1	; 0x04
    e0b0:	1b 82       	std	Y+3, r1	; 0x03
    e0b2:	04 c0       	rjmp	.+8      	; 0xe0bc <_ZL5expr2v+0x36>
	else
		a = expr3();
    e0b4:	0e 94 e4 6f 	call	0xdfc8	; 0xdfc8 <_ZL5expr3v>
    e0b8:	9c 83       	std	Y+4, r25	; 0x04
    e0ba:	8b 83       	std	Y+3, r24	; 0x03

	while(1)
	{
		if(*txtpos == '-')
    e0bc:	e0 91 70 07 	lds	r30, 0x0770
    e0c0:	f0 91 71 07 	lds	r31, 0x0771
    e0c4:	80 81       	ld	r24, Z
    e0c6:	8d 32       	cpi	r24, 0x2D	; 45
    e0c8:	c1 f4       	brne	.+48     	; 0xe0fa <_ZL5expr2v+0x74>
		{
			txtpos++;
    e0ca:	80 91 70 07 	lds	r24, 0x0770
    e0ce:	90 91 71 07 	lds	r25, 0x0771
    e0d2:	01 96       	adiw	r24, 0x01	; 1
    e0d4:	90 93 71 07 	sts	0x0771, r25
    e0d8:	80 93 70 07 	sts	0x0770, r24
			b = expr3();
    e0dc:	0e 94 e4 6f 	call	0xdfc8	; 0xdfc8 <_ZL5expr3v>
    e0e0:	9a 83       	std	Y+2, r25	; 0x02
    e0e2:	89 83       	std	Y+1, r24	; 0x01
			a -= b;
    e0e4:	2b 81       	ldd	r18, Y+3	; 0x03
    e0e6:	3c 81       	ldd	r19, Y+4	; 0x04
    e0e8:	89 81       	ldd	r24, Y+1	; 0x01
    e0ea:	9a 81       	ldd	r25, Y+2	; 0x02
    e0ec:	a9 01       	movw	r20, r18
    e0ee:	48 1b       	sub	r20, r24
    e0f0:	59 0b       	sbc	r21, r25
    e0f2:	ca 01       	movw	r24, r20
    e0f4:	9c 83       	std	Y+4, r25	; 0x04
    e0f6:	8b 83       	std	Y+3, r24	; 0x03
    e0f8:	e1 cf       	rjmp	.-62     	; 0xe0bc <_ZL5expr2v+0x36>
		}
		else if(*txtpos == '+')
    e0fa:	e0 91 70 07 	lds	r30, 0x0770
    e0fe:	f0 91 71 07 	lds	r31, 0x0771
    e102:	80 81       	ld	r24, Z
    e104:	8b 32       	cpi	r24, 0x2B	; 43
    e106:	b1 f4       	brne	.+44     	; 0xe134 <_ZL5expr2v+0xae>
		{
			txtpos++;
    e108:	80 91 70 07 	lds	r24, 0x0770
    e10c:	90 91 71 07 	lds	r25, 0x0771
    e110:	01 96       	adiw	r24, 0x01	; 1
    e112:	90 93 71 07 	sts	0x0771, r25
    e116:	80 93 70 07 	sts	0x0770, r24
			b = expr3();
    e11a:	0e 94 e4 6f 	call	0xdfc8	; 0xdfc8 <_ZL5expr3v>
    e11e:	9a 83       	std	Y+2, r25	; 0x02
    e120:	89 83       	std	Y+1, r24	; 0x01
			a += b;
    e122:	2b 81       	ldd	r18, Y+3	; 0x03
    e124:	3c 81       	ldd	r19, Y+4	; 0x04
    e126:	89 81       	ldd	r24, Y+1	; 0x01
    e128:	9a 81       	ldd	r25, Y+2	; 0x02
    e12a:	82 0f       	add	r24, r18
    e12c:	93 1f       	adc	r25, r19
    e12e:	9c 83       	std	Y+4, r25	; 0x04
    e130:	8b 83       	std	Y+3, r24	; 0x03
    e132:	c4 cf       	rjmp	.-120    	; 0xe0bc <_ZL5expr2v+0x36>
		}
		else
			return a;
    e134:	8b 81       	ldd	r24, Y+3	; 0x03
    e136:	9c 81       	ldd	r25, Y+4	; 0x04
	}
}
    e138:	0f 90       	pop	r0
    e13a:	0f 90       	pop	r0
    e13c:	0f 90       	pop	r0
    e13e:	0f 90       	pop	r0
    e140:	cf 91       	pop	r28
    e142:	df 91       	pop	r29
    e144:	08 95       	ret

0000e146 <_ZL10expressionv>:
/***************************************************************************/
static short int expression(void)
    e146:	df 93       	push	r29
    e148:	cf 93       	push	r28
    e14a:	cd b7       	in	r28, 0x3d	; 61
    e14c:	de b7       	in	r29, 0x3e	; 62
    e14e:	28 97       	sbiw	r28, 0x08	; 8
    e150:	0f b6       	in	r0, 0x3f	; 63
    e152:	f8 94       	cli
    e154:	de bf       	out	0x3e, r29	; 62
    e156:	0f be       	out	0x3f, r0	; 63
    e158:	cd bf       	out	0x3d, r28	; 61
{
	short int a,b;

	a = expr2();
    e15a:	0e 94 43 70 	call	0xe086	; 0xe086 <_ZL5expr2v>
    e15e:	9c 83       	std	Y+4, r25	; 0x04
    e160:	8b 83       	std	Y+3, r24	; 0x03

	// Check if we have an error
	if(expression_error)	return a;
    e162:	80 91 77 07 	lds	r24, 0x0777
    e166:	88 23       	and	r24, r24
    e168:	29 f0       	breq	.+10     	; 0xe174 <_ZL10expressionv+0x2e>
    e16a:	2b 81       	ldd	r18, Y+3	; 0x03
    e16c:	3c 81       	ldd	r19, Y+4	; 0x04
    e16e:	38 87       	std	Y+8, r19	; 0x08
    e170:	2f 83       	std	Y+7, r18	; 0x07
    e172:	a3 c0       	rjmp	.+326    	; 0xe2ba <_ZL10expressionv+0x174>

	scantable(relop_tab);
    e174:	89 e0       	ldi	r24, 0x09	; 9
    e176:	92 e0       	ldi	r25, 0x02	; 2
    e178:	0e 94 39 6a 	call	0xd472	; 0xd472 <_ZL9scantablePh>
	if(table_index == RELOP_UNKNOWN)
    e17c:	80 91 76 07 	lds	r24, 0x0776
    e180:	87 30       	cpi	r24, 0x07	; 7
    e182:	29 f4       	brne	.+10     	; 0xe18e <_ZL10expressionv+0x48>
		return a;
    e184:	8b 81       	ldd	r24, Y+3	; 0x03
    e186:	9c 81       	ldd	r25, Y+4	; 0x04
    e188:	98 87       	std	Y+8, r25	; 0x08
    e18a:	8f 83       	std	Y+7, r24	; 0x07
    e18c:	96 c0       	rjmp	.+300    	; 0xe2ba <_ZL10expressionv+0x174>
	
	switch(table_index)
    e18e:	80 91 76 07 	lds	r24, 0x0776
    e192:	28 2f       	mov	r18, r24
    e194:	30 e0       	ldi	r19, 0x00	; 0
    e196:	3e 83       	std	Y+6, r19	; 0x06
    e198:	2d 83       	std	Y+5, r18	; 0x05
    e19a:	8d 81       	ldd	r24, Y+5	; 0x05
    e19c:	9e 81       	ldd	r25, Y+6	; 0x06
    e19e:	83 30       	cpi	r24, 0x03	; 3
    e1a0:	91 05       	cpc	r25, r1
    e1a2:	09 f4       	brne	.+2      	; 0xe1a6 <_ZL10expressionv+0x60>
    e1a4:	58 c0       	rjmp	.+176    	; 0xe256 <_ZL10expressionv+0x110>
    e1a6:	2d 81       	ldd	r18, Y+5	; 0x05
    e1a8:	3e 81       	ldd	r19, Y+6	; 0x06
    e1aa:	24 30       	cpi	r18, 0x04	; 4
    e1ac:	31 05       	cpc	r19, r1
    e1ae:	7c f4       	brge	.+30     	; 0xe1ce <_ZL10expressionv+0x88>
    e1b0:	8d 81       	ldd	r24, Y+5	; 0x05
    e1b2:	9e 81       	ldd	r25, Y+6	; 0x06
    e1b4:	81 30       	cpi	r24, 0x01	; 1
    e1b6:	91 05       	cpc	r25, r1
    e1b8:	69 f1       	breq	.+90     	; 0xe214 <_ZL10expressionv+0xce>
    e1ba:	2d 81       	ldd	r18, Y+5	; 0x05
    e1bc:	3e 81       	ldd	r19, Y+6	; 0x06
    e1be:	22 30       	cpi	r18, 0x02	; 2
    e1c0:	31 05       	cpc	r19, r1
    e1c2:	cc f5       	brge	.+114    	; 0xe236 <_ZL10expressionv+0xf0>
    e1c4:	8d 81       	ldd	r24, Y+5	; 0x05
    e1c6:	9e 81       	ldd	r25, Y+6	; 0x06
    e1c8:	00 97       	sbiw	r24, 0x00	; 0
    e1ca:	99 f0       	breq	.+38     	; 0xe1f2 <_ZL10expressionv+0xac>
    e1cc:	74 c0       	rjmp	.+232    	; 0xe2b6 <_ZL10expressionv+0x170>
    e1ce:	2d 81       	ldd	r18, Y+5	; 0x05
    e1d0:	3e 81       	ldd	r19, Y+6	; 0x06
    e1d2:	25 30       	cpi	r18, 0x05	; 5
    e1d4:	31 05       	cpc	r19, r1
    e1d6:	09 f4       	brne	.+2      	; 0xe1da <_ZL10expressionv+0x94>
    e1d8:	5e c0       	rjmp	.+188    	; 0xe296 <_ZL10expressionv+0x150>
    e1da:	8d 81       	ldd	r24, Y+5	; 0x05
    e1dc:	9e 81       	ldd	r25, Y+6	; 0x06
    e1de:	85 30       	cpi	r24, 0x05	; 5
    e1e0:	91 05       	cpc	r25, r1
    e1e2:	0c f4       	brge	.+2      	; 0xe1e6 <_ZL10expressionv+0xa0>
    e1e4:	48 c0       	rjmp	.+144    	; 0xe276 <_ZL10expressionv+0x130>
    e1e6:	2d 81       	ldd	r18, Y+5	; 0x05
    e1e8:	3e 81       	ldd	r19, Y+6	; 0x06
    e1ea:	26 30       	cpi	r18, 0x06	; 6
    e1ec:	31 05       	cpc	r19, r1
    e1ee:	91 f0       	breq	.+36     	; 0xe214 <_ZL10expressionv+0xce>
    e1f0:	62 c0       	rjmp	.+196    	; 0xe2b6 <_ZL10expressionv+0x170>
	{
	case RELOP_GE:
		b = expr2();
    e1f2:	0e 94 43 70 	call	0xe086	; 0xe086 <_ZL5expr2v>
    e1f6:	9a 83       	std	Y+2, r25	; 0x02
    e1f8:	89 83       	std	Y+1, r24	; 0x01
		if(a >= b) return 1;
    e1fa:	2b 81       	ldd	r18, Y+3	; 0x03
    e1fc:	3c 81       	ldd	r19, Y+4	; 0x04
    e1fe:	89 81       	ldd	r24, Y+1	; 0x01
    e200:	9a 81       	ldd	r25, Y+2	; 0x02
    e202:	28 17       	cp	r18, r24
    e204:	39 07       	cpc	r19, r25
    e206:	0c f4       	brge	.+2      	; 0xe20a <_ZL10expressionv+0xc4>
    e208:	56 c0       	rjmp	.+172    	; 0xe2b6 <_ZL10expressionv+0x170>
    e20a:	81 e0       	ldi	r24, 0x01	; 1
    e20c:	90 e0       	ldi	r25, 0x00	; 0
    e20e:	98 87       	std	Y+8, r25	; 0x08
    e210:	8f 83       	std	Y+7, r24	; 0x07
    e212:	53 c0       	rjmp	.+166    	; 0xe2ba <_ZL10expressionv+0x174>
		break;
	case RELOP_NE:
	case RELOP_NE_BANG:
		b = expr2();
    e214:	0e 94 43 70 	call	0xe086	; 0xe086 <_ZL5expr2v>
    e218:	9a 83       	std	Y+2, r25	; 0x02
    e21a:	89 83       	std	Y+1, r24	; 0x01
		if(a != b) return 1;
    e21c:	2b 81       	ldd	r18, Y+3	; 0x03
    e21e:	3c 81       	ldd	r19, Y+4	; 0x04
    e220:	89 81       	ldd	r24, Y+1	; 0x01
    e222:	9a 81       	ldd	r25, Y+2	; 0x02
    e224:	28 17       	cp	r18, r24
    e226:	39 07       	cpc	r19, r25
    e228:	09 f4       	brne	.+2      	; 0xe22c <_ZL10expressionv+0xe6>
    e22a:	45 c0       	rjmp	.+138    	; 0xe2b6 <_ZL10expressionv+0x170>
    e22c:	21 e0       	ldi	r18, 0x01	; 1
    e22e:	30 e0       	ldi	r19, 0x00	; 0
    e230:	38 87       	std	Y+8, r19	; 0x08
    e232:	2f 83       	std	Y+7, r18	; 0x07
    e234:	42 c0       	rjmp	.+132    	; 0xe2ba <_ZL10expressionv+0x174>
		break;
	case RELOP_GT:
		b = expr2();
    e236:	0e 94 43 70 	call	0xe086	; 0xe086 <_ZL5expr2v>
    e23a:	9a 83       	std	Y+2, r25	; 0x02
    e23c:	89 83       	std	Y+1, r24	; 0x01
		if(a > b) return 1;
    e23e:	2b 81       	ldd	r18, Y+3	; 0x03
    e240:	3c 81       	ldd	r19, Y+4	; 0x04
    e242:	89 81       	ldd	r24, Y+1	; 0x01
    e244:	9a 81       	ldd	r25, Y+2	; 0x02
    e246:	82 17       	cp	r24, r18
    e248:	93 07       	cpc	r25, r19
    e24a:	ac f5       	brge	.+106    	; 0xe2b6 <_ZL10expressionv+0x170>
    e24c:	81 e0       	ldi	r24, 0x01	; 1
    e24e:	90 e0       	ldi	r25, 0x00	; 0
    e250:	98 87       	std	Y+8, r25	; 0x08
    e252:	8f 83       	std	Y+7, r24	; 0x07
    e254:	32 c0       	rjmp	.+100    	; 0xe2ba <_ZL10expressionv+0x174>
		break;
	case RELOP_EQ:
		b = expr2();
    e256:	0e 94 43 70 	call	0xe086	; 0xe086 <_ZL5expr2v>
    e25a:	9a 83       	std	Y+2, r25	; 0x02
    e25c:	89 83       	std	Y+1, r24	; 0x01
		if(a == b) return 1;
    e25e:	2b 81       	ldd	r18, Y+3	; 0x03
    e260:	3c 81       	ldd	r19, Y+4	; 0x04
    e262:	89 81       	ldd	r24, Y+1	; 0x01
    e264:	9a 81       	ldd	r25, Y+2	; 0x02
    e266:	28 17       	cp	r18, r24
    e268:	39 07       	cpc	r19, r25
    e26a:	29 f5       	brne	.+74     	; 0xe2b6 <_ZL10expressionv+0x170>
    e26c:	21 e0       	ldi	r18, 0x01	; 1
    e26e:	30 e0       	ldi	r19, 0x00	; 0
    e270:	38 87       	std	Y+8, r19	; 0x08
    e272:	2f 83       	std	Y+7, r18	; 0x07
    e274:	22 c0       	rjmp	.+68     	; 0xe2ba <_ZL10expressionv+0x174>
		break;
	case RELOP_LE:
		b = expr2();
    e276:	0e 94 43 70 	call	0xe086	; 0xe086 <_ZL5expr2v>
    e27a:	9a 83       	std	Y+2, r25	; 0x02
    e27c:	89 83       	std	Y+1, r24	; 0x01
		if(a <= b) return 1;
    e27e:	2b 81       	ldd	r18, Y+3	; 0x03
    e280:	3c 81       	ldd	r19, Y+4	; 0x04
    e282:	89 81       	ldd	r24, Y+1	; 0x01
    e284:	9a 81       	ldd	r25, Y+2	; 0x02
    e286:	82 17       	cp	r24, r18
    e288:	93 07       	cpc	r25, r19
    e28a:	ac f0       	brlt	.+42     	; 0xe2b6 <_ZL10expressionv+0x170>
    e28c:	81 e0       	ldi	r24, 0x01	; 1
    e28e:	90 e0       	ldi	r25, 0x00	; 0
    e290:	98 87       	std	Y+8, r25	; 0x08
    e292:	8f 83       	std	Y+7, r24	; 0x07
    e294:	12 c0       	rjmp	.+36     	; 0xe2ba <_ZL10expressionv+0x174>
		break;
	case RELOP_LT:
		b = expr2();
    e296:	0e 94 43 70 	call	0xe086	; 0xe086 <_ZL5expr2v>
    e29a:	9a 83       	std	Y+2, r25	; 0x02
    e29c:	89 83       	std	Y+1, r24	; 0x01
		if(a < b) return 1;
    e29e:	2b 81       	ldd	r18, Y+3	; 0x03
    e2a0:	3c 81       	ldd	r19, Y+4	; 0x04
    e2a2:	89 81       	ldd	r24, Y+1	; 0x01
    e2a4:	9a 81       	ldd	r25, Y+2	; 0x02
    e2a6:	28 17       	cp	r18, r24
    e2a8:	39 07       	cpc	r19, r25
    e2aa:	2c f4       	brge	.+10     	; 0xe2b6 <_ZL10expressionv+0x170>
    e2ac:	21 e0       	ldi	r18, 0x01	; 1
    e2ae:	30 e0       	ldi	r19, 0x00	; 0
    e2b0:	38 87       	std	Y+8, r19	; 0x08
    e2b2:	2f 83       	std	Y+7, r18	; 0x07
    e2b4:	02 c0       	rjmp	.+4      	; 0xe2ba <_ZL10expressionv+0x174>
		break;
	}
	return 0;
    e2b6:	18 86       	std	Y+8, r1	; 0x08
    e2b8:	1f 82       	std	Y+7, r1	; 0x07
    e2ba:	8f 81       	ldd	r24, Y+7	; 0x07
    e2bc:	98 85       	ldd	r25, Y+8	; 0x08
}
    e2be:	28 96       	adiw	r28, 0x08	; 8
    e2c0:	0f b6       	in	r0, 0x3f	; 63
    e2c2:	f8 94       	cli
    e2c4:	de bf       	out	0x3e, r29	; 62
    e2c6:	0f be       	out	0x3f, r0	; 63
    e2c8:	cd bf       	out	0x3d, r28	; 61
    e2ca:	cf 91       	pop	r28
    e2cc:	df 91       	pop	r29
    e2ce:	08 95       	ret

0000e2d0 <loop>:

/***************************************************************************/
void loop()
    e2d0:	df 93       	push	r29
    e2d2:	cf 93       	push	r28
    e2d4:	cd b7       	in	r28, 0x3d	; 61
    e2d6:	de b7       	in	r29, 0x3e	; 62
    e2d8:	ca 54       	subi	r28, 0x4A	; 74
    e2da:	d0 40       	sbci	r29, 0x00	; 0
    e2dc:	0f b6       	in	r0, 0x3f	; 63
    e2de:	f8 94       	cli
    e2e0:	de bf       	out	0x3e, r29	; 62
    e2e2:	0f be       	out	0x3f, r0	; 63
    e2e4:	cd bf       	out	0x3d, r28	; 61
{
	unsigned char *start;
	unsigned char *newEnd;
	unsigned char linelen;
        boolean isDigital;
        boolean alsoWait = false;
    e2e6:	1e ae       	std	Y+62, r1	; 0x3e
        int val;

#if ENABLE_TONES
        noTone( kPiezoPin );
    e2e8:	85 e0       	ldi	r24, 0x05	; 5
    e2ea:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <_Z6noToneh>
#endif

	program_start = program;
    e2ee:	86 e6       	ldi	r24, 0x66	; 102
    e2f0:	96 e0       	ldi	r25, 0x06	; 6
    e2f2:	90 93 65 06 	sts	0x0665, r25
    e2f6:	80 93 64 06 	sts	0x0664, r24
	program_end = program_start;
    e2fa:	80 91 64 06 	lds	r24, 0x0664
    e2fe:	90 91 65 06 	lds	r25, 0x0665
    e302:	90 93 66 07 	sts	0x0766, r25
    e306:	80 93 65 07 	sts	0x0765, r24
	sp = program+sizeof(program);  // Needed for printnum
    e30a:	85 e6       	ldi	r24, 0x65	; 101
    e30c:	97 e0       	ldi	r25, 0x07	; 7
    e30e:	90 93 68 07 	sts	0x0768, r25
    e312:	80 93 67 07 	sts	0x0767, r24
	stack_limit = program+sizeof(program)-STACK_SIZE;
    e316:	83 e3       	ldi	r24, 0x33	; 51
    e318:	97 e0       	ldi	r25, 0x07	; 7
    e31a:	90 93 6a 07 	sts	0x076A, r25
    e31e:	80 93 69 07 	sts	0x0769, r24
	variables_begin = stack_limit - 27*VAR_SIZE;
    e322:	80 91 69 07 	lds	r24, 0x0769
    e326:	90 91 6a 07 	lds	r25, 0x076A
    e32a:	c6 97       	sbiw	r24, 0x36	; 54
    e32c:	90 93 6c 07 	sts	0x076C, r25
    e330:	80 93 6b 07 	sts	0x076B, r24
	printmsg(initmsg);
    e334:	84 e2       	ldi	r24, 0x24	; 36
    e336:	91 e0       	ldi	r25, 0x01	; 1
    e338:	0e 94 a5 6c 	call	0xd94a	; 0xd94a <_Z8printmsgPKh>
	printnum(variables_begin-program_end);
    e33c:	80 91 6b 07 	lds	r24, 0x076B
    e340:	90 91 6c 07 	lds	r25, 0x076C
    e344:	9c 01       	movw	r18, r24
    e346:	80 91 65 07 	lds	r24, 0x0765
    e34a:	90 91 66 07 	lds	r25, 0x0766
    e34e:	a9 01       	movw	r20, r18
    e350:	48 1b       	sub	r20, r24
    e352:	59 0b       	sbc	r21, r25
    e354:	ca 01       	movw	r24, r20
    e356:	0e 94 f4 6c 	call	0xd9e8	; 0xd9e8 <_Z8printnumi>
	printmsg(memorymsg);
    e35a:	89 e3       	ldi	r24, 0x39	; 57
    e35c:	91 e0       	ldi	r25, 0x01	; 1
    e35e:	0e 94 a5 6c 	call	0xd94a	; 0xd94a <_Z8printmsgPKh>

warmstart:
	// this signifies that it is running in 'direct' mode.
	current_line = 0;
    e362:	10 92 6e 07 	sts	0x076E, r1
    e366:	10 92 6d 07 	sts	0x076D, r1
	sp = program+sizeof(program);
    e36a:	85 e6       	ldi	r24, 0x65	; 101
    e36c:	97 e0       	ldi	r25, 0x07	; 7
    e36e:	90 93 68 07 	sts	0x0768, r25
    e372:	80 93 67 07 	sts	0x0767, r24
	printmsg(okmsg);
    e376:	86 e4       	ldi	r24, 0x46	; 70
    e378:	91 e0       	ldi	r25, 0x01	; 1
    e37a:	0e 94 a5 6c 	call	0xd94a	; 0xd94a <_Z8printmsgPKh>

prompt:
        if( triggerRun ){
    e37e:	80 91 6f 07 	lds	r24, 0x076F
    e382:	88 23       	and	r24, r24
    e384:	59 f0       	breq	.+22     	; 0xe39c <loop+0xcc>
          triggerRun = false;
    e386:	10 92 6f 07 	sts	0x076F, r1
          current_line = program_start;
    e38a:	80 91 64 06 	lds	r24, 0x0664
    e38e:	90 91 65 06 	lds	r25, 0x0665
    e392:	90 93 6e 07 	sts	0x076E, r25
    e396:	80 93 6d 07 	sts	0x076D, r24
    e39a:	1a c4       	rjmp	.+2100   	; 0xebd0 <loop+0x900>
          goto execline;
        }

	getln('>');
    e39c:	8e e3       	ldi	r24, 0x3E	; 62
    e39e:	0e 94 9f 6d 	call	0xdb3e	; 0xdb3e <_ZL5getlnc>
	toUppercaseBuffer();
    e3a2:	0e 94 6a 6b 	call	0xd6d4	; 0xd6d4 <_ZL17toUppercaseBufferv>

	txtpos = program_end+sizeof(unsigned short);
    e3a6:	80 91 65 07 	lds	r24, 0x0765
    e3aa:	90 91 66 07 	lds	r25, 0x0766
    e3ae:	02 96       	adiw	r24, 0x02	; 2
    e3b0:	90 93 71 07 	sts	0x0771, r25
    e3b4:	80 93 70 07 	sts	0x0770, r24
    e3b8:	09 c0       	rjmp	.+18     	; 0xe3cc <loop+0xfc>

	// Find the end of the freshly entered line
	while(*txtpos != NL)
		txtpos++;
    e3ba:	80 91 70 07 	lds	r24, 0x0770
    e3be:	90 91 71 07 	lds	r25, 0x0771
    e3c2:	01 96       	adiw	r24, 0x01	; 1
    e3c4:	90 93 71 07 	sts	0x0771, r25
    e3c8:	80 93 70 07 	sts	0x0770, r24
	toUppercaseBuffer();

	txtpos = program_end+sizeof(unsigned short);

	// Find the end of the freshly entered line
	while(*txtpos != NL)
    e3cc:	e0 91 70 07 	lds	r30, 0x0770
    e3d0:	f0 91 71 07 	lds	r31, 0x0771
    e3d4:	80 81       	ld	r24, Z
    e3d6:	8a 30       	cpi	r24, 0x0A	; 10
    e3d8:	81 f7       	brne	.-32     	; 0xe3ba <loop+0xea>
		txtpos++;

	// Move it to the end of program_memory
	{
		unsigned char *dest;
		dest = variables_begin-1;
    e3da:	80 91 6b 07 	lds	r24, 0x076B
    e3de:	90 91 6c 07 	lds	r25, 0x076C
    e3e2:	01 97       	sbiw	r24, 0x01	; 1
    e3e4:	9b af       	std	Y+59, r25	; 0x3b
    e3e6:	8a af       	std	Y+58, r24	; 0x3a
		while(1)
		{
			*dest = *txtpos;
    e3e8:	e0 91 70 07 	lds	r30, 0x0770
    e3ec:	f0 91 71 07 	lds	r31, 0x0771
    e3f0:	80 81       	ld	r24, Z
    e3f2:	ea ad       	ldd	r30, Y+58	; 0x3a
    e3f4:	fb ad       	ldd	r31, Y+59	; 0x3b
    e3f6:	80 83       	st	Z, r24
			if(txtpos == program_end+sizeof(unsigned short))
    e3f8:	80 91 65 07 	lds	r24, 0x0765
    e3fc:	90 91 66 07 	lds	r25, 0x0766
    e400:	9c 01       	movw	r18, r24
    e402:	2e 5f       	subi	r18, 0xFE	; 254
    e404:	3f 4f       	sbci	r19, 0xFF	; 255
    e406:	80 91 70 07 	lds	r24, 0x0770
    e40a:	90 91 71 07 	lds	r25, 0x0771
    e40e:	28 17       	cp	r18, r24
    e410:	39 07       	cpc	r19, r25
    e412:	79 f0       	breq	.+30     	; 0xe432 <loop+0x162>
				break;
			dest--;
    e414:	8a ad       	ldd	r24, Y+58	; 0x3a
    e416:	9b ad       	ldd	r25, Y+59	; 0x3b
    e418:	01 97       	sbiw	r24, 0x01	; 1
    e41a:	9b af       	std	Y+59, r25	; 0x3b
    e41c:	8a af       	std	Y+58, r24	; 0x3a
			txtpos--;
    e41e:	80 91 70 07 	lds	r24, 0x0770
    e422:	90 91 71 07 	lds	r25, 0x0771
    e426:	01 97       	sbiw	r24, 0x01	; 1
    e428:	90 93 71 07 	sts	0x0771, r25
    e42c:	80 93 70 07 	sts	0x0770, r24
    e430:	db cf       	rjmp	.-74     	; 0xe3e8 <loop+0x118>
		}
		txtpos = dest;
    e432:	8a ad       	ldd	r24, Y+58	; 0x3a
    e434:	9b ad       	ldd	r25, Y+59	; 0x3b
    e436:	90 93 71 07 	sts	0x0771, r25
    e43a:	80 93 70 07 	sts	0x0770, r24
	}

	// Now see if we have a line number
	linenum = testnum();
    e43e:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <_ZL7testnumv>
    e442:	90 93 73 07 	sts	0x0773, r25
    e446:	80 93 72 07 	sts	0x0772, r24
	ignore_blanks();
    e44a:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
	if(linenum == 0)
    e44e:	80 91 72 07 	lds	r24, 0x0772
    e452:	90 91 73 07 	lds	r25, 0x0773
    e456:	00 97       	sbiw	r24, 0x00	; 0
    e458:	09 f4       	brne	.+2      	; 0xe45c <loop+0x18c>
    e45a:	d8 c1       	rjmp	.+944    	; 0xe80c <loop+0x53c>
		goto direct;

	if(linenum == 0xFFFF)
    e45c:	80 91 72 07 	lds	r24, 0x0772
    e460:	90 91 73 07 	lds	r25, 0x0773
    e464:	5f ef       	ldi	r21, 0xFF	; 255
    e466:	8f 3f       	cpi	r24, 0xFF	; 255
    e468:	95 07       	cpc	r25, r21
    e46a:	09 f4       	brne	.+2      	; 0xe46e <loop+0x19e>
    e46c:	7a c1       	rjmp	.+756    	; 0xe762 <loop+0x492>
		goto qhow;

	// Find the length of what is left, including the (yet-to-be-populated) line header
	linelen = 0;
    e46e:	fe 01       	movw	r30, r28
    e470:	e0 5c       	subi	r30, 0xC0	; 192
    e472:	ff 4f       	sbci	r31, 0xFF	; 255
    e474:	10 82       	st	Z, r1
    e476:	09 c0       	rjmp	.+18     	; 0xe48a <loop+0x1ba>
	while(txtpos[linelen] != NL)
		linelen++;
    e478:	fe 01       	movw	r30, r28
    e47a:	e0 5c       	subi	r30, 0xC0	; 192
    e47c:	ff 4f       	sbci	r31, 0xFF	; 255
    e47e:	80 81       	ld	r24, Z
    e480:	8f 5f       	subi	r24, 0xFF	; 255
    e482:	fe 01       	movw	r30, r28
    e484:	e0 5c       	subi	r30, 0xC0	; 192
    e486:	ff 4f       	sbci	r31, 0xFF	; 255
    e488:	80 83       	st	Z, r24
	if(linenum == 0xFFFF)
		goto qhow;

	// Find the length of what is left, including the (yet-to-be-populated) line header
	linelen = 0;
	while(txtpos[linelen] != NL)
    e48a:	20 91 70 07 	lds	r18, 0x0770
    e48e:	30 91 71 07 	lds	r19, 0x0771
    e492:	fe 01       	movw	r30, r28
    e494:	e0 5c       	subi	r30, 0xC0	; 192
    e496:	ff 4f       	sbci	r31, 0xFF	; 255
    e498:	80 81       	ld	r24, Z
    e49a:	88 2f       	mov	r24, r24
    e49c:	90 e0       	ldi	r25, 0x00	; 0
    e49e:	f9 01       	movw	r30, r18
    e4a0:	e8 0f       	add	r30, r24
    e4a2:	f9 1f       	adc	r31, r25
    e4a4:	80 81       	ld	r24, Z
    e4a6:	8a 30       	cpi	r24, 0x0A	; 10
    e4a8:	39 f7       	brne	.-50     	; 0xe478 <loop+0x1a8>
		linelen++;
	linelen++; // Include the NL in the line length
    e4aa:	fe 01       	movw	r30, r28
    e4ac:	e0 5c       	subi	r30, 0xC0	; 192
    e4ae:	ff 4f       	sbci	r31, 0xFF	; 255
    e4b0:	80 81       	ld	r24, Z
    e4b2:	8f 5f       	subi	r24, 0xFF	; 255
    e4b4:	fe 01       	movw	r30, r28
    e4b6:	e0 5c       	subi	r30, 0xC0	; 192
    e4b8:	ff 4f       	sbci	r31, 0xFF	; 255
    e4ba:	80 83       	st	Z, r24
	linelen += sizeof(unsigned short)+sizeof(char); // Add space for the line number and line length
    e4bc:	fe 01       	movw	r30, r28
    e4be:	e0 5c       	subi	r30, 0xC0	; 192
    e4c0:	ff 4f       	sbci	r31, 0xFF	; 255
    e4c2:	80 81       	ld	r24, Z
    e4c4:	8d 5f       	subi	r24, 0xFD	; 253
    e4c6:	fe 01       	movw	r30, r28
    e4c8:	e0 5c       	subi	r30, 0xC0	; 192
    e4ca:	ff 4f       	sbci	r31, 0xFF	; 255
    e4cc:	80 83       	st	Z, r24

	// Now we have the number, add the line header.
	txtpos -= 3;
    e4ce:	80 91 70 07 	lds	r24, 0x0770
    e4d2:	90 91 71 07 	lds	r25, 0x0771
    e4d6:	03 97       	sbiw	r24, 0x03	; 3
    e4d8:	90 93 71 07 	sts	0x0771, r25
    e4dc:	80 93 70 07 	sts	0x0770, r24
	*((unsigned short *)txtpos) = linenum;
    e4e0:	80 91 70 07 	lds	r24, 0x0770
    e4e4:	90 91 71 07 	lds	r25, 0x0771
    e4e8:	fc 01       	movw	r30, r24
    e4ea:	80 91 72 07 	lds	r24, 0x0772
    e4ee:	90 91 73 07 	lds	r25, 0x0773
    e4f2:	91 83       	std	Z+1, r25	; 0x01
    e4f4:	80 83       	st	Z, r24
	txtpos[sizeof(LINENUM)] = linelen;
    e4f6:	80 91 70 07 	lds	r24, 0x0770
    e4fa:	90 91 71 07 	lds	r25, 0x0771
    e4fe:	dc 01       	movw	r26, r24
    e500:	12 96       	adiw	r26, 0x02	; 2
    e502:	fe 01       	movw	r30, r28
    e504:	e0 5c       	subi	r30, 0xC0	; 192
    e506:	ff 4f       	sbci	r31, 0xFF	; 255
    e508:	80 81       	ld	r24, Z
    e50a:	8c 93       	st	X, r24


	// Merge it into the rest of the program
	start = findline();
    e50c:	0e 94 29 6b 	call	0xd652	; 0xd652 <_ZL8findlinev>
    e510:	fe 01       	movw	r30, r28
    e512:	ed 5b       	subi	r30, 0xBD	; 189
    e514:	ff 4f       	sbci	r31, 0xFF	; 255
    e516:	91 83       	std	Z+1, r25	; 0x01
    e518:	80 83       	st	Z, r24

	// If a line with that number exists, then remove it
	if(start != program_end && *((LINENUM *)start) == linenum)
    e51a:	20 91 65 07 	lds	r18, 0x0765
    e51e:	30 91 66 07 	lds	r19, 0x0766
    e522:	fe 01       	movw	r30, r28
    e524:	ed 5b       	subi	r30, 0xBD	; 189
    e526:	ff 4f       	sbci	r31, 0xFF	; 255
    e528:	80 81       	ld	r24, Z
    e52a:	91 81       	ldd	r25, Z+1	; 0x01
    e52c:	82 17       	cp	r24, r18
    e52e:	93 07       	cpc	r25, r19
    e530:	09 f4       	brne	.+2      	; 0xe534 <loop+0x264>
    e532:	57 c0       	rjmp	.+174    	; 0xe5e2 <loop+0x312>
    e534:	fe 01       	movw	r30, r28
    e536:	ed 5b       	subi	r30, 0xBD	; 189
    e538:	ff 4f       	sbci	r31, 0xFF	; 255
    e53a:	01 90       	ld	r0, Z+
    e53c:	f0 81       	ld	r31, Z
    e53e:	e0 2d       	mov	r30, r0
    e540:	20 81       	ld	r18, Z
    e542:	31 81       	ldd	r19, Z+1	; 0x01
    e544:	80 91 72 07 	lds	r24, 0x0772
    e548:	90 91 73 07 	lds	r25, 0x0773
    e54c:	28 17       	cp	r18, r24
    e54e:	39 07       	cpc	r19, r25
    e550:	09 f0       	breq	.+2      	; 0xe554 <loop+0x284>
    e552:	47 c0       	rjmp	.+142    	; 0xe5e2 <loop+0x312>
	{
		unsigned char *dest, *from;
		unsigned tomove;

		from = start + start[sizeof(LINENUM)];
    e554:	fe 01       	movw	r30, r28
    e556:	ed 5b       	subi	r30, 0xBD	; 189
    e558:	ff 4f       	sbci	r31, 0xFF	; 255
    e55a:	80 81       	ld	r24, Z
    e55c:	91 81       	ldd	r25, Z+1	; 0x01
    e55e:	fc 01       	movw	r30, r24
    e560:	32 96       	adiw	r30, 0x02	; 2
    e562:	80 81       	ld	r24, Z
    e564:	28 2f       	mov	r18, r24
    e566:	30 e0       	ldi	r19, 0x00	; 0
    e568:	fe 01       	movw	r30, r28
    e56a:	ed 5b       	subi	r30, 0xBD	; 189
    e56c:	ff 4f       	sbci	r31, 0xFF	; 255
    e56e:	80 81       	ld	r24, Z
    e570:	91 81       	ldd	r25, Z+1	; 0x01
    e572:	82 0f       	add	r24, r18
    e574:	93 1f       	adc	r25, r19
    e576:	9f ab       	std	Y+55, r25	; 0x37
    e578:	8e ab       	std	Y+54, r24	; 0x36
		dest = start;
    e57a:	fe 01       	movw	r30, r28
    e57c:	ed 5b       	subi	r30, 0xBD	; 189
    e57e:	ff 4f       	sbci	r31, 0xFF	; 255
    e580:	80 81       	ld	r24, Z
    e582:	91 81       	ldd	r25, Z+1	; 0x01
    e584:	99 af       	std	Y+57, r25	; 0x39
    e586:	88 af       	std	Y+56, r24	; 0x38

		tomove = program_end - from;
    e588:	80 91 65 07 	lds	r24, 0x0765
    e58c:	90 91 66 07 	lds	r25, 0x0766
    e590:	9c 01       	movw	r18, r24
    e592:	8e a9       	ldd	r24, Y+54	; 0x36
    e594:	9f a9       	ldd	r25, Y+55	; 0x37
    e596:	a9 01       	movw	r20, r18
    e598:	48 1b       	sub	r20, r24
    e59a:	59 0b       	sbc	r21, r25
    e59c:	ca 01       	movw	r24, r20
    e59e:	9d ab       	std	Y+53, r25	; 0x35
    e5a0:	8c ab       	std	Y+52, r24	; 0x34
    e5a2:	15 c0       	rjmp	.+42     	; 0xe5ce <loop+0x2fe>
		while( tomove > 0)
		{
			*dest = *from;
    e5a4:	ee a9       	ldd	r30, Y+54	; 0x36
    e5a6:	ff a9       	ldd	r31, Y+55	; 0x37
    e5a8:	80 81       	ld	r24, Z
    e5aa:	e8 ad       	ldd	r30, Y+56	; 0x38
    e5ac:	f9 ad       	ldd	r31, Y+57	; 0x39
    e5ae:	80 83       	st	Z, r24
			from++;
    e5b0:	8e a9       	ldd	r24, Y+54	; 0x36
    e5b2:	9f a9       	ldd	r25, Y+55	; 0x37
    e5b4:	01 96       	adiw	r24, 0x01	; 1
    e5b6:	9f ab       	std	Y+55, r25	; 0x37
    e5b8:	8e ab       	std	Y+54, r24	; 0x36
			dest++;
    e5ba:	88 ad       	ldd	r24, Y+56	; 0x38
    e5bc:	99 ad       	ldd	r25, Y+57	; 0x39
    e5be:	01 96       	adiw	r24, 0x01	; 1
    e5c0:	99 af       	std	Y+57, r25	; 0x39
    e5c2:	88 af       	std	Y+56, r24	; 0x38
			tomove--;
    e5c4:	8c a9       	ldd	r24, Y+52	; 0x34
    e5c6:	9d a9       	ldd	r25, Y+53	; 0x35
    e5c8:	01 97       	sbiw	r24, 0x01	; 1
    e5ca:	9d ab       	std	Y+53, r25	; 0x35
    e5cc:	8c ab       	std	Y+52, r24	; 0x34

		from = start + start[sizeof(LINENUM)];
		dest = start;

		tomove = program_end - from;
		while( tomove > 0)
    e5ce:	8c a9       	ldd	r24, Y+52	; 0x34
    e5d0:	9d a9       	ldd	r25, Y+53	; 0x35
    e5d2:	00 97       	sbiw	r24, 0x00	; 0
    e5d4:	39 f7       	brne	.-50     	; 0xe5a4 <loop+0x2d4>
			*dest = *from;
			from++;
			dest++;
			tomove--;
		}	
		program_end = dest;
    e5d6:	88 ad       	ldd	r24, Y+56	; 0x38
    e5d8:	99 ad       	ldd	r25, Y+57	; 0x39
    e5da:	90 93 66 07 	sts	0x0766, r25
    e5de:	80 93 65 07 	sts	0x0765, r24
	}

	if(txtpos[sizeof(LINENUM)+sizeof(char)] == NL) // If the line has no txt, it was just a delete
    e5e2:	80 91 70 07 	lds	r24, 0x0770
    e5e6:	90 91 71 07 	lds	r25, 0x0771
    e5ea:	fc 01       	movw	r30, r24
    e5ec:	33 96       	adiw	r30, 0x03	; 3
    e5ee:	80 81       	ld	r24, Z
    e5f0:	8a 30       	cpi	r24, 0x0A	; 10
    e5f2:	09 f4       	brne	.+2      	; 0xe5f6 <loop+0x326>
    e5f4:	c4 ce       	rjmp	.-632    	; 0xe37e <loop+0xae>
    e5f6:	a8 c0       	rjmp	.+336    	; 0xe748 <loop+0x478>
	{	
		unsigned int tomove;
		unsigned char *from,*dest;
		unsigned int space_to_make;
	
		space_to_make = txtpos - program_end;
    e5f8:	80 91 70 07 	lds	r24, 0x0770
    e5fc:	90 91 71 07 	lds	r25, 0x0771
    e600:	9c 01       	movw	r18, r24
    e602:	80 91 65 07 	lds	r24, 0x0765
    e606:	90 91 66 07 	lds	r25, 0x0766
    e60a:	a9 01       	movw	r20, r18
    e60c:	48 1b       	sub	r20, r24
    e60e:	59 0b       	sbc	r21, r25
    e610:	ca 01       	movw	r24, r20
    e612:	9d a7       	std	Y+45, r25	; 0x2d
    e614:	8c a7       	std	Y+44, r24	; 0x2c

		if(space_to_make > linelen)
    e616:	fe 01       	movw	r30, r28
    e618:	e0 5c       	subi	r30, 0xC0	; 192
    e61a:	ff 4f       	sbci	r31, 0xFF	; 255
    e61c:	80 81       	ld	r24, Z
    e61e:	28 2f       	mov	r18, r24
    e620:	30 e0       	ldi	r19, 0x00	; 0
    e622:	8c a5       	ldd	r24, Y+44	; 0x2c
    e624:	9d a5       	ldd	r25, Y+45	; 0x2d
    e626:	28 17       	cp	r18, r24
    e628:	39 07       	cpc	r19, r25
    e62a:	40 f4       	brcc	.+16     	; 0xe63c <loop+0x36c>
			space_to_make = linelen;
    e62c:	fe 01       	movw	r30, r28
    e62e:	e0 5c       	subi	r30, 0xC0	; 192
    e630:	ff 4f       	sbci	r31, 0xFF	; 255
    e632:	80 81       	ld	r24, Z
    e634:	88 2f       	mov	r24, r24
    e636:	90 e0       	ldi	r25, 0x00	; 0
    e638:	9d a7       	std	Y+45, r25	; 0x2d
    e63a:	8c a7       	std	Y+44, r24	; 0x2c
		newEnd = program_end+space_to_make;
    e63c:	20 91 65 07 	lds	r18, 0x0765
    e640:	30 91 66 07 	lds	r19, 0x0766
    e644:	fe 01       	movw	r30, r28
    e646:	ef 5b       	subi	r30, 0xBF	; 191
    e648:	ff 4f       	sbci	r31, 0xFF	; 255
    e64a:	8c a5       	ldd	r24, Y+44	; 0x2c
    e64c:	9d a5       	ldd	r25, Y+45	; 0x2d
    e64e:	82 0f       	add	r24, r18
    e650:	93 1f       	adc	r25, r19
    e652:	91 83       	std	Z+1, r25	; 0x01
    e654:	80 83       	st	Z, r24
		tomove = program_end - start;
    e656:	80 91 65 07 	lds	r24, 0x0765
    e65a:	90 91 66 07 	lds	r25, 0x0766
    e65e:	9c 01       	movw	r18, r24
    e660:	fe 01       	movw	r30, r28
    e662:	ed 5b       	subi	r30, 0xBD	; 189
    e664:	ff 4f       	sbci	r31, 0xFF	; 255
    e666:	80 81       	ld	r24, Z
    e668:	91 81       	ldd	r25, Z+1	; 0x01
    e66a:	a9 01       	movw	r20, r18
    e66c:	48 1b       	sub	r20, r24
    e66e:	59 0b       	sbc	r21, r25
    e670:	ca 01       	movw	r24, r20
    e672:	9b ab       	std	Y+51, r25	; 0x33
    e674:	8a ab       	std	Y+50, r24	; 0x32


		// Source and destination - as these areas may overlap we need to move bottom up
		from = program_end;
    e676:	80 91 65 07 	lds	r24, 0x0765
    e67a:	90 91 66 07 	lds	r25, 0x0766
    e67e:	99 ab       	std	Y+49, r25	; 0x31
    e680:	88 ab       	std	Y+48, r24	; 0x30
		dest = newEnd;
    e682:	fe 01       	movw	r30, r28
    e684:	ef 5b       	subi	r30, 0xBF	; 191
    e686:	ff 4f       	sbci	r31, 0xFF	; 255
    e688:	80 81       	ld	r24, Z
    e68a:	91 81       	ldd	r25, Z+1	; 0x01
    e68c:	9f a7       	std	Y+47, r25	; 0x2f
    e68e:	8e a7       	std	Y+46, r24	; 0x2e
    e690:	15 c0       	rjmp	.+42     	; 0xe6bc <loop+0x3ec>
		while(tomove > 0)
		{
			from--;
    e692:	88 a9       	ldd	r24, Y+48	; 0x30
    e694:	99 a9       	ldd	r25, Y+49	; 0x31
    e696:	01 97       	sbiw	r24, 0x01	; 1
    e698:	99 ab       	std	Y+49, r25	; 0x31
    e69a:	88 ab       	std	Y+48, r24	; 0x30
			dest--;
    e69c:	8e a5       	ldd	r24, Y+46	; 0x2e
    e69e:	9f a5       	ldd	r25, Y+47	; 0x2f
    e6a0:	01 97       	sbiw	r24, 0x01	; 1
    e6a2:	9f a7       	std	Y+47, r25	; 0x2f
    e6a4:	8e a7       	std	Y+46, r24	; 0x2e
			*dest = *from;
    e6a6:	e8 a9       	ldd	r30, Y+48	; 0x30
    e6a8:	f9 a9       	ldd	r31, Y+49	; 0x31
    e6aa:	80 81       	ld	r24, Z
    e6ac:	ee a5       	ldd	r30, Y+46	; 0x2e
    e6ae:	ff a5       	ldd	r31, Y+47	; 0x2f
    e6b0:	80 83       	st	Z, r24
			tomove--;
    e6b2:	8a a9       	ldd	r24, Y+50	; 0x32
    e6b4:	9b a9       	ldd	r25, Y+51	; 0x33
    e6b6:	01 97       	sbiw	r24, 0x01	; 1
    e6b8:	9b ab       	std	Y+51, r25	; 0x33
    e6ba:	8a ab       	std	Y+50, r24	; 0x32


		// Source and destination - as these areas may overlap we need to move bottom up
		from = program_end;
		dest = newEnd;
		while(tomove > 0)
    e6bc:	8a a9       	ldd	r24, Y+50	; 0x32
    e6be:	9b a9       	ldd	r25, Y+51	; 0x33
    e6c0:	00 97       	sbiw	r24, 0x00	; 0
    e6c2:	39 f7       	brne	.-50     	; 0xe692 <loop+0x3c2>
			*dest = *from;
			tomove--;
		}

		// Copy over the bytes into the new space
		for(tomove = 0; tomove < space_to_make; tomove++)
    e6c4:	1b aa       	std	Y+51, r1	; 0x33
    e6c6:	1a aa       	std	Y+50, r1	; 0x32
    e6c8:	2f c0       	rjmp	.+94     	; 0xe728 <loop+0x458>
		{
			*start = *txtpos;
    e6ca:	e0 91 70 07 	lds	r30, 0x0770
    e6ce:	f0 91 71 07 	lds	r31, 0x0771
    e6d2:	80 81       	ld	r24, Z
    e6d4:	fe 01       	movw	r30, r28
    e6d6:	ed 5b       	subi	r30, 0xBD	; 189
    e6d8:	ff 4f       	sbci	r31, 0xFF	; 255
    e6da:	01 90       	ld	r0, Z+
    e6dc:	f0 81       	ld	r31, Z
    e6de:	e0 2d       	mov	r30, r0
    e6e0:	80 83       	st	Z, r24
			txtpos++;
    e6e2:	80 91 70 07 	lds	r24, 0x0770
    e6e6:	90 91 71 07 	lds	r25, 0x0771
    e6ea:	01 96       	adiw	r24, 0x01	; 1
    e6ec:	90 93 71 07 	sts	0x0771, r25
    e6f0:	80 93 70 07 	sts	0x0770, r24
			start++;
    e6f4:	de 01       	movw	r26, r28
    e6f6:	ad 5b       	subi	r26, 0xBD	; 189
    e6f8:	bf 4f       	sbci	r27, 0xFF	; 255
    e6fa:	fe 01       	movw	r30, r28
    e6fc:	ed 5b       	subi	r30, 0xBD	; 189
    e6fe:	ff 4f       	sbci	r31, 0xFF	; 255
    e700:	80 81       	ld	r24, Z
    e702:	91 81       	ldd	r25, Z+1	; 0x01
    e704:	01 96       	adiw	r24, 0x01	; 1
    e706:	11 96       	adiw	r26, 0x01	; 1
    e708:	9c 93       	st	X, r25
    e70a:	8e 93       	st	-X, r24
			linelen--;
    e70c:	fe 01       	movw	r30, r28
    e70e:	e0 5c       	subi	r30, 0xC0	; 192
    e710:	ff 4f       	sbci	r31, 0xFF	; 255
    e712:	80 81       	ld	r24, Z
    e714:	81 50       	subi	r24, 0x01	; 1
    e716:	fe 01       	movw	r30, r28
    e718:	e0 5c       	subi	r30, 0xC0	; 192
    e71a:	ff 4f       	sbci	r31, 0xFF	; 255
    e71c:	80 83       	st	Z, r24
			*dest = *from;
			tomove--;
		}

		// Copy over the bytes into the new space
		for(tomove = 0; tomove < space_to_make; tomove++)
    e71e:	8a a9       	ldd	r24, Y+50	; 0x32
    e720:	9b a9       	ldd	r25, Y+51	; 0x33
    e722:	01 96       	adiw	r24, 0x01	; 1
    e724:	9b ab       	std	Y+51, r25	; 0x33
    e726:	8a ab       	std	Y+50, r24	; 0x32
    e728:	2a a9       	ldd	r18, Y+50	; 0x32
    e72a:	3b a9       	ldd	r19, Y+51	; 0x33
    e72c:	8c a5       	ldd	r24, Y+44	; 0x2c
    e72e:	9d a5       	ldd	r25, Y+45	; 0x2d
    e730:	28 17       	cp	r18, r24
    e732:	39 07       	cpc	r19, r25
    e734:	50 f2       	brcs	.-108    	; 0xe6ca <loop+0x3fa>
			*start = *txtpos;
			txtpos++;
			start++;
			linelen--;
		}
		program_end = newEnd;
    e736:	fe 01       	movw	r30, r28
    e738:	ef 5b       	subi	r30, 0xBF	; 191
    e73a:	ff 4f       	sbci	r31, 0xFF	; 255
    e73c:	80 81       	ld	r24, Z
    e73e:	91 81       	ldd	r25, Z+1	; 0x01
    e740:	90 93 66 07 	sts	0x0766, r25
    e744:	80 93 65 07 	sts	0x0765, r24
		goto prompt;



	// Make room for the new line, either all in one hit or lots of little shuffles
	while(linelen > 0)
    e748:	fe 01       	movw	r30, r28
    e74a:	e0 5c       	subi	r30, 0xC0	; 192
    e74c:	ff 4f       	sbci	r31, 0xFF	; 255
    e74e:	80 81       	ld	r24, Z
    e750:	88 23       	and	r24, r24
    e752:	09 f0       	breq	.+2      	; 0xe756 <loop+0x486>
    e754:	51 cf       	rjmp	.-350    	; 0xe5f8 <loop+0x328>
    e756:	13 ce       	rjmp	.-986    	; 0xe37e <loop+0xae>
		program_end = newEnd;
	}
	goto prompt;

unimplemented:
	printmsg(unimplimentedmsg);
    e758:	89 e4       	ldi	r24, 0x49	; 73
    e75a:	91 e0       	ldi	r25, 0x01	; 1
    e75c:	0e 94 a5 6c 	call	0xd94a	; 0xd94a <_Z8printmsgPKh>
    e760:	0e ce       	rjmp	.-996    	; 0xe37e <loop+0xae>
	goto prompt;

qhow:	
	printmsg(howmsg);
    e762:	87 e5       	ldi	r24, 0x57	; 87
    e764:	91 e0       	ldi	r25, 0x01	; 1
    e766:	0e 94 a5 6c 	call	0xd94a	; 0xd94a <_Z8printmsgPKh>
    e76a:	09 ce       	rjmp	.-1006   	; 0xe37e <loop+0xae>
	goto prompt;

qwhat:	
	printmsgNoNL(whatmsg);
    e76c:	8c e5       	ldi	r24, 0x5C	; 92
    e76e:	91 e0       	ldi	r25, 0x01	; 1
    e770:	0e 94 89 6c 	call	0xd912	; 0xd912 <_Z12printmsgNoNLPKh>
	if(current_line != NULL)
    e774:	80 91 6d 07 	lds	r24, 0x076D
    e778:	90 91 6e 07 	lds	r25, 0x076E
    e77c:	00 97       	sbiw	r24, 0x00	; 0
    e77e:	19 f1       	breq	.+70     	; 0xe7c6 <loop+0x4f6>
	{
           unsigned char tmp = *txtpos;
    e780:	e0 91 70 07 	lds	r30, 0x0770
    e784:	f0 91 71 07 	lds	r31, 0x0771
    e788:	80 81       	ld	r24, Z
    e78a:	8b a7       	std	Y+43, r24	; 0x2b
		   if(*txtpos != NL)
    e78c:	e0 91 70 07 	lds	r30, 0x0770
    e790:	f0 91 71 07 	lds	r31, 0x0771
    e794:	80 81       	ld	r24, Z
    e796:	8a 30       	cpi	r24, 0x0A	; 10
    e798:	31 f0       	breq	.+12     	; 0xe7a6 <loop+0x4d6>
				*txtpos = '^';
    e79a:	e0 91 70 07 	lds	r30, 0x0770
    e79e:	f0 91 71 07 	lds	r31, 0x0771
    e7a2:	8e e5       	ldi	r24, 0x5E	; 94
    e7a4:	80 83       	st	Z, r24
           list_line = current_line;
    e7a6:	80 91 6d 07 	lds	r24, 0x076D
    e7aa:	90 91 6e 07 	lds	r25, 0x076E
    e7ae:	90 93 75 07 	sts	0x0775, r25
    e7b2:	80 93 74 07 	sts	0x0774, r24
           printline();
    e7b6:	0e 94 40 6d 	call	0xda80	; 0xda80 <_Z9printlinev>
           *txtpos = tmp;
    e7ba:	e0 91 70 07 	lds	r30, 0x0770
    e7be:	f0 91 71 07 	lds	r31, 0x0771
    e7c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    e7c4:	80 83       	st	Z, r24
	}
    line_terminator();
    e7c6:	0e 94 10 6c 	call	0xd820	; 0xd820 <_ZL15line_terminatorv>
    e7ca:	d9 cd       	rjmp	.-1102   	; 0xe37e <loop+0xae>
	goto prompt;

qsorry:	
	printmsg(sorrymsg);
    e7cc:	83 e6       	ldi	r24, 0x63	; 99
    e7ce:	91 e0       	ldi	r25, 0x01	; 1
    e7d0:	0e 94 a5 6c 	call	0xd94a	; 0xd94a <_Z8printmsgPKh>
    e7d4:	c6 cd       	rjmp	.-1140   	; 0xe362 <loop+0x92>
	goto warmstart;

run_next_statement:
	while(*txtpos == ':')
		txtpos++;
    e7d6:	80 91 70 07 	lds	r24, 0x0770
    e7da:	90 91 71 07 	lds	r25, 0x0771
    e7de:	01 96       	adiw	r24, 0x01	; 1
    e7e0:	90 93 71 07 	sts	0x0771, r25
    e7e4:	80 93 70 07 	sts	0x0770, r24
qsorry:	
	printmsg(sorrymsg);
	goto warmstart;

run_next_statement:
	while(*txtpos == ':')
    e7e8:	e0 91 70 07 	lds	r30, 0x0770
    e7ec:	f0 91 71 07 	lds	r31, 0x0771
    e7f0:	80 81       	ld	r24, Z
    e7f2:	8a 33       	cpi	r24, 0x3A	; 58
    e7f4:	81 f3       	breq	.-32     	; 0xe7d6 <loop+0x506>
		txtpos++;
	ignore_blanks();
    e7f6:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
	if(*txtpos == NL)
    e7fa:	e0 91 70 07 	lds	r30, 0x0770
    e7fe:	f0 91 71 07 	lds	r31, 0x0771
    e802:	80 81       	ld	r24, Z
    e804:	8a 30       	cpi	r24, 0x0A	; 10
    e806:	09 f4       	brne	.+2      	; 0xe80a <loop+0x53a>
    e808:	c9 c1       	rjmp	.+914    	; 0xeb9c <loop+0x8cc>
    e80a:	11 c0       	rjmp	.+34     	; 0xe82e <loop+0x55e>
		goto execnextline;
	goto interperateAtTxtpos;

direct: 
	txtpos = program_end+sizeof(LINENUM);
    e80c:	80 91 65 07 	lds	r24, 0x0765
    e810:	90 91 66 07 	lds	r25, 0x0766
    e814:	02 96       	adiw	r24, 0x02	; 2
    e816:	90 93 71 07 	sts	0x0771, r25
    e81a:	80 93 70 07 	sts	0x0770, r24
	if(*txtpos == NL)
    e81e:	e0 91 70 07 	lds	r30, 0x0770
    e822:	f0 91 71 07 	lds	r31, 0x0771
    e826:	80 81       	ld	r24, Z
    e828:	8a 30       	cpi	r24, 0x0A	; 10
    e82a:	09 f4       	brne	.+2      	; 0xe82e <loop+0x55e>
    e82c:	a8 cd       	rjmp	.-1200   	; 0xe37e <loop+0xae>
		goto prompt;

interperateAtTxtpos:
        if(breakcheck())
    e82e:	0e 94 17 6e 	call	0xdc2e	; 0xdc2e <_ZL10breakcheckv>
    e832:	2a 96       	adiw	r28, 0x0a	; 10
    e834:	8f af       	std	Y+63, r24	; 0x3f
    e836:	2a 97       	sbiw	r28, 0x0a	; 10
    e838:	2a 96       	adiw	r28, 0x0a	; 10
    e83a:	5f ad       	ldd	r21, Y+63	; 0x3f
    e83c:	2a 97       	sbiw	r28, 0x0a	; 10
    e83e:	55 23       	and	r21, r21
    e840:	21 f0       	breq	.+8      	; 0xe84a <loop+0x57a>
    e842:	81 e0       	ldi	r24, 0x01	; 1
    e844:	2a 96       	adiw	r28, 0x0a	; 10
    e846:	8f af       	std	Y+63, r24	; 0x3f
    e848:	2a 97       	sbiw	r28, 0x0a	; 10
    e84a:	2a 96       	adiw	r28, 0x0a	; 10
    e84c:	8f ad       	ldd	r24, Y+63	; 0x3f
    e84e:	2a 97       	sbiw	r28, 0x0a	; 10
    e850:	88 23       	and	r24, r24
    e852:	29 f0       	breq	.+10     	; 0xe85e <loop+0x58e>
        {
          printmsg(breakmsg);
    e854:	8a e6       	ldi	r24, 0x6A	; 106
    e856:	91 e0       	ldi	r25, 0x01	; 1
    e858:	0e 94 a5 6c 	call	0xd94a	; 0xd94a <_Z8printmsgPKh>
    e85c:	82 cd       	rjmp	.-1276   	; 0xe362 <loop+0x92>
          goto warmstart;
        }

	scantable(keywords);
    e85e:	81 e7       	ldi	r24, 0x71	; 113
    e860:	91 e0       	ldi	r25, 0x01	; 1
    e862:	0e 94 39 6a 	call	0xd472	; 0xd472 <_ZL9scantablePh>

	switch(table_index)
    e866:	80 91 76 07 	lds	r24, 0x0776
    e86a:	28 2f       	mov	r18, r24
    e86c:	30 e0       	ldi	r19, 0x00	; 0
    e86e:	29 96       	adiw	r28, 0x09	; 9
    e870:	3f af       	std	Y+63, r19	; 0x3f
    e872:	2e af       	std	Y+62, r18	; 0x3e
    e874:	29 97       	sbiw	r28, 0x09	; 9
    e876:	29 96       	adiw	r28, 0x09	; 9
    e878:	4e ad       	ldd	r20, Y+62	; 0x3e
    e87a:	5f ad       	ldd	r21, Y+63	; 0x3f
    e87c:	29 97       	sbiw	r28, 0x09	; 9
    e87e:	40 31       	cpi	r20, 0x10	; 16
    e880:	51 05       	cpc	r21, r1
    e882:	09 f4       	brne	.+2      	; 0xe886 <loop+0x5b6>
    e884:	72 c1       	rjmp	.+740    	; 0xeb6a <loop+0x89a>
    e886:	29 96       	adiw	r28, 0x09	; 9
    e888:	8e ad       	ldd	r24, Y+62	; 0x3e
    e88a:	9f ad       	ldd	r25, Y+63	; 0x3f
    e88c:	29 97       	sbiw	r28, 0x09	; 9
    e88e:	81 31       	cpi	r24, 0x11	; 17
    e890:	91 05       	cpc	r25, r1
    e892:	0c f0       	brlt	.+2      	; 0xe896 <loop+0x5c6>
    e894:	89 c0       	rjmp	.+274    	; 0xe9a8 <loop+0x6d8>
    e896:	29 96       	adiw	r28, 0x09	; 9
    e898:	2e ad       	ldd	r18, Y+62	; 0x3e
    e89a:	3f ad       	ldd	r19, Y+63	; 0x3f
    e89c:	29 97       	sbiw	r28, 0x09	; 9
    e89e:	27 30       	cpi	r18, 0x07	; 7
    e8a0:	31 05       	cpc	r19, r1
    e8a2:	09 f4       	brne	.+2      	; 0xe8a6 <loop+0x5d6>
    e8a4:	2d c1       	rjmp	.+602    	; 0xeb00 <loop+0x830>
    e8a6:	29 96       	adiw	r28, 0x09	; 9
    e8a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    e8aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    e8ac:	29 97       	sbiw	r28, 0x09	; 9
    e8ae:	48 30       	cpi	r20, 0x08	; 8
    e8b0:	51 05       	cpc	r21, r1
    e8b2:	cc f5       	brge	.+114    	; 0xe926 <loop+0x656>
    e8b4:	29 96       	adiw	r28, 0x09	; 9
    e8b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    e8b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    e8ba:	29 97       	sbiw	r28, 0x09	; 9
    e8bc:	83 30       	cpi	r24, 0x03	; 3
    e8be:	91 05       	cpc	r25, r1
    e8c0:	09 f4       	brne	.+2      	; 0xe8c4 <loop+0x5f4>
    e8c2:	15 c1       	rjmp	.+554    	; 0xeaee <loop+0x81e>
    e8c4:	29 96       	adiw	r28, 0x09	; 9
    e8c6:	2e ad       	ldd	r18, Y+62	; 0x3e
    e8c8:	3f ad       	ldd	r19, Y+63	; 0x3f
    e8ca:	29 97       	sbiw	r28, 0x09	; 9
    e8cc:	24 30       	cpi	r18, 0x04	; 4
    e8ce:	31 05       	cpc	r19, r1
    e8d0:	cc f4       	brge	.+50     	; 0xe904 <loop+0x634>
    e8d2:	29 96       	adiw	r28, 0x09	; 9
    e8d4:	4e ad       	ldd	r20, Y+62	; 0x3e
    e8d6:	5f ad       	ldd	r21, Y+63	; 0x3f
    e8d8:	29 97       	sbiw	r28, 0x09	; 9
    e8da:	41 30       	cpi	r20, 0x01	; 1
    e8dc:	51 05       	cpc	r21, r1
    e8de:	09 f4       	brne	.+2      	; 0xe8e2 <loop+0x612>
    e8e0:	d5 c5       	rjmp	.+2986   	; 0xf48c <loop+0x11bc>
    e8e2:	29 96       	adiw	r28, 0x09	; 9
    e8e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    e8e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    e8e8:	29 97       	sbiw	r28, 0x09	; 9
    e8ea:	82 30       	cpi	r24, 0x02	; 2
    e8ec:	91 05       	cpc	r25, r1
    e8ee:	0c f0       	brlt	.+2      	; 0xe8f2 <loop+0x622>
    e8f0:	ed c0       	rjmp	.+474    	; 0xeacc <loop+0x7fc>
    e8f2:	29 96       	adiw	r28, 0x09	; 9
    e8f4:	2e ad       	ldd	r18, Y+62	; 0x3e
    e8f6:	3f ad       	ldd	r19, Y+63	; 0x3f
    e8f8:	29 97       	sbiw	r28, 0x09	; 9
    e8fa:	21 15       	cp	r18, r1
    e8fc:	31 05       	cpc	r19, r1
    e8fe:	09 f4       	brne	.+2      	; 0xe902 <loop+0x632>
    e900:	9b c4       	rjmp	.+2358   	; 0xf238 <loop+0xf68>
    e902:	4c c1       	rjmp	.+664    	; 0xeb9c <loop+0x8cc>
    e904:	29 96       	adiw	r28, 0x09	; 9
    e906:	4e ad       	ldd	r20, Y+62	; 0x3e
    e908:	5f ad       	ldd	r21, Y+63	; 0x3f
    e90a:	29 97       	sbiw	r28, 0x09	; 9
    e90c:	45 30       	cpi	r20, 0x05	; 5
    e90e:	51 05       	cpc	r21, r1
    e910:	09 f4       	brne	.+2      	; 0xe914 <loop+0x644>
    e912:	e5 c2       	rjmp	.+1482   	; 0xeede <loop+0xc0e>
    e914:	29 96       	adiw	r28, 0x09	; 9
    e916:	8e ad       	ldd	r24, Y+62	; 0x3e
    e918:	9f ad       	ldd	r25, Y+63	; 0x3f
    e91a:	29 97       	sbiw	r28, 0x09	; 9
    e91c:	86 30       	cpi	r24, 0x06	; 6
    e91e:	91 05       	cpc	r25, r1
    e920:	0c f0       	brlt	.+2      	; 0xe924 <loop+0x654>
    e922:	e7 c3       	rjmp	.+1998   	; 0xf0f2 <loop+0xe22>
    e924:	19 cf       	rjmp	.-462    	; 0xe758 <loop+0x488>
    e926:	29 96       	adiw	r28, 0x09	; 9
    e928:	2e ad       	ldd	r18, Y+62	; 0x3e
    e92a:	3f ad       	ldd	r19, Y+63	; 0x3f
    e92c:	29 97       	sbiw	r28, 0x09	; 9
    e92e:	2b 30       	cpi	r18, 0x0B	; 11
    e930:	31 05       	cpc	r19, r1
    e932:	09 f4       	brne	.+2      	; 0xe936 <loop+0x666>
    e934:	33 c1       	rjmp	.+614    	; 0xeb9c <loop+0x8cc>
    e936:	29 96       	adiw	r28, 0x09	; 9
    e938:	4e ad       	ldd	r20, Y+62	; 0x3e
    e93a:	5f ad       	ldd	r21, Y+63	; 0x3f
    e93c:	29 97       	sbiw	r28, 0x09	; 9
    e93e:	4c 30       	cpi	r20, 0x0C	; 12
    e940:	51 05       	cpc	r21, r1
    e942:	8c f4       	brge	.+34     	; 0xe966 <loop+0x696>
    e944:	29 96       	adiw	r28, 0x09	; 9
    e946:	8e ad       	ldd	r24, Y+62	; 0x3e
    e948:	9f ad       	ldd	r25, Y+63	; 0x3f
    e94a:	29 97       	sbiw	r28, 0x09	; 9
    e94c:	89 30       	cpi	r24, 0x09	; 9
    e94e:	91 05       	cpc	r25, r1
    e950:	09 f4       	brne	.+2      	; 0xe954 <loop+0x684>
    e952:	77 c2       	rjmp	.+1262   	; 0xee42 <loop+0xb72>
    e954:	29 96       	adiw	r28, 0x09	; 9
    e956:	2e ad       	ldd	r18, Y+62	; 0x3e
    e958:	3f ad       	ldd	r19, Y+63	; 0x3f
    e95a:	29 97       	sbiw	r28, 0x09	; 9
    e95c:	2a 30       	cpi	r18, 0x0A	; 10
    e95e:	31 05       	cpc	r19, r1
    e960:	0c f0       	brlt	.+2      	; 0xe964 <loop+0x694>
    e962:	e9 c2       	rjmp	.+1490   	; 0xef36 <loop+0xc66>
    e964:	e6 c0       	rjmp	.+460    	; 0xeb32 <loop+0x862>
    e966:	29 96       	adiw	r28, 0x09	; 9
    e968:	4e ad       	ldd	r20, Y+62	; 0x3e
    e96a:	5f ad       	ldd	r21, Y+63	; 0x3f
    e96c:	29 97       	sbiw	r28, 0x09	; 9
    e96e:	4d 30       	cpi	r20, 0x0D	; 13
    e970:	51 05       	cpc	r21, r1
    e972:	09 f4       	brne	.+2      	; 0xe976 <loop+0x6a6>
    e974:	43 c1       	rjmp	.+646    	; 0xebfc <loop+0x92c>
    e976:	29 96       	adiw	r28, 0x09	; 9
    e978:	8e ad       	ldd	r24, Y+62	; 0x3e
    e97a:	9f ad       	ldd	r25, Y+63	; 0x3f
    e97c:	29 97       	sbiw	r28, 0x09	; 9
    e97e:	8d 30       	cpi	r24, 0x0D	; 13
    e980:	91 05       	cpc	r25, r1
    e982:	0c f4       	brge	.+2      	; 0xe986 <loop+0x6b6>
    e984:	81 c1       	rjmp	.+770    	; 0xec88 <loop+0x9b8>
    e986:	29 96       	adiw	r28, 0x09	; 9
    e988:	2e ad       	ldd	r18, Y+62	; 0x3e
    e98a:	3f ad       	ldd	r19, Y+63	; 0x3f
    e98c:	29 97       	sbiw	r28, 0x09	; 9
    e98e:	2e 30       	cpi	r18, 0x0E	; 14
    e990:	31 05       	cpc	r19, r1
    e992:	09 f4       	brne	.+2      	; 0xe996 <loop+0x6c6>
    e994:	74 c4       	rjmp	.+2280   	; 0xf27e <loop+0xfae>
    e996:	29 96       	adiw	r28, 0x09	; 9
    e998:	4e ad       	ldd	r20, Y+62	; 0x3e
    e99a:	5f ad       	ldd	r21, Y+63	; 0x3f
    e99c:	29 97       	sbiw	r28, 0x09	; 9
    e99e:	4f 30       	cpi	r20, 0x0F	; 15
    e9a0:	51 05       	cpc	r21, r1
    e9a2:	09 f4       	brne	.+2      	; 0xe9a6 <loop+0x6d6>
    e9a4:	09 c4       	rjmp	.+2066   	; 0xf1b8 <loop+0xee8>
    e9a6:	fa c0       	rjmp	.+500    	; 0xeb9c <loop+0x8cc>
    e9a8:	29 96       	adiw	r28, 0x09	; 9
    e9aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    e9ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    e9ae:	29 97       	sbiw	r28, 0x09	; 9
    e9b0:	88 31       	cpi	r24, 0x18	; 24
    e9b2:	91 05       	cpc	r25, r1
    e9b4:	09 f4       	brne	.+2      	; 0xe9b8 <loop+0x6e8>
    e9b6:	d0 ce       	rjmp	.-608    	; 0xe758 <loop+0x488>
    e9b8:	29 96       	adiw	r28, 0x09	; 9
    e9ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    e9bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    e9be:	29 97       	sbiw	r28, 0x09	; 9
    e9c0:	29 31       	cpi	r18, 0x19	; 25
    e9c2:	31 05       	cpc	r19, r1
    e9c4:	8c f5       	brge	.+98     	; 0xea28 <loop+0x758>
    e9c6:	29 96       	adiw	r28, 0x09	; 9
    e9c8:	4e ad       	ldd	r20, Y+62	; 0x3e
    e9ca:	5f ad       	ldd	r21, Y+63	; 0x3f
    e9cc:	29 97       	sbiw	r28, 0x09	; 9
    e9ce:	44 31       	cpi	r20, 0x14	; 20
    e9d0:	51 05       	cpc	r21, r1
    e9d2:	09 f4       	brne	.+2      	; 0xe9d6 <loop+0x706>
    e9d4:	54 c4       	rjmp	.+2216   	; 0xf27e <loop+0xfae>
    e9d6:	29 96       	adiw	r28, 0x09	; 9
    e9d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    e9da:	9f ad       	ldd	r25, Y+63	; 0x3f
    e9dc:	29 97       	sbiw	r28, 0x09	; 9
    e9de:	85 31       	cpi	r24, 0x15	; 21
    e9e0:	91 05       	cpc	r25, r1
    e9e2:	8c f4       	brge	.+34     	; 0xea06 <loop+0x736>
    e9e4:	29 96       	adiw	r28, 0x09	; 9
    e9e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    e9e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    e9ea:	29 97       	sbiw	r28, 0x09	; 9
    e9ec:	22 31       	cpi	r18, 0x12	; 18
    e9ee:	31 05       	cpc	r19, r1
    e9f0:	09 f4       	brne	.+2      	; 0xe9f4 <loop+0x724>
    e9f2:	b2 ce       	rjmp	.-668    	; 0xe758 <loop+0x488>
    e9f4:	29 96       	adiw	r28, 0x09	; 9
    e9f6:	4e ad       	ldd	r20, Y+62	; 0x3e
    e9f8:	5f ad       	ldd	r21, Y+63	; 0x3f
    e9fa:	29 97       	sbiw	r28, 0x09	; 9
    e9fc:	43 31       	cpi	r20, 0x13	; 19
    e9fe:	51 05       	cpc	r21, r1
    ea00:	0c f0       	brlt	.+2      	; 0xea04 <loop+0x734>
    ea02:	d4 c4       	rjmp	.+2472   	; 0xf3ac <loop+0x10dc>
    ea04:	af c5       	rjmp	.+2910   	; 0xf564 <loop+0x1294>
    ea06:	29 96       	adiw	r28, 0x09	; 9
    ea08:	8e ad       	ldd	r24, Y+62	; 0x3e
    ea0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    ea0c:	29 97       	sbiw	r28, 0x09	; 9
    ea0e:	86 31       	cpi	r24, 0x16	; 22
    ea10:	91 05       	cpc	r25, r1
    ea12:	09 f4       	brne	.+2      	; 0xea16 <loop+0x746>
    ea14:	bb c0       	rjmp	.+374    	; 0xeb8c <loop+0x8bc>
    ea16:	29 96       	adiw	r28, 0x09	; 9
    ea18:	2e ad       	ldd	r18, Y+62	; 0x3e
    ea1a:	3f ad       	ldd	r19, Y+63	; 0x3f
    ea1c:	29 97       	sbiw	r28, 0x09	; 9
    ea1e:	27 31       	cpi	r18, 0x17	; 23
    ea20:	31 05       	cpc	r19, r1
    ea22:	0c f0       	brlt	.+2      	; 0xea26 <loop+0x756>
    ea24:	b5 c0       	rjmp	.+362    	; 0xeb90 <loop+0x8c0>
    ea26:	ba c0       	rjmp	.+372    	; 0xeb9c <loop+0x8cc>
    ea28:	29 96       	adiw	r28, 0x09	; 9
    ea2a:	4e ad       	ldd	r20, Y+62	; 0x3e
    ea2c:	5f ad       	ldd	r21, Y+63	; 0x3f
    ea2e:	29 97       	sbiw	r28, 0x09	; 9
    ea30:	4c 31       	cpi	r20, 0x1C	; 28
    ea32:	51 05       	cpc	r21, r1
    ea34:	09 f4       	brne	.+2      	; 0xea38 <loop+0x768>
    ea36:	27 c5       	rjmp	.+2638   	; 0xf486 <loop+0x11b6>
    ea38:	29 96       	adiw	r28, 0x09	; 9
    ea3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    ea3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    ea3e:	29 97       	sbiw	r28, 0x09	; 9
    ea40:	8d 31       	cpi	r24, 0x1D	; 29
    ea42:	91 05       	cpc	r25, r1
    ea44:	8c f4       	brge	.+34     	; 0xea68 <loop+0x798>
    ea46:	29 96       	adiw	r28, 0x09	; 9
    ea48:	2e ad       	ldd	r18, Y+62	; 0x3e
    ea4a:	3f ad       	ldd	r19, Y+63	; 0x3f
    ea4c:	29 97       	sbiw	r28, 0x09	; 9
    ea4e:	2a 31       	cpi	r18, 0x1A	; 26
    ea50:	31 05       	cpc	r19, r1
    ea52:	09 f4       	brne	.+2      	; 0xea56 <loop+0x786>
    ea54:	8a c0       	rjmp	.+276    	; 0xeb6a <loop+0x89a>
    ea56:	29 96       	adiw	r28, 0x09	; 9
    ea58:	4e ad       	ldd	r20, Y+62	; 0x3e
    ea5a:	5f ad       	ldd	r21, Y+63	; 0x3f
    ea5c:	29 97       	sbiw	r28, 0x09	; 9
    ea5e:	4b 31       	cpi	r20, 0x1B	; 27
    ea60:	51 05       	cpc	r21, r1
    ea62:	0c f0       	brlt	.+2      	; 0xea66 <loop+0x796>
    ea64:	1c c5       	rjmp	.+2616   	; 0xf49e <loop+0x11ce>
    ea66:	21 c0       	rjmp	.+66     	; 0xeaaa <loop+0x7da>
    ea68:	29 96       	adiw	r28, 0x09	; 9
    ea6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    ea6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    ea6e:	29 97       	sbiw	r28, 0x09	; 9
    ea70:	8e 31       	cpi	r24, 0x1E	; 30
    ea72:	91 05       	cpc	r25, r1
    ea74:	09 f4       	brne	.+2      	; 0xea78 <loop+0x7a8>
    ea76:	27 c5       	rjmp	.+2638   	; 0xf4c6 <loop+0x11f6>
    ea78:	29 96       	adiw	r28, 0x09	; 9
    ea7a:	2e ad       	ldd	r18, Y+62	; 0x3e
    ea7c:	3f ad       	ldd	r19, Y+63	; 0x3f
    ea7e:	29 97       	sbiw	r28, 0x09	; 9
    ea80:	2e 31       	cpi	r18, 0x1E	; 30
    ea82:	31 05       	cpc	r19, r1
    ea84:	0c f4       	brge	.+2      	; 0xea88 <loop+0x7b8>
    ea86:	87 c0       	rjmp	.+270    	; 0xeb96 <loop+0x8c6>
    ea88:	29 96       	adiw	r28, 0x09	; 9
    ea8a:	4e ad       	ldd	r20, Y+62	; 0x3e
    ea8c:	5f ad       	ldd	r21, Y+63	; 0x3f
    ea8e:	29 97       	sbiw	r28, 0x09	; 9
    ea90:	4f 31       	cpi	r20, 0x1F	; 31
    ea92:	51 05       	cpc	r21, r1
    ea94:	09 f4       	brne	.+2      	; 0xea98 <loop+0x7c8>
    ea96:	13 c5       	rjmp	.+2598   	; 0xf4be <loop+0x11ee>
    ea98:	29 96       	adiw	r28, 0x09	; 9
    ea9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    ea9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    ea9e:	29 97       	sbiw	r28, 0x09	; 9
    eaa0:	80 32       	cpi	r24, 0x20	; 32
    eaa2:	91 05       	cpc	r25, r1
    eaa4:	09 f4       	brne	.+2      	; 0xeaa8 <loop+0x7d8>
    eaa6:	25 c3       	rjmp	.+1610   	; 0xf0f2 <loop+0xe22>
    eaa8:	79 c0       	rjmp	.+242    	; 0xeb9c <loop+0x8cc>
	{
                case KW_DELAY:
                {
#if ARDUINO
			expression_error = 0;
    eaaa:	10 92 77 07 	sts	0x0777, r1
			val = expression();
    eaae:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    eab2:	9d af       	std	Y+61, r25	; 0x3d
    eab4:	8c af       	std	Y+60, r24	; 0x3c
                        delay( val );
    eab6:	8c ad       	ldd	r24, Y+60	; 0x3c
    eab8:	9d ad       	ldd	r25, Y+61	; 0x3d
    eaba:	aa 27       	eor	r26, r26
    eabc:	97 fd       	sbrc	r25, 7
    eabe:	a0 95       	com	r26
    eac0:	ba 2f       	mov	r27, r26
    eac2:	bc 01       	movw	r22, r24
    eac4:	cd 01       	movw	r24, r26
    eac6:	0e 94 b2 64 	call	0xc964	; 0xc964 <delay>
    eaca:	68 c0       	rjmp	.+208    	; 0xeb9c <loop+0x8cc>
		case KW_LOAD:
			goto load;
                case KW_MEM:
                        goto mem;
              	case KW_NEW:
			if(txtpos[0] != NL)
    eacc:	e0 91 70 07 	lds	r30, 0x0770
    ead0:	f0 91 71 07 	lds	r31, 0x0771
    ead4:	80 81       	ld	r24, Z
    ead6:	8a 30       	cpi	r24, 0x0A	; 10
    ead8:	09 f0       	breq	.+2      	; 0xeadc <loop+0x80c>
    eada:	48 ce       	rjmp	.-880    	; 0xe76c <loop+0x49c>
				goto qwhat;
			program_end = program_start;
    eadc:	80 91 64 06 	lds	r24, 0x0664
    eae0:	90 91 65 06 	lds	r25, 0x0665
    eae4:	90 93 66 07 	sts	0x0766, r25
    eae8:	80 93 65 07 	sts	0x0765, r24
    eaec:	48 cc       	rjmp	.-1904   	; 0xe37e <loop+0xae>
			goto prompt;
		case KW_RUN:
			current_line = program_start;
    eaee:	80 91 64 06 	lds	r24, 0x0664
    eaf2:	90 91 65 06 	lds	r25, 0x0665
    eaf6:	90 93 6e 07 	sts	0x076E, r25
    eafa:	80 93 6d 07 	sts	0x076D, r24
    eafe:	68 c0       	rjmp	.+208    	; 0xebd0 <loop+0x900>
			goto next;
		case KW_LET:
			goto assignment;
		case KW_IF:
			short int val;
			expression_error = 0;
    eb00:	10 92 77 07 	sts	0x0777, r1
			val = expression();
    eb04:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    eb08:	9a a7       	std	Y+42, r25	; 0x2a
    eb0a:	89 a7       	std	Y+41, r24	; 0x29
			if(expression_error || *txtpos == NL)
    eb0c:	80 91 77 07 	lds	r24, 0x0777
    eb10:	88 23       	and	r24, r24
    eb12:	09 f0       	breq	.+2      	; 0xeb16 <loop+0x846>
    eb14:	26 ce       	rjmp	.-948    	; 0xe762 <loop+0x492>
    eb16:	e0 91 70 07 	lds	r30, 0x0770
    eb1a:	f0 91 71 07 	lds	r31, 0x0771
    eb1e:	80 81       	ld	r24, Z
    eb20:	8a 30       	cpi	r24, 0x0A	; 10
    eb22:	09 f4       	brne	.+2      	; 0xeb26 <loop+0x856>
    eb24:	1e ce       	rjmp	.-964    	; 0xe762 <loop+0x492>
				goto qhow;
			if(val != 0)
    eb26:	89 a5       	ldd	r24, Y+41	; 0x29
    eb28:	9a a5       	ldd	r25, Y+42	; 0x2a
    eb2a:	00 97       	sbiw	r24, 0x00	; 0
    eb2c:	09 f0       	breq	.+2      	; 0xeb30 <loop+0x860>
    eb2e:	7f ce       	rjmp	.-770    	; 0xe82e <loop+0x55e>
    eb30:	35 c0       	rjmp	.+106    	; 0xeb9c <loop+0x8cc>
				goto interperateAtTxtpos;
			goto execnextline;

		case KW_GOTO:
			expression_error = 0;
    eb32:	10 92 77 07 	sts	0x0777, r1
			linenum = expression();
    eb36:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    eb3a:	90 93 73 07 	sts	0x0773, r25
    eb3e:	80 93 72 07 	sts	0x0772, r24
			if(expression_error || *txtpos != NL)
    eb42:	80 91 77 07 	lds	r24, 0x0777
    eb46:	88 23       	and	r24, r24
    eb48:	09 f0       	breq	.+2      	; 0xeb4c <loop+0x87c>
    eb4a:	0b ce       	rjmp	.-1002   	; 0xe762 <loop+0x492>
    eb4c:	e0 91 70 07 	lds	r30, 0x0770
    eb50:	f0 91 71 07 	lds	r31, 0x0771
    eb54:	80 81       	ld	r24, Z
    eb56:	8a 30       	cpi	r24, 0x0A	; 10
    eb58:	09 f0       	breq	.+2      	; 0xeb5c <loop+0x88c>
    eb5a:	03 ce       	rjmp	.-1018   	; 0xe762 <loop+0x492>
				goto qhow;
			current_line = findline();
    eb5c:	0e 94 29 6b 	call	0xd652	; 0xd652 <_ZL8findlinev>
    eb60:	90 93 6e 07 	sts	0x076E, r25
    eb64:	80 93 6d 07 	sts	0x076D, r24
    eb68:	33 c0       	rjmp	.+102    	; 0xebd0 <loop+0x900>
		case KW_POKE:
			goto poke;
		case KW_END:
		case KW_STOP:
			// This is the easy way to end - set the current line to the end of program attempt to run it
			if(txtpos[0] != NL)
    eb6a:	e0 91 70 07 	lds	r30, 0x0770
    eb6e:	f0 91 71 07 	lds	r31, 0x0771
    eb72:	80 81       	ld	r24, Z
    eb74:	8a 30       	cpi	r24, 0x0A	; 10
    eb76:	09 f0       	breq	.+2      	; 0xeb7a <loop+0x8aa>
    eb78:	f9 cd       	rjmp	.-1038   	; 0xe76c <loop+0x49c>
				goto qwhat;
			current_line = program_end;
    eb7a:	80 91 65 07 	lds	r24, 0x0765
    eb7e:	90 91 66 07 	lds	r25, 0x0766
    eb82:	90 93 6e 07 	sts	0x076E, r25
    eb86:	80 93 6d 07 	sts	0x076D, r24
    eb8a:	22 c0       	rjmp	.+68     	; 0xebd0 <loop+0x900>
			return;

                case KW_PINMODE:  // PINMODE <pin>, INPUT/OUTPUT
                        goto pinmode;
                case KW_AWRITE:  // AWRITE <pin>, HIGH|LOW
                        isDigital = false;
    eb8c:	1f ae       	std	Y+63, r1	; 0x3f
    eb8e:	22 c4       	rjmp	.+2116   	; 0xf3d4 <loop+0x1104>
                        goto awrite;
                case KW_DWRITE:  // DWRITE <pin>, HIGH|LOW
                        isDigital = true;
    eb90:	81 e0       	ldi	r24, 0x01	; 1
    eb92:	8f af       	std	Y+63, r24	; 0x3f
    eb94:	1f c4       	rjmp	.+2110   	; 0xf3d4 <loop+0x1104>
                        
                case KW_RSEED:
                        goto rseed;
                        
                case KW_TONEW:
                        alsoWait = true;
    eb96:	81 e0       	ldi	r24, 0x01	; 1
    eb98:	8e af       	std	Y+62, r24	; 0x3e
    eb9a:	95 c4       	rjmp	.+2346   	; 0xf4c6 <loop+0x11f6>
			break;
	}


execnextline:
	if(current_line == NULL)		// Processing direct commands?
    eb9c:	80 91 6d 07 	lds	r24, 0x076D
    eba0:	90 91 6e 07 	lds	r25, 0x076E
    eba4:	00 97       	sbiw	r24, 0x00	; 0
    eba6:	09 f4       	brne	.+2      	; 0xebaa <loop+0x8da>
    eba8:	ea cb       	rjmp	.-2092   	; 0xe37e <loop+0xae>
		goto prompt;
	current_line +=	 current_line[sizeof(LINENUM)];
    ebaa:	20 91 6d 07 	lds	r18, 0x076D
    ebae:	30 91 6e 07 	lds	r19, 0x076E
    ebb2:	80 91 6d 07 	lds	r24, 0x076D
    ebb6:	90 91 6e 07 	lds	r25, 0x076E
    ebba:	fc 01       	movw	r30, r24
    ebbc:	32 96       	adiw	r30, 0x02	; 2
    ebbe:	80 81       	ld	r24, Z
    ebc0:	88 2f       	mov	r24, r24
    ebc2:	90 e0       	ldi	r25, 0x00	; 0
    ebc4:	82 0f       	add	r24, r18
    ebc6:	93 1f       	adc	r25, r19
    ebc8:	90 93 6e 07 	sts	0x076E, r25
    ebcc:	80 93 6d 07 	sts	0x076D, r24

execline:
  	if(current_line == program_end) // Out of lines to run
    ebd0:	20 91 6d 07 	lds	r18, 0x076D
    ebd4:	30 91 6e 07 	lds	r19, 0x076E
    ebd8:	80 91 65 07 	lds	r24, 0x0765
    ebdc:	90 91 66 07 	lds	r25, 0x0766
    ebe0:	28 17       	cp	r18, r24
    ebe2:	39 07       	cpc	r19, r25
    ebe4:	09 f4       	brne	.+2      	; 0xebe8 <loop+0x918>
    ebe6:	bd cb       	rjmp	.-2182   	; 0xe362 <loop+0x92>
		goto warmstart;
	txtpos = current_line+sizeof(LINENUM)+sizeof(char);
    ebe8:	80 91 6d 07 	lds	r24, 0x076D
    ebec:	90 91 6e 07 	lds	r25, 0x076E
    ebf0:	03 96       	adiw	r24, 0x03	; 3
    ebf2:	90 93 71 07 	sts	0x0771, r25
    ebf6:	80 93 70 07 	sts	0x0770, r24
    ebfa:	19 ce       	rjmp	.-974    	; 0xe82e <loop+0x55e>
	goto interperateAtTxtpos;

input:
	{
		unsigned char var;
		ignore_blanks();
    ebfc:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
		if(*txtpos < 'A' || *txtpos > 'Z')
    ec00:	e0 91 70 07 	lds	r30, 0x0770
    ec04:	f0 91 71 07 	lds	r31, 0x0771
    ec08:	80 81       	ld	r24, Z
    ec0a:	81 34       	cpi	r24, 0x41	; 65
    ec0c:	08 f4       	brcc	.+2      	; 0xec10 <loop+0x940>
    ec0e:	ae cd       	rjmp	.-1188   	; 0xe76c <loop+0x49c>
    ec10:	e0 91 70 07 	lds	r30, 0x0770
    ec14:	f0 91 71 07 	lds	r31, 0x0771
    ec18:	80 81       	ld	r24, Z
    ec1a:	8b 35       	cpi	r24, 0x5B	; 91
    ec1c:	08 f0       	brcs	.+2      	; 0xec20 <loop+0x950>
    ec1e:	a6 cd       	rjmp	.-1204   	; 0xe76c <loop+0x49c>
			goto qwhat;
		var = *txtpos;
    ec20:	e0 91 70 07 	lds	r30, 0x0770
    ec24:	f0 91 71 07 	lds	r31, 0x0771
    ec28:	80 81       	ld	r24, Z
    ec2a:	88 a7       	std	Y+40, r24	; 0x28
		txtpos++;
    ec2c:	80 91 70 07 	lds	r24, 0x0770
    ec30:	90 91 71 07 	lds	r25, 0x0771
    ec34:	01 96       	adiw	r24, 0x01	; 1
    ec36:	90 93 71 07 	sts	0x0771, r25
    ec3a:	80 93 70 07 	sts	0x0770, r24
		ignore_blanks();
    ec3e:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
		if(*txtpos != NL && *txtpos != ':')
    ec42:	e0 91 70 07 	lds	r30, 0x0770
    ec46:	f0 91 71 07 	lds	r31, 0x0771
    ec4a:	80 81       	ld	r24, Z
    ec4c:	8a 30       	cpi	r24, 0x0A	; 10
    ec4e:	41 f0       	breq	.+16     	; 0xec60 <loop+0x990>
    ec50:	e0 91 70 07 	lds	r30, 0x0770
    ec54:	f0 91 71 07 	lds	r31, 0x0771
    ec58:	80 81       	ld	r24, Z
    ec5a:	8a 33       	cpi	r24, 0x3A	; 58
    ec5c:	09 f0       	breq	.+2      	; 0xec60 <loop+0x990>
    ec5e:	86 cd       	rjmp	.-1268   	; 0xe76c <loop+0x49c>
			goto qwhat;
		((short int *)variables_begin)[var-'A'] = 99;
    ec60:	80 91 6b 07 	lds	r24, 0x076B
    ec64:	90 91 6c 07 	lds	r25, 0x076C
    ec68:	9c 01       	movw	r18, r24
    ec6a:	88 a5       	ldd	r24, Y+40	; 0x28
    ec6c:	88 2f       	mov	r24, r24
    ec6e:	90 e0       	ldi	r25, 0x00	; 0
    ec70:	81 54       	subi	r24, 0x41	; 65
    ec72:	90 40       	sbci	r25, 0x00	; 0
    ec74:	88 0f       	add	r24, r24
    ec76:	99 1f       	adc	r25, r25
    ec78:	f9 01       	movw	r30, r18
    ec7a:	e8 0f       	add	r30, r24
    ec7c:	f9 1f       	adc	r31, r25
    ec7e:	83 e6       	ldi	r24, 0x63	; 99
    ec80:	90 e0       	ldi	r25, 0x00	; 0
    ec82:	91 83       	std	Z+1, r25	; 0x01
    ec84:	80 83       	st	Z, r24
    ec86:	b0 cd       	rjmp	.-1184   	; 0xe7e8 <loop+0x518>

forloop:
	{
		unsigned char var;
		short int initial, step, terminal;
		ignore_blanks();
    ec88:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
		if(*txtpos < 'A' || *txtpos > 'Z')
    ec8c:	e0 91 70 07 	lds	r30, 0x0770
    ec90:	f0 91 71 07 	lds	r31, 0x0771
    ec94:	80 81       	ld	r24, Z
    ec96:	81 34       	cpi	r24, 0x41	; 65
    ec98:	08 f4       	brcc	.+2      	; 0xec9c <loop+0x9cc>
    ec9a:	68 cd       	rjmp	.-1328   	; 0xe76c <loop+0x49c>
    ec9c:	e0 91 70 07 	lds	r30, 0x0770
    eca0:	f0 91 71 07 	lds	r31, 0x0771
    eca4:	80 81       	ld	r24, Z
    eca6:	8b 35       	cpi	r24, 0x5B	; 91
    eca8:	08 f0       	brcs	.+2      	; 0xecac <loop+0x9dc>
    ecaa:	60 cd       	rjmp	.-1344   	; 0xe76c <loop+0x49c>
			goto qwhat;
		var = *txtpos;
    ecac:	e0 91 70 07 	lds	r30, 0x0770
    ecb0:	f0 91 71 07 	lds	r31, 0x0771
    ecb4:	80 81       	ld	r24, Z
    ecb6:	8f a3       	std	Y+39, r24	; 0x27
		txtpos++;
    ecb8:	80 91 70 07 	lds	r24, 0x0770
    ecbc:	90 91 71 07 	lds	r25, 0x0771
    ecc0:	01 96       	adiw	r24, 0x01	; 1
    ecc2:	90 93 71 07 	sts	0x0771, r25
    ecc6:	80 93 70 07 	sts	0x0770, r24
		ignore_blanks();
    ecca:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
		if(*txtpos != '=')
    ecce:	e0 91 70 07 	lds	r30, 0x0770
    ecd2:	f0 91 71 07 	lds	r31, 0x0771
    ecd6:	80 81       	ld	r24, Z
    ecd8:	8d 33       	cpi	r24, 0x3D	; 61
    ecda:	09 f0       	breq	.+2      	; 0xecde <loop+0xa0e>
    ecdc:	47 cd       	rjmp	.-1394   	; 0xe76c <loop+0x49c>
			goto qwhat;
		txtpos++;
    ecde:	80 91 70 07 	lds	r24, 0x0770
    ece2:	90 91 71 07 	lds	r25, 0x0771
    ece6:	01 96       	adiw	r24, 0x01	; 1
    ece8:	90 93 71 07 	sts	0x0771, r25
    ecec:	80 93 70 07 	sts	0x0770, r24
		ignore_blanks();
    ecf0:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>

		expression_error = 0;
    ecf4:	10 92 77 07 	sts	0x0777, r1
		initial = expression();
    ecf8:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    ecfc:	9e a3       	std	Y+38, r25	; 0x26
    ecfe:	8d a3       	std	Y+37, r24	; 0x25
		if(expression_error)
    ed00:	80 91 77 07 	lds	r24, 0x0777
    ed04:	88 23       	and	r24, r24
    ed06:	09 f0       	breq	.+2      	; 0xed0a <loop+0xa3a>
    ed08:	31 cd       	rjmp	.-1438   	; 0xe76c <loop+0x49c>
			goto qwhat;
	
		scantable(to_tab);
    ed0a:	85 ef       	ldi	r24, 0xF5	; 245
    ed0c:	91 e0       	ldi	r25, 0x01	; 1
    ed0e:	0e 94 39 6a 	call	0xd472	; 0xd472 <_ZL9scantablePh>
		if(table_index != 0)
    ed12:	80 91 76 07 	lds	r24, 0x0776
    ed16:	88 23       	and	r24, r24
    ed18:	09 f0       	breq	.+2      	; 0xed1c <loop+0xa4c>
    ed1a:	28 cd       	rjmp	.-1456   	; 0xe76c <loop+0x49c>
			goto qwhat;
	
		terminal = expression();
    ed1c:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    ed20:	9a a3       	std	Y+34, r25	; 0x22
    ed22:	89 a3       	std	Y+33, r24	; 0x21
		if(expression_error)
    ed24:	80 91 77 07 	lds	r24, 0x0777
    ed28:	88 23       	and	r24, r24
    ed2a:	09 f0       	breq	.+2      	; 0xed2e <loop+0xa5e>
    ed2c:	1f cd       	rjmp	.-1474   	; 0xe76c <loop+0x49c>
			goto qwhat;
	
		scantable(step_tab);
    ed2e:	88 ef       	ldi	r24, 0xF8	; 248
    ed30:	91 e0       	ldi	r25, 0x01	; 1
    ed32:	0e 94 39 6a 	call	0xd472	; 0xd472 <_ZL9scantablePh>
		if(table_index == 0)
    ed36:	80 91 76 07 	lds	r24, 0x0776
    ed3a:	88 23       	and	r24, r24
    ed3c:	51 f4       	brne	.+20     	; 0xed52 <loop+0xa82>
		{
			step = expression();
    ed3e:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    ed42:	9c a3       	std	Y+36, r25	; 0x24
    ed44:	8b a3       	std	Y+35, r24	; 0x23
			if(expression_error)
    ed46:	80 91 77 07 	lds	r24, 0x0777
    ed4a:	88 23       	and	r24, r24
    ed4c:	09 f0       	breq	.+2      	; 0xed50 <loop+0xa80>
    ed4e:	0e cd       	rjmp	.-1508   	; 0xe76c <loop+0x49c>
    ed50:	04 c0       	rjmp	.+8      	; 0xed5a <loop+0xa8a>
				goto qwhat;
		}
		else
			step = 1;
    ed52:	81 e0       	ldi	r24, 0x01	; 1
    ed54:	90 e0       	ldi	r25, 0x00	; 0
    ed56:	9c a3       	std	Y+36, r25	; 0x24
    ed58:	8b a3       	std	Y+35, r24	; 0x23
		ignore_blanks();
    ed5a:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
		if(*txtpos != NL && *txtpos != ':')
    ed5e:	e0 91 70 07 	lds	r30, 0x0770
    ed62:	f0 91 71 07 	lds	r31, 0x0771
    ed66:	80 81       	ld	r24, Z
    ed68:	8a 30       	cpi	r24, 0x0A	; 10
    ed6a:	41 f0       	breq	.+16     	; 0xed7c <loop+0xaac>
    ed6c:	e0 91 70 07 	lds	r30, 0x0770
    ed70:	f0 91 71 07 	lds	r31, 0x0771
    ed74:	80 81       	ld	r24, Z
    ed76:	8a 33       	cpi	r24, 0x3A	; 58
    ed78:	09 f0       	breq	.+2      	; 0xed7c <loop+0xaac>
    ed7a:	f8 cc       	rjmp	.-1552   	; 0xe76c <loop+0x49c>
			goto qwhat;


		if(!expression_error && *txtpos == NL)
    ed7c:	80 91 77 07 	lds	r24, 0x0777
    ed80:	88 23       	and	r24, r24
    ed82:	09 f0       	breq	.+2      	; 0xed86 <loop+0xab6>
    ed84:	ee cc       	rjmp	.-1572   	; 0xe762 <loop+0x492>
    ed86:	e0 91 70 07 	lds	r30, 0x0770
    ed8a:	f0 91 71 07 	lds	r31, 0x0771
    ed8e:	80 81       	ld	r24, Z
    ed90:	8a 30       	cpi	r24, 0x0A	; 10
    ed92:	09 f0       	breq	.+2      	; 0xed96 <loop+0xac6>
    ed94:	e6 cc       	rjmp	.-1588   	; 0xe762 <loop+0x492>
		{
			struct stack_for_frame *f;
			if(sp + sizeof(struct stack_for_frame) < stack_limit)
    ed96:	80 91 67 07 	lds	r24, 0x0767
    ed9a:	90 91 68 07 	lds	r25, 0x0768
    ed9e:	9c 01       	movw	r18, r24
    eda0:	26 5f       	subi	r18, 0xF6	; 246
    eda2:	3f 4f       	sbci	r19, 0xFF	; 255
    eda4:	80 91 69 07 	lds	r24, 0x0769
    eda8:	90 91 6a 07 	lds	r25, 0x076A
    edac:	28 17       	cp	r18, r24
    edae:	39 07       	cpc	r19, r25
    edb0:	08 f4       	brcc	.+2      	; 0xedb4 <loop+0xae4>
    edb2:	0c cd       	rjmp	.-1512   	; 0xe7cc <loop+0x4fc>
				goto qsorry;

			sp -= sizeof(struct stack_for_frame);
    edb4:	80 91 67 07 	lds	r24, 0x0767
    edb8:	90 91 68 07 	lds	r25, 0x0768
    edbc:	0a 97       	sbiw	r24, 0x0a	; 10
    edbe:	90 93 68 07 	sts	0x0768, r25
    edc2:	80 93 67 07 	sts	0x0767, r24
			f = (struct stack_for_frame *)sp;
    edc6:	80 91 67 07 	lds	r24, 0x0767
    edca:	90 91 68 07 	lds	r25, 0x0768
    edce:	98 a3       	std	Y+32, r25	; 0x20
    edd0:	8f 8f       	std	Y+31, r24	; 0x1f
			((short int *)variables_begin)[var-'A'] = initial;
    edd2:	80 91 6b 07 	lds	r24, 0x076B
    edd6:	90 91 6c 07 	lds	r25, 0x076C
    edda:	9c 01       	movw	r18, r24
    eddc:	8f a1       	ldd	r24, Y+39	; 0x27
    edde:	88 2f       	mov	r24, r24
    ede0:	90 e0       	ldi	r25, 0x00	; 0
    ede2:	81 54       	subi	r24, 0x41	; 65
    ede4:	90 40       	sbci	r25, 0x00	; 0
    ede6:	88 0f       	add	r24, r24
    ede8:	99 1f       	adc	r25, r25
    edea:	f9 01       	movw	r30, r18
    edec:	e8 0f       	add	r30, r24
    edee:	f9 1f       	adc	r31, r25
    edf0:	8d a1       	ldd	r24, Y+37	; 0x25
    edf2:	9e a1       	ldd	r25, Y+38	; 0x26
    edf4:	91 83       	std	Z+1, r25	; 0x01
    edf6:	80 83       	st	Z, r24
			f->frame_type = STACK_FOR_FLAG;
    edf8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    edfa:	f8 a1       	ldd	r31, Y+32	; 0x20
    edfc:	86 e4       	ldi	r24, 0x46	; 70
    edfe:	80 83       	st	Z, r24
			f->for_var = var;
    ee00:	ef 8d       	ldd	r30, Y+31	; 0x1f
    ee02:	f8 a1       	ldd	r31, Y+32	; 0x20
    ee04:	8f a1       	ldd	r24, Y+39	; 0x27
    ee06:	81 83       	std	Z+1, r24	; 0x01
			f->terminal = terminal;
    ee08:	ef 8d       	ldd	r30, Y+31	; 0x1f
    ee0a:	f8 a1       	ldd	r31, Y+32	; 0x20
    ee0c:	89 a1       	ldd	r24, Y+33	; 0x21
    ee0e:	9a a1       	ldd	r25, Y+34	; 0x22
    ee10:	93 83       	std	Z+3, r25	; 0x03
    ee12:	82 83       	std	Z+2, r24	; 0x02
			f->step     = step;
    ee14:	ef 8d       	ldd	r30, Y+31	; 0x1f
    ee16:	f8 a1       	ldd	r31, Y+32	; 0x20
    ee18:	8b a1       	ldd	r24, Y+35	; 0x23
    ee1a:	9c a1       	ldd	r25, Y+36	; 0x24
    ee1c:	95 83       	std	Z+5, r25	; 0x05
    ee1e:	84 83       	std	Z+4, r24	; 0x04
			f->txtpos   = txtpos;
    ee20:	80 91 70 07 	lds	r24, 0x0770
    ee24:	90 91 71 07 	lds	r25, 0x0771
    ee28:	ef 8d       	ldd	r30, Y+31	; 0x1f
    ee2a:	f8 a1       	ldd	r31, Y+32	; 0x20
    ee2c:	91 87       	std	Z+9, r25	; 0x09
    ee2e:	80 87       	std	Z+8, r24	; 0x08
			f->current_line = current_line;
    ee30:	80 91 6d 07 	lds	r24, 0x076D
    ee34:	90 91 6e 07 	lds	r25, 0x076E
    ee38:	ef 8d       	ldd	r30, Y+31	; 0x1f
    ee3a:	f8 a1       	ldd	r31, Y+32	; 0x20
    ee3c:	97 83       	std	Z+7, r25	; 0x07
    ee3e:	86 83       	std	Z+6, r24	; 0x06
    ee40:	d3 cc       	rjmp	.-1626   	; 0xe7e8 <loop+0x518>
		}
	}
	goto qhow;

gosub:
	expression_error = 0;
    ee42:	10 92 77 07 	sts	0x0777, r1
	linenum = expression();
    ee46:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    ee4a:	90 93 73 07 	sts	0x0773, r25
    ee4e:	80 93 72 07 	sts	0x0772, r24
	if(!expression_error && *txtpos == NL)
    ee52:	80 91 77 07 	lds	r24, 0x0777
    ee56:	88 23       	and	r24, r24
    ee58:	09 f0       	breq	.+2      	; 0xee5c <loop+0xb8c>
    ee5a:	83 cc       	rjmp	.-1786   	; 0xe762 <loop+0x492>
    ee5c:	e0 91 70 07 	lds	r30, 0x0770
    ee60:	f0 91 71 07 	lds	r31, 0x0771
    ee64:	80 81       	ld	r24, Z
    ee66:	8a 30       	cpi	r24, 0x0A	; 10
    ee68:	09 f0       	breq	.+2      	; 0xee6c <loop+0xb9c>
    ee6a:	7b cc       	rjmp	.-1802   	; 0xe762 <loop+0x492>
	{
		struct stack_gosub_frame *f;
		if(sp + sizeof(struct stack_gosub_frame) < stack_limit)
    ee6c:	80 91 67 07 	lds	r24, 0x0767
    ee70:	90 91 68 07 	lds	r25, 0x0768
    ee74:	9c 01       	movw	r18, r24
    ee76:	2b 5f       	subi	r18, 0xFB	; 251
    ee78:	3f 4f       	sbci	r19, 0xFF	; 255
    ee7a:	80 91 69 07 	lds	r24, 0x0769
    ee7e:	90 91 6a 07 	lds	r25, 0x076A
    ee82:	28 17       	cp	r18, r24
    ee84:	39 07       	cpc	r19, r25
    ee86:	08 f4       	brcc	.+2      	; 0xee8a <loop+0xbba>
    ee88:	a1 cc       	rjmp	.-1726   	; 0xe7cc <loop+0x4fc>
			goto qsorry;

		sp -= sizeof(struct stack_gosub_frame);
    ee8a:	80 91 67 07 	lds	r24, 0x0767
    ee8e:	90 91 68 07 	lds	r25, 0x0768
    ee92:	05 97       	sbiw	r24, 0x05	; 5
    ee94:	90 93 68 07 	sts	0x0768, r25
    ee98:	80 93 67 07 	sts	0x0767, r24
		f = (struct stack_gosub_frame *)sp;
    ee9c:	80 91 67 07 	lds	r24, 0x0767
    eea0:	90 91 68 07 	lds	r25, 0x0768
    eea4:	9e 8f       	std	Y+30, r25	; 0x1e
    eea6:	8d 8f       	std	Y+29, r24	; 0x1d
		f->frame_type = STACK_GOSUB_FLAG;
    eea8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    eeaa:	fe 8d       	ldd	r31, Y+30	; 0x1e
    eeac:	87 e4       	ldi	r24, 0x47	; 71
    eeae:	80 83       	st	Z, r24
		f->txtpos = txtpos;
    eeb0:	80 91 70 07 	lds	r24, 0x0770
    eeb4:	90 91 71 07 	lds	r25, 0x0771
    eeb8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    eeba:	fe 8d       	ldd	r31, Y+30	; 0x1e
    eebc:	94 83       	std	Z+4, r25	; 0x04
    eebe:	83 83       	std	Z+3, r24	; 0x03
		f->current_line = current_line;
    eec0:	80 91 6d 07 	lds	r24, 0x076D
    eec4:	90 91 6e 07 	lds	r25, 0x076E
    eec8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    eeca:	fe 8d       	ldd	r31, Y+30	; 0x1e
    eecc:	92 83       	std	Z+2, r25	; 0x02
    eece:	81 83       	std	Z+1, r24	; 0x01
		current_line = findline();
    eed0:	0e 94 29 6b 	call	0xd652	; 0xd652 <_ZL8findlinev>
    eed4:	90 93 6e 07 	sts	0x076E, r25
    eed8:	80 93 6d 07 	sts	0x076D, r24
    eedc:	79 ce       	rjmp	.-782    	; 0xebd0 <loop+0x900>
	}
	goto qhow;

next:
	// Fnd the variable name
	ignore_blanks();
    eede:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
	if(*txtpos < 'A' || *txtpos > 'Z')
    eee2:	e0 91 70 07 	lds	r30, 0x0770
    eee6:	f0 91 71 07 	lds	r31, 0x0771
    eeea:	80 81       	ld	r24, Z
    eeec:	81 34       	cpi	r24, 0x41	; 65
    eeee:	08 f4       	brcc	.+2      	; 0xeef2 <loop+0xc22>
    eef0:	38 cc       	rjmp	.-1936   	; 0xe762 <loop+0x492>
    eef2:	e0 91 70 07 	lds	r30, 0x0770
    eef6:	f0 91 71 07 	lds	r31, 0x0771
    eefa:	80 81       	ld	r24, Z
    eefc:	8b 35       	cpi	r24, 0x5B	; 91
    eefe:	08 f0       	brcs	.+2      	; 0xef02 <loop+0xc32>
    ef00:	30 cc       	rjmp	.-1952   	; 0xe762 <loop+0x492>
		goto qhow;
	txtpos++;
    ef02:	80 91 70 07 	lds	r24, 0x0770
    ef06:	90 91 71 07 	lds	r25, 0x0771
    ef0a:	01 96       	adiw	r24, 0x01	; 1
    ef0c:	90 93 71 07 	sts	0x0771, r25
    ef10:	80 93 70 07 	sts	0x0770, r24
	ignore_blanks();
    ef14:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
	if(*txtpos != ':' && *txtpos != NL)
    ef18:	e0 91 70 07 	lds	r30, 0x0770
    ef1c:	f0 91 71 07 	lds	r31, 0x0771
    ef20:	80 81       	ld	r24, Z
    ef22:	8a 33       	cpi	r24, 0x3A	; 58
    ef24:	41 f0       	breq	.+16     	; 0xef36 <loop+0xc66>
    ef26:	e0 91 70 07 	lds	r30, 0x0770
    ef2a:	f0 91 71 07 	lds	r31, 0x0771
    ef2e:	80 81       	ld	r24, Z
    ef30:	8a 30       	cpi	r24, 0x0A	; 10
    ef32:	09 f0       	breq	.+2      	; 0xef36 <loop+0xc66>
    ef34:	1b cc       	rjmp	.-1994   	; 0xe76c <loop+0x49c>
		goto qwhat;
	
gosub_return:
	// Now walk up the stack frames and find the frame we want, if present
	tempsp = sp;
    ef36:	80 91 67 07 	lds	r24, 0x0767
    ef3a:	90 91 68 07 	lds	r25, 0x0768
    ef3e:	90 93 79 07 	sts	0x0779, r25
    ef42:	80 93 78 07 	sts	0x0778, r24
    ef46:	cb c0       	rjmp	.+406    	; 0xf0de <loop+0xe0e>
	while(tempsp < program+sizeof(program)-1)
	{
		switch(tempsp[0])
    ef48:	e0 91 78 07 	lds	r30, 0x0778
    ef4c:	f0 91 79 07 	lds	r31, 0x0779
    ef50:	80 81       	ld	r24, Z
    ef52:	28 2f       	mov	r18, r24
    ef54:	30 e0       	ldi	r19, 0x00	; 0
    ef56:	27 96       	adiw	r28, 0x07	; 7
    ef58:	3f af       	std	Y+63, r19	; 0x3f
    ef5a:	2e af       	std	Y+62, r18	; 0x3e
    ef5c:	27 97       	sbiw	r28, 0x07	; 7
    ef5e:	27 96       	adiw	r28, 0x07	; 7
    ef60:	4e ad       	ldd	r20, Y+62	; 0x3e
    ef62:	5f ad       	ldd	r21, Y+63	; 0x3f
    ef64:	27 97       	sbiw	r28, 0x07	; 7
    ef66:	46 34       	cpi	r20, 0x46	; 70
    ef68:	51 05       	cpc	r21, r1
    ef6a:	b1 f1       	breq	.+108    	; 0xefd8 <loop+0xd08>
    ef6c:	27 96       	adiw	r28, 0x07	; 7
    ef6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    ef70:	9f ad       	ldd	r25, Y+63	; 0x3f
    ef72:	27 97       	sbiw	r28, 0x07	; 7
    ef74:	87 34       	cpi	r24, 0x47	; 71
    ef76:	91 05       	cpc	r25, r1
    ef78:	09 f0       	breq	.+2      	; 0xef7c <loop+0xcac>
    ef7a:	f3 c9       	rjmp	.-3098   	; 0xe362 <loop+0x92>
		{
			case STACK_GOSUB_FLAG:
				if(table_index == KW_RETURN)
    ef7c:	80 91 76 07 	lds	r24, 0x0776
    ef80:	8a 30       	cpi	r24, 0x0A	; 10
    ef82:	01 f5       	brne	.+64     	; 0xefc4 <loop+0xcf4>
				{
					struct stack_gosub_frame *f = (struct stack_gosub_frame *)tempsp;
    ef84:	80 91 78 07 	lds	r24, 0x0778
    ef88:	90 91 79 07 	lds	r25, 0x0779
    ef8c:	9c 8f       	std	Y+28, r25	; 0x1c
    ef8e:	8b 8f       	std	Y+27, r24	; 0x1b
					current_line	= f->current_line;
    ef90:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ef92:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ef94:	81 81       	ldd	r24, Z+1	; 0x01
    ef96:	92 81       	ldd	r25, Z+2	; 0x02
    ef98:	90 93 6e 07 	sts	0x076E, r25
    ef9c:	80 93 6d 07 	sts	0x076D, r24
					txtpos			= f->txtpos;
    efa0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    efa2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    efa4:	83 81       	ldd	r24, Z+3	; 0x03
    efa6:	94 81       	ldd	r25, Z+4	; 0x04
    efa8:	90 93 71 07 	sts	0x0771, r25
    efac:	80 93 70 07 	sts	0x0770, r24
					sp += sizeof(struct stack_gosub_frame);
    efb0:	80 91 67 07 	lds	r24, 0x0767
    efb4:	90 91 68 07 	lds	r25, 0x0768
    efb8:	05 96       	adiw	r24, 0x05	; 5
    efba:	90 93 68 07 	sts	0x0768, r25
    efbe:	80 93 67 07 	sts	0x0767, r24
    efc2:	12 cc       	rjmp	.-2012   	; 0xe7e8 <loop+0x518>
					goto run_next_statement;
				}
				// This is not the loop you are looking for... so Walk back up the stack
				tempsp += sizeof(struct stack_gosub_frame);
    efc4:	80 91 78 07 	lds	r24, 0x0778
    efc8:	90 91 79 07 	lds	r25, 0x0779
    efcc:	05 96       	adiw	r24, 0x05	; 5
    efce:	90 93 79 07 	sts	0x0779, r25
    efd2:	80 93 78 07 	sts	0x0778, r24
    efd6:	83 c0       	rjmp	.+262    	; 0xf0de <loop+0xe0e>
				break;
			case STACK_FOR_FLAG:
				// Flag, Var, Final, Step
				if(table_index == KW_NEXT)
    efd8:	80 91 76 07 	lds	r24, 0x0776
    efdc:	85 30       	cpi	r24, 0x05	; 5
    efde:	09 f0       	breq	.+2      	; 0xefe2 <loop+0xd12>
    efe0:	75 c0       	rjmp	.+234    	; 0xf0cc <loop+0xdfc>
				{
					struct stack_for_frame *f = (struct stack_for_frame *)tempsp;
    efe2:	80 91 78 07 	lds	r24, 0x0778
    efe6:	90 91 79 07 	lds	r25, 0x0779
    efea:	9a 8f       	std	Y+26, r25	; 0x1a
    efec:	89 8f       	std	Y+25, r24	; 0x19
					// Is the the variable we are looking for?
					if(txtpos[-1] == f->for_var)
    efee:	80 91 70 07 	lds	r24, 0x0770
    eff2:	90 91 71 07 	lds	r25, 0x0771
    eff6:	fc 01       	movw	r30, r24
    eff8:	31 97       	sbiw	r30, 0x01	; 1
    effa:	90 81       	ld	r25, Z
    effc:	e9 8d       	ldd	r30, Y+25	; 0x19
    effe:	fa 8d       	ldd	r31, Y+26	; 0x1a
    f000:	81 81       	ldd	r24, Z+1	; 0x01
    f002:	98 17       	cp	r25, r24
    f004:	09 f0       	breq	.+2      	; 0xf008 <loop+0xd38>
    f006:	62 c0       	rjmp	.+196    	; 0xf0cc <loop+0xdfc>
					{
						short int *varaddr = ((short int *)variables_begin) + txtpos[-1] - 'A'; 
    f008:	80 91 6b 07 	lds	r24, 0x076B
    f00c:	90 91 6c 07 	lds	r25, 0x076C
    f010:	9c 01       	movw	r18, r24
    f012:	80 91 70 07 	lds	r24, 0x0770
    f016:	90 91 71 07 	lds	r25, 0x0771
    f01a:	fc 01       	movw	r30, r24
    f01c:	31 97       	sbiw	r30, 0x01	; 1
    f01e:	80 81       	ld	r24, Z
    f020:	88 2f       	mov	r24, r24
    f022:	90 e0       	ldi	r25, 0x00	; 0
    f024:	81 54       	subi	r24, 0x41	; 65
    f026:	90 40       	sbci	r25, 0x00	; 0
    f028:	88 0f       	add	r24, r24
    f02a:	99 1f       	adc	r25, r25
    f02c:	82 0f       	add	r24, r18
    f02e:	93 1f       	adc	r25, r19
    f030:	98 8f       	std	Y+24, r25	; 0x18
    f032:	8f 8b       	std	Y+23, r24	; 0x17
						*varaddr = *varaddr + f->step;
    f034:	ef 89       	ldd	r30, Y+23	; 0x17
    f036:	f8 8d       	ldd	r31, Y+24	; 0x18
    f038:	20 81       	ld	r18, Z
    f03a:	31 81       	ldd	r19, Z+1	; 0x01
    f03c:	e9 8d       	ldd	r30, Y+25	; 0x19
    f03e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    f040:	84 81       	ldd	r24, Z+4	; 0x04
    f042:	95 81       	ldd	r25, Z+5	; 0x05
    f044:	82 0f       	add	r24, r18
    f046:	93 1f       	adc	r25, r19
    f048:	ef 89       	ldd	r30, Y+23	; 0x17
    f04a:	f8 8d       	ldd	r31, Y+24	; 0x18
    f04c:	91 83       	std	Z+1, r25	; 0x01
    f04e:	80 83       	st	Z, r24
						// Use a different test depending on the sign of the step increment
						if((f->step > 0 && *varaddr <= f->terminal) || (f->step < 0 && *varaddr >= f->terminal))
    f050:	e9 8d       	ldd	r30, Y+25	; 0x19
    f052:	fa 8d       	ldd	r31, Y+26	; 0x1a
    f054:	84 81       	ldd	r24, Z+4	; 0x04
    f056:	95 81       	ldd	r25, Z+5	; 0x05
    f058:	18 16       	cp	r1, r24
    f05a:	19 06       	cpc	r1, r25
    f05c:	5c f4       	brge	.+22     	; 0xf074 <loop+0xda4>
    f05e:	ef 89       	ldd	r30, Y+23	; 0x17
    f060:	f8 8d       	ldd	r31, Y+24	; 0x18
    f062:	20 81       	ld	r18, Z
    f064:	31 81       	ldd	r19, Z+1	; 0x01
    f066:	e9 8d       	ldd	r30, Y+25	; 0x19
    f068:	fa 8d       	ldd	r31, Y+26	; 0x1a
    f06a:	82 81       	ldd	r24, Z+2	; 0x02
    f06c:	93 81       	ldd	r25, Z+3	; 0x03
    f06e:	82 17       	cp	r24, r18
    f070:	93 07       	cpc	r25, r19
    f072:	8c f4       	brge	.+34     	; 0xf096 <loop+0xdc6>
    f074:	e9 8d       	ldd	r30, Y+25	; 0x19
    f076:	fa 8d       	ldd	r31, Y+26	; 0x1a
    f078:	84 81       	ldd	r24, Z+4	; 0x04
    f07a:	95 81       	ldd	r25, Z+5	; 0x05
    f07c:	99 23       	and	r25, r25
    f07e:	e4 f4       	brge	.+56     	; 0xf0b8 <loop+0xde8>
    f080:	ef 89       	ldd	r30, Y+23	; 0x17
    f082:	f8 8d       	ldd	r31, Y+24	; 0x18
    f084:	20 81       	ld	r18, Z
    f086:	31 81       	ldd	r19, Z+1	; 0x01
    f088:	e9 8d       	ldd	r30, Y+25	; 0x19
    f08a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    f08c:	82 81       	ldd	r24, Z+2	; 0x02
    f08e:	93 81       	ldd	r25, Z+3	; 0x03
    f090:	28 17       	cp	r18, r24
    f092:	39 07       	cpc	r19, r25
    f094:	8c f0       	brlt	.+34     	; 0xf0b8 <loop+0xde8>
						{
							// We have to loop so don't pop the stack
							txtpos = f->txtpos;
    f096:	e9 8d       	ldd	r30, Y+25	; 0x19
    f098:	fa 8d       	ldd	r31, Y+26	; 0x1a
    f09a:	80 85       	ldd	r24, Z+8	; 0x08
    f09c:	91 85       	ldd	r25, Z+9	; 0x09
    f09e:	90 93 71 07 	sts	0x0771, r25
    f0a2:	80 93 70 07 	sts	0x0770, r24
							current_line = f->current_line;
    f0a6:	e9 8d       	ldd	r30, Y+25	; 0x19
    f0a8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    f0aa:	86 81       	ldd	r24, Z+6	; 0x06
    f0ac:	97 81       	ldd	r25, Z+7	; 0x07
    f0ae:	90 93 6e 07 	sts	0x076E, r25
    f0b2:	80 93 6d 07 	sts	0x076D, r24
    f0b6:	98 cb       	rjmp	.-2256   	; 0xe7e8 <loop+0x518>
							goto run_next_statement;
						}
						// We've run to the end of the loop. drop out of the loop, popping the stack
						sp = tempsp + sizeof(struct stack_for_frame);
    f0b8:	80 91 78 07 	lds	r24, 0x0778
    f0bc:	90 91 79 07 	lds	r25, 0x0779
    f0c0:	0a 96       	adiw	r24, 0x0a	; 10
    f0c2:	90 93 68 07 	sts	0x0768, r25
    f0c6:	80 93 67 07 	sts	0x0767, r24
    f0ca:	8e cb       	rjmp	.-2276   	; 0xe7e8 <loop+0x518>
						goto run_next_statement;
					}
				}
				// This is not the loop you are looking for... so Walk back up the stack
				tempsp += sizeof(struct stack_for_frame);
    f0cc:	80 91 78 07 	lds	r24, 0x0778
    f0d0:	90 91 79 07 	lds	r25, 0x0779
    f0d4:	0a 96       	adiw	r24, 0x0a	; 10
    f0d6:	90 93 79 07 	sts	0x0779, r25
    f0da:	80 93 78 07 	sts	0x0778, r24
		goto qwhat;
	
gosub_return:
	// Now walk up the stack frames and find the frame we want, if present
	tempsp = sp;
	while(tempsp < program+sizeof(program)-1)
    f0de:	80 91 78 07 	lds	r24, 0x0778
    f0e2:	90 91 79 07 	lds	r25, 0x0779
    f0e6:	27 e0       	ldi	r18, 0x07	; 7
    f0e8:	84 36       	cpi	r24, 0x64	; 100
    f0ea:	92 07       	cpc	r25, r18
    f0ec:	08 f4       	brcc	.+2      	; 0xf0f0 <loop+0xe20>
    f0ee:	2c cf       	rjmp	.-424    	; 0xef48 <loop+0xc78>
    f0f0:	38 cb       	rjmp	.-2448   	; 0xe762 <loop+0x492>
assignment:
	{
		short int value;
		short int *var;

		if(*txtpos < 'A' || *txtpos > 'Z')
    f0f2:	e0 91 70 07 	lds	r30, 0x0770
    f0f6:	f0 91 71 07 	lds	r31, 0x0771
    f0fa:	80 81       	ld	r24, Z
    f0fc:	81 34       	cpi	r24, 0x41	; 65
    f0fe:	08 f4       	brcc	.+2      	; 0xf102 <loop+0xe32>
    f100:	30 cb       	rjmp	.-2464   	; 0xe762 <loop+0x492>
    f102:	e0 91 70 07 	lds	r30, 0x0770
    f106:	f0 91 71 07 	lds	r31, 0x0771
    f10a:	80 81       	ld	r24, Z
    f10c:	8b 35       	cpi	r24, 0x5B	; 91
    f10e:	08 f0       	brcs	.+2      	; 0xf112 <loop+0xe42>
    f110:	28 cb       	rjmp	.-2480   	; 0xe762 <loop+0x492>
			goto qhow;
		var = (short int *)variables_begin + *txtpos - 'A';
    f112:	80 91 6b 07 	lds	r24, 0x076B
    f116:	90 91 6c 07 	lds	r25, 0x076C
    f11a:	9c 01       	movw	r18, r24
    f11c:	e0 91 70 07 	lds	r30, 0x0770
    f120:	f0 91 71 07 	lds	r31, 0x0771
    f124:	80 81       	ld	r24, Z
    f126:	88 2f       	mov	r24, r24
    f128:	90 e0       	ldi	r25, 0x00	; 0
    f12a:	81 54       	subi	r24, 0x41	; 65
    f12c:	90 40       	sbci	r25, 0x00	; 0
    f12e:	88 0f       	add	r24, r24
    f130:	99 1f       	adc	r25, r25
    f132:	82 0f       	add	r24, r18
    f134:	93 1f       	adc	r25, r19
    f136:	9c 8b       	std	Y+20, r25	; 0x14
    f138:	8b 8b       	std	Y+19, r24	; 0x13
		txtpos++;
    f13a:	80 91 70 07 	lds	r24, 0x0770
    f13e:	90 91 71 07 	lds	r25, 0x0771
    f142:	01 96       	adiw	r24, 0x01	; 1
    f144:	90 93 71 07 	sts	0x0771, r25
    f148:	80 93 70 07 	sts	0x0770, r24

		ignore_blanks();
    f14c:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>

		if (*txtpos != '=')
    f150:	e0 91 70 07 	lds	r30, 0x0770
    f154:	f0 91 71 07 	lds	r31, 0x0771
    f158:	80 81       	ld	r24, Z
    f15a:	8d 33       	cpi	r24, 0x3D	; 61
    f15c:	09 f0       	breq	.+2      	; 0xf160 <loop+0xe90>
    f15e:	06 cb       	rjmp	.-2548   	; 0xe76c <loop+0x49c>
			goto qwhat;
		txtpos++;
    f160:	80 91 70 07 	lds	r24, 0x0770
    f164:	90 91 71 07 	lds	r25, 0x0771
    f168:	01 96       	adiw	r24, 0x01	; 1
    f16a:	90 93 71 07 	sts	0x0771, r25
    f16e:	80 93 70 07 	sts	0x0770, r24
		ignore_blanks();
    f172:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
		expression_error = 0;
    f176:	10 92 77 07 	sts	0x0777, r1
		value = expression();
    f17a:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    f17e:	9e 8b       	std	Y+22, r25	; 0x16
    f180:	8d 8b       	std	Y+21, r24	; 0x15
		if(expression_error)
    f182:	80 91 77 07 	lds	r24, 0x0777
    f186:	88 23       	and	r24, r24
    f188:	09 f0       	breq	.+2      	; 0xf18c <loop+0xebc>
    f18a:	f0 ca       	rjmp	.-2592   	; 0xe76c <loop+0x49c>
			goto qwhat;
		// Check that we are at the end of the statement
		if(*txtpos != NL && *txtpos != ':')
    f18c:	e0 91 70 07 	lds	r30, 0x0770
    f190:	f0 91 71 07 	lds	r31, 0x0771
    f194:	80 81       	ld	r24, Z
    f196:	8a 30       	cpi	r24, 0x0A	; 10
    f198:	41 f0       	breq	.+16     	; 0xf1aa <loop+0xeda>
    f19a:	e0 91 70 07 	lds	r30, 0x0770
    f19e:	f0 91 71 07 	lds	r31, 0x0771
    f1a2:	80 81       	ld	r24, Z
    f1a4:	8a 33       	cpi	r24, 0x3A	; 58
    f1a6:	09 f0       	breq	.+2      	; 0xf1aa <loop+0xeda>
    f1a8:	e1 ca       	rjmp	.-2622   	; 0xe76c <loop+0x49c>
			goto qwhat;
		*var = value;
    f1aa:	eb 89       	ldd	r30, Y+19	; 0x13
    f1ac:	fc 89       	ldd	r31, Y+20	; 0x14
    f1ae:	8d 89       	ldd	r24, Y+21	; 0x15
    f1b0:	9e 89       	ldd	r25, Y+22	; 0x16
    f1b2:	91 83       	std	Z+1, r25	; 0x01
    f1b4:	80 83       	st	Z, r24
    f1b6:	18 cb       	rjmp	.-2512   	; 0xe7e8 <loop+0x518>
	{
		short int value;
		unsigned char *address;

		// Work out where to put it
		expression_error = 0;
    f1b8:	10 92 77 07 	sts	0x0777, r1
		value = expression();
    f1bc:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    f1c0:	9a 8b       	std	Y+18, r25	; 0x12
    f1c2:	89 8b       	std	Y+17, r24	; 0x11
		if(expression_error)
    f1c4:	80 91 77 07 	lds	r24, 0x0777
    f1c8:	88 23       	and	r24, r24
    f1ca:	09 f0       	breq	.+2      	; 0xf1ce <loop+0xefe>
    f1cc:	cf ca       	rjmp	.-2658   	; 0xe76c <loop+0x49c>
			goto qwhat;
		address = (unsigned char *)value;
    f1ce:	89 89       	ldd	r24, Y+17	; 0x11
    f1d0:	9a 89       	ldd	r25, Y+18	; 0x12
    f1d2:	98 8b       	std	Y+16, r25	; 0x10
    f1d4:	8f 87       	std	Y+15, r24	; 0x0f

		// check for a comma
		ignore_blanks();
    f1d6:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
		if (*txtpos != ',')
    f1da:	e0 91 70 07 	lds	r30, 0x0770
    f1de:	f0 91 71 07 	lds	r31, 0x0771
    f1e2:	80 81       	ld	r24, Z
    f1e4:	8c 32       	cpi	r24, 0x2C	; 44
    f1e6:	09 f0       	breq	.+2      	; 0xf1ea <loop+0xf1a>
    f1e8:	c1 ca       	rjmp	.-2686   	; 0xe76c <loop+0x49c>
			goto qwhat;
		txtpos++;
    f1ea:	80 91 70 07 	lds	r24, 0x0770
    f1ee:	90 91 71 07 	lds	r25, 0x0771
    f1f2:	01 96       	adiw	r24, 0x01	; 1
    f1f4:	90 93 71 07 	sts	0x0771, r25
    f1f8:	80 93 70 07 	sts	0x0770, r24
		ignore_blanks();
    f1fc:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>

		// Now get the value to assign
		expression_error = 0;
    f200:	10 92 77 07 	sts	0x0777, r1
		value = expression();
    f204:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    f208:	9a 8b       	std	Y+18, r25	; 0x12
    f20a:	89 8b       	std	Y+17, r24	; 0x11
		if(expression_error)
    f20c:	80 91 77 07 	lds	r24, 0x0777
    f210:	88 23       	and	r24, r24
    f212:	09 f0       	breq	.+2      	; 0xf216 <loop+0xf46>
    f214:	ab ca       	rjmp	.-2730   	; 0xe76c <loop+0x49c>
			goto qwhat;
		//printf("Poke %p value %i\n",address, (unsigned char)value);
		// Check that we are at the end of the statement
		if(*txtpos != NL && *txtpos != ':')
    f216:	e0 91 70 07 	lds	r30, 0x0770
    f21a:	f0 91 71 07 	lds	r31, 0x0771
    f21e:	80 81       	ld	r24, Z
    f220:	8a 30       	cpi	r24, 0x0A	; 10
    f222:	09 f4       	brne	.+2      	; 0xf226 <loop+0xf56>
    f224:	e1 ca       	rjmp	.-2622   	; 0xe7e8 <loop+0x518>
    f226:	e0 91 70 07 	lds	r30, 0x0770
    f22a:	f0 91 71 07 	lds	r31, 0x0771
    f22e:	80 81       	ld	r24, Z
    f230:	8a 33       	cpi	r24, 0x3A	; 58
    f232:	09 f0       	breq	.+2      	; 0xf236 <loop+0xf66>
    f234:	9b ca       	rjmp	.-2762   	; 0xe76c <loop+0x49c>
    f236:	d8 ca       	rjmp	.-2640   	; 0xe7e8 <loop+0x518>
			goto qwhat;
	}
	goto run_next_statement;

list:
	linenum = testnum(); // Retuns 0 if no line found.
    f238:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <_ZL7testnumv>
    f23c:	90 93 73 07 	sts	0x0773, r25
    f240:	80 93 72 07 	sts	0x0772, r24

	// Should be EOL
	if(txtpos[0] != NL)
    f244:	e0 91 70 07 	lds	r30, 0x0770
    f248:	f0 91 71 07 	lds	r31, 0x0771
    f24c:	80 81       	ld	r24, Z
    f24e:	8a 30       	cpi	r24, 0x0A	; 10
    f250:	09 f0       	breq	.+2      	; 0xf254 <loop+0xf84>
    f252:	8c ca       	rjmp	.-2792   	; 0xe76c <loop+0x49c>
		goto qwhat;

	// Find the line
	list_line = findline();
    f254:	0e 94 29 6b 	call	0xd652	; 0xd652 <_ZL8findlinev>
    f258:	90 93 75 07 	sts	0x0775, r25
    f25c:	80 93 74 07 	sts	0x0774, r24
    f260:	02 c0       	rjmp	.+4      	; 0xf266 <loop+0xf96>
	while(list_line != program_end)
          printline();
    f262:	0e 94 40 6d 	call	0xda80	; 0xda80 <_Z9printlinev>
	if(txtpos[0] != NL)
		goto qwhat;

	// Find the line
	list_line = findline();
	while(list_line != program_end)
    f266:	20 91 74 07 	lds	r18, 0x0774
    f26a:	30 91 75 07 	lds	r19, 0x0775
    f26e:	80 91 65 07 	lds	r24, 0x0765
    f272:	90 91 66 07 	lds	r25, 0x0766
    f276:	28 17       	cp	r18, r24
    f278:	39 07       	cpc	r19, r25
    f27a:	99 f7       	brne	.-26     	; 0xf262 <loop+0xf92>
    f27c:	72 c8       	rjmp	.-3868   	; 0xe362 <loop+0x92>
          printline();
	goto warmstart;

print:
	// If we have an empty list then just put out a NL
	if(*txtpos == ':' )
    f27e:	e0 91 70 07 	lds	r30, 0x0770
    f282:	f0 91 71 07 	lds	r31, 0x0771
    f286:	80 81       	ld	r24, Z
    f288:	8a 33       	cpi	r24, 0x3A	; 58
    f28a:	61 f4       	brne	.+24     	; 0xf2a4 <loop+0xfd4>
	{
        line_terminator();
    f28c:	0e 94 10 6c 	call	0xd820	; 0xd820 <_ZL15line_terminatorv>
		txtpos++;
    f290:	80 91 70 07 	lds	r24, 0x0770
    f294:	90 91 71 07 	lds	r25, 0x0771
    f298:	01 96       	adiw	r24, 0x01	; 1
    f29a:	90 93 71 07 	sts	0x0771, r25
    f29e:	80 93 70 07 	sts	0x0770, r24
    f2a2:	a2 ca       	rjmp	.-2748   	; 0xe7e8 <loop+0x518>
		goto run_next_statement;
	}
	if(*txtpos == NL)
    f2a4:	e0 91 70 07 	lds	r30, 0x0770
    f2a8:	f0 91 71 07 	lds	r31, 0x0771
    f2ac:	80 81       	ld	r24, Z
    f2ae:	8a 30       	cpi	r24, 0x0A	; 10
    f2b0:	09 f4       	brne	.+2      	; 0xf2b4 <loop+0xfe4>
    f2b2:	74 cc       	rjmp	.-1816   	; 0xeb9c <loop+0x8cc>
		goto execnextline;
	}

	while(1)
	{
		ignore_blanks();
    f2b4:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
		if(print_quoted_string())
    f2b8:	0e 94 1d 6c 	call	0xd83a	; 0xd83a <_ZL19print_quoted_stringv>
    f2bc:	2b 96       	adiw	r28, 0x0b	; 11
    f2be:	8f af       	std	Y+63, r24	; 0x3f
    f2c0:	2b 97       	sbiw	r28, 0x0b	; 11
    f2c2:	2b 96       	adiw	r28, 0x0b	; 11
    f2c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    f2c6:	2b 97       	sbiw	r28, 0x0b	; 11
    f2c8:	33 23       	and	r19, r19
    f2ca:	21 f0       	breq	.+8      	; 0xf2d4 <loop+0x1004>
    f2cc:	41 e0       	ldi	r20, 0x01	; 1
    f2ce:	2b 96       	adiw	r28, 0x0b	; 11
    f2d0:	4f af       	std	Y+63, r20	; 0x3f
    f2d2:	2b 97       	sbiw	r28, 0x0b	; 11
    f2d4:	2b 96       	adiw	r28, 0x0b	; 11
    f2d6:	8f ad       	ldd	r24, Y+63	; 0x3f
    f2d8:	2b 97       	sbiw	r28, 0x0b	; 11
    f2da:	91 e0       	ldi	r25, 0x01	; 1
    f2dc:	89 27       	eor	r24, r25
    f2de:	88 23       	and	r24, r24
    f2e0:	f9 f0       	breq	.+62     	; 0xf320 <loop+0x1050>
		{
			;
		}
		else if(*txtpos == '"' || *txtpos == '\'')
    f2e2:	e0 91 70 07 	lds	r30, 0x0770
    f2e6:	f0 91 71 07 	lds	r31, 0x0771
    f2ea:	80 81       	ld	r24, Z
    f2ec:	82 32       	cpi	r24, 0x22	; 34
    f2ee:	09 f4       	brne	.+2      	; 0xf2f2 <loop+0x1022>
    f2f0:	3d ca       	rjmp	.-2950   	; 0xe76c <loop+0x49c>
    f2f2:	e0 91 70 07 	lds	r30, 0x0770
    f2f6:	f0 91 71 07 	lds	r31, 0x0771
    f2fa:	80 81       	ld	r24, Z
    f2fc:	87 32       	cpi	r24, 0x27	; 39
    f2fe:	09 f4       	brne	.+2      	; 0xf302 <loop+0x1032>
    f300:	35 ca       	rjmp	.-2966   	; 0xe76c <loop+0x49c>
			goto qwhat;
		else
		{
			short int e;
			expression_error = 0;
    f302:	10 92 77 07 	sts	0x0777, r1
			e = expression();
    f306:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    f30a:	9e 87       	std	Y+14, r25	; 0x0e
    f30c:	8d 87       	std	Y+13, r24	; 0x0d
			if(expression_error)
    f30e:	80 91 77 07 	lds	r24, 0x0777
    f312:	88 23       	and	r24, r24
    f314:	09 f0       	breq	.+2      	; 0xf318 <loop+0x1048>
    f316:	2a ca       	rjmp	.-2988   	; 0xe76c <loop+0x49c>
				goto qwhat;
			printnum(e);
    f318:	8d 85       	ldd	r24, Y+13	; 0x0d
    f31a:	9e 85       	ldd	r25, Y+14	; 0x0e
    f31c:	0e 94 f4 6c 	call	0xd9e8	; 0xd9e8 <_Z8printnumi>
		}

		// At this point we have three options, a comma or a new line
		if(*txtpos == ',')
    f320:	e0 91 70 07 	lds	r30, 0x0770
    f324:	f0 91 71 07 	lds	r31, 0x0771
    f328:	80 81       	ld	r24, Z
    f32a:	8c 32       	cpi	r24, 0x2C	; 44
    f32c:	51 f4       	brne	.+20     	; 0xf342 <loop+0x1072>
			txtpos++;	// Skip the comma and move onto the next
    f32e:	80 91 70 07 	lds	r24, 0x0770
    f332:	90 91 71 07 	lds	r25, 0x0771
    f336:	01 96       	adiw	r24, 0x01	; 1
    f338:	90 93 71 07 	sts	0x0771, r25
    f33c:	80 93 70 07 	sts	0x0770, r24
    f340:	b9 cf       	rjmp	.-142    	; 0xf2b4 <loop+0xfe4>
		else if(txtpos[0] == ';' && (txtpos[1] == NL || txtpos[1] == ':'))
    f342:	e0 91 70 07 	lds	r30, 0x0770
    f346:	f0 91 71 07 	lds	r31, 0x0771
    f34a:	80 81       	ld	r24, Z
    f34c:	8b 33       	cpi	r24, 0x3B	; 59
    f34e:	e1 f4       	brne	.+56     	; 0xf388 <loop+0x10b8>
    f350:	80 91 70 07 	lds	r24, 0x0770
    f354:	90 91 71 07 	lds	r25, 0x0771
    f358:	fc 01       	movw	r30, r24
    f35a:	31 96       	adiw	r30, 0x01	; 1
    f35c:	80 81       	ld	r24, Z
    f35e:	8a 30       	cpi	r24, 0x0A	; 10
    f360:	49 f0       	breq	.+18     	; 0xf374 <loop+0x10a4>
    f362:	80 91 70 07 	lds	r24, 0x0770
    f366:	90 91 71 07 	lds	r25, 0x0771
    f36a:	fc 01       	movw	r30, r24
    f36c:	31 96       	adiw	r30, 0x01	; 1
    f36e:	80 81       	ld	r24, Z
    f370:	8a 33       	cpi	r24, 0x3A	; 58
    f372:	51 f4       	brne	.+20     	; 0xf388 <loop+0x10b8>
		{
			txtpos++; // This has to be the end of the print - no newline
    f374:	80 91 70 07 	lds	r24, 0x0770
    f378:	90 91 71 07 	lds	r25, 0x0771
    f37c:	01 96       	adiw	r24, 0x01	; 1
    f37e:	90 93 71 07 	sts	0x0771, r25
    f382:	80 93 70 07 	sts	0x0770, r24
    f386:	30 ca       	rjmp	.-2976   	; 0xe7e8 <loop+0x518>
			break;
		}
		else if(*txtpos == NL || *txtpos == ':')
    f388:	e0 91 70 07 	lds	r30, 0x0770
    f38c:	f0 91 71 07 	lds	r31, 0x0771
    f390:	80 81       	ld	r24, Z
    f392:	8a 30       	cpi	r24, 0x0A	; 10
    f394:	41 f0       	breq	.+16     	; 0xf3a6 <loop+0x10d6>
    f396:	e0 91 70 07 	lds	r30, 0x0770
    f39a:	f0 91 71 07 	lds	r31, 0x0771
    f39e:	80 81       	ld	r24, Z
    f3a0:	8a 33       	cpi	r24, 0x3A	; 58
    f3a2:	09 f0       	breq	.+2      	; 0xf3a6 <loop+0x10d6>
    f3a4:	e3 c9       	rjmp	.-3130   	; 0xe76c <loop+0x49c>
		{
			line_terminator();	// The end of the print statement
    f3a6:	0e 94 10 6c 	call	0xd820	; 0xd820 <_ZL15line_terminatorv>
    f3aa:	1e ca       	rjmp	.-3012   	; 0xe7e8 <loop+0x518>
			goto qwhat;	
	}
	goto run_next_statement;

mem:
	printnum(variables_begin-program_end);
    f3ac:	80 91 6b 07 	lds	r24, 0x076B
    f3b0:	90 91 6c 07 	lds	r25, 0x076C
    f3b4:	9c 01       	movw	r18, r24
    f3b6:	80 91 65 07 	lds	r24, 0x0765
    f3ba:	90 91 66 07 	lds	r25, 0x0766
    f3be:	a9 01       	movw	r20, r18
    f3c0:	48 1b       	sub	r20, r24
    f3c2:	59 0b       	sbc	r21, r25
    f3c4:	ca 01       	movw	r24, r20
    f3c6:	0e 94 f4 6c 	call	0xd9e8	; 0xd9e8 <_Z8printnumi>
	printmsg(memorymsg);
    f3ca:	89 e3       	ldi	r24, 0x39	; 57
    f3cc:	91 e0       	ldi	r25, 0x01	; 1
    f3ce:	0e 94 a5 6c 	call	0xd94a	; 0xd94a <_Z8printmsgPKh>
    f3d2:	0a ca       	rjmp	.-3052   	; 0xe7e8 <loop+0x518>
		short int pinNo;
                short int value;
                unsigned char *txtposBak;

		// Get the pin number
		expression_error = 0;
    f3d4:	10 92 77 07 	sts	0x0777, r1
		pinNo = expression();
    f3d8:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    f3dc:	9c 87       	std	Y+12, r25	; 0x0c
    f3de:	8b 87       	std	Y+11, r24	; 0x0b
		if(expression_error)
    f3e0:	80 91 77 07 	lds	r24, 0x0777
    f3e4:	88 23       	and	r24, r24
    f3e6:	09 f0       	breq	.+2      	; 0xf3ea <loop+0x111a>
    f3e8:	c1 c9       	rjmp	.-3198   	; 0xe76c <loop+0x49c>
			goto qwhat;

		// check for a comma
		ignore_blanks();
    f3ea:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
		if (*txtpos != ',')
    f3ee:	e0 91 70 07 	lds	r30, 0x0770
    f3f2:	f0 91 71 07 	lds	r31, 0x0771
    f3f6:	80 81       	ld	r24, Z
    f3f8:	8c 32       	cpi	r24, 0x2C	; 44
    f3fa:	09 f0       	breq	.+2      	; 0xf3fe <loop+0x112e>
    f3fc:	b7 c9       	rjmp	.-3218   	; 0xe76c <loop+0x49c>
			goto qwhat;
		txtpos++;
    f3fe:	80 91 70 07 	lds	r24, 0x0770
    f402:	90 91 71 07 	lds	r25, 0x0771
    f406:	01 96       	adiw	r24, 0x01	; 1
    f408:	90 93 71 07 	sts	0x0771, r25
    f40c:	80 93 70 07 	sts	0x0770, r24
		ignore_blanks();
    f410:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>


                txtposBak = txtpos; 
    f414:	80 91 70 07 	lds	r24, 0x0770
    f418:	90 91 71 07 	lds	r25, 0x0771
    f41c:	98 87       	std	Y+8, r25	; 0x08
    f41e:	8f 83       	std	Y+7, r24	; 0x07
                scantable(highlow_tab);
    f420:	8d ef       	ldi	r24, 0xFD	; 253
    f422:	91 e0       	ldi	r25, 0x01	; 1
    f424:	0e 94 39 6a 	call	0xd472	; 0xd472 <_ZL9scantablePh>
		if(table_index != HIGHLOW_UNKNOWN)
    f428:	80 91 76 07 	lds	r24, 0x0776
    f42c:	84 30       	cpi	r24, 0x04	; 4
    f42e:	61 f0       	breq	.+24     	; 0xf448 <loop+0x1178>
                {
                  if( table_index <= HIGHLOW_HIGH ) {
    f430:	80 91 76 07 	lds	r24, 0x0776
    f434:	82 30       	cpi	r24, 0x02	; 2
    f436:	28 f4       	brcc	.+10     	; 0xf442 <loop+0x1172>
                    value = 1;
    f438:	81 e0       	ldi	r24, 0x01	; 1
    f43a:	90 e0       	ldi	r25, 0x00	; 0
    f43c:	9a 87       	std	Y+10, r25	; 0x0a
    f43e:	89 87       	std	Y+9, r24	; 0x09
    f440:	0e c0       	rjmp	.+28     	; 0xf45e <loop+0x118e>
                  } else {
                    value = 0;
    f442:	1a 86       	std	Y+10, r1	; 0x0a
    f444:	19 86       	std	Y+9, r1	; 0x09
    f446:	0b c0       	rjmp	.+22     	; 0xf45e <loop+0x118e>
                  }
                } else {

                  // and the value (numerical)
                  expression_error = 0;
    f448:	10 92 77 07 	sts	0x0777, r1
  		  value = expression();
    f44c:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    f450:	9a 87       	std	Y+10, r25	; 0x0a
    f452:	89 87       	std	Y+9, r24	; 0x09
  		  if(expression_error)
    f454:	80 91 77 07 	lds	r24, 0x0777
    f458:	88 23       	and	r24, r24
    f45a:	09 f0       	breq	.+2      	; 0xf45e <loop+0x118e>
    f45c:	87 c9       	rjmp	.-3314   	; 0xe76c <loop+0x49c>
  			goto qwhat;
                }
#ifdef kAutoConf
                pinMode( pinNo, OUTPUT );
    f45e:	8b 85       	ldd	r24, Y+11	; 0x0b
    f460:	61 e0       	ldi	r22, 0x01	; 1
    f462:	0e 94 6f 66 	call	0xccde	; 0xccde <pinMode>
#endif
                if( isDigital ) {
    f466:	8f ad       	ldd	r24, Y+63	; 0x3f
    f468:	88 23       	and	r24, r24
    f46a:	31 f0       	breq	.+12     	; 0xf478 <loop+0x11a8>
                  digitalWrite( pinNo, value );
    f46c:	8b 85       	ldd	r24, Y+11	; 0x0b
    f46e:	99 85       	ldd	r25, Y+9	; 0x09
    f470:	69 2f       	mov	r22, r25
    f472:	0e 94 57 67 	call	0xceae	; 0xceae <digitalWrite>
    f476:	b8 c9       	rjmp	.-3216   	; 0xe7e8 <loop+0x518>
                } else {
                  analogWrite( pinNo, value );
    f478:	8b 85       	ldd	r24, Y+11	; 0x0b
    f47a:	29 85       	ldd	r18, Y+9	; 0x09
    f47c:	3a 85       	ldd	r19, Y+10	; 0x0a
    f47e:	b9 01       	movw	r22, r18
    f480:	0e 94 d5 65 	call	0xcbaa	; 0xcbaa <analogWrite>
    f484:	b1 c9       	rjmp	.-3230   	; 0xe7e8 <loop+0x518>
	goto unimplemented;
#endif


chain:
        runAfterLoad = true;
    f486:	81 e0       	ldi	r24, 0x01	; 1
    f488:	80 93 7a 07 	sts	0x077A, r24
        
load:
        // clear the program
        program_end = program_start;
    f48c:	80 91 64 06 	lds	r24, 0x0664
    f490:	90 91 65 06 	lds	r25, 0x0665
    f494:	90 93 66 07 	sts	0x0766, r25
    f498:	80 93 65 07 	sts	0x0765, r24
    f49c:	5d c9       	rjmp	.-3398   	; 0xe758 <loop+0x488>
rseed:
      {
        short int value;

        //Get the pin number
        expression_error = 0;
    f49e:	10 92 77 07 	sts	0x0777, r1
        value = expression();
    f4a2:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    f4a6:	9e 83       	std	Y+6, r25	; 0x06
    f4a8:	8d 83       	std	Y+5, r24	; 0x05
        if(expression_error)
    f4aa:	80 91 77 07 	lds	r24, 0x0777
    f4ae:	88 23       	and	r24, r24
    f4b0:	09 f0       	breq	.+2      	; 0xf4b4 <loop+0x11e4>
    f4b2:	5c c9       	rjmp	.-3400   	; 0xe76c <loop+0x49c>
          goto qwhat;

        randomSeed( value );
    f4b4:	8d 81       	ldd	r24, Y+5	; 0x05
    f4b6:	9e 81       	ldd	r25, Y+6	; 0x06
    f4b8:	0e 94 3d 52 	call	0xa47a	; 0xa47a <_Z10randomSeedj>
    f4bc:	95 c9       	rjmp	.-3286   	; 0xe7e8 <loop+0x518>
        goto run_next_statement;
      }

tonestop:
#if ENABLE_TONES
      noTone( kPiezoPin );
    f4be:	85 e0       	ldi	r24, 0x05	; 5
    f4c0:	0e 94 51 4d 	call	0x9aa2	; 0x9aa2 <_Z6noToneh>
    f4c4:	91 c9       	rjmp	.-3294   	; 0xe7e8 <loop+0x518>
        // if either are 0, tones turned off
        short int freq;
        short int duration;

        //Get the frequency
        expression_error = 0;
    f4c6:	10 92 77 07 	sts	0x0777, r1
        freq = expression();
    f4ca:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    f4ce:	9c 83       	std	Y+4, r25	; 0x04
    f4d0:	8b 83       	std	Y+3, r24	; 0x03
        if(expression_error)
    f4d2:	80 91 77 07 	lds	r24, 0x0777
    f4d6:	88 23       	and	r24, r24
    f4d8:	09 f0       	breq	.+2      	; 0xf4dc <loop+0x120c>
    f4da:	48 c9       	rjmp	.-3440   	; 0xe76c <loop+0x49c>
          goto qwhat;
          
        ignore_blanks();
    f4dc:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>
	if (*txtpos != ',')
    f4e0:	e0 91 70 07 	lds	r30, 0x0770
    f4e4:	f0 91 71 07 	lds	r31, 0x0771
    f4e8:	80 81       	ld	r24, Z
    f4ea:	8c 32       	cpi	r24, 0x2C	; 44
    f4ec:	09 f0       	breq	.+2      	; 0xf4f0 <loop+0x1220>
    f4ee:	3e c9       	rjmp	.-3460   	; 0xe76c <loop+0x49c>
	  goto qwhat;
	 txtpos++;
    f4f0:	80 91 70 07 	lds	r24, 0x0770
    f4f4:	90 91 71 07 	lds	r25, 0x0771
    f4f8:	01 96       	adiw	r24, 0x01	; 1
    f4fa:	90 93 71 07 	sts	0x0771, r25
    f4fe:	80 93 70 07 	sts	0x0770, r24
	 ignore_blanks();
    f502:	0e 94 1a 6a 	call	0xd434	; 0xd434 <_ZL13ignore_blanksv>


        //Get the duration
        expression_error = 0;
    f506:	10 92 77 07 	sts	0x0777, r1
        duration = expression();
    f50a:	0e 94 a3 70 	call	0xe146	; 0xe146 <_ZL10expressionv>
    f50e:	9a 83       	std	Y+2, r25	; 0x02
    f510:	89 83       	std	Y+1, r24	; 0x01
        if(expression_error)
    f512:	80 91 77 07 	lds	r24, 0x0777
    f516:	88 23       	and	r24, r24
    f518:	09 f0       	breq	.+2      	; 0xf51c <loop+0x124c>
    f51a:	28 c9       	rjmp	.-3504   	; 0xe76c <loop+0x49c>
          goto qwhat;
        
        if( freq == 0 || duration == 0 )
    f51c:	8b 81       	ldd	r24, Y+3	; 0x03
    f51e:	9c 81       	ldd	r25, Y+4	; 0x04
    f520:	00 97       	sbiw	r24, 0x00	; 0
    f522:	69 f2       	breq	.-102    	; 0xf4be <loop+0x11ee>
    f524:	89 81       	ldd	r24, Y+1	; 0x01
    f526:	9a 81       	ldd	r25, Y+2	; 0x02
    f528:	00 97       	sbiw	r24, 0x00	; 0
    f52a:	49 f2       	breq	.-110    	; 0xf4be <loop+0x11ee>
          goto tonestop;
          
        tone( kPiezoPin, freq, duration );
    f52c:	6b 81       	ldd	r22, Y+3	; 0x03
    f52e:	7c 81       	ldd	r23, Y+4	; 0x04
    f530:	89 81       	ldd	r24, Y+1	; 0x01
    f532:	9a 81       	ldd	r25, Y+2	; 0x02
    f534:	9c 01       	movw	r18, r24
    f536:	44 27       	eor	r20, r20
    f538:	37 fd       	sbrc	r19, 7
    f53a:	40 95       	com	r20
    f53c:	54 2f       	mov	r21, r20
    f53e:	85 e0       	ldi	r24, 0x05	; 5
    f540:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <_Z4tonehjm>
        if( alsoWait ) {
    f544:	8e ad       	ldd	r24, Y+62	; 0x3e
    f546:	88 23       	and	r24, r24
    f548:	09 f4       	brne	.+2      	; 0xf54c <loop+0x127c>
    f54a:	4e c9       	rjmp	.-3428   	; 0xe7e8 <loop+0x518>
          delay( duration );
    f54c:	89 81       	ldd	r24, Y+1	; 0x01
    f54e:	9a 81       	ldd	r25, Y+2	; 0x02
    f550:	aa 27       	eor	r26, r26
    f552:	97 fd       	sbrc	r25, 7
    f554:	a0 95       	com	r26
    f556:	ba 2f       	mov	r27, r26
    f558:	bc 01       	movw	r22, r24
    f55a:	cd 01       	movw	r24, r26
    f55c:	0e 94 b2 64 	call	0xc964	; 0xc964 <delay>
          alsoWait = false;
    f560:	1e ae       	std	Y+62, r1	; 0x3e
    f562:	42 c9       	rjmp	.-3452   	; 0xe7e8 <loop+0x518>
      }
#else
      goto unimplemented;
#endif

}
    f564:	c6 5b       	subi	r28, 0xB6	; 182
    f566:	df 4f       	sbci	r29, 0xFF	; 255
    f568:	0f b6       	in	r0, 0x3f	; 63
    f56a:	f8 94       	cli
    f56c:	de bf       	out	0x3e, r29	; 62
    f56e:	0f be       	out	0x3f, r0	; 63
    f570:	cd bf       	out	0x3d, r28	; 61
    f572:	cf 91       	pop	r28
    f574:	df 91       	pop	r29
    f576:	08 95       	ret

0000f578 <__fixunssfsi>:
    f578:	ef 92       	push	r14
    f57a:	ff 92       	push	r15
    f57c:	0f 93       	push	r16
    f57e:	1f 93       	push	r17
    f580:	7b 01       	movw	r14, r22
    f582:	8c 01       	movw	r16, r24
    f584:	20 e0       	ldi	r18, 0x00	; 0
    f586:	30 e0       	ldi	r19, 0x00	; 0
    f588:	40 e0       	ldi	r20, 0x00	; 0
    f58a:	5f e4       	ldi	r21, 0x4F	; 79
    f58c:	0e 94 38 7e 	call	0xfc70	; 0xfc70 <__gesf2>
    f590:	88 23       	and	r24, r24
    f592:	8c f0       	brlt	.+34     	; 0xf5b6 <__fixunssfsi+0x3e>
    f594:	c8 01       	movw	r24, r16
    f596:	b7 01       	movw	r22, r14
    f598:	20 e0       	ldi	r18, 0x00	; 0
    f59a:	30 e0       	ldi	r19, 0x00	; 0
    f59c:	40 e0       	ldi	r20, 0x00	; 0
    f59e:	5f e4       	ldi	r21, 0x4F	; 79
    f5a0:	0e 94 34 7c 	call	0xf868	; 0xf868 <__subsf3>
    f5a4:	0e 94 f6 7e 	call	0xfdec	; 0xfdec <__fixsfsi>
    f5a8:	9b 01       	movw	r18, r22
    f5aa:	ac 01       	movw	r20, r24
    f5ac:	20 50       	subi	r18, 0x00	; 0
    f5ae:	30 40       	sbci	r19, 0x00	; 0
    f5b0:	40 40       	sbci	r20, 0x00	; 0
    f5b2:	50 48       	sbci	r21, 0x80	; 128
    f5b4:	06 c0       	rjmp	.+12     	; 0xf5c2 <__fixunssfsi+0x4a>
    f5b6:	c8 01       	movw	r24, r16
    f5b8:	b7 01       	movw	r22, r14
    f5ba:	0e 94 f6 7e 	call	0xfdec	; 0xfdec <__fixsfsi>
    f5be:	9b 01       	movw	r18, r22
    f5c0:	ac 01       	movw	r20, r24
    f5c2:	b9 01       	movw	r22, r18
    f5c4:	ca 01       	movw	r24, r20
    f5c6:	1f 91       	pop	r17
    f5c8:	0f 91       	pop	r16
    f5ca:	ff 90       	pop	r15
    f5cc:	ef 90       	pop	r14
    f5ce:	08 95       	ret

0000f5d0 <_fpadd_parts>:
    f5d0:	a0 e0       	ldi	r26, 0x00	; 0
    f5d2:	b0 e0       	ldi	r27, 0x00	; 0
    f5d4:	ee ee       	ldi	r30, 0xEE	; 238
    f5d6:	fa e7       	ldi	r31, 0x7A	; 122
    f5d8:	0c 94 47 82 	jmp	0x1048e	; 0x1048e <__prologue_saves__>
    f5dc:	dc 01       	movw	r26, r24
    f5de:	2b 01       	movw	r4, r22
    f5e0:	fa 01       	movw	r30, r20
    f5e2:	9c 91       	ld	r25, X
    f5e4:	92 30       	cpi	r25, 0x02	; 2
    f5e6:	08 f4       	brcc	.+2      	; 0xf5ea <_fpadd_parts+0x1a>
    f5e8:	39 c1       	rjmp	.+626    	; 0xf85c <_fpadd_parts+0x28c>
    f5ea:	eb 01       	movw	r28, r22
    f5ec:	88 81       	ld	r24, Y
    f5ee:	82 30       	cpi	r24, 0x02	; 2
    f5f0:	08 f4       	brcc	.+2      	; 0xf5f4 <_fpadd_parts+0x24>
    f5f2:	33 c1       	rjmp	.+614    	; 0xf85a <_fpadd_parts+0x28a>
    f5f4:	94 30       	cpi	r25, 0x04	; 4
    f5f6:	69 f4       	brne	.+26     	; 0xf612 <_fpadd_parts+0x42>
    f5f8:	84 30       	cpi	r24, 0x04	; 4
    f5fa:	09 f0       	breq	.+2      	; 0xf5fe <_fpadd_parts+0x2e>
    f5fc:	2f c1       	rjmp	.+606    	; 0xf85c <_fpadd_parts+0x28c>
    f5fe:	11 96       	adiw	r26, 0x01	; 1
    f600:	9c 91       	ld	r25, X
    f602:	11 97       	sbiw	r26, 0x01	; 1
    f604:	89 81       	ldd	r24, Y+1	; 0x01
    f606:	98 17       	cp	r25, r24
    f608:	09 f4       	brne	.+2      	; 0xf60c <_fpadd_parts+0x3c>
    f60a:	28 c1       	rjmp	.+592    	; 0xf85c <_fpadd_parts+0x28c>
    f60c:	ae e2       	ldi	r26, 0x2E	; 46
    f60e:	b2 e0       	ldi	r27, 0x02	; 2
    f610:	25 c1       	rjmp	.+586    	; 0xf85c <_fpadd_parts+0x28c>
    f612:	84 30       	cpi	r24, 0x04	; 4
    f614:	09 f4       	brne	.+2      	; 0xf618 <_fpadd_parts+0x48>
    f616:	21 c1       	rjmp	.+578    	; 0xf85a <_fpadd_parts+0x28a>
    f618:	82 30       	cpi	r24, 0x02	; 2
    f61a:	a9 f4       	brne	.+42     	; 0xf646 <_fpadd_parts+0x76>
    f61c:	92 30       	cpi	r25, 0x02	; 2
    f61e:	09 f0       	breq	.+2      	; 0xf622 <_fpadd_parts+0x52>
    f620:	1d c1       	rjmp	.+570    	; 0xf85c <_fpadd_parts+0x28c>
    f622:	9a 01       	movw	r18, r20
    f624:	ad 01       	movw	r20, r26
    f626:	88 e0       	ldi	r24, 0x08	; 8
    f628:	ea 01       	movw	r28, r20
    f62a:	09 90       	ld	r0, Y+
    f62c:	ae 01       	movw	r20, r28
    f62e:	e9 01       	movw	r28, r18
    f630:	09 92       	st	Y+, r0
    f632:	9e 01       	movw	r18, r28
    f634:	81 50       	subi	r24, 0x01	; 1
    f636:	c1 f7       	brne	.-16     	; 0xf628 <_fpadd_parts+0x58>
    f638:	e2 01       	movw	r28, r4
    f63a:	89 81       	ldd	r24, Y+1	; 0x01
    f63c:	11 96       	adiw	r26, 0x01	; 1
    f63e:	9c 91       	ld	r25, X
    f640:	89 23       	and	r24, r25
    f642:	81 83       	std	Z+1, r24	; 0x01
    f644:	08 c1       	rjmp	.+528    	; 0xf856 <_fpadd_parts+0x286>
    f646:	92 30       	cpi	r25, 0x02	; 2
    f648:	09 f4       	brne	.+2      	; 0xf64c <_fpadd_parts+0x7c>
    f64a:	07 c1       	rjmp	.+526    	; 0xf85a <_fpadd_parts+0x28a>
    f64c:	12 96       	adiw	r26, 0x02	; 2
    f64e:	2d 90       	ld	r2, X+
    f650:	3c 90       	ld	r3, X
    f652:	13 97       	sbiw	r26, 0x03	; 3
    f654:	eb 01       	movw	r28, r22
    f656:	8a 81       	ldd	r24, Y+2	; 0x02
    f658:	9b 81       	ldd	r25, Y+3	; 0x03
    f65a:	14 96       	adiw	r26, 0x04	; 4
    f65c:	ad 90       	ld	r10, X+
    f65e:	bd 90       	ld	r11, X+
    f660:	cd 90       	ld	r12, X+
    f662:	dc 90       	ld	r13, X
    f664:	17 97       	sbiw	r26, 0x07	; 7
    f666:	ec 80       	ldd	r14, Y+4	; 0x04
    f668:	fd 80       	ldd	r15, Y+5	; 0x05
    f66a:	0e 81       	ldd	r16, Y+6	; 0x06
    f66c:	1f 81       	ldd	r17, Y+7	; 0x07
    f66e:	91 01       	movw	r18, r2
    f670:	28 1b       	sub	r18, r24
    f672:	39 0b       	sbc	r19, r25
    f674:	b9 01       	movw	r22, r18
    f676:	37 ff       	sbrs	r19, 7
    f678:	04 c0       	rjmp	.+8      	; 0xf682 <_fpadd_parts+0xb2>
    f67a:	66 27       	eor	r22, r22
    f67c:	77 27       	eor	r23, r23
    f67e:	62 1b       	sub	r22, r18
    f680:	73 0b       	sbc	r23, r19
    f682:	60 32       	cpi	r22, 0x20	; 32
    f684:	71 05       	cpc	r23, r1
    f686:	0c f0       	brlt	.+2      	; 0xf68a <_fpadd_parts+0xba>
    f688:	61 c0       	rjmp	.+194    	; 0xf74c <_fpadd_parts+0x17c>
    f68a:	12 16       	cp	r1, r18
    f68c:	13 06       	cpc	r1, r19
    f68e:	6c f5       	brge	.+90     	; 0xf6ea <_fpadd_parts+0x11a>
    f690:	37 01       	movw	r6, r14
    f692:	48 01       	movw	r8, r16
    f694:	06 2e       	mov	r0, r22
    f696:	04 c0       	rjmp	.+8      	; 0xf6a0 <_fpadd_parts+0xd0>
    f698:	96 94       	lsr	r9
    f69a:	87 94       	ror	r8
    f69c:	77 94       	ror	r7
    f69e:	67 94       	ror	r6
    f6a0:	0a 94       	dec	r0
    f6a2:	d2 f7       	brpl	.-12     	; 0xf698 <_fpadd_parts+0xc8>
    f6a4:	21 e0       	ldi	r18, 0x01	; 1
    f6a6:	30 e0       	ldi	r19, 0x00	; 0
    f6a8:	40 e0       	ldi	r20, 0x00	; 0
    f6aa:	50 e0       	ldi	r21, 0x00	; 0
    f6ac:	04 c0       	rjmp	.+8      	; 0xf6b6 <_fpadd_parts+0xe6>
    f6ae:	22 0f       	add	r18, r18
    f6b0:	33 1f       	adc	r19, r19
    f6b2:	44 1f       	adc	r20, r20
    f6b4:	55 1f       	adc	r21, r21
    f6b6:	6a 95       	dec	r22
    f6b8:	d2 f7       	brpl	.-12     	; 0xf6ae <_fpadd_parts+0xde>
    f6ba:	21 50       	subi	r18, 0x01	; 1
    f6bc:	30 40       	sbci	r19, 0x00	; 0
    f6be:	40 40       	sbci	r20, 0x00	; 0
    f6c0:	50 40       	sbci	r21, 0x00	; 0
    f6c2:	2e 21       	and	r18, r14
    f6c4:	3f 21       	and	r19, r15
    f6c6:	40 23       	and	r20, r16
    f6c8:	51 23       	and	r21, r17
    f6ca:	21 15       	cp	r18, r1
    f6cc:	31 05       	cpc	r19, r1
    f6ce:	41 05       	cpc	r20, r1
    f6d0:	51 05       	cpc	r21, r1
    f6d2:	21 f0       	breq	.+8      	; 0xf6dc <_fpadd_parts+0x10c>
    f6d4:	21 e0       	ldi	r18, 0x01	; 1
    f6d6:	30 e0       	ldi	r19, 0x00	; 0
    f6d8:	40 e0       	ldi	r20, 0x00	; 0
    f6da:	50 e0       	ldi	r21, 0x00	; 0
    f6dc:	79 01       	movw	r14, r18
    f6de:	8a 01       	movw	r16, r20
    f6e0:	e6 28       	or	r14, r6
    f6e2:	f7 28       	or	r15, r7
    f6e4:	08 29       	or	r16, r8
    f6e6:	19 29       	or	r17, r9
    f6e8:	3c c0       	rjmp	.+120    	; 0xf762 <_fpadd_parts+0x192>
    f6ea:	23 2b       	or	r18, r19
    f6ec:	d1 f1       	breq	.+116    	; 0xf762 <_fpadd_parts+0x192>
    f6ee:	26 0e       	add	r2, r22
    f6f0:	37 1e       	adc	r3, r23
    f6f2:	35 01       	movw	r6, r10
    f6f4:	46 01       	movw	r8, r12
    f6f6:	06 2e       	mov	r0, r22
    f6f8:	04 c0       	rjmp	.+8      	; 0xf702 <_fpadd_parts+0x132>
    f6fa:	96 94       	lsr	r9
    f6fc:	87 94       	ror	r8
    f6fe:	77 94       	ror	r7
    f700:	67 94       	ror	r6
    f702:	0a 94       	dec	r0
    f704:	d2 f7       	brpl	.-12     	; 0xf6fa <_fpadd_parts+0x12a>
    f706:	21 e0       	ldi	r18, 0x01	; 1
    f708:	30 e0       	ldi	r19, 0x00	; 0
    f70a:	40 e0       	ldi	r20, 0x00	; 0
    f70c:	50 e0       	ldi	r21, 0x00	; 0
    f70e:	04 c0       	rjmp	.+8      	; 0xf718 <_fpadd_parts+0x148>
    f710:	22 0f       	add	r18, r18
    f712:	33 1f       	adc	r19, r19
    f714:	44 1f       	adc	r20, r20
    f716:	55 1f       	adc	r21, r21
    f718:	6a 95       	dec	r22
    f71a:	d2 f7       	brpl	.-12     	; 0xf710 <_fpadd_parts+0x140>
    f71c:	21 50       	subi	r18, 0x01	; 1
    f71e:	30 40       	sbci	r19, 0x00	; 0
    f720:	40 40       	sbci	r20, 0x00	; 0
    f722:	50 40       	sbci	r21, 0x00	; 0
    f724:	2a 21       	and	r18, r10
    f726:	3b 21       	and	r19, r11
    f728:	4c 21       	and	r20, r12
    f72a:	5d 21       	and	r21, r13
    f72c:	21 15       	cp	r18, r1
    f72e:	31 05       	cpc	r19, r1
    f730:	41 05       	cpc	r20, r1
    f732:	51 05       	cpc	r21, r1
    f734:	21 f0       	breq	.+8      	; 0xf73e <_fpadd_parts+0x16e>
    f736:	21 e0       	ldi	r18, 0x01	; 1
    f738:	30 e0       	ldi	r19, 0x00	; 0
    f73a:	40 e0       	ldi	r20, 0x00	; 0
    f73c:	50 e0       	ldi	r21, 0x00	; 0
    f73e:	59 01       	movw	r10, r18
    f740:	6a 01       	movw	r12, r20
    f742:	a6 28       	or	r10, r6
    f744:	b7 28       	or	r11, r7
    f746:	c8 28       	or	r12, r8
    f748:	d9 28       	or	r13, r9
    f74a:	0b c0       	rjmp	.+22     	; 0xf762 <_fpadd_parts+0x192>
    f74c:	82 15       	cp	r24, r2
    f74e:	93 05       	cpc	r25, r3
    f750:	2c f0       	brlt	.+10     	; 0xf75c <_fpadd_parts+0x18c>
    f752:	1c 01       	movw	r2, r24
    f754:	aa 24       	eor	r10, r10
    f756:	bb 24       	eor	r11, r11
    f758:	65 01       	movw	r12, r10
    f75a:	03 c0       	rjmp	.+6      	; 0xf762 <_fpadd_parts+0x192>
    f75c:	ee 24       	eor	r14, r14
    f75e:	ff 24       	eor	r15, r15
    f760:	87 01       	movw	r16, r14
    f762:	11 96       	adiw	r26, 0x01	; 1
    f764:	9c 91       	ld	r25, X
    f766:	d2 01       	movw	r26, r4
    f768:	11 96       	adiw	r26, 0x01	; 1
    f76a:	8c 91       	ld	r24, X
    f76c:	98 17       	cp	r25, r24
    f76e:	09 f4       	brne	.+2      	; 0xf772 <_fpadd_parts+0x1a2>
    f770:	45 c0       	rjmp	.+138    	; 0xf7fc <_fpadd_parts+0x22c>
    f772:	99 23       	and	r25, r25
    f774:	39 f0       	breq	.+14     	; 0xf784 <_fpadd_parts+0x1b4>
    f776:	a8 01       	movw	r20, r16
    f778:	97 01       	movw	r18, r14
    f77a:	2a 19       	sub	r18, r10
    f77c:	3b 09       	sbc	r19, r11
    f77e:	4c 09       	sbc	r20, r12
    f780:	5d 09       	sbc	r21, r13
    f782:	06 c0       	rjmp	.+12     	; 0xf790 <_fpadd_parts+0x1c0>
    f784:	a6 01       	movw	r20, r12
    f786:	95 01       	movw	r18, r10
    f788:	2e 19       	sub	r18, r14
    f78a:	3f 09       	sbc	r19, r15
    f78c:	40 0b       	sbc	r20, r16
    f78e:	51 0b       	sbc	r21, r17
    f790:	57 fd       	sbrc	r21, 7
    f792:	08 c0       	rjmp	.+16     	; 0xf7a4 <_fpadd_parts+0x1d4>
    f794:	11 82       	std	Z+1, r1	; 0x01
    f796:	33 82       	std	Z+3, r3	; 0x03
    f798:	22 82       	std	Z+2, r2	; 0x02
    f79a:	24 83       	std	Z+4, r18	; 0x04
    f79c:	35 83       	std	Z+5, r19	; 0x05
    f79e:	46 83       	std	Z+6, r20	; 0x06
    f7a0:	57 83       	std	Z+7, r21	; 0x07
    f7a2:	1d c0       	rjmp	.+58     	; 0xf7de <_fpadd_parts+0x20e>
    f7a4:	81 e0       	ldi	r24, 0x01	; 1
    f7a6:	81 83       	std	Z+1, r24	; 0x01
    f7a8:	33 82       	std	Z+3, r3	; 0x03
    f7aa:	22 82       	std	Z+2, r2	; 0x02
    f7ac:	88 27       	eor	r24, r24
    f7ae:	99 27       	eor	r25, r25
    f7b0:	dc 01       	movw	r26, r24
    f7b2:	82 1b       	sub	r24, r18
    f7b4:	93 0b       	sbc	r25, r19
    f7b6:	a4 0b       	sbc	r26, r20
    f7b8:	b5 0b       	sbc	r27, r21
    f7ba:	84 83       	std	Z+4, r24	; 0x04
    f7bc:	95 83       	std	Z+5, r25	; 0x05
    f7be:	a6 83       	std	Z+6, r26	; 0x06
    f7c0:	b7 83       	std	Z+7, r27	; 0x07
    f7c2:	0d c0       	rjmp	.+26     	; 0xf7de <_fpadd_parts+0x20e>
    f7c4:	22 0f       	add	r18, r18
    f7c6:	33 1f       	adc	r19, r19
    f7c8:	44 1f       	adc	r20, r20
    f7ca:	55 1f       	adc	r21, r21
    f7cc:	24 83       	std	Z+4, r18	; 0x04
    f7ce:	35 83       	std	Z+5, r19	; 0x05
    f7d0:	46 83       	std	Z+6, r20	; 0x06
    f7d2:	57 83       	std	Z+7, r21	; 0x07
    f7d4:	82 81       	ldd	r24, Z+2	; 0x02
    f7d6:	93 81       	ldd	r25, Z+3	; 0x03
    f7d8:	01 97       	sbiw	r24, 0x01	; 1
    f7da:	93 83       	std	Z+3, r25	; 0x03
    f7dc:	82 83       	std	Z+2, r24	; 0x02
    f7de:	24 81       	ldd	r18, Z+4	; 0x04
    f7e0:	35 81       	ldd	r19, Z+5	; 0x05
    f7e2:	46 81       	ldd	r20, Z+6	; 0x06
    f7e4:	57 81       	ldd	r21, Z+7	; 0x07
    f7e6:	da 01       	movw	r26, r20
    f7e8:	c9 01       	movw	r24, r18
    f7ea:	01 97       	sbiw	r24, 0x01	; 1
    f7ec:	a1 09       	sbc	r26, r1
    f7ee:	b1 09       	sbc	r27, r1
    f7f0:	8f 5f       	subi	r24, 0xFF	; 255
    f7f2:	9f 4f       	sbci	r25, 0xFF	; 255
    f7f4:	af 4f       	sbci	r26, 0xFF	; 255
    f7f6:	bf 43       	sbci	r27, 0x3F	; 63
    f7f8:	28 f3       	brcs	.-54     	; 0xf7c4 <_fpadd_parts+0x1f4>
    f7fa:	0b c0       	rjmp	.+22     	; 0xf812 <_fpadd_parts+0x242>
    f7fc:	91 83       	std	Z+1, r25	; 0x01
    f7fe:	33 82       	std	Z+3, r3	; 0x03
    f800:	22 82       	std	Z+2, r2	; 0x02
    f802:	ea 0c       	add	r14, r10
    f804:	fb 1c       	adc	r15, r11
    f806:	0c 1d       	adc	r16, r12
    f808:	1d 1d       	adc	r17, r13
    f80a:	e4 82       	std	Z+4, r14	; 0x04
    f80c:	f5 82       	std	Z+5, r15	; 0x05
    f80e:	06 83       	std	Z+6, r16	; 0x06
    f810:	17 83       	std	Z+7, r17	; 0x07
    f812:	83 e0       	ldi	r24, 0x03	; 3
    f814:	80 83       	st	Z, r24
    f816:	24 81       	ldd	r18, Z+4	; 0x04
    f818:	35 81       	ldd	r19, Z+5	; 0x05
    f81a:	46 81       	ldd	r20, Z+6	; 0x06
    f81c:	57 81       	ldd	r21, Z+7	; 0x07
    f81e:	57 ff       	sbrs	r21, 7
    f820:	1a c0       	rjmp	.+52     	; 0xf856 <_fpadd_parts+0x286>
    f822:	c9 01       	movw	r24, r18
    f824:	aa 27       	eor	r26, r26
    f826:	97 fd       	sbrc	r25, 7
    f828:	a0 95       	com	r26
    f82a:	ba 2f       	mov	r27, r26
    f82c:	81 70       	andi	r24, 0x01	; 1
    f82e:	90 70       	andi	r25, 0x00	; 0
    f830:	a0 70       	andi	r26, 0x00	; 0
    f832:	b0 70       	andi	r27, 0x00	; 0
    f834:	56 95       	lsr	r21
    f836:	47 95       	ror	r20
    f838:	37 95       	ror	r19
    f83a:	27 95       	ror	r18
    f83c:	82 2b       	or	r24, r18
    f83e:	93 2b       	or	r25, r19
    f840:	a4 2b       	or	r26, r20
    f842:	b5 2b       	or	r27, r21
    f844:	84 83       	std	Z+4, r24	; 0x04
    f846:	95 83       	std	Z+5, r25	; 0x05
    f848:	a6 83       	std	Z+6, r26	; 0x06
    f84a:	b7 83       	std	Z+7, r27	; 0x07
    f84c:	82 81       	ldd	r24, Z+2	; 0x02
    f84e:	93 81       	ldd	r25, Z+3	; 0x03
    f850:	01 96       	adiw	r24, 0x01	; 1
    f852:	93 83       	std	Z+3, r25	; 0x03
    f854:	82 83       	std	Z+2, r24	; 0x02
    f856:	df 01       	movw	r26, r30
    f858:	01 c0       	rjmp	.+2      	; 0xf85c <_fpadd_parts+0x28c>
    f85a:	d2 01       	movw	r26, r4
    f85c:	cd 01       	movw	r24, r26
    f85e:	cd b7       	in	r28, 0x3d	; 61
    f860:	de b7       	in	r29, 0x3e	; 62
    f862:	e2 e1       	ldi	r30, 0x12	; 18
    f864:	0c 94 63 82 	jmp	0x104c6	; 0x104c6 <__epilogue_restores__>

0000f868 <__subsf3>:
    f868:	a0 e2       	ldi	r26, 0x20	; 32
    f86a:	b0 e0       	ldi	r27, 0x00	; 0
    f86c:	ea e3       	ldi	r30, 0x3A	; 58
    f86e:	fc e7       	ldi	r31, 0x7C	; 124
    f870:	0c 94 53 82 	jmp	0x104a6	; 0x104a6 <__prologue_saves__+0x18>
    f874:	69 83       	std	Y+1, r22	; 0x01
    f876:	7a 83       	std	Y+2, r23	; 0x02
    f878:	8b 83       	std	Y+3, r24	; 0x03
    f87a:	9c 83       	std	Y+4, r25	; 0x04
    f87c:	2d 83       	std	Y+5, r18	; 0x05
    f87e:	3e 83       	std	Y+6, r19	; 0x06
    f880:	4f 83       	std	Y+7, r20	; 0x07
    f882:	58 87       	std	Y+8, r21	; 0x08
    f884:	e9 e0       	ldi	r30, 0x09	; 9
    f886:	ee 2e       	mov	r14, r30
    f888:	f1 2c       	mov	r15, r1
    f88a:	ec 0e       	add	r14, r28
    f88c:	fd 1e       	adc	r15, r29
    f88e:	ce 01       	movw	r24, r28
    f890:	01 96       	adiw	r24, 0x01	; 1
    f892:	b7 01       	movw	r22, r14
    f894:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    f898:	8e 01       	movw	r16, r28
    f89a:	0f 5e       	subi	r16, 0xEF	; 239
    f89c:	1f 4f       	sbci	r17, 0xFF	; 255
    f89e:	ce 01       	movw	r24, r28
    f8a0:	05 96       	adiw	r24, 0x05	; 5
    f8a2:	b8 01       	movw	r22, r16
    f8a4:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    f8a8:	8a 89       	ldd	r24, Y+18	; 0x12
    f8aa:	91 e0       	ldi	r25, 0x01	; 1
    f8ac:	89 27       	eor	r24, r25
    f8ae:	8a 8b       	std	Y+18, r24	; 0x12
    f8b0:	c7 01       	movw	r24, r14
    f8b2:	b8 01       	movw	r22, r16
    f8b4:	ae 01       	movw	r20, r28
    f8b6:	47 5e       	subi	r20, 0xE7	; 231
    f8b8:	5f 4f       	sbci	r21, 0xFF	; 255
    f8ba:	0e 94 e8 7a 	call	0xf5d0	; 0xf5d0 <_fpadd_parts>
    f8be:	0e 94 12 80 	call	0x10024	; 0x10024 <__pack_f>
    f8c2:	a0 96       	adiw	r28, 0x20	; 32
    f8c4:	e6 e0       	ldi	r30, 0x06	; 6
    f8c6:	0c 94 6f 82 	jmp	0x104de	; 0x104de <__epilogue_restores__+0x18>

0000f8ca <__addsf3>:
    f8ca:	a0 e2       	ldi	r26, 0x20	; 32
    f8cc:	b0 e0       	ldi	r27, 0x00	; 0
    f8ce:	eb e6       	ldi	r30, 0x6B	; 107
    f8d0:	fc e7       	ldi	r31, 0x7C	; 124
    f8d2:	0c 94 53 82 	jmp	0x104a6	; 0x104a6 <__prologue_saves__+0x18>
    f8d6:	69 83       	std	Y+1, r22	; 0x01
    f8d8:	7a 83       	std	Y+2, r23	; 0x02
    f8da:	8b 83       	std	Y+3, r24	; 0x03
    f8dc:	9c 83       	std	Y+4, r25	; 0x04
    f8de:	2d 83       	std	Y+5, r18	; 0x05
    f8e0:	3e 83       	std	Y+6, r19	; 0x06
    f8e2:	4f 83       	std	Y+7, r20	; 0x07
    f8e4:	58 87       	std	Y+8, r21	; 0x08
    f8e6:	f9 e0       	ldi	r31, 0x09	; 9
    f8e8:	ef 2e       	mov	r14, r31
    f8ea:	f1 2c       	mov	r15, r1
    f8ec:	ec 0e       	add	r14, r28
    f8ee:	fd 1e       	adc	r15, r29
    f8f0:	ce 01       	movw	r24, r28
    f8f2:	01 96       	adiw	r24, 0x01	; 1
    f8f4:	b7 01       	movw	r22, r14
    f8f6:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    f8fa:	8e 01       	movw	r16, r28
    f8fc:	0f 5e       	subi	r16, 0xEF	; 239
    f8fe:	1f 4f       	sbci	r17, 0xFF	; 255
    f900:	ce 01       	movw	r24, r28
    f902:	05 96       	adiw	r24, 0x05	; 5
    f904:	b8 01       	movw	r22, r16
    f906:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    f90a:	c7 01       	movw	r24, r14
    f90c:	b8 01       	movw	r22, r16
    f90e:	ae 01       	movw	r20, r28
    f910:	47 5e       	subi	r20, 0xE7	; 231
    f912:	5f 4f       	sbci	r21, 0xFF	; 255
    f914:	0e 94 e8 7a 	call	0xf5d0	; 0xf5d0 <_fpadd_parts>
    f918:	0e 94 12 80 	call	0x10024	; 0x10024 <__pack_f>
    f91c:	a0 96       	adiw	r28, 0x20	; 32
    f91e:	e6 e0       	ldi	r30, 0x06	; 6
    f920:	0c 94 6f 82 	jmp	0x104de	; 0x104de <__epilogue_restores__+0x18>

0000f924 <__mulsf3>:
    f924:	a0 e2       	ldi	r26, 0x20	; 32
    f926:	b0 e0       	ldi	r27, 0x00	; 0
    f928:	e8 e9       	ldi	r30, 0x98	; 152
    f92a:	fc e7       	ldi	r31, 0x7C	; 124
    f92c:	0c 94 47 82 	jmp	0x1048e	; 0x1048e <__prologue_saves__>
    f930:	69 83       	std	Y+1, r22	; 0x01
    f932:	7a 83       	std	Y+2, r23	; 0x02
    f934:	8b 83       	std	Y+3, r24	; 0x03
    f936:	9c 83       	std	Y+4, r25	; 0x04
    f938:	2d 83       	std	Y+5, r18	; 0x05
    f93a:	3e 83       	std	Y+6, r19	; 0x06
    f93c:	4f 83       	std	Y+7, r20	; 0x07
    f93e:	58 87       	std	Y+8, r21	; 0x08
    f940:	ce 01       	movw	r24, r28
    f942:	01 96       	adiw	r24, 0x01	; 1
    f944:	be 01       	movw	r22, r28
    f946:	67 5f       	subi	r22, 0xF7	; 247
    f948:	7f 4f       	sbci	r23, 0xFF	; 255
    f94a:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    f94e:	ce 01       	movw	r24, r28
    f950:	05 96       	adiw	r24, 0x05	; 5
    f952:	be 01       	movw	r22, r28
    f954:	6f 5e       	subi	r22, 0xEF	; 239
    f956:	7f 4f       	sbci	r23, 0xFF	; 255
    f958:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    f95c:	99 85       	ldd	r25, Y+9	; 0x09
    f95e:	92 30       	cpi	r25, 0x02	; 2
    f960:	88 f0       	brcs	.+34     	; 0xf984 <__mulsf3+0x60>
    f962:	89 89       	ldd	r24, Y+17	; 0x11
    f964:	82 30       	cpi	r24, 0x02	; 2
    f966:	c8 f0       	brcs	.+50     	; 0xf99a <__mulsf3+0x76>
    f968:	94 30       	cpi	r25, 0x04	; 4
    f96a:	19 f4       	brne	.+6      	; 0xf972 <__mulsf3+0x4e>
    f96c:	82 30       	cpi	r24, 0x02	; 2
    f96e:	51 f4       	brne	.+20     	; 0xf984 <__mulsf3+0x60>
    f970:	04 c0       	rjmp	.+8      	; 0xf97a <__mulsf3+0x56>
    f972:	84 30       	cpi	r24, 0x04	; 4
    f974:	29 f4       	brne	.+10     	; 0xf980 <__mulsf3+0x5c>
    f976:	92 30       	cpi	r25, 0x02	; 2
    f978:	81 f4       	brne	.+32     	; 0xf99a <__mulsf3+0x76>
    f97a:	8e e2       	ldi	r24, 0x2E	; 46
    f97c:	92 e0       	ldi	r25, 0x02	; 2
    f97e:	c6 c0       	rjmp	.+396    	; 0xfb0c <__mulsf3+0x1e8>
    f980:	92 30       	cpi	r25, 0x02	; 2
    f982:	49 f4       	brne	.+18     	; 0xf996 <__mulsf3+0x72>
    f984:	20 e0       	ldi	r18, 0x00	; 0
    f986:	9a 85       	ldd	r25, Y+10	; 0x0a
    f988:	8a 89       	ldd	r24, Y+18	; 0x12
    f98a:	98 13       	cpse	r25, r24
    f98c:	21 e0       	ldi	r18, 0x01	; 1
    f98e:	2a 87       	std	Y+10, r18	; 0x0a
    f990:	ce 01       	movw	r24, r28
    f992:	09 96       	adiw	r24, 0x09	; 9
    f994:	bb c0       	rjmp	.+374    	; 0xfb0c <__mulsf3+0x1e8>
    f996:	82 30       	cpi	r24, 0x02	; 2
    f998:	49 f4       	brne	.+18     	; 0xf9ac <__mulsf3+0x88>
    f99a:	20 e0       	ldi	r18, 0x00	; 0
    f99c:	9a 85       	ldd	r25, Y+10	; 0x0a
    f99e:	8a 89       	ldd	r24, Y+18	; 0x12
    f9a0:	98 13       	cpse	r25, r24
    f9a2:	21 e0       	ldi	r18, 0x01	; 1
    f9a4:	2a 8b       	std	Y+18, r18	; 0x12
    f9a6:	ce 01       	movw	r24, r28
    f9a8:	41 96       	adiw	r24, 0x11	; 17
    f9aa:	b0 c0       	rjmp	.+352    	; 0xfb0c <__mulsf3+0x1e8>
    f9ac:	2d 84       	ldd	r2, Y+13	; 0x0d
    f9ae:	3e 84       	ldd	r3, Y+14	; 0x0e
    f9b0:	4f 84       	ldd	r4, Y+15	; 0x0f
    f9b2:	58 88       	ldd	r5, Y+16	; 0x10
    f9b4:	6d 88       	ldd	r6, Y+21	; 0x15
    f9b6:	7e 88       	ldd	r7, Y+22	; 0x16
    f9b8:	8f 88       	ldd	r8, Y+23	; 0x17
    f9ba:	98 8c       	ldd	r9, Y+24	; 0x18
    f9bc:	ee 24       	eor	r14, r14
    f9be:	ff 24       	eor	r15, r15
    f9c0:	87 01       	movw	r16, r14
    f9c2:	aa 24       	eor	r10, r10
    f9c4:	bb 24       	eor	r11, r11
    f9c6:	65 01       	movw	r12, r10
    f9c8:	40 e0       	ldi	r20, 0x00	; 0
    f9ca:	50 e0       	ldi	r21, 0x00	; 0
    f9cc:	60 e0       	ldi	r22, 0x00	; 0
    f9ce:	70 e0       	ldi	r23, 0x00	; 0
    f9d0:	e0 e0       	ldi	r30, 0x00	; 0
    f9d2:	f0 e0       	ldi	r31, 0x00	; 0
    f9d4:	c1 01       	movw	r24, r2
    f9d6:	81 70       	andi	r24, 0x01	; 1
    f9d8:	90 70       	andi	r25, 0x00	; 0
    f9da:	89 2b       	or	r24, r25
    f9dc:	e9 f0       	breq	.+58     	; 0xfa18 <__mulsf3+0xf4>
    f9de:	e6 0c       	add	r14, r6
    f9e0:	f7 1c       	adc	r15, r7
    f9e2:	08 1d       	adc	r16, r8
    f9e4:	19 1d       	adc	r17, r9
    f9e6:	9a 01       	movw	r18, r20
    f9e8:	ab 01       	movw	r20, r22
    f9ea:	2a 0d       	add	r18, r10
    f9ec:	3b 1d       	adc	r19, r11
    f9ee:	4c 1d       	adc	r20, r12
    f9f0:	5d 1d       	adc	r21, r13
    f9f2:	80 e0       	ldi	r24, 0x00	; 0
    f9f4:	90 e0       	ldi	r25, 0x00	; 0
    f9f6:	a0 e0       	ldi	r26, 0x00	; 0
    f9f8:	b0 e0       	ldi	r27, 0x00	; 0
    f9fa:	e6 14       	cp	r14, r6
    f9fc:	f7 04       	cpc	r15, r7
    f9fe:	08 05       	cpc	r16, r8
    fa00:	19 05       	cpc	r17, r9
    fa02:	20 f4       	brcc	.+8      	; 0xfa0c <__mulsf3+0xe8>
    fa04:	81 e0       	ldi	r24, 0x01	; 1
    fa06:	90 e0       	ldi	r25, 0x00	; 0
    fa08:	a0 e0       	ldi	r26, 0x00	; 0
    fa0a:	b0 e0       	ldi	r27, 0x00	; 0
    fa0c:	ba 01       	movw	r22, r20
    fa0e:	a9 01       	movw	r20, r18
    fa10:	48 0f       	add	r20, r24
    fa12:	59 1f       	adc	r21, r25
    fa14:	6a 1f       	adc	r22, r26
    fa16:	7b 1f       	adc	r23, r27
    fa18:	aa 0c       	add	r10, r10
    fa1a:	bb 1c       	adc	r11, r11
    fa1c:	cc 1c       	adc	r12, r12
    fa1e:	dd 1c       	adc	r13, r13
    fa20:	97 fe       	sbrs	r9, 7
    fa22:	08 c0       	rjmp	.+16     	; 0xfa34 <__mulsf3+0x110>
    fa24:	81 e0       	ldi	r24, 0x01	; 1
    fa26:	90 e0       	ldi	r25, 0x00	; 0
    fa28:	a0 e0       	ldi	r26, 0x00	; 0
    fa2a:	b0 e0       	ldi	r27, 0x00	; 0
    fa2c:	a8 2a       	or	r10, r24
    fa2e:	b9 2a       	or	r11, r25
    fa30:	ca 2a       	or	r12, r26
    fa32:	db 2a       	or	r13, r27
    fa34:	31 96       	adiw	r30, 0x01	; 1
    fa36:	e0 32       	cpi	r30, 0x20	; 32
    fa38:	f1 05       	cpc	r31, r1
    fa3a:	49 f0       	breq	.+18     	; 0xfa4e <__mulsf3+0x12a>
    fa3c:	66 0c       	add	r6, r6
    fa3e:	77 1c       	adc	r7, r7
    fa40:	88 1c       	adc	r8, r8
    fa42:	99 1c       	adc	r9, r9
    fa44:	56 94       	lsr	r5
    fa46:	47 94       	ror	r4
    fa48:	37 94       	ror	r3
    fa4a:	27 94       	ror	r2
    fa4c:	c3 cf       	rjmp	.-122    	; 0xf9d4 <__mulsf3+0xb0>
    fa4e:	fa 85       	ldd	r31, Y+10	; 0x0a
    fa50:	ea 89       	ldd	r30, Y+18	; 0x12
    fa52:	2b 89       	ldd	r18, Y+19	; 0x13
    fa54:	3c 89       	ldd	r19, Y+20	; 0x14
    fa56:	8b 85       	ldd	r24, Y+11	; 0x0b
    fa58:	9c 85       	ldd	r25, Y+12	; 0x0c
    fa5a:	28 0f       	add	r18, r24
    fa5c:	39 1f       	adc	r19, r25
    fa5e:	2e 5f       	subi	r18, 0xFE	; 254
    fa60:	3f 4f       	sbci	r19, 0xFF	; 255
    fa62:	17 c0       	rjmp	.+46     	; 0xfa92 <__mulsf3+0x16e>
    fa64:	ca 01       	movw	r24, r20
    fa66:	81 70       	andi	r24, 0x01	; 1
    fa68:	90 70       	andi	r25, 0x00	; 0
    fa6a:	89 2b       	or	r24, r25
    fa6c:	61 f0       	breq	.+24     	; 0xfa86 <__mulsf3+0x162>
    fa6e:	16 95       	lsr	r17
    fa70:	07 95       	ror	r16
    fa72:	f7 94       	ror	r15
    fa74:	e7 94       	ror	r14
    fa76:	80 e0       	ldi	r24, 0x00	; 0
    fa78:	90 e0       	ldi	r25, 0x00	; 0
    fa7a:	a0 e0       	ldi	r26, 0x00	; 0
    fa7c:	b0 e8       	ldi	r27, 0x80	; 128
    fa7e:	e8 2a       	or	r14, r24
    fa80:	f9 2a       	or	r15, r25
    fa82:	0a 2b       	or	r16, r26
    fa84:	1b 2b       	or	r17, r27
    fa86:	76 95       	lsr	r23
    fa88:	67 95       	ror	r22
    fa8a:	57 95       	ror	r21
    fa8c:	47 95       	ror	r20
    fa8e:	2f 5f       	subi	r18, 0xFF	; 255
    fa90:	3f 4f       	sbci	r19, 0xFF	; 255
    fa92:	77 fd       	sbrc	r23, 7
    fa94:	e7 cf       	rjmp	.-50     	; 0xfa64 <__mulsf3+0x140>
    fa96:	0c c0       	rjmp	.+24     	; 0xfab0 <__mulsf3+0x18c>
    fa98:	44 0f       	add	r20, r20
    fa9a:	55 1f       	adc	r21, r21
    fa9c:	66 1f       	adc	r22, r22
    fa9e:	77 1f       	adc	r23, r23
    faa0:	17 fd       	sbrc	r17, 7
    faa2:	41 60       	ori	r20, 0x01	; 1
    faa4:	ee 0c       	add	r14, r14
    faa6:	ff 1c       	adc	r15, r15
    faa8:	00 1f       	adc	r16, r16
    faaa:	11 1f       	adc	r17, r17
    faac:	21 50       	subi	r18, 0x01	; 1
    faae:	30 40       	sbci	r19, 0x00	; 0
    fab0:	40 30       	cpi	r20, 0x00	; 0
    fab2:	90 e0       	ldi	r25, 0x00	; 0
    fab4:	59 07       	cpc	r21, r25
    fab6:	90 e0       	ldi	r25, 0x00	; 0
    fab8:	69 07       	cpc	r22, r25
    faba:	90 e4       	ldi	r25, 0x40	; 64
    fabc:	79 07       	cpc	r23, r25
    fabe:	60 f3       	brcs	.-40     	; 0xfa98 <__mulsf3+0x174>
    fac0:	2b 8f       	std	Y+27, r18	; 0x1b
    fac2:	3c 8f       	std	Y+28, r19	; 0x1c
    fac4:	db 01       	movw	r26, r22
    fac6:	ca 01       	movw	r24, r20
    fac8:	8f 77       	andi	r24, 0x7F	; 127
    faca:	90 70       	andi	r25, 0x00	; 0
    facc:	a0 70       	andi	r26, 0x00	; 0
    face:	b0 70       	andi	r27, 0x00	; 0
    fad0:	80 34       	cpi	r24, 0x40	; 64
    fad2:	91 05       	cpc	r25, r1
    fad4:	a1 05       	cpc	r26, r1
    fad6:	b1 05       	cpc	r27, r1
    fad8:	61 f4       	brne	.+24     	; 0xfaf2 <__mulsf3+0x1ce>
    fada:	47 fd       	sbrc	r20, 7
    fadc:	0a c0       	rjmp	.+20     	; 0xfaf2 <__mulsf3+0x1ce>
    fade:	e1 14       	cp	r14, r1
    fae0:	f1 04       	cpc	r15, r1
    fae2:	01 05       	cpc	r16, r1
    fae4:	11 05       	cpc	r17, r1
    fae6:	29 f0       	breq	.+10     	; 0xfaf2 <__mulsf3+0x1ce>
    fae8:	40 5c       	subi	r20, 0xC0	; 192
    faea:	5f 4f       	sbci	r21, 0xFF	; 255
    faec:	6f 4f       	sbci	r22, 0xFF	; 255
    faee:	7f 4f       	sbci	r23, 0xFF	; 255
    faf0:	40 78       	andi	r20, 0x80	; 128
    faf2:	1a 8e       	std	Y+26, r1	; 0x1a
    faf4:	fe 17       	cp	r31, r30
    faf6:	11 f0       	breq	.+4      	; 0xfafc <__mulsf3+0x1d8>
    faf8:	81 e0       	ldi	r24, 0x01	; 1
    fafa:	8a 8f       	std	Y+26, r24	; 0x1a
    fafc:	4d 8f       	std	Y+29, r20	; 0x1d
    fafe:	5e 8f       	std	Y+30, r21	; 0x1e
    fb00:	6f 8f       	std	Y+31, r22	; 0x1f
    fb02:	78 a3       	std	Y+32, r23	; 0x20
    fb04:	83 e0       	ldi	r24, 0x03	; 3
    fb06:	89 8f       	std	Y+25, r24	; 0x19
    fb08:	ce 01       	movw	r24, r28
    fb0a:	49 96       	adiw	r24, 0x19	; 25
    fb0c:	0e 94 12 80 	call	0x10024	; 0x10024 <__pack_f>
    fb10:	a0 96       	adiw	r28, 0x20	; 32
    fb12:	e2 e1       	ldi	r30, 0x12	; 18
    fb14:	0c 94 63 82 	jmp	0x104c6	; 0x104c6 <__epilogue_restores__>

0000fb18 <__divsf3>:
    fb18:	a8 e1       	ldi	r26, 0x18	; 24
    fb1a:	b0 e0       	ldi	r27, 0x00	; 0
    fb1c:	e2 e9       	ldi	r30, 0x92	; 146
    fb1e:	fd e7       	ldi	r31, 0x7D	; 125
    fb20:	0c 94 4f 82 	jmp	0x1049e	; 0x1049e <__prologue_saves__+0x10>
    fb24:	69 83       	std	Y+1, r22	; 0x01
    fb26:	7a 83       	std	Y+2, r23	; 0x02
    fb28:	8b 83       	std	Y+3, r24	; 0x03
    fb2a:	9c 83       	std	Y+4, r25	; 0x04
    fb2c:	2d 83       	std	Y+5, r18	; 0x05
    fb2e:	3e 83       	std	Y+6, r19	; 0x06
    fb30:	4f 83       	std	Y+7, r20	; 0x07
    fb32:	58 87       	std	Y+8, r21	; 0x08
    fb34:	b9 e0       	ldi	r27, 0x09	; 9
    fb36:	eb 2e       	mov	r14, r27
    fb38:	f1 2c       	mov	r15, r1
    fb3a:	ec 0e       	add	r14, r28
    fb3c:	fd 1e       	adc	r15, r29
    fb3e:	ce 01       	movw	r24, r28
    fb40:	01 96       	adiw	r24, 0x01	; 1
    fb42:	b7 01       	movw	r22, r14
    fb44:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    fb48:	8e 01       	movw	r16, r28
    fb4a:	0f 5e       	subi	r16, 0xEF	; 239
    fb4c:	1f 4f       	sbci	r17, 0xFF	; 255
    fb4e:	ce 01       	movw	r24, r28
    fb50:	05 96       	adiw	r24, 0x05	; 5
    fb52:	b8 01       	movw	r22, r16
    fb54:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    fb58:	29 85       	ldd	r18, Y+9	; 0x09
    fb5a:	22 30       	cpi	r18, 0x02	; 2
    fb5c:	08 f4       	brcc	.+2      	; 0xfb60 <__divsf3+0x48>
    fb5e:	7e c0       	rjmp	.+252    	; 0xfc5c <__divsf3+0x144>
    fb60:	39 89       	ldd	r19, Y+17	; 0x11
    fb62:	32 30       	cpi	r19, 0x02	; 2
    fb64:	10 f4       	brcc	.+4      	; 0xfb6a <__divsf3+0x52>
    fb66:	b8 01       	movw	r22, r16
    fb68:	7c c0       	rjmp	.+248    	; 0xfc62 <__divsf3+0x14a>
    fb6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    fb6c:	9a 89       	ldd	r25, Y+18	; 0x12
    fb6e:	89 27       	eor	r24, r25
    fb70:	8a 87       	std	Y+10, r24	; 0x0a
    fb72:	24 30       	cpi	r18, 0x04	; 4
    fb74:	11 f0       	breq	.+4      	; 0xfb7a <__divsf3+0x62>
    fb76:	22 30       	cpi	r18, 0x02	; 2
    fb78:	31 f4       	brne	.+12     	; 0xfb86 <__divsf3+0x6e>
    fb7a:	23 17       	cp	r18, r19
    fb7c:	09 f0       	breq	.+2      	; 0xfb80 <__divsf3+0x68>
    fb7e:	6e c0       	rjmp	.+220    	; 0xfc5c <__divsf3+0x144>
    fb80:	6e e2       	ldi	r22, 0x2E	; 46
    fb82:	72 e0       	ldi	r23, 0x02	; 2
    fb84:	6e c0       	rjmp	.+220    	; 0xfc62 <__divsf3+0x14a>
    fb86:	34 30       	cpi	r19, 0x04	; 4
    fb88:	39 f4       	brne	.+14     	; 0xfb98 <__divsf3+0x80>
    fb8a:	1d 86       	std	Y+13, r1	; 0x0d
    fb8c:	1e 86       	std	Y+14, r1	; 0x0e
    fb8e:	1f 86       	std	Y+15, r1	; 0x0f
    fb90:	18 8a       	std	Y+16, r1	; 0x10
    fb92:	1c 86       	std	Y+12, r1	; 0x0c
    fb94:	1b 86       	std	Y+11, r1	; 0x0b
    fb96:	04 c0       	rjmp	.+8      	; 0xfba0 <__divsf3+0x88>
    fb98:	32 30       	cpi	r19, 0x02	; 2
    fb9a:	21 f4       	brne	.+8      	; 0xfba4 <__divsf3+0x8c>
    fb9c:	84 e0       	ldi	r24, 0x04	; 4
    fb9e:	89 87       	std	Y+9, r24	; 0x09
    fba0:	b7 01       	movw	r22, r14
    fba2:	5f c0       	rjmp	.+190    	; 0xfc62 <__divsf3+0x14a>
    fba4:	2b 85       	ldd	r18, Y+11	; 0x0b
    fba6:	3c 85       	ldd	r19, Y+12	; 0x0c
    fba8:	8b 89       	ldd	r24, Y+19	; 0x13
    fbaa:	9c 89       	ldd	r25, Y+20	; 0x14
    fbac:	28 1b       	sub	r18, r24
    fbae:	39 0b       	sbc	r19, r25
    fbb0:	3c 87       	std	Y+12, r19	; 0x0c
    fbb2:	2b 87       	std	Y+11, r18	; 0x0b
    fbb4:	ed 84       	ldd	r14, Y+13	; 0x0d
    fbb6:	fe 84       	ldd	r15, Y+14	; 0x0e
    fbb8:	0f 85       	ldd	r16, Y+15	; 0x0f
    fbba:	18 89       	ldd	r17, Y+16	; 0x10
    fbbc:	ad 88       	ldd	r10, Y+21	; 0x15
    fbbe:	be 88       	ldd	r11, Y+22	; 0x16
    fbc0:	cf 88       	ldd	r12, Y+23	; 0x17
    fbc2:	d8 8c       	ldd	r13, Y+24	; 0x18
    fbc4:	ea 14       	cp	r14, r10
    fbc6:	fb 04       	cpc	r15, r11
    fbc8:	0c 05       	cpc	r16, r12
    fbca:	1d 05       	cpc	r17, r13
    fbcc:	40 f4       	brcc	.+16     	; 0xfbde <__divsf3+0xc6>
    fbce:	ee 0c       	add	r14, r14
    fbd0:	ff 1c       	adc	r15, r15
    fbd2:	00 1f       	adc	r16, r16
    fbd4:	11 1f       	adc	r17, r17
    fbd6:	21 50       	subi	r18, 0x01	; 1
    fbd8:	30 40       	sbci	r19, 0x00	; 0
    fbda:	3c 87       	std	Y+12, r19	; 0x0c
    fbdc:	2b 87       	std	Y+11, r18	; 0x0b
    fbde:	20 e0       	ldi	r18, 0x00	; 0
    fbe0:	30 e0       	ldi	r19, 0x00	; 0
    fbe2:	40 e0       	ldi	r20, 0x00	; 0
    fbe4:	50 e0       	ldi	r21, 0x00	; 0
    fbe6:	80 e0       	ldi	r24, 0x00	; 0
    fbe8:	90 e0       	ldi	r25, 0x00	; 0
    fbea:	a0 e0       	ldi	r26, 0x00	; 0
    fbec:	b0 e4       	ldi	r27, 0x40	; 64
    fbee:	60 e0       	ldi	r22, 0x00	; 0
    fbf0:	70 e0       	ldi	r23, 0x00	; 0
    fbf2:	ea 14       	cp	r14, r10
    fbf4:	fb 04       	cpc	r15, r11
    fbf6:	0c 05       	cpc	r16, r12
    fbf8:	1d 05       	cpc	r17, r13
    fbfa:	40 f0       	brcs	.+16     	; 0xfc0c <__divsf3+0xf4>
    fbfc:	28 2b       	or	r18, r24
    fbfe:	39 2b       	or	r19, r25
    fc00:	4a 2b       	or	r20, r26
    fc02:	5b 2b       	or	r21, r27
    fc04:	ea 18       	sub	r14, r10
    fc06:	fb 08       	sbc	r15, r11
    fc08:	0c 09       	sbc	r16, r12
    fc0a:	1d 09       	sbc	r17, r13
    fc0c:	b6 95       	lsr	r27
    fc0e:	a7 95       	ror	r26
    fc10:	97 95       	ror	r25
    fc12:	87 95       	ror	r24
    fc14:	ee 0c       	add	r14, r14
    fc16:	ff 1c       	adc	r15, r15
    fc18:	00 1f       	adc	r16, r16
    fc1a:	11 1f       	adc	r17, r17
    fc1c:	6f 5f       	subi	r22, 0xFF	; 255
    fc1e:	7f 4f       	sbci	r23, 0xFF	; 255
    fc20:	6f 31       	cpi	r22, 0x1F	; 31
    fc22:	71 05       	cpc	r23, r1
    fc24:	31 f7       	brne	.-52     	; 0xfbf2 <__divsf3+0xda>
    fc26:	da 01       	movw	r26, r20
    fc28:	c9 01       	movw	r24, r18
    fc2a:	8f 77       	andi	r24, 0x7F	; 127
    fc2c:	90 70       	andi	r25, 0x00	; 0
    fc2e:	a0 70       	andi	r26, 0x00	; 0
    fc30:	b0 70       	andi	r27, 0x00	; 0
    fc32:	80 34       	cpi	r24, 0x40	; 64
    fc34:	91 05       	cpc	r25, r1
    fc36:	a1 05       	cpc	r26, r1
    fc38:	b1 05       	cpc	r27, r1
    fc3a:	61 f4       	brne	.+24     	; 0xfc54 <__divsf3+0x13c>
    fc3c:	27 fd       	sbrc	r18, 7
    fc3e:	0a c0       	rjmp	.+20     	; 0xfc54 <__divsf3+0x13c>
    fc40:	e1 14       	cp	r14, r1
    fc42:	f1 04       	cpc	r15, r1
    fc44:	01 05       	cpc	r16, r1
    fc46:	11 05       	cpc	r17, r1
    fc48:	29 f0       	breq	.+10     	; 0xfc54 <__divsf3+0x13c>
    fc4a:	20 5c       	subi	r18, 0xC0	; 192
    fc4c:	3f 4f       	sbci	r19, 0xFF	; 255
    fc4e:	4f 4f       	sbci	r20, 0xFF	; 255
    fc50:	5f 4f       	sbci	r21, 0xFF	; 255
    fc52:	20 78       	andi	r18, 0x80	; 128
    fc54:	2d 87       	std	Y+13, r18	; 0x0d
    fc56:	3e 87       	std	Y+14, r19	; 0x0e
    fc58:	4f 87       	std	Y+15, r20	; 0x0f
    fc5a:	58 8b       	std	Y+16, r21	; 0x10
    fc5c:	be 01       	movw	r22, r28
    fc5e:	67 5f       	subi	r22, 0xF7	; 247
    fc60:	7f 4f       	sbci	r23, 0xFF	; 255
    fc62:	cb 01       	movw	r24, r22
    fc64:	0e 94 12 80 	call	0x10024	; 0x10024 <__pack_f>
    fc68:	68 96       	adiw	r28, 0x18	; 24
    fc6a:	ea e0       	ldi	r30, 0x0A	; 10
    fc6c:	0c 94 6b 82 	jmp	0x104d6	; 0x104d6 <__epilogue_restores__+0x10>

0000fc70 <__gesf2>:
    fc70:	a8 e1       	ldi	r26, 0x18	; 24
    fc72:	b0 e0       	ldi	r27, 0x00	; 0
    fc74:	ee e3       	ldi	r30, 0x3E	; 62
    fc76:	fe e7       	ldi	r31, 0x7E	; 126
    fc78:	0c 94 53 82 	jmp	0x104a6	; 0x104a6 <__prologue_saves__+0x18>
    fc7c:	69 83       	std	Y+1, r22	; 0x01
    fc7e:	7a 83       	std	Y+2, r23	; 0x02
    fc80:	8b 83       	std	Y+3, r24	; 0x03
    fc82:	9c 83       	std	Y+4, r25	; 0x04
    fc84:	2d 83       	std	Y+5, r18	; 0x05
    fc86:	3e 83       	std	Y+6, r19	; 0x06
    fc88:	4f 83       	std	Y+7, r20	; 0x07
    fc8a:	58 87       	std	Y+8, r21	; 0x08
    fc8c:	89 e0       	ldi	r24, 0x09	; 9
    fc8e:	e8 2e       	mov	r14, r24
    fc90:	f1 2c       	mov	r15, r1
    fc92:	ec 0e       	add	r14, r28
    fc94:	fd 1e       	adc	r15, r29
    fc96:	ce 01       	movw	r24, r28
    fc98:	01 96       	adiw	r24, 0x01	; 1
    fc9a:	b7 01       	movw	r22, r14
    fc9c:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    fca0:	8e 01       	movw	r16, r28
    fca2:	0f 5e       	subi	r16, 0xEF	; 239
    fca4:	1f 4f       	sbci	r17, 0xFF	; 255
    fca6:	ce 01       	movw	r24, r28
    fca8:	05 96       	adiw	r24, 0x05	; 5
    fcaa:	b8 01       	movw	r22, r16
    fcac:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    fcb0:	89 85       	ldd	r24, Y+9	; 0x09
    fcb2:	82 30       	cpi	r24, 0x02	; 2
    fcb4:	40 f0       	brcs	.+16     	; 0xfcc6 <__gesf2+0x56>
    fcb6:	89 89       	ldd	r24, Y+17	; 0x11
    fcb8:	82 30       	cpi	r24, 0x02	; 2
    fcba:	28 f0       	brcs	.+10     	; 0xfcc6 <__gesf2+0x56>
    fcbc:	c7 01       	movw	r24, r14
    fcbe:	b8 01       	movw	r22, r16
    fcc0:	0e 94 5f 81 	call	0x102be	; 0x102be <__fpcmp_parts_f>
    fcc4:	01 c0       	rjmp	.+2      	; 0xfcc8 <__gesf2+0x58>
    fcc6:	8f ef       	ldi	r24, 0xFF	; 255
    fcc8:	68 96       	adiw	r28, 0x18	; 24
    fcca:	e6 e0       	ldi	r30, 0x06	; 6
    fccc:	0c 94 6f 82 	jmp	0x104de	; 0x104de <__epilogue_restores__+0x18>

0000fcd0 <__ltsf2>:
    fcd0:	a8 e1       	ldi	r26, 0x18	; 24
    fcd2:	b0 e0       	ldi	r27, 0x00	; 0
    fcd4:	ee e6       	ldi	r30, 0x6E	; 110
    fcd6:	fe e7       	ldi	r31, 0x7E	; 126
    fcd8:	0c 94 53 82 	jmp	0x104a6	; 0x104a6 <__prologue_saves__+0x18>
    fcdc:	69 83       	std	Y+1, r22	; 0x01
    fcde:	7a 83       	std	Y+2, r23	; 0x02
    fce0:	8b 83       	std	Y+3, r24	; 0x03
    fce2:	9c 83       	std	Y+4, r25	; 0x04
    fce4:	2d 83       	std	Y+5, r18	; 0x05
    fce6:	3e 83       	std	Y+6, r19	; 0x06
    fce8:	4f 83       	std	Y+7, r20	; 0x07
    fcea:	58 87       	std	Y+8, r21	; 0x08
    fcec:	89 e0       	ldi	r24, 0x09	; 9
    fcee:	e8 2e       	mov	r14, r24
    fcf0:	f1 2c       	mov	r15, r1
    fcf2:	ec 0e       	add	r14, r28
    fcf4:	fd 1e       	adc	r15, r29
    fcf6:	ce 01       	movw	r24, r28
    fcf8:	01 96       	adiw	r24, 0x01	; 1
    fcfa:	b7 01       	movw	r22, r14
    fcfc:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    fd00:	8e 01       	movw	r16, r28
    fd02:	0f 5e       	subi	r16, 0xEF	; 239
    fd04:	1f 4f       	sbci	r17, 0xFF	; 255
    fd06:	ce 01       	movw	r24, r28
    fd08:	05 96       	adiw	r24, 0x05	; 5
    fd0a:	b8 01       	movw	r22, r16
    fd0c:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    fd10:	89 85       	ldd	r24, Y+9	; 0x09
    fd12:	82 30       	cpi	r24, 0x02	; 2
    fd14:	40 f0       	brcs	.+16     	; 0xfd26 <__ltsf2+0x56>
    fd16:	89 89       	ldd	r24, Y+17	; 0x11
    fd18:	82 30       	cpi	r24, 0x02	; 2
    fd1a:	28 f0       	brcs	.+10     	; 0xfd26 <__ltsf2+0x56>
    fd1c:	c7 01       	movw	r24, r14
    fd1e:	b8 01       	movw	r22, r16
    fd20:	0e 94 5f 81 	call	0x102be	; 0x102be <__fpcmp_parts_f>
    fd24:	01 c0       	rjmp	.+2      	; 0xfd28 <__ltsf2+0x58>
    fd26:	81 e0       	ldi	r24, 0x01	; 1
    fd28:	68 96       	adiw	r28, 0x18	; 24
    fd2a:	e6 e0       	ldi	r30, 0x06	; 6
    fd2c:	0c 94 6f 82 	jmp	0x104de	; 0x104de <__epilogue_restores__+0x18>

0000fd30 <__floatsisf>:
    fd30:	a8 e0       	ldi	r26, 0x08	; 8
    fd32:	b0 e0       	ldi	r27, 0x00	; 0
    fd34:	ee e9       	ldi	r30, 0x9E	; 158
    fd36:	fe e7       	ldi	r31, 0x7E	; 126
    fd38:	0c 94 50 82 	jmp	0x104a0	; 0x104a0 <__prologue_saves__+0x12>
    fd3c:	9b 01       	movw	r18, r22
    fd3e:	ac 01       	movw	r20, r24
    fd40:	83 e0       	ldi	r24, 0x03	; 3
    fd42:	89 83       	std	Y+1, r24	; 0x01
    fd44:	da 01       	movw	r26, r20
    fd46:	c9 01       	movw	r24, r18
    fd48:	88 27       	eor	r24, r24
    fd4a:	b7 fd       	sbrc	r27, 7
    fd4c:	83 95       	inc	r24
    fd4e:	99 27       	eor	r25, r25
    fd50:	aa 27       	eor	r26, r26
    fd52:	bb 27       	eor	r27, r27
    fd54:	b8 2e       	mov	r11, r24
    fd56:	21 15       	cp	r18, r1
    fd58:	31 05       	cpc	r19, r1
    fd5a:	41 05       	cpc	r20, r1
    fd5c:	51 05       	cpc	r21, r1
    fd5e:	19 f4       	brne	.+6      	; 0xfd66 <__floatsisf+0x36>
    fd60:	82 e0       	ldi	r24, 0x02	; 2
    fd62:	89 83       	std	Y+1, r24	; 0x01
    fd64:	3a c0       	rjmp	.+116    	; 0xfdda <__floatsisf+0xaa>
    fd66:	88 23       	and	r24, r24
    fd68:	a9 f0       	breq	.+42     	; 0xfd94 <__floatsisf+0x64>
    fd6a:	20 30       	cpi	r18, 0x00	; 0
    fd6c:	80 e0       	ldi	r24, 0x00	; 0
    fd6e:	38 07       	cpc	r19, r24
    fd70:	80 e0       	ldi	r24, 0x00	; 0
    fd72:	48 07       	cpc	r20, r24
    fd74:	80 e8       	ldi	r24, 0x80	; 128
    fd76:	58 07       	cpc	r21, r24
    fd78:	29 f4       	brne	.+10     	; 0xfd84 <__floatsisf+0x54>
    fd7a:	60 e0       	ldi	r22, 0x00	; 0
    fd7c:	70 e0       	ldi	r23, 0x00	; 0
    fd7e:	80 e0       	ldi	r24, 0x00	; 0
    fd80:	9f ec       	ldi	r25, 0xCF	; 207
    fd82:	30 c0       	rjmp	.+96     	; 0xfde4 <__floatsisf+0xb4>
    fd84:	ee 24       	eor	r14, r14
    fd86:	ff 24       	eor	r15, r15
    fd88:	87 01       	movw	r16, r14
    fd8a:	e2 1a       	sub	r14, r18
    fd8c:	f3 0a       	sbc	r15, r19
    fd8e:	04 0b       	sbc	r16, r20
    fd90:	15 0b       	sbc	r17, r21
    fd92:	02 c0       	rjmp	.+4      	; 0xfd98 <__floatsisf+0x68>
    fd94:	79 01       	movw	r14, r18
    fd96:	8a 01       	movw	r16, r20
    fd98:	8e e1       	ldi	r24, 0x1E	; 30
    fd9a:	c8 2e       	mov	r12, r24
    fd9c:	d1 2c       	mov	r13, r1
    fd9e:	dc 82       	std	Y+4, r13	; 0x04
    fda0:	cb 82       	std	Y+3, r12	; 0x03
    fda2:	ed 82       	std	Y+5, r14	; 0x05
    fda4:	fe 82       	std	Y+6, r15	; 0x06
    fda6:	0f 83       	std	Y+7, r16	; 0x07
    fda8:	18 87       	std	Y+8, r17	; 0x08
    fdaa:	c8 01       	movw	r24, r16
    fdac:	b7 01       	movw	r22, r14
    fdae:	0e 94 c3 7f 	call	0xff86	; 0xff86 <__clzsi2>
    fdb2:	01 97       	sbiw	r24, 0x01	; 1
    fdb4:	18 16       	cp	r1, r24
    fdb6:	19 06       	cpc	r1, r25
    fdb8:	84 f4       	brge	.+32     	; 0xfdda <__floatsisf+0xaa>
    fdba:	08 2e       	mov	r0, r24
    fdbc:	04 c0       	rjmp	.+8      	; 0xfdc6 <__floatsisf+0x96>
    fdbe:	ee 0c       	add	r14, r14
    fdc0:	ff 1c       	adc	r15, r15
    fdc2:	00 1f       	adc	r16, r16
    fdc4:	11 1f       	adc	r17, r17
    fdc6:	0a 94       	dec	r0
    fdc8:	d2 f7       	brpl	.-12     	; 0xfdbe <__floatsisf+0x8e>
    fdca:	ed 82       	std	Y+5, r14	; 0x05
    fdcc:	fe 82       	std	Y+6, r15	; 0x06
    fdce:	0f 83       	std	Y+7, r16	; 0x07
    fdd0:	18 87       	std	Y+8, r17	; 0x08
    fdd2:	c8 1a       	sub	r12, r24
    fdd4:	d9 0a       	sbc	r13, r25
    fdd6:	dc 82       	std	Y+4, r13	; 0x04
    fdd8:	cb 82       	std	Y+3, r12	; 0x03
    fdda:	ba 82       	std	Y+2, r11	; 0x02
    fddc:	ce 01       	movw	r24, r28
    fdde:	01 96       	adiw	r24, 0x01	; 1
    fde0:	0e 94 12 80 	call	0x10024	; 0x10024 <__pack_f>
    fde4:	28 96       	adiw	r28, 0x08	; 8
    fde6:	e9 e0       	ldi	r30, 0x09	; 9
    fde8:	0c 94 6c 82 	jmp	0x104d8	; 0x104d8 <__epilogue_restores__+0x12>

0000fdec <__fixsfsi>:
    fdec:	ac e0       	ldi	r26, 0x0C	; 12
    fdee:	b0 e0       	ldi	r27, 0x00	; 0
    fdf0:	ec ef       	ldi	r30, 0xFC	; 252
    fdf2:	fe e7       	ldi	r31, 0x7E	; 126
    fdf4:	0c 94 57 82 	jmp	0x104ae	; 0x104ae <__prologue_saves__+0x20>
    fdf8:	69 83       	std	Y+1, r22	; 0x01
    fdfa:	7a 83       	std	Y+2, r23	; 0x02
    fdfc:	8b 83       	std	Y+3, r24	; 0x03
    fdfe:	9c 83       	std	Y+4, r25	; 0x04
    fe00:	ce 01       	movw	r24, r28
    fe02:	01 96       	adiw	r24, 0x01	; 1
    fe04:	be 01       	movw	r22, r28
    fe06:	6b 5f       	subi	r22, 0xFB	; 251
    fe08:	7f 4f       	sbci	r23, 0xFF	; 255
    fe0a:	0e 94 e7 80 	call	0x101ce	; 0x101ce <__unpack_f>
    fe0e:	8d 81       	ldd	r24, Y+5	; 0x05
    fe10:	82 30       	cpi	r24, 0x02	; 2
    fe12:	61 f1       	breq	.+88     	; 0xfe6c <__fixsfsi+0x80>
    fe14:	82 30       	cpi	r24, 0x02	; 2
    fe16:	50 f1       	brcs	.+84     	; 0xfe6c <__fixsfsi+0x80>
    fe18:	84 30       	cpi	r24, 0x04	; 4
    fe1a:	21 f4       	brne	.+8      	; 0xfe24 <__fixsfsi+0x38>
    fe1c:	8e 81       	ldd	r24, Y+6	; 0x06
    fe1e:	88 23       	and	r24, r24
    fe20:	51 f1       	breq	.+84     	; 0xfe76 <__fixsfsi+0x8a>
    fe22:	2e c0       	rjmp	.+92     	; 0xfe80 <__fixsfsi+0x94>
    fe24:	2f 81       	ldd	r18, Y+7	; 0x07
    fe26:	38 85       	ldd	r19, Y+8	; 0x08
    fe28:	37 fd       	sbrc	r19, 7
    fe2a:	20 c0       	rjmp	.+64     	; 0xfe6c <__fixsfsi+0x80>
    fe2c:	6e 81       	ldd	r22, Y+6	; 0x06
    fe2e:	2f 31       	cpi	r18, 0x1F	; 31
    fe30:	31 05       	cpc	r19, r1
    fe32:	1c f0       	brlt	.+6      	; 0xfe3a <__fixsfsi+0x4e>
    fe34:	66 23       	and	r22, r22
    fe36:	f9 f0       	breq	.+62     	; 0xfe76 <__fixsfsi+0x8a>
    fe38:	23 c0       	rjmp	.+70     	; 0xfe80 <__fixsfsi+0x94>
    fe3a:	8e e1       	ldi	r24, 0x1E	; 30
    fe3c:	90 e0       	ldi	r25, 0x00	; 0
    fe3e:	82 1b       	sub	r24, r18
    fe40:	93 0b       	sbc	r25, r19
    fe42:	29 85       	ldd	r18, Y+9	; 0x09
    fe44:	3a 85       	ldd	r19, Y+10	; 0x0a
    fe46:	4b 85       	ldd	r20, Y+11	; 0x0b
    fe48:	5c 85       	ldd	r21, Y+12	; 0x0c
    fe4a:	04 c0       	rjmp	.+8      	; 0xfe54 <__fixsfsi+0x68>
    fe4c:	56 95       	lsr	r21
    fe4e:	47 95       	ror	r20
    fe50:	37 95       	ror	r19
    fe52:	27 95       	ror	r18
    fe54:	8a 95       	dec	r24
    fe56:	d2 f7       	brpl	.-12     	; 0xfe4c <__fixsfsi+0x60>
    fe58:	66 23       	and	r22, r22
    fe5a:	b1 f0       	breq	.+44     	; 0xfe88 <__fixsfsi+0x9c>
    fe5c:	50 95       	com	r21
    fe5e:	40 95       	com	r20
    fe60:	30 95       	com	r19
    fe62:	21 95       	neg	r18
    fe64:	3f 4f       	sbci	r19, 0xFF	; 255
    fe66:	4f 4f       	sbci	r20, 0xFF	; 255
    fe68:	5f 4f       	sbci	r21, 0xFF	; 255
    fe6a:	0e c0       	rjmp	.+28     	; 0xfe88 <__fixsfsi+0x9c>
    fe6c:	20 e0       	ldi	r18, 0x00	; 0
    fe6e:	30 e0       	ldi	r19, 0x00	; 0
    fe70:	40 e0       	ldi	r20, 0x00	; 0
    fe72:	50 e0       	ldi	r21, 0x00	; 0
    fe74:	09 c0       	rjmp	.+18     	; 0xfe88 <__fixsfsi+0x9c>
    fe76:	2f ef       	ldi	r18, 0xFF	; 255
    fe78:	3f ef       	ldi	r19, 0xFF	; 255
    fe7a:	4f ef       	ldi	r20, 0xFF	; 255
    fe7c:	5f e7       	ldi	r21, 0x7F	; 127
    fe7e:	04 c0       	rjmp	.+8      	; 0xfe88 <__fixsfsi+0x9c>
    fe80:	20 e0       	ldi	r18, 0x00	; 0
    fe82:	30 e0       	ldi	r19, 0x00	; 0
    fe84:	40 e0       	ldi	r20, 0x00	; 0
    fe86:	50 e8       	ldi	r21, 0x80	; 128
    fe88:	b9 01       	movw	r22, r18
    fe8a:	ca 01       	movw	r24, r20
    fe8c:	2c 96       	adiw	r28, 0x0c	; 12
    fe8e:	e2 e0       	ldi	r30, 0x02	; 2
    fe90:	0c 94 73 82 	jmp	0x104e6	; 0x104e6 <__epilogue_restores__+0x20>

0000fe94 <__floatunsisf>:
    fe94:	a8 e0       	ldi	r26, 0x08	; 8
    fe96:	b0 e0       	ldi	r27, 0x00	; 0
    fe98:	e0 e5       	ldi	r30, 0x50	; 80
    fe9a:	ff e7       	ldi	r31, 0x7F	; 127
    fe9c:	0c 94 4f 82 	jmp	0x1049e	; 0x1049e <__prologue_saves__+0x10>
    fea0:	7b 01       	movw	r14, r22
    fea2:	8c 01       	movw	r16, r24
    fea4:	61 15       	cp	r22, r1
    fea6:	71 05       	cpc	r23, r1
    fea8:	81 05       	cpc	r24, r1
    feaa:	91 05       	cpc	r25, r1
    feac:	19 f4       	brne	.+6      	; 0xfeb4 <__floatunsisf+0x20>
    feae:	82 e0       	ldi	r24, 0x02	; 2
    feb0:	89 83       	std	Y+1, r24	; 0x01
    feb2:	60 c0       	rjmp	.+192    	; 0xff74 <__floatunsisf+0xe0>
    feb4:	83 e0       	ldi	r24, 0x03	; 3
    feb6:	89 83       	std	Y+1, r24	; 0x01
    feb8:	8e e1       	ldi	r24, 0x1E	; 30
    feba:	c8 2e       	mov	r12, r24
    febc:	d1 2c       	mov	r13, r1
    febe:	dc 82       	std	Y+4, r13	; 0x04
    fec0:	cb 82       	std	Y+3, r12	; 0x03
    fec2:	ed 82       	std	Y+5, r14	; 0x05
    fec4:	fe 82       	std	Y+6, r15	; 0x06
    fec6:	0f 83       	std	Y+7, r16	; 0x07
    fec8:	18 87       	std	Y+8, r17	; 0x08
    feca:	c8 01       	movw	r24, r16
    fecc:	b7 01       	movw	r22, r14
    fece:	0e 94 c3 7f 	call	0xff86	; 0xff86 <__clzsi2>
    fed2:	fc 01       	movw	r30, r24
    fed4:	31 97       	sbiw	r30, 0x01	; 1
    fed6:	f7 ff       	sbrs	r31, 7
    fed8:	3b c0       	rjmp	.+118    	; 0xff50 <__floatunsisf+0xbc>
    feda:	22 27       	eor	r18, r18
    fedc:	33 27       	eor	r19, r19
    fede:	2e 1b       	sub	r18, r30
    fee0:	3f 0b       	sbc	r19, r31
    fee2:	57 01       	movw	r10, r14
    fee4:	68 01       	movw	r12, r16
    fee6:	02 2e       	mov	r0, r18
    fee8:	04 c0       	rjmp	.+8      	; 0xfef2 <__floatunsisf+0x5e>
    feea:	d6 94       	lsr	r13
    feec:	c7 94       	ror	r12
    feee:	b7 94       	ror	r11
    fef0:	a7 94       	ror	r10
    fef2:	0a 94       	dec	r0
    fef4:	d2 f7       	brpl	.-12     	; 0xfeea <__floatunsisf+0x56>
    fef6:	40 e0       	ldi	r20, 0x00	; 0
    fef8:	50 e0       	ldi	r21, 0x00	; 0
    fefa:	60 e0       	ldi	r22, 0x00	; 0
    fefc:	70 e0       	ldi	r23, 0x00	; 0
    fefe:	81 e0       	ldi	r24, 0x01	; 1
    ff00:	90 e0       	ldi	r25, 0x00	; 0
    ff02:	a0 e0       	ldi	r26, 0x00	; 0
    ff04:	b0 e0       	ldi	r27, 0x00	; 0
    ff06:	04 c0       	rjmp	.+8      	; 0xff10 <__floatunsisf+0x7c>
    ff08:	88 0f       	add	r24, r24
    ff0a:	99 1f       	adc	r25, r25
    ff0c:	aa 1f       	adc	r26, r26
    ff0e:	bb 1f       	adc	r27, r27
    ff10:	2a 95       	dec	r18
    ff12:	d2 f7       	brpl	.-12     	; 0xff08 <__floatunsisf+0x74>
    ff14:	01 97       	sbiw	r24, 0x01	; 1
    ff16:	a1 09       	sbc	r26, r1
    ff18:	b1 09       	sbc	r27, r1
    ff1a:	8e 21       	and	r24, r14
    ff1c:	9f 21       	and	r25, r15
    ff1e:	a0 23       	and	r26, r16
    ff20:	b1 23       	and	r27, r17
    ff22:	00 97       	sbiw	r24, 0x00	; 0
    ff24:	a1 05       	cpc	r26, r1
    ff26:	b1 05       	cpc	r27, r1
    ff28:	21 f0       	breq	.+8      	; 0xff32 <__floatunsisf+0x9e>
    ff2a:	41 e0       	ldi	r20, 0x01	; 1
    ff2c:	50 e0       	ldi	r21, 0x00	; 0
    ff2e:	60 e0       	ldi	r22, 0x00	; 0
    ff30:	70 e0       	ldi	r23, 0x00	; 0
    ff32:	4a 29       	or	r20, r10
    ff34:	5b 29       	or	r21, r11
    ff36:	6c 29       	or	r22, r12
    ff38:	7d 29       	or	r23, r13
    ff3a:	4d 83       	std	Y+5, r20	; 0x05
    ff3c:	5e 83       	std	Y+6, r21	; 0x06
    ff3e:	6f 83       	std	Y+7, r22	; 0x07
    ff40:	78 87       	std	Y+8, r23	; 0x08
    ff42:	8e e1       	ldi	r24, 0x1E	; 30
    ff44:	90 e0       	ldi	r25, 0x00	; 0
    ff46:	8e 1b       	sub	r24, r30
    ff48:	9f 0b       	sbc	r25, r31
    ff4a:	9c 83       	std	Y+4, r25	; 0x04
    ff4c:	8b 83       	std	Y+3, r24	; 0x03
    ff4e:	12 c0       	rjmp	.+36     	; 0xff74 <__floatunsisf+0xe0>
    ff50:	30 97       	sbiw	r30, 0x00	; 0
    ff52:	81 f0       	breq	.+32     	; 0xff74 <__floatunsisf+0xe0>
    ff54:	0e 2e       	mov	r0, r30
    ff56:	04 c0       	rjmp	.+8      	; 0xff60 <__floatunsisf+0xcc>
    ff58:	ee 0c       	add	r14, r14
    ff5a:	ff 1c       	adc	r15, r15
    ff5c:	00 1f       	adc	r16, r16
    ff5e:	11 1f       	adc	r17, r17
    ff60:	0a 94       	dec	r0
    ff62:	d2 f7       	brpl	.-12     	; 0xff58 <__floatunsisf+0xc4>
    ff64:	ed 82       	std	Y+5, r14	; 0x05
    ff66:	fe 82       	std	Y+6, r15	; 0x06
    ff68:	0f 83       	std	Y+7, r16	; 0x07
    ff6a:	18 87       	std	Y+8, r17	; 0x08
    ff6c:	ce 1a       	sub	r12, r30
    ff6e:	df 0a       	sbc	r13, r31
    ff70:	dc 82       	std	Y+4, r13	; 0x04
    ff72:	cb 82       	std	Y+3, r12	; 0x03
    ff74:	1a 82       	std	Y+2, r1	; 0x02
    ff76:	ce 01       	movw	r24, r28
    ff78:	01 96       	adiw	r24, 0x01	; 1
    ff7a:	0e 94 12 80 	call	0x10024	; 0x10024 <__pack_f>
    ff7e:	28 96       	adiw	r28, 0x08	; 8
    ff80:	ea e0       	ldi	r30, 0x0A	; 10
    ff82:	0c 94 6b 82 	jmp	0x104d6	; 0x104d6 <__epilogue_restores__+0x10>

0000ff86 <__clzsi2>:
    ff86:	ef 92       	push	r14
    ff88:	ff 92       	push	r15
    ff8a:	0f 93       	push	r16
    ff8c:	1f 93       	push	r17
    ff8e:	7b 01       	movw	r14, r22
    ff90:	8c 01       	movw	r16, r24
    ff92:	80 e0       	ldi	r24, 0x00	; 0
    ff94:	e8 16       	cp	r14, r24
    ff96:	80 e0       	ldi	r24, 0x00	; 0
    ff98:	f8 06       	cpc	r15, r24
    ff9a:	81 e0       	ldi	r24, 0x01	; 1
    ff9c:	08 07       	cpc	r16, r24
    ff9e:	80 e0       	ldi	r24, 0x00	; 0
    ffa0:	18 07       	cpc	r17, r24
    ffa2:	88 f4       	brcc	.+34     	; 0xffc6 <__clzsi2+0x40>
    ffa4:	8f ef       	ldi	r24, 0xFF	; 255
    ffa6:	e8 16       	cp	r14, r24
    ffa8:	f1 04       	cpc	r15, r1
    ffaa:	01 05       	cpc	r16, r1
    ffac:	11 05       	cpc	r17, r1
    ffae:	31 f0       	breq	.+12     	; 0xffbc <__clzsi2+0x36>
    ffb0:	28 f0       	brcs	.+10     	; 0xffbc <__clzsi2+0x36>
    ffb2:	88 e0       	ldi	r24, 0x08	; 8
    ffb4:	90 e0       	ldi	r25, 0x00	; 0
    ffb6:	a0 e0       	ldi	r26, 0x00	; 0
    ffb8:	b0 e0       	ldi	r27, 0x00	; 0
    ffba:	17 c0       	rjmp	.+46     	; 0xffea <__clzsi2+0x64>
    ffbc:	80 e0       	ldi	r24, 0x00	; 0
    ffbe:	90 e0       	ldi	r25, 0x00	; 0
    ffc0:	a0 e0       	ldi	r26, 0x00	; 0
    ffc2:	b0 e0       	ldi	r27, 0x00	; 0
    ffc4:	12 c0       	rjmp	.+36     	; 0xffea <__clzsi2+0x64>
    ffc6:	80 e0       	ldi	r24, 0x00	; 0
    ffc8:	e8 16       	cp	r14, r24
    ffca:	80 e0       	ldi	r24, 0x00	; 0
    ffcc:	f8 06       	cpc	r15, r24
    ffce:	80 e0       	ldi	r24, 0x00	; 0
    ffd0:	08 07       	cpc	r16, r24
    ffd2:	81 e0       	ldi	r24, 0x01	; 1
    ffd4:	18 07       	cpc	r17, r24
    ffd6:	28 f0       	brcs	.+10     	; 0xffe2 <__clzsi2+0x5c>
    ffd8:	88 e1       	ldi	r24, 0x18	; 24
    ffda:	90 e0       	ldi	r25, 0x00	; 0
    ffdc:	a0 e0       	ldi	r26, 0x00	; 0
    ffde:	b0 e0       	ldi	r27, 0x00	; 0
    ffe0:	04 c0       	rjmp	.+8      	; 0xffea <__clzsi2+0x64>
    ffe2:	80 e1       	ldi	r24, 0x10	; 16
    ffe4:	90 e0       	ldi	r25, 0x00	; 0
    ffe6:	a0 e0       	ldi	r26, 0x00	; 0
    ffe8:	b0 e0       	ldi	r27, 0x00	; 0
    ffea:	20 e2       	ldi	r18, 0x20	; 32
    ffec:	30 e0       	ldi	r19, 0x00	; 0
    ffee:	40 e0       	ldi	r20, 0x00	; 0
    fff0:	50 e0       	ldi	r21, 0x00	; 0
    fff2:	28 1b       	sub	r18, r24
    fff4:	39 0b       	sbc	r19, r25
    fff6:	4a 0b       	sbc	r20, r26
    fff8:	5b 0b       	sbc	r21, r27
    fffa:	04 c0       	rjmp	.+8      	; 0x10004 <__clzsi2+0x7e>
    fffc:	16 95       	lsr	r17
    fffe:	07 95       	ror	r16
   10000:	f7 94       	ror	r15
   10002:	e7 94       	ror	r14
   10004:	8a 95       	dec	r24
   10006:	d2 f7       	brpl	.-12     	; 0xfffc <__clzsi2+0x76>
   10008:	f7 01       	movw	r30, r14
   1000a:	ea 5c       	subi	r30, 0xCA	; 202
   1000c:	fd 4f       	sbci	r31, 0xFD	; 253
   1000e:	80 81       	ld	r24, Z
   10010:	28 1b       	sub	r18, r24
   10012:	31 09       	sbc	r19, r1
   10014:	41 09       	sbc	r20, r1
   10016:	51 09       	sbc	r21, r1
   10018:	c9 01       	movw	r24, r18
   1001a:	1f 91       	pop	r17
   1001c:	0f 91       	pop	r16
   1001e:	ff 90       	pop	r15
   10020:	ef 90       	pop	r14
   10022:	08 95       	ret

00010024 <__pack_f>:
   10024:	df 92       	push	r13
   10026:	ef 92       	push	r14
   10028:	ff 92       	push	r15
   1002a:	0f 93       	push	r16
   1002c:	1f 93       	push	r17
   1002e:	fc 01       	movw	r30, r24
   10030:	e4 80       	ldd	r14, Z+4	; 0x04
   10032:	f5 80       	ldd	r15, Z+5	; 0x05
   10034:	06 81       	ldd	r16, Z+6	; 0x06
   10036:	17 81       	ldd	r17, Z+7	; 0x07
   10038:	d1 80       	ldd	r13, Z+1	; 0x01
   1003a:	80 81       	ld	r24, Z
   1003c:	82 30       	cpi	r24, 0x02	; 2
   1003e:	48 f4       	brcc	.+18     	; 0x10052 <__pack_f+0x2e>
   10040:	80 e0       	ldi	r24, 0x00	; 0
   10042:	90 e0       	ldi	r25, 0x00	; 0
   10044:	a0 e1       	ldi	r26, 0x10	; 16
   10046:	b0 e0       	ldi	r27, 0x00	; 0
   10048:	e8 2a       	or	r14, r24
   1004a:	f9 2a       	or	r15, r25
   1004c:	0a 2b       	or	r16, r26
   1004e:	1b 2b       	or	r17, r27
   10050:	a5 c0       	rjmp	.+330    	; 0x1019c <__pack_f+0x178>
   10052:	84 30       	cpi	r24, 0x04	; 4
   10054:	09 f4       	brne	.+2      	; 0x10058 <__pack_f+0x34>
   10056:	9f c0       	rjmp	.+318    	; 0x10196 <__pack_f+0x172>
   10058:	82 30       	cpi	r24, 0x02	; 2
   1005a:	21 f4       	brne	.+8      	; 0x10064 <__pack_f+0x40>
   1005c:	ee 24       	eor	r14, r14
   1005e:	ff 24       	eor	r15, r15
   10060:	87 01       	movw	r16, r14
   10062:	05 c0       	rjmp	.+10     	; 0x1006e <__pack_f+0x4a>
   10064:	e1 14       	cp	r14, r1
   10066:	f1 04       	cpc	r15, r1
   10068:	01 05       	cpc	r16, r1
   1006a:	11 05       	cpc	r17, r1
   1006c:	19 f4       	brne	.+6      	; 0x10074 <__pack_f+0x50>
   1006e:	e0 e0       	ldi	r30, 0x00	; 0
   10070:	f0 e0       	ldi	r31, 0x00	; 0
   10072:	96 c0       	rjmp	.+300    	; 0x101a0 <__pack_f+0x17c>
   10074:	62 81       	ldd	r22, Z+2	; 0x02
   10076:	73 81       	ldd	r23, Z+3	; 0x03
   10078:	9f ef       	ldi	r25, 0xFF	; 255
   1007a:	62 38       	cpi	r22, 0x82	; 130
   1007c:	79 07       	cpc	r23, r25
   1007e:	0c f0       	brlt	.+2      	; 0x10082 <__pack_f+0x5e>
   10080:	5b c0       	rjmp	.+182    	; 0x10138 <__pack_f+0x114>
   10082:	22 e8       	ldi	r18, 0x82	; 130
   10084:	3f ef       	ldi	r19, 0xFF	; 255
   10086:	26 1b       	sub	r18, r22
   10088:	37 0b       	sbc	r19, r23
   1008a:	2a 31       	cpi	r18, 0x1A	; 26
   1008c:	31 05       	cpc	r19, r1
   1008e:	2c f0       	brlt	.+10     	; 0x1009a <__pack_f+0x76>
   10090:	20 e0       	ldi	r18, 0x00	; 0
   10092:	30 e0       	ldi	r19, 0x00	; 0
   10094:	40 e0       	ldi	r20, 0x00	; 0
   10096:	50 e0       	ldi	r21, 0x00	; 0
   10098:	2a c0       	rjmp	.+84     	; 0x100ee <__pack_f+0xca>
   1009a:	b8 01       	movw	r22, r16
   1009c:	a7 01       	movw	r20, r14
   1009e:	02 2e       	mov	r0, r18
   100a0:	04 c0       	rjmp	.+8      	; 0x100aa <__pack_f+0x86>
   100a2:	76 95       	lsr	r23
   100a4:	67 95       	ror	r22
   100a6:	57 95       	ror	r21
   100a8:	47 95       	ror	r20
   100aa:	0a 94       	dec	r0
   100ac:	d2 f7       	brpl	.-12     	; 0x100a2 <__pack_f+0x7e>
   100ae:	81 e0       	ldi	r24, 0x01	; 1
   100b0:	90 e0       	ldi	r25, 0x00	; 0
   100b2:	a0 e0       	ldi	r26, 0x00	; 0
   100b4:	b0 e0       	ldi	r27, 0x00	; 0
   100b6:	04 c0       	rjmp	.+8      	; 0x100c0 <__pack_f+0x9c>
   100b8:	88 0f       	add	r24, r24
   100ba:	99 1f       	adc	r25, r25
   100bc:	aa 1f       	adc	r26, r26
   100be:	bb 1f       	adc	r27, r27
   100c0:	2a 95       	dec	r18
   100c2:	d2 f7       	brpl	.-12     	; 0x100b8 <__pack_f+0x94>
   100c4:	01 97       	sbiw	r24, 0x01	; 1
   100c6:	a1 09       	sbc	r26, r1
   100c8:	b1 09       	sbc	r27, r1
   100ca:	8e 21       	and	r24, r14
   100cc:	9f 21       	and	r25, r15
   100ce:	a0 23       	and	r26, r16
   100d0:	b1 23       	and	r27, r17
   100d2:	00 97       	sbiw	r24, 0x00	; 0
   100d4:	a1 05       	cpc	r26, r1
   100d6:	b1 05       	cpc	r27, r1
   100d8:	21 f0       	breq	.+8      	; 0x100e2 <__pack_f+0xbe>
   100da:	81 e0       	ldi	r24, 0x01	; 1
   100dc:	90 e0       	ldi	r25, 0x00	; 0
   100de:	a0 e0       	ldi	r26, 0x00	; 0
   100e0:	b0 e0       	ldi	r27, 0x00	; 0
   100e2:	9a 01       	movw	r18, r20
   100e4:	ab 01       	movw	r20, r22
   100e6:	28 2b       	or	r18, r24
   100e8:	39 2b       	or	r19, r25
   100ea:	4a 2b       	or	r20, r26
   100ec:	5b 2b       	or	r21, r27
   100ee:	da 01       	movw	r26, r20
   100f0:	c9 01       	movw	r24, r18
   100f2:	8f 77       	andi	r24, 0x7F	; 127
   100f4:	90 70       	andi	r25, 0x00	; 0
   100f6:	a0 70       	andi	r26, 0x00	; 0
   100f8:	b0 70       	andi	r27, 0x00	; 0
   100fa:	80 34       	cpi	r24, 0x40	; 64
   100fc:	91 05       	cpc	r25, r1
   100fe:	a1 05       	cpc	r26, r1
   10100:	b1 05       	cpc	r27, r1
   10102:	39 f4       	brne	.+14     	; 0x10112 <__pack_f+0xee>
   10104:	27 ff       	sbrs	r18, 7
   10106:	09 c0       	rjmp	.+18     	; 0x1011a <__pack_f+0xf6>
   10108:	20 5c       	subi	r18, 0xC0	; 192
   1010a:	3f 4f       	sbci	r19, 0xFF	; 255
   1010c:	4f 4f       	sbci	r20, 0xFF	; 255
   1010e:	5f 4f       	sbci	r21, 0xFF	; 255
   10110:	04 c0       	rjmp	.+8      	; 0x1011a <__pack_f+0xf6>
   10112:	21 5c       	subi	r18, 0xC1	; 193
   10114:	3f 4f       	sbci	r19, 0xFF	; 255
   10116:	4f 4f       	sbci	r20, 0xFF	; 255
   10118:	5f 4f       	sbci	r21, 0xFF	; 255
   1011a:	e0 e0       	ldi	r30, 0x00	; 0
   1011c:	f0 e0       	ldi	r31, 0x00	; 0
   1011e:	20 30       	cpi	r18, 0x00	; 0
   10120:	a0 e0       	ldi	r26, 0x00	; 0
   10122:	3a 07       	cpc	r19, r26
   10124:	a0 e0       	ldi	r26, 0x00	; 0
   10126:	4a 07       	cpc	r20, r26
   10128:	a0 e4       	ldi	r26, 0x40	; 64
   1012a:	5a 07       	cpc	r21, r26
   1012c:	10 f0       	brcs	.+4      	; 0x10132 <__pack_f+0x10e>
   1012e:	e1 e0       	ldi	r30, 0x01	; 1
   10130:	f0 e0       	ldi	r31, 0x00	; 0
   10132:	79 01       	movw	r14, r18
   10134:	8a 01       	movw	r16, r20
   10136:	27 c0       	rjmp	.+78     	; 0x10186 <__pack_f+0x162>
   10138:	60 38       	cpi	r22, 0x80	; 128
   1013a:	71 05       	cpc	r23, r1
   1013c:	64 f5       	brge	.+88     	; 0x10196 <__pack_f+0x172>
   1013e:	fb 01       	movw	r30, r22
   10140:	e1 58       	subi	r30, 0x81	; 129
   10142:	ff 4f       	sbci	r31, 0xFF	; 255
   10144:	d8 01       	movw	r26, r16
   10146:	c7 01       	movw	r24, r14
   10148:	8f 77       	andi	r24, 0x7F	; 127
   1014a:	90 70       	andi	r25, 0x00	; 0
   1014c:	a0 70       	andi	r26, 0x00	; 0
   1014e:	b0 70       	andi	r27, 0x00	; 0
   10150:	80 34       	cpi	r24, 0x40	; 64
   10152:	91 05       	cpc	r25, r1
   10154:	a1 05       	cpc	r26, r1
   10156:	b1 05       	cpc	r27, r1
   10158:	39 f4       	brne	.+14     	; 0x10168 <__pack_f+0x144>
   1015a:	e7 fe       	sbrs	r14, 7
   1015c:	0d c0       	rjmp	.+26     	; 0x10178 <__pack_f+0x154>
   1015e:	80 e4       	ldi	r24, 0x40	; 64
   10160:	90 e0       	ldi	r25, 0x00	; 0
   10162:	a0 e0       	ldi	r26, 0x00	; 0
   10164:	b0 e0       	ldi	r27, 0x00	; 0
   10166:	04 c0       	rjmp	.+8      	; 0x10170 <__pack_f+0x14c>
   10168:	8f e3       	ldi	r24, 0x3F	; 63
   1016a:	90 e0       	ldi	r25, 0x00	; 0
   1016c:	a0 e0       	ldi	r26, 0x00	; 0
   1016e:	b0 e0       	ldi	r27, 0x00	; 0
   10170:	e8 0e       	add	r14, r24
   10172:	f9 1e       	adc	r15, r25
   10174:	0a 1f       	adc	r16, r26
   10176:	1b 1f       	adc	r17, r27
   10178:	17 ff       	sbrs	r17, 7
   1017a:	05 c0       	rjmp	.+10     	; 0x10186 <__pack_f+0x162>
   1017c:	16 95       	lsr	r17
   1017e:	07 95       	ror	r16
   10180:	f7 94       	ror	r15
   10182:	e7 94       	ror	r14
   10184:	31 96       	adiw	r30, 0x01	; 1
   10186:	87 e0       	ldi	r24, 0x07	; 7
   10188:	16 95       	lsr	r17
   1018a:	07 95       	ror	r16
   1018c:	f7 94       	ror	r15
   1018e:	e7 94       	ror	r14
   10190:	8a 95       	dec	r24
   10192:	d1 f7       	brne	.-12     	; 0x10188 <__pack_f+0x164>
   10194:	05 c0       	rjmp	.+10     	; 0x101a0 <__pack_f+0x17c>
   10196:	ee 24       	eor	r14, r14
   10198:	ff 24       	eor	r15, r15
   1019a:	87 01       	movw	r16, r14
   1019c:	ef ef       	ldi	r30, 0xFF	; 255
   1019e:	f0 e0       	ldi	r31, 0x00	; 0
   101a0:	6e 2f       	mov	r22, r30
   101a2:	67 95       	ror	r22
   101a4:	66 27       	eor	r22, r22
   101a6:	67 95       	ror	r22
   101a8:	90 2f       	mov	r25, r16
   101aa:	9f 77       	andi	r25, 0x7F	; 127
   101ac:	d7 94       	ror	r13
   101ae:	dd 24       	eor	r13, r13
   101b0:	d7 94       	ror	r13
   101b2:	8e 2f       	mov	r24, r30
   101b4:	86 95       	lsr	r24
   101b6:	49 2f       	mov	r20, r25
   101b8:	46 2b       	or	r20, r22
   101ba:	58 2f       	mov	r21, r24
   101bc:	5d 29       	or	r21, r13
   101be:	b7 01       	movw	r22, r14
   101c0:	ca 01       	movw	r24, r20
   101c2:	1f 91       	pop	r17
   101c4:	0f 91       	pop	r16
   101c6:	ff 90       	pop	r15
   101c8:	ef 90       	pop	r14
   101ca:	df 90       	pop	r13
   101cc:	08 95       	ret

000101ce <__unpack_f>:
   101ce:	fc 01       	movw	r30, r24
   101d0:	db 01       	movw	r26, r22
   101d2:	40 81       	ld	r20, Z
   101d4:	51 81       	ldd	r21, Z+1	; 0x01
   101d6:	22 81       	ldd	r18, Z+2	; 0x02
   101d8:	62 2f       	mov	r22, r18
   101da:	6f 77       	andi	r22, 0x7F	; 127
   101dc:	70 e0       	ldi	r23, 0x00	; 0
   101de:	22 1f       	adc	r18, r18
   101e0:	22 27       	eor	r18, r18
   101e2:	22 1f       	adc	r18, r18
   101e4:	93 81       	ldd	r25, Z+3	; 0x03
   101e6:	89 2f       	mov	r24, r25
   101e8:	88 0f       	add	r24, r24
   101ea:	82 2b       	or	r24, r18
   101ec:	28 2f       	mov	r18, r24
   101ee:	30 e0       	ldi	r19, 0x00	; 0
   101f0:	99 1f       	adc	r25, r25
   101f2:	99 27       	eor	r25, r25
   101f4:	99 1f       	adc	r25, r25
   101f6:	11 96       	adiw	r26, 0x01	; 1
   101f8:	9c 93       	st	X, r25
   101fa:	11 97       	sbiw	r26, 0x01	; 1
   101fc:	21 15       	cp	r18, r1
   101fe:	31 05       	cpc	r19, r1
   10200:	a9 f5       	brne	.+106    	; 0x1026c <__unpack_f+0x9e>
   10202:	41 15       	cp	r20, r1
   10204:	51 05       	cpc	r21, r1
   10206:	61 05       	cpc	r22, r1
   10208:	71 05       	cpc	r23, r1
   1020a:	11 f4       	brne	.+4      	; 0x10210 <__unpack_f+0x42>
   1020c:	82 e0       	ldi	r24, 0x02	; 2
   1020e:	37 c0       	rjmp	.+110    	; 0x1027e <__unpack_f+0xb0>
   10210:	82 e8       	ldi	r24, 0x82	; 130
   10212:	9f ef       	ldi	r25, 0xFF	; 255
   10214:	13 96       	adiw	r26, 0x03	; 3
   10216:	9c 93       	st	X, r25
   10218:	8e 93       	st	-X, r24
   1021a:	12 97       	sbiw	r26, 0x02	; 2
   1021c:	9a 01       	movw	r18, r20
   1021e:	ab 01       	movw	r20, r22
   10220:	67 e0       	ldi	r22, 0x07	; 7
   10222:	22 0f       	add	r18, r18
   10224:	33 1f       	adc	r19, r19
   10226:	44 1f       	adc	r20, r20
   10228:	55 1f       	adc	r21, r21
   1022a:	6a 95       	dec	r22
   1022c:	d1 f7       	brne	.-12     	; 0x10222 <__unpack_f+0x54>
   1022e:	83 e0       	ldi	r24, 0x03	; 3
   10230:	8c 93       	st	X, r24
   10232:	0d c0       	rjmp	.+26     	; 0x1024e <__unpack_f+0x80>
   10234:	22 0f       	add	r18, r18
   10236:	33 1f       	adc	r19, r19
   10238:	44 1f       	adc	r20, r20
   1023a:	55 1f       	adc	r21, r21
   1023c:	12 96       	adiw	r26, 0x02	; 2
   1023e:	8d 91       	ld	r24, X+
   10240:	9c 91       	ld	r25, X
   10242:	13 97       	sbiw	r26, 0x03	; 3
   10244:	01 97       	sbiw	r24, 0x01	; 1
   10246:	13 96       	adiw	r26, 0x03	; 3
   10248:	9c 93       	st	X, r25
   1024a:	8e 93       	st	-X, r24
   1024c:	12 97       	sbiw	r26, 0x02	; 2
   1024e:	20 30       	cpi	r18, 0x00	; 0
   10250:	80 e0       	ldi	r24, 0x00	; 0
   10252:	38 07       	cpc	r19, r24
   10254:	80 e0       	ldi	r24, 0x00	; 0
   10256:	48 07       	cpc	r20, r24
   10258:	80 e4       	ldi	r24, 0x40	; 64
   1025a:	58 07       	cpc	r21, r24
   1025c:	58 f3       	brcs	.-42     	; 0x10234 <__unpack_f+0x66>
   1025e:	14 96       	adiw	r26, 0x04	; 4
   10260:	2d 93       	st	X+, r18
   10262:	3d 93       	st	X+, r19
   10264:	4d 93       	st	X+, r20
   10266:	5c 93       	st	X, r21
   10268:	17 97       	sbiw	r26, 0x07	; 7
   1026a:	08 95       	ret
   1026c:	2f 3f       	cpi	r18, 0xFF	; 255
   1026e:	31 05       	cpc	r19, r1
   10270:	79 f4       	brne	.+30     	; 0x10290 <__unpack_f+0xc2>
   10272:	41 15       	cp	r20, r1
   10274:	51 05       	cpc	r21, r1
   10276:	61 05       	cpc	r22, r1
   10278:	71 05       	cpc	r23, r1
   1027a:	19 f4       	brne	.+6      	; 0x10282 <__unpack_f+0xb4>
   1027c:	84 e0       	ldi	r24, 0x04	; 4
   1027e:	8c 93       	st	X, r24
   10280:	08 95       	ret
   10282:	64 ff       	sbrs	r22, 4
   10284:	03 c0       	rjmp	.+6      	; 0x1028c <__unpack_f+0xbe>
   10286:	81 e0       	ldi	r24, 0x01	; 1
   10288:	8c 93       	st	X, r24
   1028a:	12 c0       	rjmp	.+36     	; 0x102b0 <__unpack_f+0xe2>
   1028c:	1c 92       	st	X, r1
   1028e:	10 c0       	rjmp	.+32     	; 0x102b0 <__unpack_f+0xe2>
   10290:	2f 57       	subi	r18, 0x7F	; 127
   10292:	30 40       	sbci	r19, 0x00	; 0
   10294:	13 96       	adiw	r26, 0x03	; 3
   10296:	3c 93       	st	X, r19
   10298:	2e 93       	st	-X, r18
   1029a:	12 97       	sbiw	r26, 0x02	; 2
   1029c:	83 e0       	ldi	r24, 0x03	; 3
   1029e:	8c 93       	st	X, r24
   102a0:	87 e0       	ldi	r24, 0x07	; 7
   102a2:	44 0f       	add	r20, r20
   102a4:	55 1f       	adc	r21, r21
   102a6:	66 1f       	adc	r22, r22
   102a8:	77 1f       	adc	r23, r23
   102aa:	8a 95       	dec	r24
   102ac:	d1 f7       	brne	.-12     	; 0x102a2 <__unpack_f+0xd4>
   102ae:	70 64       	ori	r23, 0x40	; 64
   102b0:	14 96       	adiw	r26, 0x04	; 4
   102b2:	4d 93       	st	X+, r20
   102b4:	5d 93       	st	X+, r21
   102b6:	6d 93       	st	X+, r22
   102b8:	7c 93       	st	X, r23
   102ba:	17 97       	sbiw	r26, 0x07	; 7
   102bc:	08 95       	ret

000102be <__fpcmp_parts_f>:
   102be:	1f 93       	push	r17
   102c0:	dc 01       	movw	r26, r24
   102c2:	fb 01       	movw	r30, r22
   102c4:	9c 91       	ld	r25, X
   102c6:	92 30       	cpi	r25, 0x02	; 2
   102c8:	08 f4       	brcc	.+2      	; 0x102cc <__fpcmp_parts_f+0xe>
   102ca:	47 c0       	rjmp	.+142    	; 0x1035a <__fpcmp_parts_f+0x9c>
   102cc:	80 81       	ld	r24, Z
   102ce:	82 30       	cpi	r24, 0x02	; 2
   102d0:	08 f4       	brcc	.+2      	; 0x102d4 <__fpcmp_parts_f+0x16>
   102d2:	43 c0       	rjmp	.+134    	; 0x1035a <__fpcmp_parts_f+0x9c>
   102d4:	94 30       	cpi	r25, 0x04	; 4
   102d6:	51 f4       	brne	.+20     	; 0x102ec <__fpcmp_parts_f+0x2e>
   102d8:	11 96       	adiw	r26, 0x01	; 1
   102da:	1c 91       	ld	r17, X
   102dc:	84 30       	cpi	r24, 0x04	; 4
   102de:	99 f5       	brne	.+102    	; 0x10346 <__fpcmp_parts_f+0x88>
   102e0:	81 81       	ldd	r24, Z+1	; 0x01
   102e2:	68 2f       	mov	r22, r24
   102e4:	70 e0       	ldi	r23, 0x00	; 0
   102e6:	61 1b       	sub	r22, r17
   102e8:	71 09       	sbc	r23, r1
   102ea:	3f c0       	rjmp	.+126    	; 0x1036a <__fpcmp_parts_f+0xac>
   102ec:	84 30       	cpi	r24, 0x04	; 4
   102ee:	21 f0       	breq	.+8      	; 0x102f8 <__fpcmp_parts_f+0x3a>
   102f0:	92 30       	cpi	r25, 0x02	; 2
   102f2:	31 f4       	brne	.+12     	; 0x10300 <__fpcmp_parts_f+0x42>
   102f4:	82 30       	cpi	r24, 0x02	; 2
   102f6:	b9 f1       	breq	.+110    	; 0x10366 <__fpcmp_parts_f+0xa8>
   102f8:	81 81       	ldd	r24, Z+1	; 0x01
   102fa:	88 23       	and	r24, r24
   102fc:	89 f1       	breq	.+98     	; 0x10360 <__fpcmp_parts_f+0xa2>
   102fe:	2d c0       	rjmp	.+90     	; 0x1035a <__fpcmp_parts_f+0x9c>
   10300:	11 96       	adiw	r26, 0x01	; 1
   10302:	1c 91       	ld	r17, X
   10304:	11 97       	sbiw	r26, 0x01	; 1
   10306:	82 30       	cpi	r24, 0x02	; 2
   10308:	f1 f0       	breq	.+60     	; 0x10346 <__fpcmp_parts_f+0x88>
   1030a:	81 81       	ldd	r24, Z+1	; 0x01
   1030c:	18 17       	cp	r17, r24
   1030e:	d9 f4       	brne	.+54     	; 0x10346 <__fpcmp_parts_f+0x88>
   10310:	12 96       	adiw	r26, 0x02	; 2
   10312:	2d 91       	ld	r18, X+
   10314:	3c 91       	ld	r19, X
   10316:	13 97       	sbiw	r26, 0x03	; 3
   10318:	82 81       	ldd	r24, Z+2	; 0x02
   1031a:	93 81       	ldd	r25, Z+3	; 0x03
   1031c:	82 17       	cp	r24, r18
   1031e:	93 07       	cpc	r25, r19
   10320:	94 f0       	brlt	.+36     	; 0x10346 <__fpcmp_parts_f+0x88>
   10322:	28 17       	cp	r18, r24
   10324:	39 07       	cpc	r19, r25
   10326:	bc f0       	brlt	.+46     	; 0x10356 <__fpcmp_parts_f+0x98>
   10328:	14 96       	adiw	r26, 0x04	; 4
   1032a:	8d 91       	ld	r24, X+
   1032c:	9d 91       	ld	r25, X+
   1032e:	0d 90       	ld	r0, X+
   10330:	bc 91       	ld	r27, X
   10332:	a0 2d       	mov	r26, r0
   10334:	24 81       	ldd	r18, Z+4	; 0x04
   10336:	35 81       	ldd	r19, Z+5	; 0x05
   10338:	46 81       	ldd	r20, Z+6	; 0x06
   1033a:	57 81       	ldd	r21, Z+7	; 0x07
   1033c:	28 17       	cp	r18, r24
   1033e:	39 07       	cpc	r19, r25
   10340:	4a 07       	cpc	r20, r26
   10342:	5b 07       	cpc	r21, r27
   10344:	18 f4       	brcc	.+6      	; 0x1034c <__fpcmp_parts_f+0x8e>
   10346:	11 23       	and	r17, r17
   10348:	41 f0       	breq	.+16     	; 0x1035a <__fpcmp_parts_f+0x9c>
   1034a:	0a c0       	rjmp	.+20     	; 0x10360 <__fpcmp_parts_f+0xa2>
   1034c:	82 17       	cp	r24, r18
   1034e:	93 07       	cpc	r25, r19
   10350:	a4 07       	cpc	r26, r20
   10352:	b5 07       	cpc	r27, r21
   10354:	40 f4       	brcc	.+16     	; 0x10366 <__fpcmp_parts_f+0xa8>
   10356:	11 23       	and	r17, r17
   10358:	19 f0       	breq	.+6      	; 0x10360 <__fpcmp_parts_f+0xa2>
   1035a:	61 e0       	ldi	r22, 0x01	; 1
   1035c:	70 e0       	ldi	r23, 0x00	; 0
   1035e:	05 c0       	rjmp	.+10     	; 0x1036a <__fpcmp_parts_f+0xac>
   10360:	6f ef       	ldi	r22, 0xFF	; 255
   10362:	7f ef       	ldi	r23, 0xFF	; 255
   10364:	02 c0       	rjmp	.+4      	; 0x1036a <__fpcmp_parts_f+0xac>
   10366:	60 e0       	ldi	r22, 0x00	; 0
   10368:	70 e0       	ldi	r23, 0x00	; 0
   1036a:	cb 01       	movw	r24, r22
   1036c:	1f 91       	pop	r17
   1036e:	08 95       	ret

00010370 <__mulsi3>:
   10370:	62 9f       	mul	r22, r18
   10372:	d0 01       	movw	r26, r0
   10374:	73 9f       	mul	r23, r19
   10376:	f0 01       	movw	r30, r0
   10378:	82 9f       	mul	r24, r18
   1037a:	e0 0d       	add	r30, r0
   1037c:	f1 1d       	adc	r31, r1
   1037e:	64 9f       	mul	r22, r20
   10380:	e0 0d       	add	r30, r0
   10382:	f1 1d       	adc	r31, r1
   10384:	92 9f       	mul	r25, r18
   10386:	f0 0d       	add	r31, r0
   10388:	83 9f       	mul	r24, r19
   1038a:	f0 0d       	add	r31, r0
   1038c:	74 9f       	mul	r23, r20
   1038e:	f0 0d       	add	r31, r0
   10390:	65 9f       	mul	r22, r21
   10392:	f0 0d       	add	r31, r0
   10394:	99 27       	eor	r25, r25
   10396:	72 9f       	mul	r23, r18
   10398:	b0 0d       	add	r27, r0
   1039a:	e1 1d       	adc	r30, r1
   1039c:	f9 1f       	adc	r31, r25
   1039e:	63 9f       	mul	r22, r19
   103a0:	b0 0d       	add	r27, r0
   103a2:	e1 1d       	adc	r30, r1
   103a4:	f9 1f       	adc	r31, r25
   103a6:	bd 01       	movw	r22, r26
   103a8:	cf 01       	movw	r24, r30
   103aa:	11 24       	eor	r1, r1
   103ac:	08 95       	ret

000103ae <__udivmodqi4>:
   103ae:	99 1b       	sub	r25, r25
   103b0:	79 e0       	ldi	r23, 0x09	; 9
   103b2:	04 c0       	rjmp	.+8      	; 0x103bc <__udivmodqi4_ep>

000103b4 <__udivmodqi4_loop>:
   103b4:	99 1f       	adc	r25, r25
   103b6:	96 17       	cp	r25, r22
   103b8:	08 f0       	brcs	.+2      	; 0x103bc <__udivmodqi4_ep>
   103ba:	96 1b       	sub	r25, r22

000103bc <__udivmodqi4_ep>:
   103bc:	88 1f       	adc	r24, r24
   103be:	7a 95       	dec	r23
   103c0:	c9 f7       	brne	.-14     	; 0x103b4 <__udivmodqi4_loop>
   103c2:	80 95       	com	r24
   103c4:	08 95       	ret

000103c6 <__udivmodhi4>:
   103c6:	aa 1b       	sub	r26, r26
   103c8:	bb 1b       	sub	r27, r27
   103ca:	51 e1       	ldi	r21, 0x11	; 17
   103cc:	07 c0       	rjmp	.+14     	; 0x103dc <__udivmodhi4_ep>

000103ce <__udivmodhi4_loop>:
   103ce:	aa 1f       	adc	r26, r26
   103d0:	bb 1f       	adc	r27, r27
   103d2:	a6 17       	cp	r26, r22
   103d4:	b7 07       	cpc	r27, r23
   103d6:	10 f0       	brcs	.+4      	; 0x103dc <__udivmodhi4_ep>
   103d8:	a6 1b       	sub	r26, r22
   103da:	b7 0b       	sbc	r27, r23

000103dc <__udivmodhi4_ep>:
   103dc:	88 1f       	adc	r24, r24
   103de:	99 1f       	adc	r25, r25
   103e0:	5a 95       	dec	r21
   103e2:	a9 f7       	brne	.-22     	; 0x103ce <__udivmodhi4_loop>
   103e4:	80 95       	com	r24
   103e6:	90 95       	com	r25
   103e8:	bc 01       	movw	r22, r24
   103ea:	cd 01       	movw	r24, r26
   103ec:	08 95       	ret

000103ee <__divmodhi4>:
   103ee:	97 fb       	bst	r25, 7
   103f0:	09 2e       	mov	r0, r25
   103f2:	07 26       	eor	r0, r23
   103f4:	0a d0       	rcall	.+20     	; 0x1040a <__divmodhi4_neg1>
   103f6:	77 fd       	sbrc	r23, 7
   103f8:	04 d0       	rcall	.+8      	; 0x10402 <__divmodhi4_neg2>
   103fa:	e5 df       	rcall	.-54     	; 0x103c6 <__udivmodhi4>
   103fc:	06 d0       	rcall	.+12     	; 0x1040a <__divmodhi4_neg1>
   103fe:	00 20       	and	r0, r0
   10400:	1a f4       	brpl	.+6      	; 0x10408 <__divmodhi4_exit>

00010402 <__divmodhi4_neg2>:
   10402:	70 95       	com	r23
   10404:	61 95       	neg	r22
   10406:	7f 4f       	sbci	r23, 0xFF	; 255

00010408 <__divmodhi4_exit>:
   10408:	08 95       	ret

0001040a <__divmodhi4_neg1>:
   1040a:	f6 f7       	brtc	.-4      	; 0x10408 <__divmodhi4_exit>
   1040c:	90 95       	com	r25
   1040e:	81 95       	neg	r24
   10410:	9f 4f       	sbci	r25, 0xFF	; 255
   10412:	08 95       	ret

00010414 <__udivmodsi4>:
   10414:	a1 e2       	ldi	r26, 0x21	; 33
   10416:	1a 2e       	mov	r1, r26
   10418:	aa 1b       	sub	r26, r26
   1041a:	bb 1b       	sub	r27, r27
   1041c:	fd 01       	movw	r30, r26
   1041e:	0d c0       	rjmp	.+26     	; 0x1043a <__udivmodsi4_ep>

00010420 <__udivmodsi4_loop>:
   10420:	aa 1f       	adc	r26, r26
   10422:	bb 1f       	adc	r27, r27
   10424:	ee 1f       	adc	r30, r30
   10426:	ff 1f       	adc	r31, r31
   10428:	a2 17       	cp	r26, r18
   1042a:	b3 07       	cpc	r27, r19
   1042c:	e4 07       	cpc	r30, r20
   1042e:	f5 07       	cpc	r31, r21
   10430:	20 f0       	brcs	.+8      	; 0x1043a <__udivmodsi4_ep>
   10432:	a2 1b       	sub	r26, r18
   10434:	b3 0b       	sbc	r27, r19
   10436:	e4 0b       	sbc	r30, r20
   10438:	f5 0b       	sbc	r31, r21

0001043a <__udivmodsi4_ep>:
   1043a:	66 1f       	adc	r22, r22
   1043c:	77 1f       	adc	r23, r23
   1043e:	88 1f       	adc	r24, r24
   10440:	99 1f       	adc	r25, r25
   10442:	1a 94       	dec	r1
   10444:	69 f7       	brne	.-38     	; 0x10420 <__udivmodsi4_loop>
   10446:	60 95       	com	r22
   10448:	70 95       	com	r23
   1044a:	80 95       	com	r24
   1044c:	90 95       	com	r25
   1044e:	9b 01       	movw	r18, r22
   10450:	ac 01       	movw	r20, r24
   10452:	bd 01       	movw	r22, r26
   10454:	cf 01       	movw	r24, r30
   10456:	08 95       	ret

00010458 <__divmodsi4>:
   10458:	97 fb       	bst	r25, 7
   1045a:	09 2e       	mov	r0, r25
   1045c:	05 26       	eor	r0, r21
   1045e:	0e d0       	rcall	.+28     	; 0x1047c <__divmodsi4_neg1>
   10460:	57 fd       	sbrc	r21, 7
   10462:	04 d0       	rcall	.+8      	; 0x1046c <__divmodsi4_neg2>
   10464:	d7 df       	rcall	.-82     	; 0x10414 <__udivmodsi4>
   10466:	0a d0       	rcall	.+20     	; 0x1047c <__divmodsi4_neg1>
   10468:	00 1c       	adc	r0, r0
   1046a:	38 f4       	brcc	.+14     	; 0x1047a <__divmodsi4_exit>

0001046c <__divmodsi4_neg2>:
   1046c:	50 95       	com	r21
   1046e:	40 95       	com	r20
   10470:	30 95       	com	r19
   10472:	21 95       	neg	r18
   10474:	3f 4f       	sbci	r19, 0xFF	; 255
   10476:	4f 4f       	sbci	r20, 0xFF	; 255
   10478:	5f 4f       	sbci	r21, 0xFF	; 255

0001047a <__divmodsi4_exit>:
   1047a:	08 95       	ret

0001047c <__divmodsi4_neg1>:
   1047c:	f6 f7       	brtc	.-4      	; 0x1047a <__divmodsi4_exit>
   1047e:	90 95       	com	r25
   10480:	80 95       	com	r24
   10482:	70 95       	com	r23
   10484:	61 95       	neg	r22
   10486:	7f 4f       	sbci	r23, 0xFF	; 255
   10488:	8f 4f       	sbci	r24, 0xFF	; 255
   1048a:	9f 4f       	sbci	r25, 0xFF	; 255
   1048c:	08 95       	ret

0001048e <__prologue_saves__>:
   1048e:	2f 92       	push	r2
   10490:	3f 92       	push	r3
   10492:	4f 92       	push	r4
   10494:	5f 92       	push	r5
   10496:	6f 92       	push	r6
   10498:	7f 92       	push	r7
   1049a:	8f 92       	push	r8
   1049c:	9f 92       	push	r9
   1049e:	af 92       	push	r10
   104a0:	bf 92       	push	r11
   104a2:	cf 92       	push	r12
   104a4:	df 92       	push	r13
   104a6:	ef 92       	push	r14
   104a8:	ff 92       	push	r15
   104aa:	0f 93       	push	r16
   104ac:	1f 93       	push	r17
   104ae:	cf 93       	push	r28
   104b0:	df 93       	push	r29
   104b2:	cd b7       	in	r28, 0x3d	; 61
   104b4:	de b7       	in	r29, 0x3e	; 62
   104b6:	ca 1b       	sub	r28, r26
   104b8:	db 0b       	sbc	r29, r27
   104ba:	0f b6       	in	r0, 0x3f	; 63
   104bc:	f8 94       	cli
   104be:	de bf       	out	0x3e, r29	; 62
   104c0:	0f be       	out	0x3f, r0	; 63
   104c2:	cd bf       	out	0x3d, r28	; 61
   104c4:	09 94       	ijmp

000104c6 <__epilogue_restores__>:
   104c6:	2a 88       	ldd	r2, Y+18	; 0x12
   104c8:	39 88       	ldd	r3, Y+17	; 0x11
   104ca:	48 88       	ldd	r4, Y+16	; 0x10
   104cc:	5f 84       	ldd	r5, Y+15	; 0x0f
   104ce:	6e 84       	ldd	r6, Y+14	; 0x0e
   104d0:	7d 84       	ldd	r7, Y+13	; 0x0d
   104d2:	8c 84       	ldd	r8, Y+12	; 0x0c
   104d4:	9b 84       	ldd	r9, Y+11	; 0x0b
   104d6:	aa 84       	ldd	r10, Y+10	; 0x0a
   104d8:	b9 84       	ldd	r11, Y+9	; 0x09
   104da:	c8 84       	ldd	r12, Y+8	; 0x08
   104dc:	df 80       	ldd	r13, Y+7	; 0x07
   104de:	ee 80       	ldd	r14, Y+6	; 0x06
   104e0:	fd 80       	ldd	r15, Y+5	; 0x05
   104e2:	0c 81       	ldd	r16, Y+4	; 0x04
   104e4:	1b 81       	ldd	r17, Y+3	; 0x03
   104e6:	aa 81       	ldd	r26, Y+2	; 0x02
   104e8:	b9 81       	ldd	r27, Y+1	; 0x01
   104ea:	ce 0f       	add	r28, r30
   104ec:	d1 1d       	adc	r29, r1
   104ee:	0f b6       	in	r0, 0x3f	; 63
   104f0:	f8 94       	cli
   104f2:	de bf       	out	0x3e, r29	; 62
   104f4:	0f be       	out	0x3f, r0	; 63
   104f6:	cd bf       	out	0x3d, r28	; 61
   104f8:	ed 01       	movw	r28, r26
   104fa:	08 95       	ret

000104fc <__tablejump2__>:
   104fc:	ee 0f       	add	r30, r30
   104fe:	ff 1f       	adc	r31, r31

00010500 <__tablejump__>:
   10500:	05 90       	lpm	r0, Z+
   10502:	f4 91       	lpm	r31, Z+
   10504:	e0 2d       	mov	r30, r0
   10506:	09 94       	ijmp

00010508 <malloc>:
   10508:	cf 93       	push	r28
   1050a:	df 93       	push	r29
   1050c:	bc 01       	movw	r22, r24
   1050e:	82 30       	cpi	r24, 0x02	; 2
   10510:	91 05       	cpc	r25, r1
   10512:	10 f4       	brcc	.+4      	; 0x10518 <malloc+0x10>
   10514:	62 e0       	ldi	r22, 0x02	; 2
   10516:	70 e0       	ldi	r23, 0x00	; 0
   10518:	a0 91 7d 07 	lds	r26, 0x077D
   1051c:	b0 91 7e 07 	lds	r27, 0x077E
   10520:	ed 01       	movw	r28, r26
   10522:	e0 e0       	ldi	r30, 0x00	; 0
   10524:	f0 e0       	ldi	r31, 0x00	; 0
   10526:	40 e0       	ldi	r20, 0x00	; 0
   10528:	50 e0       	ldi	r21, 0x00	; 0
   1052a:	21 c0       	rjmp	.+66     	; 0x1056e <malloc+0x66>
   1052c:	88 81       	ld	r24, Y
   1052e:	99 81       	ldd	r25, Y+1	; 0x01
   10530:	86 17       	cp	r24, r22
   10532:	97 07       	cpc	r25, r23
   10534:	69 f4       	brne	.+26     	; 0x10550 <malloc+0x48>
   10536:	8a 81       	ldd	r24, Y+2	; 0x02
   10538:	9b 81       	ldd	r25, Y+3	; 0x03
   1053a:	30 97       	sbiw	r30, 0x00	; 0
   1053c:	19 f0       	breq	.+6      	; 0x10544 <malloc+0x3c>
   1053e:	93 83       	std	Z+3, r25	; 0x03
   10540:	82 83       	std	Z+2, r24	; 0x02
   10542:	04 c0       	rjmp	.+8      	; 0x1054c <malloc+0x44>
   10544:	90 93 7e 07 	sts	0x077E, r25
   10548:	80 93 7d 07 	sts	0x077D, r24
   1054c:	fe 01       	movw	r30, r28
   1054e:	34 c0       	rjmp	.+104    	; 0x105b8 <malloc+0xb0>
   10550:	68 17       	cp	r22, r24
   10552:	79 07       	cpc	r23, r25
   10554:	38 f4       	brcc	.+14     	; 0x10564 <malloc+0x5c>
   10556:	41 15       	cp	r20, r1
   10558:	51 05       	cpc	r21, r1
   1055a:	19 f0       	breq	.+6      	; 0x10562 <malloc+0x5a>
   1055c:	84 17       	cp	r24, r20
   1055e:	95 07       	cpc	r25, r21
   10560:	08 f4       	brcc	.+2      	; 0x10564 <malloc+0x5c>
   10562:	ac 01       	movw	r20, r24
   10564:	fe 01       	movw	r30, r28
   10566:	8a 81       	ldd	r24, Y+2	; 0x02
   10568:	9b 81       	ldd	r25, Y+3	; 0x03
   1056a:	9c 01       	movw	r18, r24
   1056c:	e9 01       	movw	r28, r18
   1056e:	20 97       	sbiw	r28, 0x00	; 0
   10570:	e9 f6       	brne	.-70     	; 0x1052c <malloc+0x24>
   10572:	41 15       	cp	r20, r1
   10574:	51 05       	cpc	r21, r1
   10576:	a9 f1       	breq	.+106    	; 0x105e2 <malloc+0xda>
   10578:	ca 01       	movw	r24, r20
   1057a:	86 1b       	sub	r24, r22
   1057c:	97 0b       	sbc	r25, r23
   1057e:	04 97       	sbiw	r24, 0x04	; 4
   10580:	08 f4       	brcc	.+2      	; 0x10584 <malloc+0x7c>
   10582:	ba 01       	movw	r22, r20
   10584:	e0 e0       	ldi	r30, 0x00	; 0
   10586:	f0 e0       	ldi	r31, 0x00	; 0
   10588:	2a c0       	rjmp	.+84     	; 0x105de <malloc+0xd6>
   1058a:	8d 91       	ld	r24, X+
   1058c:	9c 91       	ld	r25, X
   1058e:	11 97       	sbiw	r26, 0x01	; 1
   10590:	84 17       	cp	r24, r20
   10592:	95 07       	cpc	r25, r21
   10594:	f9 f4       	brne	.+62     	; 0x105d4 <malloc+0xcc>
   10596:	64 17       	cp	r22, r20
   10598:	75 07       	cpc	r23, r21
   1059a:	81 f4       	brne	.+32     	; 0x105bc <malloc+0xb4>
   1059c:	12 96       	adiw	r26, 0x02	; 2
   1059e:	8d 91       	ld	r24, X+
   105a0:	9c 91       	ld	r25, X
   105a2:	13 97       	sbiw	r26, 0x03	; 3
   105a4:	30 97       	sbiw	r30, 0x00	; 0
   105a6:	19 f0       	breq	.+6      	; 0x105ae <malloc+0xa6>
   105a8:	93 83       	std	Z+3, r25	; 0x03
   105aa:	82 83       	std	Z+2, r24	; 0x02
   105ac:	04 c0       	rjmp	.+8      	; 0x105b6 <malloc+0xae>
   105ae:	90 93 7e 07 	sts	0x077E, r25
   105b2:	80 93 7d 07 	sts	0x077D, r24
   105b6:	fd 01       	movw	r30, r26
   105b8:	32 96       	adiw	r30, 0x02	; 2
   105ba:	4f c0       	rjmp	.+158    	; 0x1065a <malloc+0x152>
   105bc:	ca 01       	movw	r24, r20
   105be:	86 1b       	sub	r24, r22
   105c0:	97 0b       	sbc	r25, r23
   105c2:	fd 01       	movw	r30, r26
   105c4:	e8 0f       	add	r30, r24
   105c6:	f9 1f       	adc	r31, r25
   105c8:	61 93       	st	Z+, r22
   105ca:	71 93       	st	Z+, r23
   105cc:	02 97       	sbiw	r24, 0x02	; 2
   105ce:	8d 93       	st	X+, r24
   105d0:	9c 93       	st	X, r25
   105d2:	43 c0       	rjmp	.+134    	; 0x1065a <malloc+0x152>
   105d4:	fd 01       	movw	r30, r26
   105d6:	82 81       	ldd	r24, Z+2	; 0x02
   105d8:	93 81       	ldd	r25, Z+3	; 0x03
   105da:	9c 01       	movw	r18, r24
   105dc:	d9 01       	movw	r26, r18
   105de:	10 97       	sbiw	r26, 0x00	; 0
   105e0:	a1 f6       	brne	.-88     	; 0x1058a <malloc+0x82>
   105e2:	80 91 7b 07 	lds	r24, 0x077B
   105e6:	90 91 7c 07 	lds	r25, 0x077C
   105ea:	89 2b       	or	r24, r25
   105ec:	41 f4       	brne	.+16     	; 0x105fe <malloc+0xf6>
   105ee:	80 91 38 03 	lds	r24, 0x0338
   105f2:	90 91 39 03 	lds	r25, 0x0339
   105f6:	90 93 7c 07 	sts	0x077C, r25
   105fa:	80 93 7b 07 	sts	0x077B, r24
   105fe:	40 91 3a 03 	lds	r20, 0x033A
   10602:	50 91 3b 03 	lds	r21, 0x033B
   10606:	41 15       	cp	r20, r1
   10608:	51 05       	cpc	r21, r1
   1060a:	41 f4       	brne	.+16     	; 0x1061c <malloc+0x114>
   1060c:	4d b7       	in	r20, 0x3d	; 61
   1060e:	5e b7       	in	r21, 0x3e	; 62
   10610:	80 91 36 03 	lds	r24, 0x0336
   10614:	90 91 37 03 	lds	r25, 0x0337
   10618:	48 1b       	sub	r20, r24
   1061a:	59 0b       	sbc	r21, r25
   1061c:	20 91 7b 07 	lds	r18, 0x077B
   10620:	30 91 7c 07 	lds	r19, 0x077C
   10624:	24 17       	cp	r18, r20
   10626:	35 07       	cpc	r19, r21
   10628:	b0 f4       	brcc	.+44     	; 0x10656 <malloc+0x14e>
   1062a:	ca 01       	movw	r24, r20
   1062c:	82 1b       	sub	r24, r18
   1062e:	93 0b       	sbc	r25, r19
   10630:	86 17       	cp	r24, r22
   10632:	97 07       	cpc	r25, r23
   10634:	80 f0       	brcs	.+32     	; 0x10656 <malloc+0x14e>
   10636:	ab 01       	movw	r20, r22
   10638:	4e 5f       	subi	r20, 0xFE	; 254
   1063a:	5f 4f       	sbci	r21, 0xFF	; 255
   1063c:	84 17       	cp	r24, r20
   1063e:	95 07       	cpc	r25, r21
   10640:	50 f0       	brcs	.+20     	; 0x10656 <malloc+0x14e>
   10642:	42 0f       	add	r20, r18
   10644:	53 1f       	adc	r21, r19
   10646:	50 93 7c 07 	sts	0x077C, r21
   1064a:	40 93 7b 07 	sts	0x077B, r20
   1064e:	f9 01       	movw	r30, r18
   10650:	61 93       	st	Z+, r22
   10652:	71 93       	st	Z+, r23
   10654:	02 c0       	rjmp	.+4      	; 0x1065a <malloc+0x152>
   10656:	e0 e0       	ldi	r30, 0x00	; 0
   10658:	f0 e0       	ldi	r31, 0x00	; 0
   1065a:	cf 01       	movw	r24, r30
   1065c:	df 91       	pop	r29
   1065e:	cf 91       	pop	r28
   10660:	08 95       	ret

00010662 <free>:
   10662:	cf 93       	push	r28
   10664:	df 93       	push	r29
   10666:	00 97       	sbiw	r24, 0x00	; 0
   10668:	09 f4       	brne	.+2      	; 0x1066c <free+0xa>
   1066a:	50 c0       	rjmp	.+160    	; 0x1070c <free+0xaa>
   1066c:	ec 01       	movw	r28, r24
   1066e:	22 97       	sbiw	r28, 0x02	; 2
   10670:	1b 82       	std	Y+3, r1	; 0x03
   10672:	1a 82       	std	Y+2, r1	; 0x02
   10674:	a0 91 7d 07 	lds	r26, 0x077D
   10678:	b0 91 7e 07 	lds	r27, 0x077E
   1067c:	10 97       	sbiw	r26, 0x00	; 0
   1067e:	09 f1       	breq	.+66     	; 0x106c2 <free+0x60>
   10680:	40 e0       	ldi	r20, 0x00	; 0
   10682:	50 e0       	ldi	r21, 0x00	; 0
   10684:	ac 17       	cp	r26, r28
   10686:	bd 07       	cpc	r27, r29
   10688:	08 f1       	brcs	.+66     	; 0x106cc <free+0x6a>
   1068a:	bb 83       	std	Y+3, r27	; 0x03
   1068c:	aa 83       	std	Y+2, r26	; 0x02
   1068e:	fe 01       	movw	r30, r28
   10690:	21 91       	ld	r18, Z+
   10692:	31 91       	ld	r19, Z+
   10694:	e2 0f       	add	r30, r18
   10696:	f3 1f       	adc	r31, r19
   10698:	ae 17       	cp	r26, r30
   1069a:	bf 07       	cpc	r27, r31
   1069c:	79 f4       	brne	.+30     	; 0x106bc <free+0x5a>
   1069e:	8d 91       	ld	r24, X+
   106a0:	9c 91       	ld	r25, X
   106a2:	11 97       	sbiw	r26, 0x01	; 1
   106a4:	28 0f       	add	r18, r24
   106a6:	39 1f       	adc	r19, r25
   106a8:	2e 5f       	subi	r18, 0xFE	; 254
   106aa:	3f 4f       	sbci	r19, 0xFF	; 255
   106ac:	39 83       	std	Y+1, r19	; 0x01
   106ae:	28 83       	st	Y, r18
   106b0:	12 96       	adiw	r26, 0x02	; 2
   106b2:	8d 91       	ld	r24, X+
   106b4:	9c 91       	ld	r25, X
   106b6:	13 97       	sbiw	r26, 0x03	; 3
   106b8:	9b 83       	std	Y+3, r25	; 0x03
   106ba:	8a 83       	std	Y+2, r24	; 0x02
   106bc:	41 15       	cp	r20, r1
   106be:	51 05       	cpc	r21, r1
   106c0:	71 f4       	brne	.+28     	; 0x106de <free+0x7c>
   106c2:	d0 93 7e 07 	sts	0x077E, r29
   106c6:	c0 93 7d 07 	sts	0x077D, r28
   106ca:	20 c0       	rjmp	.+64     	; 0x1070c <free+0xaa>
   106cc:	12 96       	adiw	r26, 0x02	; 2
   106ce:	8d 91       	ld	r24, X+
   106d0:	9c 91       	ld	r25, X
   106d2:	13 97       	sbiw	r26, 0x03	; 3
   106d4:	ad 01       	movw	r20, r26
   106d6:	00 97       	sbiw	r24, 0x00	; 0
   106d8:	11 f0       	breq	.+4      	; 0x106de <free+0x7c>
   106da:	dc 01       	movw	r26, r24
   106dc:	d3 cf       	rjmp	.-90     	; 0x10684 <free+0x22>
   106de:	fa 01       	movw	r30, r20
   106e0:	d3 83       	std	Z+3, r29	; 0x03
   106e2:	c2 83       	std	Z+2, r28	; 0x02
   106e4:	21 91       	ld	r18, Z+
   106e6:	31 91       	ld	r19, Z+
   106e8:	e2 0f       	add	r30, r18
   106ea:	f3 1f       	adc	r31, r19
   106ec:	ce 17       	cp	r28, r30
   106ee:	df 07       	cpc	r29, r31
   106f0:	69 f4       	brne	.+26     	; 0x1070c <free+0xaa>
   106f2:	88 81       	ld	r24, Y
   106f4:	99 81       	ldd	r25, Y+1	; 0x01
   106f6:	28 0f       	add	r18, r24
   106f8:	39 1f       	adc	r19, r25
   106fa:	2e 5f       	subi	r18, 0xFE	; 254
   106fc:	3f 4f       	sbci	r19, 0xFF	; 255
   106fe:	fa 01       	movw	r30, r20
   10700:	31 83       	std	Z+1, r19	; 0x01
   10702:	20 83       	st	Z, r18
   10704:	8a 81       	ldd	r24, Y+2	; 0x02
   10706:	9b 81       	ldd	r25, Y+3	; 0x03
   10708:	93 83       	std	Z+3, r25	; 0x03
   1070a:	82 83       	std	Z+2, r24	; 0x02
   1070c:	df 91       	pop	r29
   1070e:	cf 91       	pop	r28
   10710:	08 95       	ret

00010712 <do_random>:
   10712:	a0 e0       	ldi	r26, 0x00	; 0
   10714:	b0 e0       	ldi	r27, 0x00	; 0
   10716:	ef e8       	ldi	r30, 0x8F	; 143
   10718:	f3 e8       	ldi	r31, 0x83	; 131
   1071a:	0c 94 4f 82 	jmp	0x1049e	; 0x1049e <__prologue_saves__+0x10>
   1071e:	ec 01       	movw	r28, r24
   10720:	a8 80       	ld	r10, Y
   10722:	b9 80       	ldd	r11, Y+1	; 0x01
   10724:	ca 80       	ldd	r12, Y+2	; 0x02
   10726:	db 80       	ldd	r13, Y+3	; 0x03
   10728:	a1 14       	cp	r10, r1
   1072a:	b1 04       	cpc	r11, r1
   1072c:	c1 04       	cpc	r12, r1
   1072e:	d1 04       	cpc	r13, r1
   10730:	41 f4       	brne	.+16     	; 0x10742 <do_random+0x30>
   10732:	84 e2       	ldi	r24, 0x24	; 36
   10734:	a8 2e       	mov	r10, r24
   10736:	89 ed       	ldi	r24, 0xD9	; 217
   10738:	b8 2e       	mov	r11, r24
   1073a:	8b e5       	ldi	r24, 0x5B	; 91
   1073c:	c8 2e       	mov	r12, r24
   1073e:	87 e0       	ldi	r24, 0x07	; 7
   10740:	d8 2e       	mov	r13, r24
   10742:	c6 01       	movw	r24, r12
   10744:	b5 01       	movw	r22, r10
   10746:	2d e1       	ldi	r18, 0x1D	; 29
   10748:	33 ef       	ldi	r19, 0xF3	; 243
   1074a:	41 e0       	ldi	r20, 0x01	; 1
   1074c:	50 e0       	ldi	r21, 0x00	; 0
   1074e:	0e 94 2c 82 	call	0x10458	; 0x10458 <__divmodsi4>
   10752:	27 ea       	ldi	r18, 0xA7	; 167
   10754:	31 e4       	ldi	r19, 0x41	; 65
   10756:	40 e0       	ldi	r20, 0x00	; 0
   10758:	50 e0       	ldi	r21, 0x00	; 0
   1075a:	0e 94 b8 81 	call	0x10370	; 0x10370 <__mulsi3>
   1075e:	7b 01       	movw	r14, r22
   10760:	8c 01       	movw	r16, r24
   10762:	c6 01       	movw	r24, r12
   10764:	b5 01       	movw	r22, r10
   10766:	2d e1       	ldi	r18, 0x1D	; 29
   10768:	33 ef       	ldi	r19, 0xF3	; 243
   1076a:	41 e0       	ldi	r20, 0x01	; 1
   1076c:	50 e0       	ldi	r21, 0x00	; 0
   1076e:	0e 94 2c 82 	call	0x10458	; 0x10458 <__divmodsi4>
   10772:	ca 01       	movw	r24, r20
   10774:	b9 01       	movw	r22, r18
   10776:	2c ee       	ldi	r18, 0xEC	; 236
   10778:	34 ef       	ldi	r19, 0xF4	; 244
   1077a:	4f ef       	ldi	r20, 0xFF	; 255
   1077c:	5f ef       	ldi	r21, 0xFF	; 255
   1077e:	0e 94 b8 81 	call	0x10370	; 0x10370 <__mulsi3>
   10782:	6e 0d       	add	r22, r14
   10784:	7f 1d       	adc	r23, r15
   10786:	80 1f       	adc	r24, r16
   10788:	91 1f       	adc	r25, r17
   1078a:	97 ff       	sbrs	r25, 7
   1078c:	04 c0       	rjmp	.+8      	; 0x10796 <do_random+0x84>
   1078e:	61 50       	subi	r22, 0x01	; 1
   10790:	70 40       	sbci	r23, 0x00	; 0
   10792:	80 40       	sbci	r24, 0x00	; 0
   10794:	90 48       	sbci	r25, 0x80	; 128
   10796:	68 83       	st	Y, r22
   10798:	79 83       	std	Y+1, r23	; 0x01
   1079a:	8a 83       	std	Y+2, r24	; 0x02
   1079c:	9b 83       	std	Y+3, r25	; 0x03
   1079e:	9b 01       	movw	r18, r22
   107a0:	ac 01       	movw	r20, r24
   107a2:	5f 77       	andi	r21, 0x7F	; 127
   107a4:	b9 01       	movw	r22, r18
   107a6:	ca 01       	movw	r24, r20
   107a8:	cd b7       	in	r28, 0x3d	; 61
   107aa:	de b7       	in	r29, 0x3e	; 62
   107ac:	ea e0       	ldi	r30, 0x0A	; 10
   107ae:	0c 94 6b 82 	jmp	0x104d6	; 0x104d6 <__epilogue_restores__+0x10>

000107b2 <random_r>:
   107b2:	0e 94 89 83 	call	0x10712	; 0x10712 <do_random>
   107b6:	08 95       	ret

000107b8 <random>:
   107b8:	8c e3       	ldi	r24, 0x3C	; 60
   107ba:	93 e0       	ldi	r25, 0x03	; 3
   107bc:	0e 94 89 83 	call	0x10712	; 0x10712 <do_random>
   107c0:	08 95       	ret

000107c2 <srandom>:
   107c2:	60 93 3c 03 	sts	0x033C, r22
   107c6:	70 93 3d 03 	sts	0x033D, r23
   107ca:	80 93 3e 03 	sts	0x033E, r24
   107ce:	90 93 3f 03 	sts	0x033F, r25
   107d2:	08 95       	ret

000107d4 <realloc>:
   107d4:	a0 e0       	ldi	r26, 0x00	; 0
   107d6:	b0 e0       	ldi	r27, 0x00	; 0
   107d8:	e0 ef       	ldi	r30, 0xF0	; 240
   107da:	f3 e8       	ldi	r31, 0x83	; 131
   107dc:	0c 94 4d 82 	jmp	0x1049a	; 0x1049a <__prologue_saves__+0xc>
   107e0:	8c 01       	movw	r16, r24
   107e2:	00 97       	sbiw	r24, 0x00	; 0
   107e4:	29 f4       	brne	.+10     	; 0x107f0 <realloc+0x1c>
   107e6:	cb 01       	movw	r24, r22
   107e8:	0e 94 84 82 	call	0x10508	; 0x10508 <malloc>
   107ec:	8c 01       	movw	r16, r24
   107ee:	ba c0       	rjmp	.+372    	; 0x10964 <realloc+0x190>
   107f0:	9e ef       	ldi	r25, 0xFE	; 254
   107f2:	e9 2e       	mov	r14, r25
   107f4:	9f ef       	ldi	r25, 0xFF	; 255
   107f6:	f9 2e       	mov	r15, r25
   107f8:	e0 0e       	add	r14, r16
   107fa:	f1 1e       	adc	r15, r17
   107fc:	58 01       	movw	r10, r16
   107fe:	a6 0e       	add	r10, r22
   10800:	b7 1e       	adc	r11, r23
   10802:	ae 14       	cp	r10, r14
   10804:	bf 04       	cpc	r11, r15
   10806:	08 f4       	brcc	.+2      	; 0x1080a <realloc+0x36>
   10808:	ab c0       	rjmp	.+342    	; 0x10960 <realloc+0x18c>
   1080a:	8e ef       	ldi	r24, 0xFE	; 254
   1080c:	88 2e       	mov	r8, r24
   1080e:	8f ef       	ldi	r24, 0xFF	; 255
   10810:	98 2e       	mov	r9, r24
   10812:	8a 0c       	add	r8, r10
   10814:	9b 1c       	adc	r9, r11
   10816:	e7 01       	movw	r28, r14
   10818:	48 81       	ld	r20, Y
   1081a:	59 81       	ldd	r21, Y+1	; 0x01
   1081c:	46 17       	cp	r20, r22
   1081e:	57 07       	cpc	r21, r23
   10820:	b8 f0       	brcs	.+46     	; 0x10850 <realloc+0x7c>
   10822:	45 30       	cpi	r20, 0x05	; 5
   10824:	51 05       	cpc	r21, r1
   10826:	08 f4       	brcc	.+2      	; 0x1082a <realloc+0x56>
   10828:	9d c0       	rjmp	.+314    	; 0x10964 <realloc+0x190>
   1082a:	ca 01       	movw	r24, r20
   1082c:	04 97       	sbiw	r24, 0x04	; 4
   1082e:	86 17       	cp	r24, r22
   10830:	97 07       	cpc	r25, r23
   10832:	08 f4       	brcc	.+2      	; 0x10836 <realloc+0x62>
   10834:	97 c0       	rjmp	.+302    	; 0x10964 <realloc+0x190>
   10836:	42 50       	subi	r20, 0x02	; 2
   10838:	50 40       	sbci	r21, 0x00	; 0
   1083a:	46 1b       	sub	r20, r22
   1083c:	57 0b       	sbc	r21, r23
   1083e:	f4 01       	movw	r30, r8
   10840:	51 83       	std	Z+1, r21	; 0x01
   10842:	40 83       	st	Z, r20
   10844:	79 83       	std	Y+1, r23	; 0x01
   10846:	68 83       	st	Y, r22
   10848:	c5 01       	movw	r24, r10
   1084a:	0e 94 31 83 	call	0x10662	; 0x10662 <free>
   1084e:	8a c0       	rjmp	.+276    	; 0x10964 <realloc+0x190>
   10850:	6b 01       	movw	r12, r22
   10852:	c4 1a       	sub	r12, r20
   10854:	d5 0a       	sbc	r13, r21
   10856:	e0 91 7d 07 	lds	r30, 0x077D
   1085a:	f0 91 7e 07 	lds	r31, 0x077E
   1085e:	a0 e0       	ldi	r26, 0x00	; 0
   10860:	b0 e0       	ldi	r27, 0x00	; 0
   10862:	c0 e0       	ldi	r28, 0x00	; 0
   10864:	d0 e0       	ldi	r29, 0x00	; 0
   10866:	42 c0       	rjmp	.+132    	; 0x108ec <realloc+0x118>
   10868:	e8 15       	cp	r30, r8
   1086a:	f9 05       	cpc	r31, r9
   1086c:	a1 f5       	brne	.+104    	; 0x108d6 <realloc+0x102>
   1086e:	20 81       	ld	r18, Z
   10870:	31 81       	ldd	r19, Z+1	; 0x01
   10872:	2c 15       	cp	r18, r12
   10874:	3d 05       	cpc	r19, r13
   10876:	78 f1       	brcs	.+94     	; 0x108d6 <realloc+0x102>
   10878:	c9 01       	movw	r24, r18
   1087a:	02 96       	adiw	r24, 0x02	; 2
   1087c:	8c 15       	cp	r24, r12
   1087e:	9d 05       	cpc	r25, r13
   10880:	a8 f0       	brcs	.+42     	; 0x108ac <realloc+0xd8>
   10882:	4e 5f       	subi	r20, 0xFE	; 254
   10884:	5f 4f       	sbci	r21, 0xFF	; 255
   10886:	42 0f       	add	r20, r18
   10888:	53 1f       	adc	r21, r19
   1088a:	e7 01       	movw	r28, r14
   1088c:	59 83       	std	Y+1, r21	; 0x01
   1088e:	48 83       	st	Y, r20
   10890:	22 81       	ldd	r18, Z+2	; 0x02
   10892:	33 81       	ldd	r19, Z+3	; 0x03
   10894:	10 97       	sbiw	r26, 0x00	; 0
   10896:	29 f0       	breq	.+10     	; 0x108a2 <realloc+0xce>
   10898:	13 96       	adiw	r26, 0x03	; 3
   1089a:	3c 93       	st	X, r19
   1089c:	2e 93       	st	-X, r18
   1089e:	12 97       	sbiw	r26, 0x02	; 2
   108a0:	61 c0       	rjmp	.+194    	; 0x10964 <realloc+0x190>
   108a2:	30 93 7e 07 	sts	0x077E, r19
   108a6:	20 93 7d 07 	sts	0x077D, r18
   108aa:	5c c0       	rjmp	.+184    	; 0x10964 <realloc+0x190>
   108ac:	22 50       	subi	r18, 0x02	; 2
   108ae:	30 40       	sbci	r19, 0x00	; 0
   108b0:	2c 19       	sub	r18, r12
   108b2:	3d 09       	sbc	r19, r13
   108b4:	31 83       	std	Z+1, r19	; 0x01
   108b6:	20 83       	st	Z, r18
   108b8:	10 97       	sbiw	r26, 0x00	; 0
   108ba:	29 f0       	breq	.+10     	; 0x108c6 <realloc+0xf2>
   108bc:	13 96       	adiw	r26, 0x03	; 3
   108be:	fc 93       	st	X, r31
   108c0:	ee 93       	st	-X, r30
   108c2:	12 97       	sbiw	r26, 0x02	; 2
   108c4:	04 c0       	rjmp	.+8      	; 0x108ce <realloc+0xfa>
   108c6:	f0 93 7e 07 	sts	0x077E, r31
   108ca:	e0 93 7d 07 	sts	0x077D, r30
   108ce:	f7 01       	movw	r30, r14
   108d0:	71 83       	std	Z+1, r23	; 0x01
   108d2:	60 83       	st	Z, r22
   108d4:	47 c0       	rjmp	.+142    	; 0x10964 <realloc+0x190>
   108d6:	80 81       	ld	r24, Z
   108d8:	91 81       	ldd	r25, Z+1	; 0x01
   108da:	c8 17       	cp	r28, r24
   108dc:	d9 07       	cpc	r29, r25
   108de:	08 f4       	brcc	.+2      	; 0x108e2 <realloc+0x10e>
   108e0:	ec 01       	movw	r28, r24
   108e2:	df 01       	movw	r26, r30
   108e4:	82 81       	ldd	r24, Z+2	; 0x02
   108e6:	93 81       	ldd	r25, Z+3	; 0x03
   108e8:	9c 01       	movw	r18, r24
   108ea:	f9 01       	movw	r30, r18
   108ec:	30 97       	sbiw	r30, 0x00	; 0
   108ee:	09 f0       	breq	.+2      	; 0x108f2 <realloc+0x11e>
   108f0:	bb cf       	rjmp	.-138    	; 0x10868 <realloc+0x94>
   108f2:	40 0f       	add	r20, r16
   108f4:	51 1f       	adc	r21, r17
   108f6:	80 91 7b 07 	lds	r24, 0x077B
   108fa:	90 91 7c 07 	lds	r25, 0x077C
   108fe:	84 17       	cp	r24, r20
   10900:	95 07       	cpc	r25, r21
   10902:	e9 f4       	brne	.+58     	; 0x1093e <realloc+0x16a>
   10904:	c6 17       	cp	r28, r22
   10906:	d7 07       	cpc	r29, r23
   10908:	d0 f4       	brcc	.+52     	; 0x1093e <realloc+0x16a>
   1090a:	20 91 3a 03 	lds	r18, 0x033A
   1090e:	30 91 3b 03 	lds	r19, 0x033B
   10912:	21 15       	cp	r18, r1
   10914:	31 05       	cpc	r19, r1
   10916:	41 f4       	brne	.+16     	; 0x10928 <realloc+0x154>
   10918:	2d b7       	in	r18, 0x3d	; 61
   1091a:	3e b7       	in	r19, 0x3e	; 62
   1091c:	80 91 36 03 	lds	r24, 0x0336
   10920:	90 91 37 03 	lds	r25, 0x0337
   10924:	28 1b       	sub	r18, r24
   10926:	39 0b       	sbc	r19, r25
   10928:	a2 16       	cp	r10, r18
   1092a:	b3 06       	cpc	r11, r19
   1092c:	c8 f4       	brcc	.+50     	; 0x10960 <realloc+0x18c>
   1092e:	b0 92 7c 07 	sts	0x077C, r11
   10932:	a0 92 7b 07 	sts	0x077B, r10
   10936:	e7 01       	movw	r28, r14
   10938:	79 83       	std	Y+1, r23	; 0x01
   1093a:	68 83       	st	Y, r22
   1093c:	13 c0       	rjmp	.+38     	; 0x10964 <realloc+0x190>
   1093e:	cb 01       	movw	r24, r22
   10940:	0e 94 84 82 	call	0x10508	; 0x10508 <malloc>
   10944:	ec 01       	movw	r28, r24
   10946:	00 97       	sbiw	r24, 0x00	; 0
   10948:	59 f0       	breq	.+22     	; 0x10960 <realloc+0x18c>
   1094a:	f7 01       	movw	r30, r14
   1094c:	40 81       	ld	r20, Z
   1094e:	51 81       	ldd	r21, Z+1	; 0x01
   10950:	b8 01       	movw	r22, r16
   10952:	0e 94 04 85 	call	0x10a08	; 0x10a08 <memcpy>
   10956:	c8 01       	movw	r24, r16
   10958:	0e 94 31 83 	call	0x10662	; 0x10662 <free>
   1095c:	8e 01       	movw	r16, r28
   1095e:	02 c0       	rjmp	.+4      	; 0x10964 <realloc+0x190>
   10960:	00 e0       	ldi	r16, 0x00	; 0
   10962:	10 e0       	ldi	r17, 0x00	; 0
   10964:	c8 01       	movw	r24, r16
   10966:	cd b7       	in	r28, 0x3d	; 61
   10968:	de b7       	in	r29, 0x3e	; 62
   1096a:	ec e0       	ldi	r30, 0x0C	; 12
   1096c:	0c 94 69 82 	jmp	0x104d2	; 0x104d2 <__epilogue_restores__+0xc>

00010970 <atol>:
   10970:	1f 93       	push	r17
   10972:	fc 01       	movw	r30, r24
   10974:	99 27       	eor	r25, r25
   10976:	88 27       	eor	r24, r24
   10978:	bc 01       	movw	r22, r24
   1097a:	e8 94       	clt
   1097c:	11 91       	ld	r17, Z+
   1097e:	10 32       	cpi	r17, 0x20	; 32
   10980:	e9 f3       	breq	.-6      	; 0x1097c <atol+0xc>
   10982:	19 30       	cpi	r17, 0x09	; 9
   10984:	10 f0       	brcs	.+4      	; 0x1098a <atol+0x1a>
   10986:	1e 30       	cpi	r17, 0x0E	; 14
   10988:	c8 f3       	brcs	.-14     	; 0x1097c <atol+0xc>
   1098a:	1b 32       	cpi	r17, 0x2B	; 43
   1098c:	51 f0       	breq	.+20     	; 0x109a2 <atol+0x32>
   1098e:	1d 32       	cpi	r17, 0x2D	; 45
   10990:	49 f4       	brne	.+18     	; 0x109a4 <atol+0x34>
   10992:	68 94       	set
   10994:	06 c0       	rjmp	.+12     	; 0x109a2 <atol+0x32>
   10996:	0e 94 e1 85 	call	0x10bc2	; 0x10bc2 <__mulsi_const_10>
   1099a:	61 0f       	add	r22, r17
   1099c:	71 1d       	adc	r23, r1
   1099e:	81 1d       	adc	r24, r1
   109a0:	91 1d       	adc	r25, r1
   109a2:	11 91       	ld	r17, Z+
   109a4:	10 53       	subi	r17, 0x30	; 48
   109a6:	1a 30       	cpi	r17, 0x0A	; 10
   109a8:	b0 f3       	brcs	.-20     	; 0x10996 <atol+0x26>
   109aa:	3e f4       	brtc	.+14     	; 0x109ba <atol+0x4a>
   109ac:	90 95       	com	r25
   109ae:	80 95       	com	r24
   109b0:	70 95       	com	r23
   109b2:	61 95       	neg	r22
   109b4:	7f 4f       	sbci	r23, 0xFF	; 255
   109b6:	8f 4f       	sbci	r24, 0xFF	; 255
   109b8:	9f 4f       	sbci	r25, 0xFF	; 255
   109ba:	1f 91       	pop	r17
   109bc:	08 95       	ret

000109be <isspace>:
   109be:	91 11       	cpse	r25, r1
   109c0:	50 c1       	rjmp	.+672    	; 0x10c62 <__ctype_isfalse>
   109c2:	80 32       	cpi	r24, 0x20	; 32
   109c4:	19 f0       	breq	.+6      	; 0x109cc <isspace+0xe>
   109c6:	89 50       	subi	r24, 0x09	; 9
   109c8:	85 50       	subi	r24, 0x05	; 5
   109ca:	d0 f7       	brcc	.-12     	; 0x109c0 <isspace+0x2>
   109cc:	08 95       	ret

000109ce <tolower>:
   109ce:	91 11       	cpse	r25, r1
   109d0:	08 95       	ret
   109d2:	81 54       	subi	r24, 0x41	; 65
   109d4:	8a 51       	subi	r24, 0x1A	; 26
   109d6:	08 f4       	brcc	.+2      	; 0x109da <tolower+0xc>
   109d8:	80 5e       	subi	r24, 0xE0	; 224
   109da:	85 5a       	subi	r24, 0xA5	; 165
   109dc:	08 95       	ret

000109de <toupper>:
   109de:	91 11       	cpse	r25, r1
   109e0:	08 95       	ret
   109e2:	81 56       	subi	r24, 0x61	; 97
   109e4:	8a 51       	subi	r24, 0x1A	; 26
   109e6:	08 f4       	brcc	.+2      	; 0x109ea <toupper+0xc>
   109e8:	80 52       	subi	r24, 0x20	; 32
   109ea:	85 58       	subi	r24, 0x85	; 133
   109ec:	08 95       	ret

000109ee <memcmp>:
   109ee:	fb 01       	movw	r30, r22
   109f0:	dc 01       	movw	r26, r24
   109f2:	04 c0       	rjmp	.+8      	; 0x109fc <memcmp+0xe>
   109f4:	8d 91       	ld	r24, X+
   109f6:	01 90       	ld	r0, Z+
   109f8:	80 19       	sub	r24, r0
   109fa:	21 f4       	brne	.+8      	; 0x10a04 <memcmp+0x16>
   109fc:	41 50       	subi	r20, 0x01	; 1
   109fe:	50 40       	sbci	r21, 0x00	; 0
   10a00:	c8 f7       	brcc	.-14     	; 0x109f4 <memcmp+0x6>
   10a02:	88 1b       	sub	r24, r24
   10a04:	99 0b       	sbc	r25, r25
   10a06:	08 95       	ret

00010a08 <memcpy>:
   10a08:	fb 01       	movw	r30, r22
   10a0a:	dc 01       	movw	r26, r24
   10a0c:	02 c0       	rjmp	.+4      	; 0x10a12 <memcpy+0xa>
   10a0e:	01 90       	ld	r0, Z+
   10a10:	0d 92       	st	X+, r0
   10a12:	41 50       	subi	r20, 0x01	; 1
   10a14:	50 40       	sbci	r21, 0x00	; 0
   10a16:	d8 f7       	brcc	.-10     	; 0x10a0e <memcpy+0x6>
   10a18:	08 95       	ret

00010a1a <memmove>:
   10a1a:	68 17       	cp	r22, r24
   10a1c:	79 07       	cpc	r23, r25
   10a1e:	68 f4       	brcc	.+26     	; 0x10a3a <memmove+0x20>
   10a20:	fb 01       	movw	r30, r22
   10a22:	dc 01       	movw	r26, r24
   10a24:	e4 0f       	add	r30, r20
   10a26:	f5 1f       	adc	r31, r21
   10a28:	a4 0f       	add	r26, r20
   10a2a:	b5 1f       	adc	r27, r21
   10a2c:	02 c0       	rjmp	.+4      	; 0x10a32 <memmove+0x18>
   10a2e:	02 90       	ld	r0, -Z
   10a30:	0e 92       	st	-X, r0
   10a32:	41 50       	subi	r20, 0x01	; 1
   10a34:	50 40       	sbci	r21, 0x00	; 0
   10a36:	d8 f7       	brcc	.-10     	; 0x10a2e <memmove+0x14>
   10a38:	08 95       	ret
   10a3a:	0c 94 04 85 	jmp	0x10a08	; 0x10a08 <memcpy>

00010a3e <memset>:
   10a3e:	dc 01       	movw	r26, r24
   10a40:	01 c0       	rjmp	.+2      	; 0x10a44 <memset+0x6>
   10a42:	6d 93       	st	X+, r22
   10a44:	41 50       	subi	r20, 0x01	; 1
   10a46:	50 40       	sbci	r21, 0x00	; 0
   10a48:	e0 f7       	brcc	.-8      	; 0x10a42 <memset+0x4>
   10a4a:	08 95       	ret

00010a4c <strchr>:
   10a4c:	fc 01       	movw	r30, r24
   10a4e:	81 91       	ld	r24, Z+
   10a50:	86 17       	cp	r24, r22
   10a52:	21 f0       	breq	.+8      	; 0x10a5c <strchr+0x10>
   10a54:	88 23       	and	r24, r24
   10a56:	d9 f7       	brne	.-10     	; 0x10a4e <strchr+0x2>
   10a58:	99 27       	eor	r25, r25
   10a5a:	08 95       	ret
   10a5c:	31 97       	sbiw	r30, 0x01	; 1
   10a5e:	cf 01       	movw	r24, r30
   10a60:	08 95       	ret

00010a62 <strcmp>:
   10a62:	fb 01       	movw	r30, r22
   10a64:	dc 01       	movw	r26, r24
   10a66:	8d 91       	ld	r24, X+
   10a68:	01 90       	ld	r0, Z+
   10a6a:	80 19       	sub	r24, r0
   10a6c:	01 10       	cpse	r0, r1
   10a6e:	d9 f3       	breq	.-10     	; 0x10a66 <strcmp+0x4>
   10a70:	99 0b       	sbc	r25, r25
   10a72:	08 95       	ret

00010a74 <strcpy>:
   10a74:	fb 01       	movw	r30, r22
   10a76:	dc 01       	movw	r26, r24
   10a78:	01 90       	ld	r0, Z+
   10a7a:	0d 92       	st	X+, r0
   10a7c:	00 20       	and	r0, r0
   10a7e:	e1 f7       	brne	.-8      	; 0x10a78 <strcpy+0x4>
   10a80:	08 95       	ret

00010a82 <strlen>:
   10a82:	fc 01       	movw	r30, r24
   10a84:	01 90       	ld	r0, Z+
   10a86:	00 20       	and	r0, r0
   10a88:	e9 f7       	brne	.-6      	; 0x10a84 <strlen+0x2>
   10a8a:	80 95       	com	r24
   10a8c:	90 95       	com	r25
   10a8e:	8e 0f       	add	r24, r30
   10a90:	9f 1f       	adc	r25, r31
   10a92:	08 95       	ret

00010a94 <strncmp>:
   10a94:	fb 01       	movw	r30, r22
   10a96:	dc 01       	movw	r26, r24
   10a98:	41 50       	subi	r20, 0x01	; 1
   10a9a:	50 40       	sbci	r21, 0x00	; 0
   10a9c:	30 f0       	brcs	.+12     	; 0x10aaa <strncmp+0x16>
   10a9e:	8d 91       	ld	r24, X+
   10aa0:	01 90       	ld	r0, Z+
   10aa2:	80 19       	sub	r24, r0
   10aa4:	19 f4       	brne	.+6      	; 0x10aac <strncmp+0x18>
   10aa6:	00 20       	and	r0, r0
   10aa8:	b9 f7       	brne	.-18     	; 0x10a98 <strncmp+0x4>
   10aaa:	88 1b       	sub	r24, r24
   10aac:	99 0b       	sbc	r25, r25
   10aae:	08 95       	ret

00010ab0 <strncpy>:
   10ab0:	fb 01       	movw	r30, r22
   10ab2:	dc 01       	movw	r26, r24
   10ab4:	41 50       	subi	r20, 0x01	; 1
   10ab6:	50 40       	sbci	r21, 0x00	; 0
   10ab8:	48 f0       	brcs	.+18     	; 0x10acc <strncpy+0x1c>
   10aba:	01 90       	ld	r0, Z+
   10abc:	0d 92       	st	X+, r0
   10abe:	00 20       	and	r0, r0
   10ac0:	c9 f7       	brne	.-14     	; 0x10ab4 <strncpy+0x4>
   10ac2:	01 c0       	rjmp	.+2      	; 0x10ac6 <strncpy+0x16>
   10ac4:	1d 92       	st	X+, r1
   10ac6:	41 50       	subi	r20, 0x01	; 1
   10ac8:	50 40       	sbci	r21, 0x00	; 0
   10aca:	e0 f7       	brcc	.-8      	; 0x10ac4 <strncpy+0x14>
   10acc:	08 95       	ret

00010ace <strrchr>:
   10ace:	fc 01       	movw	r30, r24
   10ad0:	81 e0       	ldi	r24, 0x01	; 1
   10ad2:	90 e0       	ldi	r25, 0x00	; 0
   10ad4:	01 90       	ld	r0, Z+
   10ad6:	06 16       	cp	r0, r22
   10ad8:	09 f4       	brne	.+2      	; 0x10adc <strrchr+0xe>
   10ada:	cf 01       	movw	r24, r30
   10adc:	00 20       	and	r0, r0
   10ade:	d1 f7       	brne	.-12     	; 0x10ad4 <strrchr+0x6>
   10ae0:	01 97       	sbiw	r24, 0x01	; 1
   10ae2:	08 95       	ret

00010ae4 <strstr>:
   10ae4:	fb 01       	movw	r30, r22
   10ae6:	51 91       	ld	r21, Z+
   10ae8:	55 23       	and	r21, r21
   10aea:	a9 f0       	breq	.+42     	; 0x10b16 <strstr+0x32>
   10aec:	bf 01       	movw	r22, r30
   10aee:	dc 01       	movw	r26, r24
   10af0:	4d 91       	ld	r20, X+
   10af2:	45 17       	cp	r20, r21
   10af4:	41 11       	cpse	r20, r1
   10af6:	e1 f7       	brne	.-8      	; 0x10af0 <strstr+0xc>
   10af8:	59 f4       	brne	.+22     	; 0x10b10 <strstr+0x2c>
   10afa:	cd 01       	movw	r24, r26
   10afc:	01 90       	ld	r0, Z+
   10afe:	00 20       	and	r0, r0
   10b00:	49 f0       	breq	.+18     	; 0x10b14 <strstr+0x30>
   10b02:	4d 91       	ld	r20, X+
   10b04:	40 15       	cp	r20, r0
   10b06:	41 11       	cpse	r20, r1
   10b08:	c9 f3       	breq	.-14     	; 0x10afc <strstr+0x18>
   10b0a:	fb 01       	movw	r30, r22
   10b0c:	41 11       	cpse	r20, r1
   10b0e:	ef cf       	rjmp	.-34     	; 0x10aee <strstr+0xa>
   10b10:	81 e0       	ldi	r24, 0x01	; 1
   10b12:	90 e0       	ldi	r25, 0x00	; 0
   10b14:	01 97       	sbiw	r24, 0x01	; 1
   10b16:	08 95       	ret

00010b18 <itoa>:
   10b18:	fb 01       	movw	r30, r22
   10b1a:	9f 01       	movw	r18, r30
   10b1c:	e8 94       	clt
   10b1e:	42 30       	cpi	r20, 0x02	; 2
   10b20:	c4 f0       	brlt	.+48     	; 0x10b52 <itoa+0x3a>
   10b22:	45 32       	cpi	r20, 0x25	; 37
   10b24:	b4 f4       	brge	.+44     	; 0x10b52 <itoa+0x3a>
   10b26:	4a 30       	cpi	r20, 0x0A	; 10
   10b28:	29 f4       	brne	.+10     	; 0x10b34 <itoa+0x1c>
   10b2a:	97 fb       	bst	r25, 7
   10b2c:	1e f4       	brtc	.+6      	; 0x10b34 <itoa+0x1c>
   10b2e:	90 95       	com	r25
   10b30:	81 95       	neg	r24
   10b32:	9f 4f       	sbci	r25, 0xFF	; 255
   10b34:	64 2f       	mov	r22, r20
   10b36:	77 27       	eor	r23, r23
   10b38:	0e 94 e3 81 	call	0x103c6	; 0x103c6 <__udivmodhi4>
   10b3c:	80 5d       	subi	r24, 0xD0	; 208
   10b3e:	8a 33       	cpi	r24, 0x3A	; 58
   10b40:	0c f0       	brlt	.+2      	; 0x10b44 <itoa+0x2c>
   10b42:	89 5d       	subi	r24, 0xD9	; 217
   10b44:	81 93       	st	Z+, r24
   10b46:	cb 01       	movw	r24, r22
   10b48:	00 97       	sbiw	r24, 0x00	; 0
   10b4a:	a1 f7       	brne	.-24     	; 0x10b34 <itoa+0x1c>
   10b4c:	16 f4       	brtc	.+4      	; 0x10b52 <itoa+0x3a>
   10b4e:	5d e2       	ldi	r21, 0x2D	; 45
   10b50:	51 93       	st	Z+, r21
   10b52:	10 82       	st	Z, r1
   10b54:	c9 01       	movw	r24, r18
   10b56:	0c 94 34 86 	jmp	0x10c68	; 0x10c68 <strrev>

00010b5a <ltoa>:
   10b5a:	fa 01       	movw	r30, r20
   10b5c:	cf 93       	push	r28
   10b5e:	ff 93       	push	r31
   10b60:	ef 93       	push	r30
   10b62:	22 30       	cpi	r18, 0x02	; 2
   10b64:	44 f1       	brlt	.+80     	; 0x10bb6 <ltoa+0x5c>
   10b66:	25 32       	cpi	r18, 0x25	; 37
   10b68:	34 f5       	brge	.+76     	; 0x10bb6 <ltoa+0x5c>
   10b6a:	c2 2f       	mov	r28, r18
   10b6c:	e8 94       	clt
   10b6e:	ca 30       	cpi	r28, 0x0A	; 10
   10b70:	49 f4       	brne	.+18     	; 0x10b84 <ltoa+0x2a>
   10b72:	97 fb       	bst	r25, 7
   10b74:	3e f4       	brtc	.+14     	; 0x10b84 <ltoa+0x2a>
   10b76:	90 95       	com	r25
   10b78:	80 95       	com	r24
   10b7a:	70 95       	com	r23
   10b7c:	61 95       	neg	r22
   10b7e:	7f 4f       	sbci	r23, 0xFF	; 255
   10b80:	8f 4f       	sbci	r24, 0xFF	; 255
   10b82:	9f 4f       	sbci	r25, 0xFF	; 255
   10b84:	2c 2f       	mov	r18, r28
   10b86:	33 27       	eor	r19, r19
   10b88:	44 27       	eor	r20, r20
   10b8a:	55 27       	eor	r21, r21
   10b8c:	ff 93       	push	r31
   10b8e:	ef 93       	push	r30
   10b90:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
   10b94:	ef 91       	pop	r30
   10b96:	ff 91       	pop	r31
   10b98:	60 5d       	subi	r22, 0xD0	; 208
   10b9a:	6a 33       	cpi	r22, 0x3A	; 58
   10b9c:	0c f0       	brlt	.+2      	; 0x10ba0 <ltoa+0x46>
   10b9e:	69 5d       	subi	r22, 0xD9	; 217
   10ba0:	61 93       	st	Z+, r22
   10ba2:	b9 01       	movw	r22, r18
   10ba4:	ca 01       	movw	r24, r20
   10ba6:	60 50       	subi	r22, 0x00	; 0
   10ba8:	70 40       	sbci	r23, 0x00	; 0
   10baa:	80 40       	sbci	r24, 0x00	; 0
   10bac:	90 40       	sbci	r25, 0x00	; 0
   10bae:	51 f7       	brne	.-44     	; 0x10b84 <ltoa+0x2a>
   10bb0:	16 f4       	brtc	.+4      	; 0x10bb6 <ltoa+0x5c>
   10bb2:	cd e2       	ldi	r28, 0x2D	; 45
   10bb4:	c1 93       	st	Z+, r28
   10bb6:	10 82       	st	Z, r1
   10bb8:	8f 91       	pop	r24
   10bba:	9f 91       	pop	r25
   10bbc:	cf 91       	pop	r28
   10bbe:	0c 94 34 86 	jmp	0x10c68	; 0x10c68 <strrev>

00010bc2 <__mulsi_const_10>:
   10bc2:	59 2f       	mov	r21, r25
   10bc4:	48 2f       	mov	r20, r24
   10bc6:	37 2f       	mov	r19, r23
   10bc8:	26 2f       	mov	r18, r22
   10bca:	66 0f       	add	r22, r22
   10bcc:	77 1f       	adc	r23, r23
   10bce:	88 1f       	adc	r24, r24
   10bd0:	99 1f       	adc	r25, r25
   10bd2:	66 0f       	add	r22, r22
   10bd4:	77 1f       	adc	r23, r23
   10bd6:	88 1f       	adc	r24, r24
   10bd8:	99 1f       	adc	r25, r25
   10bda:	62 0f       	add	r22, r18
   10bdc:	73 1f       	adc	r23, r19
   10bde:	84 1f       	adc	r24, r20
   10be0:	95 1f       	adc	r25, r21
   10be2:	66 0f       	add	r22, r22
   10be4:	77 1f       	adc	r23, r23
   10be6:	88 1f       	adc	r24, r24
   10be8:	99 1f       	adc	r25, r25
   10bea:	08 95       	ret

00010bec <ultoa>:
   10bec:	fa 01       	movw	r30, r20
   10bee:	cf 93       	push	r28
   10bf0:	ff 93       	push	r31
   10bf2:	ef 93       	push	r30
   10bf4:	22 30       	cpi	r18, 0x02	; 2
   10bf6:	cc f0       	brlt	.+50     	; 0x10c2a <ultoa+0x3e>
   10bf8:	25 32       	cpi	r18, 0x25	; 37
   10bfa:	bc f4       	brge	.+46     	; 0x10c2a <ultoa+0x3e>
   10bfc:	c2 2f       	mov	r28, r18
   10bfe:	2c 2f       	mov	r18, r28
   10c00:	33 27       	eor	r19, r19
   10c02:	44 27       	eor	r20, r20
   10c04:	55 27       	eor	r21, r21
   10c06:	ff 93       	push	r31
   10c08:	ef 93       	push	r30
   10c0a:	0e 94 0a 82 	call	0x10414	; 0x10414 <__udivmodsi4>
   10c0e:	ef 91       	pop	r30
   10c10:	ff 91       	pop	r31
   10c12:	60 5d       	subi	r22, 0xD0	; 208
   10c14:	6a 33       	cpi	r22, 0x3A	; 58
   10c16:	0c f0       	brlt	.+2      	; 0x10c1a <ultoa+0x2e>
   10c18:	69 5d       	subi	r22, 0xD9	; 217
   10c1a:	61 93       	st	Z+, r22
   10c1c:	b9 01       	movw	r22, r18
   10c1e:	ca 01       	movw	r24, r20
   10c20:	60 50       	subi	r22, 0x00	; 0
   10c22:	70 40       	sbci	r23, 0x00	; 0
   10c24:	80 40       	sbci	r24, 0x00	; 0
   10c26:	90 40       	sbci	r25, 0x00	; 0
   10c28:	51 f7       	brne	.-44     	; 0x10bfe <ultoa+0x12>
   10c2a:	10 82       	st	Z, r1
   10c2c:	8f 91       	pop	r24
   10c2e:	9f 91       	pop	r25
   10c30:	cf 91       	pop	r28
   10c32:	0c 94 34 86 	jmp	0x10c68	; 0x10c68 <strrev>

00010c36 <utoa>:
   10c36:	fb 01       	movw	r30, r22
   10c38:	9f 01       	movw	r18, r30
   10c3a:	42 30       	cpi	r20, 0x02	; 2
   10c3c:	74 f0       	brlt	.+28     	; 0x10c5a <utoa+0x24>
   10c3e:	45 32       	cpi	r20, 0x25	; 37
   10c40:	64 f4       	brge	.+24     	; 0x10c5a <utoa+0x24>
   10c42:	64 2f       	mov	r22, r20
   10c44:	77 27       	eor	r23, r23
   10c46:	0e 94 e3 81 	call	0x103c6	; 0x103c6 <__udivmodhi4>
   10c4a:	80 5d       	subi	r24, 0xD0	; 208
   10c4c:	8a 33       	cpi	r24, 0x3A	; 58
   10c4e:	0c f0       	brlt	.+2      	; 0x10c52 <utoa+0x1c>
   10c50:	89 5d       	subi	r24, 0xD9	; 217
   10c52:	81 93       	st	Z+, r24
   10c54:	cb 01       	movw	r24, r22
   10c56:	00 97       	sbiw	r24, 0x00	; 0
   10c58:	a1 f7       	brne	.-24     	; 0x10c42 <utoa+0xc>
   10c5a:	10 82       	st	Z, r1
   10c5c:	c9 01       	movw	r24, r18
   10c5e:	0c 94 34 86 	jmp	0x10c68	; 0x10c68 <strrev>

00010c62 <__ctype_isfalse>:
   10c62:	99 27       	eor	r25, r25
   10c64:	88 27       	eor	r24, r24

00010c66 <__ctype_istrue>:
   10c66:	08 95       	ret

00010c68 <strrev>:
   10c68:	dc 01       	movw	r26, r24
   10c6a:	fc 01       	movw	r30, r24
   10c6c:	67 2f       	mov	r22, r23
   10c6e:	71 91       	ld	r23, Z+
   10c70:	77 23       	and	r23, r23
   10c72:	e1 f7       	brne	.-8      	; 0x10c6c <strrev+0x4>
   10c74:	32 97       	sbiw	r30, 0x02	; 2
   10c76:	04 c0       	rjmp	.+8      	; 0x10c80 <strrev+0x18>
   10c78:	7c 91       	ld	r23, X
   10c7a:	6d 93       	st	X+, r22
   10c7c:	70 83       	st	Z, r23
   10c7e:	62 91       	ld	r22, -Z
   10c80:	ae 17       	cp	r26, r30
   10c82:	bf 07       	cpc	r27, r31
   10c84:	c8 f3       	brcs	.-14     	; 0x10c78 <strrev+0x10>
   10c86:	08 95       	ret

00010c88 <_exit>:
   10c88:	f8 94       	cli

00010c8a <__stop_program>:
   10c8a:	ff cf       	rjmp	.-2      	; 0x10c8a <__stop_program>
