Z80/8080-Macro-Assembler  Release 2.1

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                       1      1 ;*************************************************************
                       2      2 ; 
                       3      3 ;                 TINY BASIC FOR INTEL 8080
                       4      4 ;                       VERSION 2.0
                       5      5 ;                     BY LI-CHEN WANG
                       6      6 ;                  MODIFIED AND TRANSLATED
                       7      7 ;                    TO INTEL MNEMONICS
                       8      8 ;                     BY ROGER RAUSKOLB
                       9      9 ;                      10 OCTOBER,1976
                      10     10 ;                        @COPYLEFT
                      11     11 ;                   ALL WRONGS RESERVED
                      12     12 ; 
                      13     13 ;                 ADDED FIX FOR BUGGY CHGSGN
                      14     14 ;                 UDO MUNK, 10 DECEMBER 2019
                      15     15 ;*************************************************************
                      16     16 ; 
                      17     17 ; *** ZERO PAGE SUBROUTINES ***
                      18     18 ; 
                      19     19 ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
                      20     20 ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
                      21     21 ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
                      22     22 ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
                      23     23 ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
                      24     24 ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
                      25     25 ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
                      26     26 ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
                      27     27 ; 
                      28     28 DWA     MACRO WHERE
                      29     29         DB   (WHERE SHR 8) + 128
                      30     30         DB   WHERE AND 0FFH
                      31     31         ENDM
                      32     32 ;
                      33     33         ORG  0H
0000  31 00 20        34     34 START:  LXI  SP,STACK                   ;*** COLD START ***
0003  3e ff           35     35         MVI  A,0FFH
0005  c3 45 06        36     36         JMP  INIT
                      37     37 ;
0008  e3              38     38         XTHL                            ;*** TSTC OR RST 1 ***
0009  ef              39     39         RST  5                          ;IGNORE BLANKS AND
000a  be              40     40         CMP  M                          ;TEST CHARACTER
000b  c3 68 00        41     41         JMP  TC1                        ;REST OF THIS IS AT TC1
                      42     42 ;
000e  3e 0d           43     43 CRLF:   MVI  A,CR                       ;*** CRLF ***
                      44     44 ;
0010  f5              45     45         PUSH PSW                        ;*** OUTC OR RST 2 ***
0011  3a 00 08        46     46         LDA  OCSW                       ;PRINT CHARACTER ONLY
0014  b7              47     47         ORA  A                          ;IF OCSW SWITCH IS ON
0015  c3 6f 06        48     48         JMP  OC2                        ;REST OF THIS IS AT OC2
                      49     49 ;
0018  cd 71 03        50     50         CALL EXPR2                      ;*** EXPR OR RST 3 ***
001b  e5              51     51         PUSH H                          ;EVALUATE AN EXPRESSION
001c  c3 2d 03        52     52         JMP  EXPR1                      ;REST OF IT AT EXPR1
001f  57              53     53         DB   'W'
                      54     54 ;
0020  7c              55     55         MOV  A,H                        ;*** COMP OR RST 4 ***
0021  ba              56     56         CMP  D                          ;COMPARE HL WITH DE
0022  c0              57     57         RNZ                             ;RETURN CORRECT C AND
0023  7d              58     58         MOV  A,L                        ;Z FLAGS
0024  bb              59     59         CMP  E                          ;BUT OLD A IS LOST
0025  c9              60     60         RET
0026  41 4e           61     61         DB   'AN'
                      62     62 ;
0028  1a              63     63 SS1:    LDAX D                          ;*** IGNBLK/RST 5 ***
0029  fe 20           64     64         CPI  20H                        ;IGNORE BLANKS
002b  c0              65     65         RNZ                             ;IN TEXT (WHERE DE->)
002c  13              66     66         INX  D                          ;AND RETURN THE FIRST
002d  c3 28 00        67     67         JMP  SS1                        ;NON-BLANK CHAR. IN A
                      68     68 ;
0030  f1              69     69         POP  PSW                        ;*** FINISH/RST 6 ***
0031  cd b6 04        70     70         CALL FIN                        ;CHECK END OF COMMAND
0034  c3 c9 04        71     71         JMP  QWHAT                      ;PRINT "WHAT?" IF WRONG
0037  47              72     72         DB   'G'
                      73     73 ;
0038  ef              74     74         RST  5                          ;*** TSTV OR RST 7 ***
0039  d6 40           75     75         SUI  40H                        ;TEST VARIABLES
003b  d8              76     76         RC                              ;C:NOT A VARIABLE
003c  c2 58 00        77     77         JNZ  TV1                        ;NOT "@" ARRAY
003f  13              78     78         INX  D                          ;IT IS THE "@" ARRAY
0040  cd 1a 04        79     79         CALL PARN                       ;@ SHOULD BE FOLLOWED
0043  29              80     80         DAD  H                          ;BY (EXPR) AS ITS INDEX
0044  da 9f 00        81     81         JC   QHOW                       ;IS INDEX TOO BIG?
0047  d5              82     82         PUSH D                          ;WILL IT OVERWRITE
0048  eb              83     83         XCHG                            ;TEXT?
0049  cd 59 04        84     84         CALL SIZE                       ;FIND SIZE OF FREE
004c  e7              85     85         RST  4                          ;AND CHECK THAT
004d  da f7 04        86     86         JC   ASORRY                     ;IF SO, SAY "SORRY"
0050  21 00 1f        87     87         LXI  H,VARBGN                   ;IF NOT GET ADDRESS
0053  cd 7c 04        88     88         CALL SUBDE                      ;OF @(EXPR) AND PUT IT
0056  d1              89     89         POP  D                          ;IN HL
0057  c9              90     90         RET                             ;C FLAG IS CLEARED
0058  fe 1b           91     91 TV1:    CPI  1BH                        ;NOT @, IS IT A TO Z?
005a  3f              92     92         CMC                             ;IF NOT RETURN C FLAG
005b  d8              93     93         RC
005c  13              94     94         INX  D                          ;IF A THROUGH Z
005d  21 00 1f        95     95         LXI  H,VARBGN                   ;COMPUTE ADDRESS OF
0060  07              96     96         RLC                             ;THAT VARIABLE
0061  85              97     97         ADD  L                          ;AND RETURN IT IN HL
0062  6f              98     98         MOV  L,A                        ;WITH C FLAG CLEARED
0063  3e 00           99     99         MVI  A,0
0065  8c             100    100         ADC  H
0066  67             101    101         MOV  H,A
0067  c9             102    102         RET
                     103    103 ;
                     104    104 ;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
                     105    105 ;       RST  5                          ;THIS IS AT LOC. 8
                     106    106 ;       CMP  M                          ;AND THEN JUMP HERE
0068  23             107    107 TC1:    INX  H                          ;COMPARE THE BYTE THAT
0069  ca 73 00       108    108         JZ   TC2                        ;FOLLOWS THE RST INST.
006c  c5             109    109         PUSH B                          ;WITH THE TEXT (DE->)
006d  4e             110    110         MOV  C,M                        ;IF NOT =, ADD THE 2ND
006e  06 00          111    111         MVI  B,0                        ;BYTE THAT FOLLOWS THE
0070  09             112    112         DAD  B                          ;RST TO THE OLD PC
0071  c1             113    113         POP  B                          ;I.E., DO A RELATIVE
0072  1b             114    114         DCX  D                          ;JUMP IF NOT =
0073  13             115    115 TC2:    INX  D                          ;IF =, SKIP THOSE BYTES
0074  23             116    116         INX  H                          ;AND CONTINUE
0075  e3             117    117         XTHL
0076  c9             118    118         RET
                     119    119 ;
0077  21 00 00       120    120 TSTNUM: LXI  H,0                        ;*** TSTNUM ***
007a  44             121    121         MOV  B,H                        ;TEST IF THE TEXT IS
007b  ef             122    122         RST  5                          ;A NUMBER
007c  fe 30          123    123 TN1:    CPI  30H                        ;IF NOT, RETURN 0 IN
007e  d8             124    124         RC                              ;B AND HL
007f  fe 3a          125    125         CPI  3AH                        ;IF NUMBERS, CONVERT
0081  d0             126    126         RNC                             ;TO BINARY IN HL AND
0082  3e f0          127    127         MVI  A,0F0H                     ;SET B TO # OF DIGITS
0084  a4             128    128         ANA  H                          ;IF H>255, THERE IS NO
0085  c2 9f 00       129    129         JNZ  QHOW                       ;ROOM FOR NEXT DIGIT
0088  04             130    130         INR  B                          ;B COUNTS # OF DIGITS
0089  c5             131    131         PUSH B
008a  44             132    132         MOV  B,H                        ;HL=10*HL+(NEW DIGIT)
008b  4d             133    133         MOV  C,L
008c  29             134    134         DAD  H                          ;WHERE 10* IS DONE BY
008d  29             135    135         DAD  H                          ;SHIFT AND ADD
008e  09             136    136         DAD  B
008f  29             137    137         DAD  H
0090  1a             138    138         LDAX D                          ;AND (DIGIT) IS FROM
0091  13             139    139         INX  D                          ;STRIPPING THE ASCII
0092  e6 0f          140    140         ANI  0FH                        ;CODE
0094  85             141    141         ADD  L
0095  6f             142    142         MOV  L,A
0096  3e 00          143    143         MVI  A,0
0098  8c             144    144         ADC  H
0099  67             145    145         MOV  H,A
009a  c1             146    146         POP  B
009b  1a             147    147         LDAX D                          ;DO THIS DIGIT AFTER
009c  f2 7c 00       148    148         JP   TN1                        ;DIGIT. S SAYS OVERFLOW
009f  d5             149    149 QHOW:   PUSH D                          ;*** ERROR "HOW?" ***
00a0  11 a6 00       150    150 AHOW:   LXI  D,HOW
00a3  c3 cd 04       151    151         JMP  ERROR
00a6  48 4f 57 3f    152    152 HOW:    DB   'HOW?'
00aa  0d             153    153         DB   CR
00ab  4f 4b          154    154 OK:     DB   'OK'
00ad  0d             155    155         DB   CR
00ae  57 48 41 54    156    156 WHAT:   DB   'WHAT?'
00b2  3f             156    157
00b3  0d             157    158         DB   CR
00b4  53 4f 52 52    158    159 SORRY:  DB   'SORRY'
00b8  59             158    160
00b9  0d             159    161         DB   CR
                     160    162 ;
                     161    163 ;*************************************************************
                     162    164 ;
                     163    165 ; *** MAIN ***
                     164    166 ;
                     165    167 ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
                     166    168 ; AND STORES IT IN THE MEMORY.
                     167    169 ;
                     168    170 ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
                     169    171 ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
                     170    172 ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
                     171    173 ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
                     172    174 ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
                     173    175 ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
                     174    176 ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
                     175    177 ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
                     176    178 ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
                     177    179 ;
                     178    180 ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
                     179    181 ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
                     180    182 ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
                     181    183 ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
                     182    184 ;
                     183    185 ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
                     184    186 ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
                     185    187 ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
                     186    188 ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
                     187    189 ;
                     188    190 ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
                     189    191 ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
                     190    192 ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
                     191    193 ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
                     192    194 ;
00ba  31 00 20       193    195 RSTART: LXI  SP,STACK
00bd  cd 0e 00       194    196 ST1:    CALL CRLF                       ;AND JUMP TO HERE
00c0  11 ab 00       195    197         LXI  D,OK                       ;DE->STRING
00c3  97             196    198         SUB  A                          ;A=0
00c4  cd 63 05       197    199         CALL PRTSTG                     ;PRINT STRING UNTIL CR
00c7  21 ce 00       198    200         LXI  H,ST2+1                    ;LITERAL 0
00ca  22 01 08       199    201         SHLD CURRNT                     ;CURRENT->LINE # = 0
00cd  21 00 00       200    202 ST2:    LXI  H,0
00d0  22 09 08       201    203         SHLD LOPVAR
00d3  22 03 08       202    204         SHLD STKGOS
00d6  3e 3e          203    205 ST3:    MVI  A,3EH                      ;PROMPT '>' AND
00d8  cd fd 04       204    206         CALL GETLN                      ;READ A LINE
00db  d5             205    207         PUSH D                          ;DE->END OF LINE
00dc  11 37 1f       206    208         LXI  D,BUFFER                   ;DE->BEGINNING OF LINE
00df  cd 77 00       207    209         CALL TSTNUM                     ;TEST IF IT IS A NUMBER
00e2  ef             208    210         RST  5
00e3  7c             209    211         MOV  A,H                        ;HL=VALUE OF THE # OR
00e4  b5             210    212         ORA  L                          ;0 IF NO # WAS FOUND
00e5  c1             211    213         POP  B                          ;BC->END OF LINE
00e6  ca 3b 07       212    214         JZ   DIRECT
00e9  1b             213    215         DCX  D                          ;BACKUP DE AND SAVE
00ea  7c             214    216         MOV  A,H                        ;VALUE OF LINE # THERE
00eb  12             215    217         STAX D
00ec  1b             216    218         DCX  D
00ed  7d             217    219         MOV  A,L
00ee  12             218    220         STAX D
00ef  c5             219    221         PUSH B                          ;BC,DE->BEGIN, END
00f0  d5             220    222         PUSH D
00f1  79             221    223         MOV  A,C
00f2  93             222    224         SUB  E
00f3  f5             223    225         PUSH PSW                        ;A=# OF BYTES IN LINE
00f4  cd 3b 05       224    226         CALL FNDLN                      ;FIND THIS LINE IN SAVE
00f7  d5             225    227         PUSH D                          ;AREA, DE->SAVE AREA
00f8  c2 0b 01       226    228         JNZ  ST4                        ;NZ:NOT FOUND, INSERT
00fb  d5             227    229         PUSH D                          ;Z:FOUND, DELETE IT
00fc  cd 57 05       228    230         CALL FNDNXT                     ;FIND NEXT LINE
                     229    231                                         ;DE->NEXT LINE
00ff  c1             230    232         POP  B                          ;BC->LINE TO BE DELETED
0100  2a 15 08       231    233         LHLD TXTUNF                     ;HL->UNFILLED SAVE AREA
0103  cd e8 05       232    234         CALL MVUP                       ;MOVE UP TO DELETE
0106  60             233    235         MOV  H,B                        ;TXTUNF->UNFILLED AREA
0107  69             234    236         MOV  L,C
0108  22 15 08       235    237         SHLD TXTUNF                     ;UPDATE
010b  c1             236    238 ST4:    POP  B                          ;GET READY TO INSERT
010c  2a 15 08       237    239         LHLD TXTUNF                     ;BUT FIRST CHECK IF
010f  f1             238    240         POP  PSW                        ;THE LENGTH OF NEW LINE
0110  e5             239    241         PUSH H                          ;IS 3 (LINE # AND CR)
0111  fe 03          240    242         CPI  3                          ;THEN DO NOT INSERT
0113  ca ba 00       241    243         JZ   RSTART                     ;MUST CLEAR THE STACK
0116  85             242    244         ADD  L                          ;COMPUTE NEW TXTUNF
0117  6f             243    245         MOV  L,A
0118  3e 00          244    246         MVI  A,0
011a  8c             245    247         ADC  H
011b  67             246    248         MOV  H,A                        ;HL->NEW UNFILLED AREA
011c  11 00 1f       247    249         LXI  D,TXTEND                   ;CHECK TO SEE IF THERE
011f  e7             248    250         RST  4                          ;IS ENOUGH SPACE
0120  d2 f6 04       249    251         JNC  QSORRY                     ;SORRY, NO ROOM FOR IT
0123  22 15 08       250    252         SHLD TXTUNF                     ;OK, UPDATE TXTUNF
0126  d1             251    253         POP  D                          ;DE->OLD UNFILLED AREA
0127  cd f1 05       252    254         CALL MVDOWN
012a  d1             253    255         POP  D                          ;DE->BEGIN, HL->END
012b  e1             254    256         POP  H
012c  cd e8 05       255    257         CALL MVUP                       ;MOVE NEW LINE TO SAVE
012f  c3 d6 00       256    258         JMP  ST3                        ;AREA
                     257    259 ;
                     258    260 ;*************************************************************
                     259    261 ;
                     260    262 ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
                     261    263 ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
                     262    264 ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
                     263    265 ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
                     264    266 ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
                     265    267 ;
                     266    268 ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
                     267    269 ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
                     268    270 ; GO BACK TO 'RSTART'.
                     269    271 ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
                     270    272 ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
                     271    273 ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
                     272    274 ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
                     273    275 ;*************************************************************
                     274    276 ;
                     275    277 ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
                     276    278 ;
                     277    279 ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
                     278    280 ;
                     279    281 ; 'STOP(CR)' GOES BACK TO 'RSTART'
                     280    282 ;
                     281    283 ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
                     282    284 ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
                     283    285 ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
                     284    286 ;
                     285    287 ; THERE ARE 3 MORE ENTRIES IN 'RUN':
                     286    288 ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
                     287    289 ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
                     288    290 ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
                     289    291 ;
                     290    292 ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
                     291    293 ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
                     292    294 ;
0132  cd c5 04       293    295 NEW:    CALL ENDCHK                     ;*** NEW(CR) ***
0135  21 17 08       294    296         LXI  H,TXTBGN
0138  22 15 08       295    297         SHLD TXTUNF
                     296    298 ;
013b  cd c5 04       297    299 STOP:   CALL ENDCHK                     ;*** STOP(CR) ***
013e  c3 ba 00       298    300         JMP  RSTART
                     299    301 ;
0141  cd c5 04       300    302 RUN:    CALL ENDCHK                     ;*** RUN(CR) ***
0144  11 17 08       301    303         LXI  D,TXTBGN                   ;FIRST SAVED LINE
                     302    304 ;
0147  21 00 00       303    305 RUNNXL: LXI  H,0                        ;*** RUNNXL ***
014a  cd 43 05       304    306         CALL FNDLP                      ;FIND WHATEVER LINE #
014d  da ba 00       305    307         JC   RSTART                     ;C:PASSED TXTUNF, QUIT
                     306    308 ;
0150  eb             307    309 RUNTSL: XCHG                            ;*** RUNTSL ***
0151  22 01 08       308    310         SHLD CURRNT                     ;SET 'CURRENT'->LINE #
0154  eb             309    311         XCHG
0155  13             310    312         INX  D                          ;BUMP PASS LINE #
0156  13             311    313         INX  D
                     312    314 ;
0157  cd 87 06       313    315 RUNSML: CALL CHKIO                      ;*** RUNSML ***
015a  21 c0 06       314    316         LXI  H,TAB2-1                   ;FIND COMMAND IN TAB2
015d  c3 3e 07       315    317         JMP  EXEC                       ;AND EXECUTE IT
                     316    318 ;
0160  df             317    319 GOTO:   RST  3                          ;*** GOTO EXPR ***
0161  d5             318    320         PUSH D                          ;SAVE FOR ERROR ROUTINE
0162  cd c5 04       319    321         CALL ENDCHK                     ;MUST FIND A CR
0165  cd 3b 05       320    322         CALL FNDLN                      ;FIND THE TARGET LINE
0168  c2 a0 00       321    323         JNZ  AHOW                       ;NO SUCH LINE #
016b  f1             322    324         POP  PSW                        ;CLEAR THE PUSH DE
016c  c3 50 01       323    325         JMP  RUNTSL                     ;GO DO IT
                     324    326 ;
                     325    327 ;*************************************************************
                     326    328 ;
                     327    329 ; *** LIST *** & PRINT ***
                     328    330 ;
                     329    331 ; LIST HAS TWO FORMS:
                     330    332 ; 'LIST(CR)' LISTS ALL SAVED LINES
                     331    333 ; 'LIST #(CR)' START LIST AT THIS LINE #
                     332    334 ; YOU CAN STOP THE LISTING BY CONTROL C KEY
                     333    335 ;
                     334    336 ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
                     335    337 ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
                     336    338 ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
                     337    339 ;
                     338    340 ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
                     339    341 ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
                     340    342 ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
                     341    343 ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
                     342    344 ; SPECIFIED, 6 POSITIONS WILL BE USED.
                     343    345 ;
                     344    346 ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
                     345    347 ; DOUBLE QUOTES.
                     346    348 ;
                     347    349 ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
                     348    350 ;
                     349    351 ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
                     350    352 ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
                     351    353 ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
                     352    354 ;
016f  cd 77 00       353    355 LIST:   CALL TSTNUM                     ;TEST IF THERE IS A #
0172  cd c5 04       354    356         CALL ENDCHK                     ;IF NO # WE GET A 0
0175  cd 3b 05       355    357         CALL FNDLN                      ;FIND THIS OR NEXT LINE
0178  da ba 00       356    358 LS1:    JC   RSTART                     ;C:PASSED TXTUNF
017b  cd d5 05       357    359         CALL PRTLN                      ;PRINT THE LINE
017e  cd 87 06       358    360         CALL CHKIO                      ;STOP IF HIT CONTROL-C
0181  cd 43 05       359    361         CALL FNDLP                      ;FIND NEXT LINE
0184  c3 78 01       360    362         JMP  LS1                        ;AND LOOP BACK
                     361    363 ;
0187  0e 06          362    364 PRINT:  MVI  C,6                        ;C = # OF SPACES
0189  cf             363    365         RST  1                          ;IF NULL LIST & ";"
018a  3b             364    366         DB   3BH
018b  06             365    367         DB   PR2-$-1
018c  cd 0e 00       366    368         CALL CRLF                       ;GIVE CR-LF AND
018f  c3 57 01       367    369         JMP  RUNSML                     ;CONTINUE SAME LINE
0192  cf             368    370 PR2:    RST  1                          ;IF NULL LIST (CR)
0193  0d             369    371         DB   CR
0194  06             370    372         DB   PR0-$-1
0195  cd 0e 00       371    373         CALL CRLF                       ;ALSO GIVE CR-LF AND
0198  c3 47 01       372    374         JMP  RUNNXL                     ;GO TO NEXT LINE
019b  cf             373    375 PR0:    RST  1                          ;ELSE IS IT FORMAT?
019c  23             374    376         DB   '#'
019d  05             375    377         DB   PR1-$-1
019e  df             376    378         RST  3                          ;YES, EVALUATE EXPR.
019f  4d             377    379         MOV  C,L                        ;AND SAVE IT IN C
01a0  c3 a9 01       378    380         JMP  PR3                        ;LOOK FOR MORE TO PRINT
01a3  cd 6f 05       379    381 PR1:    CALL QTSTG                      ;OR IS IT A STRING?
01a6  c3 b6 01       380    382         JMP  PR8                        ;IF NOT, MUST BE EXPR.
01a9  cf             381    383 PR3:    RST  1                          ;IF ",", GO FIND NEXT
01aa  2c             382    384         DB   ','
01ab  06             383    385         DB   PR6-$-1
01ac  cd b6 04       384    386         CALL FIN                        ;IN THE LIST.
01af  c3 9b 01       385    387         JMP  PR0                        ;LIST CONTINUES
01b2  cd 0e 00       386    388 PR6:    CALL CRLF                       ;LIST ENDS
01b5  f7             387    389         RST  6
01b6  df             388    390 PR8:    RST  3                          ;EVALUATE THE EXPR
01b7  c5             389    391         PUSH B
01b8  cd 95 05       390    392         CALL PRTNUM                     ;PRINT THE VALUE
01bb  c1             391    393         POP  B
01bc  c3 a9 01       392    394         JMP  PR3                        ;MORE TO PRINT?
                     393    395 ;
                     394    396 ;*************************************************************
                     395    397 ;
                     396    398 ; *** GOSUB *** & RETURN ***
                     397    399 ;
                     398    400 ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
                     399    401 ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
                     400    402 ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
                     401    403 ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
                     402    404 ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
                     403    405 ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
                     404    406 ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
                     405    407 ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
                     406    408 ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
                     407    409 ;
                     408    410 ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
                     409    411 ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
                     410    412 ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
                     411    413 ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
                     412    414 ;
01bf  cd 1c 06       413    415 GOSUB:  CALL PUSHA                      ;SAVE THE CURRENT "FOR"
01c2  df             414    416         RST  3                          ;PARAMETERS
01c3  d5             415    417         PUSH D                          ;AND TEXT POINTER
01c4  cd 3b 05       416    418         CALL FNDLN                      ;FIND THE TARGET LINE
01c7  c2 a0 00       417    419         JNZ  AHOW                       ;NOT THERE. SAY "HOW?"
01ca  2a 01 08       418    420         LHLD CURRNT                     ;FOUND IT, SAVE OLD
01cd  e5             419    421         PUSH H                          ;'CURRNT' OLD 'STKGOS'
01ce  2a 03 08       420    422         LHLD STKGOS
01d1  e5             421    423         PUSH H
01d2  21 00 00       422    424         LXI  H,0                        ;AND LOAD NEW ONES
01d5  22 09 08       423    425         SHLD LOPVAR
01d8  39             424    426         DAD  SP
01d9  22 03 08       425    427         SHLD STKGOS
01dc  c3 50 01       426    428         JMP  RUNTSL                     ;THEN RUN THAT LINE
01df  cd c5 04       427    429 RETURN: CALL ENDCHK                     ;THERE MUST BE A CR
01e2  2a 03 08       428    430         LHLD STKGOS                     ;OLD STACK POINTER
01e5  7c             429    431         MOV  A,H                        ;0 MEANS NOT EXIST
01e6  b5             430    432         ORA  L
01e7  ca c9 04       431    433         JZ   QWHAT                      ;SO, WE SAY: "WHAT?"
01ea  f9             432    434         SPHL                            ;ELSE, RESTORE IT
01eb  e1             433    435         POP  H
01ec  22 03 08       434    436         SHLD STKGOS                     ;AND THE OLD 'STKGOS'
01ef  e1             435    437         POP  H
01f0  22 01 08       436    438         SHLD CURRNT                     ;AND THE OLD 'CURRNT'
01f3  d1             437    439         POP  D                          ;OLD TEXT POINTER
01f4  cd 00 06       438    440         CALL POPA                       ;OLD "FOR" PARAMETERS
01f7  f7             439    441         RST  6                          ;AND WE ARE BACK HOME
                     440    442 ;
                     441    443 ;*************************************************************
                     442    444 ;
                     443    445 ; *** FOR *** & NEXT ***
                     444    446 ;
                     445    447 ; 'FOR' HAS TWO FORMS:
                     446    448 ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
                     447    449 ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
                     448    450 ; EXP3=1.  (I.E., WITH A STEP OF +1.)
                     449    451 ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
                     450    452 ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
                     451    453 ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
                     452    454 ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
                     453    455 ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
                     454    456 ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
                     455    457 ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
                     456    458 ; BEFORE THE NEW ONE OVERWRITES IT.
                     457    459 ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
                     458    460 ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
                     459    461 ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
                     460    462 ; (PURGED FROM THE STACK..)
                     461    463 ;
                     462    464 ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
                     463    465 ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
                     464    466 ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
                     465    467 ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
                     466    468 ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
                     467    469 ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
                     468    470 ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
                     469    471 ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
                     470    472 ; IS PURGED AND EXECUTION CONTINUES.
                     471    473 ;
01f8  cd 1c 06       472    474 FOR:    CALL PUSHA                      ;SAVE THE OLD SAVE AREA
01fb  cd a3 04       473    475         CALL SETVAL                     ;SET THE CONTROL VAR.
01fe  2b             474    476         DCX  H                          ;HL IS ITS ADDRESS
01ff  22 09 08       475    477         SHLD LOPVAR                     ;SAVE THAT
0202  21 16 07       476    478         LXI  H,TAB5-1                   ;USE 'EXEC' TO LOOK
0205  c3 3e 07       477    479         JMP  EXEC                       ;FOR THE WORD 'TO'
0208  df             478    480 FR1:    RST  3                          ;EVALUATE THE LIMIT
0209  22 0d 08       479    481         SHLD LOPLMT                     ;SAVE THAT
020c  21 1c 07       480    482         LXI  H,TAB6-1                   ;USE 'EXEC' TO LOOK
020f  c3 3e 07       481    483         JMP EXEC                        ;FOR THE WORD 'STEP'
0212  df             482    484 FR2:    RST  3                          ;FOUND IT, GET STEP
0213  c3 19 02       483    485         JMP  FR4
0216  21 01 00       484    486 FR3:    LXI  H,1H                       ;NOT FOUND, SET TO 1
0219  22 0b 08       485    487 FR4:    SHLD LOPINC                     ;SAVE THAT TOO
021c  2a 01 08       486    488 FR5:    LHLD CURRNT                     ;SAVE CURRENT LINE #
021f  22 0f 08       487    489         SHLD LOPLN
0222  eb             488    490         XCHG                            ;AND TEXT POINTER
0223  22 11 08       489    491         SHLD LOPPT
0226  01 0a 00       490    492         LXI  B,0AH                      ;DIG INTO STACK TO
0229  2a 09 08       491    493         LHLD LOPVAR                     ;FIND 'LOPVAR'
022c  eb             492    494         XCHG
022d  60             493    495         MOV  H,B
022e  68             494    496         MOV  L,B                        ;HL=0 NOW
022f  39             495    497         DAD  SP                         ;HERE IS THE STACK
0230  3e             496    498         DB   3EH
0231  09             497    499 FR7:    DAD  B                          ;EACH LEVEL IS 10 DEEP
0232  7e             498    500         MOV  A,M                        ;GET THAT OLD 'LOPVAR'
0233  23             499    501         INX  H
0234  b6             500    502         ORA  M
0235  ca 52 02       501    503         JZ   FR8                        ;0 SAYS NO MORE IN IT
0238  7e             502    504         MOV  A,M
0239  2b             503    505         DCX  H
023a  ba             504    506         CMP  D                          ;SAME AS THIS ONE?
023b  c2 31 02       505    507         JNZ  FR7
023e  7e             506    508         MOV  A,M                        ;THE OTHER HALF?
023f  bb             507    509         CMP  E
0240  c2 31 02       508    510         JNZ  FR7
0243  eb             509    511         XCHG                            ;YES, FOUND ONE
0244  21 00 00       510    512         LXI  H,0H
0247  39             511    513         DAD  SP                         ;TRY TO MOVE SP
0248  44             512    514         MOV  B,H
0249  4d             513    515         MOV  C,L
024a  21 0a 00       514    516         LXI  H,0AH
024d  19             515    517         DAD  D
024e  cd f1 05       516    518         CALL MVDOWN                     ;AND PURGE 10 WORDS
0251  f9             517    519         SPHL                            ;IN THE STACK
0252  2a 11 08       518    520 FR8:    LHLD LOPPT                      ;JOB DONE, RESTORE DE
0255  eb             519    521         XCHG
0256  f7             520    522         RST  6                          ;AND CONTINUE
                     521    523 ;
0257  ff             522    524 NEXT:   RST  7                          ;GET ADDRESS OF VAR.
0258  da c9 04       523    525         JC   QWHAT                      ;NO VARIABLE, "WHAT?"
025b  22 05 08       524    526         SHLD VARNXT                     ;YES, SAVE IT
025e  d5             525    527 NX0:    PUSH D                          ;SAVE TEXT POINTER
025f  eb             526    528         XCHG
0260  2a 09 08       527    529         LHLD LOPVAR                     ;GET VAR. IN 'FOR'
0263  7c             528    530         MOV  A,H
0264  b5             529    531         ORA  L                          ;0 SAYS NEVER HAD ONE
0265  ca ca 04       530    532         JZ   AWHAT                      ;SO WE ASK: "WHAT?"
0268  e7             531    533         RST  4                          ;ELSE WE CHECK THEM
0269  ca 76 02       532    534         JZ   NX3                        ;OK, THEY AGREE
026c  d1             533    535         POP  D                          ;NO, LET'S SEE
026d  cd 00 06       534    536         CALL POPA                       ;PURGE CURRENT LOOP
0270  2a 05 08       535    537         LHLD VARNXT                     ;AND POP ONE LEVEL
0273  c3 5e 02       536    538         JMP  NX0                        ;GO CHECK AGAIN
0276  5e             537    539 NX3:    MOV  E,M                        ;COME HERE WHEN AGREED
0277  23             538    540         INX  H
0278  56             539    541         MOV  D,M                        ;DE=VALUE OF VAR.
0279  2a 0b 08       540    542         LHLD LOPINC
027c  e5             541    543         PUSH H
027d  7c             542    544         MOV  A,H
027e  aa             543    545         XRA  D
027f  7a             544    546         MOV  A,D
0280  19             545    547         DAD  D                          ;ADD ONE STEP
0281  fa 88 02       546    548         JM   NX4
0284  ac             547    549         XRA  H
0285  fa aa 02       548    550         JM   NX5
0288  eb             549    551 NX4:    XCHG
0289  2a 09 08       550    552         LHLD LOPVAR                     ;PUT IT BACK
028c  73             551    553         MOV  M,E
028d  23             552    554         INX  H
028e  72             553    555         MOV  M,D
028f  2a 0d 08       554    556         LHLD LOPLMT                     ;HL->LIMIT
0292  f1             555    557         POP  PSW                        ;OLD HL
0293  b7             556    558         ORA  A
0294  f2 98 02       557    559         JP   NX1                        ;STEP > 0
0297  eb             558    560         XCHG                            ;STEP < 0
0298  cd 9b 04       559    561 NX1:    CALL CKHLDE                     ;COMPARE WITH LIMIT
029b  d1             560    562         POP  D                          ;RESTORE TEXT POINTER
029c  da ac 02       561    563         JC   NX2                        ;OUTSIDE LIMIT
029f  2a 0f 08       562    564         LHLD LOPLN                      ;WITHIN LIMIT, GO
02a2  22 01 08       563    565         SHLD CURRNT                     ;BACK TO THE SAVED
02a5  2a 11 08       564    566         LHLD LOPPT                      ;'CURRNT' AND TEXT
02a8  eb             565    567         XCHG                            ;POINTER
02a9  f7             566    568         RST  6
02aa  e1             567    569 NX5:    POP  H
02ab  d1             568    570         POP  D
02ac  cd 00 06       569    571 NX2:    CALL POPA                       ;PURGE THIS LOOP
02af  f7             570    572         RST  6
                     571    573 ;
                     572    574 ;*************************************************************
                     573    575 ;
                     574    576 ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
                     575    577 ;
                     576    578 ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
                     577    579 ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
                     578    580 ;
                     579    581 ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
                     580    582 ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
                     581    583 ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
                     582    584 ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
                     583    585 ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
                     584    586 ; EXECUTION CONTINUES AT THE NEXT LINE.
                     585    587 ;
                     586    588 ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
                     587    589 ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
                     588    590 ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
                     589    591 ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
                     590    592 ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
                     591    593 ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
                     592    594 ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
                     593    595 ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
                     594    596 ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
                     595    597 ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
                     596    598 ;
                     597    599 ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
                     598    600 ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
                     599    601 ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
                     600    602 ; THIS IS HANDLED IN 'INPERR'.
                     601    603 ;
                     602    604 ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
                     603    605 ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
                     604    606 ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
                     605    607 ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
                     606    608 ; THIS IS DONE BY 'DEFLT'.
                     607    609 ;
02b0  21 00 00       608    610 REM:    LXI  H,0H                       ;*** REM ***
02b3  3e             609    611         DB   3EH                        ;THIS IS LIKE 'IF 0'
                     610    612 ;
02b4  df             611    613 IFF:    RST  3                          ;*** IF ***
02b5  7c             612    614         MOV  A,H                        ;IS THE EXPR.=0?
02b6  b5             613    615         ORA  L
02b7  c2 57 01       614    616         JNZ  RUNSML                     ;NO, CONTINUE
02ba  cd 59 05       615    617         CALL FNDSKP                     ;YES, SKIP REST OF LINE
02bd  d2 50 01       616    618         JNC  RUNTSL                     ;AND RUN THE NEXT LINE
02c0  c3 ba 00       617    619         JMP  RSTART                     ;IF NO NEXT, RE-START
                     618    620 ;
02c3  2a 07 08       619    621 INPERR: LHLD STKINP                     ;*** INPERR ***
02c6  f9             620    622         SPHL                            ;RESTORE OLD SP
02c7  e1             621    623         POP  H                          ;AND OLD 'CURRNT'
02c8  22 01 08       622    624         SHLD CURRNT
02cb  d1             623    625         POP  D                          ;AND OLD TEXT POINTER
02cc  d1             624    626         POP  D                          ;REDO INPUT
                     625    627 ;
02cd                 626    628 INPUT:                                  ;*** INPUT ***
02cd  d5             627    629 IP1:    PUSH D                          ;SAVE IN CASE OF ERROR
02ce  cd 6f 05       628    630         CALL QTSTG                      ;IS NEXT ITEM A STRING?
02d1  c3 db 02       629    631         JMP  IP2                        ;NO
02d4  ff             630    632         RST  7                          ;YES, BUT FOLLOWED BY A
02d5  da 15 03       631    633         JC   IP4                        ;VARIABLE?   NO.
02d8  c3 eb 02       632    634         JMP  IP3                        ;YES.  INPUT VARIABLE
02db  d5             633    635 IP2:    PUSH D                          ;SAVE FOR 'PRTSTG'
02dc  ff             634    636         RST  7                          ;MUST BE VARIABLE NOW
02dd  da c9 04       635    637         JC   QWHAT                      ;"WHAT?" IT IS NOT?
02e0  1a             636    638         LDAX D                          ;GET READY FOR 'PRTSTR'
02e1  4f             637    639         MOV  C,A
02e2  97             638    640         SUB  A
02e3  12             639    641         STAX D
02e4  d1             640    642         POP  D
02e5  cd 63 05       641    643         CALL PRTSTG                     ;PRINT STRING AS PROMPT
02e8  79             642    644         MOV  A,C                        ;RESTORE TEXT
02e9  1b             643    645         DCX  D
02ea  12             644    646         STAX D
02eb  d5             645    647 IP3:    PUSH D                          ;SAVE TEXT POINTER
02ec  eb             646    648         XCHG
02ed  2a 01 08       647    649         LHLD CURRNT                     ;ALSO SAVE 'CURRNT'
02f0  e5             648    650         PUSH H
02f1  21 cd 02       649    651         LXI  H,IP1                      ;A NEGATIVE NUMBER
02f4  22 01 08       650    652         SHLD CURRNT                     ;AS A FLAG
02f7  21 00 00       651    653         LXI  H,0H                       ;SAVE SP TOO
02fa  39             652    654         DAD  SP
02fb  22 07 08       653    655         SHLD STKINP
02fe  d5             654    656         PUSH D                          ;OLD HL
02ff  3e 3a          655    657         MVI  A,3AH                      ;PRINT THIS TOO
0301  cd fd 04       656    658         CALL GETLN                      ;AND GET A LINE
0304  11 37 1f       657    659         LXI  D,BUFFER                   ;POINTS TO BUFFER
0307  df             658    660         RST  3                          ;EVALUATE INPUT
0308  00             659    661         NOP                             ;CAN BE 'CALL ENDCHK'
0309  00             660    662         NOP
030a  00             661    663         NOP
030b  d1             662    664         POP  D                          ;OK, GET OLD HL
030c  eb             663    665         XCHG
030d  73             664    666         MOV  M,E                        ;SAVE VALUE IN VAR.
030e  23             665    667         INX  H
030f  72             666    668         MOV  M,D
0310  e1             667    669         POP  H                          ;GET OLD 'CURRNT'
0311  22 01 08       668    670         SHLD CURRNT
0314  d1             669    671         POP  D                          ;AND OLD TEXT POINTER
0315  f1             670    672 IP4:    POP  PSW                        ;PURGE JUNK IN STACK
0316  cf             671    673         RST  1                          ;IS NEXT CH. ','?
0317  2c             672    674         DB   ','
0318  03             673    675         DB   IP5-$-1
0319  c3 cd 02       674    676         JMP  IP1                        ;YES, MORE ITEMS.
031c  f7             675    677 IP5:    RST  6
                     676    678 ;
031d  1a             677    679 DEFLT:  LDAX D                          ;***  DEFLT ***
031e  fe 0d          678    680         CPI  CR                         ;EMPTY LINE IS OK
0320  ca 2c 03       679    681         JZ   LT1                        ;ELSE IT IS 'LET'
                     680    682 ;
0323  cd a3 04       681    683 LET:    CALL SETVAL                     ;*** LET ***
0326  cf             682    684         RST  1                          ;SET VALUE TO VAR.
0327  2c             683    685         DB   ','
0328  03             684    686         DB   LT1-$-1
0329  c3 23 03       685    687         JMP  LET                        ;ITEM BY ITEM
032c  f7             686    688 LT1:    RST  6                          ;UNTIL FINISH
                     687    689 ;
                     688    690 ;*************************************************************
                     689    691 ;
                     690    692 ; *** EXPR ***
                     691    693 ;
                     692    694 ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
                     693    695 ; <EXPR>::<EXPR2>
                     694    696 ;         <EXPR2><REL.OP.><EXPR2>
                     695    697 ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
                     696    698 ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
                     697    699 ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
                     698    700 ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
                     699    701 ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
                     700    702 ; <EXPR4>::=<VARIABLE>
                     701    703 ;           <FUNCTION>
                     702    704 ;           (<EXPR>)
                     703    705 ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
                     704    706 ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
                     705    707 ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
                     706    708 ;
                     707    709 ;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
                     708    710 ;       PUSH H                          ;SAVE <EXPR2> VALUE
032d  21 24 07       709    711 EXPR1:  LXI  H,TAB8-1                   ;LOOKUP REL.OP.
0330  c3 3e 07       710    712         JMP  EXEC                       ;GO DO IT
0333  cd 5c 03       711    713 XP11:   CALL XP18                       ;REL.OP.">="
0336  d8             712    714         RC                              ;NO, RETURN HL=0
0337  6f             713    715         MOV  L,A                        ;YES, RETURN HL=1
0338  c9             714    716         RET
0339  cd 5c 03       715    717 XP12:   CALL XP18                       ;REL.OP."#"
033c  c8             716    718         RZ                              ;FALSE, RETURN HL=0
033d  6f             717    719         MOV  L,A                        ;TRUE, RETURN HL=1
033e  c9             718    720         RET
033f  cd 5c 03       719    721 XP13:   CALL XP18                       ;REL.OP.">"
0342  c8             720    722         RZ                              ;FALSE
0343  d8             721    723         RC                              ;ALSO FALSE, HL=0
0344  6f             722    724         MOV  L,A                        ;TRUE, HL=1
0345  c9             723    725         RET
0346  cd 5c 03       724    726 XP14:   CALL XP18                       ;REL.OP."<="
0349  6f             725    727         MOV  L,A                        ;SET HL=1
034a  c8             726    728         RZ                              ;REL. TRUE, RETURN
034b  d8             727    729         RC
034c  6c             728    730         MOV  L,H                        ;ELSE SET HL=0
034d  c9             729    731         RET
034e  cd 5c 03       730    732 XP15:   CALL XP18                       ;REL.OP."="
0351  c0             731    733         RNZ                             ;FALSE, RETURN HL=0
0352  6f             732    734         MOV  L,A                        ;ELSE SET HL=1
0353  c9             733    735         RET
0354  cd 5c 03       734    736 XP16:   CALL XP18                       ;REL.OP."<"
0357  d0             735    737         RNC                             ;FALSE, RETURN HL=0
0358  6f             736    738         MOV  L,A                        ;ELSE SET HL=1
0359  c9             737    739         RET
035a  e1             738    740 XP17:   POP  H                          ;NOT .REL.OP
035b  c9             739    741         RET                             ;RETURN HL=<EXPR2>
035c  79             740    742 XP18:   MOV  A,C                        ;SUBROUTINE FOR ALL
035d  e1             741    743         POP  H                          ;REL.OP.'S
035e  c1             742    744         POP  B
035f  e5             743    745         PUSH H                          ;REVERSE TOP OF STACK
0360  c5             744    746         PUSH B
0361  4f             745    747         MOV  C,A
0362  cd 71 03       746    748         CALL EXPR2                      ;GET 2ND <EXPR2>
0365  eb             747    749         XCHG                            ;VALUE IN DE NOW
0366  e3             748    750         XTHL                            ;1ST <EXPR2> IN HL
0367  cd 9b 04       749    751         CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
036a  d1             750    752         POP  D                          ;RESTORE TEXT POINTER
036b  21 00 00       751    753         LXI  H,0H                       ;SET HL=0, A=1
036e  3e 01          752    754         MVI  A,1
0370  c9             753    755         RET
                     754    756 ;
0371  cf             755    757 EXPR2:  RST  1                          ;NEGATIVE SIGN?
0372  2d             756    758         DB   '-'
0373  06             757    759         DB   XP21-$-1
0374  21 00 00       758    760         LXI  H,0H                       ;YES, FAKE '0-'
0377  c3 9b 03       759    761         JMP  XP26                       ;TREAT LIKE SUBTRACT
037a  cf             760    762 XP21:   RST  1                          ;POSITIVE SIGN? IGNORE
037b  2b             761    763         DB   '+'
037c  00             762    764         DB   XP22-$-1
037d  cd a5 03       763    765 XP22:   CALL EXPR3                      ;1ST <EXPR3>
0380  cf             764    766 XP23:   RST  1                          ;ADD?
0381  2b             765    767         DB   '+'
0382  15             766    768         DB   XP25-$-1
0383  e5             767    769         PUSH H                          ;YES, SAVE VALUE
0384  cd a5 03       768    770         CALL EXPR3                      ;GET 2ND <EXPR3>
0387  eb             769    771 XP24:   XCHG                            ;2ND IN DE
0388  e3             770    772         XTHL                            ;1ST IN HL
0389  7c             771    773         MOV  A,H                        ;COMPARE SIGN
038a  aa             772    774         XRA  D
038b  7a             773    775         MOV  A,D
038c  19             774    776         DAD  D
038d  d1             775    777         POP  D                          ;RESTORE TEXT POINTER
038e  fa 80 03       776    778         JM   XP23                       ;1ST AND 2ND SIGN DIFFER
0391  ac             777    779         XRA  H                          ;1ST AND 2ND SIGN EQUAL
0392  f2 80 03       778    780         JP   XP23                       ;SO IS RESULT
0395  c3 9f 00       779    781         JMP  QHOW                       ;ELSE WE HAVE OVERFLOW
0398  cf             780    782 XP25:   RST  1                          ;SUBTRACT?
0399  2d             781    783         DB   '-'
039a  86             782    784         DB   XP42-$-1
039b  e5             783    785 XP26:   PUSH H                          ;YES, SAVE 1ST <EXPR3>
039c  cd a5 03       784    786         CALL EXPR3                      ;GET 2ND <EXPR3>
039f  cd 86 04       785    787         CALL CHGSGN                     ;NEGATE
03a2  c3 87 03       786    788         JMP  XP24                       ;AND ADD THEM
                     787    789 ;
03a5  cd 05 04       788    790 EXPR3:  CALL EXPR4                      ;GET 1ST <EXPR4>
03a8  cf             789    791 XP31:   RST  1                          ;MULTIPLY?
03a9  2a             790    792         DB   '*'
03aa  2d             791    793         DB   XP34-$-1
03ab  e5             792    794         PUSH H                          ;YES, SAVE 1ST
03ac  cd 05 04       793    795         CALL EXPR4                      ;AND GET 2ND <EXPR4>
03af  06 00          794    796         MVI  B,0H                       ;CLEAR B FOR SIGN
03b1  cd 83 04       795    797         CALL CHKSGN                     ;CHECK SIGN
03b4  e3             796    798         XTHL                            ;1ST IN HL
03b5  cd 83 04       797    799         CALL CHKSGN                     ;CHECK SIGN OF 1ST
03b8  eb             798    800         XCHG
03b9  e3             799    801         XTHL
03ba  7c             800    802         MOV  A,H                        ;IS HL > 255 ?
03bb  b7             801    803         ORA  A
03bc  ca c5 03       802    804         JZ   XP32                       ;NO
03bf  7a             803    805         MOV  A,D                        ;YES, HOW ABOUT DE
03c0  b2             804    806         ORA  D
03c1  eb             805    807         XCHG                            ;PUT SMALLER IN HL
03c2  c2 a0 00       806    808         JNZ  AHOW                       ;ALSO >, WILL OVERFLOW
03c5  7d             807    809 XP32:   MOV  A,L                        ;THIS IS DUMB
03c6  21 00 00       808    810         LXI  H,0H                       ;CLEAR RESULT
03c9  b7             809    811         ORA  A                          ;ADD AND COUNT
03ca  ca f7 03       810    812         JZ   XP35
03cd  19             811    813 XP33:   DAD  D
03ce  da a0 00       812    814         JC   AHOW                       ;OVERFLOW
03d1  3d             813    815         DCR  A
03d2  c2 cd 03       814    816         JNZ  XP33
03d5  c3 f7 03       815    817         JMP  XP35                       ;FINISHED
03d8  cf             816    818 XP34:   RST  1                          ;DIVIDE?
03d9  2f             817    819         DB   '/'
03da  46             818    820         DB   XP42-$-1
03db  e5             819    821         PUSH H                          ;YES, SAVE 1ST <EXPR4>
03dc  cd 05 04       820    822         CALL EXPR4                      ;AND GET THE SECOND ONE
03df  06 00          821    823         MVI  B,0H                       ;CLEAR B FOR SIGN
03e1  cd 83 04       822    824         CALL CHKSGN                     ;CHECK SIGN OF 2ND
03e4  e3             823    825         XTHL                            ;GET 1ST IN HL
03e5  cd 83 04       824    826         CALL CHKSGN                     ;CHECK SIGN OF 1ST
03e8  eb             825    827         XCHG
03e9  e3             826    828         XTHL
03ea  eb             827    829         XCHG
03eb  7a             828    830         MOV  A,D                        ;DIVIDE BY 0?
03ec  b3             829    831         ORA  E
03ed  ca a0 00       830    832         JZ   AHOW                       ;SAY "HOW?"
03f0  c5             831    833         PUSH B                          ;ELSE SAVE SIGN
03f1  cd 66 04       832    834         CALL DIVIDE                     ;USE SUBROUTINE
03f4  60             833    835         MOV  H,B                        ;RESULT IN HL NOW
03f5  69             834    836         MOV  L,C
03f6  c1             835    837         POP  B                          ;GET SIGN BACK
03f7  d1             836    838 XP35:   POP  D                          ;AND TEXT POINTER
03f8  7c             837    839         MOV  A,H                        ;HL MUST BE +
03f9  b7             838    840         ORA  A
03fa  fa 9f 00       839    841         JM   QHOW                       ;ELSE IT IS OVERFLOW
03fd  78             840    842         MOV  A,B
03fe  b7             841    843         ORA  A
03ff  fc 86 04       842    844         CM   CHGSGN                     ;CHANGE SIGN IF NEEDED
0402  c3 a8 03       843    845         JMP  XP31                       ;LOOK FOR MORE TERMS
                     844    846 ;
0405  21 04 07       845    847 EXPR4:  LXI  H,TAB4-1                   ;FIND FUNCTION IN TAB4
0408  c3 3e 07       846    848         JMP  EXEC                       ;AND GO DO IT
040b  ff             847    849 XP40:   RST  7                          ;NO, NOT A FUNCTION
040c  da 14 04       848    850         JC   XP41                       ;NOR A VARIABLE
040f  7e             849    851         MOV  A,M                        ;VARIABLE
0410  23             850    852         INX  H
0411  66             851    853         MOV  H,M                        ;VALUE IN HL
0412  6f             852    854         MOV  L,A
0413  c9             853    855         RET
0414  cd 77 00       854    856 XP41:   CALL TSTNUM                     ;OR IS IT A NUMBER
0417  78             855    857         MOV  A,B                        ;# OF DIGIT
0418  b7             856    858         ORA  A
0419  c0             857    859         RNZ                             ;OK
041a  cf             858    860 PARN:   RST  1
041b  28             859    861         DB   '('
041c  05             860    862         DB   XP43-$-1
041d  df             861    863         RST  3                          ;"(EXPR)"
041e  cf             862    864         RST  1
041f  29             863    865         DB   ')'
0420  01             864    866         DB   XP43-$-1
0421  c9             865    867 XP42:   RET
0422  c3 c9 04       866    868 XP43:   JMP  QWHAT                      ;ELSE SAY: "WHAT?"
                     867    869 ;
0425  cd 1a 04       868    870 RND:    CALL PARN                       ;*** RND(EXPR) ***
0428  7c             869    871         MOV  A,H                        ;EXPR MUST BE +
0429  b7             870    872         ORA  A
042a  fa 9f 00       871    873         JM   QHOW
042d  b5             872    874         ORA  L                          ;AND NON-ZERO
042e  ca 9f 00       873    875         JZ   QHOW
0431  d5             874    876         PUSH D                          ;SAVE BOTH
0432  e5             875    877         PUSH H
0433  2a 13 08       876    878         LHLD RANPNT                     ;GET MEMORY AS RANDOM
0436  11 6c 07       877    879         LXI  D,LSTROM                   ;NUMBER
0439  e7             878    880         RST  4
043a  da 40 04       879    881         JC   RA1                        ;WRAP AROUND IF LAST
043d  21 00 00       880    882         LXI  H,START
0440  5e             881    883 RA1:    MOV  E,M
0441  23             882    884         INX  H
0442  56             883    885         MOV  D,M
0443  22 13 08       884    886         SHLD RANPNT
0446  e1             885    887         POP  H
0447  eb             886    888         XCHG
0448  c5             887    889         PUSH B
0449  cd 66 04       888    890         CALL DIVIDE                     ;RND(N)=MOD(M,N)+1
044c  c1             889    891         POP  B
044d  d1             890    892         POP  D
044e  23             891    893         INX  H
044f  c9             892    894         RET
                     893    895 ;
0450  cd 1a 04       894    896 ABS:    CALL PARN                       ;*** ABS(EXPR) ***
0453  1b             895    897         DCX  D
0454  cd 83 04       896    898         CALL CHKSGN                     ;CHECK SIGN
0457  13             897    899         INX  D
0458  c9             898    900         RET
                     899    901 ;
0459  2a 15 08       900    902 SIZE:   LHLD TXTUNF                     ;*** SIZE ***
045c  d5             901    903         PUSH D                          ;GET THE NUMBER OF FREE
045d  eb             902    904         XCHG                            ;BYTES BETWEEN 'TXTUNF'
045e  21 00 1f       903    905         LXI  H,VARBGN                   ;AND 'VARBGN'
0461  cd 7c 04       904    906         CALL SUBDE
0464  d1             905    907         POP  D
0465  c9             906    908         RET
                     907    909 ;
                     908    910 ;*************************************************************
                     909    911 ;
                     910    912 ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
                     911    913 ;
                     912    914 ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
                     913    915 ;
                     914    916 ; 'SUBDE' SUBSTRACTS DE FROM HL
                     915    917 ;
                     916    918 ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
                     917    919 ; SIGN AND FLIP SIGN OF B.
                     918    920 ;
                     919    921 ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
                     920    922 ;
                     921    923 ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
                     922    924 ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
                     923    925 ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
                     924    926 ;
0466  e5             925    927 DIVIDE: PUSH H                          ;*** DIVIDE ***
0467  6c             926    928         MOV  L,H                        ;DIVIDE H BY DE
0468  26 00          927    929         MVI  H,0
046a  cd 71 04       928    930         CALL DV1
046d  41             929    931         MOV  B,C                        ;SAVE RESULT IN B
046e  7d             930    932         MOV  A,L                        ;(REMINDER+L)/DE
046f  e1             931    933         POP  H
0470  67             932    934         MOV  H,A
0471  0e ff          933    935 DV1:    MVI  C,0FFH                     ;RESULT IN C
0473  0c             934    936 DV2:    INR  C                          ;DUMB ROUTINE
0474  cd 7c 04       935    937         CALL SUBDE                      ;DIVIDE BY SUBTRACT
0477  d2 73 04       936    938         JNC  DV2                        ;AND COUNT
047a  19             937    939         DAD  D
047b  c9             938    940         RET
                     939    941 ;
047c  7d             940    942 SUBDE:  MOV  A,L                        ;*** SUBDE ***
047d  93             941    943         SUB  E                          ;SUBSTRACT DE FROM
047e  6f             942    944         MOV  L,A                        ;HL
047f  7c             943    945         MOV  A,H
0480  9a             944    946         SBB  D
0481  67             945    947         MOV  H,A
0482  c9             946    948         RET
                     947    949 ;
0483  7c             948    950 CHKSGN: MOV  A,H                        ;*** CHKSGN ***
0484  b7             949    951         ORA  A                          ;CHECK SIGN OF HL
0485  f0             950    952         RP                              ;IF -, CHANGE SIGN
                     951    953 ;
0486  7c             952    954 CHGSGN: MOV  A,H                        ;*** CHGSGN ***
0487  b5             953    955         ORA  L                          ;*UM*
0488  c8             954    956         RZ                              ;*UM* NOT ON ZERO VALUE
0489  7c             955    957         MOV  A,H                        ;*UM*
048a  f5             956    958         PUSH PSW
048b  2f             957    959         CMA                             ;CHANGE SIGN OF HL
048c  67             958    960         MOV  H,A
048d  7d             959    961         MOV  A,L
048e  2f             960    962         CMA
048f  6f             961    963         MOV  L,A
0490  23             962    964         INX  H
0491  f1             963    965         POP  PSW
0492  ac             964    966         XRA  H
0493  f2 9f 00       965    967         JP   QHOW
0496  78             966    968         MOV  A,B                        ;AND ALSO FLIP B
0497  ee 80          967    969         XRI  80H
0499  47             968    970         MOV  B,A
049a  c9             969    971         RET
                     970    972 ;
049b  7c             971    973 CKHLDE: MOV  A,H
049c  aa             972    974         XRA  D                          ;SAME SIGN?
049d  f2 a1 04       973    975         JP   CK1                        ;YES, COMPARE
04a0  eb             974    976         XCHG                            ;NO, XCH AND COMP
04a1  e7             975    977 CK1:    RST  4
04a2  c9             976    978         RET
                     977    979 ;
                     978    980 ;*************************************************************
                     979    981 ;
                     980    982 ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
                     981    983 ;
                     982    984 ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
                     983    985 ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
                     984    986 ; TO THAT VALUE.
                     985    987 ;
                     986    988 ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
                     987    989 ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
                     988    990 ; NEXT LINE AND CONTINUE FROM THERE.
                     989    991 ;
                     990    992 ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
                     991    993 ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
                     992    994 ;
                     993    995 ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
                     994    996 ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
                     995    997 ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
                     996    998 ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
                     997    999 ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
                     998   1000 ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
                     999   1001 ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
                    1000   1002 ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
                    1001   1003 ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
                    1002   1004 ;
                    1003   1005 ; RELATED TO 'ERROR' ARE THE FOLLOWING:
                    1004   1006 ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
                    1005   1007 ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
                    1006   1008 ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
                    1007   1009 ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
                    1008   1010 ;
04a3  ff            1009   1011 SETVAL: RST  7                          ;*** SETVAL ***
04a4  da c9 04      1010   1012         JC   QWHAT                      ;"WHAT?" NO VARIABLE
04a7  e5            1011   1013         PUSH H                          ;SAVE ADDRESS OF VAR.
04a8  cf            1012   1014         RST  1                          ;PASS "=" SIGN
04a9  3d            1013   1015         DB   '='
04aa  08            1014   1016         DB   SV1-$-1
04ab  df            1015   1017         RST  3                          ;EVALUATE EXPR.
04ac  44            1016   1018         MOV  B,H                        ;VALUE IS IN BC NOW
04ad  4d            1017   1019         MOV  C,L
04ae  e1            1018   1020         POP  H                          ;GET ADDRESS
04af  71            1019   1021         MOV  M,C                        ;SAVE VALUE
04b0  23            1020   1022         INX  H
04b1  70            1021   1023         MOV  M,B
04b2  c9            1022   1024         RET
04b3  c3 c9 04      1023   1025 SV1:    JMP  QWHAT                      ;NO "=" SIGN
                    1024   1026 ;
04b6  cf            1025   1027 FIN:    RST  1                          ;*** FIN ***
04b7  3b            1026   1028         DB   3BH
04b8  04            1027   1029         DB   FI1-$-1
04b9  f1            1028   1030         POP  PSW                        ;";", PURGE RET. ADDR.
04ba  c3 57 01      1029   1031         JMP  RUNSML                     ;CONTINUE SAME LINE
04bd  cf            1030   1032 FI1:    RST  1                          ;NOT ";", IS IT CR?
04be  0d            1031   1033         DB   CR
04bf  04            1032   1034         DB   FI2-$-1
04c0  f1            1033   1035         POP  PSW                        ;YES, PURGE RET. ADDR.
04c1  c3 47 01      1034   1036         JMP  RUNNXL                     ;RUN NEXT LINE
04c4  c9            1035   1037 FI2:    RET                             ;ELSE RETURN TO CALLER
                    1036   1038 ;
04c5  ef            1037   1039 ENDCHK: RST  5                          ;*** ENDCHK ***
04c6  fe 0d         1038   1040         CPI  CR                         ;END WITH CR?
04c8  c8            1039   1041         RZ                              ;OK, ELSE SAY: "WHAT?"
                    1040   1042 ;
04c9  d5            1041   1043 QWHAT:  PUSH D                          ;*** QWHAT ***
04ca  11 ae 00      1042   1044 AWHAT:  LXI  D,WHAT                     ;*** AWHAT ***
04cd  97            1043   1045 ERROR:  SUB  A                          ;*** ERROR ***
04ce  cd 63 05      1044   1046         CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
04d1  d1            1045   1047         POP  D                          ;OR 'SORRY'
04d2  1a            1046   1048         LDAX D                          ;SAVE THE CHARACTER
04d3  f5            1047   1049         PUSH PSW                        ;AT WHERE OLD DE ->
04d4  97            1048   1050         SUB  A                          ;AND PUT A 0 THERE
04d5  12            1049   1051         STAX D
04d6  2a 01 08      1050   1052         LHLD CURRNT                     ;GET CURRENT LINE #
04d9  e5            1051   1053         PUSH H
04da  7e            1052   1054         MOV  A,M                        ;CHECK THE VALUE
04db  23            1053   1055         INX  H
04dc  b6            1054   1056         ORA  M
04dd  d1            1055   1057         POP  D
04de  ca ba 00      1056   1058         JZ   RSTART                     ;IF ZERO, JUST RESTART
04e1  7e            1057   1059         MOV  A,M                        ;IF NEGATIVE,
04e2  b7            1058   1060         ORA  A
04e3  fa c3 02      1059   1061         JM   INPERR                     ;REDO INPUT
04e6  cd d5 05      1060   1062         CALL PRTLN                      ;ELSE PRINT THE LINE
04e9  1b            1061   1063         DCX  D                          ;UPTO WHERE THE 0 IS
04ea  f1            1062   1064         POP  PSW                        ;RESTORE THE CHARACTER
04eb  12            1063   1065         STAX D
04ec  3e 3f         1064   1066         MVI  A,3FH                      ;PRINT A "?"
04ee  d7            1065   1067         RST  2
04ef  97            1066   1068         SUB  A                          ;AND THE REST OF THE
04f0  cd 63 05      1067   1069         CALL PRTSTG                     ;LINE
04f3  c3 ba 00      1068   1070         JMP  RSTART                     ;THEN RESTART
                    1069   1071 ;
04f6  d5            1070   1072 QSORRY: PUSH D                          ;*** QSORRY ***
04f7  11 b4 00      1071   1073 ASORRY: LXI  D,SORRY                    ;*** ASORRY ***
04fa  c3 cd 04      1072   1074         JMP  ERROR
                    1073   1075 ;
                    1074   1076 ;*************************************************************
                    1075   1077 ;
                    1076   1078 ; *** GETLN *** FNDLN (& FRIENDS) ***
                    1077   1079 ;
                    1078   1080 ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
                    1079   1081 ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
                    1080   1082 ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
                    1081   1083 ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
                    1082   1084 ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
                    1083   1085 ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
                    1084   1086 ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
                    1085   1087 ;
                    1086   1088 ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
                    1087   1089 ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
                    1088   1090 ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
                    1089   1091 ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
                    1090   1092 ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
                    1091   1093 ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
                    1092   1094 ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
                    1093   1095 ; LINE, FLAGS ARE C & NZ.
                    1094   1096 ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
                    1095   1097 ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
                    1096   1098 ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
                    1097   1099 ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
                    1098   1100 ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
                    1099   1101 ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
                    1100   1102 ;
04fd  d7            1101   1103 GETLN:  RST  2                          ;*** GETLN ***
04fe  11 37 1f      1102   1104         LXI  D,BUFFER                   ;PROMPT AND INIT.
0501  cd 87 06      1103   1105 GL1:    CALL CHKIO                      ;CHECK KEYBOARD
0504  ca 01 05      1104   1106         JZ   GL1                        ;NO INPUT, WAIT
0507  fe 7f         1105   1107         CPI  7FH                        ;DELETE LAST CHARACTER?
0509  ca 26 05      1106   1108         JZ   GL3                        ;YES
050c  d7            1107   1109         RST  2                          ;INPUT, ECHO BACK
050d  fe 0a         1108   1110         CPI  0AH                        ;IGNORE LF
050f  ca 01 05      1109   1111         JZ   GL1
0512  b7            1110   1112         ORA  A                          ;IGNORE NULL
0513  ca 01 05      1111   1113         JZ   GL1
0516  fe 7d         1112   1114         CPI  7DH                        ;DELETE THE WHOLE LINE?
0518  ca 33 05      1113   1115         JZ   GL4                        ;YES
051b  12            1114   1116         STAX D                          ;ELSE SAVE INPUT
051c  13            1115   1117         INX  D                          ;AND BUMP POINTER
051d  fe 0d         1116   1118         CPI  0DH                        ;WAS IT CR?
051f  c8            1117   1119         RZ                              ;YES, END OF LINE
0520  7b            1118   1120         MOV  A,E                        ;ELSE MORE FREE ROOM?
0521  fe 77         1119   1121         CPI  BUFEND AND 0FFH
0523  c2 01 05      1120   1122         JNZ  GL1                        ;YES, GET NEXT INPUT
0526  7b            1121   1123 GL3:    MOV  A,E                        ;DELETE LAST CHARACTER
0527  fe 37         1122   1124         CPI  BUFFER AND 0FFH            ;BUT DO WE HAVE ANY?
0529  ca 33 05      1123   1125         JZ   GL4                        ;NO, REDO WHOLE LINE
052c  1b            1124   1126         DCX  D                          ;YES, BACKUP POINTER
052d  3e 5c         1125   1127         MVI  A,5CH                      ;AND ECHO A BACK-SLASH
052f  d7            1126   1128         RST  2
0530  c3 01 05      1127   1129         JMP  GL1                        ;GO GET NEXT INPUT
0533  cd 0e 00      1128   1130 GL4:    CALL CRLF                       ;REDO ENTIRE LINE
0536  3e 5e         1129   1131         MVI  A,05EH                     ;CR, LF AND UP-ARROW
0538  c3 fd 04      1130   1132         JMP  GETLN
                    1131   1133 ;
053b  7c            1132   1134 FNDLN:  MOV  A,H                        ;*** FNDLN ***
053c  b7            1133   1135         ORA  A                          ;CHECK SIGN OF HL
053d  fa 9f 00      1134   1136         JM   QHOW                       ;IT CANNOT BE -
0540  11 17 08      1135   1137         LXI  D,TXTBGN                   ;INIT TEXT POINTER
                    1136   1138 ;
0543                1137   1139 FNDLP:                                  ;*** FDLNP ***
0543  e5            1138   1140 FL1:    PUSH H                          ;SAVE LINE #
0544  2a 15 08      1139   1141         LHLD TXTUNF                     ;CHECK IF WE PASSED END
0547  2b            1140   1142         DCX  H
0548  e7            1141   1143         RST  4
0549  e1            1142   1144         POP  H                          ;GET LINE # BACK
054a  d8            1143   1145         RC                              ;C,NZ PASSED END
054b  1a            1144   1146         LDAX D                          ;WE DID NOT, GET BYTE 1
054c  95            1145   1147         SUB  L                          ;IS THIS THE LINE?
054d  47            1146   1148         MOV  B,A                        ;COMPARE LOW ORDER
054e  13            1147   1149         INX  D
054f  1a            1148   1150         LDAX D                          ;GET BYTE 2
0550  9c            1149   1151         SBB  H                          ;COMPARE HIGH ORDER
0551  da 58 05      1150   1152         JC   FL2                        ;NO, NOT THERE YET
0554  1b            1151   1153         DCX  D                          ;ELSE WE EITHER FOUND
0555  b0            1152   1154         ORA  B                          ;IT, OR IT IS NOT THERE
0556  c9            1153   1155         RET                             ;NC,Z:FOUND, NC,NZ:NO
                    1154   1156 ;
0557                1155   1157 FNDNXT:                                 ;*** FNDNXT ***
0557  13            1156   1158         INX  D                          ;FIND NEXT LINE
0558  13            1157   1159 FL2:    INX  D                          ;JUST PASSED BYTE 1 & 2
                    1158   1160 ;
0559  1a            1159   1161 FNDSKP: LDAX D                          ;*** FNDSKP ***
055a  fe 0d         1160   1162         CPI  CR                         ;TRY TO FIND CR
055c  c2 58 05      1161   1163         JNZ  FL2                        ;KEEP LOOKING
055f  13            1162   1164         INX  D                          ;FOUND CR, SKIP OVER
0560  c3 43 05      1163   1165         JMP  FL1                        ;CHECK IF END OF TEXT
                    1164   1166 ;
                    1165   1167 ;*************************************************************
                    1166   1168 ;
                    1167   1169 ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
                    1168   1170 ;
                    1169   1171 ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
                    1170   1172 ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
                    1171   1173 ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
                    1172   1174 ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
                    1173   1175 ;
                    1174   1176 ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
                    1175   1177 ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
                    1176   1178 ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
                    1177   1179 ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
                    1178   1180 ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
                    1179   1181 ; OVER (USUALLY A JUMP INSTRUCTION.
                    1180   1182 ;
                    1181   1183 ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
                    1182   1184 ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
                    1183   1185 ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
                    1184   1186 ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
                    1185   1187 ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
                    1186   1188 ;
                    1187   1189 ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
                    1188   1190 ;
0563  47            1189   1191 PRTSTG: MOV  B,A                        ;*** PRTSTG ***
0564  1a            1190   1192 PS1:    LDAX D                          ;GET A CHARACTER
0565  13            1191   1193         INX  D                          ;BUMP POINTER
0566  b8            1192   1194         CMP  B                          ;SAME AS OLD A?
0567  c8            1193   1195         RZ                              ;YES, RETURN
0568  d7            1194   1196         RST  2                          ;ELSE PRINT IT
0569  fe 0d         1195   1197         CPI  CR                         ;WAS IT A CR?
056b  c2 64 05      1196   1198         JNZ  PS1                        ;NO, NEXT
056e  c9            1197   1199         RET                             ;YES, RETURN
                    1198   1200 ;
056f  cf            1199   1201 QTSTG:  RST  1                          ;*** QTSTG ***
0570  22            1200   1202         DB   '"'
0571  0f            1201   1203         DB   QT3-$-1
0572  3e 22         1202   1204         MVI  A,22H                      ;IT IS A "
0574  cd 63 05      1203   1205 QT1:    CALL PRTSTG                     ;PRINT UNTIL ANOTHER
0577  fe 0d         1204   1206         CPI  CR                         ;WAS LAST ONE A CR?
0579  e1            1205   1207         POP  H                          ;RETURN ADDRESS
057a  ca 47 01      1206   1208         JZ   RUNNXL                     ;WAS CR, RUN NEXT LINE
057d  23            1207   1209 QT2:    INX  H                          ;SKIP 3 BYTES ON RETURN
057e  23            1208   1210         INX  H
057f  23            1209   1211         INX  H
0580  e9            1210   1212         PCHL                            ;RETURN
0581  cf            1211   1213 QT3:    RST  1                          ;IS IT A '?
0582  27            1212   1214         DB   27H
0583  05            1213   1215         DB   QT4-$-1
0584  3e 27         1214   1216         MVI  A,27H                      ;YES, DO THE SAME
0586  c3 74 05      1215   1217         JMP  QT1                        ;AS IN "
0589  cf            1216   1218 QT4:    RST  1                          ;IS IT BACK-ARROW?
058a  5f            1217   1219         DB   5FH
058b  08            1218   1220         DB   QT5-$-1
058c  3e 8d         1219   1221         MVI  A,08DH                     ;YES, CR WITHOUT LF
058e  d7            1220   1222         RST  2                          ;DO IT TWICE TO GIVE
058f  d7            1221   1223         RST  2                          ;TTY ENOUGH TIME
0590  e1            1222   1224         POP  H                          ;RETURN ADDRESS
0591  c3 7d 05      1223   1225         JMP  QT2
0594  c9            1224   1226 QT5:    RET                             ;NONE OF ABOVE
                    1225   1227 ;
0595  06 00         1226   1228 PRTNUM: MVI  B,0                        ;*** PRTNUM ***
0597  cd 83 04      1227   1229         CALL CHKSGN                     ;CHECK SIGN
059a  f2 a0 05      1228   1230         JP   PN1                        ;NO SIGN
059d  06 2d         1229   1231         MVI  B,'-'                      ;B=SIGN
059f  0d            1230   1232         DCR  C                          ;'-' TAKES SPACE
05a0  d5            1231   1233 PN1:    PUSH D                          ;SAVE
05a1  11 0a 00      1232   1234         LXI  D,0AH                      ;DECIMAL
05a4  d5            1233   1235         PUSH D                          ;SAVE AS A FLAG
05a5  0d            1234   1236         DCR  C                          ;C=SPACES
05a6  c5            1235   1237         PUSH B                          ;SAVE SIGN & SPACE
05a7  cd 66 04      1236   1238 PN2:    CALL DIVIDE                     ;DIVIDE HL BY 10
05aa  78            1237   1239         MOV  A,B                        ;RESULT 0?
05ab  b1            1238   1240         ORA  C
05ac  ca b7 05      1239   1241         JZ   PN3                        ;YES, WE GOT ALL
05af  e3            1240   1242         XTHL                            ;NO, SAVE REMAINDER
05b0  2d            1241   1243         DCR  L                          ;AND COUNT SPACE
05b1  e5            1242   1244         PUSH H                          ;HL IS OLD BC
05b2  60            1243   1245         MOV  H,B                        ;MOVE RESULT TO BC
05b3  69            1244   1246         MOV  L,C
05b4  c3 a7 05      1245   1247         JMP  PN2                        ;AND DIVIDE BY 10
05b7  c1            1246   1248 PN3:    POP  B                          ;WE GOT ALL DIGITS IN
05b8  0d            1247   1249 PN4:    DCR  C                          ;THE STACK
05b9  79            1248   1250         MOV  A,C                        ;LOOK AT SPACE COUNT
05ba  b7            1249   1251         ORA  A
05bb  fa c4 05      1250   1252         JM   PN5                        ;NO LEADING BLANKS
05be  3e 20         1251   1253         MVI  A,20H                      ;LEADING BLANKS
05c0  d7            1252   1254         RST  2
05c1  c3 b8 05      1253   1255         JMP  PN4                        ;MORE?
05c4  78            1254   1256 PN5:    MOV  A,B                        ;PRINT SIGN
05c5  b7            1255   1257         ORA  A
05c6  c4 10 00      1256   1258         CNZ  10H
05c9  5d            1257   1259         MOV  E,L                        ;LAST REMAINDER IN E
05ca  7b            1258   1260 PN6:    MOV  A,E                        ;CHECK DIGIT IN E
05cb  fe 0a         1259   1261         CPI  0AH                        ;10 IS FLAG FOR NO MORE
05cd  d1            1260   1262         POP  D
05ce  c8            1261   1263         RZ                              ;IF SO, RETURN
05cf  c6 30         1262   1264         ADI  30H                        ;ELSE CONVERT TO ASCII
05d1  d7            1263   1265         RST  2                          ;AND PRINT THE DIGIT
05d2  c3 ca 05      1264   1266         JMP  PN6                        ;GO BACK FOR MORE
                    1265   1267 ;
05d5  1a            1266   1268 PRTLN:  LDAX D                          ;*** PRTLN ***
05d6  6f            1267   1269         MOV  L,A                        ;LOW ORDER LINE #
05d7  13            1268   1270         INX  D
05d8  1a            1269   1271         LDAX D                          ;HIGH ORDER
05d9  67            1270   1272         MOV  H,A
05da  13            1271   1273         INX  D
05db  0e 04         1272   1274         MVI  C,4H                       ;PRINT 4 DIGIT LINE #
05dd  cd 95 05      1273   1275         CALL PRTNUM
05e0  3e 20         1274   1276         MVI  A,20H                      ;FOLLOWED BY A BLANK
05e2  d7            1275   1277         RST  2
05e3  97            1276   1278         SUB  A                          ;AND THEN THE NEXT
05e4  cd 63 05      1277   1279         CALL PRTSTG
05e7  c9            1278   1280         RET
                    1279   1281 ;
                    1280   1282 ;*************************************************************
                    1281   1283 ;
                    1282   1284 ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
                    1283   1285 ;
                    1284   1286 ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
                    1285   1287 ; DE = HL
                    1286   1288 ;
                    1287   1289 ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
                    1288   1290 ; UNTIL DE = BC
                    1289   1291 ;
                    1290   1292 ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
                    1291   1293 ; STACK
                    1292   1294 ;
                    1293   1295 ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
                    1294   1296 ; STACK
                    1295   1297 ;
05e8  e7            1296   1298 MVUP:   RST  4                          ;*** MVUP ***
05e9  c8            1297   1299         RZ                              ;DE = HL, RETURN
05ea  1a            1298   1300         LDAX D                          ;GET ONE BYTE
05eb  02            1299   1301         STAX B                          ;MOVE IT
05ec  13            1300   1302         INX  D                          ;INCREASE BOTH POINTERS
05ed  03            1301   1303         INX  B
05ee  c3 e8 05      1302   1304         JMP  MVUP                       ;UNTIL DONE
                    1303   1305 ;
05f1  78            1304   1306 MVDOWN: MOV  A,B                        ;*** MVDOWN ***
05f2  92            1305   1307         SUB  D                          ;TEST IF DE = BC
05f3  c2 f9 05      1306   1308         JNZ  MD1                        ;NO, GO MOVE
05f6  79            1307   1309         MOV  A,C                        ;MAYBE, OTHER BYTE?
05f7  93            1308   1310         SUB  E
05f8  c8            1309   1311         RZ                              ;YES, RETURN
05f9  1b            1310   1312 MD1:    DCX  D                          ;ELSE MOVE A BYTE
05fa  2b            1311   1313         DCX  H                          ;BUT FIRST DECREASE
05fb  1a            1312   1314         LDAX D                          ;BOTH POINTERS AND
05fc  77            1313   1315         MOV  M,A                        ;THEN DO IT
05fd  c3 f1 05      1314   1316         JMP  MVDOWN                     ;LOOP BACK
                    1315   1317 ;
0600  c1            1316   1318 POPA:   POP  B                          ;BC = RETURN ADDR.
0601  e1            1317   1319         POP  H                          ;RESTORE LOPVAR, BUT
0602  22 09 08      1318   1320         SHLD LOPVAR                     ;=0 MEANS NO MORE
0605  7c            1319   1321         MOV  A,H
0606  b5            1320   1322         ORA  L
0607  ca 1a 06      1321   1323         JZ   PP1                        ;YEP, GO RETURN
060a  e1            1322   1324         POP  H                          ;NOP, RESTORE OTHERS
060b  22 0b 08      1323   1325         SHLD LOPINC
060e  e1            1324   1326         POP  H
060f  22 0d 08      1325   1327         SHLD LOPLMT
0612  e1            1326   1328         POP  H
0613  22 0f 08      1327   1329         SHLD LOPLN
0616  e1            1328   1330         POP  H
0617  22 11 08      1329   1331         SHLD LOPPT
061a  c5            1330   1332 PP1:    PUSH B                          ;BC = RETURN ADDR.
061b  c9            1331   1333         RET
                    1332   1334 ;
061c  21 78 1f      1333   1335 PUSHA:  LXI  H,STKLMT                   ;*** PUSHA ***
061f  cd 86 04      1334   1336         CALL CHGSGN
0622  c1            1335   1337         POP  B                          ;BC=RETURN ADDRESS
0623  39            1336   1338         DAD  SP                         ;IS STACK NEAR THE TOP?
0624  d2 f6 04      1337   1339         JNC  QSORRY                     ;YES, SORRY FOR THAT
0627  2a 09 08      1338   1340         LHLD LOPVAR                     ;ELSE SAVE LOOP VAR'S
062a  7c            1339   1341         MOV  A,H                        ;BUT IF LOPVAR IS 0
062b  b5            1340   1342         ORA  L                          ;THAT WILL BE ALL
062c  ca 42 06      1341   1343         JZ   PU1
062f  2a 11 08      1342   1344         LHLD LOPPT                      ;ELSE, MORE TO SAVE
0632  e5            1343   1345         PUSH H
0633  2a 0f 08      1344   1346         LHLD LOPLN
0636  e5            1345   1347         PUSH H
0637  2a 0d 08      1346   1348         LHLD LOPLMT
063a  e5            1347   1349         PUSH H
063b  2a 0b 08      1348   1350         LHLD LOPINC
063e  e5            1349   1351         PUSH H
063f  2a 09 08      1350   1352         LHLD LOPVAR
0642  e5            1351   1353 PU1:    PUSH H
0643  c5            1352   1354         PUSH B                          ;BC = RETURN ADDR.
0644  c9            1353   1355         RET
                    1354   1356 ;
                    1355   1357 ;*************************************************************
                    1356   1358 ;
                    1357   1359 ; *** OUTC *** & CHKIO ***
                    1358   1360 ;
                    1359   1361 ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
                    1360   1362 ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
                    1361   1363 ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
                    1362   1364 ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
                    1363   1365 ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
                    1364   1366 ; ARE RESTORED.
                    1365   1367 ;
                    1366   1368 ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
                    1367   1369 ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
                    1368   1370 ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
                    1369   1371 ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
                    1370   1372 ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
                    1371   1373 ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
                    1372   1374 ;
                    1373   1375 ;OUTC:  PUSH PSW                        ;THIS IS AT LOC. 10
                    1374   1376 ;       LDA  OCSW                       ;CHECK SOFTWARE SWITCH
                    1375   1377 ;       ORA  A
0645  32 00 08      1376   1378 INIT:   STA  OCSW
0648  3e 03         1377   1379         MVI  A,3                        ;RESET ACIA
064a  d3 10         1378   1380         OUT  16
064c  3e 15         1379   1381         MVI  A,15H                      ;15H FOR 8N1, 11H FOR 8N2
064e  d3 10         1380   1382         OUT  16
0650  16 19         1381   1383         MVI  D,19H
0652                1382   1384 PATLOP:
0652  cd 0e 00      1383   1385         CALL CRLF
0655  15            1384   1386         DCR  D
0656  c2 52 06      1385   1387         JNZ  PATLOP
0659  97            1386   1388         SUB  A
065a  11 a6 06      1387   1389         LXI  D,MSG1
065d  cd 63 05      1388   1390         CALL PRTSTG
0660  21 00 00      1389   1391         LXI  H,START
0663  22 13 08      1390   1392         SHLD RANPNT
0666  21 17 08      1391   1393         LXI  H,TXTBGN
0669  22 15 08      1392   1394         SHLD TXTUNF
066c  c3 ba 00      1393   1395         JMP  RSTART
066f  c2 74 06      1394   1396 OC2:    JNZ  OC3                        ;IT IS ON
0672  f1            1395   1397         POP  PSW                        ;IT IS OFF
0673  c9            1396   1398         RET                             ;RESTORE AF AND RETURN
0674  db 10         1397   1399 OC3:    IN   16                         ;COME HERE TO DO OUTPUT
0676  e6 02         1398   1400         ANI  2H                         ;STATUS BIT
0678  ca 74 06      1399   1401         JZ   OC3                        ;NOT READY, WAIT
067b  f1            1400   1402         POP  PSW                        ;READY, GET OLD A BACK
067c  d3 11         1401   1403         OUT  17                         ;AND SEND IT OUT
067e  fe 0d         1402   1404         CPI  CR                         ;WAS IT CR?
0680  c0            1403   1405         RNZ                             ;NO, FINISHED
0681  3e 0a         1404   1406         MVI  A,LF                       ;YES, WE SEND LF TOO
0683  d7            1405   1407         RST  2                          ;THIS IS RECURSIVE
0684  3e 0d         1406   1408         MVI  A,CR                       ;GET CR BACK IN A
0686  c9            1407   1409         RET
                    1408   1410 ;
0687  db 10         1409   1411 CHKIO:  IN   16                         ;*** CHKIO ***
0689  00            1410   1412         NOP                             ;STATUS BIT FLIPPED?
068a  e6 01         1411   1413         ANI  1H                         ;MASK STATUS BIT
068c  c8            1412   1414         RZ                              ;NOT READY, RETURN "Z"
068d  db 11         1413   1415         IN   17                         ;READY, READ DATA
068f  e6 7f         1414   1416         ANI  7FH                        ;MASK BIT 7 OFF
0691  fe 0f         1415   1417         CPI  0FH                        ;IS IT CONTROL-O?
0693  c2 a0 06      1416   1418         JNZ  CI1                        ;NO, MORE CHECKING
0696  3a 00 08      1417   1419         LDA  OCSW                       ;CONTROL-O FLIPS OCSW
0699  2f            1418   1420         CMA                             ;ON TO OFF, OFF TO ON
069a  32 00 08      1419   1421         STA  OCSW
069d  c3 87 06      1420   1422         JMP  CHKIO                      ;GET ANOTHER INPUT
06a0  fe 03         1421   1423 CI1:    CPI  3H                         ;IS IT CONTROL-C?
06a2  c0            1422   1424         RNZ                             ;NO, RETURN "NZ"
06a3  c3 ba 00      1423   1425         JMP  RSTART                     ;YES, RESTART TBI
                    1424   1426 ;
06a6  54 49 4e 59   1425   1427 MSG1:   DB   'TINY '
06aa  20            1425   1428
06ab  42 41 53 49   1426   1429         DB   'BASIC'
06af  43            1426   1430
06b0  0d            1427   1431         DB   CR
                    1428   1432 ;
                    1429   1433 ;*************************************************************
                    1430   1434 ;
                    1431   1435 ; *** TABLES *** DIRECT *** & EXEC ***
                    1432   1436 ;
                    1433   1437 ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
                    1434   1438 ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
                    1435   1439 ; OF CODE ACCORDING TO THE TABLE.
                    1436   1440 ;
                    1437   1441 ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
                    1438   1442 ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
                    1439   1443 ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
                    1440   1444 ; ALL DIRECT AND STATEMENT COMMANDS.
                    1441   1445 ;
                    1442   1446 ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
                    1443   1447 ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
                    1444   1448 ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
                    1445   1449 ;
                    1446   1450 ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
                    1447   1451 ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
                    1448   1452 ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
                    1449   1453 ; BYTE SET TO 1.
                    1450   1454 ;
                    1451   1455 ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
                    1452   1456 ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
                    1453   1457 ; MATCH THIS NULL ITEM AS DEFAULT.
                    1454   1458 ;
06b1                1455   1459 TAB1:                                   ;DIRECT COMMANDS
06b1  4c 49 53 54   1456   1460         DB   'LIST'
06b5                1457   1461         DWA  LIST
06b5  81          + 1457   1462         DB   (LIST SHR 8) + 128
06b6  6f          + 1457   1463         DB   LIST AND 0FFH
06b7  52 55 4e      1458   1464         DB   'RUN'
06ba                1459   1465         DWA  RUN
06ba  81          + 1459   1466         DB   (RUN SHR 8) + 128
06bb  41          + 1459   1467         DB   RUN AND 0FFH
06bc  4e 45 57      1460   1468         DB   'NEW'
06bf                1461   1469         DWA  NEW
06bf  81          + 1461   1470         DB   (NEW SHR 8) + 128
06c0  32          + 1461   1471         DB   NEW AND 0FFH
                    1462   1472 ;
06c1                1463   1473 TAB2:                                   ;DIRECT/STATEMENT
06c1  4e 45 58 54   1464   1474         DB   'NEXT'
06c5                1465   1475         DWA  NEXT
06c5  82          + 1465   1476         DB   (NEXT SHR 8) + 128
06c6  57          + 1465   1477         DB   NEXT AND 0FFH
06c7  4c 45 54      1466   1478         DB   'LET'
06ca                1467   1479         DWA  LET
06ca  83          + 1467   1480         DB   (LET SHR 8) + 128
06cb  23          + 1467   1481         DB   LET AND 0FFH
06cc  49 46         1468   1482         DB   'IF'
06ce                1469   1483         DWA  IFF
06ce  82          + 1469   1484         DB   (IFF SHR 8) + 128
06cf  b4          + 1469   1485         DB   IFF AND 0FFH
06d0  47 4f 54 4f   1470   1486         DB   'GOTO'
06d4                1471   1487         DWA  GOTO
06d4  81          + 1471   1488         DB   (GOTO SHR 8) + 128
06d5  60          + 1471   1489         DB   GOTO AND 0FFH
06d6  47 4f 53 55   1472   1490         DB   'GOSUB'
06da  42            1472   1491
06db                1473   1492         DWA  GOSUB
06db  81          + 1473   1493         DB   (GOSUB SHR 8) + 128
06dc  bf          + 1473   1494         DB   GOSUB AND 0FFH
06dd  52 45 54 55   1474   1495         DB   'RETURN'
06e1  52 4e         1474   1496
06e3                1475   1497         DWA  RETURN
06e3  81          + 1475   1498         DB   (RETURN SHR 8) + 128
06e4  df          + 1475   1499         DB   RETURN AND 0FFH
06e5  52 45 4d      1476   1500         DB   'REM'
06e8                1477   1501         DWA  REM
06e8  82          + 1477   1502         DB   (REM SHR 8) + 128
06e9  b0          + 1477   1503         DB   REM AND 0FFH
06ea  46 4f 52      1478   1504         DB   'FOR'
06ed                1479   1505         DWA  FOR
06ed  81          + 1479   1506         DB   (FOR SHR 8) + 128
06ee  f8          + 1479   1507         DB   FOR AND 0FFH
06ef  49 4e 50 55   1480   1508         DB   'INPUT'
06f3  54            1480   1509
06f4                1481   1510         DWA  INPUT
06f4  82          + 1481   1511         DB   (INPUT SHR 8) + 128
06f5  cd          + 1481   1512         DB   INPUT AND 0FFH
06f6  50 52 49 4e   1482   1513         DB   'PRINT'
06fa  54            1482   1514
06fb                1483   1515         DWA  PRINT
06fb  81          + 1483   1516         DB   (PRINT SHR 8) + 128
06fc  87          + 1483   1517         DB   PRINT AND 0FFH
06fd  53 54 4f 50   1484   1518         DB   'STOP'
0701                1485   1519         DWA  STOP
0701  81          + 1485   1520         DB   (STOP SHR 8) + 128
0702  3b          + 1485   1521         DB   STOP AND 0FFH
0703                1486   1522         DWA  DEFLT
0703  83          + 1486   1523         DB   (DEFLT SHR 8) + 128
0704  1d          + 1486   1524         DB   DEFLT AND 0FFH
                    1487   1525 ;
0705                1488   1526 TAB4:                                   ;FUNCTIONS
0705  52 4e 44      1489   1527         DB   'RND'
0708                1490   1528         DWA  RND
0708  84          + 1490   1529         DB   (RND SHR 8) + 128
0709  25          + 1490   1530         DB   RND AND 0FFH
070a  41 42 53      1491   1531         DB   'ABS'
070d                1492   1532         DWA  ABS
070d  84          + 1492   1533         DB   (ABS SHR 8) + 128
070e  50          + 1492   1534         DB   ABS AND 0FFH
070f  53 49 5a 45   1493   1535         DB   'SIZE'
0713                1494   1536         DWA  SIZE
0713  84          + 1494   1537         DB   (SIZE SHR 8) + 128
0714  59          + 1494   1538         DB   SIZE AND 0FFH
0715                1495   1539         DWA  XP40
0715  84          + 1495   1540         DB   (XP40 SHR 8) + 128
0716  0b          + 1495   1541         DB   XP40 AND 0FFH
                    1496   1542 ;
0717                1497   1543 TAB5:                                   ;"TO" IN "FOR"
0717  54 4f         1498   1544         DB   'TO'
0719                1499   1545         DWA  FR1
0719  82          + 1499   1546         DB   (FR1 SHR 8) + 128
071a  08          + 1499   1547         DB   FR1 AND 0FFH
071b                1500   1548         DWA  QWHAT
071b  84          + 1500   1549         DB   (QWHAT SHR 8) + 128
071c  c9          + 1500   1550         DB   QWHAT AND 0FFH
                    1501   1551 ;
071d                1502   1552 TAB6:                                   ;"STEP" IN "FOR"
071d  53 54 45 50   1503   1553         DB   'STEP'
0721                1504   1554         DWA  FR2
0721  82          + 1504   1555         DB   (FR2 SHR 8) + 128
0722  12          + 1504   1556         DB   FR2 AND 0FFH
0723                1505   1557         DWA  FR3
0723  82          + 1505   1558         DB   (FR3 SHR 8) + 128
0724  16          + 1505   1559         DB   FR3 AND 0FFH
                    1506   1560 ;
0725                1507   1561 TAB8:                                   ;RELATION OPERATORS
0725  3e 3d         1508   1562         DB   '>='
0727                1509   1563         DWA  XP11
0727  83          + 1509   1564         DB   (XP11 SHR 8) + 128
0728  33          + 1509   1565         DB   XP11 AND 0FFH
0729  23            1510   1566         DB   '#'
072a                1511   1567         DWA  XP12
072a  83          + 1511   1568         DB   (XP12 SHR 8) + 128
072b  39          + 1511   1569         DB   XP12 AND 0FFH
072c  3e            1512   1570         DB   '>'
072d                1513   1571         DWA  XP13
072d  83          + 1513   1572         DB   (XP13 SHR 8) + 128
072e  3f          + 1513   1573         DB   XP13 AND 0FFH
072f  3d            1514   1574         DB   '='
0730                1515   1575         DWA  XP15
0730  83          + 1515   1576         DB   (XP15 SHR 8) + 128
0731  4e          + 1515   1577         DB   XP15 AND 0FFH
0732  3c 3d         1516   1578         DB   '<='
0734                1517   1579         DWA  XP14
0734  83          + 1517   1580         DB   (XP14 SHR 8) + 128
0735  46          + 1517   1581         DB   XP14 AND 0FFH
0736  3c            1518   1582         DB   '<'
0737                1519   1583         DWA  XP16
0737  83          + 1519   1584         DB   (XP16 SHR 8) + 128
0738  54          + 1519   1585         DB   XP16 AND 0FFH
0739                1520   1586         DWA  XP17
0739  83          + 1520   1587         DB   (XP17 SHR 8) + 128
073a  5a          + 1520   1588         DB   XP17 AND 0FFH
                    1521   1589 ;
073b  21 b0 06      1522   1590 DIRECT: LXI  H,TAB1-1                   ;*** DIRECT ***
                    1523   1591 ;
073e                1524   1592 EXEC:                                   ;*** EXEC ***
073e  ef            1525   1593 EX0:    RST  5                          ;IGNORE LEADING BLANKS
073f  d5            1526   1594         PUSH D                          ;SAVE POINTER
0740  1a            1527   1595 EX1:    LDAX D                          ;IF FOUND '.' IN STRING
0741  13            1528   1596         INX  D                          ;BEFORE ANY MISMATCH
0742  fe 2e         1529   1597         CPI  2EH                        ;WE DECLARE A MATCH
0744  ca 5d 07      1530   1598         JZ   EX3
0747  23            1531   1599         INX  H                          ;HL->TABLE
0748  be            1532   1600         CMP  M                          ;IF MATCH, TEST NEXT
0749  ca 40 07      1533   1601         JZ   EX1
074c  3e 7f         1534   1602         MVI  A,07FH                     ;ELSE SEE IF BIT 7
074e  1b            1535   1603         DCX  D                          ;OF TABLE IS SET, WHICH
074f  be            1536   1604         CMP  M                          ;IS THE JUMP ADDR. (HI)
0750  da 64 07      1537   1605         JC   EX5                        ;C:YES, MATCHED
0753  23            1538   1606 EX2:    INX  H                          ;NC:NO, FIND JUMP ADDR.
0754  be            1539   1607         CMP  M
0755  d2 53 07      1540   1608         JNC  EX2
0758  23            1541   1609         INX  H                          ;BUMP TO NEXT TAB. ITEM
0759  d1            1542   1610         POP  D                          ;RESTORE STRING POINTER
075a  c3 3e 07      1543   1611         JMP  EX0                        ;TEST AGAINST NEXT ITEM
075d  3e 7f         1544   1612 EX3:    MVI  A,07FH                     ;PARTIAL MATCH, FIND
075f  23            1545   1613 EX4:    INX  H                          ;JUMP ADDR., WHICH IS
0760  be            1546   1614         CMP  M                          ;FLAGGED BY BIT 7
0761  d2 5f 07      1547   1615         JNC  EX4
0764  7e            1548   1616 EX5:    MOV  A,M                        ;LOAD HL WITH THE JUMP
0765  23            1549   1617         INX  H                          ;ADDRESS FROM THE TABLE
0766  6e            1550   1618         MOV  L,M
0767  e6 7f         1551   1619         ANI  7FH                        ;MASK OFF BIT 7
0769  67            1552   1620         MOV  H,A
076a  f1            1553   1621         POP  PSW                        ;CLEAN UP THE GABAGE
076b  e9            1554   1622         PCHL                            ;AND WE GO DO IT
                    1555   1623 ;
076c                1556   1624 LSTROM:                                 ;ALL ABOVE CAN BE ROM
                    1557   1625 ;       ORG  1000H                      ;HERE DOWN MUST BE RAM
                    1558   1626         ORG  0800H
0800                1559   1627 OCSW:   DS   1                          ;SWITCH FOR OUTPUT
0801                1560   1628 CURRNT: DS   2                          ;POINTS TO CURRENT LINE
0803                1561   1629 STKGOS: DS   2                          ;SAVES SP IN 'GOSUB'
0805                1562   1630 VARNXT: DS   2                          ;TEMP STORAGE
0807                1563   1631 STKINP: DS   2                          ;SAVES SP IN 'INPUT'
0809                1564   1632 LOPVAR: DS   2                          ;'FOR' LOOP SAVE AREA
080b                1565   1633 LOPINC: DS   2                          ;INCREMENT
080d                1566   1634 LOPLMT: DS   2                          ;LIMIT
080f                1567   1635 LOPLN:  DS   2                          ;LINE NUMBER
0811                1568   1636 LOPPT:  DS   2                          ;TEXT POINTER
0813                1569   1637 RANPNT: DS   2                          ;RANDOM NUMBER POINTER
0815                1570   1638 TXTUNF: DS   2                          ;->UNFILLED TEXT AREA
0817                1571   1639 TXTBGN: DS   2                          ;TEXT SAVE AREA BEGINS
                    1572   1640 ;       ORG  1366H
                    1573   1641         ORG  1F00H
1f00                1574   1642 TXTEND: DS   0                          ;TEXT SAVE AREA ENDS
1f00                1575   1643 VARBGN: DS   55                         ;VARIABLE @(0)
1f37                1576   1644 BUFFER: DS   64                         ;INPUT BUFFER
1f77                1577   1645 BUFEND: DS   1                          ;BUFFER ENDS
1f78                1578   1646 STKLMT: DS   1                          ;TOP LIMIT FOR STACK
                    1579   1647 ;       ORG  1400H
                    1580   1648         ORG  2000H
2000                1581   1649 STACK:  DS   0                          ;STACK STARTS HERE
                    1582   1650 ;
000d  =             1583   1651 CR      EQU  0DH
000a  =             1584   1652 LF      EQU  0AH
                    1585   1653
2000                1586   1654         END

Macro table

DWA

Symbol table

ABS    0450    AHOW   00a0    ASORRY 04f7    AWHAT  04ca    BUFEND 1f77
BUFFER 1f37    CHGSGN 0486    CHKIO  0687    CHKSGN 0483    CI1    06a0
CK1    04a1    CKHLDE 049b    CR     000d    CRLF   000e    CURRNT 0801
DEFLT  031d    DIRECT 073b    DIVIDE 0466    DV1    0471    DV2    0473
ENDCHK 04c5    ERROR  04cd    EX0    073e    EX1    0740    EX2    0753
EX3    075d    EX4    075f    EX5    0764    EXEC   073e    EXPR1  032d
EXPR2  0371    EXPR3  03a5    EXPR4  0405    FI1    04bd    FI2    04c4
FIN    04b6    FL1    0543    FL2    0558    FNDLN  053b    FNDLP  0543
FNDNXT 0557    FNDSKP 0559    FOR    01f8    FR1    0208    FR2    0212
FR3    0216    FR4    0219    FR5    021c*   FR7    0231    FR8    0252
GETLN  04fd    GL1    0501    GL3    0526    GL4    0533    GOSUB  01bf
GOTO   0160    HOW    00a6    IFF    02b4    INIT   0645    INPERR 02c3
INPUT  02cd    IP1    02cd    IP2    02db    IP3    02eb    IP4    0315
IP5    031c    LET    0323    LF     000a    LIST   016f    LOPINC 080b
LOPLMT 080d    LOPLN  080f    LOPPT  0811    LOPVAR 0809    LS1    0178
LSTROM 076c    LT1    032c    MD1    05f9    MSG1   06a6    MVDOWN 05f1
MVUP   05e8    NEW    0132    NEXT   0257    NX0    025e    NX1    0298
NX2    02ac    NX3    0276    NX4    0288    NX5    02aa    OC2    066f
OC3    0674    OCSW   0800    OK     00ab    PARN   041a    PATLOP 0652
PN1    05a0    PN2    05a7    PN3    05b7    PN4    05b8    PN5    05c4
PN6    05ca    POPA   0600    PP1    061a    PR0    019b    PR1    01a3
PR2    0192    PR3    01a9    PR6    01b2    PR8    01b6    PRINT  0187
PRTLN  05d5    PRTNUM 0595    PRTSTG 0563    PS1    0564    PU1    0642
PUSHA  061c    QHOW   009f    QSORRY 04f6    QT1    0574    QT2    057d
QT3    0581    QT4    0589    QT5    0594    QTSTG  056f    QWHAT  04c9
RA1    0440    RANPNT 0813    REM    02b0    RETURN 01df    RND    0425
RSTART 00ba    RUN    0141    RUNNXL 0147    RUNSML 0157    RUNTSL 0150
SETVAL 04a3    SIZE   0459    SORRY  00b4    SS1    0028    ST1    00bd*
ST2    00cd    ST3    00d6    ST4    010b    STACK  2000    START  0000
STKGOS 0803    STKINP 0807    STKLMT 1f78    STOP   013b    SUBDE  047c
SV1    04b3    TAB1   06b1    TAB2   06c1    TAB4   0705    TAB5   0717
TAB6   071d    TAB8   0725    TC1    0068    TC2    0073    TN1    007c
TSTNUM 0077    TV1    0058    TXTBGN 0817    TXTEND 1f00    TXTUNF 0815
VARBGN 1f00    VARNXT 0805    WHAT   00ae    XP11   0333    XP12   0339
XP13   033f    XP14   0346    XP15   034e    XP16   0354    XP17   035a
XP18   035c    XP21   037a    XP22   037d    XP23   0380    XP24   0387
XP25   0398    XP26   039b    XP31   03a8    XP32   03c5    XP33   03cd
XP34   03d8    XP35   03f7    XP40   040b    XP41   0414    XP42   0421
XP43   0422
