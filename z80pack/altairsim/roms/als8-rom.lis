Z80/8080-Macro-Assembler  Release 2.1

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                       1      1 ;
                       2      2 ; DISASSEMBLY OF ALS-8 SYSTEM
                       3      3 ; BY BARRY A. WATZMAN
                       4      4 ;
                       5      5 ; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><
                       6      6 ; MODIFIED TO PROPER INTEL SYNTAX AND FIXED TYPOS.
                       7      7 ; MODIFIED TERMINAL IO FOR MITS SIO REV. 1, SEE *UM*.
                       8      8 ;
                       9      9 ; ENTRY POINTS:
                      10     10 ;     E024     USE WHEN POWER IS FIRST APPLIED OR AFTER
                      11     11 ;              A MAJOR PROGRAM CRASH.
                      12     12 ;
                      13     13 ;     E000     USE AFTER A MINOR CRASH TO REINITIALIZE
                      14     14 ;              THE RAM I/O DRIVERS. FOLLOWING THIS THE
                      15     15 ;              FILE, IODR, CUST, AND SYMBOL TABLE CAN
                      16     16 ;              BE EXAMINED FOR POSSIBLE AFFECTS.
                      17     17 ;
                      18     18 ;     E060     USE TO RETURN TO THE ALS-8 AFTER AN
                      19     19 ;              OPERATIONAL PROGRAM HAS GONE INTO AN
                      20     20 ;              ENDLESS LOOP OR HALTED.
                      21     21 ;
                      22     22 ; UDO MUNK, AUGUST 2018
                      23     23 ; <><><><><><><><><><><><><><><><><><><><><><><><><><><><><
                      24     24 ;
d000  =               25     25 DATA    EQU     0D000H          ;LOCATION OF DATA BLOCK
e000  =               26     26 CODE    EQU     0E000H          ;LOCATION OF ACTUAL CODE
cc00  =               27     27 VDM1    EQU     0CC00H          ;VDM-1 SCREEN MEMORY LOCATION
                      28     28 ;
                      29     29         ORG     CODE
e000  00              30     30 ALS8:   NOP
e001  c3 3b e0        31     31         JMP     LE03B
                      32     32 ;
                      33     33 ;PART OF THE CODE TO DELETE CUSTOM COMMANDS
                      34     34 ;
e004  cd 0c e5        35     35 LE004:  CALL    LE50C           ;SET UP ABUF, H,L FOR DELETE
e007  c3 b7 e4        36     36         JMP     LE4B7           ;USE SYMLD CODE TO DELETE COMD
                      37     37 ;
                      38     38 ;THIS ROUTINE FETCHES DIGITS FROM THE BUFFER ADDRESSED
                      39     39 ;BY B,C AND CONVERTS THE ASCII DECIMAL DIGITS INTO
                      40     40 ;BINARY.  UP TO A 16-BIT VALUE CAN BE CONVERTED.  THE
                      41     41 ;SCAN STOPS WHEN A BINARY ZERO IS FOUND IN THE BUFFER.
                      42     42 ;
e00a  21 00 00        43     43 ADEC:   LXI     H,0             ;GET A 16 BIT ZERO
e00d  0a              44     44 ADE1:   LDAX    B               ;FETCH ASCII DIGIT
e00e  b7              45     45         ORA     A               ;SET ZERO FLAG
e00f  c8              46     46         RZ                      ;RETURN IFF FINISHED
e010  54              47     47         MOV     D,H             ;DUPLICATE CURRENT VALUE
e011  5d              48     48         MOV     E,L             ;FROM H,L INTO D,E
e012  29              49     49         DAD     H               ;CURRENT VALUE TIMES TWO
e013  29              50     50         DAD     H               ;AGAIN - NOW 4X ORIG. VALUE
e014  19              51     51         DAD     D               ;ADD IN ORIG VALUE - NOW 5X
e015  29              52     52         DAD     H               ;TIMES TWO - NOW 10X
e016  d6 30           53     53         SUI     30H             ;CONVERT FETCHED DGT TO BINARY
e018  fe 0a           54     54         CPI     10              ;CHECK FOR LEGAL VALUE
e01a  3f              55     55         CMC                     ;SET UP CARRY FLAG
e01b  d8              56     56         RC                      ;RETURN W/CARRY SET IF ERROR
e01c  5f              57     57         MOV     E,A             ;ELSE MOVE BINARY VALUE TO E
e01d  16 00           58     58         MVI     D,0             ;AND ZERO TO D
e01f  19              59     59         DAD     D               ;AND ADD TO 10X ORIG. NUMBER
e020  03              60     60         INX     B               ;NOW POINT TO NEXT DIGIT
e021  c3 0d e0        61     61         JMP     ADE1            ;AND PROCESS IT
                      62     62 ;
                      63     63 ;LOWEST LEVEL ENTRY POINT -- INITIALIZES EVERYTHING
                      64     64 ;
e024  21 00 d0        65     65 INITA:  LXI     H,FILE0         ;POINT TO START OF DATA AREA
e027  af              66     66         XRA     A               ;GET A ZERO
e028  4f              67     67         MOV     C,A             ;MOVE IT TO C
e029  77              68     68 INIT2:  MOV     M,A             ;STASH THE ZERO
e02a  0d              69     69         DCR     C               ;DECREMENT C
e02b  23              70     70         INX     H               ;POINT TO NEXT LOCATION
e02c  c2 29 e0        71     71         JNZ     INIT2           ;IF HAVEN'T DONE 256 LOCATIONS
e02f  32 00 d3        72     72         STA     SYSYM           ;ANOTHER LOCATION TO ZERO
e032  32 2f d1        73     73         STA     SMODE           ;AND ANOTHER
e035  32 5c d2        74     74         STA     CUCOM           ;AND STILL ANOTHER
e038  c3 00 e0        75     75         JMP     ALS8            ;NOW START UP THE SYSTEM
                      76     76 ;
                      77     77 ;WARM RESTART - RESTORES I/O DRIVERS AND DOES PARTIAL
                      78     78 ;INITIALIZATION
                      79     79 ;
e03b  0e 3d           80     80 LE03B:  MVI     C,(CRLF-IONME) AND 0FFH
e03d  31 2f d1        81     81         LXI     SP,SMODE        ;SET STACK POINTER
e040  11 d9 e1        82     82         LXI     D,IONME         ;POINT TO IO CODE SOURCE
e043  21 8f d0        83     83         LXI     H,SYSIO         ;POINT TO DEST IN DATA AREA
e046  1a              84     84 LE046:  LDAX    D               ;GET A BYTE
e047  77              85     85         MOV     M,A             ;PUT IT IN DATA AREA
e048  13              86     86         INX     D               ;SOURCE POINTER
e049  23              87     87         INX     H               ;DEST POINTER
e04a  0d              88     88         DCR     C               ;NO OF BYTES LEFT TO BE MOVED
e04b  c2 46 e0        89     89         JNZ     LE046           ;IF NOT DONE
e04e  21 00 e0        90     90         LXI     H,ALS8          ;POINT TO START CODE
e051  22 32 d1        91     91         SHLD    SYMADD          ;INITIAL SYMBOL TABLE ADDR
e054  3e 35           92     92         MVI     A,(IBUF+81) AND 0FFH
e056  32 8f d1        93     93         STA     TERMW           ;INITIAL TERMINAL WIDTH
e059  af              94     94         XRA     A               ;GET A ZERO
e05a  32 2f d1        95     95         STA     SMODE           ;SAVE AS SMODE
e05d  32 90 d1        96     96         STA     CHRR            ;AND CHRR
                      97     97 ;
                      98     98 ;WARM RESTART WITH NO INITIALIZATION
                      99     99 ;PRINTS "READY" AND ENTERS MAIN PROCESSING LOOP
                     100    100 ;
e060  21 94 d0       101    101 EORMS:  LXI     H,SYSIN         ;POINT TO CUR DRIVER ADDRS
e063  cd 5a e1       102    102         CALL    LE15A           ;SET I/O JUMPS TO CUR DRIVERS
e066  cd 16 e2       103    103         CALL    CRLF            ;PRINT A CR/LF ON TERMINAL
e069  21 d7 e0       104    104         LXI     H,RDYMG         ;POINT TO READY MESSAGE
e06c  cd 80 e3       105    105         CALL    SCRN            ;PRINT "READY"
e06f  c3 cb e0       106    106         JMP     LE0CB           ;ANOTHER CRLF & ENTER MAIN LOOP
                     107    107 ;
                     108    108 ;THIS IS THE MAIN ALS-8 COMMAND LOOP
                     109    109 ;
e072  21 00 00       110    110 LE072:  LXI     H,0             ;GET A ZERO TO H,L
e075  22 fd d0       111    111         SHLD    SWCH1           ;TO SWITCH 1
e078  31 2f d1       112    112 LE078:  LXI     SP,SMODE        ;SET STACK POINTER
e07b  cd 72 e1       113    113         CALL    READ            ;GET A COMND LINE IN IBUF
e07e  23             114    114         INX     H               ;POINT TO 1ST CHAR
e07f  7e             115    115         MOV     A,M             ;GET IT
e080  fe 3a          116    116         CPI     '9'+1           ;COMPARE TO 9
e082  da 57 e8       117    117         JC      LINE            ;NEW LINE IF 1ST CHAR NUMERIC
e085  cd 15 e5       118    118         CALL    VALC            ;EXTRACT ASCII & BINARY ARGS
e088  06 04          119    119         MVI     B,4             ;LENGTH OF ALS8 COMMANDS
e08a  11 e6 e3       120    120         LXI     D,CTAB          ;POINT AT COMMAND TABLE
e08d  cd 28 e2       121    121         CALL    COMS            ;SEE IF COMMAND IS IN TABLE
e090  e5             122    122         PUSH    H               ;SAVE H,L PNTR INTO LINE
e091  ca ac e0       123    123         JZ      LE0AC           ;MATCH WAS FOUND
e094  e1             124    124         POP     H               ;RESTORE POINTER TO LINE
e095  13             125    125         INX     D               ;POINT TO 2ND PART OF TABLE
e096  cd 28 e2       126    126         CALL    COMS            ;SEARCH 2ND PART
e099  ca a5 e0       127    127         JZ      LE0A5           ;IF MATCH FOUND
e09c  11 5c d2       128    128         LXI     D,CUCOM         ;NO MATCH, TRY CUSTOM TABLE
e09f  cd 40 e2       129    129         CALL    LE240           ;SEARCH CUSTOM TABLE
e0a2  c2 dd e7       130    130         JNZ     WHAT            ;ERROR MSG IF NO MATCH FOUND
e0a5  e5             131    131 LE0A5:  PUSH    H               ;SAVE H,L
e0a6  cd 1e e3       132    132         CALL    LE31E           ;CONVERT ABUF CNTS TO BINARY
e0a9  da dd e7       133    133         JC      WHAT            ;IF ABUF NOT LEGAL NO.
e0ac  3a fc d0       134    134 LE0AC:  LDA     IOSWC           ;1 COMND DRVR SWTCH DELAY FLAG
e0af  b7             135    135         ORA     A               ;SET FLAGS
e0b0  c4 57 e1       136    136         CNZ     LE157           ;TIME TO SWITCH DRIVERS
e0b3  e1             137    137         POP     H               ;RESTORE POINTER TO COMD LINE
e0b4  cd dd e0       138    138         CALL    LE0DD           ;EXECUTE THE COMMAND
e0b7  3a fd d0       139    139 EOR:    LDA     SWCH1           ;GET I/O RESTORE SWITCH
e0ba  b7             140    140         ORA     A               ;SET FLAGS
e0bb  c2 60 e0       141    141         JNZ     EORMS           ;RESTORE JMPS & PRT "READY"
e0be  3a fe d0       142    142         LDA     SWCH2           ;GET DRIVER HOLD REQ.
e0c1  b7             143    143         ORA     A               ;SET FLAGS
e0c2  c2 d1 e0       144    144         JNZ     EORNS           ;HOLD CURRENT DRVR, DO CRLF
e0c5  21 94 d0       145    145         LXI     H,SYSIN         ;POINT TO SYSTEM DRIVERS
e0c8  cd 5a e1       146    146         CALL    LE15A           ;PUT IN JUMPS & DO CRLF
e0cb  cd 16 e2       147    147 LE0CB:  CALL    CRLF            ;PRINT CRLF
e0ce  c3 72 e0       148    148         JMP     LE072           ;DO ANOTHER ALS8 COMMAND
                     149    149 ;
                     150    150 ;END OF MAIN PROCESSING LOOP
                     151    151 ;
                     152    152 ;FOLLOWING RETURN POINT DOES A CR/LF AND LEAVES
                     153    153 ;ALL DRIVERS AND SWITCHES INTACT
                     154    154 ;
e0d1  cd 16 e2       155    155 EORNS:  CALL    CRLF            ;PRINT A CRLF
e0d4  c3 78 e0       156    156         JMP     LE078           ;RET LEAVING DRIVERS INTACT
                     157    157 ;
                     158    158 ;SIGN-ON AND COMMAND MODE MESSAGE
                     159    159 ;
e0d7  52 45 41 44    160    160 RDYMG:  DB      'READY',0DH
e0db  59 0d          160    161
                     161    162 ;
                     162    163 ;HERE IS WHERE WE DISPATCH TO COMMANDS
                     163    164 ;NOTE THAT SINCE THIS IS A CALLED ROUTINE, SO
                     164    165 ;IN EFFECT IS THE ROUTINE TRANSFERED TO
                     165    166 ;
e0dd  e9             166    167 LE0DD:  PCHL                    ;GO TO IT
                     167    168 ;
                     168    169 ;THE IODR COMMAND AND IT'S ZILLION FORMS
                     169    170 ;
e0de  0e 06          170    171 IODR:   MVI     C,MAXFIL        ;MAX NUMBER OF DRIVER NAMES
e0e0  21 4e d0       171    172         LXI     H,IOFLE         ;POINT TO DRIVER FILE
e0e3  3a d7 d0       172    173         LDA     FBUF            ;NAME IN SLASHES AFTR COMMAND ?
e0e6  b7             173    174         ORA     A               ;SET FLAGS
e0e7  ca 51 e1       174    175         JZ      LE151           ;NO - PRT LIST OF DRIVERS
e0ea  eb             175    176         XCHG                    ;YES - TABLE PNTR TO D,E
e0eb  cd 8d e6       176    177         CALL    LE68D           ;SEARCH DIRECTORY FOR NAME
e0ee  c2 fe e0       177    178         JNZ     LE0FE           ;NAME FOUND
e0f1  cd 1c e5       178    179         CALL    VCHK            ;NOT FOUND - CHECK FOR PARMS
e0f4  3a de d0       179    180         LDA     FEF             ;GET FREE ENTRY FOUND FLAG
e0f7  b7             180    181         ORA     A               ;SET FLAGS
e0f8  ca cc e5       181    182         JZ      LE5CC           ;NO ENTRIES LEFT - PRT "FULL"
e0fb  2a dc d0       182    183         LHLD    FREAD           ;GET ADDR OF FREE ENTRY
e0fe  22 dc d0       183    184 LE0FE:  SHLD    FREAD           ;FREAD HAS ADDR OF ENTRY
e101  cd 76 e6       184    185         CALL    ROOM            ;PUT FILE NAME INTO DIRECTORY
e104  21 05 00       185    186         LXI     H,NMLEN         ;NAME LENGTH
e107  19             186    187         DAD     D               ;H,L POINT JUST AFTER NAME
e108  3a df d0       187    188         LDA     ABUF            ;SEE IF ADDR SPECIFIED
e10b  b7             188    189         ORA     A               ;SET FLAGS
e10c  c2 19 e1       189    190         JNZ     LE119           ;IF ADDR WAS SPECIFIED
e10f  22 05 d1       190    191         SHLD    OPRD            ;NO ADDR, SET UP FOR SWTCH
e112  3c             191    192         INR     A               ;MAKE ACCUM. NON-ZERO
e113  32 fc d0       192    193         STA     IOSWC           ;SET I/O SWITCH FLAG
e116  c3 4c e1       193    194         JMP     LE14C           ;PRINT THE SELECTED ENTRY
e119  eb             194    195 LE119:  XCHG                    ;SAVE I/O ADDRS IN D,E  
e11a  2a ef d0       195    196         LHLD    BBUF            ;GET 1ST ADDR SPECIFIED
e11d  7d             196    197         MOV     A,L             ;L TO A
e11e  b4             197    198         ORA     H               ;SEE IF ADDRS IS 0
e11f  3a e6 d0       198    199         LDA     ABUF+7          ;POINT TO 2ND ASCII PARM.
e122  c2 30 e1       199    200         JNZ     LE130           ;IF 1ST ADDR NOT ZERO
e125  b7             200    201         ORA     A               ;SEE IF 2ND ADDR SPECIFIED
e126  c2 2d e1       201    202         JNZ     LE12D           ;IF 2ND ARGUMENT NOT OMITTED
e129  12             202    203         STAX    D               ;STORE 0 FOR INPUT, DELT ENTRY
e12a  13             203    204         INX     D               ;FOR 2ND BYTE
e12b  12             204    205         STAX    D               ;ZERO IT TOO
e12c  c9             205    206 BITBKT: RET                     ;DONE
                     206    207 ;
                     207    208 ;1ST ARG. WAS 0, 2ND WAS PRESENT
                     208    209 ;
e12d  2a 94 d0       209    210 LE12D:  LHLD    SYSIN           ;GET STD SYSIN DRIVER
e130  eb             210    211 LE130:  XCHG                    ;TO D,E
e131  73             211    212         MOV     M,E             ;STORING IT AS INPUT DRIVER
e132  23             212    213         INX     H               ;2ND BYTE
e133  72             213    214         MOV     M,D             ;STORE IT
e134  23             214    215         INX     H               ;POINT TO OUTPUT DRIVER
e135  eb             215    216         XCHG                    ;OUTPUT DRIVER ADDR TO D,E
e136  b7             216    217         ORA     A               ;SET FLAGS FOR 2ND ARG OMITTED
e137  21 2c e1       217    218         LXI     H,BITBKT        ;POINT TO THE BIT BUCKET
e13a  ca 48 e1       218    219         JZ      LE148           ;IF 2ND ARG OMITTED
e13d  2a f1 d0       219    220         LHLD    BBUF+2          ;GET 2ND ARG
e140  7d             220    221         MOV     A,L             ;MOVE L TO A
e141  b4             221    222         ORA     H               ;SEE IF ARG = 0
e142  c2 48 e1       222    223         JNZ     LE148           ;JMP IF NOT ZERO
e145  2a 96 d0       223    224         LHLD    SYSOT           ;ELSE SET TO USE SYSOT
e148  eb             224    225 LE148:  XCHG                    ;OUTPUT ADDR TO D,E
e149  73             225    226         MOV     M,E             ;MOVING IT TO OUTPUT TABLE
e14a  23             226    227         INX     H               ;2ND HALF
e14b  72             227    228         MOV     M,D             ;DONE
e14c  0e 01          228    229 LE14C:  MVI     C,1             ;SET UP TO PRINT ENTRY
e14e  2a dc d0       229    230         LHLD    FREAD           ;GET IT'S ADDRESS
e151  cd 2a e6       230    231 LE151:  CALL    LE62A           ;PRINT IT
e154  c3 d1 e0       231    232         JMP     EORNS           ;DONE WITH IODR
                     232    233 ;
                     233    234 ;SET UP I/O JUMPS TO I/O DRIVER SET WHOSE ADDRESSES
                     234    235 ;ARE POINTED TO BY OPRD (SET ABOVE)
                     235    236 ;
e157  2a 05 d1       236    237 LE157:  LHLD    OPRD            ;GET ADDRESS OF I/O ADDRESSAS
                     237    238 ;
                     238    239 ;STORE I/O JUMPS TO ADDRESSES POINTED TO BY CONTENTS OF
                     239    240 ;H,L -- SYSIO, OR IF ENTERD IN LINE, ONE OF THE OTHER
                     240    241 ;I/O DRIVERS
                     241    242 ;
e15a  cd 82 e9       242    243 LE15A:  CALL    LODM            ;GET THE 4 BYTES OF 2 ADDRESSES
e15d  21 cc d0       243    244         LXI     H,IN8           ;POINT TO THE I/O JUMPS
e160  36 c3          244    245         MVI     M,0C3H          ;STORE JUMP INST.
e162  23             245    246         INX     H               ;POINT TO NEXT BYTE
e163  70             246    247         MOV     M,B             ;STORE IT
e164  23             247    248         INX     H               ;2ND BYTE
e165  71             248    249         MOV     M,C             ;STORE IT
e166  23             249    250         INX     H               ;NOW 1ST BYTE FOR OUTPUT
e167  36 c3          250    251         MVI     M,0C3H          ;STORE JUMP INST
e169  23             251    252         INX     H               ;POINT TO ADDR 1ST BYTE
e16a  72             252    253         MOV     M,D             ;STORE IT
e16b  23             253    254         INX     H               ;POINT 2ND BYTE
e16c  73             254    255         MOV     M,E             ;STORE IT
e16d  af             255    256         XRA     A               ;A ZERO
e16e  32 fc d0       256    257         STA     IOSWC           ;RESET SWITCH TO NO-SWITCH MODE
e171  c9             257    258         RET                     ;DONE
                     258    259 ;
                     259    260 ;THE FOLLOWING ROUTINE READS A COMMAND LINE FROM THE
                     260    261 ;TERMINAL AND PUTS IT IN THE OUTPUT BUFFER
                     261    262 ;
e172  21 e4 d1       262    263 READ:   LXI     H,IBUF          ;GET INPUT BUFFER ADDR
e175  22 d4 d0       263    264         SHLD    ADDS            ;SAVE ADDRESS
e178  1e 02          264    265         MVI     E,2             ;INIT. CHAR COUNT
e17a  cd cc d0       265    266 NEXT:   CALL    IN8             ;READ A LINE
e17d  fe 18          266    267         CPI     'X'-40H         ;CHECK FOR CNTL X
e17f  c2 88 e1       267    268         JNZ     CR              ;CHECK FOR C/R IF NOT CNTL X
e182  cd 16 e2       268    269         CALL    CRLF            ;ELSE DO CRLF
e185  c3 72 e1       269    270         JMP     READ            ;AND START OVER
e188  fe 0d          270    271 CR:     CPI     0DH             ;IS IT A C/R ?
e18a  c2 a7 e1       271    272         JNZ     DEL             ;IF NOT, CHECK FOR CHAR DELETE
e18d  7d             272    273         MOV     A,L             ;GET LOW ORDER BYTE OF ADDR
e18e  fe e4          273    274         CPI     IBUF AND 0FFH   ;SEE IF CR IS ONLY CHAR ON LINE
e190  ca 72 e1       274    275         JZ      READ            ;GET ANOTHER LINE IF SO
e193  70             275    276         MOV     M,B             ;PUT CHAR IN THE LINE
e194  23             276    277         INX     H               ;POINT TO NEXT POSITION
e195  36 01          277    278         MVI     M,1             ;PUT END OF LINE INDICATOR
e197  23             278    279         INX     H               ;POINT 1 AFTER THE LINE
e198  cd df f3       279    280         CALL    LF3DF           ;GET TERMW+1 IN A
e19b  3c             280    281         INR     A               ;INCREMENT IT FOR EOF MARK
e19c  cd d1 e1       281    282         CALL    CLER            ;CLEAR REST OF THE BUFFER
e19f  21 e3 d1       282    283         LXI     H,IBUF-1        ;POINT TO CHAR COUNT
e1a2  7b             283    284         MOV     A,E             ;PUT IT BEFORE THE LINE
e1a3  32 f3 d0       284    285         STA     CCNT            ;AND SAVE AS CHAR COUNT
e1a6  c9             285    286         RET                     ;DONE
e1a7  fe 7f          286    287 DEL:    CPI     7FH             ;IS THE CHAR A DELETE ?
e1a9  c2 bc e1       287    288         JNZ     CHAR            ;IF NOT, PUT IT IN LINE
e1ac  3e e4          288    289         MVI     A,IBUF AND 0FFH ;ELSE GET LOW-ORDER ADDR
e1ae  bd             289    290         CMP     L               ;MAKE SURE NOT AT IBUF
e1af  ca 7a e1       290    291         JZ      NEXT            ;IF SO, IGNORE DELETE
e1b2  2b             291    292         DCX     H               ;ELSE DCR BUFFER POINTER
e1b3  1d             292    293         DCR     E               ;AND CHAR COUNT
e1b4  06 5f          293    294 BSPA:   MVI     B,5FH           ;GET BACKSPACE CHAR
e1b6  cd cf d0       294    295         CALL    OUT8            ;MAKE TERMINAL BKSPACE
e1b9  c3 7a e1       295    296         JMP     NEXT            ;THEN GET NEXT CHAR
e1bc  cd cf d0       296    297 CHAR:   CALL    OUT8            ;ECHO THE CHAR
e1bf  fe 20          297    298         CPI     ' '             ;MAKE SURE IT'S PRINTABLE
e1c1  da 7a e1       298    299         JC      NEXT            ;SKIP IT IF IT'S CNTL CHAR
e1c4  77             299    300         MOV     M,A             ;ELSE PUT IT IN THE BUFFER
e1c5  3a 8f d1       300    301         LDA     TERMW           ;GET TERMINAL WIDTH
e1c8  bd             301    302         CMP     L               ;SEE IF WE'RE THERE
e1c9  ca b4 e1       302    303         JZ      BSPA            ;BACKSPACE IF BUFFER OVERFLOW
e1cc  23             303    304         INX     H               ;ELSE INCREMENT THE BUFFER PNTR
e1cd  1c             304    305         INR     E               ;AND THE CHAR COUNT
e1ce  c3 7a e1       305    306         JMP     NEXT            ;THEN DO NEXT CHAR
                     306    307 ;
                     307    308 ;THIS ROUTINE IS USED TO BLANK OUT A PORTION OF MEMORY
                     308    309 ;SINCE ONLY L IS TESTED, AREA MUST BE < 256 BYTES
                     309    310 ;
e1d1  bd             310    311 CLER:   CMP     L               ;SEE IF AT END OF AREA TO BLANK
e1d2  c8             311    312         RZ                      ;DONE IF SO
e1d3  36 20          312    313         MVI     M,' '           ;ELSE GET A SPACE
e1d5  23             313    314         INX     H               ;INCREMENT THE MEMORY POINTER
e1d6  c3 d1 e1       314    315         JMP     CLER            ;AND TEST NEW ADDRESS
                     315    316 ;
                     316    317 ;HERE ARE THE BUILT IN I/O DRIVERS AND THEIR NAME
                     317    318 ;THIS CODE IS MOVED INTO THE DATA PORTION DURING
                     318    319 ;PROGRAM INITIALIZATION.
                     319    320 ;PART OF THE ENTER COMMAND IS ALSO MOVED, FOR NO REASON.
                     320    321 ;
e1d9  53 59 53 49    321    322 IONME:  DB      'SYSIO'         ;STANDARD DRIVER NAME
e1dd  4f             321    323
e1de  98 d0          322    324         DW      INDR            ;INPUT ROUTINE ADDR
e1e0  a9 d0          323    325         DW      OUTDR           ;OUTPUT ROUTINE ADDR
e1e2  cd a4 d0       324    326 INP8:   CALL    STAT            ;BECOMES INDR: AFTER THE MOVE
                     325    327 ;       JZ      INDR            ;*UM*
e1e5  c2 98 d0       326    328         JNZ     INDR            ;*UM*
e1e8  db 01          327    329         IN      UDATA
e1ea  e6 7f          328    330         ANI     7FH
e1ec  47             329    331         MOV     B,A
e1ed  c9             330    332         RET
e1ee  db 00          331    333         IN      USTA            ;THIS BECOMES STAT:
e1f0  e6 01          332    334         ANI     DAV
e1f2  c9             333    335         RET
e1f3  cd a4 d0       334    336 OUTP8:  CALL    STAT
e1f6  ca b8 d0       335    337         JZ      NOCHR
e1f9  db 01          336    338         IN      UDATA           ;NOTE THAT BEFORE EA. OUTPUT
e1fb  e6 7f          337    339         ANI     7FH
e1fd  fe 1b          338    340         CPI     ESC             ;ALS8 TESTS FOR AN ESC. CHAR
e1ff  ca 60 e0       339    341         JZ      EORMS           ;AND RETNS TO CMD MODE IF FOUND
e202  db 00          340    342         IN      USTA            ;BECOMES NOCHR:
e204  e6 80          341    343         ANI     TBE
                     342    344 ;       JZ      NOCHR
e206  c2 b8 d0       343    345         JNZ     NOCHR           ;*UM*
e209  78             344    346         MOV     A,B
e20a  d3 01          345    347         OUT     UDATA
e20c  c9             346    348         RET
                     347    349 ;
                     348    350 ;THE ENTER COMMAND.
                     349    351 ;
e20d  cd 1c e5       350    352 ENTR:   CALL    VCHK            ;MAKE SURE PARAMETERS GIVEN
e210  cd 0b e8       351    353         CALL    ENTS            ;TO DO THE ENTER FUNCTION
e213  da dd e7       352    354         JC      WHAT            ;IF ERROR FOUND
                     353    355 ;
                     354    356 ;CRLF UTILITY
                     355    357 ;
e216  06 0d          356    358 CRLF:   MVI     B,0DH           ;CAR. RETURN
e218  cd cf d0       357    359         CALL    OUT8
e21b  06 0a          358    360 LF:     MVI     B,0AH           ;LINE FEED
e21d  cd cf d0       359    361         CALL    OUT8
e220  06 7f          360    362         MVI     B,7FH           ;NULLS FOR SLOW TERMINALS
e222  cd cf d0       361    363         CALL    OUT8
e225  c3 cf d0       362    364         JMP     OUT8            ;LET OUT8 DO THE RETURN
                     363    365 ;
                     364    366 ;TABLE SEARCH ROUTINE USED FOR BOTH COMMAND SEARCHES AND
                     365    367 ;SYMBOL LOOK-UPS.  ZERO FLAG SET IF MATCH FOUND, IN WHICH
                     366    368 ;CASE H,L HAS VALUE OF STRING (16 BIT).
                     367    369 ;LENGTH OF STRING IS IN B, TABLE ADDRESS IS IN
                     368    370 ;D,E, ADDS POINTS TO ITEM TO BE LOOKED UP.
                     369    371 ;IF NO MATCH, D,E POINT TO BYTE AFTER TABLE END.
                     370    372 ;
e228  2a d4 d0       371    373 COMS:   LHLD    ADDS            ;GET ADDR OF ITEM TO LOOK UP
e22b  48             372    374         MOV     C,B             ;LENGTH OF ITEM TO LOOK UP
e22c  1a             373    375         LDAX    D               ;1ST BYTE OF NEXT TABLE ENTRY
e22d  b7             374    376         ORA     A               ;IF ZERO, ==> END OF TABLE
e22e  ca 3e e2       375    377         JZ      LE23E           ;TO SET RET FLAG FOR NO MATCH
e231  cd 57 e2       376    378         CALL    SEAR            ;SEE IF ENTRY MATCHES STRING
e234  1a             377    379         LDAX    D               ;GET 1ST BYTE OF VALUE
e235  67             378    380         MOV     H,A             ;MOVING TO H,L
e236  13             379    381         INX     D               ;INCREMENT POINTER
e237  1a             380    382         LDAX    D               ;GET 2ND BYTE OF VALUE
e238  6f             381    383         MOV     L,A             ;MOVE TO H,L COMPLETE
e239  c8             382    384         RZ                      ;RET IF SEAR INDICATED MATCH
e23a  13             383    385         INX     D               ;ELSE POINT TO NEXT TABLE ITEM
e23b  c3 28 e2       384    386         JMP     COMS            ;AND TEST IT
e23e  3c             385    387 LE23E:  INR     A               ;MAKE NON ZERO
e23f  c9             386    388         RET                     ;INDICATING NO MATCH
                     387    389 ;
                     388    390 ;THE FOLLOWING ROUTINE IS THE SAME AS COMS, ABOVE, EXCEPT
                     389    391 ;THAT IT IS USED TO SEARCH THE CUSTOM COMMAND TABLE, WHICH
                     390    392 ;CONSISTS OF 5 CHAR NAMES WITH ONLY 1ST FOUR TESTED.
                     391    393 ;BECAUSE OF THIS IT HAS AN EXTRA INX D INSTR.
                     392    394 ;
e240  2a d4 d0       393    395 LE240:  LHLD    ADDS            ;GET ADDR OF ITEM TO LOOK UP
e243  48             394    396         MOV     C,B             ;LENGTH OF ITEM TO LOOK UP
e244  1a             395    397         LDAX    D               ;1ST BYTE OF TABLE ENTRY
e245  b7             396    398         ORA     A               ;IF ZERO ==> END OF TABLE
e246  ca 3e e2       397    399         JZ      LE23E           ;TO SET RET FLAG FOR NO MATCH
e249  cd 57 e2       398    400         CALL    SEAR            ;SEE IF ENTRY MATCHES STRING
e24c  13             399    401         INX     D               ;SKIP 5TH CHAR OF ENTRY NAME
e24d  1a             400    402         LDAX    D               ;GET 1ST BYTE OF VALUE
e24e  67             401    403         MOV     H,A             ;MOVING TO H,L
e24f  13             402    404         INX     D               ;POINT TO 2ND BYTE OF VALUE
e250  1a             403    405         LDAX    D               ;GET 2ND BYTE OF VALUE
e251  6f             404    406         MOV     L,A             ;MOVE TO H,L COMPLETE
e252  c8             405    407         RZ                      ;RET IF SEAR INDICATED MATCH
e253  13             406    408         INX     D               ;POINT TO NEXT ENTRY
e254  c3 40 e2       407    409         JMP     LE240           ;TEST IT
                     408    410 ;
                     409    411 ;ROUTINE TO SEE IF TWO STRINGS ARE EQUAL.  STRINGS POINTED
                     410    412 ;TO BY D,E AND H,L.  ZERO FLAG SET INDICATES MATCH.  REG C
                     411    413 ;HAS LENGTH OF MASTER STRING.  D POINT AFTER ITS STRING
                     412    414 ;EVEN IF NO MATCH; H,L POINTS AFTER IT'S STRING IF MATCH,
                     413    415 ;ELSE TO 1ST NON-MATCHING CHAR.
                     414    416 ;
e257  1a             415    417 SEAR:   LDAX    D               ;GET A CHAR FROM 1 STRING
e258  be             416    418         CMP     M               ;COMPARE TO OTHER STRING
e259  c2 63 e2       417    419         JNZ     INCA            ;IF IT DOESN'T MATCH
e25c  23             418    420         INX     H               ;INCREMENT POINTER
e25d  13             419    421         INX     D               ;INCREMENT POINTER
e25e  0d             420    422         DCR     C               ;COUNT OF CHARS LEFT TO CHECK
e25f  c2 57 e2       421    423         JNZ     SEAR            ;IF CHARS LEFT, TEST THEM
e262  c9             422    424         RET                     ;ELSE DONE
e263  13             423    425 INCA:   INX     D               ;INCREMENT POINTER
e264  0d             424    426         DCR     C               ;DECREMENT COUNT
e265  c2 63 e2       425    427         JNZ     INCA            ;KEEP INR. POINTER IF NOT DONE
e268  0c             426    428         INR     C               ;ELSE CLEAR ZERO FLAG
e269  c9             427    429         RET                     ;AND RETURN
                     428    430 ;
                     429    431 ;ROUTINE TO ZERO OUT A BUFFER IN MEMORY
                     430    432 ;
e26a  af             431    433 ZBUF:   XRA     A               ;GET A ZERO
e26b  11 ef d0       432    434         LXI     D,ABUF+16       ;POINT TO THE BUFFER
e26e  06 10          433    435         MVI     B,16            ;BUFFER LENGTH
e270  1b             434    436 ZBU1:   DCX     D               ;DECREMENT POINTER
e271  12             435    437         STAX    D               ;ZERO OUT A LOCATION
e272  05             436    438         DCR     B               ;DECREMENT COUNT
e273  c2 70 e2       437    439         JNZ     ZBU1            ;IF MORE LEFT TO ZERO
e276  c9             438    440         RET                     ;DONE
                     439    441 ;
                     440    442 ;THE EXECUTE COMMAND - DOES A CALL TO A SPECIFIED ADDR.
                     441    443 ;
e277  cd 1c e5       442    444 EXEC:   CALL    VCHK            ;CHECK FOR PROPER ARGUMENT
e27a  cd 16 e2       443    445         CALL    CRLF            ;DO CRLF
e27d  2a ef d0       444    446         LHLD    BBUF            ;GET EXEC ADDR
e280  e9             445    447         PCHL                    ;GO TO IT
                     446    448 ;
                     447    449 ;ROUTINE TO EXTRACT VALUES FROM A COMMAND LINE
                     448    450 ;AND PLACE THEM IN BUFFERS
                     449    451 ;
e281  21 00 00       450    452 ETRA:   LXI     H,0             ;GET A ZERO
e284  22 f1 d0       451    453         SHLD    BBUF+2          ;ASSUME NO 2ND OPERAND
e287  22 d7 d0       452    454         SHLD    FBUF            ;ASSUME NO FILE NAME IN /'S
e28a  cd 6a e2       453    455         CALL    ZBUF            ;ZERO OUT ABUF
e28d  21 e3 d1       454    456         LXI     H,IBUF-1        ;SET TO SCAN COMMAND LINE
e290  23             455    457 VAL1:   INX     H               ;POINT TO NEXT CHAR
e291  7e             456    458         MOV     A,M             ;GET CHAR
e292  fe 20          457    459         CPI     ' '             ;SPACE ?
e294  3f             458    460         CMC                     ;SET CARRY TO INDICATE CNTL CHR
e295  d0             459    461         RNC                     ;DONE-CR ONLY CNTL CHR ALLOWED
e296  c2 90 e2       460    462         JNZ     VAL1            ;IF CHAR WAS NOT A SPACE
e299  22 01 d1       461    463         SHLD    PNTR            ;ELSE SPACE, SAVE POINTER
e29c  cd cc ee       462    464         CALL    SBLK            ;AND SCAN TO 1ST CHAR
e29f  3f             463    465         CMC                     ;CARRY SET ==> C/R 1ST CHAR
e2a0  d0             464    466         RNC                     ;DONE THEN
e2a1  fe 2f          465    467         CPI     '/'             ;FILE NAME DELIMITER ?
e2a3  c2 cb e2       466    468         JNZ     VAL5            ;NO, LOOK FOR OTHER PARAMETERS
e2a6  11 d7 d0       467    469         LXI     D,FBUF          ;YES, POINT TO FILE NAME BUFFER
e2a9  0e 05          468    470         MVI     C,NMLEN         ;FILE NAME LENGTH
e2ab  23             469    471 VAL2:   INX     H               ;MOVING NAME TO FILE NAME BUFR
e2ac  7e             470    472         MOV     A,M             ;GET A CHAR
e2ad  fe 2f          471    473         CPI     '/'             ;TERMINATING SLASH ?
e2af  ca bb e2       472    474         JZ      VAL3            ;DONE MOVING NAME THEN
e2b2  0d             473    475         DCR     C               ;ELSE DCR COUNT OF CHARS LEFT
e2b3  fa dd e7       474    476         JM      WHAT            ;IF NAME > 5 CHARS
e2b6  12             475    477         STAX    D               ;ELSE PUT LETTER IN BUFFER
e2b7  13             476    478         INX     D               ;INCREMENT DEST. POINTER
e2b8  c3 ab e2       477    479         JMP     VAL2            ;AND DO NEXT CHARACTER
e2bb  3e 20          478    480 VAL3:   MVI     A,' '           ;GET A SPACE
e2bd  0d             479    481 VAL4:   DCR     C               ;DECREMENT COUNT OF CHARS LEFT
e2be  fa c6 e2       480    482         JM      DONE            ;IF NEGATIVE, DONE
e2c1  12             481    483         STAX    D               ;PAD REST OF BUFR WITH SPACES
e2c2  13             482    484         INX     D               ;INCREMENT BUFFER POINTER
e2c3  c3 bd e2       483    485         JMP     VAL4            ;CONTINUE TILL BUFFER FILLED
e2c6  cd d3 ee       484    486 DONE:   CALL    SBL2            ;SCAN TO NEXT NON-SPACE CHAR
e2c9  3f             485    487         CMC                     ;CARRY MEANS CHAR. RETRN FOUND
e2ca  d0             486    488         RNC                     ;AND CAR. RETRN = DONE
e2cb  11 df d0       487    489 VAL5:   LXI     D,ABUF          ;POINT TO THE ASCII BUFFER
e2ce  cd d7 e2       488    490         CALL    LE2D7           ;PUT IN ABUF & CNVRT BY MODE
e2d1  d8             489    491         RC                      ;IF C/R WAS TERMINATING CHAR
e2d2  cd cc ee       490    492         CALL    SBLK            ;ELSE SCAN TO 2ND ASCII PARM.
e2d5  3f             491    493         CMC                     ;TEST FOR C/R FOUND
e2d6  d0             492    494         RNC                     ;RET., ELSE FALL THRU TO DO 2ND
e2d7  cd 3e f1       493    495 LE2D7:  CALL    ALPS            ;PUT PARM. IN ABUF
e2da  7b             494    496         MOV     A,E             ;GET ENDING ADDR LOW BYTE
e2db  90             495    497         SUB     B               ;SUBTRACTING PARM LENGTH
e2dc  6f             496    498         MOV     L,A             ;TO GET BACK TO START
e2dd  7a             497    499         MOV     A,D             ;NOW HIGH ORDER BYTE
e2de  de 00          498    500         SBI     0               ;IN CASE OF BORROW
e2e0  67             499    501         MOV     H,A             ;H,L HAS START OF PARM IN ABUF
e2e1  3a 2f d1       500    502         LDA     SMODE           ;GET NUMERIC MODE
e2e4  87             501    503         ADD     A               ;MULT. BY 2
e2e5  c6 04          502    504         ADI     4               ;AND ADD 4
e2e7  b8             503    505         CMP     B               ;TEST FOR NO. OF DIGITS ALLOWED
e2e8  d8             504    506         RC                      ;# DIGITS > 4 AND HEX MODE
e2e9  cd a5 e9       505    507         CALL    NORM            ;NORMALIZE ASCII NUMBER
e2ec  eb             506    508         XCHG                    ;START OF SUB-BUFFER TO D,E
e2ed  21 07 00       507    509         LXI     H,7             ;LENGTH OF SUB-BUFFERS IN ABUF
e2f0  19             508    510         DAD     D               ;H,L POINT TO NEXT SUB-BUFFER
e2f1  eb             509    511         XCHG                    ;NEXT SUB-BUFFER IN D,E
e2f2  c9             510    512         RET                     ;DONE
                     511    513 ;
                     512    514 ;SOME NUMERICAL CONVERSION ROUTINES FOLLOW.
                     513    515 ;B,C POINT TO 1ST ASCII DIGIT, NUMERIC STRING ENDS WITH 
                     514    516 ;BINARY ZERO.  ANSWER IN H,L AND CARRY SET = ERROR.
                     515    517 ;
                     516    518 ;EMODE CONVERTS BASED ON CURRENT MODE SETTING, SMODE
                     517    519 ;EQUAL TO 0 FOR HEX, 1 FOR OCTAL.
                     518    520 ;
e2f3  3a 2f d1       519    521 EMODE:  LDA     SMODE           ;GET MODE SETTING
e2f6  b7             520    522         ORA     A               ;SET FLAGS
e2f7  c2 33 e3       521    523         JNZ     AOCT            ;OCTAL IS 1
e2fa  21 00 00       522    524 AHEX:   LXI     H,0             ;START WITH A ZERO
e2fd  0a             523    525 AHE1:   LDAX    B               ;GET A DIGIT
e2fe  b7             524    526         ORA     A               ;SEE IF ZERO
e2ff  c8             525    527         RZ                      ;YES - DONE
e300  29             526    528         DAD     H               ;MULT H,L BY TWO
e301  29             527    529         DAD     H               ;AGAIN - NOW 4X ORIG VALUE
e302  29             528    530         DAD     H               ;AGAIN - NOW 8X ORIG VALUE
e303  29             529    531         DAD     H               ;AGAIN - NOW 10H X ORIG VALU
e304  cd 11 e3       530    532         CALL    AHS1            ;CONVERT DIGIT TO BINARY
e307  fe 10          531    533         CPI     10H             ;SEE IF LEGAL
e309  3f             532    534         CMC                     ;SET CARRY FLAG
e30a  d8             533    535         RC                      ;FOR PROPER ILLEAGLE RETURN
e30b  85             534    536         ADD     L               ;OTHERWISE ADD IT INTO THE NO.
e30c  6f             535    537         MOV     L,A             ;AND RESTORE TO H,L
e30d  03             536    538         INX     B               ;NOW POINT TO NEXT ASCII DIGIT
e30e  c3 fd e2       537    539         JMP     AHE1            ;AND PROCESS IT
                     538    540 ;
                     539    541 ;ROUTINE TO CONVERT ASCII HEX DIGIT INTO BINARY
                     540    542 ;
e311  d6 30          541    543 AHS1:   SUI     30H             ;CONVERT 0-9 TO BINARY
e313  fe 0a          542    544         CPI     0AH             ;SEE IF > ASCII 9
e315  d8             543    545         RC                      ;RETURN IF NOT, DONE
e316  d6 07          544    546         SUI     7               ;TO TAKE CARE OF A-F
e318  fe 0a          545    547         CPI     0AH             ;COMPARE TO DECIMAL 10
e31a  d0             546    548         RNC                     ;IF > 10 OR =, RETURN DONE
e31b  3e ff          547    549         MVI     A,0FFH          ;ELSE BAD CHAR, SET A > 10H
e31d  c9             548    550         RET                     ;AND RETURN
                     549    551 ;
                     550    552 ;HERE IS A ROUTINE TO CONVERT BOTH OF TWO POSSIBLE
                     551    553 ;VALUES IN ABUF INTO BINARY BASED ON THE CURRENT MODE
                     552    554 ;SETTING, AND PLACE THEM INTO BBUF AND BBUF+2
                     553    555 ;
e31e  01 df d0       554    556 LE31E:  LXI     B,ABUF          ;POINT TO THE 1ST OPERAND
e321  cd f3 e2       555    557         CALL    EMODE           ;CONVERT IT
e324  d8             556    558         RC                      ;RETURN W/CARRY SET ON ERROR
e325  22 ef d0       557    559         SHLD    BBUF            ;PUT VALUE IN BBUF
e328  01 e6 d0       558    560         LXI     B,ABUF+7        ;POINT TO 2ND VALUE
e32b  cd f3 e2       559    561         CALL    EMODE           ;CONVERT IT
e32e  d8             560    562         RC                      ;RETURN W/CARRY SET ON ERROR
e32f  22 f1 d0       561    563         SHLD    BBUF+2          ;PUT IT IN THE BINARY BUFFER
e332  c9             562    564         RET                     ;DONE
                     563    565 ;
                     564    566 ;OCTAL TO BINARY CONVERSION
                     565    567 ;
e333  21 00 00       566    568 AOCT:   LXI     H,0             ;START W/ZERO
e336  0a             567    569 LE336:  LDAX    B               ;GET A CHAR
e337  b7             568    570         ORA     A               ;ZERO ?
e338  c8             569    571         RZ                      ;DONE THEN, RETURN
e339  29             570    572         DAD     H               ;MULT H,L BY TWO
e33a  29             571    573         DAD     H               ;AGAIN - NOW 4X ORIG VALU
e33b  29             572    574         DAD     H               ;AGAIN - NOW 8X ORIG VALU
e33c  d6 30          573    575         SUI     30H             ;CONVERT ASCII DIGIT TO BINARY
e33e  fe 08          574    576         CPI     8               ;LEGAL VALUE ?
e340  3f             575    577         CMC                     ;SET CARRY FOR PROPER RETURN
e341  d8             576    578         RC                      ;RETURN IF BAD
e342  85             577    579         ADD     L               ;ELSE ADD IN VALUE
e343  6f             578    580         MOV     L,A             ;AND PUT IT BACK
e344  03             579    581         INX     B               ;POINT TO NEXT ASCII DIGIT
e345  c3 36 e3       580    582         JMP     LE336           ;AND PROCESS IT
                     581    583 ;
                     582    584 ;DECIMAL OUTPUT ROUTINE FOR BINARY NO. IN REG A.
                     583    585 ;
e348  cd ad e3       584    586 DOUT:   CALL    BIND            ;CONVRT A TO DECIMAL IN ADDS
e34b  cd 7a e5       585    587 LE34B:  CALL    LE57A           ;PRINT 1ST TWO CHARS IN ADDS
e34e  23             586    588         INX     H               ;POINT TO 3RD CHAR IN ADDS
e34f  46             587    589         MOV     B,M             ;GET IT
e350  c3 cf d0       588    590         JMP     OUT8            ;PRINT IT AND RETURN
                     589    591 ;
                     590    592 ;OCTAL OUTPUT ROUTINE
                     591    593 ;
e353  cd c8 e3       592    594 OOUT:   CALL    BINO            ;CONVERT TO OCTAL IN ADDS
e356  c3 4b e3       593    595         JMP     LE34B           ;PUT OUT 3 OCTAL DIGITS AND RET
                     594    596 ;
                     595    597 ;OCTAL FOLLOWED BY SPACE
                     596    598 ;
e359  cd 53 e3       597    599 OOTB:   CALL    OOUT            ;PUT OUT OCTAL NO.
e35c  06 20          598    600 LE35C:  MVI     B,' '           ;GET A SPACE
e35e  c3 cf d0       599    601         JMP     OUT8            ;PUT IT OUT
                     600    602 ;
                     601    603 ;OUTPUT NUMBER OF SPACES IN REG C
                     602    604 ;
e361  cd 5c e3       603    605 BLKO:   CALL    LE35C           ;PUT OUT A SPACE
e364  0d             604    606         DCR     C               ;DECREMENT COUNT
e365  c2 61 e3       605    607         JNZ     BLKO            ;PUT OUT MORE IF NOT DONE
e368  c9             606    608         RET                     ;ELSE RETURN
                     607    609 ;
                     608    610 ;COMPARE THE ADDRESSES AT BBUF AND BBUF+2
                     609    611 ;INCREMENT THE ADDR AT BBUF AND RET CARRY SET IF SAME
                     610    612 ;USED BY DUMP COMMAND TO TEST FOR END
                     611    613 ;
e369  2a ef d0       612    614 ACHK:   LHLD    BBUF            ;GET 1ST ADDRESS
e36c  3a f2 d0       613    615         LDA     BBUF+3          ;GET HIGH BYTE OF 2ND ADDR
e36f  bc             614    616         CMP     H               ;COMPARE HIGH ORDER BYTES
e370  c2 7b e3       615    617         JNZ     ACH1            ;BBUF LOWER, INR IT & GO HOME
e373  3a f1 d0       616    618         LDA     BBUF+2          ;GET 2ND ADDR LOW BYTE
e376  bd             617    619         CMP     L               ;COMPARE TWO ADDR.
e377  c2 7b e3       618    620         JNZ     ACH1            ;BBUF LOWER, INR IT & GO HOME
e37a  37             619    621         STC                     ;ADDR. ARE SAME, SET CARRY
e37b  23             620    622 ACH1:   INX     H               ;INCREMENT BBUF ADDR
e37c  22 ef d0       621    623         SHLD    BBUF            ;PUT IT BACK
e37f  c9             622    624         RET                     ;DONE
                     623    625 ;
                     624    626 ;PRINT CHARACTERS UNTIL A CAR. RET. FOUND
                     625    627 ;
e380  af             626    628 SCRN:   XRA     A               ;BINARY ZERO
e381  32 ff d0       627    629         STA     XOUT            ;LAST CHAR OUTPUT
e384  46             628    630         MOV     B,M             ;GET A CHARACTER
e385  3e 0d          629    631         MVI     A,0DH           ;CAR. RETRN TO A.
e387  b8             630    632         CMP     B               ;CHAR IN B = C/R ?
e388  c8             631    633         RZ                      ;YES - DONE
e389  cd cf d0       632    634         CALL    OUT8            ;NO - OUTPUT IT & MOV TO A
e38c  23             633    635         INX     H               ;INCREMENT POINTER
e38d  c3 81 e3       634    636         JMP     SCRN+1          ;UPDATE XOUT AND DO NEXT CHAR
                     635    637 ;
                     636    638 ;CONVERT BINARY TO HEX ASCII & STORE
                     637    639 ;
e390  21 d4 d0       638    640 BINH:   LXI     H,ADDS          ;DESTINATION FOR ASCII
e393  47             639    641         MOV     B,A             ;SAVE CHAR IN B
e394  1f             640    642         RAR                     ;MOVING HIGH ORDER NIBBLE TO
e395  1f             641    643         RAR                     ;LOW ORDER NIBBLE
e396  1f             642    644         RAR     
e397  1f             643    645         RAR     
e398  cd a3 e3       644    646         CALL    BIN1            ;CONVERT TO LETTER OR NO.
e39b  77             645    647         MOV     M,A             ;STORE IT
e39c  23             646    648         INX     H               ;INCREMENT DEST. POINTER
e39d  78             647    649         MOV     A,B             ;GET BACK ORIG NO.
e39e  cd a3 e3       648    650         CALL    BIN1            ;CONVERT LOW ORDER NIBBLE TO NO
e3a1  77             649    651         MOV     M,A             ;PUT IT IN MEMORY
e3a2  c9             650    652         RET                     ;DONE
                     651    653 ;
                     652    654 ;CONVERT LOW ORDER NIBBLE OF A TO HEX ASCII
                     653    655 ;
e3a3  e6 0f          654    656 BIN1:   ANI     0FH             ;MASK LOW NIBBLE
e3a5  c6 30          655    657         ADI     30H             ;CONVERT TO NO.
e3a7  fe 3a          656    658         CPI     '9'+1           ;SEE IF > 9
e3a9  d8             657    659         RC                      ;IT WASN'T -- DONE
e3aa  c6 07          658    660         ADI     7               ;ADD 7 TO GET LETTER
e3ac  c9             659    661         RET                     ;DONE
                     660    662 ;
                     661    663 ;BINARY TO DECIMAL
                     662    664 ;
e3ad  21 d4 d0       663    665 BIND:   LXI     H,ADDS          ;POINT TO DESTINATION
e3b0  06 64          664    666         MVI     B,100           ;DOING SUCCESSIVE SUBTRACTIONS
e3b2  cd be e3       665    667         CALL    BID1            ;SUBTRACT & KEEP COUNT
e3b5  06 0a          666    668         MVI     B,10            ;NOW WORK WITH TENS
e3b7  cd be e3       667    669         CALL    BID1            ;MORE SUBTRACTIONS
e3ba  c6 30          668    670         ADI     30H             ;CONVERT UNITS TO DECIMAL ASCII
e3bc  77             669    671         MOV     M,A             ;STORE UNITS DIGIT IN MEMORY
e3bd  c9             670    672         RET                     ;DONE
e3be  36 2f          671    673 BID1:   MVI     M,'0'-1
e3c0  34             672    674         INR     M               ;INCR COUNT OF SUBTRACTIONS
e3c1  90             673    675         SUB     B               ;DO A SUBTRACTION
e3c2  d2 c0 e3       674    676         JNC     BID1+2          ;DO IT AGAIN IF ANS > 0
e3c5  80             675    677         ADD     B               ;IF ANS < 0, UN-SUBTRACT
e3c6  23             676    678         INX     H               ;INCREMENT DEST. POINTER
e3c7  c9             677    679         RET                     ;DIGIT STORED
                     678    680 ;
                     679    681 ;BINARY TO OCTAL
                     680    682 ;
                     681    683 ;NOTE THAT THE CARRY IS USED, SO THE MAX SINGLE BYTE OCTAL
                     682    684 ;VALUE THAT CAN BE HANDLED IS 777 NOT 377.  THIS FEATURE IS
                     683    685 ;USED IN THE DUMP ROUTINE.
                     684    686 ;
e3c8  21 d4 d0       685    687 BINO:   LXI     H,ADDS          ;GET DEST. POINTER
e3cb  47             686    688         MOV     B,A             ;SAVE ORIG NO. IN B
e3cc  17             687    689         RAL                     ;HIGH ORDER BITS & CARRY
e3cd  17             688    690         RAL                     ;MOVING TO LOW ORDER 3 BITS
e3ce  17             689    691         RAL                     ;
e3cf  e6 07          690    692         ANI     7               ;MASK TO 3 BITS
e3d1  c6 30          691    693         ADI     30H             ;CONVERT TO ASCII
e3d3  77             692    694         MOV     M,A             ;STORE IN MEMORY
e3d4  78             693    695         MOV     A,B             ;GET ORIG. NO.
e3d5  1f             694    696         RAR                     ;MOVE MIDDLE 3 BITS
e3d6  1f             695    697         RAR                     ;TO LOW ORDER 3 BITS
e3d7  1f             696    698         RAR     
e3d8  e6 07          697    699         ANI     7               ;AND MASK THEM OUT
e3da  c6 30          698    700         ADI     30H             ;CONVERT TO ASCII
e3dc  23             699    701         INX     H               ;INCREMENT MEMORY POINTER
e3dd  77             700    702         MOV     M,A             ;AND PUT DIGIT IN MEMORY
e3de  78             701    703         MOV     A,B             ;GET ORIGINAL DIGIT AGAIN
e3df  e6 07          702    704         ANI     7               ;MASK TO LOW ORDER 3 BITS
e3e1  c6 30          703    705         ADI     30H             ;CONVERT TO ASCII
e3e3  23             704    706         INX     H               ;INCREMENT MEMORY POINTER
e3e4  77             705    707         MOV     M,A             ;AND STORE IN MEMORY
e3e5  c9             706    708         RET                     ;DONE
                     707    709 ;
                     708    710 ;HERE IS THE ALS-8 COMMAND TABLE
                     709    711 ;
e3e6  4c 49 53 54    710    712 CTAB:   DB      'LIST'
e3ea  e9 db          711    713         DB      (LIST SHR 8) AND 0FFH, LIST AND 0FFH
e3ec  54 45 58 54    712    714         DB      'TEXT'
e3f0  e9 dc          713    715         DB      (TEXT SHR 8) AND 0FFH, TEXT AND 0FFH
e3f2  44 45 4c 54    714    716         DB      'DELT'
e3f6  ea 2c          715    717         DB      (DELT SHR 8) AND 0FFH, DELT AND 0FFH
e3f8  4d 4f 44 45    716    718         DB      'MODE'
e3fc  e5 8c          717    719         DB      (MODE SHR 8) AND 0FFH, MODE AND 0FFH
e3fe  46 43 48 4b    718    720         DB      'FCHK'
e402  e6 d3          719    721         DB      (FCHK SHR 8) AND 0FFH, FCHK AND 0FFH
e404  46 4f 52 4d    720    722         DB      'FORM'
e408  e6 cc          721    723         DB      (FORM SHR 8) AND 0FFH, FORM AND 0FFH
e40a  4e 46 4f 52    722    724         DB      'NFOR'
e40e  e6 cd          723    725         DB      (NFOR SHR 8) AND 0FFH, NFOR AND 0FFH
e410  53 57 43 48    724    726         DB      'SWCH'
e414  e0 d1          725    727         DB      (EORNS SHR 8) AND 0FFH, EORNS AND 0FFH
e416  53 49 4d 55    726    728         DB      'SIMU'
e41a  f7 5c          727    729         DB      (SIMU SHR 8) AND 0FFH, SIMU AND 0FFH
e41c  00             728    730         DB      0
e41d  44 55 4d 50    729    731         DB      'DUMP'
e421  e5 24          730    732         DB      (DUMP SHR 8) AND 0FFH, DUMP AND 0FFH
e423  45 58 45 43    731    733         DB      'EXEC'
e427  e2 77          732    734         DB      (EXEC SHR 8) AND 0FFH, EXEC AND 0FFH
e429  45 4e 54 52    733    735         DB      'ENTR'
e42d  e2 0d          734    736         DB      (ENTR SHR 8) AND 0FFH, ENTR AND 0FFH
e42f  46 49 4c 45    735    737         DB      'FILE'
e433  e5 b0          736    738         DB      (FILE SHR 8) AND 0FFH, FILE AND 0FFH
e435  41 53 53 4d    737    739         DB      'ASSM'
e439  ea af          738    740         DB      (ASSM SHR 8) AND 0FFH, ASSM AND 0FFH
e43b  41 53 53 49    739    741         DB      'ASSI'
e43f  ea af          740    742         DB      (ASSM SHR 8) AND 0FFH, ASSM AND 0FFH
e441  49 4f 44 52    741    743         DB      'IODR'
e445  e0 de          742    744         DB      (IODR SHR 8) AND 0FFH, IODR AND 0FFH
e447  53 54 41 42    743    745         DB      'STAB'
e44b  ea a3          744    746         DB      (STAB SHR 8) AND 0FFH, STAB AND 0FFH
e44d  53 59 4d 4c    745    747         DB      'SYML'
e451  e4 7e          746    748         DB      (SYML SHR 8) AND 0FFH, SYML AND 0FFH
e453  43 55 53 54    747    749         DB      'CUST'
e457  e4 f5          748    750         DB      (CUST SHR 8) AND 0FFH, CUST AND 0FFH
e459  52 4e 55 4d    749    751         DB      'RNUM'
e45d  e7 69          750    752         DB      (RNUM SHR 8) AND 0FFH, RNUM AND 0FFH
e45f  46 4d 4f 56    751    753         DB      'FMOV'
e463  e7 31          752    754         DB      (FMOV SHR 8) AND 0FFH, FMOV AND 0FFH
e465  45 44 49 54    753    755         DB      'EDIT'
e469  fa 0b          754    756         DB      (TXT2 SHR 8) AND 0FFH, TXT2 AND 0FFH
e46b  41 55 54 4f    755    757         DB      'AUTO'
e46f  f9 6a          756    758         DB      (AUTO SHR 8) AND 0FFH, AUTO AND 0FFH
e471  46 49 4e 44    757    759         DB      'FIND'
e475  ff 3b          758    760         DB      (FIND2 SHR 8) AND 0FFH, FIND2 AND 0FFH
e477  54 45 52 4d    759    761         DB      'TERM'
e47b  f3 e4          760    762         DB      (TERM SHR 8) AND 0FFH, TERM AND 0FFH
e47d  00             761    763         DB      0
                     762    764 ;
                     763    765 ;SYSTEM SYMBOL TABLE ROUTINES
                     764    766 ;
e47e  21 e8 d1       765    767 SYML:   LXI     H,IBUF+4        ;POINT TO FIFTH CHAR
e481  7e             766    768         MOV     A,M             ;GET IT
e482  fe 45          767    769         CPI     'E'             ;SYMLE - ENTER INTO TABLE ?
e484  ca ab e4       768    770         JZ      LE4AB           ;YES - MAKE AN ENTRY
e487  fe 44          769    771         CPI     'D'             ;SYMLD - DELETE FROM TABLE ?
e489  ca b4 e4       770    772         JZ      LE4B4           ;YES - DELETE IT THEN
                     771    773 ;
                     772    774 ;PRINT CONTENTS OF SYSTEM SYMBOL TABLE
                     773    775 ;
e48c  21 00 d3       774    776         LXI     H,SYSYM         ;POINT TO SYSTEM SYMBOL TABLE
e48f  3e 04          775    777 LE48F:  MVI     A,4             ;PRINT 4 ACROSS
e491  32 f3 d0       776    778         STA     CCNT            ;SAVE AS COUNT
e494  cd 16 e2       777    779         CALL    CRLF            ;START ON NEW LINE
e497  7e             778    780 LE497:  MOV     A,M             ;GET 1ST CHAR
e498  b7             779    781         ORA     A               ;END OF TABLE ?
e499  ca ee e4       780    782         JZ      LE4EE           ;THEN PRINT END ADDRESS
e49c  cd a8 ee       781    783         CALL    LEEA8           ;PRINT 1 SYMBOL & VALUE
e49f  13             782    784         INX     D               ;POINT TO NEXT SYMBOL
e4a0  21 f3 d0       783    785         LXI     H,CCNT          ;POINT AT COUNT
e4a3  35             784    786         DCR     M               ;DCR NO LEFT THIS LINE
e4a4  eb             785    787         XCHG                    ;TABLE POINTER TO H,L
e4a5  c2 97 e4       786    788         JNZ     LE497           ;PRINT MORE THIS LINE
e4a8  c3 8f e4       787    789         JMP     LE48F           ;OR START NEW LINE
                     788    790 ;
                     789    791 ;ENTER NEW SYMBOL INTO TABLE
                     790    792 ;
e4ab  cd 1c e5       791    793 LE4AB:  CALL    VCHK            ;CHECK FOR VALID VALUE & NAME
e4ae  cd ce e4       792    794 LE4AE:  CALL    LE4CE           ;VALIDATE NAME & MOVE TO ABUF
e4b1  c3 e2 ec       793    795         JMP     LECE2           ;PUT SYMBOL INTO TABLE
                     794    796 ;
                     795    797 ;DELETE SYMBOL
                     796    798 ;
e4b4  cd ae e4       797    799 LE4B4:  CALL    LE4AE           ;H,L POINTS TO VALUE ON RET
e4b7  23             798    800 LE4B7:  INX     H               ;POINT TO 2ND CHAR OF VALUE
e4b8  23             799    801         INX     H               ;POINT TO NEXT SYMBOL
e4b9  eb             800    802         XCHG                    ;D,E POINT AT SYM. AFTR DELETED
e4ba  21 f9 ff       801    803         LXI     H,-(NMLEN+2)    ;SYMBOL TABLE ENTRY LENGTH
e4bd  19             802    804         DAD     D               ;H,L POINTS AT BEG. OF ENTRY
e4be  1a             803    805         LDAX    D               ;GET CHAR FROM TABLE ENTRY
e4bf  b7             804    806 LE4BF:  ORA     A               ;SET FLAGS
e4c0  06 07          805    807         MVI     B,(NMLEN+2)     ;ENTRY LENGTH
e4c2  77             806    808 LE4C2:  MOV     M,A             ;MOVE CHAR UP IN TABLE
e4c3  c8             807    809         RZ                      ;IF END OF TABLE MOVED
e4c4  23             808    810         INX     H               ;INR DEST. POINTER
e4c5  13             809    811         INX     D               ;INR SOURCE POINTER
e4c6  1a             810    812         LDAX    D               ;GET NEXT CHAR FROM SYMBOL
e4c7  05             811    813         DCR     B               ;COUNT OF CHRS THIS SYMBOL
e4c8  c2 c2 e4       812    814         JNZ     LE4C2           ;IF NOT DONE THIS SYMBOL
e4cb  c3 bf e4       813    815         JMP     LE4BF           ;TO MOVE NEXT SYMBOL UP
                     814    816 ;
                     815    817 ;ROUTINE TO VALIDATE A SYMBOL NAME & MOVE IT TO ABUF
                     816    818 ;
e4ce  cd 6a e2       817    819 LE4CE:  CALL    ZBUF            ;BLANK OUT ABUF
e4d1  eb             818    820         XCHG                    ;H,L POINT TO START OF ABUF
e4d2  22 d4 d0       819    821         SHLD    ADDS            ;SAVE ADDRESS
e4d5  11 d7 d0       820    822         LXI     D,FBUF          ;POINT AT FILE-NAME BUFFER
e4d8  eb             821    823         XCHG                    ;H,L=FBUF & D,E=ABUF
e4d9  af             822    824         XRA     A               ;GET A ZERO
e4da  32 dc d0       823    825         STA     FREAD           ;SAVE AS 1ST FREE ADDRESS
e4dd  7e             824    826         MOV     A,M             ;GET 1ST CHAR OF NAME
e4de  b7             825    827         ORA     A               ;ZERO ?
e4df  ca dd e7       826    828         JZ      WHAT            ;ERROR IF NO NAME GIVEN
e4e2  cd 54 f1       827    829         CALL    LF154           ;MOVE THE NAME IF IT'S VALID
e4e5  fe 21          828    830         CPI     21H             ;MAKE SURE SPACE FOLLOWS NAME
e4e7  d2 dd e7       829    831         JNC     WHAT            ;ERROR IF SPACE DOESN'T FOLLOW
e4ea  2a ef d0       830    832         LHLD    BBUF            ;GET VALUE
e4ed  c9             831    833         RET                     ;RETURN W/VALUE IN H,L
                     832    834 ;
                     833    835 ;DO A CR/LF AND PRINT ASCII CONTENTS OF ADDR POINTED TO BY H,L
                     834    836 ;
e4ee  eb             835    837 LE4EE:  XCHG                    ;POINTER FROM D,E TO H,L
e4ef  cd 16 e2       836    838         CALL    CRLF            ;START ON NEW LINE
e4f2  c3 5c e5       837    839         JMP     ADOUT           ;PRINT ADDR POINTED TO BY H,L
                     838    840 ;
                     839    841 ;CUSTOM COMMAND TABLE MANAGEMENT
                     840    842 ;
e4f5  21 e8 d1       841    843 CUST:   LXI     H,IBUF+4        ;POINT AT 5TH CHAR
e4f8  7e             842    844         MOV     A,M             ;GET IT
e4f9  fe 45          843    845         CPI     'E'             ;ENTER NEW CUST. COMMAND ?
e4fb  ca 09 e5       844    846         JZ      LE509           ;YES - DO IT
e4fe  fe 44          845    847         CPI     'D'             ;DELETE CUSTOM COMMAND ?
e500  ca 04 e0       846    848         JZ      LE004           ;YES - DO IT
e503  21 5c d2       847    849         LXI     H,CUCOM         ;POINT AT CUSTOM COMMAND TABLE
e506  c3 8f e4       848    850         JMP     LE48F           ;PRINT USING SYML ROUTINES
                     849    851 ;
                     850    852 ;ENTER AND DELETE MOSTLY USE SYMLE & SYMLD CODE
                     851    853 ;
e509  cd 1c e5       852    854 LE509:  CALL    VCHK            ;MAKE SURE VALUE GIVEN
e50c  cd ce e4       853    855 LE50C:  CALL    LE4CE           ;VALIDATE NAME & MOVE TO ABUF
e50f  11 5c d2       854    856         LXI     D,CUCOM         ;D,E POINT AT CUST. TABLE
e512  c3 e5 ec       855    857         JMP     LECE5           ;PUT VALUE INTO TABLE
                     856    858 ;
                     857    859 ;ROUTINE TO EXTRACT VALUES FROM COMMAND LINE & REPORT AN ERROR
                     858    860 ;
e515  cd 81 e2       859    861 VALC:   CALL    ETRA            ;ETRA DOES THE REAL WORK
e518  da dd e7       860    862         JC      WHAT            ;IF AN ERROR OCCURED
e51b  c9             861    863         RET                     ;DONE, NO ERROR
                     862    864 ;
                     863    865 ;ROUTINE TO VERIFY THAT REQUIRED PARAMETERS WERE ENTERED
                     864    866 ;
e51c  3a df d0       865    867 VCHK:   LDA     ABUF            ;GET 1ST CHAR OF ABUF
e51f  b7             866    868         ORA     A               ;ZERO ?
e520  ca dd e7       867    869         JZ      WHAT            ;ERROR - REQD. PARM. OMITTED
e523  c9             868    870         RET                     ;DONE
                     869    871 ;
                     870    872 ;THE DUMP COMMAND
                     871    873 ;
e524  cd 1c e5       872    874 DUMP:   CALL    VCHK            ;MAKE SURE ADDRESS GIVEN
e527  3e 10          873    875         MVI     A,16            ;16 VALUES PER LINE
e529  32 f3 d0       874    876         STA     CCNT            ;SAVE AS COUNT
e52c  cd 16 e2       875    877 LE52C:  CALL    CRLF            ;START NEW LINE
e52f  2a ef d0       876    878         LHLD    BBUF            ;GET ADDRESS
e532  eb             877    879         XCHG                    ;DO D,E
e533  cd 5c e5       878    880         CALL    ADOUT           ;PRINT ADDRESS ON LEFT OF LINE
e536  06 3a          879    881         MVI     B,':'           ;FOLLOW ADDRESS WITH COLON
e538  cd cf d0       880    882         CALL    OUT8            ;PRINT IT
e53b  cd 5c e3       881    883         CALL    LE35C           ;PUT OUT A SPACE
e53e  3a f3 d0       882    884         LDA     CCNT            ;GET COUNT OF ADDRS/LINE
e541  32 f4 d0       883    885 LE541:  STA     DCNT            ;SAVE AS DUMP COUNT
e544  2a ef d0       884    886         LHLD    BBUF            ;GET ADDR TO DUMP
e547  7e             885    887         MOV     A,M             ;GET DATA AT THAT ADDR
e548  cd 6f e5       886    888         CALL    DUMO            ;PRINT ITS VALUE
e54b  cd 5c e3       887    889         CALL    LE35C           ;PUT A SPACE OUT
e54e  cd 69 e3       888    890         CALL    ACHK            ;COMPARE BBUF & BBUF+2
e551  d8             889    891         RC                      ;REACHED END ADDRS. - DONE
e552  3a f4 d0       890    892         LDA     DCNT            ;ELSE GET DUMP COUNT
e555  3d             891    893         DCR     A               ;DCR COUNT BYTES LEFT THIS LINE
e556  c2 41 e5       892    894         JNZ     LE541           ;DO MORE BYTES ON THIS LINE
e559  c3 2c e5       893    895         JMP     LE52C           ;DO ANOTHER LINE
                     894    896 ;
                     895    897 ;ROUTINE TO PUT OUT AN ADDRESS
                     896    898 ;
                     897    899 ;NOTE THAT THIS ROUTINE TAKES ADVANTAGE (?) OF THE FACT THAT
                     898    900 ;BINO USES THE CARRY BIT TO OUTPUT A SINGLE BYTE IN A AS
                     899    901 ;XXX WHERE XXX MAY BE 777 (INCLUDING CARRY) AND IS NOT
                     900    902 ;LIMITED TO 377.  ADDRESSES THUS COME OUT AS A SINGLE 16 BIT
                     901    903 ;NUMBER RATHER THAN IN THE MORE COMMON "SPLIT OCTAL" CONSISTING
                     902    904 ;OF TWO SEPERATE 8 BIT QUANTITIES WITH A MAX VALUE OF 377 EACH.
                     903    905 ;
e55c  3a 2f d1       904    906 ADOUT:  LDA     SMODE           ;GET CURRENT MODE
e55f  b7             905    907         ORA     A               ;CLEAR CARRY & SET ZERO FLAG
e560  7a             906    908         MOV     A,D             ;HIGH ORDER BYTE TO A
e561  ca 65 e5       907    909         JZ      LE565           ;SKIP NEXT PART IF BASE HEX
e564  1f             908    910         RAR                     ;LOW ORDER BIT TO CARRY FOR OCT
e565  57             909    911 LE565:  MOV     D,A             ;RESTORE HIGH ORDER BYTE
e566  17             910    912         RAL                     ;SHIFT LEFT 1 BIT THRU ACCUM.
e567  4f             911    913         MOV     C,A             ;LOW BIT/CARRY IN C FOR OCTAL
e568  7a             912    914         MOV     A,D             ;GET HIGH ORDER BYTE
e569  cd 6f e5       913    915         CALL    DUMO            ;OUTPUT USING CURRENT MODE
e56c  79             914    916         MOV     A,C             ;FOR OCTAL, GET ORIG HIGH BYTE
e56d  1f             915    917         RAR                     ;SET CARRY BIT
e56e  7b             916    918         MOV     A,E             ;GET LOW ORDER BYTE
e56f  21 2f d1       917    919 DUMO:   LXI     H,SMODE         ;POINT TO MODE
e572  46             918    920         MOV     B,M             ;GET IT
e573  05             919    921         DCR     B               ;DECR (OCTAL MODE = 1)
e574  ca 53 e3       920    922         JZ      OOUT            ;FOR OCTAL
e577  cd 90 e3       921    923 HOUT:   CALL    BINH            ;CONVERT BIN TO HEX IN ADDS
e57a  21 d4 d0       922    924 LE57A:  LXI     H,ADDS          ;BUFFER WHERE CHARS STORED
e57d  46             923    925         MOV     B,M             ;GET CHAR IN B
e57e  cd cf d0       924    926         CALL    OUT8            ;PRINT A HEX ASCII CHAR
e581  23             925    927         INX     H               ;INX POINTER
e582  46             926    928         MOV     B,M             ;GET NEXT CHAR
e583  c3 cf d0       927    929         JMP     OUT8            ;PRINT IT & GO HOME
e586  cd 77 e5       928    930 HOTB:   CALL    HOUT            ;PUT OUT HEX
e589  c3 5c e3       929    931         JMP     LE35C           ;PUT OUT SPACE & GO HOME
                     930    932 ;
                     931    933 ;MODE - USED TO SET THE OUTPUT MODE
                     932    934 ;
e58c  cd 1c e5       933    935 MODE:   CALL    VCHK            ;VERIFY PARAMETER GIVEN
e58f  01 df d0       934    936         LXI     B,ABUF          ;POINT TO PARAMETER
e592  cd fa e2       935    937         CALL    AHEX            ;CONVERT TO BINARY
e595  da dd e7       936    938         JC      WHAT            ;IF PARAMETER INVALID
e598  7c             937    939         MOV     A,H             ;GET HIGH ORDER BYTE
e599  b7             938    940         ORA     A               ;SET FLAGS
e59a  c2 dd e7       939    941         JNZ     WHAT            ;PARM. MUST BE < 256
e59d  06 00          940    942         MVI     B,0             ;ASSUME HEX SPECIFIED
e59f  7d             941    943         MOV     A,L             ;GET LOW ORDER PARMATER
e5a0  fe 16          942    944         CPI     16H             ;IS PARAMETER 16 ?
e5a2  ca ab e5       943    945         JZ      LE5AB           ;YES - STORE 0 AS MODE
e5a5  04             944    946         INR     B               ;MAKE B = MODE = 1
e5a6  fe 08          945    947         CPI     8               ;IS PARAMETER 8 ?
e5a8  c2 dd e7       946    948         JNZ     WHAT            ;MUST BE EITHER 8 OR 16
e5ab  78             947    949 LE5AB:  MOV     A,B             ;GET MODE (REG B)
e5ac  32 2f d1       948    950         STA     SMODE           ;MAKE IT THE MODE
e5af  c9             949    951         RET                     ;WE ARE DONE
                     950    952 ;
                     951    953 ;PROCESS THE FILE COMMANDS
                     952    954 ;
e5b0  3a d7 d0       953    955 FILE:   LDA     FBUF            ;GET 1ST CHAR OF FILE NAME
e5b3  b7             954    956         ORA     A               ;SET FLAGS
e5b4  ca 18 e6       955    957         JZ      FOUT            ;NO NAME GIVEN - DO A LISTING
e5b7  cd 8a e6       956    958         CALL    FSEA            ;LOOK UP FILE
e5ba  eb             957    959         XCHG                    ;D,E HAS ADDR OF DIR. ENTRY
e5bb  c2 d2 e5       958    960         JNZ     TEST            ;IF DIR. ENTRY FOUND
                     959    961 ;
                     960    962 ;ENTRY MATCHING FBUF NOT FOUND
                     961    963 ;
e5be  3a df d0       962    964         LDA     ABUF            ;CHECK FOR PARAMETER GIVEN
e5c1  b7             963    965         ORA     A               ;SET FLAGS
e5c2  ca dd e7       964    966         JZ      WHAT            ;ADDR. REQUIRED FOR NEW FILE
                     965    967 ;
                     966    968 ;CHECK FOR ROOM TO ADD A NEW FILE
                     967    969 ;
e5c5  3a de d0       968    970         LDA     FEF             ;GET FREE ENTRY FOUND FLAG
e5c8  b7             969    971         ORA     A               ;SET FLAGS
e5c9  c2 e7 e5       970    972         JNZ     ROOM1           ;TO ADD THE NEW FILE
e5cc  21 f7 e7       971    973 LE5CC:  LXI     H,EMES1         ;POINT TO ERROR MESSAGE
e5cf  c3 e0 e7       972    974         JMP     MESS            ;PRINT IT
                     973    975 ;
                     974    976 ;ENTRY MATCHING FBUF FOUND
                     975    977 ;
e5d2  3a df d0       976    978 TEST:   LDA     ABUF            ;SEE IF PARAMETER GIVEN
e5d5  b7             977    979         ORA     A               ;SET FLAGS
e5d6  ca ea e5       978    980         JZ      SWAPS           ;NO PARMS - MAKE IT CUR FILE
e5d9  2a ef d0       979    981         LHLD    BBUF            ;GET BINARY VALU OF PARM
e5dc  7c             980    982         MOV     A,H             ;HIGH ORDER BYTE
e5dd  b5             981    983         ORA     L               ;SEE IF PARM IS ZERO
e5de  ca ea e5       982    984         JZ      SWAPS           ;TO DELETE THE FILE
e5e1  21 fc e7       983    985 LE5E1:  LXI     H,EMES2         ;CAN'T RESPECIFY EXISTING FILE
e5e4  c3 e0 e7       984    986         JMP     MESS            ;TELL IT TO THE OPERATOR
                     985    987 ;
                     986    988 ;CREATE NEW FILE - NAME IS IN FBUF
                     987    989 ;FREAD POINTS TO A FREE DIRECTORY ENTRY
                     988    990 ;
e5e7  cd 76 e6       989    991 ROOM1:  CALL    ROOM            ;MOVE NAME IN FBUF TO DIRECTORY
                     990    992 ;
                     991    993 ;MAKE FILE POINTED TO BY D,E CURRENT
                     992    994 ;
e5ea  21 00 d0       993    995 SWAPS:  LXI     H,FILE0         ;POINT H,L TO CUR FILE
e5ed  0e 0d          994    996         MVI     C,FELEN         ;BYTE COUNT
e5ef  1a             995    997 SWAP:   LDAX    D               ;GET A BYTE FROM NEW CUR FILE
e5f0  46             996    998         MOV     B,M             ;GET BYTE FROM CUR CUR FILE
e5f1  77             997    999         MOV     M,A             ;NEW CUR FILE BYTE TO FILE 0
e5f2  78             998   1000         MOV     A,B             ;EXCHANGE
e5f3  12             999   1001         STAX    D               ;CUR CUR FILE BYTE TO FREAD
e5f4  13            1000   1002         INX     D               ;INR NON-CURRENT FILE POINTER
e5f5  23            1001   1003         INX     H               ;INR FILE 0 POINTER
e5f6  0d            1002   1004         DCR     C               ;COUNT OF BYTES TO MOVE
e5f7  c2 ef e5      1003   1005         JNZ     SWAP            ;IF NOT DONE SWAPPING ENTRIES
                    1004   1006 ;
                    1005   1007 ;CHECK FOR 2ND PARAMETER (ADDRESS)
                    1006   1008 ;
e5fa  3a df d0      1007   1009         LDA     ABUF            ;GET 2ND PARAMETER 1ST CHAR
e5fd  b7            1008   1010         ORA     A               ;SET FLAGS
e5fe  ca 18 e6      1009   1011         JZ      FOUT            ;NONE GIVEN
                    1010   1012 ;
                    1011   1013 ;PROCESS 2ND PARAMETER
                    1012   1014 ;
e601  2a ef d0      1013   1015         LHLD    BBUF            ;GET 2ND PARAMETER ADDRESS
e604  22 05 d0      1014   1016         SHLD    BOFP            ;MAKE IT BEG OF FILE POINTER
e607  22 07 d0      1015   1017         SHLD    EOFP            ;AND END OF FILE POINTER
e60a  7d            1016   1018         MOV     A,L             ;TEST FOR ADDR = 0
e60b  b4            1017   1019         ORA     H               ;
e60c  ca 11 e6      1018   1020         JZ      FIL35           ;YES - DELETE IT
e60f  36 01         1019   1021         MVI     M,1             ;NO - PUT EOF MARK AT BOFP
e611  af            1020   1022 FIL35:  XRA     A               ;BINARY ZERO
e612  32 09 d0      1021   1023         STA     MAXL            ;AT MAX. LINE NO.
e615  c3 25 e6      1022   1024         JMP     FOOT            ;OUTPUT PARAMETERS
                    1023   1025 ;
                    1024   1026 ;LIST 1 OR MORE FILES & THEIR PARAMETERS
                    1025   1027 ;
e618  cd 16 e2      1026   1028 FOUT:   CALL    CRLF            ;DO A CR/LF
e61b  3a e8 d1      1027   1029         LDA     IBUF+4          ;GET OPT. 5TH CHAR
e61e  fe 53         1028   1030         CPI     'S'             ;WAS COMMAND FILES ?
e620  0e 06         1029   1031         MVI     C,MAXFIL        ;MAX NO OF FILES
e622  ca 27 e6      1030   1032         JZ      FOUL            ;YES - LIST ALL FILES
e625  0e 01         1031   1033 FOOT:   MVI     C,1             ;ELSE LIST ONLY 1 FILE
                    1032   1034 ;
                    1033   1035 ;LIST PARMS. FOR NO OF FILES IN REG C.
                    1034   1036 ;
e627  21 00 d0      1035   1037 FOUL:   LXI     H,FILE0         ;POINT TO DIRECTORY
e62a  79            1036   1038 LE62A:  MOV     A,C             ;GET NO FILES LEFT TO LIST
e62b  32 de d0      1037   1039 FINE:   STA     FOCNT           ;SAVE AS FILE OUTPUT COUNT
e62e  e5            1038   1040         PUSH    H               ;SAVE DIRECTORY POINTER
e62f  11 05 00      1039   1041         LXI     D,NMLEN         ;NAME LENGTH
e632  19            1040   1042         DAD     D               ;POINT AT FILES BOFP
e633  7e            1041   1043         MOV     A,M             ;GET 1ST BYTE OF BOFP
e634  b7            1042   1044         ORA     A               ;ZERO ?
e635  c2 45 e6      1043   1045         JNZ     FOOD            ;NO - LIST IT
e638  23            1044   1046         INX     H               ;POINT AT 2ND BYTE OF BOFP
e639  86            1045   1047         ADD     M               ;ADD TO 1ST BYTE
e63a  23            1046   1048         INX     H               ;POINT TO EOFP 1ST BYTE
e63b  c2 45 e6      1047   1049         JNZ     FOOD            ;BOFP NON ZERO - LIST IT
e63e  33            1048   1050         INX     SP              ;TO "UN-PUSH" H,L
e63f  33            1049   1051         INX     SP              ;
e640  23            1050   1052         INX     H               ;POINT TO 2ND BYTE OF EOFP
e641  23            1051   1053         INX     H               ;POINT TO MAXL
e642  c3 5a e6      1052   1054         JMP     FEET            ;TO GO TO NEXT ENTRY
                    1053   1055 ;
                    1054   1056 ;HAVE A VALID ENTRY TO OUTPUT
                    1055   1057 ;
e645  e1            1056   1058 FOOD:   POP     H               ;GET POINTER TO FILES NAME
e646  cd 16 e2      1057   1059         CALL    CRLF            ;START IT ON A FRESH LINE
e649  0e 05         1058   1060         MVI     C,NMLEN         ;LENGTH
e64b  46            1059   1061 FAST:   MOV     B,M             ;GET A CHAR OF NAME
e64c  cd cf d0      1060   1062         CALL    OUT8            ;PRINT IT
e64f  0d            1061   1063         DCR     C               ;DECREMENT COUNT
e650  23            1062   1064         INX     H               ;POINT TO NEXT CHAR
e651  c2 4b e6      1063   1065         JNZ     FAST            ;PRINT REMAINING CHARS IF ANY
e654  cd 66 e6      1064   1066         CALL    LE666           ;PRINT SPACE, BOFP, SPACE
e657  cd 66 e6      1065   1067         CALL    LE666           ;PRINT SPACE, EOFP, SPACE
e65a  11 04 00      1066   1068 FEET:   LXI     D,FELEN-NMLEN-4 ;LENGTH OF MAXL
e65d  19            1067   1069         DAD     D               ;POINT AT NEXT FILE ENTRY
e65e  3a de d0      1068   1070         LDA     FOCNT           ;PRINTING 1 OR ALL ?
e661  3d            1069   1071         DCR     A               ;DECR. COUNT
e662  c2 2b e6      1070   1072         JNZ     FINE            ;TO PRINT MORE
e665  c9            1071   1073         RET                     ;DONE
                    1072   1074 ;
                    1073   1075 ;ROUTINE TO PRINT AN ADDRESS
                    1074   1076 ;
e666  cd 5c e3      1075   1077 LE666:  CALL    LE35C           ;PRINT SPACE
e669  5e            1076   1078         MOV     E,M             ;GET BYTE OF BOFP OR EOFP
e66a  23            1077   1079         INX     H               ;POINT TO 2ND BYTE
e66b  56            1078   1080         MOV     D,M             ;GET IT
e66c  e5            1079   1081         PUSH    H               ;SAVE POINTER INTO FILE DIR.
e66d  cd 5c e5      1080   1082         CALL    ADOUT           ;PRINT ADDRESS
e670  cd 5c e3      1081   1083         CALL    LE35C           ;AND TRAILING SPACE
e673  e1            1082   1084         POP     H               ;RESTORE POINTER
e674  23            1083   1085         INX     H               ;POINT TO MAXL
e675  c9            1084   1086         RET                     ;DONE
                    1085   1087 ;
                    1086   1088 ;MOVE FILE NAME TO BLOCK POINTED TO BY FREAD
                    1087   1089 ;
e676  2a dc d0      1088   1090 ROOM:   LHLD    FREAD           ;GET ADDR OF FREE ENTRY
e679  eb            1089   1091         XCHG                    ;TO D,E
e67a  21 d7 d0      1090   1092         LXI     H,FBUF          ;ADDR OF NAME IN COMMAND
e67d  d5            1091   1093         PUSH    D               ;SAVE DIRECTORY ADDR
e67e  0e 05         1092   1094         MVI     C,NMLEN         ;NO CHARS TO MOVE
e680  7e            1093   1095 MOV23:  MOV     A,M             ;GET CHAR FROM COMMAND
e681  12            1094   1096         STAX    D               ;PUT INTO DIRECTORY
e682  13            1095   1097         INX     D               ;INCR. DIR. POINTER
e683  0d            1096   1098         DCR     C               ;DCR CHAR COUNT
e684  23            1097   1099         INX     H               ;INCR. FBUF POINTER
e685  c2 80 e6      1098   1100         JNZ     MOV23           ;MOVE REMAINING CHARS
e688  d1            1099   1101         POP     D               ;RESTORE DIR. POINTER
e689  c9            1100   1102         RET                     ;DONE
                    1101   1103 ;
                    1102   1104 ;FILE DIRECTORY SEARCH ROUTINE
                    1103   1105 ;LOOK FOR ENTRY W/NAME IN FBUF - ZERO SET ==> NOT FOUND
                    1104   1106 ;ELSE H,L POINT TO THE ENTRY
                    1105   1107 ;ALSO, IF ENTRY FOUND W/BOFP ADDR = 0, SET FEF FLAG > 0
                    1106   1108 ;AND FREAD TO THE ADDR OF THAT ENTRY
                    1107   1109 ;
e68a  11 00 d0      1108   1110 FSEA:   LXI     D,FILE0         ;POINT TO DIRECTORY
e68d  af            1109   1111 LE68D:  XRA     A               ;GET ZERO
e68e  32 de d0      1110   1112         STA     FEF             ;ASSUME NO FREE ENTRIES
e691  06 06         1111   1113         MVI     B,MAXFIL        ;NO OF ENTRIES IN DIR.
e693  21 d7 d0      1112   1114 FSE10:  LXI     H,FBUF          ;ADDR OF NAME TO LOOK UP
e696  0e 05         1113   1115         MVI     C,NMLEN         ;NO CHARS PER NAME
e698  cd 57 e2      1114   1116         CALL    SEAR            ;COMPARE CURRENT ENTRY TO FBUF
e69b  f5            1115   1117         PUSH    PSW             ;SAVE RESULTS FLAG
e69c  d5            1116   1118         PUSH    D               ;SAVE DIR POINTER
e69d  1a            1117   1119         LDAX    D               ;GET BYTE OF BOFP ADDR
e69e  b7            1118   1120         ORA     A               ;EMPTY ?
e69f  c2 c0 e6      1119   1121         JNZ     FSE20           ;NO
e6a2  13            1120   1122         INX     D               ;2ND BYTE
e6a3  1a            1121   1123         LDAX    D               ;GET IT
e6a4  b7            1122   1124         ORA     A               ;SET FLAGS
e6a5  c2 c0 e6      1123   1125         JNZ     FSE20           ;NOT ZERO
e6a8  eb            1124   1126         XCHG                    ;DIR POINTER TO H,L
e6a9  11 fa ff      1125   1127         LXI     D,-NMLEN-1      ;
e6ac  19            1126   1128         DAD     D               ;POINT BACK TO EMPTY ENTRY
e6ad  22 dc d0      1127   1129         SHLD    FREAD           ;AND SAVE IT'S ADDRESS
e6b0  7a            1128   1130         MOV     A,D             ;D HAPPENS TO BE NON-ZERO
e6b1  32 de d0      1129   1131         STA     FEF             ;AND SO NOW IS FEF
e6b4  e1            1130   1132         POP     H               ;RESTORE DIR POINTER TO H,L
e6b5  f1            1131   1133         POP     PSW             ;RESTORE SEAR RESULTS FLAG
                    1132   1134 ;
                    1133   1135 ;MOVE TO NEXT ENTRY
                    1134   1136 ;
e6b6  11 08 00      1135   1137 FSE15:  LXI     D,FELEN-NMLEN
e6b9  19            1136   1138         DAD     D               ;H,L POINTS TO NEXT ENTRY
e6ba  eb            1137   1139         XCHG                    ;ENTRY ADDR TO D,E
e6bb  05            1138   1140         DCR     B               ;COUNT OF FILES IN DIR
e6bc  c8            1139   1141         RZ                      ;NO FILES LEFT TO SEARCH
e6bd  c3 93 e6      1140   1142         JMP     FSE10           ;SEARCH REMAINING FILES
                    1141   1143 ;
                    1142   1144 ;ENTRY WASN'T FREE, LOOK AT SEAR RESULTS
                    1143   1145 ;
e6c0  e1            1144   1146 FSE20:  POP     H               ;RESTORE DIRECTORY POINTER
e6c1  f1            1145   1147         POP     PSW             ;SEAR RESULTS IN FLAG
e6c2  c2 b6 e6      1146   1148         JNZ     FSE15           ;IT DIDN'T MATCH ANYWAY
                    1147   1149 ;
                    1148   1150 ;MATCHING ENTRY FOUND WHICH WASN'T FREE
                    1149   1151 ;
e6c5  11 fb ff      1150   1152         LXI     D,-NMLEN
e6c8  19            1151   1153         DAD     D               ;H,L POINT AT THE DIR. ENTRY
e6c9  7a            1152   1154         MOV     A,D             ;D IS NON-ZERO
e6ca  b7            1153   1155         ORA     A               ;SET FLAGS TO CLEAR ZERO FLAG
e6cb  c9            1154   1156         RET                     ;DONE
                    1155   1157 ;
                    1156   1158 ;FORM COMMAND TO SET OUTPUT MODE
                    1157   1159 ;
e6cc  2f            1158   1160 FORM:   CMA                     ;ALL COMNDS ARE EXEC WITH A=0
e6cd  32 fa d0      1159   1161 NFOR:   STA     LFMT            ;
e6d0  c3 60 e0      1160   1162         JMP     EORMS           ;IT'S THAT SIMPLE, FOLKS
                    1161   1163 ;
                    1162   1164 ;FCHK
                    1163   1165 ;
e6d3  2a 05 d0      1164   1166 FCHK:   LHLD    BOFP            ;GET BEG. OF FILE PTR
e6d6  7c            1165   1167         MOV     A,H             ;SEE IF BOFP IS ZERO
e6d7  b5            1166   1168         ORA     L               ;WOULD IMPLY NO FILES
e6d8  ca e1 e5      1167   1169         JZ      LE5E1           ;PRINT ERROR MESSAGE
e6db  01 04 00      1168   1170         LXI     B,4             ;LENGTH OF LINE NO.
e6de  09            1169   1171         DAD     B               ;H,L POINTS JUST PAST LINE NO
e6df  0c            1170   1172         INR     C               ;C = 5 = LINE LEN TO THIS PT.
e6e0  23            1171   1173 LE6E0:  INX     H               ;POINT TO NEXT CHAR
e6e1  0c            1172   1174         INR     C               ;LINE LENGTH TO THIS POINT
e6e2  cd 2b e7      1173   1175         CALL    LE72B           ;GET TERM WIDTH IN A
e6e5  b9            1174   1176         CMP     C               ;LINE > TERMINAL WIDTH ?
e6e6  da 18 e7      1175   1177         JC      LE718           ;YES - ERROR
e6e9  7e            1176   1178         MOV     A,M             ;GET LINE CHAR
e6ea  fe 0d         1177   1179         CPI     0DH             ;END OF LINE ?
e6ec  c2 e0 e6      1178   1180         JNZ     LE6E0           ;KEEP TESTING THIS LINE
e6ef  2a 05 d0      1179   1181         LHLD    BOFP            ;GET BEG. OF FILE PTR
e6f2  71            1180   1182         MOV     M,C             ;MAKE LENGTH BYTE OK 1ST LINE
e6f3  7e            1181   1183 LE6F3:  MOV     A,M             ;GET LENGTH BYTE
e6f4  fe 01         1182   1184         CPI     1               ;END OF FILE ?
e6f6  ca 25 e7      1183   1185         JZ      LE725           ;TO RESET MAXL
e6f9  fe 06         1184   1186         CPI     6               ;MIN LINE LEN (NO. + LEN + CR)
e6fb  da 18 e7      1185   1187         JC      LE718           ;REPORT ERROR IF LINE TOO SHORT
e6fe  cd 2b e7      1186   1188         CALL    LE72B           ;GET TERMINAL WIDTH IN A
e701  be            1187   1189         CMP     M               ;COMPARE WITH LENGTH BYTE
e702  4e            1188   1190         MOV     C,M             ;LENGTH BYTE TO C
e703  0d            1189   1191         DCR     C               ;GOING TO COUNT CHARS IN LINE
e704  0d            1190   1192 LE704:  DCR     C               ;COUNT OF ACUTAL CHARS LEFT
e705  23            1191   1193         INX     H               ;POINT TO NEXT CHAR
e706  7e            1192   1194         MOV     A,M             ;GET IT
e707  ca 12 e7      1193   1195         JZ      LE712           ;COUNT TO 0 - MUST BE C/R
e70a  fe 20         1194   1196         CPI     20H             ;IS CHAR CNTL CHAR ?
e70c  da 18 e7      1195   1197         JC      LE718           ;CNTL CHARS NOT ALLOWED
e70f  c3 04 e7      1196   1198         JMP     LE704           ;TEST NEXT CHAR IN LINE
e712  fe 0d         1197   1199 LE712:  CPI     0DH             ;IS CHAR C/R ?
e714  23            1198   1200         INX     H               ;POINT TO NEXT CHAR
e715  ca f3 e6      1199   1201         JZ      LE6F3           ;YES - GO ON, CHECK FOR EOF
                    1200   1202 ;
                    1201   1203 ;ERROR
                    1202   1204 ;
e718  eb            1203   1205 LE718:  XCHG                    ;BAD ADDRESS TO D,E
e719  cd 5c e3      1204   1206         CALL    LE35C           ;PRINT A SPACE
e71c  cd 5c e5      1205   1207         CALL    ADOUT           ;FOLLOWED BY THE BAD ADDRESS
e71f  21 01 e8      1206   1208         LXI     H,FERR          ;POINT TO FILE ERROR MESSAGE
e722  c3 e0 e7      1207   1209         JMP     MESS            ;PRINT THE ERROR MESSAGE
e725  cd 50 ea      1208   1210 LE725:  CALL    LEA50           ;UPDATE MAXL
e728  c3 18 e6      1209   1211         JMP     FOUT            ;PRINT FILE PARMS & RETURN
e72b  3a 8f d1      1210   1212 LE72B:  LDA     TERMW           ;GET TERM WIDTH
e72e  c6 1b         1211   1213         ADI     -(IBUF+1) AND 0FFH
e730  c9            1212   1214         RET                     ;BINARY TERM WIDTH IN A
                    1213   1215 ;
                    1214   1216 ;FILE MOVE COMMANDS
                    1215   1217 ;
e731  cd 1c e5      1216   1218 FMOV:   CALL    VCHK            ;CHECK FOR REQD PARMS
e734  2a 05 d0      1217   1219         LHLD    BOFP            ;GET BEG OF FILE PTR
e737  eb            1218   1220         XCHG                    ;BOFP TO D,E
e738  2a ef d0      1219   1221         LHLD    BBUF            ;GET DEST ADDR
e73b  22 05 d0      1220   1222         SHLD    BOFP            ;NEW BEG OF FILE
e73e  7d            1221   1223         MOV     A,L             ;LOW ORDER DEST TO A
e73f  93            1222   1224         SUB     E               ;SUBRACTING CUR BOF FROM NEW
e740  7c            1223   1225         MOV     A,H             ;TO SEE WHICH WAY TO MOVE
e741  9a            1224   1226         SBB     D               ;ANSWER NOW IN CARRY FLAG
e742  da 60 e7      1225   1227         JC      LE760           ;IF MOVING TO LOWER ADDR
                    1226   1228 ;
                    1227   1229 ;MOVING TO HIGHER ADDR
                    1228   1230 ;
e745  2a 07 d0      1229   1231         LHLD    EOFP            ;MOVING TO HIGHER ADDR
e748  7d            1230   1232         MOV     A,L             ;GOING TO SUBTRACT CUR (OLD)
e749  93            1231   1233         SUB     E               ;BOFP FROM CUR EOFP & PUT
e74a  4f            1232   1234         MOV     C,A             ;RESULT (FILE LENGTH) IN
e74b  7c            1233   1235         MOV     A,H             ;REG B,C
e74c  9a            1234   1236         SBB     D               ;
e74d  47            1235   1237         MOV     B,A             ;
e74e  2a 05 d0      1236   1238         LHLD    BOFP            ;GET DEST BEG OF FILE
e751  09            1237   1239         DAD     B               ;ADD LENGTH = NEW END
e752  eb            1238   1240         XCHG                    ;NEW END IN D,E
e753  36 02         1239   1241         MVI     M,2             ;PUT 02H AT CUR BEG OF FILE
e755  4e            1240   1242         MOV     C,M             ;AND IN REG C
e756  2a 07 d0      1241   1243         LHLD    EOFP            ;GET CUR END OF FILE TO H,L
e759  eb            1242   1244         XCHG                    ;CUR EOF=D,E & NEW END H,L
e75a  cd 79 e9      1243   1245         CALL    RMOV            ;DO THE MOVE
e75d  c3 65 e7      1244   1246         JMP     LE765           ;PUT 02H AT BOF AND FCHK
                    1245   1247 ;
                    1246   1248 ;MOVING LOWER IN MEMORY
                    1247   1249 ;
e760  0e 01         1248   1250 LE760:  MVI     C,1             ;LMOV WILL USE 01H AS END MARK
e762  cd 70 e9      1249   1251         CALL    LMOV            ;DO THE MOVE
e765  71            1250   1252 LE765:  MOV     M,C             ;PUT TERMINATOR MARK IN FILE
e766  c3 d3 e6      1251   1253         JMP     FCHK            ;FCHK TO UPDATE 1ST L.B. & EOF
                    1252   1254 ;
                    1253   1255 ;RENUMBER COMMAND
                    1254   1256 ;
e769  cd 1c e5      1255   1257 RNUM:   CALL    VCHK            ;CHECK FOR REQD. PARAMETERS
e76c  3a e6 d0      1256   1258         LDA     ABUF+7          ;SEE IF INCREMENT SPECIFIED
e76f  06 05         1257   1259         MVI     B,5             ;DEFAULT INCREMENT
e771  b7            1258   1260         ORA     A               ;SET FLAGS
e772  ca 85 e7      1259   1261         JZ      LE785           ;NO INCREMENT GIVEN, USE 5
e775  01 e6 d0      1260   1262         LXI     B,ABUF+7        ;POINT AT GIVEN INCREMENT
e778  cd 0a e0      1261   1263         CALL    ADEC            ;CONVERT TO DECIMAL
e77b  da dd e7      1262   1264         JC      WHAT            ;IF ERROR
e77e  7d            1263   1265         MOV     A,L             ;GET INCREMENT
e77f  fe 1a         1264   1266         CPI     26              ;MAXIMUM INCREMENT + 1
e781  d2 dd e7      1265   1267         JNC     WHAT            ;IF INCREMENT > 25
e784  47            1266   1268         MOV     B,A             ;INCREMENT IN B
e785  2a 05 d0      1267   1269 LE785:  LHLD    BOFP            ;GET BOF POINTER
e788  22 d2 d0      1268   1270         SHLD    APNT            ;SAVE
e78b  7e            1269   1271 LE78B:  MOV     A,M             ;GET LENGTH BYTE
e78c  fe 01         1270   1272         CPI     1               ;END OF FILE ?
e78e  ca d3 e6      1271   1273         JZ      FCHK            ;YES, DONE, DO FCHK
e791  23            1272   1274         INX     H               ;POINT 1ST DIGIT
e792  11 df d0      1273   1275         LXI     D,ABUF          ;STARTING LINE NO. SOURCE
e795  0e 04         1274   1276         MVI     C,4             ;LENGTH OF LINE NO.
e797  1a            1275   1277 LE797:  LDAX    D               ;GET A DIGIT
e798  77            1276   1278         MOV     M,A             ;PUT IT IN THE LINE
e799  23            1277   1279         INX     H               ;POINT TO NEXT DIGIT
e79a  13            1278   1280         INX     D               ;IN SOURCE, TOO
e79b  0d            1279   1281         DCR     C               ;COUNT OF DIGITS LEFT
e79c  c2 97 e7      1280   1282         JNZ     LE797           ;DO NEXT DIGITS
e79f  2a d2 d0      1281   1283         LHLD    APNT            ;GET POINTER TO LINE
e7a2  7e            1282   1284         MOV     A,M             ;GET LENGTH BYTE
e7a3  cd 6b e9      1283   1285         CALL    ADR             ;POINT TO NEXT LINE
e7a6  22 d2 d0      1284   1286         SHLD    APNT            ;UPDATE LINE POINTER
e7a9  2b            1285   1287         DCX     H               ;POINT TO LAST CHR OF PREV LINE
e7aa  7e            1286   1288         MOV     A,M             ;GET IT
e7ab  fe 0d         1287   1289         CPI     0DH             ;IS IT A CARRIAGE RET ?
e7ad  c2 18 e7      1288   1290         JNZ     LE718           ;DOING A LITTLE FCHKING HERE
e7b0  21 e2 d0      1289   1291         LXI     H,ABUF+3        ;POINT TO LSB OF LINE NO.
e7b3  7e            1290   1292         MOV     A,M             ;GET IT
e7b4  80            1291   1293         ADD     B               ;ADD INCREMENT
e7b5  fe 3a         1292   1294 LE7B5:  CPI     '9'+1           ;CARRY ?
e7b7  d2 cc e7      1293   1295         JNC     LE7CC           ;NO - CONTINUE
e7ba  77            1294   1296         MOV     M,A             ;PUT UPDATED DIGIT BACK
e7bb  3a df d0      1295   1297         LDA     ABUF            ;GET MSB
e7be  fe 39         1296   1298         CPI     '9'             ;EQUAL 9 ?
e7c0  d4 c9 e7      1297   1299         CNC     LE7C9           ;IF SO, CHANGE INCREMENT TO 1
e7c3  2a d2 d0      1298   1300         LHLD    APNT            ;GET POINTER TO NEXT LINE
e7c6  c3 8b e7      1299   1301         JMP     LE78B           ;AND DO IT
                    1300   1302 ;
                    1301   1303 ;CHANGE INCREMENT TO 1 IF NOS. GET TO 9000
                    1302   1304 ;
e7c9  06 01         1303   1305 LE7C9:  MVI     B,1             ;NEW INCREMENT
e7cb  c9            1304   1306         RET
                    1305   1307 ;
                    1306   1308 ;GET HERE IF ADDITION GAVE CARRY
                    1307   1309 ;
e7cc  0e 00         1308   1310 LE7CC:  MVI     C,0             ;C WILL BECOME DECIMAL CARRY
e7ce  0c            1309   1311 LE7CE:  INR     C               ;INR FOR EA SUBTR. OF 10
e7cf  d6 0a         1310   1312         SUI     10              ;SUB 10 FROM ADDITION RESULT
e7d1  fe 3a         1311   1313         CPI     '9'+1           ;RESULT STILL > 9 ?
e7d3  d2 ce e7      1312   1314         JNC     LE7CE           ;SUB AGAIN & KEEP CNT OF SUBTR
e7d6  77            1313   1315         MOV     M,A             ;LESS THAN 10 - PUT DIGIT BACK
e7d7  2b            1314   1316         DCX     H               ;POINT TO NEXT MSB
e7d8  7e            1315   1317         MOV     A,M             ;GET IT
e7d9  81            1316   1318         ADD     C               ;ADD CARRY FROM PREV. DIGIT
e7da  c3 b5 e7      1317   1319         JMP     LE7B5           ;AND REPEAT THE PROCESS
                    1318   1320 ;
                    1319   1321 ;GENERAL ERROR MESSAGE ROUTINES
                    1320   1322 ;
e7dd  21 f1 e7      1321   1323 WHAT:   LXI     H,EMES
e7e0  cd 16 e2      1322   1324 MESS:   CALL    CRLF            ;DO CR/LF
e7e3  e5            1323   1325         PUSH    H               ;SAVE H,L
e7e4  21 94 d0      1324   1326         LXI     H,SYSIN         ;RESTORE STD I/O DRIVERS
e7e7  cd 5a e1      1325   1327         CALL    LE15A           ;DO IT
e7ea  e1            1326   1328         POP     H               ;RESTORE H,L
e7eb  cd 80 e3      1327   1329         CALL    SCRN            ;PRINT THE MSG POINTED TO BY H,L
e7ee  c3 cb e0      1328   1330         JMP     LE0CB           ;GO BACK TO ALS-8 COMND MODE
                    1329   1331 ;
                    1330   1332 ;MESSAGES
                    1331   1333 ;
e7f1  57 48 41 54   1332   1334 EMES:   DB      'WHAT?', 0DH
e7f5  3f 0d         1332   1335
e7f7  46 55 4c 4c   1333   1336 EMES1:  DB      'FULL', 0DH
e7fb  0d            1333   1337
e7fc  46 43 4f 4e   1334   1338 EMES2:  DB      'FCON', 0DH
e800  0d            1334   1339
e801  20 46 49 4c   1335   1340 FERR:   DB      ' FILE ERR', 0DH
e805  45 20 45 52   1335   1341
e809  52 0d         1335   1342
                    1336   1343 ;
                    1337   1344 ;THIS IS THE PROCESSING PORTION OF THE ENTER COMMAND
                    1338   1345 ;
e80b  cd 16 e2      1339   1346 ENTS:   CALL    CRLF            ;START ON A NEW LINE
e80e  cd 72 e1      1340   1347         CALL    READ            ;GET A LINE OF INPUT
e811  21 e4 d1      1341   1348         LXI     H,IBUF          ;POINT TO IT'S START
e814  22 01 d1      1342   1349         SHLD    PNTR            ;SAVE POINTER
e817  cd 6a e2      1343   1350 ENT1:   CALL    ZBUF            ;CLEAR ASCII BUFFER
e81a  cd cc ee      1344   1351         CALL    SBLK            ;SCAN TO CHARACTERS IN IBUF
e81d  da 0b e8      1345   1352         JC      ENTS            ;C/R FOUND, GET ANOTHER LINE
e820  fe 2f         1346   1353         CPI     '/'             ;ENTER TERMINATION CHAR ?
e822  c8            1347   1354         RZ                      ;YES - DONE THEN
e823  cd 3e f1      1348   1355         CALL    ALPS            ;LOAD ABUF FROM IBUF
e826  eb            1349   1356         XCHG                    ;
e827  01 df d0      1350   1357         LXI     B,ABUF          ;POINT TO THE LOADED BUFR
e82a  3a 2f d1      1351   1358         LDA     SMODE           ;GET THE CURRENT MODE
e82d  b7            1352   1359         ORA     A               ;SET FLAGS
e82e  c2 37 e8      1353   1360         JNZ     LE837           ;JUMP IF OCTAL
e831  cd fa e2      1354   1361         CALL    AHEX            ;CONVERT ASCII HEX TO BINARY
e834  c3 3a e8      1355   1362         JMP     LE83A           ;TO CONTINUE
e837  cd 33 e3      1356   1363 LE837:  CALL    AOCT            ;CONVERT OCTAL TO BINARY
e83a  d8            1357   1364 LE83A:  RC                      ;RETURN IF ERROR
e83b  1a            1358   1365         LDAX    D               ;GET CHAR FROM INPUT LINE
e83c  fe 3a         1359   1366         CPI     ':'             ;NEW ADDRESS OR DATA ?
e83e  ca 4c e8      1360   1367         JZ      LE84C           ;NEW ADDRESS
e841  7d            1361   1368         MOV     A,L             ;DATA TO A
e842  2a ef d0      1362   1369         LHLD    BBUF            ;GET ENTER POINTER
e845  77            1363   1370         MOV     M,A             ;PUT DATA IN MEMORY
e846  cd 7b e3      1364   1371         CALL    ACH1            ;INCREMENT ENTER POINTER
e849  c3 17 e8      1365   1372         JMP     ENT1            ;DO NEXT BYTE
e84c  22 ef d0      1366   1373 LE84C:  SHLD    BBUF            ;SAVE AS NEW ENTER ADDR
e84f  eb            1367   1374         XCHG                    ;IBUF POINTER TO H,L
e850  23            1368   1375         INX     H               ;INCREMENT IT
e851  22 01 d1      1369   1376         SHLD    PNTR            ;SAVE IT
e854  c3 17 e8      1370   1377         JMP     ENT1            ;DO MORE BYTES
                    1371   1378 ;
                    1372   1379 ;HERE ARE THE ROUTINES THAT ADD OR REPLACE LINES IN FILES
                    1373   1380 ;BASED ON THEIR LINE NUMBERS.  DELETE IS HANDLED BY A
                    1374   1381 ;SEPARATE ROUTINE
                    1375   1382 ;
e857  fe 30         1376   1383 LINE:   CPI     '0'             ;MAKE SURE 1ST CHAR IS NUMERIC
e859  da dd e7      1377   1384         JC      WHAT            ;IF IT'S NOT
e85c  21 30 30      1378   1385         LXI     H,3030H         ;TWO ASCII ZEROES
e85f  22 e0 d1      1379   1386         SHLD    IBUF-4          ;PUT TWO BEFORE THE LINE
e862  22 e2 d1      1380   1387         SHLD    IBUF-2          ;TWO MORE MAKES FOUR
e865  21 e3 d1      1381   1388         LXI     H,IBUF-1        ;POINT TO SPACE BEFORE LINE
e868  0e 04         1382   1389         MVI     C,4             ;MAX NO DIGITS IN LINE NO
e86a  23            1383   1390 LE86A:  INX     H               ;POINT TO 1ST CHAR
e86b  7e            1384   1391         MOV     A,M             ;GET IT
e86c  fe 30         1385   1392         CPI     '0'             ;NUMERIC ?
e86e  da 7c e8      1386   1393         JC      LE87C           ;NO
e871  fe 3a         1387   1394         CPI     '9'+1           ;NUMERIC ?
e873  d2 7c e8      1388   1395         JNC     LE87C           ;NO
e876  0d            1389   1396         DCR     C               ;YES, NUMERIC
e877  c2 6a e8      1390   1397         JNZ     LE86A           ;COUNT NUMERIC CHRS IN LINE NO.
                    1391   1398 ;
                    1392   1399 ;IF WE GET HERE THE LINE HAD A FULL 4-DIGIT NO. TO BEGIN WITH
                    1393   1400 ;NOW MAKE SURE LINE NO. IS FOLLOWED BY AT LEAST ONE SPACE
                    1394   1401 ;PUT ONE IN IF IT'S NOT
                    1395   1402 ;
e87a  23            1396   1403         INX     H               ;POINT AFTER THE LINE NO
e87b  7e            1397   1404         MOV     A,M             ;GET CHAR
e87c  fe 20         1398   1405 LE87C:  CPI     ' '             ;IS CHAR AFTER LINE NO. SPACE ?
e87e  41            1399   1406         MOV     B,C             ;COUNT OF LEADING 0'S TO ADD
e87f  2b            1400   1407         DCX     H               ;POINT TO LAST DIGIT OF LINE NO
e880  ca 93 e8      1401   1408         JZ      LE893           ;IF LINE NO FOLLOWED BY SPACE
e883  0c            1402   1409         INR     C               ;INR COUNT OF TOTAL CHRS TO ADD
e884  41            1403   1410         MOV     B,C             ;SAVE IN B
e885  0e 04         1404   1411         MVI     C,4             ;NEED TO MOVE 4 DIGIT LINE NO.
e887  3e 20         1405   1412         MVI     A,' '           ;TO INSERT A SPACE
e889  56            1406   1413 LE889:  MOV     D,M             ;GET CHAR
e88a  77            1407   1414         MOV     M,A             ;PUT CHAR IN A INTO LINE
e88b  7a            1408   1415         MOV     A,D             ;CHAR REMOVED FROM LINE TO A
e88c  2b            1409   1416         DCX     H               ;DECREMENT LINE POINTER
e88d  0d            1410   1417         DCR     C               ;AND COUNT OF CHRS LEFT TO MOVE
e88e  c2 89 e8      1411   1418         JNZ     LE889           ;IF NOT DONE
e891  77            1412   1419         MOV     M,A             ;REPLACE LAST CHARACTER
e892  48            1413   1420         MOV     C,B             ;COUNT OF 0'S TO INSERT
e893  21 e4 d1      1414   1421 LE893:  LXI     H,IBUF          ;POINT TO IBUFFER
e896  2b            1415   1422 LE896:  DCX     H               ;DECREMENT LINE POINTER
e897  0d            1416   1423         DCR     C               ;DCR COUNT OF 0'S TO INSERT
e898  f2 96 e8      1417   1424         JP      LE896           ;LOOP TILL IT GOES NEGATIVE
e89b  22 c9 d1      1418   1425         SHLD    SAVL            ;H,L IS NEW START OF LINE
e89e  3a f3 d0      1419   1426         LDA     CCNT            ;GET OLD LINE LENGTH COUNT
e8a1  80            1420   1427         ADD     B               ;ADD COUNT OF CHARACTERS ADDED
e8a2  32 f3 d0      1421   1428         STA     CCNT            ;UPDATED COUNT
e8a5  fe 07         1422   1429         CPI     7               ;7 ==> ORIG LINE WAS BLANK
e8a7  ca 2b e9      1423   1430         JZ      LE92B           ;TO DELETE THE LINE
e8aa  77            1424   1431         MOV     M,A             ;PUT LEN BYTE AT HEAD OF LINE
e8ab  11 04 00      1425   1432         LXI     D,4             ;LENGTH OF LINE NO.
e8ae  19            1426   1433         DAD     D               ;H,L POINTS LAST CHR OF LINE NO
e8af  22 d4 d0      1427   1434         SHLD    ADDS            ;SAVE ADDR.
e8b2  11 0c d0      1428   1435         LXI     D,MAXL+3        ;END OF HIGHEST LIN # IN FILE
e8b5  cd 92 e9      1429   1436         CALL    COM0            ;COMPARE LINE NO. TO MAXL
e8b8  d2 d8 e8      1430   1437         JNC     INSRT           ;LINE GOES INTO MIDDLE OF FILE
                    1431   1438 ;
                    1432   1439 ;LINE GOES AT END OF FILE
                    1433   1440 ;
e8bb  23            1434   1441         INX     H               ;POINT TO LINE NO.
e8bc  cd 82 e9      1435   1442         CALL    LODM            ;GET IT IN BCDE
e8bf  21 0c d0      1436   1443         LXI     H,MAXL+3        ;POINT TO END OF MAXL
e8c2  cd 8a e9      1437   1444         CALL    STOM            ;THIS LINE BECOMES NEW MAXL
e8c5  2a c9 d1      1438   1445         LHLD    SAVL            ;GET ADDR OF LINE
e8c8  eb            1439   1446         XCHG                    ;D,E IS LINE POINTER
e8c9  2a 07 d0      1440   1447         LHLD    EOFP            ;H,L IS CURRENT END OF FILE
e8cc  0e 01         1441   1448         MVI     C,1             ;1 IS THE MOVE TERMINATOR CHAR
e8ce  cd 70 e9      1442   1449         CALL    LMOV            ;MOVE LINE TO END OF FILE
e8d1  71            1443   1450         MOV     M,C             ;PUT EOF MARK IN FILE
e8d2  22 07 d0      1444   1451         SHLD    EOFP            ;UPDATE END OF FILE
e8d5  c3 d1 e0      1445   1452         JMP     EORNS           ;DONE
                    1446   1453 ;
                    1447   1454 ;GET HERE TO INSERT A LINE INTO FILE
                    1448   1455 ;
e8d8  cd 47 e9      1449   1456 INSRT:  CALL    LE947           ;FIND LINE NO IN FILE
e8db  0e 02         1450   1457         MVI     C,2             ;FLAG INITIALIZATION
e8dd  ca e1 e8      1451   1458         JZ      EQUL            ;LINE IN FILE HAS SAME NO.
e8e0  0d            1452   1459         DCR     C               ;C=1 ==> NO. NOT NOW IN FILE
e8e1  46            1453   1460 EQUL:   MOV     B,M             ;GET LENGTH OF LINE IN FILE
e8e2  2b            1454   1461         DCX     H               ;ADDR TO INSERT LINE AFTER
e8e3  36 02         1455   1462         MVI     M,2             ;PUT MARKER THERE
e8e5  22 d2 d0      1456   1463         SHLD    APNT            ;AND SAVE AS POINTER
e8e8  3a f3 d0      1457   1464         LDA     CCNT            ;LENGTH OF LINE TO ADD
e8eb  0d            1458   1465         DCR     C               ;THE FLAG - 2 = REPLACEMENT
e8ec  ca f6 e8      1459   1466         JZ      LT              ;IF NEW LINE # NOT = OLD LINE #
e8ef  90            1460   1467         SUB     B               ;COMPUTE DIFF IN LINE LENGTHS
e8f0  ca 19 e9      1461   1468         JZ      ZERO            ;IF LINES ARE SAME LENGTH
e8f3  da 09 e9      1462   1469         JC      GT              ;IF NEW LINE > OLD LINE
                    1463   1470 ;
                    1464   1471 ;GET HERE IF OLD LINE > NEW LINE OR DOING
                    1465   1472 ;ADDITION RATHER THAN REPLACEMENT
                    1466   1473 ;
e8f6  2a 07 d0      1467   1474 LT:     LHLD    EOFP            ;GET OLD END OF FILE
e8f9  54            1468   1475         MOV     D,H             ;DUPLICATE IN D,E
e8fa  5d            1469   1476         MOV     E,L             ;
e8fb  cd 6b e9      1470   1477         CALL    ADR             ;ADD DIFF. TO OLD EOFP
e8fe  22 07 d0      1471   1478         SHLD    EOFP            ;OLD + ADDED = NEW
e901  0e 02         1472   1479         MVI     C,2             ;MOVE TERMINATION MARK IN FILE
e903  cd 79 e9      1473   1480         CALL    RMOV            ;DO THE MOVE
e906  c3 19 e9      1474   1481         JMP     ZERO            ;INSERT LINE INTO GAP CREATED
                    1475   1482 ;
                    1476   1483 ;GET HERE IF OLD LINE < NEW LINE
                    1477   1484 ;
e909  2f            1478   1485 GT:     CMA                     ;MAKE DIFFERENCE NEGATIVE
e90a  3c            1479   1486         INR     A               ;TWO'S COMPLEMENT
e90b  54            1480   1487         MOV     D,H             ;DUPLICATE H,L IN D,E
e90c  5d            1481   1488         MOV     E,L             ;
e90d  cd 6b e9      1482   1489         CALL    ADR             ;SUB. DIFF FROM OLD EOFP
e910  eb            1483   1490         XCHG                    ;
e911  cd 70 e9      1484   1491         CALL    LMOV            ;DELETE EXCESS CHAR IN FILE
e914  36 01         1485   1492         MVI     M,1             ;E-O-F INDICATOR
e916  22 07 d0      1486   1493         SHLD    EOFP            ;E-O-F ADDRESS
                    1487   1494 ;
                    1488   1495 ;GET HERE TO INSERT CURRENT LINE INTO FILE AREA
                    1489   1496 ;
e919  2a c9 d1      1490   1497 ZERO:   LHLD    SAVL            ;LINE ADDRESS
e91c  eb            1491   1498         XCHG                    ;TO D,E
e91d  2a d2 d0      1492   1499         LHLD    APNT            ;INSERT ADDRESS
e920  36 0d         1493   1500         MVI     M,0DH           ;REPLACE MOVE TERM. MARK W/CR
e922  23            1494   1501         INX     H               ;POINT TO WHERE NEW LINE GOES
e923  0e 01         1495   1502         MVI     C,1             ;MOVE TERMINATION MARK
e925  cd 70 e9      1496   1503         CALL    LMOV            ;PUT LINE INTO FILE
e928  c3 d1 e0      1497   1504         JMP     EORNS           ;DONE
                    1498   1505 ;
                    1499   1506 ;DELETE LINE IF LINE NO. ENTERED WITH NO TEXT
                    1500   1507 ;
e92b  23            1501   1508 LE92B:  INX     H               ;POINT TO LINE NO TO DELETE
e92c  cd 82 e9      1502   1509         CALL    LODM            ;GET IT IN B,C,D,E
e92f  21 e2 d0      1503   1510         LXI     H,ABUF+3        ;DESTINATION ADDRESS
e932  cd 8a e9      1504   1511         CALL    STOM            ;STORE DELETE ADDRESS
e935  21 e9 d0      1505   1512         LXI     H,ABUF+10       ;ADDRESS OF END OF 2ND PARM
e938  cd 8a e9      1506   1513         CALL    STOM            ;STORE LINE NO. AGAIN
e93b  cd 2f ea      1507   1514         CALL    LEA2F           ;MAKE LIKE A DELT N,N COMMAND
e93e  c3 d1 e0      1508   1515         JMP     EORNS           ;LINE DELETED, DONE
                    1509   1516 ;
                    1510   1517 ;FIND - SEARCH FILE FOR SPECIFIED LINE
                    1511   1518 ;
e941  21 e2 d0      1512   1519 FIND:   LXI     H,ABUF+3        ;ADDRS. OF TEMP BUFFER
e944  22 d4 d0      1513   1520 FIND1:  SHLD    ADDS            ;ADDR OF NO. TO LOOK UP
e947  2a 05 d0      1514   1521 LE947:  LHLD    BOFP            ;START OF FILE TO SEARCH
e94a  cd 64 e9      1515   1522 FI1:    CALL    E01             ;SEE IF AT END OF FILE
e94d  eb            1516   1523         XCHG                    ;FILE ADR TO D,E
e94e  2a d4 d0      1517   1524         LHLD    ADDS            ;GET ADDR OF NO TO LOOK UP
e951  eb            1518   1525         XCHG                    ;SET UP
e952  3e 04         1519   1526         MVI     A,4             ;LENGTH OF LINE NO.
e954  cd 6b e9      1520   1527         CALL    ADR             ;POINT TO END OF LINE NO.
e957  cd 92 e9      1521   1528         CALL    COM0            ;SEE IF LINE NOS. ARE SAME
e95a  d8            1522   1529         RC                      ;NO IN FILE > SUBJECT
e95b  c8            1523   1530         RZ                      ;NOS. ARE THE SAME
e95c  7e            1524   1531 FI2:    MOV     A,M             ;GET LENGTH BYTE
e95d  cd 6b e9      1525   1532         CALL    ADR             ;POINT TO NEXT LINE
e960  c3 4a e9      1526   1533         JMP     FI1             ;TEST NEXT LINE
                    1527   1534 ;
                    1528   1535 ;ROUTINE TO CHECK FOR END OF FILE
                    1529   1536 ;
e963  23            1530   1537 EOF:    INX     H               ;
e964  3e 01         1531   1538 E01:    MVI     A,1             ;EOF INDICATOR
e966  be            1532   1539         CMP     M               ;SAME AS CHAR POINTED TO ?
e967  c0            1533   1540         RNZ                     ;NO - RETURN
e968  c3 d1 e0      1534   1541         JMP     EORNS           ;YES - ABORT COMMAND
                    1535   1542 ;
                    1536   1543 ;ROUTINE TO ADD ONE BYTE NO IN A TO ADDR IN H,L
                    1537   1544 ;
e96b  85            1538   1545 ADR:    ADD     L               ;ADD A TO L
e96c  6f            1539   1546         MOV     L,A             ;RESULT REPLACES L
e96d  d0            1540   1547         RNC                     ;DONE IF NO CARRY
e96e  24            1541   1548         INR     H               ;ELSE INCREMENT H
e96f  c9            1542   1549         RET                     ;DONE NOW
                    1543   1550 ;
                    1544   1551 ;CHARACTER MOVEMENT ROUTINE TO MOVE FROM D,E TO H,L
                    1545   1552 ;INCREMENTING D,E (START AT LOW ADDRESS END OF BLOCK TO MOVE)
                    1546   1553 ;MOVE ENDS WHEN CHAR IN REG C IS ENCOUNTERED.
                    1547   1554 ;
e970  1a            1548   1555 LMOV:   LDAX    D               ;GET SOURCE CHAR
e971  13            1549   1556         INX     D               ;INR SOURCE POINTER
e972  b9            1550   1557         CMP     C               ;TERMINATION CHAR ?
e973  c8            1551   1558         RZ                      ;YES - DONE THEN
e974  77            1552   1559         MOV     M,A             ;NO - MOVE TO DEST.
e975  23            1553   1560         INX     H               ;INR DESTINATION POINTER
e976  c3 70 e9      1554   1561         JMP     LMOV            ;DO NEXT CHAR
                    1555   1562 ;
                    1556   1563 ;CHARACTER MOVEMENT ROUTINE TO MOVE FROM D,E TO H,L
                    1557   1564 ;DECREMENTING POINTERS (START AT HIGH END OF BLOCK)
                    1558   1565 ;MOVE ENDS WHEN CHAR IN REG C IS ENCOUNTERED
                    1559   1566 ;
e979  1a            1560   1567 RMOV:   LDAX    D               ;GET SOURCE CHAR
e97a  1b            1561   1568         DCX     D               ;DECR SOURCE POINTER
e97b  b9            1562   1569         CMP     C               ;TERMINATION CHAR ?
e97c  c8            1563   1570         RZ                      ;YES - DONE
e97d  77            1564   1571         MOV     M,A             ;NO - STORE CHAR AT DEST.
e97e  2b            1565   1572         DCX     H               ;DECREMENT DEST. POINTER
e97f  c3 79 e9      1566   1573         JMP     RMOV            ;DO NEXT CHARACTER
                    1567   1574 ;
                    1568   1575 ;LOAD FOUR CHARS FROM MEMORY INTO REGS B,C,D,E
                    1569   1576 ;
e982  46            1570   1577 LODM:   MOV     B,M
e983  23            1571   1578         INX     H
e984  4e            1572   1579         MOV     C,M
e985  23            1573   1580         INX     H
e986  56            1574   1581         MOV     D,M
e987  23            1575   1582         INX     H
e988  5e            1576   1583         MOV     E,M
e989  c9            1577   1584         RET
                    1578   1585 ;
                    1579   1586 ;STORE FOUR CHARS FROM REGS B,C,D,E INTO MEMORY
                    1580   1587 ;
e98a  73            1581   1588 STOM:   MOV     M,E
e98b  2b            1582   1589         DCX     H
e98c  72            1583   1590         MOV     M,D
e98d  2b            1584   1591         DCX     H
e98e  71            1585   1592         MOV     M,C
e98f  2b            1586   1593         DCX     H
e990  70            1587   1594         MOV     M,B
e991  c9            1588   1595         RET
                    1589   1596 ;
                    1590   1597 ;ROUTINE TO COMPARE TWO CHAR STRINGS OF LENGTH 4.
                    1591   1598 ;ZERO FLAG SET ==> STRINGS EQUAL. CARRY ==> STRING
                    1592   1599 ;ADDRESSED BY D,E GREATER THAN OR = STRING ADDR BY
                    1593   1600 ;H,L
                    1594   1601 ;
e992  0e 04         1595   1602 COM0:   MVI     C,4             ;LENGTH OF COMPARISON
e994  06 01         1596   1603 COM1:   MVI     B,1             ;ASSUME EQUAL
e996  b7            1597   1604         ORA     A               ;CLEAR CARRY
e997  1a            1598   1605 C01:    LDAX    D               ;FETCH CHARACTER
e998  9e            1599   1606         SBB     M               ;SET FLAGS & COMPARE
e999  ca 9d e9      1600   1607         JZ      C02             ;THESE BYTES ARE THE SAME
e99c  04            1601   1608         INR     B               ;MAKE EQUAL FLAG = 2
e99d  1b            1602   1609 C02:    DCX     D               ;DECREMENT 1 STR. POINTER
e99e  2b            1603   1610         DCX     H               ;DECR. OTHER POINTER
e99f  0d            1604   1611         DCR     C               ;DECR. CNT OF BYTES TO COMPARE
e9a0  c2 97 e9      1605   1612         JNZ     C01             ;DO NEXT BYTE
e9a3  05            1606   1613         DCR     B               ;DECREMENT ZERO FLAG
e9a4  c9            1607   1614         RET                     ;DONE W/ZERO SET
                    1608   1615 ;
                    1609   1616 ;ROUTINE TO TAKE ASCII CHARS AND ADD LEADING ASCII
                    1610   1617 ;ZEROS TO YIELD A 4 CHARACTER ASCII VALUE
                    1611   1618 ;
e9a5  cd 82 e9      1612   1619 NORM:   CALL    LODM            ;GET 4 DIGITS
e9a8  af            1613   1620         XRA     A               ;GET A BINARY ZERO
e9a9  b8            1614   1621         CMP     B               ;ARE ALL DIGITS ZERO ?
e9aa  c8            1615   1622         RZ                      ;YES - NOTHING TO NORMALIZE
e9ab  bb            1616   1623 NOR1:   CMP     E               ;NORMALIZED ?
e9ac  c4 8a e9      1617   1624         CNZ     STOM            ;YES, PUT DIGITS BACK
e9af  c0            1618   1625         RNZ                     ;AND RETURN
e9b0  5a            1619   1626         MOV     E,D             ;ELSE MOVE DIGITS UP
e9b1  51            1620   1627         MOV     D,C
e9b2  48            1621   1628         MOV     C,B
e9b3  06 30         1622   1629         MVI     B,'0'           ;AND ADD A ZERO
e9b5  c3 ab e9      1623   1630         JMP     NOR1            ;THEN TEST FOR NORMALIZATION
                    1624   1631 ;
                    1625   1632 ;ROUTINE TO MOVE A LINE FROM THE FILE BUFFER INTO 
                    1626   1633 ;THE ASSEMBLERS LINE BUFFER
                    1627   1634 ;
e9b8  2a d2 d0      1628   1635 MOVEL:  LHLD    APNT            ;GET ASSEMBLER POINTER
e9bb  7e            1629   1636         MOV     A,M             ;GET 1ST CHAR OF LINE
e9bc  fe 01         1630   1637         CPI     1               ;END OF FILE ?
e9be  c8            1631   1638         RZ                      ;YES, RETURN
e9bf  eb            1632   1639         XCHG                    ;LINE ADDR TO D,E
e9c0  6f            1633   1640         MOV     L,A             ;GET LENGTH AS 16 BITS IN H,L
e9c1  26 00         1634   1641         MVI     H,0             ;LENGTH < 128
e9c3  19            1635   1642         DAD     D               ;ADD LENGTH TO START ADDR
e9c4  2b            1636   1643         DCX     H               ;POINT TO LAST CHAR OF LINE
e9c5  7e            1637   1644         MOV     A,M             ;GET IT
e9c6  fe 0d         1638   1645         CPI     0DH             ;C/R ?
e9c8  c2 18 e7      1639   1646         JNZ     LE718           ;REPORT FCHK ERROR
e9cb  13            1640   1647         INX     D               ;POINT TO 1ST ACTUAL CHAR
e9cc  21 df d1      1641   1648         LXI     H,IBUF-5        ;ASSEMBLERS BUFFER
e9cf  0e 0d         1642   1649         MVI     C,0DH           ;TERMINATION CHAR
e9d1  cd 70 e9      1643   1650         CALL    LMOV            ;MOVE THE LINE
e9d4  71            1644   1651         MOV     M,C             ;PUT C/R AT END OF LINE
e9d5  eb            1645   1652         XCHG                    ;1ST CHAR OF NEXT LINE TO H,L
e9d6  22 d2 d0      1646   1653         SHLD    APNT            ;SAVE UPDATED ASSEM. POINTER
e9d9  b7            1647   1654         ORA     A               ;CLEAR FLAGS
e9da  c9            1648   1655         RET                     ;DONE
                    1649   1656 ;
                    1650   1657 ;LIST AND TEXT (LIST W/O LINE NUMBERS) COMMANDS
                    1651   1658 ;
e9db  2f            1652   1659 LIST:   CMA                     ;MAKE A NON-ZERO
e9dc  32 fb d0      1653   1660 TEXT:   STA     NOLIN           ;SAVE AS FORMAT FLAG
e9df  cd 16 e2      1654   1661         CALL    CRLF            ;START ON FRESH LINE
e9e2  21 df d0      1655   1662         LXI     H,ABUF          ;GET STARTING LINE NO.
e9e5  cd 82 e9      1656   1663         CALL    LODM            ;
e9e8  af            1657   1664         XRA     A               ;ZERO FLAGS & ACCUM.
e9e9  b8            1658   1665         CMP     B               ;LINE NO. GIVEN ?
e9ea  c2 ef e9      1659   1666         JNZ     LE9EF           ;JUMP IF LINE NO. GIVEN
e9ed  06 ff         1660   1667         MVI     B,0FFH          ;MAKE LINE NO. > 9999
e9ef  21 e9 d0      1661   1668 LE9EF:  LXI     H,ABUF+10
e9f2  be            1662   1669         CMP     M               ;ENDING LINE NO. GIVEN ?
e9f3  c2 f9 e9      1663   1670         JNZ     LE9F9           ;IF ENDING NO. GIVEN
e9f6  cd 8a e9      1664   1671         CALL    STOM            ;STORE ENDING LINE NO > 9999
e9f9  cd 41 e9      1665   1672 LE9F9:  CALL    FIND            ;FIND STARTING LINE NO.
e9fc  22 d2 d0      1666   1673         SHLD    APNT            ;SAVE AS POINTER
e9ff  cd b8 e9      1667   1674 LE9FF:  CALL    MOVEL           ;MOVE LINE TO OUTPUT BUFFER
ea02  ca b7 e0      1668   1675         JZ      EOR             ;IF END OF FILE FOUND
ea05  21 e2 d1      1669   1676         LXI     H,IBUF-2        ;POINT TO LAST DIGIT OF LINE NO
ea08  11 e9 d0      1670   1677         LXI     D,ABUF+10       ;D POINTS TO ENDING LINE NO.
ea0b  cd 92 e9      1671   1678         CALL    COM0            ;COMPARE LINE NO. & END LIN NO.
ea0e  d8            1672   1679         RC                      ;RETURN IF > ENDING LINE NO
ea0f  3a fa d0      1673   1680         LDA     LFMT            ;GET FORMAT FLAG
ea12  b7            1674   1681         ORA     A               ;SET FLAGS
ea13  c4 61 f3      1675   1682         CNZ     LF361           ;TO FORMAT LINE
ea16  21 df d1      1676   1683         LXI     H,IBUF-5        ;POINT TO START OF LINE
ea19  3a fb d0      1677   1684         LDA     NOLIN           ;GET LINE NO. FLAG
ea1c  b7            1678   1685         ORA     A               ;SET FLAGS
ea1d  c2 23 ea      1679   1686         JNZ     LEA23           ;PRINT WITH LINE NO.
ea20  21 e4 d1      1680   1687         LXI     H,IBUF          ;POINT PAST LIN NO.
ea23  cd 80 e3      1681   1688 LEA23:  CALL    SCRN            ;PRINT LINE FROM H,L POINTER
ea26  cd 16 e2      1682   1689         CALL    CRLF            ;PUT CR/LF AFTER LINE
ea29  c3 ff e9      1683   1690         JMP     LE9FF           ;TO DO NEXT LINE
                    1684   1691 ;
                    1685   1692 ;DELT - THE DELETE LINE COMMAND
                    1686   1693 ;
ea2c  cd 1c e5      1687   1694 DELT:   CALL    VCHK            ;CHECK FOR REQD PARAMETERS
ea2f  cd 41 e9      1688   1695 LEA2F:  CALL    FIND            ;GET STARTING DELT ADDR
ea32  22 d2 d0      1689   1696         SHLD    DELP            ;SAVE IT
ea35  21 e9 d0      1690   1697         LXI     H,ABUF+10       ;SEE IF 2ND PARM GIVEN
ea38  7e            1691   1698         MOV     A,M             ;GET CHAR
ea39  b7            1692   1699         ORA     A               ;SET FLAGS
ea3a  c2 40 ea      1693   1700         JNZ     LEA40           ;IF 2ND PARM GIVEN
ea3d  21 e2 d0      1694   1701         LXI     H,ABUF+3        ;FIRST & LAST LINE ARE SAME
ea40  22 d4 d0      1695   1702 LEA40:  SHLD    ADDS            ;SAVE 1ST LINE FIND ADDR
ea43  eb            1696   1703         XCHG
ea44  21 0c d0      1697   1704         LXI     H,MAXL+3        ;HIGHEST LINE NO.
ea47  cd 92 e9      1698   1705         CALL    COM0            ;COMPARE TO ENDING DELT LINE
ea4a  2a d2 d0      1699   1706         LHLD    DELP            ;GET DELT POSITION TO H,L
ea4d  da 8e ea      1700   1707         JC      NOVR            ;DELETE DOES NOT INVOLVE END
                    1701   1708 ;
                    1702   1709 ;GET HERE IF DELETE INVOLVES END OF FILE
                    1703   1710 ;
                    1704   1711 ;THIS GETS COMPLICATED BECAUSE:
                    1705   1712 ;  A) THE LAST LINE'S C/R IS NOT FOLLOWED BY ANY LINE NO.
                    1706   1713 ;                      AND
                    1707   1714 ;  B) IN GENERAL, A 0DH MIGHT BE EITHER A LENGTH BYTE OR C/R
                    1708   1715 ;
ea50  22 07 d0      1709   1716 LEA50:  SHLD    EOFP            ;DELT POS. ==> NEW EOF
ea53  36 01         1710   1717         MVI     M,1             ;PUT NEW EOF MARK IN FILE
ea55  46            1711   1718         MOV     B,M             ;FLAG WHICH ISN'T REALLY USED
ea56  eb            1712   1719         XCHG                    ;D,E = EOF
ea57  2a 05 d0      1713   1720         LHLD    BOFP            ;H,L = BOF
ea5a  eb            1714   1721         XCHG                    ;D,E = BOF & H,L = EOF
ea5b  2b            1715   1722         DCX     H               ;SO WE MISS LAST LINE'S C/R
ea5c  7d            1716   1723 DEL2:   MOV     A,L             ;SUBTRACT BOF FROM EOF
ea5d  93            1717   1724         SUB     E               ;
ea5e  7c            1718   1725         MOV     A,H             ;
ea5f  9a            1719   1726         SBB     D               ;
ea60  3e 0d         1720   1727         MVI     A,0DH           ;SETTING UP FOR COMPARE
ea62  da 85 ea      1721   1728         JC      DEL4            ;NO 0DH IN FILE==> MAXL=0
ea65  2b            1722   1729         DCX     H               ;MOVE UP 1 CHAR
ea66  be            1723   1730         CMP     M               ;0DH ?
ea67  c2 5c ea      1724   1731         JNZ     DEL2            ;NO, THEN TRY NEXT CHAR
ea6a  2b            1725   1732         DCX     H               ;YES - SEE IF TWO IN A ROW
ea6b  7d            1726   1733         MOV     A,L             ;SUBTRACTING BOF FROM POINTER
ea6c  93            1727   1734         SUB     E
ea6d  7c            1728   1735         MOV     A,H             ;
ea6e  9a            1729   1736         SBB     D               ;
ea6f  da 85 ea      1730   1737         JC      DEL4            ;0DH WAS 1ST CHAR==>LENGTH BYTE
ea72  3e 0d         1731   1738         MVI     A,0DH           ;COMPARE THIS CHAR TO 0DH
ea74  be            1732   1739         CMP     M               ;
ea75  23            1733   1740         INX     H               ;POINT TO NEXT CHAR
ea76  23            1734   1741         INX     H               ;POINT TO NEXT CHAR
ea77  ca 7b ea      1735   1742         JZ      DEL3            ;WERE TWO 0DH'S, AT LINE # NOW
ea7a  23            1736   1743 LEA7A:  INX     H               ;ONLY 1 0DH, 1 MORE==>AT LINE #
ea7b  cd 82 e9      1737   1744 DEL3:   CALL    LODM            ;GET LINE NO IN REGS
ea7e  21 0c d0      1738   1745         LXI     H,MAXL+3        ;WHERE IT GOES
ea81  cd 8a e9      1739   1746         CALL    STOM            ;PUT IT THERE
ea84  c9            1740   1747         RET                     ;MAXL IS UPDATED
ea85  eb            1741   1748 DEL4:   XCHG                    ;FOR PROPER RETURN
ea86  05            1742   1749         DCR     B               ;ALWAYS 1 ==> 0
ea87  c2 7a ea      1743   1750         JNZ     LEA7A           ;NEVER TAKE JUMP
ea8a  32 09 d0      1744   1751         STA     MAXL            ;MAKES MAXL VERY SMALL ALWAYS
ea8d  c9            1745   1752         RET                     ;DONE, EDITOR THINKS FILE EMPTY
                    1746   1753 ;
                    1747   1754 ;GET HERE IF DELETE IS IN THE MIDDLE OF THE FILE
                    1748   1755 ;
ea8e  cd 4a e9      1749   1756 NOVR:   CALL    FI1             ;FIND END OF DELETE AREA
ea91  cc 5c e9      1750   1757         CZ      FI2             ;NEXT LINE IF LINE NOS. EQUL
ea94  eb            1751   1758         XCHG                    ;
ea95  2a d2 d0      1752   1759         LHLD    DELP            ;DEST = START OF DELT AREA
ea98  0e 01         1753   1760         MVI     C,1             ;TERM ON EOF MARK
ea9a  cd 70 e9      1754   1761         CALL    LMOV            ;DO THE MOVE TO DELETE
ea9d  22 07 d0      1755   1762         SHLD    EOFP            ;UPDATE EOF ADDRESS
eaa0  36 01         1756   1763         MVI     M,1             ;PUT EOF MARK IN FILE
eaa2  c9            1757   1764         RET                     ;DONE
                    1758   1765 ;
                    1759   1766 ;STAB COMMAND - SET SYMBOL TABLE ADDRESS
                    1760   1767 ;
eaa3  cd 1c e5      1761   1768 STAB:   CALL    VCHK            ;CHECK FOR REQD PARM
eaa6  2a ef d0      1762   1769         LHLD    BBUF            ;GET IT
eaa9  22 32 d1      1763   1770         SHLD    SYMADD          ;SAVE AS SYMBOL TABLE ADDRESS
eaac  c3 60 e0      1764   1771         JMP     EORMS           ;DONE
                    1765   1772 ;
                    1766   1773 ; ***** END OF ALS8COM MODULE
                    1767   1774 ;
                    1768   1775 ;
                    1769   1776 ;THE ASSEMBLER STARTS HERE
                    1770   1777 ;
                    1771   1778 ;ASPC IS THE PROGRAM COUNTER (GOES ON LISTING), AND
                    1772   1779 ;BBUF+2 IS THE STORAGE COUNTER (WHERE OBJECT CODE GOES)
                    1773   1780 ;
eaaf  cd 1c e5      1774   1781 ASSM:   CALL    VCHK            ;AT LEAST 1 PARM. REQD
eab2  3a e6 d0      1775   1782         LDA     ABUF+7          ;2ND PARM. (OFFSET) GIVEN ?
eab5  b7            1776   1783         ORA     A               ;SET FLAGS
eab6  c2 bf ea      1777   1784         JNZ     ASM4            ;USE 2ND PARM. IF GIVEN
eab9  2a ef d0      1778   1785         LHLD    BBUF            ;ELSE GET 1ST PARM
eabc  22 f1 d0      1779   1786         SHLD    BBUF+2          ;USE 1ST PARM. AS STORAGE CNTR
eabf  3a e8 d1      1780   1787 ASM4:   LDA     IBUF+4          ;GET LETTER AFTER ASSM OR ASSI
eac2  fe 45         1781   1788         CPI     'E'             ;'E' - OMIT NON-ERROR LINES ?
eac4  ca d6 ea      1782   1789         JZ      LEAD6           ;SKIP CHECKING FOR 'S' OR 'X'
eac7  fe 53         1783   1790         CPI     'S'             ;'S' - LIST SYMBOL TABLE ?
eac9  ca d6 ea      1784   1791         JZ      LEAD6           ;SKIP CHECKING FOR 'X'
eacc  fe 58         1785   1792         CPI     'X'             ;'X' - CROSS REFERENCE ?
eace  ca d6 ea      1786   1793         JZ      LEAD6           ;HAVE PRINT FLAG
ead1  fe 20         1787   1794         CPI     ' '             ;MUST BE SPACE, E, S, OR X
ead3  c2 dd e7      1788   1795         JNZ     WHAT            ;WHOOPS - ILLEAGLE CHAR.
ead6  32 f4 d0      1789   1796 LEAD6:  STA     SYMX            ;SAVE SYMBOL/PRINT FLAG
ead9  3a e7 d1      1790   1797         LDA     IBUF+3          ;GET ASSEMBLY TYPE (ASSM/ASSI)
eadc  32 00 d1      1791   1798         STA     ASMTY           ;SAVE AS ASSEMBLY TYPE
eadf  af            1792   1799         XRA     A               ;GET A ZERO
eae0  2a 32 d1      1793   1800         LHLD    SYMADD          ;POINT TO SYMBOL TABLE START
eae3  77            1794   1801         MOV     M,A             ;PUT IN END OF TABLE MARK
eae4  32 0a d1      1795   1802         STA     ALST            ;ASSUME LIST TURNED 'ON'
eae7  32 f9 d0      1796   1803         STA     PASI            ;SET PASS INDICATOR TO PASS 1
eaea  2a ef d0      1797   1804 LEAEA:  LHLD    BBUF            ;GET PGM. ORG
eaed  22 f7 d0      1798   1805         SHLD    ASPC            ;USE IT TO INIT. PROG. COUNTER
eaf0  2a 05 d0      1799   1806         LHLD    BOFP            ;GET START OF SOURCE
eaf3  22 d2 d0      1800   1807         SHLD    APNT            ;USE IT TO INIT. ASS. POINTER
                    1801   1808 ;
                    1802   1809 ;THIS IS THE START OF THE MAIN ASSEMBLER PROCESSING LOOP
                    1803   1810 ;
eaf6  31 2f d1      1804   1811 LEAF6:  LXI     SP,SMODE
eaf9  21 c9 d1      1805   1812         LXI     H,OBUF          ;POINT TO OUTPUT BUFFER
eafc  3e e4         1806   1813         MVI     A,IBUF AND 0FFH ;LOW BYTE OF END OF OBUF
eafe  cd d1 e1      1807   1814         CALL    CLER            ;CLEAR OBUF TO SPACES
eb01  3a 00 d1      1808   1815         LDA     ASMTY           ;GET ASSM/ASSI FLAG
eb04  fe 49         1809   1816         CPI     'I'             ;USING EXTERNAL INPUT ?
eb06  ca 12 eb      1810   1817         JZ      LEB12           ;YES - CALL IT
eb09  cd b8 e9      1811   1818         CALL    MOVEL           ;ELSE MOVEL PUTS LINE IN IBUF
eb0c  ca 39 ee      1812   1819         JZ      LEE39           ;IF END OF FILE DETECTED
eb0f  c3 15 eb      1813   1820         JMP     LEB15           ;SKIP CALL TO EXT. INPUT
eb12  cd cc d0      1814   1821 LEB12:  CALL    IN8             ;CALL ASSI DRIVER FOR EXT INPUT
eb15  3a f9 d0      1815   1822 LEB15:  LDA     PASI            ;GET PASS INDICATOR
eb18  b7            1816   1823         ORA     A               ;SET FLAGS
eb19  c2 22 eb      1817   1824         JNZ     ASM2            ;DO THE 2ND PASS
eb1c  cd 57 eb      1818   1825         CALL    PAS1            ;ELSE DO PASS 1
eb1f  c3 f6 ea      1819   1826         JMP     LEAF6           ;THEN BACK TO TOP OF LOOP
eb22  cd 3d ec      1820   1827 ASM2:   CALL    PAS2            ;PROCESS PASS 2 LINE
eb25  21 c9 d1      1821   1828         LXI     H,OBUF          ;POINT TO OUTPUT BUFFER
eb28  cd 2e eb      1822   1829         CALL    AOUT            ;PRINT LINE
eb2b  c3 f6 ea      1823   1830         JMP     LEAF6           ;THEN BACK TO TOP OF LOOP
                    1824   1831 ;
                    1825   1832 ;END OF MAIN LOOP
                    1826   1833 ;
                    1827   1834 ;FOLLOWING ROUTINE PRINTS LINE DURING 2ND PASS
                    1828   1835 ;
eb2e  3a db d1      1829   1836 AOUT:   LDA     OBUF+18         ;GET ERROR TYPE IN OUTPUT LINE
eb31  fe 20         1830   1837         CPI     ' '             ;WAS THERE AN ERROR ?
eb33  c2 41 eb      1831   1838         JNZ     LEB41           ;YES - PRINT LINE
eb36  3a f4 d0      1832   1839         LDA     AERR            ;GET SYMBOL/ERROR PRINT FLAG
eb39  fe 45         1833   1840         CPI     'E'             ;ERRORS-ONLY LISTING ?
eb3b  c8            1834   1841         RZ                      ;YES - DONE WITH THIS LINE
eb3c  3a 0a d1      1835   1842         LDA     ALST            ;GET ASSEMBLER LIST FLAG
eb3f  b7            1836   1843         ORA     A               ;SET FLAGS
eb40  c0            1837   1844         RNZ                     ;DONE IF LISTING TURNED OFF
eb41  3a f9 d0      1838   1845 LEB41:  LDA     PASI            ;GET PASS INDICATOR
eb44  fe 02         1839   1846         CPI     2               ;GREATER THAN 1 (E.G. 3RD PASS)
eb46  d0            1840   1847         RNC                     ;DONE THEN
eb47  3a fa d0      1841   1848         LDA     LFMT            ;GET FORMAT/NO FORMAT FLAG
eb4a  b7            1842   1849         ORA     A               ;SET FLAGS
eb4b  c4 61 f3      1843   1850         CNZ     LF361           ;FORMAT LINE IF NECESSARY
eb4e  21 c9 d1      1844   1851         LXI     H,OBUF          ;POINT TO LINE TO OUTPUT
eb51  cd 16 e2      1845   1852         CALL    CRLF            ;DO CARRIAGE RET FROM PREV LINE
eb54  c3 80 e3      1846   1853         JMP     SCRN            ;PRINT LINE & RET.
                    1847   1854 ;
                    1848   1855 ;PASS 1 OF THE ASSEMBLER USED TO FORM SYMBOL TABLE
                    1849   1856 ;
eb57  cd 6a e2      1850   1857 PAS1:   CALL    ZBUF            ;CLEAR OUT THE ASCII BUFFER
eb5a  32 f9 d0      1851   1858         STA     PASI            ;PUT PASS INDICATOR BACK
eb5d  21 e4 d1      1852   1859         LXI     H,IBUF          ;POINT TO 1ST CHAR OF LINE
eb60  22 01 d1      1853   1860         SHLD    PNTR            ;SAVE AS POINTER INTO LINE
eb63  7e            1854   1861         MOV     A,M             ;GET 1ST CHAR
eb64  fe 20         1855   1862         CPI     ' '             ;BLANK ?
eb66  ca 8e eb      1856   1863         JZ      OPC             ;NO LABEL THEN
eb69  fe 2a         1857   1864         CPI     COMCHR          ;COMMENT CHARACTER ?
eb6b  c8            1858   1865         RZ                      ;DONE IF COMMENT LINE
                    1859   1866 ;
                    1860   1867 ;PROCESS LABEL POINTED TO IN LINE BY H,L
                    1861   1868 ;
eb6c  cd f8 f0      1862   1869         CALL    SLAB            ;SEE IF LABEL ALREADY IN TABLE
eb6f  da e0 f0      1863   1870         JC      LF0E0           ;ERROR IN LABEL
eb72  ca 56 f3      1864   1871         JZ      ERRD            ;DUPLICATE LABEL
eb75  cd b3 eb      1865   1872         CALL    LCHK            ;CHECK CHAR AFTER LABEL
eb78  da e0 f0      1866   1873         JC      LF0E0           ;IF NOT SPACE OR COLON
eb7b  cd a5 eb      1867   1874         CALL    LEBA5           ;TO MOVE LABEL INTO TABLE
eb7e  eb            1868   1875         XCHG                    ;SYM. TABLE ADDR TO H,L
eb7f  22 f5 d0      1869   1876         SHLD    TABA            ;SAVE AS SYMBOL TABLE PNTR
eb82  3a f8 d0      1870   1877         LDA     ASPC+1          ;PUTTING P.C. IN SYMBOL TABLE
eb85  77            1871   1878         MOV     M,A             ;PUT 1ST BYTE IN TABLE
eb86  23            1872   1879         INX     H               ;INR. TABLE POINTER
eb87  3a f7 d0      1873   1880         LDA     ASPC            ;GET 2ND BYTE
eb8a  77            1874   1881         MOV     M,A             ;PUT IT IN TABLE
eb8b  23            1875   1882         INX     H               ;POINT PAST VALUE
eb8c  36 00         1876   1883         MVI     M,0             ;END OF TABLE MARK
                    1877   1884 ;
                    1878   1885 ;PROCESS OPCODE
                    1879   1886 ;
eb8e  cd 6a e2      1880   1887 OPC:    CALL    ZBUF            ;BLANK OUT ABUF
eb91  cd cc ee      1881   1888         CALL    SBLK            ;SCAN TO OPCODE
eb94  da d8 f0      1882   1889         JC      OERR            ;IF FOUND C/R INSTEAD
eb97  cd 3e f1      1883   1890         CALL    ALPS            ;MOVE OPCODE INTO ABUF
eb9a  fe 20         1884   1891         CPI     ' '             ;CHECK FOR SPACE AFTER OPCODE
eb9c  da 37 f0      1885   1892         JC      OPCD            ;OPCODE FOLLOWED BY C/R
eb9f  c2 d8 f0      1886   1893         JNZ     OERR            ;OPCODE FOLLOWED BY CHAR.
eba2  c3 37 f0      1887   1894         JMP     OPCD            ;TO CONTINUE OPCODE PROC.
                    1888   1895 ;
                    1889   1896 ;ROUTINE TO MOVE LABEL INTO SYMBOL TABLE
                    1890   1897 ;
eba5  0e 05         1891   1898 LEBA5:  MVI     C,LLAB          ;LENGTH OF LABEL
eba7  21 df d0      1892   1899         LXI     H,ABUF          ;SOURCE
ebaa  7e            1893   1900 MLAB:   MOV     A,M             ;GET CHAR FROM LABEL
ebab  12            1894   1901         STAX    D               ;PUT IT IN TABLE
ebac  13            1895   1902         INX     D               ;DEST. POINTER
ebad  23            1896   1903         INX     H               ;SOURCE POINTER
ebae  0d            1897   1904         DCR     C               ;LENGTH POINTER
ebaf  c2 aa eb      1898   1905         JNZ     MLAB            ;IF MORE CHARS TO MOVE
ebb2  c9            1899   1906         RET                     ;ELSE DONE
                    1900   1907 ;
                    1901   1908 ;CHECK LABELS FOR VALID TERMINATOR
                    1902   1909 ;
ebb3  2a 01 d1      1903   1910 LCHK:   LHLD    PNTR            ;GET POINTER
ebb6  7e            1904   1911         MOV     A,M             ;GET CHAR
ebb7  fe 20         1905   1912         CPI     ' '             ;SPACE ?
ebb9  c8            1906   1913         RZ                      ;OK THEN, RETURN
ebba  fe 3a         1907   1914         CPI     ':'             ;COLON ?
ebbc  c0            1908   1915         RNZ                     ;IF NOT, RETURN ZERO FLAG OFF
ebbd  23            1909   1916         INX     H               ;ELSE OK, INR. PAST NON-SPACE
ebbe  22 01 d1      1910   1917         SHLD    PNTR            ;AND UPDATE POINTER
ebc1  c9            1911   1918         RET                     ;THEN RETURN
                    1912   1919 ;
                    1913   1920 ;PROCESS PSEUDO OPS IN PASS 1
                    1914   1921 ;H,L POINTS INTO LINE, D,E POINTS INTO OPCODE TABLE
                    1915   1922 ;
ebc2  cd cc ee      1916   1923 PSU1:   CALL    SBLK            ;SCAN TO OPERAND
ebc5  1a            1917   1924         LDAX    D               ;FETCH TABLE VALUE
ebc6  b7            1918   1925         ORA     A               ;SET FLAGS
ebc7  ca e6 eb      1919   1926         JZ      ORG1            ;ORG PSEUDO OP
ebca  fa a8 ec      1920   1927         JM      DAT2A           ;DB PSEUDO OP
ebcd  fe 02         1921   1928         CPI     2               ;
ebcf  da fb eb      1922   1929         JC      EQU1            ;EQU PSEUDO OP
ebd2  ca 16 ec      1923   1930         JZ      RESI            ;DS PSEUDO OP
ebd5  fe 08         1924   1931         CPI     8               ;
ebd7  ca 26 ec      1925   1932         JZ      LEC26           ;ASC PSEUDO OP
ebda  fe 05         1926   1933         CPI     5               ;
ebdc  d0            1927   1934         RNC                     ;PSEUDO-OPS NOT USED 1ST PASS
ebdd  ea 39 ee      1928   1935         JPE     LEE39           ;END PSEUDO OP
                    1929   1936 ;
                    1930   1937 ;DO DW PSEUDO OP
                    1931   1938 ;
ebe0  0e 02         1932   1939 ACO1:   MVI     C,2             ;DW IS A 2-BYTE INSTR.
ebe2  af            1933   1940         XRA     A               ;CLEAR CARRY & FLAGS
ebe3  c3 c7 f0      1934   1941         JMP     OCN1            ;TO INCREMENT PGM. COUNTER
                    1935   1942 ;
                    1936   1943 ;DO ORG PSEUDO OP
                    1937   1944 ;
ebe6  cd 60 f1      1938   1945 ORG1:   CALL    ASCN            ;GET OPERAND TO H,L
ebe9  3a db d1      1939   1946         LDA     OBUF+18         ;GET ERROR INDICATOR
ebec  fe 20         1940   1947         CPI     ' '             ;ANY ERRORS IN THIS LINE ?
ebee  c0            1941   1948         RNZ                     ;IF SO, DON'T PROCESS
ebef  22 f7 d0      1942   1949         SHLD    ASPC            ;ELSE PUT VALUE IN PGM. CTR.
ebf2  3a e4 d1      1943   1950         LDA     IBUF            ;GET 1ST CHAR OF LINE
ebf5  fe 20         1944   1951         CPI     ' '             ;SPACE OR LABEL CHAR ?
ebf7  c8            1945   1952         RZ                      ;DONE IF SPACE
ebf8  c3 06 ec      1946   1953         JMP     EQUS            ;ELSE CHANGE LABEL VALUE
                    1947   1954 ;
                    1948   1955 ;DO EQU PSEUDO OP
                    1949   1956 ;
ebfb  cd 60 f1      1950   1957 EQU1:   CALL    ASCN            ;GET VALUE TO H,L
ebfe  3a e4 d1      1951   1958         LDA     IBUF            ;POINT AT 1ST CHAR OF LINE
ec01  fe 20         1952   1959         CPI     ' '             ;SPACE OR LABLE CHAR ?
ec03  ca 2f f3      1953   1960         JZ      ERRM            ;EQU REQUIRES A LABEL ALWAYS
ec06  eb            1954   1961 EQUS:   XCHG                    ;VALUE TO D,E
ec07  2a f5 d0      1955   1962         LHLD    TABA            ;TABLE ADDR TO H,L
ec0a  72            1956   1963         MOV     M,D             ;STORE LABEL VALUE IN S. TABLE
ec0b  23            1957   1964         INX     H               ;2ND BYTE
ec0c  73            1958   1965         MOV     M,E             ;
ec0d  3a db d1      1959   1966         LDA     OBUF+18         ;GET ERROR FLAG
ec10  fe 20         1960   1967         CPI     ' '             ;LINE O.K. ?
ec12  c8            1961   1968         RZ                      ;DONE THEN
ec13  c3 41 eb      1962   1969         JMP     LEB41           ;ELSE PRINT THE LINE
                    1963   1970 ;
                    1964   1971 ;DO DS PSEUDO OP
                    1965   1972 ;
ec16  cd 60 f1      1966   1973 RESI:   CALL    ASCN            ;GET OPERAND VALUE TO H,L
ec19  44            1967   1974         MOV     B,H             ;MOVING TO B,C
ec1a  4d            1968   1975         MOV     C,L             ;
ec1b  3a db d1      1969   1976         LDA     OBUF+18         ;GET ERROR INDICATOR
ec1e  fe 20         1970   1977         CPI     ' '             ;LINE O.K. ?
ec20  c2 41 eb      1971   1978         JNZ     LEB41           ;PRINT IT IF NOT
ec23  c3 a1 ec      1972   1979         JMP     RES21           ;ELSE ADD B,C TO PGM. CTR.
                    1973   1980 ;
                    1974   1981 ;DO ASC PSEUDO OP
                    1975   1982 ;
ec26  7e            1976   1983 LEC26:  MOV     A,M             ;GET 1ST NON-SPACE CHAR
ec27  fe 0d         1977   1984         CPI     0DH             ;CARRIAGE RETN ?
ec29  c8            1978   1985         RZ                      ;DONE
ec2a  57            1979   1986         MOV     D,A             ;SAVE DELIMITER IN D
ec2b  01 00 00      1980   1987         LXI     B,0             ;INITIALIZE CHAR COUNT TO 0
ec2e  23            1981   1988 LEC2E:  INX     H               ;POINT TO NEXT CHAR
ec2f  7e            1982   1989         MOV     A,M             ;GET IT
ec30  fe 0d         1983   1990         CPI     0DH             ;END OF LINE ?
ec32  ca a1 ec      1984   1991         JZ      RES21           ;DONE WITH STRING
ec35  ba            1985   1992         CMP     D               ;2ND DELIMETER ?
ec36  ca a1 ec      1986   1993         JZ      RES21           ;DONE IF SO
ec39  03            1987   1994         INX     B               ;ELSE INR. CHAR COUNT
ec3a  c3 2e ec      1988   1995         JMP     LEC2E           ;AND KEEP ON COUNTING
                    1989   1996 ;
                    1990   1997 ;PERFORM PASS 2 OF THE ASSEMBLER
                    1991   1998 ;
ec3d  21 c9 d1      1992   1999 PAS2:   LXI     H,OBUF          ;SET OUTPUT BUFFER ADDRESS
ec40  3a f8 d0      1993   2000         LDA     ASPC+1          ;GET HIGH BYTE OF PGM. CTR.
ec43  cd 93 e3      1994   2001         CALL    BINH+3          ;CONVERT TO ASCII & STORE
ec46  23            1995   2002         INX     H               ;POINT PAST BYTE
ec47  3a f7 d0      1996   2003         LDA     ASPC            ;GET LOW ORDER BYTE
ec4a  cd 93 e3      1997   2004         CALL    BINH+3          ;PUT IT IN ADDR FIELD, TOO
ec4d  22 0b d1      1998   2005         SHLD    OIND            ;SAVE H,L AS OUTPUT POINTER
ec50  cd 6a e2      1999   2006         CALL    ZBUF            ;CLEAR ABUFF
ec53  21 e4 d1      2000   2007         LXI     H,IBUF          ;POINT TO LINE TO ASSEMBLE
ec56  22 01 d1      2001   2008 PABL:   SHLD    PNTR            ;SAVE AS POINTER
ec59  7e            2002   2009         MOV     A,M             ;GET 1ST CHAR OF LINE
ec5a  fe 20         2003   2010         CPI     ' '             ;SPACE ?
ec5c  ca 8e eb      2004   2011         JZ      OPC             ;YES, NO LABEL, PROC. OPCODE
ec5f  fe 2a         2005   2012         CPI     COMCHR          ;IS IT A COMMENT LINE ?
ec61  c8            2006   2013         RZ                      ;DONE THEN
ec62  cd f8 f0      2007   2014         CALL    SLAB            ;LOOK UP LABEL IN TABLE
ec65  da e0 f0      2008   2015         JC      LF0E0           ;LABEL ERROR
ec68  cd b3 eb      2009   2016         CALL    LCHK            ;CHECK TERM. CHAR
ec6b  c2 e0 f0      2010   2017         JNZ     LF0E0           ;NOT FOLLOWED BY '$' OR ':'
ec6e  c3 8e eb      2011   2018         JMP     OPC             ;PROCESS THE OPCODE
                    2012   2019 ;
                    2013   2020 ;PROCESS PSEUDO OPS FOR THE 2ND PASS
                    2014   2021 ;
ec71  1a            2015   2022 PSU2:   LDAX    D               ;GET TABLE VALUE
ec72  b7            2016   2023         ORA     A               ;SET FLAGS
ec73  ca ae ec      2017   2024         JZ      ORG2            ;ORG PSEUDO OP
ec76  fa a5 ec      2018   2025         JM      DAT2            ;DB PSEUDO OP
ec79  fe 02         2019   2026         CPI     2
ec7b  d8            2020   2027         RC                      ;EQU WAS PROCESSED ON 1ST PASS
ec7c  ca 95 ec      2021   2028         JZ      RES2            ;DS PSEUDO OP
ec7f  fe 08         2022   2029         CPI     8
ec81  ca 01 ed      2023   2030         JZ      LED01           ;ASC PSEUDO OP
ec84  fe 05         2024   2031         CPI     5
ec86  ca d3 ec      2025   2032         JZ      LECD3           ;COM PSEUDO OP
ec89  d2 cd ec      2026   2033         JNC     LECCD           ;BOTH LST AND NLST
ec8c  ea 39 ee      2027   2034         JPE     LEE39           ;END PSEUDO OP
                    2028   2035 ;
                    2029   2036 ;DO DW PSEUDO OP
                    2030   2037 ;
ec8f  cd 14 ee      2031   2038 ACO2:   CALL    TYS6            ;GET VALUE & PUT IN MEM
ec92  c3 e0 eb      2032   2039         JMP     ACO1            ;INR P.C. & RET
                    2033   2040 ;
                    2034   2041 ;DO DS PSEUDO OP IN PASS 2
                    2035   2042 ;
ec95  cd 5d f1      2036   2043 RES2:   CALL    ASBL            ;GET VALUE IN H,L
ec98  44            2037   2044         MOV     B,H             ;MOVING TO B,C
ec99  4d            2038   2045         MOV     C,L
ec9a  2a f1 d0      2039   2046         LHLD    BBUF+2          ;GET STORAGE COUNTER
ec9d  09            2040   2047         DAD     B               ;ADD NO BYTES IN DS STMNT
ec9e  22 f1 d0      2041   2048         SHLD    BBUF+2          ;UPDATE STORAGE COUNTER
eca1  af            2042   2049 RES21:  XRA     A               ;CLEAR ZERO FLAG
eca2  c3 ca f0      2043   2050         JMP     OCN2            ;TO UPDATE PGM. COUNTER
                    2044   2051 ;
                    2045   2052 ;DO PASS 2 DB PSEUDO OP
                    2046   2053 ;
eca5  cd d3 ed      2047   2054 DAT2:   CALL    TYS5            ;GET OPERNAD
eca8  af            2048   2055 DAT2A:  XRA     A               ;MAKE ACC. ZERO
eca9  0e 01         2049   2056         MVI     C,1             ;BYTE COUNT
ecab  c3 c7 f0      2050   2057         JMP     OCN1            ;TO INR. PGM. COUNTER
                    2051   2058 ;
                    2052   2059 ;DO ORG PSEUDO OP
                    2053   2060 ;
                    2054   2061 ;P.T. SCREWED THIS ONE UP, AS THEY STORE THE NEW ORG NOT ONLY
                    2055   2062 ;AS THE ASSEMBLERS PROGRAM COUNTER, BUT ALSO AS THE STORAGE
                    2056   2063 ;COUNTER, WHICH POINTS TO WHERE THEY ARE STORING THE OBJECT
                    2057   2064 ;CODE. THUS IF YOU WERE USING AN OFFSET (E.G. ASSM XXXX YYYY)
                    2058   2065 ;BEFORE THE ORG STATEMENT, YOU WON'T BE AFTERWARDS.  WHAT'S
                    2059   2066 ;SURPRISING IS THAT IMSAI'S SCS-1, WRITTEN BY THE SAME CO.
                    2060   2067 ;THAT WROTE ALS-8 FOR P.T. (MICRO-TEC OF SUNNYVALE CALIF.),
                    2061   2068 ;HAS THIS FIXED, EVEN THOUGH IT WAS AN EARLIER PRODUCT.
                    2062   2069 ;
ecae  cd 5d f1      2063   2070 ORG2:   CALL    ASBL            ;GET ORG VALUE
ecb1  3a db d1      2064   2071         LDA     OBUF+18         ;FETCH ERROR FLAG
ecb4  fe 20         2065   2072         CPI     ' '             ;LINE O.K. ?
ecb6  c0            2066   2073         RNZ                     ;IGNORA IF NOT
ecb7  eb            2067   2074         XCHG                    ;VALUE TO D,E
ecb8  2a f7 d0      2068   2075         LHLD    ASPC            ;GET CUR. PGM COUNTER
ecbb  eb            2069   2076         XCHG                    ;NEW ORG H,L - PC IN D,E
ecbc  22 f7 d0      2070   2077         SHLD    ASPC            ;MAKE ORG NEW P.C.
ecbf  22 f1 d0      2071   2078         SHLD    BBUF+2          ;AND MAKE IT STORAGE CNTR ALSO
ecc2  c9            2072   2079         RET                     ;DONE, AND YOU ARE SCREWED
                    2073   2080 ;
                    2074   2081 ;PROCESS THE $ SYMBOL (CUR. VALUE OF PGM. COUNTER)
                    2075   2082 ;
ecc3  23            2076   2083 LECC3:  INX     H               ;INCREMENT POINTER
ecc4  22 01 d1      2077   2084         SHLD    PNTR            ;SAVE POINTER
ecc7  2a f7 d0      2078   2085         LHLD    ASPC            ;GET CUR. PGM. COUNTER
ecca  c3 04 f2      2079   2086         JMP     AVAL            ;TO FINISH EXPR. EVALUATION
                    2080   2087 ;
                    2081   2088 ;PROCESS NLST AND LST PSEUDO OPS.
                    2082   2089 ;
eccd  d6 06         2083   2090 LECCD:  SUI     6               ;CONVERT LST/NLST TO 0 OR 1
eccf  32 0a d1      2084   2091         STA     ALST            ;SAVE AP LIST FLAG
ecd2  c9            2085   2092         RET                     ;DONE
                    2086   2093 ;
                    2087   2094 ;PROCESS COM PSEUDO OP
                    2088   2095 ;
ecd3  cd 6a e2      2089   2096 LECD3:  CALL    ZBUF            ;CLEAR ABUF
ecd6  cd cc ee      2090   2097         CALL    SBLK            ;SCAN TO LABEL TO ENTER
ecd9  cd f8 f0      2091   2098         CALL    SLAB            ;LOOKUP LABEL, VALUE IN H,L
ecdc  da 37 f3      2092   2099         JC      ERRA            ;IF ERROR IN LABEL
ecdf  c2 25 f3      2093   2100         JNZ     ERRU            ;IF LABEL NOT FOUND
ece2  11 00 d3      2094   2101 LECE2:  LXI     D,SYSYM         ;SYSTEM SYMBOL TABLE
ece5  22 05 d1      2095   2102 LECE5:  SHLD    OPRD            ;SAVE VALUE IN OPRD
ece8  06 05         2096   2103         MVI     B,LLAB          ;LENGTH OF LABELS
ecea  cd 28 e2      2097   2104         CALL    COMS            ;SEE IF ALREADY IN SYSTEM TABLE
eced  ca f9 ec      2098   2105         JZ      LECF9           ;ALREADY IN TABLE, CHG VALUE
ecf0  cd a5 eb      2099   2106         CALL    LEBA5           ;NOT IN TABLE, ADD IT
ecf3  13            2100   2107         INX     D               ;POINT PAST (UNDEFINED) VALUE
ecf4  13            2101   2108         INX     D               ;2ND BYTE
ecf5  af            2102   2109         XRA     A               ;GET BINARY ZERO
ecf6  12            2103   2110         STAX    D               ;TABLE'S NEW END MARK
ecf7  1b            2104   2111         DCX     D               ;POINT TO 2ND BYTE OF VALUE
ecf8  3c            2105   2112         INR     A               ;TURN ZERO FLAG OFF
ecf9  2a 05 d1      2106   2113 LECF9:  LHLD    OPRD            ;GET SYMBOL'S VALUE
ecfc  eb            2107   2114         XCHG                    ;TO D,E
ecfd  73            2108   2115         MOV     M,E             ;STORE 1 BYTE
ecfe  2b            2109   2116         DCX     H               ;POINT FROM 2ND TO 1ST BYTE
ecff  72            2110   2117         MOV     M,D             ;STORE IT, TOO.
ed00  c9            2111   2118         RET                     ;DONE
                    2112   2119 ;
                    2113   2120 ;DO ASC PSEUDO OP
                    2114   2121 ;
ed01  cd cc ee      2115   2122 LED01:  CALL    SBLK            ;SCAN TO 1ST NON BLANK CHAR
ed04  da 37 f3      2116   2123         JC      ERRA            ;IF C/R FOUND
ed07  4f            2117   2124         MOV     C,A             ;SAVE AS DELIM.
ed08  23            2118   2125         INX     H               ;POINT TO 1ST CHR OF STRING
ed09  7e            2119   2126         MOV     A,M             ;GET IT
ed0a  fe 0d         2120   2127         CPI     0DH             ;END OF LINE ?
ed0c  ca 37 f3      2121   2128         JZ      ERRA            ;ERROR THEN
ed0f  b9            2122   2129         CMP     C               ;SECOND DELIMITER ?
ed10  ca 37 f3      2123   2130         JZ      ERRA            ;ERROR THEN, TOO
ed13  06 f9         2124   2131         MVI     B,0F9H          ;******MAY BE ADDRESS DEPENDANT
ed15  7e            2125   2132 LED15:  MOV     A,M             ;GET THE CHAR FROM STRING
ed16  fe 0d         2126   2133         CPI     0DH             ;END OF LINE ?
ed18  ca 57 ed      2127   2134         JZ      LED57           ;DONE WITH STRING THEN
ed1b  b9            2128   2135         CMP     C               ;2ND DELIMITER ?
ed1c  ca 57 ed      2129   2136         JZ      LED57           ;DONE WITH STRING THEN
ed1f  22 01 d1      2130   2137         SHLD    PNTR            ;SAVE STRING POINTER
ed22  2a f7 d0      2131   2138         LHLD    ASPC            ;GET PROGRAM COUNTER
ed25  23            2132   2139         INX     H               ;THIS USED UP 1 BYTE
ed26  22 f7 d0      2133   2140         SHLD    ASPC            ;PUT UPDATED POINTER BACK
ed29  04            2134   2141         INR     B               ;
ed2a  c5            2135   2142         PUSH    B               ;SAVE B,C
ed2b  cd 1d ee      2136   2143         CALL    ASTO            ;PUT BYTE IN MEMORY & LISTING
ed2e  7d            2137   2144         MOV     A,L             ;GET LOW BYTE OF LISTING PTR
ed2f  fe d8         2138   2145         CPI     (OBUF+15) AND 0FFH
ed31  c2 4f ed      2139   2146         JNZ     LED4F           ;NO, DO NEXT BYTE
ed34  cd 2e eb      2140   2147         CALL    AOUT            ;YES, PRINT THE LINE
ed37  c1            2141   2148         POP     B               ;GET BACK B,C
ed38  06 00         2142   2149         MVI     B,0             ;RESET FLAG
ed3a  c5            2143   2150         PUSH    B               ;SAVE B,C AGAIN
ed3b  21 20 20      2144   2151         LXI     H,2020H         ;TWO SPACES
ed3e  22 c9 d1      2145   2152         SHLD    OBUF            ;BLANK ADDR FIELD BYTES 1 & 2
ed41  22 cb d1      2146   2153         SHLD    OBUF+2          ;3RD & 4TH BYTES
ed44  3e 0d         2147   2154         MVI     A,0DH           ;GET C/R
ed46  32 d9 d1      2148   2155         STA     OBUF+16         ;LINE ENDS WITH OBJECT CODE
ed49  21 cc d1      2149   2156         LXI     H,OBUF+3        ;LAST BYTE OF ADDR FIELD
ed4c  22 0b d1      2150   2157         SHLD    OIND            ;OUTPUT POINTER FOR NXT LINE
ed4f  2a 01 d1      2151   2158 LED4F:  LHLD    PNTR            ;GET STRING POINTER
ed52  c1            2152   2159         POP     B               ;RESTORE B,C
ed53  23            2153   2160         INX     H               ;INCREMENT STRING POINTER
ed54  c3 15 ed      2154   2161         JMP     LED15           ;DO NEXT BYTE OF STRING
                    2155   2162 ;
                    2156   2163 ;GET HERE WHEN HAVE REACHED 2ND DELIMITER OR C/R
                    2157   2164 ;
ed57  78            2158   2165 LED57:  MOV     A,B             ;GET 1ST LINE FLAG TO A
ed58  b7            2159   2166         ORA     A               ;SET FLAGS
ed59  f8            2160   2167         RM                      ;ON 1ST LINE, DONE
ed5a  ca f6 ea      2161   2168         JZ      LEAF6           ;FOR S.T./XREF, MAIN LOOP
ed5d  2a 0b d1      2162   2169         LHLD    OIND            ;GET OUTPUT LINE POINTER
ed60  23            2163   2170         INX     H               ;POINT PAST LAST BYTE
ed61  36 0d         2164   2171         MVI     M,0DH           ;TERMINATE LINE
ed63  c9            2165   2172         RET                     ;DONE
                    2166   2173 ;
                    2167   2174 ;PROCESS STAX AND LDAX INST.
                    2168   2175 ;
ed64  cd 5d f1      2169   2176 TYP2:   CALL    ASBL            ;FETCH OPERAND
ed67  c4 11 f3      2170   2177         CNZ     ERRR            ;ILLEGAL REGISTER
ed6a  7d            2171   2178         MOV     A,L             ;GET LOW ORDER OPERAND
ed6b  b7            2172   2179         ORA     A               ;SET FLAGS
ed6c  ca 88 ed      2173   2180         JZ      TY31            ;OPERAND = 0
ed6f  fe 02         2174   2181         CPI     2               ;OPERAND = 2
ed71  c4 11 f3      2175   2182         CNZ     ERRR            ;ILLEGAL REGISTER
ed74  c3 88 ed      2176   2183         JMP     TY31
                    2177   2184 ;
                    2178   2185 ;PROCESS PUSH, POP, INX, DCX, DAD INSTRUCTIONS
                    2179   2186 ;
ed77  cd 5d f1      2180   2187 TYP3:   CALL    ASBL            ;FETCH OPERAND
ed7a  c4 11 f3      2181   2188         CNZ     ERRR            ;ILLEGAL REGISTER
ed7d  7d            2182   2189         MOV     A,L             ;GET LOW ORDER OPERAND
ed7e  0f            2183   2190         RRC                     ;CHECK LOW ORDER BIT
ed7f  dc 11 f3      2184   2191         CC      ERRR            ;ILLEGAL REGISTER
ed82  17            2185   2192         RAL                     ;RESTORE
ed83  fe 08         2186   2193         CPI     8               ;
ed85  d4 11 f3      2187   2194         CNC     ERRR            ;ILLEGAL REGISTER
ed88  07            2188   2195 TY31:   RLC                     ;SHIFT LEFT 3 TIMES
ed89  17            2189   2196         RAL                     ;
ed8a  17            2190   2197         RAL                     ;
ed8b  47            2191   2198 TY32:   MOV     B,A             ;SAVE REGISTER
ed8c  1a            2192   2199         LDAX    D               ;FETCH OPCODE BASE
ed8d  80            2193   2200         ADD     B               ;FORM OPCODE W/REGISTER
ed8e  fe 76         2194   2201         CPI     76H             ;CHECK FOR MOV M,M
ed90  cc 11 f3      2195   2202         CZ      ERRR            ;ILLEGAL REGISTER
ed93  c3 1d ee      2196   2203         JMP     ASTO            ;PUT IN MEM & INR P.C.
                    2197   2204 ;
                    2198   2205 ;PROCESS ACCUMULATOR, INR, DCR, MOV, RST INSTRUCTIONS
                    2199   2206 ;
ed96  cd 5d f1      2200   2207 TYP4:   CALL    ASBL            ;FETCH OPERAND
ed99  c4 11 f3      2201   2208         CNZ     ERRR            ;ILLEGAL REGISTER
ed9c  7d            2202   2209         MOV     A,L             ;GET LOW ORDER OPERAND
ed9d  fe 08         2203   2210         CPI     8               ;
ed9f  d4 11 f3      2204   2211         CNC     ERRR            ;ILLEGAL REGISTER
eda2  1a            2205   2212         LDAX    D               ;FETCH OPCODE BASE
eda3  fe 40         2206   2213         CPI     40H             ;CHECK FOR MOV INST.
eda5  ca b4 ed      2207   2214         JZ      TY41            ;PROCESS THEM SEPARATELY
eda8  fe c7         2208   2215         CPI     0C7H            ;
edaa  7d            2209   2216         MOV     A,L             ;OPERAND IN ACCUM.
edab  ca 88 ed      2210   2217         JZ      TY31            ;RST INSTRUCTION
edae  fa 8b ed      2211   2218         JM      TY32            ;ACCUMULATOR INST.
edb1  c3 88 ed      2212   2219         JMP     TY31            ;INR, DCR INSTRUCTIONS
                    2213   2220 ;
                    2214   2221 ;PROCESS MOV INSTRUCTIONS
                    2215   2222 ;
edb4  29            2216   2223 TY41:   DAD     H               ;MULT OPRND BY 8 (3 LFT SHIFTS)
edb5  29            2217   2224         DAD     H               ;
edb6  29            2218   2225         DAD     H               ;
edb7  85            2219   2226         ADD     L               ;FORM OPCODE
edb8  12            2220   2227         STAX    D               ;SAVE OPCODE
edb9  cd f2 ed      2221   2228         CALL    MPNT            ;
edbc  cd 60 f1      2222   2229         CALL    ASCN            ;
edbf  c4 11 f3      2223   2230         CNZ     ERRR            ;
edc2  7d            2224   2231         MOV     A,L             ;FETCH LOW ORDER OPERAND
edc3  fe 08         2225   2232         CPI     8               ;
edc5  d4 11 f3      2226   2233         CNC     ERRR            ;ILLEGAL REGISTERS
edc8  c3 8b ed      2227   2234         JMP     TY32            ;
                    2228   2235 ;
                    2229   2236 ;PROCESS IMMEDIATE INSTRUCTIONS
                    2230   2237 ;IMMEDIATE BYTE CAN BE -256 TO +255
                    2231   2238 ;MVI INSTRUCTION IS A SPECIAL CASE AND HAS 2 OPERANDS
                    2232   2239 ;
edcb  fe 06         2233   2240 TYP5:   CPI     6               ;CHECK FOR MVI INST
edcd  cc e0 ed      2234   2241         CZ      TY56            ;SPECIAL CASE
edd0  cd 1d ee      2235   2242         CALL    ASTO            ;PUT OBJ. IN MEM & ON LISTING
edd3  cd 5d f1      2236   2243 TYS5:   CALL    ASBL            ;GET IMMEDIATE ARG.
edd6  3c            2237   2244         INR     A               ;
edd7  fe 02         2238   2245         CPI     2               ;CHECK OPERAND FOR RANGE
edd9  d4 2a f3      2239   2246         CNC     ERRV            ;OPERAND OUT OF RANGE
eddc  7d            2240   2247         MOV     A,L             ;
eddd  c3 1d ee      2241   2248         JMP     ASTO            ;PUT OBJECT IN MEM & ON LISTING
                    2242   2249 ;
                    2243   2250 ;FETCH 1ST ARGUMENT FOR MVI AND LXI INSTRUCTIONS
                    2244   2251 ;
ede0  cd 5d f1      2245   2252 TY56:   CALL    ASBL            ;FETCH ARGUMENT
ede3  c4 11 f3      2246   2253         CNZ     ERRR            ;ILLEGAL REGISTER
ede6  7d            2247   2254         MOV     A,L             ;GET LOW ORDER ARGUMENT
ede7  fe 08         2248   2255         CPI     8               ;
ede9  d4 11 f3      2249   2256         CNC     ERRR            ;ILLEGAL REGISTER
edec  29            2250   2257         DAD     H               ;MULT BY 8 (3 LEFT SHIFTS)
eded  29            2251   2258         DAD     H               ;
edee  29            2252   2259         DAD     H               ;
edef  1a            2253   2260         LDAX    D               ;FETCH OPCODE BASE
edf0  85            2254   2261         ADD     L               ;FORM OPCODE
edf1  5f            2255   2262         MOV     E,A             ;SAVE OBJECT BYTE
edf2  2a 01 d1      2256   2263 MPNT:   LHLD    PNTR            ;FETCH POINTER
edf5  7e            2257   2264         MOV     A,M             ;FETCH CHARACTER
edf6  fe 2c         2258   2265         CPI     ','             ;CHECK FOR COMMA
edf8  23            2259   2266         INX     H               ;INCREMENT POINTER
edf9  22 01 d1      2260   2267         SHLD    PNTR            ;AND SAVE IT
edfc  c2 1a f3      2261   2268         JNZ     ERRS            ;SYNTAX ERROR IF NO COMMA
edff  7b            2262   2269         MOV     A,E             ;
ee00  c9            2263   2270         RET                     ;
                    2264   2271 ;
                    2265   2272 ;PROCESS 3 BYTE INSTRUCTIONS
                    2266   2273 ;LXI INSTRUCTION IS A SPECIAL CASE
                    2267   2274 ;
ee01  fe 01         2268   2275 TYP6:   CPI     1               ;CHECK FOR LXI INSTRUCTION
ee03  c2 11 ee      2269   2276         JNZ     TY6             ;JUMP IF NOT LXI
ee06  cd e0 ed      2270   2277         CALL    TY56            ;GET REGISTER
ee09  e6 08         2271   2278         ANI     8               ;CHECK FOR ILLEGAL REGISTER
ee0b  c4 11 f3      2272   2279         CNZ     ERRR            ;REGISTER ERROR
ee0e  7b            2273   2280         MOV     A,E             ;GET OPCODE
ee0f  e6 f7         2274   2281         ANI     0F7H            ;CLEAR BIT IN ERROR
ee11  cd 1d ee      2275   2282 TY6:    CALL    ASTO            ;STORE OBJECT BYTE
ee14  cd 5d f1      2276   2283 TYS6:   CALL    ASBL            ;FETCH OPERAND
ee17  7d            2277   2284         MOV     A,L             ;TO ACCUM
ee18  54            2278   2285         MOV     D,H             ;
ee19  cd 1d ee      2279   2286         CALL    ASTO            ;PUT 2ND BYTE IN MEMORY
ee1c  7a            2280   2287         MOV     A,D             ;
                    2281   2288 ;
                    2282   2289 ;THIS ROUTINE IS USED TO STORE OBJECT CODE PRODUCED BY
                    2283   2290 ;THE ASSEMBLER DURING THE 2ND PASS INTO MEMORY
                    2284   2291 ;
ee1d  2a f1 d0      2285   2292 ASTO:   LHLD    BBUF+2          ;FETCH STORAGE COUNTER
ee20  47            2286   2293         MOV     B,A             ;SAVE OBJECT BYTE
ee21  3a f9 d0      2287   2294         LDA     PASI            ;GET PASS INDICATOR
ee24  fe 02         2288   2295         CPI     2               ;3RD PASS ? (S.T./XREF)
ee26  d0            2289   2296         RNC                     ;SKIP OBJECT STORAGE THEN
ee27  78            2290   2297         MOV     A,B             ;ELSE RESTORE OBJECT BYTE
ee28  77            2291   2298         MOV     M,A             ;AND PUT IT IN MEMORY
ee29  23            2292   2299         INX     H               ;INCREMENT STORAGE POINTER
ee2a  22 f1 d0      2293   2300         SHLD    BBUF+2          ;AND PUT IT BACK
ee2d  2a 0b d1      2294   2301         LHLD    OIND            ;GET OUTPUT ADDRESS
ee30  23            2295   2302         INX     H               ;INCR. TO POINT PAST LAST BYTE
ee31  23            2296   2303         INX     H               ;AGAIN, PUT SPACE BETWEEN BYTES
ee32  cd 93 e3      2297   2304         CALL    BINH+3          ;CONVERT OBJECT BYTE TO ASCII
ee35  22 0b d1      2298   2305         SHLD    OIND            ;AND SAVE UPDATED POINTER
ee38  c9            2299   2306         RET                     ;OBJECT IN MEM & ON LISTING
                    2300   2307 ;
                    2301   2308 ;PROCESS THE END PSEUDO OP
                    2302   2309 ;
ee39  21 f9 d0      2303   2310 LEE39:  LXI     H,PASI          ;POINT TO THE PASS INDICATOR
ee3c  7e            2304   2311         MOV     A,M             ;GET IT
ee3d  fe 01         2305   2312         CPI     1               ;JUST FINISHED 2ND PASS ?
ee3f  ca 4c ee      2306   2313         JZ      LEE4C           ;YES - DONE OR START 3RD PASS
ee42  d2 9d ee      2307   2314         JNC     LEE9D           ;IF 3RD PASS COMPLETE
ee45  cd 16 e2      2308   2315         CALL    CRLF            ;DO CRLF AT START OF EA. PASS
ee48  34            2309   2316         INR     M               ;INCREMENT PASS COUNTER
ee49  c3 ea ea      2310   2317         JMP     LEAEA           ;START NEXT PASS
                    2311   2318 ;
                    2312   2319 ;GET HERE AT END OF 2ND PASS
                    2313   2320 ;
ee4c  3a f4 d0      2314   2321 LEE4C:  LDA     SYMX            ;GET S.T./XREF FLAG
ee4f  fe 46         2315   2322         CPI     'E'+1           ;'S' OR 'X' OPTION REQUESTED ?
ee51  da 60 e0      2316   2323         JC      EORMS           ;NO - ASSY DONE, BACK TO ALS8
ee54  34            2317   2324         INR     M               ;YES - INCREMENT PASS IND.
ee55  cd 16 e2      2318   2325         CALL    CRLF            ;CRLF AFTER EA. PASS
ee58  cd 16 e2      2319   2326 LEE58:  CALL    CRLF            ;AGAIN BEFORE S.T./XREF
ee5b  af            2320   2327         XRA     A               ;GET A ZERO
ee5c  32 f3 d0      2321   2328 LEE5C:  STA     SCNT            ;SAVE AS SYMBOL COUNT
ee5f  2a 32 d1      2322   2329         LHLD    SYMADD          ;GET ADDR OF SYMBOL TABLE
ee62  54            2323   2330         MOV     D,H             ;DUPLICATE IN D,E
ee63  5d            2324   2331         MOV     E,L             ;
                    2325   2332 ;
                    2326   2333 ;TEST NAMES POINTED TO BY D,E AND H,L
                    2327   2334 ;LEAVE NAME WHICH COMES 1ST IN ALPHABETICAL ORDER
                    2328   2335 ;POINTED TO BY D,E
                    2329   2336 ;
ee64  01 04 00      2330   2337 LEE64:  LXI     B,LLAB-1        ;OFFSET TO LAST CHAR OF NAME
ee67  7e            2331   2338         MOV     A,M             ;GET 1ST CHAR OF NAME
ee68  b7            2332   2339         ORA     A               ;ZERO ?
ee69  ca 82 ee      2333   2340         JZ      LEE82           ;REACHED END OF SYMBOL TABLE
ee6c  09            2334   2341         DAD     B               ;POINT TO LAST CHAR
ee6d  eb            2335   2342         XCHG                    ;
ee6e  09            2336   2343         DAD     B               ;POINT TO LAST CHAR
ee6f  eb            2337   2344         XCHG                    ;
ee70  0c            2338   2345         INR     C               ;C = LENGTH OF NAME
ee71  cd 94 e9      2339   2346         CALL    COM1            ;COMPARE NAMES
ee74  23            2340   2347         INX     H               ;POINT BACK AT 1ST CHAR
ee75  13            2341   2348         INX     D               ;POINT BACK AT 1ST CHAR
ee76  01 07 00      2342   2349         LXI     B,LLAB+2        ;LENGTH OF TABLE ENTRY
ee79  da 7e ee      2343   2350         JC      LEE7E           ;ALREADY IN CORRECT ORDER
ee7c  54            2344   2351         MOV     D,H             ;MAKE D,E POINT TO "1ST" NAME
ee7d  5d            2345   2352         MOV     E,L             ;
ee7e  09            2346   2353 LEE7E:  DAD     B               ;H,L POINT TO NEXT NAME
ee7f  c3 64 ee      2347   2354         JMP     LEE64           ;TST NAMES POINTED TO BY DE, HL
                    2348   2355 ;
                    2349   2356 ;GET HERE WHEN PASS COMPLETED THRU SYMBOL TABLE
                    2350   2357 ;D,E POINT TO NAME WHICH COMES "1ST" IN ALPH. ORDER
                    2351   2358 ;NOTE THAT THE SYMBOLS ARE NOT MOVED IN THE TABLE, BUT
                    2352   2359 ;THAT THEIR 1ST CHAR IS REPLACED WITH 0FFH AS THE ARE PRINTED
                    2353   2360 ;
ee82  eb            2354   2361 LEE82:  XCHG                    ;"1ST" NAME TO D,E
ee83  7e            2355   2362         MOV     A,M             ;GET 1ST CHAR OF "LOWEST" NAME
ee84  3d            2356   2363         DCR     A               ;IS IT 0FFH ? (IT WASN'T ZERO)
ee85  fa b7 e0      2357   2364         JM      EOR             ;IF SO, RETURN TO ALS-8
ee88  3c            2358   2365         INR     A               ;ELSE RESTORE
ee89  22 30 d1      2359   2366         SHLD    SYMSV           ;AND SAVE IT'S ADDRESS
ee8c  cd a8 ee      2360   2367         CALL    LEEA8           ;PRINT IT AND IT'S VALUE
ee8f  3a f4 d0      2361   2368         LDA     SYMX            ;GET THE S.T./XREF FLAG
ee92  fe 58         2362   2369         CPI     'X'             ;XREF REQUESTED ?
ee94  ca ea ea      2363   2370         JZ      LEAEA           ;DO THE CROSS REFERENCE SEARCH
ee97  3a f3 d0      2364   2371         LDA     SCNT            ;ELSE GET SYMBOL COUNT
ee9a  3c            2365   2372         INR     A               ;INCREMENT IT
ee9b  fe 04         2366   2373         CPI     4               ;MAX NO. SYMBOLS PRINTED/LINE
ee9d  2a 30 d1      2367   2374 LEE9D:  LHLD    SYMSV           ;GET SYMBOL POINTER
eea0  36 ff         2368   2375         MVI     M,0FFH          ;MAKE SYMBOL LAST
eea2  da 5c ee      2369   2376         JC      LEE5C           ;DO MORE SYMBOLS THIS LINE
eea5  c3 58 ee      2370   2377         JMP     LEE58           ;TO START A NEW LINE
                    2371   2378 ;
                    2372   2379 ;THIS ROUTINE PRINTS NAMES AND THEIR VALUES.
                    2373   2380 ;IT IS USED FOR BOTH THE S.T./XREF AND FOR THE FILES/IODR
                    2374   2381 ;COMMANDS TO LIST THE DIRECTORY CONTENTS
                    2375   2382 ;
eea8  0e 05         2376   2383 LEEA8:  MVI     C,NMLEN         ;CAREFUL IF LLAB <> NMLEN !
eeaa  47            2377   2384 LEEAA:  MOV     B,A             ;SAVE CHAR IN B
eeab  b7            2378   2385         ORA     A               ;SET FLAGS
eeac  c2 b1 ee      2379   2386         JNZ     LEEB1           ;IF CHAR IS NOT HEX 00
eeaf  06 20         2380   2387         MVI     B,' '           ;PRINT SPACE TO PAD SHORT NAMES
eeb1  cd cf d0      2381   2388 LEEB1:  CALL    OUT8            ;PRINT IT
eeb4  23            2382   2389         INX     H               ;INCREMENT POINTER
eeb5  7e            2383   2390         MOV     A,M             ;GET CHAR TO PRINT
eeb6  0d            2384   2391         DCR     C               ;DCR COUNT OF CHARS LEFT
eeb7  c2 aa ee      2385   2392         JNZ     LEEAA           ;DO REMAINING CHARS
eeba  0e 03         2386   2393         MVI     C,3             ;NO OF SPACES TO FOLLOW NAME
eebc  cd 61 e3      2387   2394         CALL    BLKO            ;PRINT THEM
eebf  56            2388   2395         MOV     D,M             ;GET SYMBOL VALUE IN D,E
eec0  23            2389   2396         INX     H               ;2ND BYTE
eec1  5e            2390   2397         MOV     E,M             ;IN D,E
eec2  e5            2391   2398         PUSH    H               ;SAVE POINTER
eec3  cd 5c e5      2392   2399         CALL    ADOUT           ;PRINT VALUE
eec6  d1            2393   2400         POP     D               ;RESTORE POINTER TO D,E
eec7  0e 05         2394   2401         MVI     C,5             ;NO OF SPACES AFTER VALUE
eec9  c3 61 e3      2395   2402         JMP     BLKO            ;PRINT THEM & RETURN
                    2396   2403 ;
                    2397   2404 ;ROUTINE TO SCAN THROUGH SPACES UNTIL NON-BLANK CHAR FOUND
                    2398   2405 ;
eecc  2a 01 d1      2399   2406 SBLK:   LHLD    PNTR            ;GET POINTER
eecf  7e            2400   2407 SBL1:   MOV     A,M             ;GET CHAR AT POINTER
eed0  fe 20         2401   2408         CPI     ' '             ;SPACE ?
eed2  c0            2402   2409         RNZ                     ;NO - DONE
eed3  23            2403   2410 SBL2:   INX     H               ;YES - INCREMENT POINTER
eed4  22 01 d1      2404   2411         SHLD    PNTR            ;AND UPDATE IT
eed7  c3 cf ee      2405   2412         JMP     SBL1            ;THEN CHECK NEW CHAR
                    2406   2413 ;
                    2407   2414 ;THIS ROUTINE IS USED TO CHECK THE CONDITION CODE
                    2408   2415 ;MNEMONICS FOR CONDITIONAL JUMPS, CALLS AND RETURNS.
                    2409   2416 ;
eeda  21 e0 d0      2410   2417 COND:   LXI     H,ABUF+1        ;POINT TO 2ND CHAR
eedd  22 d4 d0      2411   2418         SHLD    ADDS            ;SAVE IT'S ADDR.
eee0  06 02         2412   2419         MVI     B,2             ;MAX. LENGTH OF CONDITION
eee2  c3 22 f0      2413   2420         JMP     COPC            ;TO LOOKUP IN TABLE
                    2414   2421 ;
                    2415   2422 ;HERE IS THE ASSEMBLER OPCODE TABLE
                    2416   2423 ;
                    2417   2424 ;PSEUDO OPS WITH LENGTH OF 4 (OR PADDED TO 4 WITH HEX 0'S)
                    2418   2425 ;COME FIRST
                    2419   2426 ;
eee5  4f 52 47      2420   2427 OTAB:   DB      'ORG'
eee8  00 00         2421   2428         DW      0
eeea  45 51 55      2422   2429         DB      'EQU'
eeed  00 01         2423   2430         DW      0100H
eeef  44 42         2424   2431         DB      'DB'
eef1  00 00         2425   2432         DW      0
eef3  ff            2426   2433         DB      0FFH
eef4  44 53         2427   2434         DB      'DS'
eef6  00 00         2428   2435         DW      0
eef8  02            2429   2436         DB      2
eef9  44 57         2430   2437         DB      'DW'
eefb  00 00         2431   2438         DW      0
eefd  03            2432   2439         DB      3
eefe  45 4e 44      2433   2440         DB      'END'
ef01  00 04         2434   2441         DW      0400H
ef03  43 4f 4d      2435   2442         DB      'COM'
ef06  00 05         2436   2443         DW      0500H
ef08  4c 53 54      2437   2444         DB      'LST'
ef0b  00 06         2438   2445         DW      0600H
ef0d  4e 4c 53 54   2439   2446         DB      'NLST'
ef11  07            2440   2447         DB      7
ef12  41 53 43      2441   2448         DB      'ASC'
ef15  00 08         2442   2449         DW      0800H
ef17  00            2443   2450         DB      0
                    2444   2451 ;
                    2445   2452 ;THESE ARE FOLLOWED BY 3 CHAR OPCODES (OR 2 CHAR PADDED TO 3)
                    2446   2453 ;
ef18  48 4c 54      2447   2454         DB      'HLT'
ef1b  76            2448   2455         DB      118
ef1c  52 4c 43      2449   2456         DB      'RLC'
ef1f  07            2450   2457         DB      7
ef20  52 52 43      2451   2458         DB      'RRC'
ef23  0f            2452   2459         DB      15
ef24  52 41 4c      2453   2460         DB      'RAL'
ef27  17            2454   2461         DB      23
ef28  52 41 52      2455   2462         DB      'RAR'
ef2b  1f            2456   2463         DB      31
ef2c  52 45 54      2457   2464         DB      'RET'
ef2f  c9            2458   2465         DB      201
ef30  43 4d 41      2459   2466         DB      'CMA'
ef33  2f            2460   2467         DB      47
ef34  53 54 43      2461   2468         DB      'STC'
ef37  37            2462   2469         DB      55
ef38  44 41 41      2463   2470         DB      'DAA'
ef3b  27            2464   2471         DB      39
ef3c  43 4d 43      2465   2472         DB      'CMC'
ef3f  3f            2466   2473         DB      63
ef40  45 49         2467   2474         DB      'EI'
ef42  00 fb         2468   2475         DW      0FB00H
ef44  44 49         2469   2476         DB      'DI'
ef46  00 f3         2470   2477         DW      0F300H
ef48  4e 4f 50      2471   2478         DB      'NOP'
ef4b  00 00         2472   2479         DW      0
ef4d  58 43 48 47   2473   2480         DB      'XCHG'
ef51  eb            2474   2481         DB      235
ef52  58 54 48 4c   2475   2482         DB      'XTHL'
ef56  e3            2476   2483         DB      227
ef57  53 50 48 4c   2477   2484         DB      'SPHL'
ef5b  f9            2478   2485         DB      249
ef5c  50 43 48 4c   2479   2486         DB      'PCHL'
ef60  e9 00         2480   2487         DW      00E9H
ef62  53 54 41 58   2481   2488         DB      'STAX'
ef66  02            2482   2489         DB      2
ef67  4c 44 41 58   2483   2490         DB      'LDAX'
ef6b  0a 00         2484   2491         DW      000AH
ef6d  50 55 53 48   2485   2492         DB      'PUSH'
ef71  c5            2486   2493         DB      197
ef72  50 4f 50      2487   2494         DB      'POP'
ef75  00 c1         2488   2495         DW      0C100H
ef77  49 4e 58      2489   2496         DB      'INX'
ef7a  00 03         2490   2497         DW      0300H
ef7c  44 43 58      2491   2498         DB      'DCX'
ef7f  00 0b         2492   2499         DW      0B00H
ef81  44 41 44      2493   2500         DB      'DAD'
ef84  00 09         2494   2501         DW      0900H
ef86  00            2495   2502         DB      0
ef87  49 4e 52      2496   2503         DB      'INR'
ef8a  04            2497   2504         DB      4
ef8b  44 43 52      2498   2505         DB      'DCR'
ef8e  05            2499   2506         DB      5
ef8f  4d 4f 56      2500   2507         DB      'MOV'
ef92  40            2501   2508         DB      64
ef93  41 44 44      2502   2509         DB      'ADD'
ef96  80            2503   2510         DB      128
ef97  41 44 43      2504   2511         DB      'ADC'
ef9a  88            2505   2512         DB      136
ef9b  53 55 42      2506   2513         DB      'SUB'
ef9e  90            2507   2514         DB      144
ef9f  53 42 42      2508   2515         DB      'SBB'
efa2  98            2509   2516         DB      152
efa3  41 4e 41      2510   2517         DB      'ANA'
efa6  a0            2511   2518         DB      160
efa7  58 52 41      2512   2519         DB      'XRA'
efaa  a8            2513   2520         DB      168
efab  4f 52 41      2514   2521         DB      'ORA'
efae  b0            2515   2522         DB      176
efaf  43 4d 50      2516   2523         DB      'CMP'
efb2  b8            2517   2524         DB      184
efb3  52 53 54      2518   2525         DB      'RST'
efb6  c7 00         2519   2526         DW      00C7H
efb8  41 44 49      2520   2527         DB      'ADI'
efbb  c6            2521   2528         DB      198
efbc  41 43 49      2522   2529         DB      'ACI'
efbf  ce            2523   2530         DB      206
efc0  53 55 49      2524   2531         DB      'SUI'
efc3  d6            2525   2532         DB      214
efc4  53 42 49      2526   2533         DB      'SBI'
efc7  de            2527   2534         DB      222
efc8  41 4e 49      2528   2535         DB      'ANI'
efcb  e6            2529   2536         DB      230
efcc  58 52 49      2530   2537         DB      'XRI'
efcf  ee            2531   2538         DB      238
efd0  4f 52 49      2532   2539         DB      'ORI'
efd3  f6            2533   2540         DB      246
efd4  43 50 49      2534   2541         DB      'CPI'
efd7  fe            2535   2542         DB      254
efd8  49 4e         2536   2543         DB      'IN'
efda  00 db         2537   2544         DW      0DB00H
efdc  4f 55 54      2538   2545         DB      'OUT'
efdf  d3            2539   2546         DB      211
efe0  4d 56 49      2540   2547         DB      'MVI'
efe3  06 00         2541   2548         DW      0006H
                    2542   2549 ;
                    2543   2550 ;WHICH ARE FOLLOWED BY 4 CHAR OPCODES (OR LESS PADDED TO 4)
                    2544   2551 ;
efe5  4a 4d 50      2545   2552         DB      'JMP'
efe8  00 c3         2546   2553         DW      0C300H
efea  43 41 4c 4c   2547   2554         DB      'CALL'
efee  cd            2548   2555         DB      205
efef  4c 58 49      2549   2556         DB      'LXI'
eff2  00 01         2550   2557         DW      0100H
eff4  4c 44 41      2551   2558         DB      'LDA'
eff7  00 3a         2552   2559         DW      3A00H
eff9  53 54 41      2553   2560         DB      'STA'
effc  00 32         2554   2561         DW      3200H
effe  53 48 4c 44   2555   2562         DB      'SHLD'
f002  22            2556   2563         DB      34
f003  4c 48 4c 44   2557   2564         DB      'LHLD'
f007  2a 00         2558   2565         DW      002AH
                    2559   2566 ;
                    2560   2567 ;WHICH IS FINALLY FOLLOWED BY THE 2 CHAR CNDX CODE TABLE
                    2561   2568 ;
f009  4e 5a         2562   2569         DB      'NZ'
f00b  00            2563   2570         DB      0
f00c  5a            2564   2571         DB      'Z'
f00d  00 08         2565   2572         DW      0800H
f00f  4e 43         2566   2573         DB      'NC'
f011  10            2567   2574         DB      16
f012  43            2568   2575         DB      'C'
f013  00 18         2569   2576         DW      1800H
f015  50 4f         2570   2577         DB      'PO'
f017  20            2571   2578         DB      32
f018  50 45         2572   2579         DB      'PE'
f01a  28            2573   2580         DB      40
f01b  50            2574   2581         DB      'P'
f01c  00 30         2575   2582         DW      3000H
f01e  4d            2576   2583         DB      'M'
f01f  00 38         2577   2584         DW      3800H
f021  00            2578   2585         DB      0
                    2579   2586 ;
                    2580   2587 ;THIS ROUTINE IS USED TO CHECK A GIVEN OPCODE
                    2581   2588 ;AGAINST THE LEGAL OPCODES IN THE OPCODE TABLE
                    2582   2589 ;
f022  2a d4 d0      2583   2590 COPC:   LHLD    ADDS            ;GET POINTER
f025  1a            2584   2591         LDAX    D               ;FETCH CHARACTER
f026  b7            2585   2592         ORA     A               ;SET FLAGS
f027  ca 34 f0      2586   2593         JZ      COP1            ;END OF TABLE
f02a  48            2587   2594         MOV     C,B             ;LENGTH OF STRING
f02b  cd 57 e2      2588   2595         CALL    SEAR            ;SEARCH THE TABLE
f02e  1a            2589   2596         LDAX    D               ;
f02f  c8            2590   2597         RZ                      ;RETURN IF MATCH
f030  13            2591   2598         INX     D               ;NEXT STRING
f031  c3 22 f0      2592   2599         JMP     COPC            ;CONTINUE SEARCH
f034  3c            2593   2600 COP1:   INR     A               ;CLEAR ZERO FLAG
f035  13            2594   2601         INX     D               ;INCREMENT ADDRESS
f036  c9            2595   2602         RET                     ;NO MATCH
                    2596   2603 ;
                    2597   2604 ;THIS ROUTINE CHECKS THE LEGAL OPCODES IN BOTH PASS 1
                    2598   2605 ;AND PASS 2.  IN PASS 1 THE PROGRAM COUNTER IS INCREMENTED
                    2599   2606 ;BY THE CORRECT NUMBER OF BYTES. AN ADDRESS IS
                    2600   2607 ;ALSO SET SO THAT AN INDEXED JUMP CAN BE MADE TO
                    2601   2608 ;PROCESS THE OPCODE FOR PASS 2.
                    2602   2609 ;
f037  21 df d0      2603   2610 OPCD:   LXI     H,ABUF          ;GET ADDRESS
f03a  22 d4 d0      2604   2611         SHLD    ADDS            ;SAVE IT
f03d  11 e5 ee      2605   2612         LXI     D,OTAB          ;OPCODE TABLE ADDR.
f040  06 04         2606   2613         MVI     B,4             ;LENGTH OF PSEUDO-OP ENTRIES
f042  cd 22 f0      2607   2614         CALL    COPC            ;LOOK IT UP IN TABLE
f045  ca e6 f0      2608   2615         JZ      PSEU            ;PSEUDO-OP IF FOUND
f048  05            2609   2616         DCR     B               ;ELSE TRY 3-CHAR OPCODES
f049  cd 22 f0      2610   2617         CALL    COPC            ;LOOK IT UP
f04c  ca 53 f0      2611   2618         JZ      OP1             ;IF FOUND IN THIS GROUP
f04f  04            2612   2619         INR     B               ;THEN TRY FOUR CHAR OPCODES
f050  cd 22 f0      2613   2620         CALL    COPC            ;LOOK IT UP
f053  21 1d ee      2614   2621 OP1:    LXI     H,ASTO          ;TYPE 1 INSTRUCTIONS
f056  0e 01         2615   2622 OP2:    MVI     C,1             ;1 BYTE INST.
f058  ca b3 f0      2616   2623         JZ      OCNT            ;IF FOUND
                    2617   2624 ;
f05b  cd 22 f0      2618   2625 OPC2:   CALL    COPC            ;CHECK FOR STAX, LDAX
f05e  21 64 ed      2619   2626         LXI     H,TYP2          ;
f061  ca 56 f0      2620   2627         JZ      OP2             ;
f064  cd 22 f0      2621   2628         CALL    COPC            ;CHK FOR PUSH, POP, INX, DCX, DAD
                    2622   2629 ;
f067  21 77 ed      2623   2630         LXI     H,TYP3          ;
f06a  ca 56 f0      2624   2631         JZ      OP2             ;
f06d  05            2625   2632         DCR     B               ;3 CHAR OPCODES
f06e  cd 22 f0      2626   2633         CALL    COPC            ;ACC INST: INR, DCR, MOV, RST
                    2627   2634 ;
f071  21 96 ed      2628   2635         LXI     H,TYP4          ;
f074  ca 56 f0      2629   2636         JZ      OP2             ;
                    2630   2637 ;
f077  cd 22 f0      2631   2638 OPC3:   CALL    COPC            ;IMMEDIATE INSTRUCTIONS
f07a  21 cb ed      2632   2639         LXI     H,TYP5
f07d  0e 02         2633   2640         MVI     C,2             ;2 BYTE INSTRUCTIONS
f07f  ca b3 f0      2634   2641         JZ      OCNT            ;
f082  04            2635   2642         INR     B               ;4 CHAR OPCODES
f083  cd 22 f0      2636   2643         CALL    COPC            ;JMP, CALL, LXI, LDA, STA,
                    2637   2644 ;                               ;LHLD, SHLD
f086  ca ae f0      2638   2645         JZ      OP4             ;
f089  cd da ee      2639   2646         CALL    COND            ;CONDITIONAL INST.
f08c  c2 d8 f0      2640   2647         JNZ     OERR            ;ILLEGAL OPCODE
f08f  c6 c0         2641   2648         ADI     192             ;ADD BASE VALUE TO RETURN
f091  57            2642   2649         MOV     D,A             ;
f092  06 03         2643   2650         MVI     B,3             ;3 CHARACTER OPCODES
f094  3a df d0      2644   2651         LDA     ABUF            ;FETCH 1ST CHAR
f097  4f            2645   2652         MOV     C,A             ;SAVE IT
f098  fe 52         2646   2653         CPI     'R'             ;CONDITIONAL RETURN
f09a  7a            2647   2654         MOV     A,D             ;
f09b  ca 53 f0      2648   2655         JZ      OP1             ;
f09e  79            2649   2656         MOV     A,C             ;
f09f  14            2650   2657         INR     D               ;FORM CONDITIONAL JUMP
f0a0  14            2651   2658         INR     D               ;
f0a1  fe 4a         2652   2659         CPI     'J'             ;CONDITIONAL JUMP
f0a3  ca ad f0      2653   2660         JZ      OPAD            ;
f0a6  fe 43         2654   2661         CPI     'C'             ;CONDITIONAL CALL
f0a8  c2 d8 f0      2655   2662         JNZ     OERR            ;ILLEGAL OPCODE
f0ab  14            2656   2663         INR     D               ;FORM CONDITIONAL CALL
f0ac  14            2657   2664         INR     D               ;
f0ad  7a            2658   2665 OPAD:   MOV     A,D             ;GET OPCODE
f0ae  21 01 ee      2659   2666 OP4:    LXI     H,TYP6          ;
f0b1  0e 03         2660   2667 OP5:    MVI     C,3             ;3 BYTE INSTRUCTIONS
f0b3  32 09 d1      2661   2668 OCNT:   STA     TEMP            ;SAVE OPCODE
                    2662   2669 ;
                    2663   2670 ;CHECK FOR OPCODE ONLY CONTAINING CORRECT NO. OF CHARS.
                    2664   2671 ;THUS ADDQ, SAY, WOULD GIVE AN ERROR
                    2665   2672 ;
f0b6  3e df         2666   2673         MVI     A,ABUF AND 0FFH ;LOAD BUFFER ADDRESS
f0b8  80            2667   2674         ADD     B               ;LENGTH OF OPCODE
f0b9  5f            2668   2675         MOV     E,A             ;
f0ba  3e d0         2669   2676         MVI     A,ABUF/256      ;
f0bc  ce 00         2670   2677         ACI     0               ;GET HIGH ORDER ADDRESS
f0be  57            2671   2678         MOV     D,A             ;
f0bf  1a            2672   2679         LDAX    D               ;FETCH CHAR AFTER OPCODE
f0c0  b7            2673   2680         ORA     A               ;IT SHOULD BE ZERO
f0c1  c2 d8 f0      2674   2681         JNZ     OERR            ;OPCODE ERROR
f0c4  3a f9 d0      2675   2682         LDA     PASI            ;FETCH PASS INDICATOR
f0c7  06 00         2676   2683 OCN1:   MVI     B,0             ;
f0c9  eb            2677   2684         XCHG                    ;
f0ca  2a f7 d0      2678   2685 OCN2:   LHLD    ASPC            ;FETCH PROGRAM COUNTER
f0cd  09            2679   2686         DAD     B               ;ADD IN BYTE COUNT
f0ce  22 f7 d0      2680   2687         SHLD    ASPC            ;STORE PC
f0d1  b7            2681   2688         ORA     A               ;WHICH PASS
f0d2  c8            2682   2689         RZ                      ;RETURN IF PASS 1
f0d3  3a 09 d1      2683   2690         LDA     TEMP            ;FETCH OPCODE
f0d6  eb            2684   2691         XCHG                    ;
f0d7  e9            2685   2692         PCHL                    ;
                    2686   2693 ;
f0d8  21 3c f3      2687   2694 OERR:   LXI     H,ERRO          ;SET ERROR ADDRESS
f0db  0e 03         2688   2695 LF0DB:  MVI     C,3             ;LEAVE 3 BYTES FOR PATCH
f0dd  c3 c4 f0      2689   2696         JMP     OCN1-3          ;
                    2690   2697 ;
f0e0  21 51 f3      2691   2698 LF0E0:  LXI     H,ERRL
f0e3  c3 db f0      2692   2699         JMP     LF0DB
                    2693   2700 ;
f0e6  21 e3 d0      2694   2701 PSEU:   LXI     H,ABUF+4        ;SET BUFFER ADDRESS
f0e9  7e            2695   2702         MOV     A,M             ;FETCH CHAR AFTER OPCODE
f0ea  b7            2696   2703         ORA     A               ;IT SHOULD BE ZERO
f0eb  c2 d8 f0      2697   2704         JNZ     OERR            ;IF NOT
f0ee  3a f9 d0      2698   2705         LDA     PASI            ;GET PASS INDICATOR
f0f1  b7            2699   2706         ORA     A               ;PASS 1 ?
f0f2  ca c2 eb      2700   2707         JZ      PSU1            ;YES - JUMP
f0f5  c3 71 ec      2701   2708         JMP     PSU2            ;NO - DO 2ND PASS OPERATIONS
                    2702   2709 ;
                    2703   2710 ;THIS ROUTINE IS USED TO PROCESS LABELS.
                    2704   2711 ;IT CHECKS TO SEE IF A LABEL IS IN THE SYMBOL TABLE
                    2705   2712 ;OR NOT.  ON RETURN, Z=1 INDICATES A MATCH WAS FOUND
                    2706   2713 ;AND H,L CONTAIN THE VALUE ASSOCIATED WITH THE LABEL.
                    2707   2714 ;THE REGISTER NAMES A, B, C, D, E, H, L, AND M ARE
                    2708   2715 ;PRE-DEFINED AND NEED NOT BE ENTERED BY THE USER.
                    2709   2716 ;ON RETURN, C=1 INDICATES A LABEL ERROR.
                    2710   2717 ;
f0f8  fe 41         2711   2718 SLAB:   CPI     'A'             ;CHECK FOR LEGAL CHAR
f0fa  d8            2712   2719         RC                      ;ILLEGAL CHAR
f0fb  fe 5b         2713   2720         CPI     'Z'+1           ;CHECK FOR LEAGAL CHAR
f0fd  3f            2714   2721         CMC                     ;SETTING CARRY FOR PROPER RET
f0fe  d8            2715   2722         RC                      ;ILLEGAL CHAR
f0ff  cd 3e f1      2716   2723         CALL    ALPS            ;PLACE SYMBOL IN ABUF
f102  21 df d0      2717   2724         LXI     H,ABUF          ;POINT TO SYMBOL
f105  3a f9 d0      2718   2725         LDA     PASI            ;GET PASS INDICATOR
f108  fe 02         2719   2726         CPI     2               ;DOING XREF/S.T. PASS ?
f10a  3c            2720   2727         INR     A               ;BUMP PASS INDICATOR IN ACCUM.
f10b  d0            2721   2728         RNC                     ;RETURN IF ON XREF/S.T. PASS
f10c  22 d4 d0      2722   2729         SHLD    ADDS            ;SAVE ADDRESS OF SYMBOL
f10f  05            2723   2730         DCR     B               ;CHECK IF ONLY 1 CHAR SYMBOL
f110  c2 23 f1      2724   2731         JNZ     SLA1            ;LOOK THEM UP IN REG. TABLE
f113  04            2725   2732         INR     B               ;SET B=1
f114  11 2d f1      2726   2733         LXI     D,RTAB          ;POINT TO REGISTER TABLE
f117  cd 22 f0      2727   2734         CALL    COPC            ;LOOK FOR MATCH
f11a  c2 23 f1      2728   2735         JNZ     SLA1            ;NOT FOUND, TRY SYMBOL TABLE
f11d  6f            2729   2736         MOV     L,A             ;FOUND, VALUE TO L
f11e  26 00         2730   2737         MVI     H,0             ;AND MAKE H ZERO
f120  37            2731   2738         STC                     ;SET CARRY
f121  3f            2732   2739         CMC                     ;COMPLEMENT CARRY
f122  c9            2733   2740         RET                     ;DONE
f123  2a 32 d1      2734   2741 SLA1:   LHLD    SYMADD          ;GET SYMBOL TABLE ADDR
f126  eb            2735   2742         XCHG                    ;TO D,E
f127  06 05         2736   2743         MVI     B,LLAB          ;LENGTH OF LABELS
f129  cd 28 e2      2737   2744         CALL    COMS            ;CHECK TABLE
f12c  c9            2738   2745         RET                     ;WITH FLAGS SET
                    2739   2746 ;
                    2740   2747 ;HERE IS THE INTERNAL REGISTER TABLE
                    2741   2748 ;
f12d  41            2742   2749 RTAB:   DB      'A'
f12e  07            2743   2750         DB      7
f12f  42            2744   2751         DB      'B'
f130  00            2745   2752         DB      0
f131  43            2746   2753         DB      'C'
f132  01            2747   2754         DB      1
f133  44            2748   2755         DB      'D'
f134  02            2749   2756         DB      2
f135  45            2750   2757         DB      'E'
f136  03            2751   2758         DB      3
f137  48            2752   2759         DB      'H'
f138  04            2753   2760         DB      4
f139  4c            2754   2761         DB      'L'
f13a  05            2755   2762         DB      5
f13b  4d            2756   2763         DB      'M'
f13c  06            2757   2764         DB      6
f13d  00            2758   2765         DB      0
                    2759   2766 ;
                    2760   2767 ;THIS ROUTINE SCANS THE INPUT LINE AND PLACES THE
                    2761   2768 ;OPCODES AND LABELS IN THE ABUF BUFFER.  THE SCAN TERMINATES
                    2762   2769 ;WHEN A NON ALPHANUMERIC CHARACTER (A-Z, 0-9) IS FOUND.
                    2763   2770 ;
f13e  06 00         2764   2771 ALPS:   MVI     B,0             ;SET COUNT
f140  12            2765   2772 ALP1:   STAX    D               ;STORE CHAR IN BUFFER
f141  04            2766   2773         INR     B               ;INCREMENT COUNT
f142  78            2767   2774         MOV     A,B             ;FETCH COUNT
f143  fe 0f         2768   2775         CPI     15              ;MAX BUFFER SIZE
f145  d0            2769   2776         RNC                     ;RETURN IF BUFFER FILLED
f146  13            2770   2777         INX     D               ;INCREMENT ABUF POINTER
f147  23            2771   2778         INX     H               ;INCREMENT INPUT LINE POINTER
f148  22 01 d1      2772   2779         SHLD    PNTR            ;SAVE INPUT POINTER
f14b  7e            2773   2780         MOV     A,M             ;FETCH CHARACTER
f14c  fe 30         2774   2781         CPI     '0'             ;CHECK FOR LEGAL CHAR
f14e  d8            2775   2782         RC                      ;ILLEGAL CHAR
f14f  fe 3a         2776   2783         CPI     '9'+1           ;AGAIN
f151  da 40 f1      2777   2784         JC      ALP1            ;NUMERIC = O.K.
f154  fe 41         2778   2785 LF154:  CPI     'A'             ;TEST FOR LETTER
f156  d8            2779   2786         RC                      ;ILLEGAL CHAR
f157  fe 5b         2780   2787         CPI     'Z'+1           ;
f159  da 40 f1      2781   2788         JC      ALP1            ;VALID LETTER
f15c  c9            2782   2789         RET                     ;W/CARRY SET, ILLEGAL CHAR
                    2783   2790 ;
                    2784   2791 ;THIS ROUTINE IS USED TO SCAN THE INPUT LINE AND DETERMINE
                    2785   2792 ;THE VALUE OF AN OPERAND FIELD.  ON RETURN, VALUE IS IN H,L.
                    2786   2793 ;
f15d  cd cc ee      2787   2794 ASBL:   CALL    SBLK            ;GET THE FIRST ARGUMENT
f160  2a 01 d1      2788   2795 ASCN:   LHLD    PNTR            ;FETCH SCAN POINTER
f163  7e            2789   2796         MOV     A,M             ;FETCH CHARACTER
f164  21 00 00      2790   2797         LXI     H,0             ;GET A ZERO
f167  22 05 d1      2791   2798         SHLD    OPRD            ;INITIALIZE OPERAND
f16a  2c            2792   2799         INR     L               ;L = 1 ==> BECOMES OPRI
f16b  67            2793   2800         MOV     H,A             ;CHAR TO H, BECOMES GTLT
f16c  22 07 d1      2794   2801         SHLD    OPRI            ;SAVE OPRI AND GTLT
f16f  2a 01 d1      2795   2802 NXT1:   LHLD    PNTR            ;GET SCAN POINTER
f172  2b            2796   2803         DCX     H               ;INIT. FOR LOOP BELOW
f173  cd 6a e2      2797   2804         CALL    ZBUF            ;CLEAR OUT ABUFF
f176  32 04 d1      2798   2805         STA     SIGN            ;ZERO SIGN INDICATOR
f179  23            2799   2806 NXT2:   INX     H               ;INCREMENT POINTER
f17a  7e            2800   2807         MOV     A,M             ;GET CHAR
f17b  fe 3c         2801   2808         CPI     '<'             ;HIGH ORDER BYTE SIGN ?
f17d  ca 79 f1      2802   2809         JZ      NXT2            ;ALREADY TAKEN CARE OF (GTLT)
f180  fe 3e         2803   2810         CPI     '>'             ;LOW ORDER BYTE SIGN ?
f182  ca 79 f1      2804   2811         JZ      NXT2            ;ALREADY TAKEN CARE OF (GTLT)
f185  fe 21         2805   2812         CPI     ' '+1           ;CAR. RETURN OR SPACE ?
f187  da c8 f2      2806   2813         JC      SEND            ;END OF OPERAND FIELD THEN
f18a  fe 2c         2807   2814         CPI     ','             ;FIELD SEPARATOR ?
f18c  ca c8 f2      2808   2815         JZ      SEND            ;ALSO END OF FIELD
                    2809   2816 ;
                    2810   2817 ;CHECK FOR OPERATORS
                    2811   2818 ;
f18f  fe 2b         2812   2819         CPI     '+'             ;CHECK FOR PLUS
f191  ca a6 f1      2813   2820         JZ      LF1A6           ;STORE 0 AS SIGN
f194  04            2814   2821         INR     B               ;MAKE B 01
f195  fe 2d         2815   2822         CPI     '-'             ;MINUS SIGN ?
f197  ca a6 f1      2816   2823         JZ      LF1A6           ;SAVE NON-ZERO SIGN
f19a  04            2817   2824         INR     B               ;MAKE B 02
f19b  fe 2a         2818   2825         CPI     '*'             ;CHECK FOR MULTIPLY
f19d  ca a6 f1      2819   2826         JZ      LF1A6           ;STORE B AS 02
f1a0  04            2820   2827         INR     B               ;MAKE B 03
f1a1  fe 2f         2821   2828         CPI     '/'             ;CHECK FOR DIVIDE
f1a3  c2 ba f1      2822   2829         JNZ     ASC2            ;IF NOT SIGN, CHK FOR OPERAND
f1a6  78            2823   2830 LF1A6:  MOV     A,B             ;MOVE B TO A
f1a7  32 04 d1      2824   2831         STA     SIGN            ;SET SIGN BYTE
f1aa  3a 07 d1      2825   2832 ASC1:   LDA     OPRI            ;FETCH OPERAND INDICATOR
f1ad  fe 02         2826   2833         CPI     2               ;CHECK FOR 2 OPERATORS TOGETHER
f1af  ca 1a f3      2827   2834         JZ      ERRS            ;SYNTAX ERROR
f1b2  3e 02         2828   2835         MVI     A,2             ;NOW SET UP OPRI AS 2
f1b4  32 07 d1      2829   2836         STA     OPRI            ;AND STORE IT
f1b7  c3 79 f1      2830   2837         JMP     NXT2            ;ANOTHER WILL NOT BE ALLOWED
                    2831   2838 ;
                    2832   2839 ;CHECK FOR OPERANDS
                    2833   2840 ;
f1ba  4f            2834   2841 ASC2:   MOV     C,A             ;SAVE CHAR
f1bb  3a 07 d1      2835   2842         LDA     OPRI            ;GET OPERATOR
f1be  b7            2836   2843         ORA     A               ;CHECK FOR TWO OPERANDS
f1bf  ca 1a f3      2837   2844         JZ      ERRS            ;TWO IN A ROW NOT ALLOWED
f1c2  79            2838   2845         MOV     A,C             ;RESTORE CHAR
f1c3  fe 24         2839   2846         CPI     '$'             ;PGM. COUNTER ?
f1c5  ca c3 ec      2840   2847         JZ      LECC3           ;GET IT & CONTINUE
                    2841   2848 ;
                    2842   2849 ;CHECK FOR ASCII CHARACTERS
                    2843   2850 ;
f1c8  fe 27         2844   2851 ASC3:   CPI     27H             ;QUOTE MARK ?
f1ca  c2 f4 f1      2845   2852         JNZ     ASC5            ;NO - MUST BE SOMETHING ELSE
f1cd  11 00 00      2846   2853         LXI     D,0             ;INITIALIZE CHAR. VALUE
f1d0  0e 03         2847   2854         MVI     C,3             ;MAX CHAR COUNT + 1
f1d2  23            2848   2855 ASC4:   INX     H               ;POINT TO NEXT CHAR
f1d3  22 01 d1      2849   2856         SHLD    PNTR            ;SAVE POINTER
f1d6  7e            2850   2857         MOV     A,M             ;GET CHAR
f1d7  fe 0d         2851   2858         CPI     0DH             ;CARRIAGE RETURN ?
f1d9  ca 37 f3      2852   2859         JZ      ERRA            ;ARGUMENT ERROR THEN
f1dc  fe 27         2853   2860         CPI     27H             ;2ND QUOTE MARK ?
f1de  c2 eb f1      2854   2861         JNZ     SSTR            ;NO - PROCESS CHAR
f1e1  23            2855   2862         INX     H               ;POINT PAST 2ND QUOTE
f1e2  22 01 d1      2856   2863         SHLD    PNTR            ;UPDATE POINTER
f1e5  7e            2857   2864         MOV     A,M             ;FETCH NEXT CHAR
f1e6  fe 27         2858   2865         CPI     27H             ;CHECK FOR TWO IN A ROW
f1e8  c2 05 f2      2859   2866         JNZ     AVAL+1          ;WAS TERMINAL QUOTE
f1eb  0d            2860   2867 SSTR:   DCR     C               ;CHECK COUNT
f1ec  ca 37 f3      2861   2868         JZ      ERRA            ;TOO MANY CHARS
f1ef  53            2862   2869         MOV     D,E             ;1ST CHAR (IF ANY) IN D
f1f0  5f            2863   2870         MOV     E,A             ;THIS CHAR IN E
f1f1  c3 d2 f1      2864   2871         JMP     ASC4            ;GET NEXT CHAR
f1f4  fe 30         2865   2872 ASC5:   CPI     '0'             ;SEE IF NUMERIC
f1f6  da 37 f3      2866   2873         JC      ERRA            ;NO CHARS < 30H LEGAL
f1f9  fe 3a         2867   2874         CPI     '9'+1           ;TRY HIGH END
f1fb  d2 74 f2      2868   2875         JNC     ALAB            ;ALPHABETIC - TRY LABEL
f1fe  cd eb f2      2869   2876         CALL    NUMS            ;NUMERIC - CONVERT
f201  da 37 f3      2870   2877         JC      ERRA            ;ARGUMENT ERROR
f204  eb            2871   2878 AVAL:   XCHG                    ;OPERAND VALUE IN H,L
f205  2a 05 d1      2872   2879         LHLD    OPRD            ;FETCH OPERAND VALUE
f208  af            2873   2880         XRA     A               ;GET A ZERO
f209  32 07 d1      2874   2881         STA     OPRI            ;AND CLEAR OPERAND INDICATOR
f20c  3a 04 d1      2875   2882         LDA     SIGN            ;GET SIGN
f20f  fe 01         2876   2883         CPI     1               ;MINUS SIGN ?
f211  ca 1e f2      2877   2884         JZ      ASUB            ;THEN DO A SUBTACTION
f214  d2 27 f2      2878   2885         JNC     LF227           ;MULTIPLY OR DIVIDE
f217  19            2879   2886         DAD     D               ;ADD NEW OPERAND DE TO OLD HL
f218  22 05 d1      2880   2887 ASC7:   SHLD    OPRD            ;AND UPDATE THE RESULT
f21b  c3 6f f1      2881   2888         JMP     NXT1            ;NOW SEE IF MORE
f21e  7d            2882   2889 ASUB:   MOV     A,L             ;GET OLD OPRAND IN H,L
f21f  93            2883   2890         SUB     E               ;SUBTRACT NEW OPRAND IN D,E
f220  6f            2884   2891         MOV     L,A             ;RESTORE RESULT TO H,L
f221  7c            2885   2892         MOV     A,H             ;NOW DO HIGH ORDER BYTE
f222  9a            2886   2893         SBB     D               ;
f223  67            2887   2894         MOV     H,A             ;PUT IT BACK
f224  c3 18 f2      2888   2895         JMP     ASC7            ;AND FINISH UP
                    2889   2896 ;
                    2890   2897 ;DO MULTIPLY DIVIDE
                    2891   2898 ;
f227  42            2892   2899 LF227:  MOV     B,D             ;MOVE CURRENT OPRD IN DE TO BC
f228  4b            2893   2900         MOV     C,E             ;
f229  eb            2894   2901         XCHG                    ;AND OLD OPRND TO D,E
f22a  21 00 00      2895   2902         LXI     H,0             ;INITIALIZE ANSWER
f22d  fe 03         2896   2903         CPI     3               ;DOING DIVISION ?
f22f  ca 47 f2      2897   2904         JZ      LF247           ;YES
f232  cd 38 f2      2898   2905         CALL    LF238           ;NO, MULITPLICATION - DO IT
f235  c3 18 f2      2899   2906         JMP     ASC7            ;THEN FINISH UP
                    2900   2907 ;
                    2901   2908 ;MULTIPLICATION ROUTINE
                    2902   2909 ;
                    2903   2910 ;THIS ALGORITHM IS INTERESTING BUT DIFFICULT TO UNDERSTAND
                    2904   2911 ;UNTIL STUDIED FOR A WHILE. BUT IT DOES WORK
                    2905   2912 ;
f238  3e 10         2906   2913 LF238:  MVI     A,16            ;16 BITS
f23a  29            2907   2914 LF23A:  DAD     H               ;MULTIPLY PARTIAL ANS. BY 2
f23b  eb            2908   2915         XCHG                    ;CHANGE REGISTERS
f23c  29            2909   2916         DAD     H               ;MULT. MULTIPLIER BY 2
f23d  eb            2910   2917         XCHG                    ;RESTORE ORIG. REGISTERS
f23e  d2 42 f2      2911   2918         JNC     LF242           ;IF 2X MULTIPLIER ==> NO CARRY
f241  09            2912   2919         DAD     B               ;ADD MULTIPLICAND TO INTER ANS
f242  3d            2913   2920 LF242:  DCR     A               ;DCR NO OF BITS LEFT TO CHECK
f243  c2 3a f2      2914   2921         JNZ     LF23A           ;DO IT OVER IF NOT DONE
f246  c9            2915   2922         RET                     ;ELSE FINAL ANS. IS IN H,L
                    2916   2923 ;
                    2917   2924 ;DIVISION ROUTINE
                    2918   2925 ;
                    2919   2926 ;FIRST CHECK FOR DIVIDE BY ZERO
                    2920   2927 ;
f247  78            2921   2928 LF247:  MOV     A,B             ;GET BYTE OF DIVISOR
f248  b1            2922   2929         ORA     C               ;OR IT WITH OTHER BYTE
f249  ca 18 f2      2923   2930         JZ      ASC7            ;CAN'T DIVIDE BY ZERO
f24c  cd 53 f2      2924   2931         CALL    LF253           ;DO ACTUALLY DO THE DIVISION
f24f  eb            2925   2932         XCHG                    ;ANSWER TO H,L
f250  c3 18 f2      2926   2933         JMP     ASC7            ;TO FINISH UP
                    2927   2934 ;
                    2928   2935 ;DIVISION ROUTINE FOLLOWS. IT IS SIMILAR IN PRINCIPLE TO
                    2929   2936 ;THE MULTIPLICATION ROUTINE
                    2930   2937 ;
f253  3e 10         2931   2938 LF253:  MVI     A,16            ;16 BITS
f255  32 f3 d0      2932   2939 LF255:  STA     SCNT            ;SAVE AS COUNT
f258  29            2933   2940         DAD     H               ;SHIFT LEFT
f259  eb            2934   2941         XCHG                    ;SWITCH REGISTERS
f25a  29            2935   2942         DAD     H               ;SHIFT LEFT
f25b  eb            2936   2943         XCHG                    ;RESTORE REGISTERS
f25c  d2 60 f2      2937   2944         JNC     LF260           ;IF NO CARRY
f25f  23            2938   2945         INX     H               ;ELSE INCREMENT H,L
f260  7d            2939   2946 LF260:  MOV     A,L             ;AND SUBTRACT DIVISOR FROM IT
f261  91            2940   2947         SUB     C               ;
f262  6f            2941   2948         MOV     L,A             ;
f263  7c            2942   2949         MOV     A,H             ;
f264  98            2943   2950         SBB     B               ;
f265  67            2944   2951         MOV     H,A             ;
f266  13            2945   2952         INX     D               ;INCREMENT PARTIAL ANSWER
f267  d2 6c f2      2946   2953         JNC     LF26C           ;OK IF NO CARRY
f26a  09            2947   2954         DAD     B               ;ADD DIVISOR TO H,L
f26b  1b            2948   2955         DCX     D               ;AND DECREMENT ANSWER
f26c  3a f3 d0      2949   2956 LF26C:  LDA     SCNT            ;GET COUNT
f26f  3d            2950   2957         DCR     A               ;DECREMENT IT
f270  c2 55 f2      2951   2958         JNZ     LF255           ;IF NOT DONE, DO MORE
f273  c9            2952   2959         RET                     ;ELSE DONE, ANS IN D,E
                    2953   2960 ;
                    2954   2961 ;CHECK FOR SYMBOLS FROM SYMBOL TABLE
                    2955   2962 ;
f274  cd f8 f0      2956   2963 ALAB:   CALL    SLAB            ;SEE IF LABEL IN TABLE
f277  ca 04 f2      2957   2964         JZ      AVAL            ;IF FOUND
f27a  da 37 f3      2958   2965         JC      ERRA            ;IF LABEL ERROR
f27d  3a f9 d0      2959   2966         LDA     PASI            ;NOT FOUND, GET PASS IND.
f280  fe 02         2960   2967         CPI     2               ;DOING S.T./XREF PASS ?
f282  d2 91 f2      2961   2968         JNC     LF291           ;YES - PROCESS
f285  11 00 d3      2962   2969         LXI     D,SYSYM         ;ELSE TRY SYSTEM SYMBOL TABLE
f288  cd 28 e2      2963   2970         CALL    COMS            ;SEARCH IT
f28b  ca 04 f2      2964   2971         JZ      AVAL            ;IF FOUND
f28e  c3 25 f3      2965   2972         JMP     ERRU            ;ELSE UNDEFINED SYMBOL ERROR
                    2966   2973 ;
                    2967   2974 ;THE FOLLOWING ROUTINE IS USED TO HANDLE SYMBOLS DURING A
                    2968   2975 ;SYMBOL TABLE/XREF PASS (3RD PASS, PASI = 2).
                    2969   2976 ;DOES CROSS REFERENCE
                    2970   2977 ;
f291  eb            2971   2978 LF291:  XCHG                    ;D,E ==> SYMBOL NAME IN ABUF
f292  2a 30 d1      2972   2979         LHLD    SYMSV           ;SYMBOL DOING XREF PASS FOR
f295  0e 05         2973   2980         MVI     C,LLAB          ;LENGTH OF SYMBOL
f297  cd 57 e2      2974   2981         CALL    SEAR            ;SAME ?
f29a  c2 c2 f2      2975   2982         JNZ     LF2C2           ;NO
f29d  21 f3 d0      2976   2983         LXI     H,SCNT          ;POINT TO SYMBOL COUNT
f2a0  34            2977   2984         INR     M               ;INCREMENT IT
f2a1  7e            2978   2985         MOV     A,M             ;GET IT
f2a2  fe 0c         2979   2986         CPI     12              ;MAX. NO ON ONE LINE ?
f2a4  da b1 f2      2980   2987         JC      LF2B1           ;NO - DO MORE THIS LINE
f2a7  36 01         2981   2988         MVI     M,1             ;YES - RESET COUNT
f2a9  cd 16 e2      2982   2989         CALL    CRLF            ;DO CAR RET/LINE FEED
f2ac  0e 11         2983   2990         MVI     C,17            ;AND PRINT 17 SPACES
f2ae  cd 61 e3      2984   2991         CALL    BLKO            ;DO IT
f2b1  21 df d1      2985   2992 LF2B1:  LXI     H,IBUF-5        ;POINT TO LINE NO.
f2b4  0e 04         2986   2993         MVI     C,4             ;LENGTH OF LINE NO
f2b6  46            2987   2994 LF2B6:  MOV     B,M             ;GET A CHAR
f2b7  cd cf d0      2988   2995         CALL    OUT8            ;PRINT IT
f2ba  23            2989   2996         INX     H               ;POINT TO NEXT CHAR
f2bb  0d            2990   2997         DCR     C               ;DECR CHAR COUNT
f2bc  c2 b6 f2      2991   2998         JNZ     LF2B6           ;DO NEXT CHAR IF NOT DONE
f2bf  cd 5c e3      2992   2999         CALL    LE35C           ;PUT OUT A SPACE AFTER LINE NO
f2c2  af            2993   3000 LF2C2:  XRA     A               ;CLEAR FLAGS
f2c3  26 00         2994   3001         MVI     H,0             ;AND H,L
f2c5  c3 04 f2      2995   3002         JMP     AVAL            ;AND CONTINUE SEARCH
                    2996   3003 ;
                    2997   3004 ;ROUTINE TO CHECK FOR TERMINATING CHARACTERS IN LABEL FILEDS
                    2998   3005 ;
f2c8  3a 07 d1      2999   3006 SEND:   LDA     OPRI            ;FETCH OPERAND INDICATOR
f2cb  b7            3000   3007         ORA     A               ;SET FLAGS
f2cc  c2 1a f3      3001   3008         JNZ     ERRS            ;SYNTAX ERROR
f2cf  2a 05 d1      3002   3009         LHLD    OPRD            ;GET OPERAND VALUE
f2d2  3a 08 d1      3003   3010         LDA     GTLT            ;GET SHIFT INDICATOR
f2d5  fe 3c         3004   3011         CPI     '<'             ;USING HIGH HALF ONLY ?
f2d7  c2 de f2      3005   3012         JNZ     LF2DE           ;NO - OK AS IS
f2da  6c            3006   3013         MOV     L,H             ;YES - MOVE HIGH HALF TO L
f2db  c3 e3 f2      3007   3014         JMP     LF2E3           ;AND CLEAR HIGH HALF
f2de  fe 3e         3008   3015 LF2DE:  CPI     '>'             ;USING LOW HALF ONLY ?
f2e0  c2 e5 f2      3009   3016         JNZ     SEN1            ;NO - OK AS IS THEN
f2e3  26 00         3010   3017 LF2E3:  MVI     H,0             ;ELSE CLEAR HIGH HALF
f2e5  7c            3011   3018 SEN1:   MOV     A,H             ;GET HIGH ORDER BYTE
f2e6  11 09 d1      3012   3019         LXI     D,TEMP          ;GET ADDRESS
f2e9  b7            3013   3020         ORA     A               ;SET FLAGS
f2ea  c9            3014   3021         RET                     ;DONE
                    3015   3022 ;
                    3016   3023 ;GET A NUMERIC VALUE, HEX, OCTAL, OR DECIMAL
                    3017   3024 ;
f2eb  cd 3e f1      3018   3025 NUMS:   CALL    ALPS            ;PUT CHARS IN ABUFF
f2ee  1b            3019   3026         DCX     D               ;POINT TO LAST CHAR
f2ef  1a            3020   3027         LDAX    D               ;GET LAST CHAR
f2f0  01 df d0      3021   3028         LXI     B,ABUF          ;B,C POINT TO NUMBER
f2f3  fe 48         3022   3029         CPI     'H'             ;HEX ?
f2f5  ca 07 f3      3023   3030         JZ      NUM2            ;YES - PROCESS
f2f8  fe 51         3024   3031         CPI     'Q'             ;OCTAL ?
f2fa  ca 0c f3      3025   3032         JZ      NUM3            ;YES - PROCESS
f2fd  fe 44         3026   3033         CPI     'D'             ;DECIMAL ?
f2ff  c2 0a e0      3027   3034         JNZ     ADEC            ;PROCESS DECIMAL BY DEFAULT
f302  af            3028   3035 NUM1:   XRA     A               ;GET BINARY ZERO
f303  12            3029   3036         STAX    D               ;CLEAR THE TYPE LETTER
f304  c3 0a e0      3030   3037         JMP     ADEC            ;PROCESS DECIMAL
f307  af            3031   3038 NUM2:   XRA     A               ;GET A BINARY ZERO
f308  12            3032   3039         STAX    D               ;CLEAR THE TRAILING H
f309  c3 fa e2      3033   3040         JMP     AHEX            ;PROCESS HEX
f30c  af            3034   3041 NUM3:   XRA     A               ;GET A BINARY ZERO
f30d  12            3035   3042         STAX    D               ;CLEAR THE TRAILING Q
f30e  c3 33 e3      3036   3043         JMP     AOCT            ;PROCESS OCTAL
                    3037   3044 ;
                    3038   3045 ;FOLLOWING ARE THE ERROR REPORTING ROUTINES
                    3039   3046 ;
f311  3e 52         3040   3047 ERRR:   MVI     A,'R'           ;REGISTER ERROR
f313  21 00 00      3041   3048         LXI     H,0             ;CLEAR H,L
f316  32 db d1      3042   3049         STA     OBUF+18         ;WHERE THE ERROR LETTER GOES
f319  c9            3043   3050         RET                     ;DONE
f31a  3e 53         3044   3051 ERRS:   MVI     A,'S'           ;SYNTAX ERROR
f31c  32 db d1      3045   3052         STA     OBUF+18         ;WHERE THE ERROR LETTER GOES
f31f  21 00 00      3046   3053         LXI     H,0             ;CLEAR H,L
f322  c3 e5 f2      3047   3054         JMP     SEN1            ;FINISH UP & GO HOME
f325  3e 55         3048   3055 ERRU:   MVI     A,'U'           ;UNDEFINED SYMBOL
f327  c3 1c f3      3049   3056         JMP     ERRS+2
f32a  3e 56         3050   3057 ERRV:   MVI     A,'V'           ;VALUE ERROR
f32c  c3 13 f3      3051   3058         JMP     ERRR+2
f32f  3e 4d         3052   3059 ERRM:   MVI     A,'M'           ;MISSING LABEL
f331  32 db d1      3053   3060         STA     OBUF+18         ;WHERE THE ERROR LETTER GOES
f334  c3 41 eb      3054   3061         JMP     LEB41           ;FINISH STATEMENT PROCESSING
f337  3e 41         3055   3062 ERRA:   MVI     A,'A'           ;ARGUMENT ERROR
f339  c3 1c f3      3056   3063         JMP     ERRS+2
f33c  3e 4f         3057   3064 ERRO:   MVI     A,'O'           ;OPCODE ERROR
f33e  32 db d1      3058   3065         STA     OBUF+18         ;WHERE ERROR LETTER GOES
f341  3a f9 d0      3059   3066         LDA     PASI            ;GET PASS INDICATOR
f344  b7            3060   3067         ORA     A               ;SET FLAGS
f345  c8            3061   3068         RZ                      ;RET IF ON 1ST PASS
f346  0e 03         3062   3069         MVI     C,3             ;ELSE SET UP TO LEAVE 3 BYTES
f348  af            3063   3070 ERO1:   XRA     A               ;GET A BINARY ZERO
f349  cd 1d ee      3064   3071         CALL    ASTO            ;PUT IT IN MEMORY & LISTING
f34c  0d            3065   3072         DCR     C               ;DECR COUNT
f34d  c2 48 f3      3066   3073         JNZ     ERO1            ;DO MORE IF NOT DONE
f350  c9            3067   3074         RET                     ;DONE - ROOM LEFT FOR PATCH
f351  3e 4c         3068   3075 ERRL:   MVI     A,'L'           ;LABEL ERROR
f353  c3 3e f3      3069   3076         JMP     ERRO+2
f356  3e 44         3070   3077 ERRD:   MVI     A,'D'           ;DUPLICATE LABEL
f358  32 db d1      3071   3078         STA     OBUF+18         ;WHERE ERROR LETTER GOES
f35b  cd 41 eb      3072   3079         CALL    LEB41           ;DISPLAY THE ERROR
f35e  c3 8e eb      3073   3080         JMP     OPC             ;PROCESS OPCODE
                    3074   3081 ;
                    3075   3082 ;FOLLOWING IS THE LINE FORMATING ROUTINE
                    3076   3083 ;
                    3077   3084 ;IT IS BEING LEFT UN-COMMENTED SO THAT YOU MAY TRY TO
                    3078   3085 ;COMMENT IT YOURSELF & THEREFORE HAVE A BETTER APPRECIATION
                    3079   3086 ;OF THE WORK I HAVE GONE TO - NOTE THAT IT IS LESS THAN TWO
                    3080   3087 ;PAGES LONG, AND WE ARE NOW OVER 50 PAGES INTO THIS MONSTER.
                    3081   3088 ;HAVE FUN.  (PS - I HAVE GONE TO THE TROUBLE OF PUTING
                    3082   3089 ;IN SYMBOLIC REFERENCES TO MAKE THE CODE RE-ASSEMBLEABLE)
                    3083   3090 ;
f361  0e 00         3084   3091 LF361:  MVI     C,0
f363  21 e4 d1      3085   3092         LXI     H,IBUF
f366  7e            3086   3093         MOV     A,M
f367  fe 2a         3087   3094         CPI     COMCHR
f369  c8            3088   3095         RZ
f36a  06 02         3089   3096         MVI     B,2
f36c  cd 7a f3      3090   3097         CALL    LF37A
f36f  d8            3091   3098         RC
f370  04            3092   3099         INR     B
f371  cd 7a f3      3093   3100         CALL    LF37A
f374  d8            3094   3101         RC
f375  16 02         3095   3102         MVI     D,2
f377  c3 7c f3      3096   3103         JMP     LF37C
f37a  16 01         3097   3104 LF37A:  MVI     D,1
f37c  78            3098   3105 LF37C:  MOV     A,B
f37d  82            3099   3106         ADD     D
f37e  47            3100   3107         MOV     B,A
f37f  3a 8f d1      3101   3108         LDA     TERMW
f382  d6 35         3102   3109         SUI     (IBUF+81) AND 0FFH
f384  ca 92 f3      3103   3110         JZ      LF392
f387  d2 8e f3      3104   3111         JNC     LF38E
f38a  05            3105   3112         DCR     B
f38b  c3 92 f3      3106   3113         JMP     LF392
f38e  7a            3107   3114 LF38E:  MOV     A,D
f38f  17            3108   3115         RAL
f390  80            3109   3116         ADD     B
f391  47            3110   3117         MOV     B,A
f392  78            3111   3118 LF392:  MOV     A,B
f393  c6 05         3112   3119         ADI     5
f395  47            3113   3120         MOV     B,A
f396  5a            3114   3121 LF396:  MOV     E,D
f397  0c            3115   3122 LF397:  INR     C
f398  7e            3116   3123         MOV     A,M
f399  fe 20         3117   3124         CPI     20H
f39b  d8            3118   3125         RC
f39c  23            3119   3126         INX     H
f39d  c2 96 f3      3120   3127         JNZ     LF396
f3a0  1d            3121   3128         DCR     E
f3a1  c2 97 f3      3122   3129         JNZ     LF397
f3a4  0c            3123   3130 LF3A4:  INR     C
f3a5  7e            3124   3131         MOV     A,M
f3a6  fe 20         3125   3132         CPI     20H
f3a8  d8            3126   3133         RC
f3a9  23            3127   3134         INX     H
f3aa  ca a4 f3      3128   3135         JZ      LF3A4
f3ad  79            3129   3136         MOV     A,C
f3ae  90            3130   3137         SUB     B
f3af  d0            3131   3138         RNC
f3b0  2b            3132   3139         DCX     H
f3b1  2b            3133   3140         DCX     H
f3b2  36 00         3134   3141         MVI     M,0
f3b4  4f            3135   3142         MOV     C,A
f3b5  15            3136   3143         DCR     D
f3b6  c2 c5 f3      3137   3144         JNZ     LF3C5
f3b9  2a 01 d1      3138   3145         LHLD    PNTR
f3bc  2f            3139   3146         CMA
f3bd  3c            3140   3147         INR     A
f3be  5f            3141   3148         MOV     E,A
f3bf  16 00         3142   3149         MVI     D,0
f3c1  19            3143   3150         DAD     D
f3c2  22 01 d1      3144   3151         SHLD    PNTR
f3c5  69            3145   3152 LF3C5:  MOV     L,C
f3c6  26 ff         3146   3153         MVI     H,0FFH
f3c8  0e 00         3147   3154         MVI     C,0
f3ca  11 36 d2      3148   3155         LXI     D,IBUF+82
f3cd  19            3149   3156         DAD     D
f3ce  eb            3150   3157         XCHG
f3cf  cd 79 e9      3151   3158         CALL    RMOV
f3d2  eb            3152   3159         XCHG
f3d3  23            3153   3160 LF3D3:  INX     H
f3d4  36 20         3154   3161         MVI     M,20H
f3d6  7d            3155   3162         MOV     A,L
f3d7  bb            3156   3163         CMP     E
f3d8  c2 d3 f3      3157   3164         JNZ     LF3D3
f3db  23            3158   3165         INX     H
f3dc  23            3159   3166         INX     H
f3dd  48            3160   3167         MOV     C,B
f3de  c9            3161   3168         RET
f3df  3a 8f d1      3162   3169 LF3DF:  LDA     TERMW
f3e2  3c            3163   3170         INR     A
f3e3  c9            3164   3171         RET
                    3165   3172 ;
                    3166   3173 ;FOLLOWING IS THE CODE TO SET THE TERMINAL WIDTH
                    3167   3174 ;NOTE THAT WHAT IS ACTUALLY STORED IS THE LOW ORDER BYTE
                    3168   3175 ;OF THE 1ST ADDR BEYOND THE BUFFER END, NOT THE WIDTH ITSELF.
                    3169   3176 ;
f3e4  01 df d0      3170   3177 TERM:   LXI     B,ABUF          ;POINT TO KEYED IN VALUE
f3e7  cd 0a e0      3171   3178         CALL    ADEC            ;CONVERT TO BINARY
f3ea  7d            3172   3179         MOV     A,L             ;VALUE TO A
f3eb  d6 1b         3173   3180         SUI     (-(IBUF+1)) AND 0FFH
f3ed  fe 5c         3174   3181         CPI     (IBUF+120) AND 0FFH
f3ef  d2 dd e7      3175   3182         JNC     WHAT            ;IF TERMW > 120 SPECIFIED
f3f2  32 8f d1      3176   3183         STA     TERMW           ;SAVE IT
f3f5  c3 60 e0      3177   3184         JMP     EORMS           ;DONE
f3f8  00            3178   3185         NOP
f3f9  00            3179   3186         NOP
f3fa  00            3180   3187         NOP
f3fb  00            3181   3188         NOP
f3fc  00            3182   3189         NOP
f3fd  00            3183   3190         NOP
f3fe  00            3184   3191         NOP
f3ff  00            3185   3192         NOP
                    3186   3193 ;
                    3187   3194 ; ****** END OF ALS8ASM MODULE
                    3188   3195 ;
                    3189   3196 ;
                    3190   3197 ;THIS IS THE INTERPRETIVE DEBUGGING SIMULATOR
                    3191   3198 ;IT'S BASIC OPERATION IS TO SIMULATE ALL OF THE 8080
                    3192   3199 ;REGISTERS IN MEMORY, & THEN MOVE THE INST. TO BE
                    3193   3200 ;SIMULATED INTO A 3 BYTE AREA IN RAM AND EXECUTE IT
                    3194   3201 ;FOLLOWED BY A JUMP INST WHICH RETURNS CONTROL TO THE
                    3195   3202 ;ROUTINE.  A SIMULATOR SIMILAR TO THIS WAS DESCRIBED IN
                    3196   3203 ;DETAIL IN SEPT. 77 KILOBAUD PG. 64.  HOWEVER ALTHOUGH
                    3197   3204 ;THE PRINCIPLE IS THE SAME, THE CODE IS QUITE DIFFERENT.
                    3198   3205 ;THE SIMULATOR ENTRY POINT IS AT F75C.
                    3199   3206 ;
                    3200   3207 ;COME HERE TO "SIMULATE" A SINGLE INSTRUCTION
                    3201   3208 ;
f400  21 00 00      3202   3209 LF400:  LXI     H,0             ;GET TWO ZEROS
f403  22 4d d1      3203   3210         SHLD    LD14C+1         ;CLEAR 2ND & 3RD INST BYTES
f406  2a 3c d1      3204   3211         LHLD    LD13C           ;GET PGM COUNTER
f409  7e            3205   3212         MOV     A,M             ;GET NEXT INST TO SIMULATE
f40a  32 4c d1      3206   3213         STA     LD14C           ;SAVE IT IN INST REG
f40d  47            3207   3214         MOV     B,A             ;AND IN B
f40e  fe 40         3208   3215         CPI     40H             ;TRYING TO DETERMINE TYPE INST
f410  da 22 f4      3209   3216         JC      LF422           ;FOR FURTHER TESTING
f413  fe c0         3210   3217         CPI     0C0H            ;MORE TESTING
f415  d2 75 f4      3211   3218         JNC     LF475           ;INST >= C0 HEX
f418  c3 59 f4      3212   3219         JMP     LF459           ;1 BYTE ACCUM INST
                    3213   3220 ;
                    3214   3221 ;RETURN HERE TO PROCESS 1 BYTE ACCUM. INST
                    3215   3222 ;
f41b  23            3216   3223 LF41B:  INX     H               ;INR PGM COUNTER
f41c  22 3e d1      3217   3224         SHLD    LD13E           ;SAVE ADDR OF NEXT INST
f41f  c3 34 f6      3218   3225         JMP     LF634           ;PROCESS THE INST
                    3219   3226 ;
                    3220   3227 ;GET HERE FOR INST WITH OPCODES LESS THAN 40H
                    3221   3228 ;
f422  e6 07         3222   3229 LF422:  ANI     7               ;MASK LOW 3 BITS
f424  ca 1b f4      3223   3230         JZ      LF41B           ;NOP IS ONLY LEGAL 8080 INST
f427  fe 03         3224   3231         CPI     3               ;MASK LOW ORDER TWO BITS
f429  da 39 f4      3225   3232         JC      LF439           ;01,02,09,0A,..,31,32,39,3A ETC
f42c  fe 06         3226   3233         CPI     6               ;CHECK FOR MVI
f42e  c2 1b f4      3227   3234         JNZ     LF41B           ;JMP IF NOT MVI
                    3228   3235 ;
                    3229   3236 ;COME HERE FOR ACCUMULATOR IMMEDIATE INST (MVI, ADI, CPI, ETC)
                    3230   3237 ;
f431  23            3231   3238 LF431:  INX     H               ;POINT TO 2ND BYTE
f432  7e            3232   3239         MOV     A,M             ;GET IT
f433  32 4d d1      3233   3240         STA     LD14C+1         ;SAVE AS 2ND BYTE TO SIMULATE
f436  c3 1b f4      3234   3241         JMP     LF41B           ;SIMULATE INST. EXECUTION
                    3235   3242 ;
                    3236   3243 ;COME HERE FOR LXI, STAX, DAD, LDAX, SHLD, LHLD, STA, LDA
                    3237   3244 ;
f439  fe 02         3238   3245 LF439:  CPI     2               ;STAX/LDAX,SHLD/LHLD,STA/LDA
f43b  78            3239   3246         MOV     A,B             ;RESTORE THE FULL OPCODE
f43c  ca 51 f4      3240   3247         JZ      LF451           ;FOR LIST 2 INST PREV.
f43f  e6 08         3241   3248         ANI     8               ;CHECK FOR DAD
f441  c2 1b f4      3242   3249         JNZ     LF41B           ;PROCESS DAD INST
f444  23            3243   3250 LF444:  INX     H               ;POINT TO 2ND BYTE
f445  7e            3244   3251         MOV     A,M             ;GET IT
f446  32 4d d1      3245   3252         STA     LD14C+1         ;PUT IT IN SIM'S INST REG
f449  23            3246   3253         INX     H               ;POINT TO 3RD BYTE
f44a  7e            3247   3254         MOV     A,M             ;GET IT
f44b  32 4e d1      3248   3255         STA     LD14C+2         ;PUT IT IN AS 3RD BYTE
f44e  c3 1b f4      3249   3256         JMP     LF41B           ;SIMULATE EXECUTION OF THE INST
                    3250   3257 ;
                    3251   3258 ;COME HERE FOR STAX, LDAX, SHLD, LHLD, STA, LDA
                    3252   3259 ;
f451  fe 20         3253   3260 LF451:  CPI     20H             ;DIVIDE GROUP IN 2 PARTS
f453  d2 44 f4      3254   3261         JNC     LF444           ;FOR SHLD/LHLD, STA/LDA
f456  c3 1b f4      3255   3262         JMP     LF41B           ;FOR LDAX/STAX
                    3256   3263 ;
                    3257   3264 ;GET HERE FOR 1 BYTE ACCUM. INST > 40H AND < C0H
                    3258   3265 ;MOV,CMP,ANA,ADD,ADC,SUB,SBB,XRA,ORA AND HLT
                    3259   3266 ;
f459  fe 76         3260   3267 LF459:  CPI     76H             ;HALT INST ?
f45b  ca 61 f4      3261   3268         JZ      LF461           ;YES - PROCESS IT
f45e  c3 1b f4      3262   3269         JMP     LF41B           ;NO - PROCESS OTHERS
                    3263   3270 ;
                    3264   3271 ;PROCESS HALT INST
                    3265   3272 ;
f461  cd 16 e2      3266   3273 LF461:  CALL    CRLF            ;DO CR/LF
f464  cd b8 f6      3267   3274         CALL    LF6B8           ;PRINT OUT SIMULATORS P.C.
f467  21 70 f4      3268   3275         LXI     H,LF470         ;POINT TO HALT MESSAGE
f46a  cd 80 e3      3269   3276         CALL    SCRN            ;PRINT "HALT"
f46d  c3 74 f7      3270   3277         JMP     LF774           ;AND THEN RESTART SIMULATOR
f470  48 41 4c 54   3271   3278 LF470:  DB      'HALT',0DH
f474  0d            3271   3279
                    3272   3280 ;
                    3273   3281 ;COME HERE FOR INST WITH OPCODES >= C0 HEX
                    3274   3282 ;
f475  e6 07         3275   3283 LF475:  ANI     7               ;MASK LOW 3 BITS
f477  ca 9f f4      3276   3284         JZ      LF49F           ;CONDITIONAL RETURN
f47a  fe 02         3277   3285         CPI     2               ;CONDITIONAL JUMP ?
f47c  ca ca f4      3278   3286         JZ      LF4CA           ;YES - PROCESS CNDX JMP
f47f  da b0 f4      3279   3287         JC      LF4B0           ;POP, RET, PCHL, SPHL
f482  fe 04         3280   3288         CPI     4               ;CONDITIONAL CALL ?
f484  ca 05 f5      3281   3289         JZ      LF505           ;YES - PROCESS IT
f487  da ef f4      3282   3290         JC      LF4EF           ;NO-JMP,IN,OUT,EI,DI,XTHL,XCHG
f48a  fe 06         3283   3291         CPI     6               ;ACCUM. IMMEDIATE ?
f48c  ca 31 f4      3284   3292         JZ      LF431           ;YES - PROCESS
f48f  da 42 f5      3285   3293         JC      LF542           ;PUSH, CALL & ILLEGAL
                    3286   3294 ;
                    3287   3295 ;GET HERE TO PROCESS RST INSTRUCTIONS
                    3288   3296 ;
f492  af            3289   3297         XRA     A               ;GET A ZERO
f493  32 3f d1      3290   3298         STA     LD13E+1         ;CLEAR HIGH ORDER CALLED ADDR
f496  78            3291   3299         MOV     A,B             ;RESTORE OPCODE TO A
f497  e6 38         3292   3300         ANI     38H             ;MASK RST TYPE
f499  32 3e d1      3293   3301         STA     LD13E           ;STORE AS LOW ORDER BYTE
f49c  c3 11 f5      3294   3302         JMP     LF511           ;PROCESS AS NORMAL CALL
                    3295   3303 ;
                    3296   3304 ;COME HERE FOR CONDITIONAL RETURN
                    3297   3305 ;
f49f  cd 51 f5      3298   3306 LF49F:  CALL    LF551           ;OPERATE ON OPCODE & FLAG REG
f4a2  c2 da f4      3299   3307         JNZ     LF4DA           ;CNDX NOT MET,CLEAN UP, GO HOME
                    3300   3308 ;
                    3301   3309 ;COME HERE TO PROCESS RETURN
                    3302   3310 ;
f4a5  eb            3303   3311 LF4A5:  XCHG                    ;SAVE PGM CTR IN D,E
f4a6  2a 40 d1      3304   3312         LHLD    LD140           ;GET STACK POINTER H,L
f4a9  cd 7f f5      3305   3313         CALL    LF57F           ;POP STK & SAVE AS NEXT ADDR
f4ac  23            3306   3314         INX     H               ;INR STACK POINTER FOR 2ND BYTE
f4ad  c3 21 f5      3307   3315         JMP     LF521           ;RESET STK PTR & GO TO NXT INST
                    3308   3316 ;
                    3309   3317 ;COME HERE FOR POP, RET, PCHL, SPHL
                    3310   3318 ;
f4b0  78            3311   3319 LF4B0:  MOV     A,B             ;RESTORE INST TO A
f4b1  e6 08         3312   3320         ANI     8               ;POP INST ?
f4b3  ca 1b f4      3313   3321         JZ      LF41B           ;YES - PROCESS IT
f4b6  78            3314   3322         MOV     A,B             ;NO - RESTORE INST AGAIN
f4b7  fe d9         3315   3323         CPI     0D9H            ;ILLEGAL OPCODE ?
f4b9  ca 89 f5      3316   3324         JZ      LF589           ;YES - PROCESS ILLEGAL OPCODE
f4bc  da a5 f4      3317   3325         JC      LF4A5           ;NO - RETURN INST IF CARRY
f4bf  fe e9         3318   3326         CPI     0E9H            ;NOT RET - PCHL ?
f4c1  c2 1b f4      3319   3327         JNZ     LF41B           ;NO - MUST BE SPHL
f4c4  2a 44 d1      3320   3328         LHLD    LD144           ;PCHL - GET H,L
f4c7  c3 db f4      3321   3329         JMP     LF4DB           ;MAKE ADDR OF NEXT INST & RET
                    3322   3330 ;
                    3323   3331 ;COME HERE FOR CONDITIONAL JUMP
                    3324   3332 ;
f4ca  cd 51 f5      3325   3333 LF4CA:  CALL    LF551           ;EVALUATE CONDITION
                    3326   3334 ;
                    3327   3335 ;GET HERE FOR STD JUMP
                    3328   3336 ;
f4cd  cd e1 f4      3329   3337 LF4CD:  CALL    LF4E1           ;FILL IN 2ND & 3RD BYTES
f4d0  c2 d9 f4      3330   3338         JNZ     LF4D9           ;JMP IF CNDX NOT MET
f4d3  cd 7f f5      3331   3339         CALL    LF57F           ;UPDATE ADDR OF NXT INST
f4d6  c3 6a f6      3332   3340         JMP     LF66A           ;DONE W/SIMULATED JUMP
f4d9  23            3333   3341 LF4D9:  INX     H               ;POINT TO 3RD BYTE
f4da  23            3334   3342 LF4DA:  INX     H               ;POINT TO NEXT INST
f4db  22 3e d1      3335   3343 LF4DB:  SHLD    LD13E           ;SAVE H,L AS ADDR OF NXT INST
f4de  c3 6a f6      3336   3344         JMP     LF66A           ;DONE WITH THIS INST
                    3337   3345 ;
                    3338   3346 ;UPDATE 2ND & 3RD BYTES OF INST AT D14C
                    3339   3347 ;DONE EVEN IF INST IS NOT REALLY EXECUTED SO DISPLAY
                    3340   3348 ;OF INST WILL BE CORRECT.
                    3341   3349 ;NOTE REVERSAL OF "BACKWARD" 8080 ADDRESSES
                    3342   3350 ;
f4e1  f5            3343   3351 LF4E1:  PUSH    PSW             ;SAVE PSW
f4e2  23            3344   3352         INX     H               ;POINT TO INST 2ND BYTE
f4e3  7e            3345   3353         MOV     A,M             ;GET IT
f4e4  32 4e d1      3346   3354         STA     LD14C+2         ;SAVE AS SIM 2ND (3RD?) BYTE
f4e7  23            3347   3355         INX     H               ;POINT TO INST 3RD BYTE
f4e8  7e            3348   3356         MOV     A,M             ;GET IT
f4e9  32 4d d1      3349   3357         STA     LD14C+1         ;SAVE AS SIM 3RD (2ND?) BYTE
f4ec  2b            3350   3358         DCX     H               ;POINT BACK AT 2ND INST BYTE
f4ed  f1            3351   3359         POP     PSW             ;RESTORE PSW
f4ee  c9            3352   3360         RET                     ;DONE
                    3353   3361 ;
                    3354   3362 ;GET HERE FOR JMP, OUT, IN, XTHL, XCHG, EI, DI INSTRUCTIONS
                    3355   3363 ;
f4ef  78            3356   3364 LF4EF:  MOV     A,B             ;GET WHOLE INST
f4f0  e6 38         3357   3365         ANI     38H             ;MASK
f4f2  ca cd f4      3358   3366         JZ      LF4CD           ;JUMP INST
f4f5  fe 10         3359   3367         CPI     10H             ;
f4f7  ca f2 f5      3360   3368         JZ      LF5F2           ;OUT INST
f4fa  da 89 f5      3361   3369         JC      LF589           ;ILLEGAL OPCODE
f4fd  fe 18         3362   3370         CPI     18H             ;MASK AGAIN
f4ff  ca 8f f5      3363   3371         JZ      LF58F           ;INPUT INST
f502  c3 1b f4      3364   3372         JMP     LF41B           ;EI, DI, XTHL, XCHG
                    3365   3373 ;
                    3366   3374 ;COME HERE FOR CONDITIONAL CALL INST
                    3367   3375 ;
f505  cd 51 f5      3368   3376 LF505:  CALL    LF551           ;EVALUATE CONDITION
f508  c2 cd f4      3369   3377         JNZ     LF4CD           ;JUMP IF NOT MET
                    3370   3378 ;
                    3371   3379 ;GET HERE FOR CALL INST
                    3372   3380 ;
f50b  cd e1 f4      3373   3381 LF50B:  CALL    LF4E1           ;UPDATE DISPLAY INST
f50e  cd 7f f5      3374   3382         CALL    LF57F           ;CALLED ADDR ==> NXT INST
f511  23            3375   3383 LF511:  INX     H               ;POINT TO INST AFTR CALL
f512  eb            3376   3384         XCHG                    ;SAVE RET ADDR IN D,E
f513  3a 35 d1      3377   3385         LDA     LD135           ;GET REAL-TIME RUN FLAG
f516  b7            3378   3386         ORA     A               ;SET FLAGS
f517  c2 27 f5      3379   3387         JNZ     LF527           ;JUMP IF SIMULATING
f51a  2a 40 d1      3380   3388 LF51A:  LHLD    LD140           ;GET STACK POINTER
f51d  2b            3381   3389         DCX     H               ;POINT TO NEXT ENTRY 1ST BYTE
f51e  72            3382   3390         MOV     M,D             ;PUT HIGH ORDER RET ADDR IN
f51f  2b            3383   3391         DCX     H               ;NOW DO LOW ORDER BYTE
f520  73            3384   3392         MOV     M,E             ;RET ADDR ON STACK
f521  22 40 d1      3385   3393 LF521:  SHLD    LD140           ;UPDATE STACK POINTER
f524  c3 6a f6      3386   3394         JMP     LF66A           ;SIMULATED CALL DONE
f527  2a 3e d1      3387   3395 LF527:  LHLD    LD13E           ;GET CALLED ADDR
f52a  3a 3a d1      3388   3396         LDA     LD13A           ;GET LOW ORDER R.T. RUN ADDR
f52d  bd            3389   3397         CMP     L               ;SAME ?
f52e  c2 1a f5      3390   3398         JNZ     LF51A           ;NO - SIMULATE CALL
f531  3a 3b d1      3391   3399         LDA     LD13A+1         ;GET HIGH ORDER R.T. RUN ADDR
f534  bc            3392   3400         CMP     H               ;SAME ?
f535  c2 1a f5      3393   3401         JNZ     LF51A           ;NO - SIMULATE CALL
f538  22 4d d1      3394   3402         SHLD    LD14C+1         ;SAME - PUT CALL ADDR IN
f53b  eb            3395   3403         XCHG                    ;RET ADDR TO H,L
f53c  22 3e d1      3396   3404         SHLD    LD13E           ;NEXT SIM. ADDR TO EXEC
f53f  c3 34 f6      3397   3405         JMP     LF634           ;EXECUTE CALL FOR REAL
                    3398   3406 ;
                    3399   3407 ;GET HERE FOR PUSH, CALL & ILLEGAL OPCODES
                    3400   3408 ;
f542  78            3401   3409 LF542:  MOV     A,B             ;RESTORE INSTRUCTION
f543  e6 08         3402   3410         ANI     8               ;MASK
f545  ca 1b f4      3403   3411         JZ      LF41B           ;PUSH, POP
f548  78            3404   3412         MOV     A,B             ;RESTORE OPCODE AGAIN
f549  fe cd         3405   3413         CPI     0CDH            ;CALL ?
f54b  ca 0b f5      3406   3414         JZ      LF50B           ;YES - PROCESS IT
f54e  c3 89 f5      3407   3415         JMP     LF589           ;ILLEGAL OPCODE
                    3408   3416 ;
                    3409   3417 ;GET HERE TO EVALUATE CONDITION FOR CONDITIONAL JMP, CALL, RET
                    3410   3418 ;
f551  78            3411   3419 LF551:  MOV     A,B             ;RESTORE OP CODE
f552  e6 08         3412   3420         ANI     8               ;MASK CNDX TRUE/FALSE BIT
f554  4f            3413   3421         MOV     C,A             ;SAVE TRUE/FALSE STATUS
f555  ca 5a f5      3414   3422         JZ      LF55A           ;JUMP IF NZ,NC,PO,P
f558  0e c5         3415   3423         MVI     C,0C5H          ;PSW COND FLAG MASK
f55a  78            3416   3424 LF55A:  MOV     A,B             ;RESTORE OPCODE AGAIN
f55b  e6 30         3417   3425         ANI     30H             ;ZERO FLAG CONDITIONAL ?
f55d  c2 65 f5      3418   3426         JNZ     LF565           ;NO - TEST OTHERS
f560  16 40         3419   3427         MVI     D,40H           ;PSW ZERO FLAG MASK
f562  c3 79 f5      3420   3428         JMP     LF579           ;EVALUATE THE CONDITION
f565  fe 20         3421   3429 LF565:  CPI     20H             ;PARITY/SIGN FLAG CONDITION ?
f567  ca 72 f5      3422   3430         JZ      LF572           ;YES - PARITY FLAG CNDX
f56a  d2 77 f5      3423   3431         JNC     LF577           ;YES - SIGN FLAG CNDX
f56d  16 01         3424   3432         MVI     D,1             ;CARRY FLAG MASK
f56f  c3 79 f5      3425   3433         JMP     LF579           ;EVALUATE CONDITION
f572  16 04         3426   3434 LF572:  MVI     D,4             ;PARITY FLAG BIT MASK
f574  c3 79 f5      3427   3435         JMP     LF579           ;EVALUATE THE CONDITION
f577  16 80         3428   3436 LF577:  MVI     D,80H           ;SIGN FLAG BIT MASK
f579  3a 42 d1      3429   3437 LF579:  LDA     LD142           ;GET SIMULATOR'S FLAG REGISTER
f57c  a9            3430   3438         XRA     C               ;SET CNDX & T/F INTO ACC
f57d  a2            3431   3439         ANA     D               ;MASK OUT PROPER FLAG BIT
f57e  c9            3432   3440         RET                     ;AND GO BACK W/ZERO FLAG SET
                    3433   3441 ;
                    3434   3442 ;SAVE ADDR POINTED TO BY H,L AS NEXT INST TO EXECUTE
                    3435   3443 ;
f57f  7e            3436   3444 LF57F:  MOV     A,M             ;GET 1ST BYTE
f580  32 3e d1      3437   3445         STA     LD13E           ;SAVE IT AS NEXT INST LOW BYTE
f583  23            3438   3446         INX     H               ;POINT TO 2ND BYTE
f584  7e            3439   3447         MOV     A,M             ;GET IT
f585  32 3f d1      3440   3448         STA     LD13E+1         ;SAVE AS HIGH BYTE
f588  c9            3441   3449         RET                     ;DONE
                    3442   3450 ;
                    3443   3451 ;ROUTINE TO PROCESS ILLEGAL OPCODES
                    3444   3452 ;
f589  cd ca f6      3445   3453 LF589:  CALL    LF6CA           ;DISPLAY INST & ALL REGS
f58c  cd 49 f9      3446   3454         CALL    LF949           ;PRINT ?, RESTART (NEVER RET)
                    3447   3455 ;
                    3448   3456 ;ROUTINE TO PROCESS INPUT INST
                    3449   3457 ;
f58f  23            3450   3458 LF58F:  INX     H               ;POINT TO PORT
f590  7e            3451   3459         MOV     A,M             ;GET IT
f591  23            3452   3460         INX     H               ;POINT TO NEXT INST
f592  22 3e d1      3453   3461         SHLD    LD13E           ;AND MAKE IT NEXT TO EXEC
f595  32 4d d1      3454   3462         STA     LD14C+1         ;PUT PORT INTO SIM'S INST REG
f598  cd a1 f8      3455   3463         CALL    LF8A1           ;SEARCH INPUT PORT TABLE
f59b  c2 ae f5      3456   3464         JNZ     LF5AE           ;JUMP IF PORT NOT IN TABLE
f59e  7e            3457   3465         MOV     A,M             ;GET PORT I/O TYPE
f59f  b7            3458   3466         ORA     A               ;SET FLAGS
f5a0  ca ae f5      3459   3467         JZ      LF5AE           ;IF PORT SIMULATED
f5a3  fa 34 f6      3460   3468         JM      LF634           ;TO REALLY EXEC I/O INST
f5a6  23            3461   3469         INX     H               ;ELSE PRESET, POINT TO VALUE
f5a7  7e            3462   3470         MOV     A,M             ;GET IT
f5a8  32 4a d1      3463   3471         STA     LD14A           ;TO SIM'S ACCUM (WHERE ELSE ?)
f5ab  c3 6a f6      3464   3472         JMP     LF66A           ;TO DISPLAY & DO NEXT INST
                    3465   3473 ;
                    3466   3474 ;COME HERE TO EXECUTE SIMULATED INPUT INST
                    3467   3475 ;
f5ae  11 d2 f5      3468   3476 LF5AE:  LXI     D,LF5D2         ;POINT TO INPUT MESSAGE
f5b1  cd d9 f5      3469   3477         CALL    LF5D9           ;PRINT PGM CTR & MESSAGE
f5b4  cd 72 e1      3470   3478         CALL    READ            ;GET USER'S ANSWER
f5b7  cd 6a e2      3471   3479         CALL    ZBUF            ;CLEAR ABUF
f5ba  21 e4 d1      3472   3480         LXI     H,IBUF          ;POINT TO INPUT BUFFER
f5bd  cd cf ee      3473   3481         CALL    SBL1            ;SCAN PAST SPACES
f5c0  cd eb f2      3474   3482         CALL    NUMS            ;CONVERT TO BINARY
f5c3  da 49 f9      3475   3483         JC      LF949           ;IF ERROR IN ANSWER
f5c6  7c            3476   3484         MOV     A,H             ;GET HIGH ORDER BYTE
f5c7  b7            3477   3485         ORA     A               ;SET FLAGS
f5c8  c2 ae f5      3478   3486         JNZ     LF5AE           ;MAKE USER DO IT AGAIN IF > 255
f5cb  7d            3479   3487         MOV     A,L             ;GET LOW ORDER BYTE
f5cc  32 4a d1      3480   3488         STA     LD14A           ;STUFF IT INTO SIM'S ACCUM
f5cf  c3 26 f6      3481   3489         JMP     LF626           ;DO CR/LF & FINSIH UP
                    3482   3490 ;
f5d2  49 4e 50 55   3483   3491 LF5D2:  DB      'INPUT '
f5d6  54 20         3483   3492
f5d8  0d            3484   3493         DB      0DH
                    3485   3494 ;
                    3486   3495 ;ROUTINE TO PRINT INPUT OR OUTPUT MESSAGE FOR SIMULATED I/O
                    3487   3496 ;
f5d9  cd 16 e2      3488   3497 LF5D9:  CALL    CRLF            ;DO CR/LF
f5dc  d5            3489   3498         PUSH    D               ;SAVE D,E
f5dd  cd b8 f6      3490   3499         CALL    LF6B8           ;PRINT PGM COUNTER & SPACES
f5e0  d1            3491   3500         POP     D               ;RESTORE REGS
f5e1  eb            3492   3501         XCHG                    ;MESSAGE ADDR TO H,L
f5e2  cd 80 e3      3493   3502         CALL    SCRN            ;PRINT INPUT OR OUTPUT MSG
f5e5  2a 3c d1      3494   3503         LHLD    LD13C           ;GET SIM'S PGM CTR
f5e8  23            3495   3504         INX     H               ;INCR, POINTING TO PORT
f5e9  7e            3496   3505         MOV     A,M             ;GET PORT IN ACCUM
f5ea  cd 6f e5      3497   3506         CALL    DUMO            ;PRINT PORT
f5ed  06 3d         3498   3507         MVI     B,'='           ;FOLLOWED BY EQUALS SIGN
f5ef  c3 cf d0      3499   3508         JMP     OUT8            ;AND THEN RETURN
                    3500   3509 ;
                    3501   3510 ;ROUTINE TO PROCESS OUTPUT INSTRUCTION
                    3502   3511 ;
f5f2  23            3503   3512 LF5F2:  INX     H               ;POINT TO PORT
f5f3  7e            3504   3513         MOV     A,M             ;GET IT
f5f4  23            3505   3514         INX     H               ;POINT TO NEXT INST
f5f5  22 3e d1      3506   3515         SHLD    LD13E           ;SAVE AS ADDR OF NEXT INST
f5f8  32 4d d1      3507   3516         STA     LD14C+1         ;PUT PORT IN SIM'S INST REG
f5fb  cd 97 f8      3508   3517         CALL    LF897           ;SEARCH OUTPUT TABLE
f5fe  3e 01         3509   3518         MVI     A,1             ;ASSUME SIMULATED
f600  c2 04 f6      3510   3519         JNZ     LF604           ;IF PORT NOT IN TABLE
f603  7e            3511   3520         MOV     A,M             ;GET TYPE OUTPUT
f604  b7            3512   3521 LF604:  ORA     A               ;SET FLAGS
f605  fa 34 f6      3513   3522         JM      LF634           ;TO REALLY EXECUTE OUT INST
f608  f5            3514   3523         PUSH    PSW             ;SAVE ACCUM & FLAGS
f609  11 2c f6      3515   3524         LXI     D,LF62C         ;POINT TO OUTPUT MESSAGE
f60c  cd d9 f5      3516   3525         CALL    LF5D9           ;PRINT IT
f60f  f1            3517   3526         POP     PSW             ;RESTORE FLAGS & ACCUM
f610  b7            3518   3527         ORA     A               ;SET FLAGS
f611  3a 4a d1      3519   3528         LDA     LD14A           ;GET CONTENTS OF SIM'S ACCUM
f614  47            3520   3529         MOV     B,A             ;MOVE TO B
f615  ca 1e f6      3521   3530         JZ      LF61E           ;ASCII MODE (UNLESS CNTL CHAR)
f618  cd 47 f7      3522   3531 LF618:  CALL    LF747           ;PRINT ACC USING CUR MODE
f61b  c3 26 f6      3523   3532         JMP     LF626           ;DO CR/LF, PRINT REGS & DO NEXT
f61e  fe 20         3524   3533 LF61E:  CPI     20H             ;TEST FOR CONTROL CHAR
f620  da 18 f6      3525   3534         JC      LF618           ;PRT USING CUR MODE, NOT ASCII
f623  cd cf d0      3526   3535         CALL    OUT8            ;NOT CNTL CHAR, OK TO OUTPUT
f626  cd 16 e2      3527   3536 LF626:  CALL    CRLF            ;NOW DO CR/LF TO MAKE IT PRETTY
f629  c3 6a f6      3528   3537         JMP     LF66A           ;THEN PRINT REGS & DO NEXT INST
                    3529   3538 ;
f62c  4f 55 54 50   3530   3539 LF62C:  DB      'OUTPUT '
f630  55 54 20      3530   3540
f633  0d            3531   3541         DB      0DH
                    3532   3542 ;
                    3533   3543 ;COME HERE TO EXECUTE AN INST.
                    3534   3544 ;LOAD REAL 8080 REGS FROM SIMULATORS REGS, EXEC INST
                    3535   3545 ;AND THEN UNLOAD 8080'S REGS TO SIMULATORS REGS
                    3536   3546 ;
f634  31 40 d1      3537   3547 LF634:  LXI     SP,LD140        ;POINT STACK AT SIMULATORS REGS
f637  3e c3         3538   3548         MVI     A,0C3H          ;JUMP INST
f639  32 4f d1      3539   3549         STA     LD14F           ;STORE JUST AFTER INST TO SIMUL
f63c  21 52 f6      3540   3550         LXI     H,LF652         ;RETURN POINT AFTER INST EXECUT
f63f  22 50 d1      3541   3551         SHLD    LD14F+1         ;STORE IT JUST AFTER JUMP INST
f642  e1            3542   3552         POP     H               ;LOAD 8080 H,L FROM SIM STK PTR
f643  f1            3543   3553         POP     PSW             ;LOAD 8080 PSW FROM SIMULATOR
f644  33            3544   3554         INX     SP              ;SKIP L FOR NOW
f645  33            3545   3555         INX     SP              ;SKIP H FOR NOW
f646  d1            3546   3556         POP     D               ;LOAD 8080 D,E FROM SIMULATOR
f647  c1            3547   3557         POP     B               ;LOAD 8080 B,C FROM SIMULATOR
f648  f9            3548   3558         SPHL                    ;MOVE SIM STACK TO 8080 STACK
f649  2a 44 d1      3549   3559         LHLD    LD144           ;LOAD 8080 H,L FROM SIM H,L
f64c  3a 4a d1      3550   3560         LDA     LD14A           ;GET SIMULATED ACCUM
f64f  c3 4c d1      3551   3561         JMP     LD14C           ;EXECUTE INST TO BE SIMULATED
                    3552   3562 ;
                    3553   3563 ;RETURN HERE AFTER EXECUTING THE "SIMULATED" INST
                    3554   3564 ;
f652  32 4a d1      3555   3565 LF652:  STA     LD14A           ;SAVE 8080 ACCUM INTO SIMULTR
f655  22 44 d1      3556   3566         SHLD    LD144           ;SAVE 8080 H,L INTO SIMULATOR
f658  17            3557   3567         RAL                     ;SAVE CARRY FLAG DURING DAD
f659  21 00 00      3558   3568         LXI     H,0             ;SETTING UP ....
f65c  39            3559   3569         DAD     SP              ;TO GET THE STACK POINTER
f65d  31 4a d1      3560   3570         LXI     SP,LD14A        ;POINT CPU STACK TO REG AREA
f660  c5            3561   3571         PUSH    B               ;SAVE 8080 B,C INTO SIMULATOR
f661  d5            3562   3572         PUSH    D               ;SAVE 8080 D,E INTO SIMULATOR
f662  3b            3563   3573         DCX     SP              ;SKIP H (ALREADY STORED)
f663  3b            3564   3574         DCX     SP              ;SKIP L (ALREADY STORED)
f664  1f            3565   3575         RAR                     ;RESTORE CARRY FLAG
f665  f5            3566   3576         PUSH    PSW             ;SAVE 8080 PSW INTO SIMULATOR
f666  e5            3567   3577         PUSH    H               ;SAVE 8080 STK PNTR INTO SIM
f667  31 2b d1      3568   3578         LXI     SP,LD12B        ;RELOAD 8080'S STACK POINTER
f66a  db ff         3569   3579 LF66A:  IN      0FFH            ;GET SENSE SWITCHES
f66c  e6 80         3570   3580         ANI     80H             ;MASK HIGH ORDER BIT
f66e  c2 97 f6      3571   3581         JNZ     LF697           ;FORCE RETURN TO COMMAND MODE
f671  cd a4 d0      3572   3582         CALL    STAT            ;SEE IF KEYBOARD CHAR WAITING
f674  ca 7f f6      3573   3583         JZ      LF67F           ;NO - CONTINUE PROCESSING
f677  cd cc d0      3574   3584         CALL    IN8             ;YES - GET CHAR
f67a  fe 18         3575   3585         CPI     'X'-40H         ;CONTROL-X ?
f67c  ca 97 f6      3576   3586         JZ      LF697           ;YES - FORCE RET TO COMND MODE
f67f  3a 34 d1      3577   3587 LF67F:  LDA     LD134           ;GET BREAKPOINT FLAG
f682  b7            3578   3588         ORA     A               ;SET FLAGS
f683  ca 9d f6      3579   3589         JZ      LF69D           ;JMP IF NO BKPT SET
f686  2a 38 d1      3580   3590         LHLD    LD138           ;BKPT ADDR TO H,L
f689  3a 3d d1      3581   3591         LDA     LD13C+1         ;HIGH BYTE OF SIM P.C.
f68c  bc            3582   3592         CMP     H               ;COMPARE TO BKPT
f68d  c2 af f6      3583   3593         JNZ     LF6AF           ;BKPT NOT REACHED
f690  3a 3c d1      3584   3594         LDA     LD13C           ;GET LOW BYTE OF P.C.
f693  bd            3585   3595         CMP     L               ;COMPARE TO BKPT
f694  c2 af f6      3586   3596         JNZ     LF6AF           ;BKPT NOT REACHED
                    3587   3597 ;
                    3588   3598 ;COME HERE WHEN BREAKPOINT IS REACHED
                    3589   3599 ;
f697  cd ca f6      3590   3600 LF697:  CALL    LF6CA           ;PRINT REGS, P.C., ETC.
f69a  c3 74 f7      3591   3601         JMP     LF774           ;RESTART SIMULATOR
                    3592   3602 ;
                    3593   3603 ;GET HERE AFTER EA. INST IN SIMULATED CONT. RUN MODE
                    3594   3604 ;
f69d  cd ca f6      3595   3605 LF69D:  CALL    LF6CA           ;PRINT REGS, PC, ETC
f6a0  db ff         3596   3606         IN      0FFH            ;GET SENSE SWITCHES
f6a2  e6 40         3597   3607         ANI     40H             ;MASK CONTINUOUS RUN BIT
f6a4  cc cc d0      3598   3608         CZ      IN8             ;IF CONT RUN, CK KYBD PORT
f6a7  fe 18         3599   3609         CPI     'X'-40H         ;CONTROL-X WAITING ?
f6a9  ca 74 f7      3600   3610         JZ      LF774           ;YES - RETURN TO SIM COMND MODE
                    3601   3611 ;
                    3602   3612 ;SIMULATOR "GO" COMMAND
                    3603   3613 ;
f6ac  cd 16 e2      3604   3614 LF6AC:  CALL    CRLF            ;DO CR/LF
f6af  2a 3e d1      3605   3615 LF6AF:  LHLD    LD13E           ;GET ADDR OF INST TO SIMULATE
f6b2  22 3c d1      3606   3616         SHLD    LD13C           ;AND SAVE IT AS SIM PGM COUNTER
f6b5  c3 00 f4      3607   3617         JMP     LF400           ;SIMULATE THE INSTRUCTION
                    3608   3618 ;
                    3609   3619 ;ROUTINE TO PRINT OUT SIMULATORS P.C. AND TWO SPACES
                    3610   3620 ;
f6b8  3a 3d d1      3611   3621 LF6B8:  LDA     LD13C+1         ;GET HIGH ORDER SIM P.C. BYTE
f6bb  57            3612   3622         MOV     D,A             ;TO D
f6bc  3a 3c d1      3613   3623         LDA     LD13C           ;NOW LOW ORDER BYTE
f6bf  5f            3614   3624         MOV     E,A             ;D,E HAVE P.C.
f6c0  cd 5c e5      3615   3625         CALL    ADOUT           ;PRINT IT IN HEX
f6c3  cd 5c e3      3616   3626         CALL    LE35C           ;PRINT SPACE
f6c6  cd 5c e3      3617   3627         CALL    LE35C           ;PRINT SPACE
f6c9  c9            3618   3628         RET                     ;DONE
                    3619   3629 ;
                    3620   3630 ;ROUTINE TO PRINT OUT SIMULATORS PC AND ALL FLAGS & REGS
                    3621   3631 ;
f6ca  cd b8 f6      3622   3632 LF6CA:  CALL    LF6B8           ;PRINT PC & SPACES
f6cd  3a 42 d1      3623   3633         LDA     LD142           ;GET FLAG REGISTER
f6d0  4f            3624   3634         MOV     C,A             ;SAVE IT IN C
f6d1  e6 01         3625   3635         ANI     01H             ;MASK CARRY BIT
f6d3  cd 3c f7      3626   3636         CALL    LF73C           ;PRINT A 0 OR 1
f6d6  e6 80         3627   3637         ANI     80H             ;MASK SIGN BIT
f6d8  cd 3c f7      3628   3638         CALL    LF73C           ;PRINT A 0 OR 1
f6db  e6 10         3629   3639         ANI     10H             ;MASK AUX CARRY BIT
f6dd  cd 3c f7      3630   3640         CALL    LF73C           ;PRINT A 0 OR 1
f6e0  e6 04         3631   3641         ANI     04H             ;MASK PARITY BIT
f6e2  cd 3c f7      3632   3642         CALL    LF73C           ;PRINT A 0 OR 1
f6e5  e6 40         3633   3643         ANI     40H             ;MASK ZERO BIT
f6e7  cd 3c f7      3634   3644         CALL    LF73C           ;PRINT A 0 OR 1
f6ea  cd 5c e3      3635   3645         CALL    LE35C           ;PRINT A SPACE
f6ed  11 4a d1      3636   3646         LXI     D,LD14A         ;POINT TO ACCUM
f6f0  1a            3637   3647         LDAX    D               ;GET IT
f6f1  cd 56 f7      3638   3648         CALL    LF756           ;PRINT IT USING CUR. MODE
f6f4  cd 5c e3      3639   3649         CALL    LE35C           ;PRINT SPACE
f6f7  0e 04         3640   3650         MVI     C,04H           ;NO OF REGS TO OUTPUT
f6f9  1b            3641   3651 LF6F9:  DCX     D               ;POINT TO NEXT REG
f6fa  1a            3642   3652         LDAX    D               ;GET IT
f6fb  cd 56 f7      3643   3653         CALL    LF756           ;PRINT IT USING CUR MODE
f6fe  0d            3644   3654         DCR     C               ;NO OF REGS LEFT
f6ff  c2 f9 f6      3645   3655         JNZ     LF6F9           ;DO NEXT IF NOT DONE
f702  cd 5c e3      3646   3656         CALL    LE35C           ;PRINT SPACE
f705  1b            3647   3657         DCX     D               ;POINT TO H
f706  1a            3648   3658         LDAX    D               ;GET IT
f707  cd 56 f7      3649   3659         CALL    LF756           ;PRINT IT
f70a  1b            3650   3660         DCX     D               ;POINT TO L
f70b  1a            3651   3661         LDAX    D               ;GET IT
f70c  cd 56 f7      3652   3662         CALL    LF756           ;PRINT IT
f70f  2a 44 d1      3653   3663         LHLD    LD144           ;GET H,L
f712  7e            3654   3664         MOV     A,M             ;GET "M" CHAR
f713  cd 56 f7      3655   3665         CALL    LF756           ;PRINT IT
f716  cd 5c e3      3656   3666         CALL    LE35C           ;SPACE
f719  3a 41 d1      3657   3667         LDA     LD140+1         ;STACK PTR HIGH BYTE
f71c  57            3658   3668         MOV     D,A             ;TO D
f71d  3a 40 d1      3659   3669         LDA     LD140           ;STACK PTR LOW BYTE
f720  5f            3660   3670         MOV     E,A             ;D,E HAS STK PTR ADDR
f721  cd 5c e5      3661   3671         CALL    ADOUT           ;PRINT STACK POINTER
f724  11 4c d1      3662   3672         LXI     D,LD14C         ;POINT TO CURRENT INST
f727  cd 5c e3      3663   3673         CALL    LE35C           ;PRINT SPACE
f72a  cd 33 f7      3664   3674         CALL    LF733           ;PRINT BYTE & SPACE
f72d  cd 33 f7      3665   3675         CALL    LF733           ;PRINT BYTE & SPACE
f730  c3 33 f7      3666   3676         JMP     LF733           ;A BIT OF SLOPPY CODE
f733  cd 5c e3      3667   3677 LF733:  CALL    LE35C           ;PRINT A SPACE
f736  1a            3668   3678         LDAX    D               ;GET BYTE POINTED TO BY D,E
f737  13            3669   3679         INX     D               ;POINT TO NEXT
f738  cd 47 f7      3670   3680         CALL    LF747           ;PRINT THE BYTE
f73b  c9            3671   3681         RET                     ;DONE
                    3672   3682 ;
                    3673   3683 ;PRINT A 1 OR A ZERO (USED TO PRINT FLAG BYTES)
                    3674   3684 ;
f73c  06 31         3675   3685 LF73C:  MVI     B,'1'           ;ASSUME 1
f73e  c2 42 f7      3676   3686         JNZ     LF742           ;MUST BE IF IT'S NOT ZERO
f741  05            3677   3687         DCR     B               ;NOT 1, MAKE IT 0
f742  cd cf d0      3678   3688 LF742:  CALL    OUT8            ;PRINT IT, WHATEVER
f745  79            3679   3689         MOV     A,C             ;RESTORE THE FLAG BYTE IN A
f746  c9            3680   3690         RET                     ;DONE
                    3681   3691 ;
                    3682   3692 ;PRINT A BYTE USING CURRENT SIMULATOR MODE
                    3683   3693 ;
f747  21 4b d1      3684   3694 LF747:  LXI     H,LD14B         ;POINT TO SIMULATOR MODE
f74a  46            3685   3695         MOV     B,M             ;GET IT
f74b  05            3686   3696         DCR     B               ;SETTING FLAGS
f74c  f2 53 f7      3687   3697         JP      LF753           ;IF MODE WASN'T ZERO
f74f  cd 6f e5      3688   3698         CALL    DUMO            ;USE ALS-8 MODE
f752  c9            3689   3699         RET                     ;DONE
f753  c3 48 e3      3690   3700 LF753:  JMP     DOUT            ;USE DECIMAL
                    3691   3701 ;
                    3692   3702 ;ROUTINE TO PRINT BYTE FOLLOWED BY SPACE
                    3693   3703 ;
f756  cd 47 f7      3694   3704 LF756:  CALL    LF747           ;PRINT THE BYTE
f759  c3 5c e3      3695   3705         JMP     LE35C           ;THEN DO SPACE & RETURN
                    3696   3706 ;
                    3697   3707 ;THIS IS THE SIMULATOR MAIN ENTRY POINT
                    3698   3708 ;
f75c  3a e8 d1      3699   3709 SIMU:   LDA     IBUF+4          ;GET CHAR AFTER 'SIMU'
f75f  fe 21         3700   3710         CPI     ' '+1           ;COMPARE TO BLANK
f761  d2 74 f7      3701   3711         JNC     LF774           ;SKIP INIT. IF NOT BLANK
f764  af            3702   3712         XRA     A               ;ELSE GET A ZERO
f765  32 36 d1      3703   3713         STA     LD136           ;CLEAR INPUT PORT ASSIGN FLAG
f768  32 4b d1      3704   3714         STA     LD14B           ;CLEAR SIMULATOR MODE
f76b  32 37 d1      3705   3715         STA     LD137           ;CLEAR OUTPUT PORT ASSIGN FLAGS
f76e  32 35 d1      3706   3716         STA     LD135           ;CLEAR REAL TIME RUN FLAG
f771  32 34 d1      3707   3717 LF771:  STA     LD134           ;CLEAR BRKPT FLAG
                    3708   3718 ;
                    3709   3719 ;WARM RESTART ENTRY POINT
                    3710   3720 ;
f774  31 2f d1      3711   3721 LF774:  LXI     SP,SMODE        ;SET STACK
f777  cd 16 e2      3712   3722         CALL    CRLF            ;DO CR/LF
f77a  06 2a         3713   3723         MVI     B,'*'           ;PROMPT
f77c  cd cf d0      3714   3724         CALL    OUT8            ;PRINT IT
f77f  cd 72 e1      3715   3725         CALL    READ            ;GET A COMND LINE IN IBUF
f782  3a e4 d1      3716   3726         LDA     IBUF            ;GET 1ST CHAR
f785  fe 50         3717   3727         CPI     'P'             ;SET PGM COUNTER ?
f787  c2 96 f7      3718   3728         JNZ     LF796           ;NO - TRY OTHER COMMANDS
f78a  cd 32 f9      3719   3729         CALL    LF932           ;GET OPERAND VALUE TO H,L
f78d  22 3e d1      3720   3730         SHLD    LD13E           ;? - THIS IS NOT THE SIM P.C.
f790  22 3c d1      3721   3731         SHLD    LD13C           ;THE SIMULATORS PGM. COUNTER
f793  c3 74 f7      3722   3732         JMP     LF774           ;GET NEXT COMMAND
f796  fe 42         3723   3733 LF796:  CPI     'B'             ;SET BREAKPOINT ?
f798  c2 a4 f7      3724   3734         JNZ     LF7A4           ;NO - TRY ANOTHER COMMAND
f79b  cd 32 f9      3725   3735         CALL    LF932           ;GET ADDR TO H,L
f79e  22 38 d1      3726   3736         SHLD    LD138           ;SET BREAKPOINT ADDR
f7a1  c3 71 f7      3727   3737         JMP     LF771           ;SET BKPT FLAG & RESTART
f7a4  fe 52         3728   3738 LF7A4:  CPI     'R'             ;SET REAL-TIME RUN ADDR ?
f7a6  c2 b7 f7      3729   3739         JNZ     LF7B7           ;NO - TRY ANOTHER COMMAND
f7a9  cd 32 f9      3730   3740         CALL    LF932           ;GET ADDR TO H,L
f7ac  22 3a d1      3731   3741         SHLD    LD13A           ;SET REAL-TIME RUN ADDR
f7af  3e 01         3732   3742         MVI     A,1             ;GET A ONE
f7b1  32 35 d1      3733   3743         STA     LD135           ;AND USE IT TO SET R.T. RUN FLG
f7b4  c3 74 f7      3734   3744         JMP     LF774           ;RESTART & GET NEXT COMMAND
                    3735   3745 ;
                    3736   3746 ;TEST FOR AND PROCESS THE CLEAR COMMANDS
                    3737   3747 ;
f7b7  fe 43         3738   3748 LF7B7:  CPI     'C'             ;CLEAR COMMAND ?
f7b9  c2 de f7      3739   3749         JNZ     LF7DE           ;NO - TRY OTHER COMMANDS
f7bc  3a e5 d1      3740   3750         LDA     IBUF+1          ;YES - GET NEXT CHAR
f7bf  21 34 d1      3741   3751         LXI     H,LD134         ;POINT TO BKPT FLAG
f7c2  fe 42         3742   3752         CPI     'B'             ;CLEAR BREAKPOINT ?
f7c4  ca d9 f7      3743   3753         JZ      LF7D9           ;YES - DO IT
f7c7  23            3744   3754         INX     H               ;NO, POINT TO R.T. RUN FLAG
f7c8  fe 52         3745   3755         CPI     'R'             ;CLEAR R.T. RUN ADDR ?
f7ca  ca d9 f7      3746   3756         JZ      LF7D9           ;YES - DO IT
f7cd  23            3747   3757         INX     H               ;NO, POINT TO INPT PT ASGN FLAG
f7ce  fe 49         3748   3758         CPI     'I'             ;CLEAR INPUT PORT ASSIGNMENTS ?
f7d0  ca d9 f7      3749   3759         JZ      LF7D9           ;YES - DO IT
f7d3  23            3750   3760         INX     H               ;NO, POINT TO OUTP PT ASGN FLAG
f7d4  fe 4f         3751   3761         CPI     'O'             ;CLEAR OUTPUT PORT ASSGNMENTS ?
f7d6  c2 49 f9      3752   3762         JNZ     LF949           ;NO - INVALID CLEAR COMMAND
f7d9  36 00         3753   3763 LF7D9:  MVI     M,0             ;CLEAR FLG H,L POINT TO
f7db  c3 74 f7      3754   3764         JMP     LF774           ;AND RESTART SIMULATOR
f7de  fe 47         3755   3765 LF7DE:  CPI     'G'             ;GO COMMAND ?
f7e0  ca ac f6      3756   3766         JZ      LF6AC           ;YES - DO IT
f7e3  fe 44         3757   3767         CPI     'D'             ;DUMP COMMAND ?
f7e5  c2 f1 f7      3758   3768         JNZ     LF7F1           ;NO - TRY NEXT COMMAND
f7e8  cd 32 f9      3759   3769         CALL    LF932           ;GET ADDR IN H,L
f7eb  cd 27 e5      3760   3770         CALL    DUMP+3          ;AND USE ALS-8 DUMP CODE
f7ee  c3 74 f7      3761   3771         JMP     LF774           ;THEN RESTART THE SIMULATOR
f7f1  fe 45         3762   3772 LF7F1:  CPI     'E'             ;ENTER COMMAND ?
f7f3  c2 02 f8      3763   3773         JNZ     LF802           ;NO, TEST OTHER COMMANDS
f7f6  cd 32 f9      3764   3774         CALL    LF932           ;GET ADDRESS TO H,L
f7f9  cd 0b e8      3765   3775         CALL    ENTS            ;USE ALS-8 ENTER CODE
f7fc  da 49 f9      3766   3776         JC      LF949           ;IF ERROR
f7ff  c3 74 f7      3767   3777         JMP     LF774           ;ELSE RESTART
f802  fe 58         3768   3778 LF802:  CPI     'X'             ;EXIT SIMULATOR COMMAND ?
f804  ca 60 e0      3769   3779         JZ      EORMS           ;YES - RET TO ALS-8
f807  fe 4d         3770   3780         CPI     'M'             ;MODE COMMAND ?
f809  c2 1f f8      3771   3781         JNZ     LF81F           ;NO - TEST OTHER COMMANDS
f80c  cd 32 f9      3772   3782         CALL    LF932           ;GET VALUE IN H,L
f80f  7d            3773   3783         MOV     A,L             ;NOW TO A
f810  06 01         3774   3784         MVI     B,1             ;ASSUME HEX
f812  fe 10         3775   3785         CPI     16              ;HEX ?
f814  ca 18 f8      3776   3786         JZ      LF818           ;YES - SKIP NEXT STMNT
f817  05            3777   3787         DCR     B               ;MAKE IT 0 ==> OCTAL
f818  78            3778   3788 LF818:  MOV     A,B             ;GET FLAG TO A
f819  32 4b d1      3779   3789         STA     LD14B           ;AND UPDATE MODE
f81c  c3 74 f7      3780   3790         JMP     LF774           ;THEN RESTART SIMULATOR
                    3781   3791 ;
                    3782   3792 ;PROCESS THE VARIOUS INPUT COMMANDS
                    3783   3793 ;
f81f  fe 49         3784   3794 LF81F:  CPI     'I'             ;SET INPUT COMMAND ?
f821  c2 63 f8      3785   3795         JNZ     LF863           ;NO - TRY OTHER COMMANDS
f824  cd 32 f9      3786   3796         CALL    LF932           ;GET VALUE TO H,L
f827  7c            3787   3797         MOV     A,H             ;HIGH ORDER BYTE TO A
f828  b7            3788   3798         ORA     A               ;SET FLAGS
f829  c2 49 f9      3789   3799         JNZ     LF949           ;ERROR IF > 256
f82c  7d            3790   3800         MOV     A,L             ;PORT TO A
f82d  cd a1 f8      3791   3801         CALL    LF8A1           ;SEARCH INPUT PORT TABLE
f830  79            3792   3802         MOV     A,C             ;GET NO OF PORTS IN TABLE
f831  fe 10         3793   3803         CPI     16              ;TABLE FULL ?
f833  d2 49 f9      3794   3804         JNC     LF949           ;ERROR THEN
f836  32 36 d1      3795   3805         STA     LD136           ;ELSE UPDATE # OF TABLE ENTRIES
f839  36 ff         3796   3806         MVI     M,0FFH          ;AND MAKE PORT REAL-TIME
f83b  3a e5 d1      3797   3807         LDA     IBUF+1          ;GET CHAR AFTER 'I'
f83e  fe 53         3798   3808         CPI     'S'             ;PRESET ?
f840  c2 54 f8      3799   3809         JNZ     LF854           ;NO - TRY REAL-TIME & CLEAR
f843  eb            3800   3810         XCHG                    ;SAVE TABLE POINTER IN D,E
f844  2a f1 d0      3801   3811         LHLD    BBUF+2          ;GET VALUE OF PRESET
f847  7c            3802   3812         MOV     A,H             ;GET HIGH BYTE
f848  b7            3803   3813         ORA     A               ;SET FLAGS
f849  c2 49 f9      3804   3814         JNZ     LF949           ;ERROR IF > 255
f84c  eb            3805   3815         XCHG                    ;TABLE POINTER BACK TO H,L
f84d  36 01         3806   3816         MVI     M,1             ;SAY PRESET
f84f  23            3807   3817         INX     H               ;MOVE 1 BEYOND INPUT TYPE
f850  73            3808   3818         MOV     M,E             ;AND STORE PRESET VALUE
f851  c3 74 f7      3809   3819         JMP     LF774           ;THEN RESTART SIMULATOR
f854  fe 52         3810   3820 LF854:  CPI     'R'             ;REAL-TIME INPUT ?
f856  ca 74 f7      3811   3821         JZ      LF774           ;RESTART SIMULATR - ALREADY SET
f859  36 00         3812   3822         MVI     M,0             ;ELSE ASSUME SIMULATED
f85b  fe 43         3813   3823         CPI     'C'             ;TEST FOR SIMULATED
f85d  ca 74 f7      3814   3824         JZ      LF774           ;OK IF IT REALLY IS
f860  c3 49 f9      3815   3825         JMP     LF949           ;ELSE ERROR
                    3816   3826 ;
                    3817   3827 ;TEST FOR AND PROCESS THE OUTPUT COMMANDS
                    3818   3828 ;
f863  fe 4f         3819   3829 LF863:  CPI     'O'             ;SET OUTPUT INST ?
f865  c2 bc f8      3820   3830         JNZ     LF8BC           ;NO - TRY OTHER COMMANDS
f868  cd 32 f9      3821   3831         CALL    LF932           ;ELSE GET PORT NO IN H,L
f86b  7c            3822   3832         MOV     A,H             ;HIGH BYTE TO A
f86c  b7            3823   3833         ORA     A               ;SET FLAGS
f86d  c2 49 f9      3824   3834         JNZ     LF949           ;ERROR IF > 255
f870  7d            3825   3835         MOV     A,L             ;PORT TO A
f871  cd 97 f8      3826   3836         CALL    LF897           ;LOOK UP PORT IN TABLE
f874  79            3827   3837         MOV     A,C             ;GET NO OF PORTS IN TABLE
f875  fe 10         3828   3838         CPI     16              ;TABLE FULL ?
f877  d2 49 f9      3829   3839         JNC     LF949           ;ERROR THEN
f87a  32 37 d1      3830   3840         STA     LD137           ;ELSE UPDATE # OF TABLE ENTRIES
f87d  06 ff         3831   3841         MVI     B,0FFH          ;ASSUME REAL-TIME
f87f  3a e5 d1      3832   3842         LDA     IBUF+1          ;GET NEXT CHAR OF COMMAND
f882  fe 52         3833   3843         CPI     'R'             ;REAL-TIME ?
f884  ca 90 f8      3834   3844         JZ      LF890           ;ENTER R.T. IN TABLE & RESTART
f887  04            3835   3845         INR     B               ;NOT R.T., ASSUME ASCII
f888  fe 41         3836   3846         CPI     'A'             ;ASCII ?
f88a  ca 90 f8      3837   3847         JZ      LF890           ;YES - PUT IN TABLE
f88d  04            3838   3848         INR     B               ;NOT R.T. OR ASCII - SIMULATED?
f88e  fe 43         3839   3849         CPI     'C'             ;CLEAR (SIMULATED) ?
f890  70            3840   3850 LF890:  MOV     M,B             ;SET OUTPUT MODE
f891  ca 74 f7      3841   3851         JZ      LF774           ;MODE SET, RESTART
f894  c3 49 f9      3842   3852         JMP     LF949           ;ERROR, SIMULATED ASSUMED
f897  21 62 d1      3843   3853 LF897:  LXI     H,LD162         ;POINT TO OUTPUT TABLE
f89a  47            3844   3854         MOV     B,A             ;PORT NO TO B
f89b  3a 37 d1      3845   3855         LDA     LD137           ;NO OF TABLE ENTRIES
f89e  c3 a8 f8      3846   3856         JMP     LF8A8           ;SEARCH TABLE
f8a1  21 52 d1      3847   3857 LF8A1:  LXI     H,LD152         ;POINT TO INPUT TABLE
f8a4  47            3848   3858         MOV     B,A             ;PORT NO TO B
f8a5  3a 36 d1      3849   3859         LDA     LD136           ;NO OF TABLE ENTRIES
f8a8  4f            3850   3860 LF8A8:  MOV     C,A             ;TABLE ENTRIES TO C
f8a9  b7            3851   3861         ORA     A               ;SET FLAGS
f8aa  78            3852   3862         MOV     A,B             ;PORT NO BACK TO A
f8ab  41            3853   3863         MOV     B,C             ;NO OF ENTRIES TO B
f8ac  ca b8 f8      3854   3864         JZ      LF8B8           ;IF TABLE CURRENTLY EMPTY
f8af  be            3855   3865 LF8AF:  CMP     M               ;POINTING AT CORRECT PORT ?
f8b0  23            3856   3866         INX     H               ;POINT TO I/O TYPE FOR PORT
f8b1  c8            3857   3867         RZ                      ;IF WE HAVE PORT
f8b2  23            3858   3868         INX     H               ;POINT TO I/O BYTE VALUE
f8b3  23            3859   3869         INX     H               ;AND TO NEXT PORT
f8b4  05            3860   3870         DCR     B               ;DCR NO OF TABLE ENTRIES LEFT
f8b5  c2 af f8      3861   3871         JNZ     LF8AF           ;AND CHECK REMAINING ENTRIES
f8b8  77            3862   3872 LF8B8:  MOV     M,A             ;PUT PORT IN TABLE
f8b9  23            3863   3873         INX     H               ;AND POINT TO I/O TYPE
f8ba  0c            3864   3874         INR     C               ;INR NO OF ENTRIES IN TABLE
f8bb  c9            3865   3875         RET                     ;AND RETURN DONE
                    3866   3876 ;
                    3867   3877 ;PROCESS THE SET REGISTER/FLAG COMMANDS
                    3868   3878 ;
f8bc  fe 53         3869   3879 LF8BC:  CPI     'S'             ;SET REGISTERS ?
f8be  c2 49 f9      3870   3880         JNZ     LF949           ;THERE AREN'T ANY COMMANDS LEFT
f8c1  21 e5 d1      3871   3881         LXI     H,IBUF+1        ;POINT TO NEXT BYTE
f8c4  22 01 d1      3872   3882         SHLD    PNTR            ;AND SAVE CHAR POINTER
f8c7  cd 6a e2      3873   3883 LF8C7:  CALL    ZBUF            ;CLEAR ABUF
f8ca  cd cc ee      3874   3884         CALL    SBLK            ;SCAN TO TEXT
f8cd  da 74 f7      3875   3885         JC      LF774           ;RESTART IF C/R FOUND
f8d0  eb            3876   3886         XCHG                    ;LINE PTR TO D,E
f8d1  0e 0a         3877   3887         MVI     C,10            ;NO OF REGISTERS IN TABLE
f8d3  21 54 f9      3878   3888         LXI     H,LF954         ;POINT TO TABLE
f8d6  be            3879   3889 LF8D6:  CMP     M               ;SAME ?
f8d7  ca e2 f8      3880   3890         JZ      LF8E2           ;FOUND REGISTER TO SET
f8da  23            3881   3891         INX     H               ;ELSE POINT TO NEXT REGISTER
f8db  0d            3882   3892         DCR     C               ;AND DCR COUNT
f8dc  c2 d6 f8      3883   3893         JNZ     LF8D6           ;THEN TEST IT FOR MATCH
f8df  c3 49 f9      3884   3894         JMP     LF949           ;NO MATCH IN TABLE, ERROR
f8e2  79            3885   3895 LF8E2:  MOV     A,C             ;GET DISPLACEMENT INTO TABLE
f8e3  32 09 d1      3886   3896         STA     TEMP            ;AND SAVE IT
f8e6  eb            3887   3897         XCHG                    ;POINTER TO H,L
f8e7  23            3888   3898         INX     H               ;POINT TO NEXT CHAR
f8e8  7e            3889   3899         MOV     A,M             ;GET IT
f8e9  fe 3d         3890   3900         CPI     '='             ;EQUALS SIGN ?
f8eb  c2 49 f9      3891   3901         JNZ     LF949           ;ERROR IF NOT
f8ee  23            3892   3902         INX     H               ;POINT TO ARGUMENT
f8ef  7e            3893   3903         MOV     A,M             ;GET IT
f8f0  11 df d0      3894   3904         LXI     D,ABUF          ;POINT TO ABUF
f8f3  cd 12 f9      3895   3905         CALL    LF912           ;CONVERT ARGUMENT TO BINARY
f8f6  da 49 f9      3896   3906         JC      LF949           ;IF ERROR
f8f9  3a 09 d1      3897   3907         LDA     TEMP            ;GET DISP. INTO TABLE BACK
f8fc  fe 01         3898   3908         CPI     1               ;SETTING STACK POINTER ?
f8fe  ca 2c f9      3899   3909         JZ      LF92C           ;HANDLE THAT SEPARATELY
f901  4f            3900   3910         MOV     C,A             ;DISPLACEMENT TO C
f902  7c            3901   3911         MOV     A,H             ;GET HIGH ORDER BYTE OF VALUE
f903  b7            3902   3912         ORA     A               ;SET FLAGS
f904  c2 49 f9      3903   3913         JNZ     LF949           ;ERROR IF > 255
f907  7d            3904   3914         MOV     A,L             ;GET VALUE TO A
f908  21 40 d1      3905   3915         LXI     H,LD140         ;REGISTER TABLE IN RAM
f90b  06 00         3906   3916         MVI     B,0             ;B,C HAS DISPLACEMENT INTO TBL
f90d  09            3907   3917         DAD     B               ;H,L HAS ABSOLUTE ADDR
f90e  77            3908   3918         MOV     M,A             ;UPDATE SIM/8080 REGISTER
f90f  c3 c7 f8      3909   3919         JMP     LF8C7           ;DO NEXT REGISTER(S) IF ANY
                    3910   3920 ;
                    3911   3921 ;ROUTINE TO CONVERT KEYED IN VALUE TO 16 BIT VALUE IN H,L
                    3912   3922 ;
f912  cd 3e f1      3913   3923 LF912:  CALL    ALPS            ;PUT ARGUMENT INTO ABUF
f915  1b            3914   3924         DCX     D               ;POINT TO LAST CHAR
f916  1a            3915   3925         LDAX    D               ;GET IT
f917  01 df d0      3916   3926         LXI     B,ABUF          ;POINT TO ARGUMENT
f91a  fe 44         3917   3927         CPI     'D'             ;DECIMAL ?
f91c  ca 02 f3      3918   3928         JZ      NUM1            ;YES
f91f  fe 51         3919   3929         CPI     'Q'             ;OCTAL ?
f921  ca 0c f3      3920   3930         JZ      NUM3            ;YES
f924  fe 48         3921   3931         CPI     'H'             ;HEX ?
f926  c2 f3 e2      3922   3932         JNZ     EMODE           ;NO, USE STD MODE
f929  c3 07 f3      3923   3933         JMP     NUM2            ;ELSE HEX
f92c  22 40 d1      3924   3934 LF92C:  SHLD    LD140           ;UPDATE SIM/8080 STACK PNTR
f92f  c3 c7 f8      3925   3935         JMP     LF8C7           ;AND DO NEXT REGISTER(S) IF ANY
                    3926   3936 ;
                    3927   3937 ;ROUTINE TO SET SIMULATED PROGRAM COUNTER
                    3928   3938 ;
f932  cd 81 e2      3929   3939 LF932:  CALL    ETRA            ;GET VALUES FROM COMMAND LINE
f935  da 49 f9      3930   3940         JC      LF949           ;IF ERROR
f938  cd 1e e3      3931   3941         CALL    LE31E           ;VALUES TO BIN IN BBUF & BBUF+2
f93b  da 49 f9      3932   3942         JC      LF949           ;ON ERROR
f93e  3a df d0      3933   3943         LDA     ABUF            ;GET FIRST CHAR OF VALUE
f941  b7            3934   3944         ORA     A               ;AND SET FLAGS
f942  ca 49 f9      3935   3945         JZ      LF949           ;ERROR IF NO VALUE GIVEN
f945  2a ef d0      3936   3946         LHLD    BBUF            ;GET VALUE
f948  c9            3937   3947         RET                     ;AND RETURN WITH IT IN H,L
                    3938   3948 ;
                    3939   3949 ;ERROR HANDLER ROUTINE
                    3940   3950 ;
f949  cd 16 e2      3941   3951 LF949:  CALL    CRLF            ;DO CR/LF
f94c  06 3f         3942   3952         MVI     B,'?'           ;GET QUESTION MARK
f94e  cd cf d0      3943   3953         CALL    OUT8            ;AND PRINT IT
f951  c3 74 f7      3944   3954         JMP     LF774           ;THEN RESTART SIMULATOR
                    3945   3955 ;
                    3946   3956 ;TABLE OF REGISTER NAMES FOR THE SET COMMANDS
                    3947   3957 ;VALUES ARE STORED IN A TABLE IN MEMORY AT D143, BUT
                    3948   3958 ;IN REVERSE ORDER.  THERE IS ONE ENTRY HERE FOR EACH
                    3949   3959 ;ENTRY IN THAT TABLE.  NOTE THAT THE ACCUM. APPEARS
                    3950   3960 ;TWICE, ONCE BY ITSELF & ONCE WITH THE FLAGS (AS PSW)
                    3951   3961 ;
f954  41            3952   3962 LF954:  DB      'A'
f955  42            3953   3963         DB      'B'
f956  43            3954   3964         DB      'C'
f957  44            3955   3965         DB      'D'
f958  45            3956   3966         DB      'E'
f959  48            3957   3967         DB      'H'
f95a  4c            3958   3968         DB      'L'
f95b  41            3959   3969         DB      'A'
f95c  46            3960   3970         DB      'F'
f95d  53            3961   3971         DB      'S'
f95e  00            3962   3972         NOP
f95f  00            3963   3973         NOP
f960  00            3964   3974         NOP
f961  00            3965   3975         NOP
f962  00            3966   3976         NOP
f963  00            3967   3977         NOP
f964  00            3968   3978         NOP
f965  00            3969   3979         NOP
f966  00            3970   3980         NOP
f967  00            3971   3981         NOP
f968  00            3972   3982         NOP
f969  00            3973   3983         NOP
                    3974   3984 ;
                    3975   3985 ;COME HERE TO EXECUTE AUTO-NUMBER INPUT MODE
                    3976   3986 ;
                    3977   3987 ;WHAT THIS CODE ACTUALLY DOES IS TO MODIFY THE INPUT ROUTINE
                    3978   3988 ;TO COME INTO A PRE-PROCESSOR AT F99A INSTEAD OF THE NORMAL
                    3979   3989 ;IN8 INPUT ROUTINE.  THAT ROUTINE ACTUALLY DOES THE LINE
                    3980   3990 ;NUMBER PROCESSING.
                    3981   3991 ;
f96a  2a cd d0      3982   3992 AUTO:   LHLD    IN8+1           ;GET ADDR OF CUR INPUT DRIVER
f96d  22 f0 d0      3983   3993         SHLD    BBUF+1          ;AND SAVE IN BBUF
f970  3a df d0      3984   3994         LDA     ABUF            ;SEE IF OPT PARAMETER GIVEN
f973  b7            3985   3995         ORA     A               ;SET FLAGS
f974  ca 83 f9      3986   3996         JZ      LF983           ;NOT GIVEN, START WITH 1
f977  2a 09 d0      3987   3997         LHLD    MAXL            ;GET HALF OF CUR MAX LINE NO
f97a  22 df d0      3988   3998         SHLD    ABUF            ;SAVE IT
f97d  2a 0b d0      3989   3999         LHLD    MAXL+2          ;GET OTHER HALF
f980  c3 89 f9      3990   4000         JMP     LF989           ;SKIP INITIALIZATION
f983  21 30 30      3991   4001 LF983:  LXI     H,3030H         ;TWO ZERO'S
f986  22 df d0      3992   4002         SHLD    ABUF            ;SAVE AS TWO HIGH DIGITS
f989  22 e1 d0      3993   4003 LF989:  SHLD    ABUF+2          ;AND SAVE H,L AS LOW ORDER DGTS
f98c  3e c3         3994   4004         MVI     A,0C3H          ;JUMP INST
f98e  32 ef d0      3995   4005         STA     BBUF            ;BBUF = JUMP INTO AUTO CODE NOW
f991  21 9a f9      3996   4006         LXI     H,LF99A         ;GET ADDR OF LINE NO PROCESSOR
f994  22 cd d0      3997   4007         SHLD    IN8+1           ;USE IT FOR NEW INPUT ROUTINE
f997  c3 d1 e0      3998   4008         JMP     EORNS           ;EVERYTHING'S SET UP
                    3999   4009 ;
                    4000   4010 ;HERE IS THE ROUTINE WHICH ACTUALLY PUTS LINE NOS. ON LINES.
                    4001   4011 ;IT IS SUBSTITUTED FOR THE STANDARD ROUTINE BY THE CODE ABOVE.
                    4002   4012 ;
f99a  cd ef d0      4003   4013 LF99A:  CALL    BBUF            ;CALL THE STD. INPUT ROUTINE
f99d  7d            4004   4014         MOV     A,L             ;GET LOW BYTE ADDR OF CHAR PTR
f99e  fe e4         4005   4015         CPI     IBUF AND 0FFH   ;AT 1ST CHAR OF INPUT BUFFER ?
f9a0  c2 ae f9      4006   4016         JNZ     LF9AE           ;NO - SKIP BEG OF LINE PROC.
f9a3  3e 1b         4007   4017         MVI     A,1BH           ;YES - SEE IF ESCAPE CHAR
f9a5  b8            4008   4018         CMP     B               ;
f9a6  ca 60 e0      4009   4019         JZ      EORMS           ;IT IS ESC - DO COMPLETE RESET
f9a9  21 e9 d1      4010   4020         LXI     H,IBUF+5        ;POINT TO NEW CHAR DEST
f9ac  1e 07         4011   4021         MVI     E,7             ;AND RESET LINE LENGTH
f9ae  3e 0d         4012   4022 LF9AE:  MVI     A,0DH           ;GET ASCII CAR. RET.
f9b0  b8            4013   4023         CMP     B               ;END OF LINE ?
f9b1  78            4014   4024         MOV     A,B             ;PUT CHAR IN ACCUM.
f9b2  c0            4015   4025         RNZ                     ;AND RETURN IF NOT END OF LINE
f9b3  e5            4016   4026         PUSH    H               ;ELSE SAVE IBUF POINTER
f9b4  d5            4017   4027         PUSH    D               ;AND LINE LENGTH
f9b5  11 df d0      4018   4028         LXI     D,ABUF          ;POINT TO CUR LINE NO.
f9b8  21 e2 d0      4019   4029         LXI     H,ABUF+3        ;AND TO END OF LINE NO.
f9bb  7e            4020   4030 LF9BB:  MOV     A,M             ;GET RIGHT-HAND DIGIT
f9bc  3c            4021   4031         INR     A               ;INCREMENT IT
f9bd  fe 3a         4022   4032         CPI     '9'+1           ;GONE PAST 9 ?
f9bf  d2 d8 f9      4023   4033         JNC     LF9D8           ;YES - FIX IT UP
f9c2  77            4024   4034         MOV     M,A             ;ELSE PUT IT BACK
f9c3  21 e4 d1      4025   4035         LXI     H,IBUF          ;POINT TO IBUF
f9c6  06 04         4026   4036         MVI     B,4             ;LENGTH OF LINE NO
f9c8  1a            4027   4037 LF9C8:  LDAX    D               ;GET CHAR FROM LINE NO.
f9c9  77            4028   4038         MOV     M,A             ;AND PUT IT INTO IBUF
f9ca  23            4029   4039         INX     H               ;INR IBUF POINTER
f9cb  13            4030   4040         INX     D               ;INR LINE NO. POINTER
f9cc  05            4031   4041         DCR     B               ;DCR COUNT
f9cd  c2 c8 f9      4032   4042         JNZ     LF9C8           ;AND CONTINUE TILL DONE
f9d0  36 20         4033   4043         MVI     M,' '           ;THEN PUT A SPACE IN IBUF
f9d2  d1            4034   4044         POP     D               ;AND RESTORE REGISTERS
f9d3  06 0d         4035   4045         MVI     B,0DH           ;AND CHARACTER
f9d5  78            4036   4046         MOV     A,B             ;WHICH READ WANTS IN ACCUM
f9d6  e1            4037   4047         POP     H               ;RESTORE REGS
f9d7  c9            4038   4048         RET                     ;AND GO HOME, DONE
f9d8  3e 30         4039   4049 LF9D8:  MVI     A,'0'           ;REPLACE DIGIT WITH A ZERO
f9da  77            4040   4050         MOV     M,A             ;AND PUT IT BACK
f9db  2b            4041   4051         DCX     H               ;POINT TO HIGHER DIGIT
f9dc  c3 bb f9      4042   4052         JMP     LF9BB           ;AND TRY TO INR IT
f9df  00            4043   4053         NOP
f9e0  00            4044   4054         NOP
f9e1  00            4045   4055         NOP
f9e2  00            4046   4056         NOP
f9e3  00            4047   4057         NOP
f9e4  00            4048   4058         NOP
f9e5  00            4049   4059         NOP
f9e6  00            4050   4060         NOP
f9e7  00            4051   4061         NOP
f9e8  00            4052   4062         NOP
f9e9  00            4053   4063         NOP
f9ea  00            4054   4064         NOP
f9eb  00            4055   4065         NOP
f9ec  00            4056   4066         NOP
f9ed  00            4057   4067         NOP
f9ee  00            4058   4068         NOP
f9ef  00            4059   4069         NOP
f9f0  00            4060   4070         NOP
f9f1  00            4061   4071         NOP
f9f2  00            4062   4072         NOP
f9f3  00            4063   4073         NOP
f9f4  00            4064   4074         NOP
f9f5  00            4065   4075         NOP
f9f6  00            4066   4076         NOP
f9f7  00            4067   4077         NOP
f9f8  00            4068   4078         NOP
f9f9  00            4069   4079         NOP
f9fa  00            4070   4080         NOP
f9fb  00            4071   4081         NOP
f9fc  00            4072   4082         NOP
f9fd  00            4073   4083         NOP
f9fe  00            4074   4084         NOP
f9ff  00            4075   4085         NOP
                    4076   4086 ;
                    4077   4087 ; ****END OF ALS8SIM MODULE
                    4078   4088 ;
                    4079   4089 ;
                    4080   4090 ;THE TXT-2 TEXT EDITOR STARTS HERE BUT ENTRY IS AT TXT2 (FA0B)
                    4081   4091 ;
                    4082   4092 ;ROUTINE TO CREATE A ONE LINE FILE NECESSARY FOR THE
                    4083   4093 ;EDITOR WHEN STARTING A NEW (E.G. NULL OR EMPTY) FILE
                    4084   4094 ;
fa00  36 02         4085   4095 LFA00:  MVI     M,2             ;LENGTH BYTE
fa02  23            4086   4096         INX     H               ;POINT TO NEXT BYTE
fa03  36 0d         4087   4097         MVI     M,0DH           ;CARRIAGE RETURN
fa05  23            4088   4098         INX     H               ;POINT TO NEXT
fa06  36 01         4089   4099         MVI     M,1             ;END OF FILE MARK
fa08  22 07 d0      4090   4100         SHLD    EOFP            ;NOW WE HAVE A NON-EMPTY FILE
                    4091   4101 ;
                    4092   4102 ;THIS IS THE EDITOR ENTRY POINT
                    4093   4103 ;
fa0b  31 2f d1      4094   4104 TXT2:   LXI     SP,SMODE        ;SET STACK POINTER
fa0e  2a 05 d0      4095   4105         LHLD    BOFP            ;GET BEG OF FILE POINTER
fa11  11 07 d0      4096   4106         LXI     D,EOFP          ;AND POINT TO END OF FILE PTR
fa14  cd 42 fd      4097   4107         CALL    LFD42           ;COMPARE THEM
fa17  ca 00 fa      4098   4108         JZ      LFA00           ;CREATE ONE LINE FILE IF EMPTY
fa1a  da dd e7      4099   4109         JC      WHAT            ;ERROR IF BOFP > EOFP
fa1d  e5            4100   4110         PUSH    H               ;SAVE BEG. OF FILE POINTER
fa1e  cd 4e fd      4101   4111         CALL    LFD4E           ;CLEAR SCREEN & INITIALIZE VARS
fa21  97            4102   4112         SUB     A               ;GET A ZERO
fa22  47            4103   4113         MOV     B,A             ;MAKE IT ROW
fa23  cd 1a ff      4104   4114         CALL    LFF1A           ;CALC CUR ADDR & TURN IT ON
fa26  e1            4105   4115         POP     H               ;RESTORE BEG OF FILE PNTR
fa27  22 9a d1      4106   4116 LFA27:  SHLD    LD19A           ;
fa2a  cd d9 fa      4107   4117         CALL    LFAD9
                    4108   4118 ;
                    4109   4119 ;THIS IS THE BEGINNING OF THE MAIN EDITOR COMMAND LOOP
                    4110   4120 ;
fa2d  cd 33 fa      4111   4121 LFA2D:  CALL    LFA33           ;GET AND EXECUTE A COMMAND
fa30  c3 2d fa      4112   4122         JMP     LFA2D           ;DO IT AGAIN
                    4113   4123 ;
                    4114   4124 ;AND THAT WAS THE END OF IT
                    4115   4125 ;
fa33  cd 13 ff      4116   4126 LFA33:  CALL    LFF13           ;CALC CUR ADDR & TURN CURSR ON
fa36  cd cc d0      4117   4127         CALL    IN8             ;GET A CHAR OF COMMAND
fa39  fe 20         4118   4128 LFA39:  CPI     ' '             ;CONTROL CHAR ?
fa3b  d2 04 fc      4119   4129         JNC     LFC04           ;PROCESS PRINTING CHAR IF NOT
fa3e  fe 01         4120   4130         CPI     'A'-40H         ;CURSOR LEFT COMMAND ?
fa40  ca 57 fb      4121   4131         JZ      LFB57           ;PROCESS IF SO
fa43  fe 13         4122   4132         CPI     'S'-40H         ;CURSOR RIGHT COMMAND ?
fa45  ca 10 fc      4123   4133         JZ      LFC10           ;PROCESS IF SO
fa48  f5            4124   4134         PUSH    PSW             ;SAVE COMMAND
fa49  cd a4 fc      4125   4135         CALL    LFCA4
fa4c  c1            4126   4136         POP     B               ;RESTORE COMMAND TO B
fa4d  21 65 fa      4127   4137         LXI     H,LFA65         ;EDITOR COMMAND TABLE
fa50  7e            4128   4138 LFA50:  MOV     A,M             ;GET TABLE COMMAND
fa51  b7            4129   4139         ORA     A               ;END OF TABLE ?
fa52  c8            4130   4140         RZ                      ;YES
fa53  b8            4131   4141         CMP     B               ;NO - SAME AS COMMAND ?
fa54  23            4132   4142         INX     H               ;POINT TO COMMAND ADDR
fa55  ca 60 fa      4133   4143         JZ      LFA60           ;DISPATCH TO IT ON MATCH
fa58  23            4134   4144         INX     H               ;NO MATCH - POINT PAST COMMAND
fa59  23            4135   4145         INX     H               ;TO NEXT COMMAND
fa5a  c3 50 fa      4136   4146         JMP     LFA50           ;AND TEST NEXT COMMAND
                    4137   4147 ;
                    4138   4148 ;ROUTINE TO DISPATCH TO COMMAND IN TABLE
                    4139   4149 ;
fa5d  21 a1 d1      4140   4150 LFA5D:  LXI     H,LD1A1         ;POINT TO UNDEFINED COMMAND
fa60  7e            4141   4151 LFA60:  MOV     A,M             ;COMMAND LOW BYTE TO A
fa61  23            4142   4152         INX     H               ;POINT TO HIGH BYTE
fa62  66            4143   4153         MOV     H,M             ;HIGH BYTE TO H
fa63  6f            4144   4154         MOV     L,A             ;H,L NOW HAS COMPLETE ADDR
fa64  e9            4145   4155         PCHL                    ;DISPATCH TO COMMAND ROUTINE
                    4146   4156 ;
                    4147   4157 ;HERE IS THE COMMAND TABLE FOR THE EDITOR COMMANDS
                    4148   4158 ;
fa65  17            4149   4159 LFA65:  DB      'W'-40H         ;UP
fa66  cc fa         4150   4160         DW      LFACC
fa68  1a            4151   4161         DB      'Z'-40H         ;DOWN
fa69  62 fb         4152   4162         DW      LFB62
fa6b  05            4153   4163         DB      'E'-40H         ;SCROLL UP ONE LINE
fa6c  8e fb         4154   4164         DW      LFB8E
fa6e  18            4155   4165         DB      'X'-40H         ;SCROLL DOWN ONE LINE
fa6f  c6 fa         4156   4166         DW      LFAC6
fa71  12            4157   4167         DB      'R'-40H         ;SCROLL UP 1 PAGE
fa72  12 fb         4158   4168         DW      LFB12
fa74  03            4159   4169         DB      'C'-40H         ;SCROLL DOWN 1 PAGE
fa75  21 fb         4160   4170         DW      LFB21
fa77  0a            4161   4171         DB      'J'-40H         ;ERASE EOF & SCROLL UP (L/F)
fa78  7b fb         4162   4172         DW      LFB7B
fa7a  02            4163   4173         DB      'B'-40H         ;INSERT LINE
fa7b  c8 fb         4164   4174         DW      LFBC8
fa7d  0d            4165   4175         DB      'M'-40H         ;SCROLL UP & INSERT LINE (C/R)
fa7e  9d fb         4166   4176         DW      LFB9D
fa80  14            4167   4177         DB      'T'-40H         ;TOGGLE INSERT MODE SW
fa81  72 fb         4168   4178         DW      LFB72
fa83  10            4169   4179         DB      'P'-40H         ;DELETE LINE
fa84  d2 fb         4170   4180         DW      LFBD2
fa86  08            4171   4181         DB      'H'-40H         ;DELETE CHAR
fa87  2e fc         4172   4182         DW      LFC2E
fa89  06            4173   4183         DB      'F'-40H         ;EXIT TO ALS-8
fa8a  a5 fa         4174   4184         DW      LFAA5
fa8c  0f            4175   4185         DB      'O'-40H         ;EDITOR SEARCH
fa8d  58 ff         4176   4186         DW      LFF58
fa8f  09            4177   4187         DB      'I'-40H         ;CONTINUE SEARCH
fa90  64 ff         4178   4188         DW      LFF64
fa92  19            4179   4189         DB      'Y'-40H         ;REPEAT COMMAND
fa93  ae fa         4180   4190         DW      LFAAE
fa95  11            4181   4191         DB      'Q'-40H         ;HOME COMMAND
fa96  9c fa         4182   4192         DW      LFA9C
fa98  15            4183   4193         DB      'U'-40H         ;UNDEFINED COMMAND
fa99  5d fa         4184   4194         DW      LFA5D
fa9b  00            4185   4195         DB      0
                    4186   4196 ;
                    4187   4197 ;HOME CURSOR
                    4188   4198 ;
fa9c  af            4189   4199 LFA9C:  XRA     A               ;GET A ZERO
fa9d  32 96 d1      4190   4200         STA     NCHAR           ;MAKE IT THE COLUMN
faa0  3e 06         4191   4201         MVI     A,6             ;HOME=LINE 7 (START W/0 AT TOP)
faa2  c3 d6 fa      4192   4202         JMP     LFAD6           ;PUT THE CURSOR THERE
                    4193   4203 ;
                    4194   4204 ;EXIT EDITOR TO ALS-8
                    4195   4205 ;
faa5  cd 4e fd      4196   4206 LFAA5:  CALL    LFD4E           ;CLEAR VDM-1 SCREEN
faa8  cd d3 e6      4197   4207         CALL    FCHK            ;FCHK FILE
faab  c3 60 e0      4198   4208         JMP     EORMS           ;GO BACK TO ALS-8
                    4199   4209 ;
                    4200   4210 ;REPEAT COMMAND
                    4201   4211 ;
faae  cd cc d0      4202   4212 LFAAE:  CALL    IN8             ;GET COMMAND TO REPEAT
fab1  32 ef d0      4203   4213         STA     BBUF            ;SAVE COMMAND
fab4  cd cc d0      4204   4214         CALL    IN8             ;GET REPEAT COUNT
fab7  d6 30         4205   4215         SUI     30H             ;CONVERT TO BINARY
fab9  f5            4206   4216 LFAB9:  PUSH    PSW             ;SAVE COUNT
faba  3a ef d0      4207   4217         LDA     BBUF            ;GET COMMAND
fabd  cd 39 fa      4208   4218         CALL    LFA39           ;EXECUTE IT ONE TIME
fac0  f1            4209   4219         POP     PSW             ;RESTORE COUNT
fac1  3d            4210   4220         DCR     A               ;DECREMENT COUNT
fac2  c8            4211   4221         RZ                      ;DONE IF COUNT=0
fac3  c3 b9 fa      4212   4222         JMP     LFAB9           ;ELSE DO IT AGAIN
                    4213   4223 ;
                    4214   4224 ;SCROLL DOWN 1 LINE
                    4215   4225 ;
fac6  cd 72 fc      4216   4226 LFAC6:  CALL    LFC72
fac9  c2 d9 fa      4217   4227         JNZ     LFAD9
                    4218   4228 ;
                    4219   4229 ;CURSOR UP
                    4220   4230 ;
facc  3a 95 d1      4221   4231 LFACC:  LDA     SLINE           ;GET CURRENT LINE NO (0-F)
facf  3d            4222   4232         DCR     A
fad0  f2 d6 fa      4223   4233         JP      LFAD6
fad3  3a 99 d1      4224   4234         LDA     LD199
fad6  32 95 d1      4225   4235 LFAD6:  STA     SLINE
fad9  2a 9a d1      4226   4236 LFAD9:  LHLD    LD19A
fadc  22 9c d1      4227   4237         SHLD    LD19C
fadf  af            4228   4238         XRA     A
fae0  32 98 d1      4229   4239         STA     LD198           ;CLEAR INSERT MODE
fae3  f5            4230   4240         PUSH    PSW
fae4  32 99 d1      4231   4241 LFAE4:  STA     LD199
fae7  eb            4232   4242         XCHG
fae8  21 95 d1      4233   4243         LXI     H,SLINE
faeb  be            4234   4244         CMP     M
faec  eb            4235   4245         XCHG
faed  c2 f3 fa      4236   4246         JNZ     LFAF3
faf0  22 9e d1      4237   4247         SHLD    LD19E
faf3  cd 07 fe      4238   4248 LFAF3:  CALL    LFE07
faf6  f1            4239   4249 LFAF6:  POP     PSW
faf7  3c            4240   4250         INR     A
faf8  fe 10         4241   4251         CPI     16
fafa  c8            4242   4252         RZ
fafb  47            4243   4253         MOV     B,A
fafc  cd 5f fc      4244   4254         CALL    LFC5F
faff  eb            4245   4255         XCHG
fb00  78            4246   4256         MOV     A,B
fb01  f5            4247   4257         PUSH    PSW
fb02  c2 e4 fa      4248   4258         JNZ     LFAE4
fb05  06 00         4249   4259         MVI     B,0
fb07  0e 23         4250   4260         MVI     C,'#'
fb09  21 01 40      4251   4261         LXI     H,4001H
fb0c  cd 4e fe      4252   4262         CALL    LFE4E
fb0f  c3 f6 fa      4253   4263         JMP     LFAF6
                    4254   4264 ;
                    4255   4265 ;SCROLL UP 1 PAGE (16 LINES)
                    4256   4266 ;
fb12  3e 10         4257   4267 LFB12:  MVI     A,16
fb14  f5            4258   4268 LFB14:  PUSH    PSW
fb15  cd 5f fc      4259   4269         CALL    LFC5F
fb18  c4 94 fb      4260   4270         CNZ     LFB94
fb1b  f1            4261   4271         POP     PSW
fb1c  3d            4262   4272         DCR     A
fb1d  c2 14 fb      4263   4273         JNZ     LFB14
fb20  c9            4264   4274         RET
                    4265   4275 ;
                    4266   4276 ;SCROLL DOWN 1 PAGE (16 LINES)
                    4267   4277 ;
fb21  3e 10         4268   4278 LFB21:  MVI     A,16
fb23  f5            4269   4279 LFB23:  PUSH    PSW
fb24  cd 72 fc      4270   4280         CALL    LFC72
fb27  c4 d9 fa      4271   4281         CNZ     LFAD9
fb2a  f1            4272   4282         POP     PSW
fb2b  3d            4273   4283         DCR     A
fb2c  c2 23 fb      4274   4284         JNZ     LFB23
fb2f  c9            4275   4285         RET
                    4276   4286 ;
                    4277   4287 ;ROUTINE TO GIVE WARNING WHEN TEXT BUFFER GETS FULL
                    4278   4288 ;
fb30  11 46 fb      4279   4289 LFB30:  LXI     D,LFB46         ;POINT TO WARNING MESSAGE
fb33  0e 11         4280   4290         MVI     C,17            ;LENGTH OF MESSAGE
fb35  3a 95 d1      4281   4291         LDA     SLINE           ;GET CURRENT LINE NO (0-F)
fb38  cd 0c fe      4282   4292         CALL    LFE0C           ;PRINT MESSAGE
fb3b  cd cc d0      4283   4293 LFB3B:  CALL    IN8             ;GET CHAR FROM CONSOLE
fb3e  fe 11         4284   4294         CPI     'Q'-40H         ;CONTROL-Q ?
fb40  c2 3b fb      4285   4295         JNZ     LFB3B           ;NO - WAIT INDEFINATELY
fb43  c3 0b fa      4286   4296         JMP     TXT2            ;YES - RESTART EDITOR
                    4287   4297 ;
fb46  46 55 4c 4c   4288   4298 LFB46:  DB      'FULL--TYPE CTRL Q'
fb4a  2d 2d 54 59   4288   4299
fb4e  50 45 20 43   4288   4300
fb52  54 52 4c 20   4288   4301
fb56  51            4288   4302
                    4289   4303 ;
                    4290   4304 ;CURSOR LEFT COMMAND
                    4291   4305 ;
fb57  cd 2d ff      4292   4306 LFB57:  CALL    LFF2D           ;CURSOR OFF
fb5a  78            4293   4307         MOV     A,B             ;COLUMN TO A
fb5b  3d            4294   4308         DCR     A               ;DECREMENT IT
fb5c  e6 3f         4295   4309 LFB5C:  ANI     3FH             ;KEEP IT TO 0-63
fb5e  77            4296   4310         MOV     M,A             ;PUT IT BACK AS NEW COLUMN
fb5f  c3 16 ff      4297   4311         JMP     LFF16           ;TURN CURSOR ON & RET
                    4298   4312 ;
                    4299   4313 ;CURSOR DOWN
                    4300   4314 ;
fb62  3a 95 d1      4301   4315 LFB62:  LDA     SLINE           ;GET CURRENT LINE NO (0-F)
fb65  21 99 d1      4302   4316         LXI     H,LD199
fb68  be            4303   4317         CMP     M
fb69  c2 6e fb      4304   4318         JNZ     LFB6E
fb6c  3e ff         4305   4319         MVI     A,0FFH
fb6e  3c            4306   4320 LFB6E:  INR     A
fb6f  c3 d6 fa      4307   4321         JMP     LFAD6
                    4308   4322 ;
                    4309   4323 ;TOGGLE CHAR INSERT MODE
                    4310   4324 ;
fb72  3a 98 d1      4311   4325 LFB72:  LDA     LD198           ;GET INSERT MODE SWITCH
fb75  ee 01         4312   4326         XRI     1               ;TOGGLE LOW ORDER BIT
fb77  32 98 d1      4313   4327         STA     LD198           ;PUT IT BACK
fb7a  c9            4314   4328         RET                     ;DONE
                    4315   4329 ;
                    4316   4330 ;ERASE TO THE END OF LINE AND SCROLL UP
                    4317   4331 ;
fb7b  cd ed fd      4318   4332 LFB7B:  CALL    LFDED           ;CALC CURSOR ADDR
fb7e  36 20         4319   4333 LFB7E:  MVI     M,' '           ;MOVE SPACE TO LINE
fb80  2c            4320   4334         INR     L               ;INR LINE POINTER
fb81  7d            4321   4335         MOV     A,L             ;MOVE IT TO A
fb82  e6 3f         4322   4336         ANI     3FH             ;END OF LINE YET ?
fb84  c2 7e fb      4323   4337         JNZ     LFB7E           ;MORE SPACES IF NOT
fb87  cd a4 fc      4324   4338         CALL    LFCA4           ;YES - NOW UPDATE FILE
fb8a  97            4325   4339         SUB     A               ;GET A ZERO
fb8b  32 96 d1      4326   4340         STA     NCHAR           ;AND MAKE IT NEW COLUMN
                    4327   4341 ;
                    4328   4342 ;SCROLL UP 1 LINE
                    4329   4343 ;
fb8e  cd 5f fc      4330   4344 LFB8E:  CALL    LFC5F
fb91  ca 62 fb      4331   4345         JZ      LFB62
fb94  21 9a d1      4332   4346 LFB94:  LXI     H,LD19A
fb97  cd 62 fc      4333   4347         CALL    LFC62
fb9a  c3 d9 fa      4334   4348         JMP     LFAD9
                    4335   4349 ;
                    4336   4350 ;SCROLL UP AND INSERT 1 LINE
                    4337   4351 ;
fb9d  21 9e d1      4338   4352 LFB9D:  LXI     H,LD19E
fba0  cd 62 fc      4339   4353         CALL    LFC62
fba3  c2 ac fb      4340   4354         JNZ     LFBAC
fba6  2a 07 d0      4341   4355         LHLD    EOFP
fba9  22 9e d1      4342   4356         SHLD    LD19E
fbac  cd 51 fc      4343   4357 LFBAC:  CALL    LFC51
fbaf  af            4344   4358         XRA     A
fbb0  32 96 d1      4345   4359         STA     NCHAR
fbb3  3a 99 d1      4346   4360         LDA     LD199
fbb6  fe 0f         4347   4361         CPI     0FH
fbb8  3a 95 d1      4348   4362         LDA     SLINE           ;GET CURRENT LINE NO (0-F)
fbbb  c2 6e fb      4349   4363         JNZ     LFB6E
fbbe  21 9a d1      4350   4364         LXI     H,LD19A
fbc1  cd 62 fc      4351   4365         CALL    LFC62
fbc4  c3 d9 fa      4352   4366         JMP     LFAD9
                    4353   4367 ;
fbc7  01            4354   4368         DB      01H             ;THIS IS A FOOL'S BYTE
                    4355   4369 ;
                    4356   4370 ;INSERT LINE COMMAND
                    4357   4371 ;
fbc8  cd 51 fc      4358   4372 LFBC8:  CALL    LFC51
fbcb  af            4359   4373         XRA     A
fbcc  32 96 d1      4360   4374         STA     NCHAR
fbcf  c3 d9 fa      4361   4375         JMP     LFAD9
                    4362   4376 ;
                    4363   4377 ;DELETE LINE COMMAND
                    4364   4378 ;
fbd2  97            4365   4379 LFBD2:  SUB     A               ;GET A ZERO
fbd3  32 98 d1      4366   4380         STA     LD198           ;USE IT TO CLEAR INSERT MODE
fbd6  2a 05 d0      4367   4381         LHLD    BOFP
fbd9  7e            4368   4382         MOV     A,M
fbda  cd 32 fd      4369   4383         CALL    LFD32
fbdd  7e            4370   4384         MOV     A,M
fbde  fe 01         4371   4385         CPI     1
fbe0  c8            4372   4386         RZ
fbe1  cd 5f fc      4373   4387         CALL    LFC5F
fbe4  c2 ea fb      4374   4388         JNZ     LFBEA
fbe7  cd 72 fc      4375   4389         CALL    LFC72
fbea  f5            4376   4390 LFBEA:  PUSH    PSW
fbeb  2a 9e d1      4377   4391         LHLD    LD19E
fbee  7e            4378   4392         MOV     A,M
fbef  2f            4379   4393         CMA
fbf0  3c            4380   4394         INR     A
fbf1  cd d1 fc      4381   4395         CALL    LFCD1
fbf4  f1            4382   4396         POP     PSW
fbf5  c2 d9 fa      4383   4397         JNZ     LFAD9
fbf8  2a 9e d1      4384   4398         LHLD    LD19E
fbfb  7e            4385   4399         MOV     A,M
fbfc  fe 01         4386   4400         CPI     1
fbfe  ca cc fa      4387   4401         JZ      LFACC
fc01  c3 d9 fa      4388   4402         JMP     LFAD9
                    4389   4403 ;
                    4390   4404 ;
                    4391   4405 ;
fc04  4f            4392   4406 LFC04:  MOV     C,A
fc05  3a 98 d1      4393   4407         LDA     LD198           ;GET INSERT MODE FLAG
fc08  b7            4394   4408         ORA     A               ;SET CPU FLAGS
fc09  c2 18 fc      4395   4409         JNZ     LFC18           ;JUMP IF IN INSERT MODE
fc0c  cd ed fd      4396   4410         CALL    LFDED
fc0f  71            4397   4411         MOV     M,C
                    4398   4412 ;
                    4399   4413 ;CURSOR RIGHT COMMAND
                    4400   4414 ;
fc10  cd 2d ff      4401   4415 LFC10:  CALL    LFF2D           ;TURN CURSOR OFF
fc13  78            4402   4416         MOV     A,B             ;COLUMN TO A
fc14  3c            4403   4417         INR     A               ;INCREMENT IT
fc15  c3 5c fb      4404   4418         JMP     LFB5C           ;CURSOR BACK ON & RET
                    4405   4419 ;
                    4406   4420 ;
                    4407   4421 ;
fc18  cd ed fd      4408   4422 LFC18:  CALL    LFDED
fc1b  79            4409   4423         MOV     A,C
fc1c  f6 80         4410   4424         ORI     80H
fc1e  4f            4411   4425         MOV     C,A
fc1f  7e            4412   4426 LFC1F:  MOV     A,M
fc20  e6 7f         4413   4427         ANI     7FH
fc22  71            4414   4428         MOV     M,C
fc23  4f            4415   4429         MOV     C,A
fc24  2c            4416   4430         INR     L
fc25  7d            4417   4431         MOV     A,L
fc26  e6 3f         4418   4432         ANI     3FH
fc28  c2 1f fc      4419   4433         JNZ     LFC1F
fc2b  c3 10 fc      4420   4434         JMP     LFC10
                    4421   4435 ;
                    4422   4436 ;DELETE CHARACTER
                    4423   4437 ;
fc2e  cd ed fd      4424   4438 LFC2E:  CALL    LFDED           ;CALC CURSOR POSITION
fc31  3a 96 d1      4425   4439         LDA     NCHAR           ;GET CURRENT COLUMN
fc34  fe 3f         4426   4440         CPI     3FH             ;COLUMN 63 (LAST) ?
fc36  da 3c fc      4427   4441         JC      LFC3C           ;NO - DELETE CHAR
fc39  36 a0         4428   4442         MVI     M,' '+80H       ;MAKE LAST COL SPACE W/CURSOR
fc3b  c9            4429   4443         RET                     ;DONE
                    4430   4444 ;
                    4431   4445 ;ROUTINE TO DELETE A CHAR FROM MIDDLE OF LINE
                    4432   4446 ;
fc3c  7d            4433   4447 LFC3C:  MOV     A,L             ;GET LINE POINTER
fc3d  5f            4434   4448         MOV     E,A             ;SAVE IT
fc3e  f6 3f         4435   4449         ORI     3FH             ;MAKE IT POINT TO LAST COL
fc40  6f            4436   4450         MOV     L,A             ;PUT IT BACK
fc41  7b            4437   4451         MOV     A,E             ;RESTORE ORIG PTR TO A
fc42  0e 20         4438   4452         MVI     C,' '           ;SPACE TO C
fc44  46            4439   4453 LFC44:  MOV     B,M             ;GET CHAR FROM LINE
fc45  71            4440   4454         MOV     M,C             ;REPL WITH CHAR ON IT'S RIGHT
fc46  48            4441   4455         MOV     C,B             ;AND MAKE IT NXT CHAR ON RIGHT
fc47  2d            4442   4456         DCR     L               ;DECR COLUMN POINTER
fc48  bd            4443   4457         CMP     L               ;AND COMPARE TO INITIAL COL
fc49  c2 44 fc      4444   4458         JNZ     LFC44           ;AND KEEP UP IF NOT DONE
fc4c  78            4445   4459         MOV     A,B             ;GET LAST CHAR TO STORE IN A
                    4446   4460 ;
                    4447   4461 ;TURN ON THE CURSOR
                    4448   4462 ;
fc4d  f6 80         4449   4463 LFC4D:  ORI     80H             ;MAKE CURSOR BIT HIGH
fc4f  77            4450   4464         MOV     M,A             ;PUT CHAR W/CURSOR ON SCREEN
fc50  c9            4451   4465         RET                     ;DONE, CURSOR ON
                    4452   4466 ;
                    4453   4467 ;
                    4454   4468 ;
fc51  3e 02         4455   4469 LFC51:  MVI     A,2
fc53  cd d1 fc      4456   4470         CALL    LFCD1
fc56  2a 9e d1      4457   4471         LHLD    LD19E
fc59  36 02         4458   4472         MVI     M,2
fc5b  23            4459   4473         INX     H
fc5c  36 0d         4460   4474         MVI     M,0DH
fc5e  c9            4461   4475         RET
                    4462   4476 ;
                    4463   4477 ;
                    4464   4478 ;
fc5f  21 9c d1      4465   4479 LFC5F:  LXI     H,LD19C
fc62  5e            4466   4480 LFC62:  MOV     E,M
fc63  23            4467   4481         INX     H
fc64  56            4468   4482         MOV     D,M
fc65  1a            4469   4483         LDAX    D
fc66  eb            4470   4484         XCHG
fc67  cd 32 fd      4471   4485         CALL    LFD32
fc6a  eb            4472   4486         XCHG
fc6b  1a            4473   4487         LDAX    D
fc6c  3d            4474   4488         DCR     A
fc6d  c8            4475   4489         RZ
fc6e  72            4476   4490         MOV     M,D
fc6f  2b            4477   4491         DCX     H
fc70  73            4478   4492         MOV     M,E
fc71  c9            4479   4493         RET
                    4480   4494 ;
                    4481   4495 ;
                    4482   4496 ;
fc72  2a 9a d1      4483   4497 LFC72:  LHLD    LD19A
fc75  cd 95 fc      4484   4498         CALL    LFC95
fc78  c8            4485   4499         RZ
fc79  2b            4486   4500         DCX     H
fc7a  2b            4487   4501 LFC7A:  DCX     H
fc7b  cd 95 fc      4488   4502         CALL    LFC95
fc7e  ca 90 fc      4489   4503         JZ      LFC90
fc81  7e            4490   4504         MOV     A,M
fc82  fe 0d         4491   4505         CPI     0DH
fc84  c2 7a fc      4492   4506         JNZ     LFC7A
fc87  2b            4493   4507         DCX     H
fc88  7e            4494   4508         MOV     A,M
fc89  fe 0d         4495   4509         CPI     0DH
fc8b  ca 8f fc      4496   4510         JZ      LFC8F
fc8e  23            4497   4511         INX     H
fc8f  23            4498   4512 LFC8F:  INX     H
fc90  3c            4499   4513 LFC90:  INR     A
fc91  22 9a d1      4500   4514         SHLD    LD19A
fc94  c9            4501   4515         RET
                    4502   4516 ;
                    4503   4517 ;
                    4504   4518 ;
fc95  3a 05 d0      4505   4519 LFC95:  LDA     BOFP
fc98  95            4506   4520         SUB     L
fc99  3a 06 d0      4507   4521         LDA     BOFP+1
fc9c  9c            4508   4522         SBB     H
fc9d  c0            4509   4523         RNZ
fc9e  3a 05 d0      4510   4524         LDA     BOFP
fca1  95            4511   4525         SUB     L
fca2  b7            4512   4526         ORA     A
fca3  c9            4513   4527         RET
                    4514   4528 ;
                    4515   4529 ;
                    4516   4530 ;
fca4  cd 2d ff      4517   4531 LFCA4:  CALL    LFF2D           ;TURN ON THE CURSOR
fca7  3a 95 d1      4518   4532         LDA     SLINE           ;GET CURRENT LINE NO (0-F)
fcaa  cd 33 fe      4519   4533         CALL    LFE33           ;BACK UP TO LAST NON BLANK CHAR
fcad  0c            4520   4534         INR     C
fcae  0c            4521   4535         INR     C
fcaf  79            4522   4536         MOV     A,C
fcb0  fe 06         4523   4537         CPI     6
fcb2  d2 b8 fc      4524   4538         JNC     LFCB8
fcb5  3e 06         4525   4539         MVI     A,6
fcb7  4f            4526   4540         MOV     C,A
fcb8  2a 9e d1      4527   4541 LFCB8:  LHLD    LD19E
fcbb  96            4528   4542         SUB     M
fcbc  cd d1 fc      4529   4543         CALL    LFCD1
fcbf  2a 9e d1      4530   4544         LHLD    LD19E
fcc2  71            4531   4545         MOV     M,C
fcc3  0d            4532   4546         DCR     C
fcc4  0d            4533   4547         DCR     C
fcc5  23            4534   4548         INX     H
fcc6  eb            4535   4549         XCHG
fcc7  3a 95 d1      4536   4550         LDA     SLINE           ;GET CURRENT LINE NO (0-F)
fcca  cd 24 fe      4537   4551         CALL    LFE24
fccd  eb            4538   4552         XCHG
fcce  36 0d         4539   4553         MVI     M,0DH
fcd0  c9            4540   4554         RET
                    4541   4555 ;
                    4542   4556 ;
                    4543   4557 ;
fcd1  47            4544   4558 LFCD1:  MOV     B,A
fcd2  b7            4545   4559         ORA     A
fcd3  c8            4546   4560         RZ
fcd4  fa 1a fd      4547   4561         JM      LFD1A
fcd7  2a 07 d0      4548   4562         LHLD    EOFP
fcda  cd 32 fd      4549   4563         CALL    LFD32
fcdd  11 91 d1      4550   4564         LXI     D,LD191         ;POINT TO ESET BUFFER LIMIT
fce0  cd 42 fd      4551   4565         CALL    LFD42
fce3  da 30 fb      4552   4566         JC      LFB30
fce6  eb            4553   4567         XCHG
fce7  2a 9e d1      4554   4568         LHLD    LD19E
fcea  2b            4555   4569         DCX     H
fceb  36 81         4556   4570         MVI     M,81H
fced  2a 07 d0      4557   4571         LHLD    EOFP
fcf0  7e            4558   4572 LFCF0:  MOV     A,M
fcf1  fe 81         4559   4573         CPI     81H
fcf3  ca fc fc      4560   4574         JZ      LFCFC
fcf6  12            4561   4575         STAX    D
fcf7  2b            4562   4576         DCX     H
fcf8  1b            4563   4577         DCX     D
fcf9  c3 f0 fc      4564   4578         JMP     LFCF0
                    4565   4579 ;
                    4566   4580 ;
                    4567   4581 ;
fcfc  36 0d         4568   4582 LFCFC:  MVI     M,0DH
fcfe  2a 07 d0      4569   4583 LFCFE:  LHLD    EOFP
fd01  78            4570   4584         MOV     A,B
fd02  cd 32 fd      4571   4585         CALL    LFD32
fd05  22 07 d0      4572   4586         SHLD    EOFP
fd08  2a 9c d1      4573   4587         LHLD    LD19C
fd0b  11 9e d1      4574   4588         LXI     D,LD19E
fd0e  cd 42 fd      4575   4589         CALL    LFD42
fd11  c8            4576   4590         RZ
fd12  78            4577   4591         MOV     A,B
fd13  cd 32 fd      4578   4592         CALL    LFD32
fd16  22 9c d1      4579   4593         SHLD    LD19C
fd19  c9            4580   4594         RET
                    4581   4595 ;
                    4582   4596 ;
                    4583   4597 ;
fd1a  2f            4584   4598 LFD1A:  CMA
fd1b  3c            4585   4599         INR     A
fd1c  2a 9e d1      4586   4600         LHLD    LD19E
fd1f  cd 32 fd      4587   4601         CALL    LFD32
fd22  eb            4588   4602         XCHG
fd23  2a 9e d1      4589   4603         LHLD    LD19E
fd26  1a            4590   4604 LFD26:  LDAX    D
fd27  77            4591   4605         MOV     M,A
fd28  fe 01         4592   4606         CPI     01H
fd2a  ca fe fc      4593   4607         JZ      LFCFE
fd2d  23            4594   4608         INX     H
fd2e  13            4595   4609         INX     D
fd2f  c3 26 fd      4596   4610         JMP     LFD26
                    4597   4611 ;
                    4598   4612 ;
                    4599   4613 ;
fd32  b7            4600   4614 LFD32:  ORA     A
fd33  fa 3b fd      4601   4615         JM      LFD3B
fd36  85            4602   4616         ADD     L
fd37  6f            4603   4617         MOV     L,A
fd38  d0            4604   4618         RNC
fd39  24            4605   4619         INR     H
fd3a  c9            4606   4620         RET
                    4607   4621 ;
                    4608   4622 ;
                    4609   4623 ;
fd3b  85            4610   4624 LFD3B:  ADD     L
fd3c  6f            4611   4625         MOV     L,A
fd3d  3e ff         4612   4626         MVI     A,0FFH
fd3f  8c            4613   4627         ADC     H
fd40  67            4614   4628         MOV     H,A
fd41  c9            4615   4629         RET
                    4616   4630 ;
                    4617   4631 ;
                    4618   4632 ;
fd42  1a            4619   4633 LFD42:  LDAX    D
fd43  95            4620   4634         SUB     L
fd44  13            4621   4635         INX     D
fd45  1a            4622   4636         LDAX    D
fd46  9c            4623   4637         SBB     H
fd47  1b            4624   4638         DCX     D
fd48  d8            4625   4639         RC
fd49  c0            4626   4640         RNZ
fd4a  1a            4627   4641         LDAX    D
fd4b  95            4628   4642         SUB     L
fd4c  b7            4629   4643         ORA     A
fd4d  c9            4630   4644         RET
                    4631   4645 ;
                    4632   4646 ;ROUTINE TO CLEAR ALL OR PART OF VDM-1 DISPLAY SCREEN
                    4633   4647 ;
fd4e  21 00 cc      4634   4648 LFD4E:  LXI     H,VDM1          ;ENTER HERE TO CLR WHOLE SCREEN
fd51  36 20         4635   4649 LFD51:  MVI     M,' '           ;FILL WITH SPACES
fd53  23            4636   4650         INX     H               ;POINT TO NEXT CHAR POSITION
fd54  7c            4637   4651         MOV     A,H             ;GET HIGH ORDER BYTE
fd55  fe d0         4638   4652         CPI     0D0H            ;PAST END OF SCREEN ?
fd57  da 51 fd      4639   4653         JC      LFD51           ;CONTINUE IF NOT
fd5a  af            4640   4654         XRA     A               ;ELSE GET A ZERO TO CLEAR:
fd5b  32 94 d1      4641   4655         STA     BOSL            ;BEGINNING OF SCREEN LINE (0-F)
fd5e  32 93 d1      4642   4656         STA     BOTL            ;BEGINNING OF TEXT LINE (0-F)
fd61  32 96 d1      4643   4657         STA     NCHAR           ;CURRENT COLUMN POSITION
fd64  3e 0f         4644   4658         MVI     A,0FH           ;THEN GET A 15
fd66  32 95 d1      4645   4659         STA     SLINE           ;TO PUT US ON THE BOTTOM LINE
                    4646   4660 ;
                    4647   4661 ;THIS ROUTINE OUTPUTS A PROPER COMMAND BYTE TO THE VDM-1/SOL-20
                    4648   4662 ;VIDEO DISPLAY GENERATOR BASED ON SCREEN PARAMTETERS
                    4649   4663 ;
fd69  3a 94 d1      4650   4664 LFD69:  LDA     BOSL            ;BEGINNING OF SCREEN LINE (0-F)
fd6c  07            4651   4665         RLC                     ;SHIFT LEFT TO HIGH NIBBLE
fd6d  07            4652   4666         RLC                     ;
fd6e  07            4653   4667         RLC                     ;
fd6f  07            4654   4668         RLC                     ;
fd70  21 93 d1      4655   4669         LXI     H,BOTL          ;BEGINNING OF TEXT LINE (0-F)
fd73  b6            4656   4670         ORA     M               ;A NOW HAS VDM CONTROL BYTE
fd74  d3 c8         4657   4671         OUT     0C8H            ;FOR VDM-1
fd76  d3 fe         4658   4672         OUT     0FEH            ;FOR SOL'S
fd78  c9            4659   4673         RET                     ;DONE
                    4660   4674 ;
                    4661   4675 ;
                    4662   4676 ;
fd79  2c            4663   4677 LFD79:  INR     L
fd7a  7d            4664   4678         MOV     A,L
fd7b  e6 3f         4665   4679         ANI     3FH
fd7d  c0            4666   4680         RNZ
fd7e  7d            4667   4681         MOV     A,L
fd7f  c6 c0         4668   4682         ADI     0C0H
fd81  6f            4669   4683         MOV     L,A
fd82  c9            4670   4684         RET
                    4671   4685 ;
                    4672   4686 ;THIS ROUTINE IS PART OF THE VDM-1 DRIVER USED TO DISPLAY
                    4673   4687 ;NORMAL CHARS AFTER CHECKING FOR SPEED CNTL HAS BEEN DONE
                    4674   4688 ;
fd83  e6 7f         4675   4689 LFD83:  ANI     7FH             ;CLEAR PARITY BIT
fd85  4f            4676   4690         MOV     C,A             ;SAVE IN C
fd86  21 96 d1      4677   4691         LXI     H,NCHAR         ;CURRENT COLUMN
fd89  46            4678   4692         MOV     B,M             ;COL IN B
fd8a  fe 0d         4679   4693         CPI     0DH             ;IS CHAR A C/R ?
fd8c  ca b1 fd      4680   4694         JZ      LFDB1           ;PROCESS IT SEPERATELY
fd8f  fe 5f         4681   4695         CPI     5FH             ;BACKSPACE ?
fd91  ca ed fe      4682   4696         JZ      LFEED           ;IT GET'S SPECIAL TREATMENT TOO
fd94  fe 01         4683   4697         CPI     'A'-40H         ;CURSOR ON-OFF TOGGLE ?
fd96  ca 06 ff      4684   4698         JZ      LFF06           ;ANOTHER SPECIAL
fd99  fe 1a         4685   4699         CPI     'Z'-40H         ;CLEAR SCREEN ?
fd9b  ca 4e fd      4686   4700         JZ      LFD4E           ;LAST SPECIAL CHAR
fd9e  fe 20         4687   4701         CPI     20H             ;TESTING FOR CONTROL CHAR
fda0  d8            4688   4702         RC                      ;SKIP THEM IF FOUND
fda1  3a 95 d1      4689   4703         LDA     SLINE           ;GET CURRENT LINE NO (0-F)
fda4  cd f4 fd      4690   4704         CALL    VDAD            ;AND CALCULATE CHAR ADDRESS
fda7  71            4691   4705         MOV     M,C             ;PUT CHAR ON SCREEN
fda8  3a 96 d1      4692   4706         LDA     NCHAR           ;NOW GET COLUMN
fdab  3c            4693   4707         INR     A               ;AND INCREMENT IT
fdac  fe 40         4694   4708         CPI     64              ;GONE OFF END OF LINE ?
fdae  c2 bd fd      4695   4709         JNZ     LFDBD           ;NO - OK THEN
                    4696   4710 ;
                    4697   4711 ;COME HERE TO PROCESS CARRIAGE RETURN
                    4698   4712 ;
fdb1  3a 95 d1      4699   4713 LFDB1:  LDA     SLINE           ;GET CURRENT LINE NO (0-F)
fdb4  cd 46 fe      4700   4714         CALL    LFE46           ;TURN CURSOR OFF
fdb7  3e 01         4701   4715         MVI     A,1
fdb9  cd cd fd      4702   4716         CALL    LFDCD           ;CLEAR TO END OF LINE & SCROLL
fdbc  97            4703   4717         SUB     A               ;GET A ZERO
fdbd  32 96 d1      4704   4718 LFDBD:  STA     NCHAR           ;PUT UPDATED COL. POSITION BACK
fdc0  47            4705   4719         MOV     B,A             ;AND MOVE IT TO B
fdc1  3a 97 d1      4706   4720         LDA     LD197           ;GET CURSOR ON-OFF FLAG
fdc4  fe 00         4707   4721         CPI     0               ;SET FLAGS
fdc6  c8            4708   4722         RZ                      ;DONE IF CURSOR OFF
fdc7  3a 95 d1      4709   4723         LDA     SLINE           ;GET CURRENT LINE NO (0-F)
fdca  c3 1a ff      4710   4724         JMP     LFF1A           ;TURN CURSOR ON & RETURN
                    4711   4725 ;
                    4712   4726 ;
                    4713   4727 ;
fdcd  21 93 d1      4714   4728 LFDCD:  LXI     H,BOTL          ;BEGINNING OF TEXT LINE (0-F)
fdd0  b7            4715   4729         ORA     A
fdd1  ca d9 fd      4716   4730         JZ      LFDD9
fdd4  7e            4717   4731         MOV     A,M
fdd5  34            4718   4732         INR     M
fdd6  c3 dd fd      4719   4733         JMP     LFDDD
fdd9  35            4720   4734 LFDD9:  DCR     M
fdda  7e            4721   4735         MOV     A,M
fddb  e6 0f         4722   4736         ANI     0FH
fddd  96            4723   4737 LFDDD:  SUB     M
fdde  0e 00         4724   4738         MVI     C,0
fde0  cd 0c fe      4725   4739         CALL    LFE0C
fde3  21 93 d1      4726   4740         LXI     H,BOTL          ;BEGINNING OF TEXT LINE (0-F)
fde6  7e            4727   4741         MOV     A,M
fde7  e6 0f         4728   4742         ANI     0FH
fde9  77            4729   4743         MOV     M,A
fdea  c3 69 fd      4730   4744         JMP     LFD69
                    4731   4745 ;
                    4732   4746 ;
                    4733   4747 ;
fded  3a 95 d1      4734   4748 LFDED:  LDA     SLINE           ;GET CURRENT LINE NO (0-F)
fdf0  21 96 d1      4735   4749         LXI     H,NCHAR         ;GET COLUMN POSITION
fdf3  46            4736   4750         MOV     B,M             ;TO B
                    4737   4751 ;
                    4738   4752 ;FOLLOWING ROUTINE CALCULATES ADDR OF CHAR AT LINE
                    4739   4753 ;IN "A" AND COL "B"
                    4740   4754 ;
fdf4  6f            4741   4755 VDAD:   MOV     L,A             ;LINE NO. (0-F) TO L
fdf5  3a 93 d1      4742   4756         LDA     BOTL            ;BEGINNING OF TEXT LINE (0-F)
fdf8  85            4743   4757         ADD     L               ;ADD OFFSET TO LINE
fdf9  0f            4744   4758         RRC                     ;DIVIDE BY TWO
fdfa  0f            4745   4759         RRC                     ;AGAIN, NOW /4
fdfb  6f            4746   4760         MOV     L,A             ;SAVE # PAGES (256) OFFSET
fdfc  e6 03         4747   4761         ANI     3               ;MAKE IT 0-3 ONLY
fdfe  c6 cc         4748   4762         ADI     (VDM1 SHR 8) AND 0FFH
fe00  67            4749   4763         MOV     H,A             ;H NOW HI SCREEN ADDR
fe01  7d            4750   4764         MOV     A,L             ;RESTORE # 256 BYTE PGS. OFFSET
fe02  e6 c0         4751   4765         ANI     0C0H            ;CHG TO # LINES FROM PG BOUNDRY
fe04  80            4752   4766         ADD     B               ;ADD IN COL ON LINE
fe05  6f            4753   4767         MOV     L,A             ;H,L NOW COMPLETE ADDR
fe06  c9            4754   4768         RET                     ;DONE
                    4755   4769 ;
                    4756   4770 ;
                    4757   4771 ;
fe07  4e            4758   4772 LFE07:  MOV     C,M
fe08  0d            4759   4773         DCR     C
fe09  0d            4760   4774         DCR     C
fe0a  23            4761   4775         INX     H
fe0b  eb            4762   4776         XCHG
fe0c  06 00         4763   4777 LFE0C:  MVI     B,0
fe0e  cd f4 fd      4764   4778         CALL    VDAD
fe11  06 40         4765   4779         MVI     B,64
fe13  af            4766   4780 LFE13:  XRA     A
fe14  b9            4767   4781         CMP     C
fe15  3e 20         4768   4782         MVI     A,' '
fe17  ca 1d fe      4769   4783         JZ      LFE1D
fe1a  1a            4770   4784         LDAX    D
fe1b  13            4771   4785         INX     D
fe1c  0d            4772   4786         DCR     C
fe1d  77            4773   4787 LFE1D:  MOV     M,A
fe1e  2c            4774   4788         INR     L
fe1f  05            4775   4789         DCR     B
fe20  c2 13 fe      4776   4790         JNZ     LFE13
fe23  c9            4777   4791         RET
                    4778   4792 ;
                    4779   4793 ;
                    4780   4794 ;
fe24  06 00         4781   4795 LFE24:  MVI     B,0
fe26  cd f4 fd      4782   4796         CALL    VDAD
fe29  0c            4783   4797         INR     C
fe2a  0d            4784   4798 LFE2A:  DCR     C
fe2b  c8            4785   4799         RZ
fe2c  7e            4786   4800         MOV     A,M
fe2d  12            4787   4801         STAX    D
fe2e  23            4788   4802         INX     H
fe2f  13            4789   4803         INX     D
fe30  c3 2a fe      4790   4804         JMP     LFE2A
                    4791   4805 ;
                    4792   4806 ;
                    4793   4807 ;
fe33  06 3f         4794   4808 LFE33:  MVI     B,3FH
fe35  cd f4 fd      4795   4809         CALL    VDAD
fe38  0e 40         4796   4810         MVI     C,40H
fe3a  7e            4797   4811 LFE3A:  MOV     A,M
fe3b  e6 7f         4798   4812         ANI     7FH
fe3d  fe 20         4799   4813         CPI     20H
fe3f  c0            4800   4814         RNZ
fe40  2b            4801   4815         DCX     H
fe41  0d            4802   4816         DCR     C
fe42  c2 3a fe      4803   4817         JNZ     LFE3A
fe45  c9            4804   4818         RET
                    4805   4819 ;
                    4806   4820 ;ROUTINE TO TURN CURSOR OFF
                    4807   4821 ;
fe46  cd f4 fd      4808   4822 LFE46:  CALL    VDAD            ;CALCULATE SCREEN ADDR
fe49  7e            4809   4823         MOV     A,M             ;GET CHAR UNDER CURSOR
fe4a  e6 7f         4810   4824         ANI     7FH             ;TURN CURSOR BIT OFF
fe4c  77            4811   4825         MOV     M,A             ;PUT IT BACK
fe4d  c9            4812   4826         RET                     ;DONE, CURSOR OFF
                    4813   4827 ;
                    4814   4828 ;
                    4815   4829 ;
fe4e  eb            4816   4830 LFE4E:  XCHG
fe4f  f5            4817   4831 LFE4F:  PUSH    PSW
fe50  d5            4818   4832         PUSH    D
fe51  cd f4 fd      4819   4833         CALL    VDAD
fe54  71            4820   4834 LFE54:  MOV     M,C
fe55  cd 79 fd      4821   4835         CALL    LFD79
fe58  15            4822   4836         DCR     D
fe59  c2 54 fe      4823   4837         JNZ     LFE54
fe5c  d1            4824   4838         POP     D
fe5d  f1            4825   4839         POP     PSW
fe5e  1d            4826   4840         DCR     E
fe5f  c8            4827   4841         RZ
fe60  3c            4828   4842         INR     A
fe61  c3 4f fe      4829   4843         JMP     LFE4F
                    4830   4844 ;
                    4831   4845 ;
                    4832   4846 ;
fe64  fe 1b         4833   4847 LFE64:  CPI     1BH             ;ESCAPE CHAR ?
fe66  ca 60 e0      4834   4848         JZ      EORMS           ;BACK TO ALS-8 THEN
fe69  fe 20         4835   4849         CPI     20H             ;SPACE BAR ?
fe6b  c2 c1 fe      4836   4850         JNZ     LFEC1           ;NO - CLEAR CHRR AND RETURN
fe6e  cd a4 d0      4837   4851 LFE6E:  CALL    STAT            ;YES - CHAR TYPED ?
fe71  ca 6e fe      4838   4852         JZ      LFE6E           ;NO - WAIT FOREVER IF NECESSARY
fe74  c3 c2 fe      4839   4853         JMP     LFEC2           ;THEN SAVE THAT CHAR AS CHRR
                    4840   4854 ;
                    4841   4855 ;VDM-1 DRIVER STARTS HERE
                    4842   4856 ;
fe77  78            4843   4857 LFE77:  MOV     A,B             ;GET CHAR TO A
fe78  fe 7f         4844   4858         CPI     7FH             ;DELETE CHAR ?
fe7a  c8            4845   4859         RZ                      ;RETURN IF SO
fe7b  e5            4846   4860         PUSH    H               ;ELSE SAVE REGISTERS
fe7c  d5            4847   4861         PUSH    D               ;
fe7d  c5            4848   4862         PUSH    B               ;
fe7e  3a a0 d1      4849   4863         LDA     SPEED           ;GET SPEED CONTROL BYTE
fe81  67            4850   4864         MOV     H,A             ;TO H
fe82  2e 80         4851   4865         MVI     L,80H           ;COUNTER NOW SET
fe84  cd 9d fe      4852   4866         CALL    LFE9D           ;SEE IF CHAR WAITING
fe87  af            4853   4867         XRA     A               ;MAKE ACC. ZERO
fe88  2b            4854   4868 LFE88:  DCX     H               ;DCR TIMER COUNTER
fe89  bc            4855   4869         CMP     H               ;H = 0 YET ?
fe8a  c2 88 fe      4856   4870         JNZ     LFE88           ;NO - THEN DELAY SOME MORE
fe8d  c1            4857   4871         POP     B               ;RESTORE CHAR TO B
fe8e  c5            4858   4872         PUSH    B               ;AND RE-SAVE B,C
fe8f  78            4859   4873         MOV     A,B             ;GET CHAR AGAIN
fe90  fe 13         4860   4874         CPI     'S'-40H         ;CONTROL-S ?
fe92  cc c6 fe      4861   4875         CZ      LFEC6           ;CALL SPEED SET ROUTINE
fe95  cd 83 fd      4862   4876         CALL    LFD83           ;PUT CHAR ON SCREEN
fe98  c1            4863   4877         POP     B               ;RESTORE REGS
fe99  d1            4864   4878         POP     D               ;
fe9a  e1            4865   4879         POP     H               ;
fe9b  78            4866   4880         MOV     A,B             ;PUT CHAR IN ACC ON EXIT
fe9c  c9            4867   4881         RET                     ;DONE
                    4868   4882 ;
                    4869   4883 ;ROUTINE TO CHECK FOR KEYBOARD INPUT & SCREEN CONTROL VALUE
                    4870   4884 ;
fe9d  3a 90 d1      4871   4885 LFE9D:  LDA     CHRR            ;DEFAULT SPEED
fea0  47            4872   4886         MOV     B,A             ;SAVE IT IN B
fea1  cd a4 d0      4873   4887         CALL    STAT            ;KEYBOARD CHAR WAITING ?
fea4  c4 cc d0      4874   4888         CNZ     IN8             ;YES - THEN GET IT
fea7  78            4875   4889         MOV     A,B             ;DEFAULT SPEED OR CHAR TO A
fea8  b7            4876   4890 LFEA8:  ORA     A               ;SET FLAGS
fea9  c8            4877   4891         RZ                      ;NO CHG IF CHR/DEFAULT=0
feaa  fe 3a         4878   4892         CPI     '9'+1           ;NUMERIC ?
feac  d2 64 fe      4879   4893         JNC     LFE64           ;NO, NOT NUMERIC
feaf  fe 31         4880   4894         CPI     '1'             ;NUMERIC ?
feb1  da 64 fe      4881   4895         JC      LFE64           ;NO, NOT NUMERIC
feb4  e6 0f         4882   4896         ANI     0FH             ;CONVERT TO BINARY
feb6  4f            4883   4897         MOV     C,A             ;SAVE IN C
feb7  af            4884   4898         XRA     A               ;CLEAR ACC & FLAGS
feb8  37            4885   4899         STC                     ;SET CARRY
feb9  32 a0 d1      4886   4900 LFEB9:  STA     SPEED           ;SPEED CONTROL BYTE
febc  17            4887   4901         RAL                     ;MOVE ACCUM/CARRY 1 BIT LEFT
febd  0d            4888   4902         DCR     C               ;DCR SPEED COUNT
febe  c2 b9 fe      4889   4903         JNZ     LFEB9           ;IF SPEED COUNT <> 0, CONTINUE
fec1  af            4890   4904 LFEC1:  XRA     A               ;GET A ZERO
fec2  32 90 d1      4891   4905 LFEC2:  STA     CHRR            ;MAKE IT ZERO FOR NEXT TIME
fec5  c9            4892   4906         RET                     ;DONE
                    4893   4907 ;
                    4894   4908 ;ROUTINE TO SET SPEED
                    4895   4909 ;
fec6  06 00         4896   4910 LFEC6:  MVI     B,0             ;COLUMN = 0
fec8  cd b1 fd      4897   4911         CALL    LFDB1           ;CLEAR LINE
fecb  21 e6 fe      4898   4912         LXI     H,LFEE6         ;POINT TO "SPEED ?" MESSAGE
fece  7e            4899   4913 LFECE:  MOV     A,M             ;GET CHAR FROM MSG
fecf  e5            4900   4914         PUSH    H               ;SAVE H,L
fed0  cd 83 fd      4901   4915         CALL    LFD83           ;PRINT MESSAGE
fed3  e1            4902   4916         POP     H               ;RESTORE H,L
fed4  23            4903   4917         INX     H               ;POINT TO NEXT CHAR
fed5  7e            4904   4918         MOV     A,M             ;GET IT
fed6  b7            4905   4919         ORA     A               ;SET FLAGS
fed7  c2 ce fe      4906   4920         JNZ     LFECE           ;PRINT IT IF NOT ZERO
feda  cd cc d0      4907   4921         CALL    IN8             ;GET CHAR
fedd  cd a8 fe      4908   4922         CALL    LFEA8           ;TEST NUMERIC & SET SPEED
fee0  cd 16 e2      4909   4923         CALL    CRLF            ;DO CR/LF
fee3  c3 d1 e0      4910   4924         JMP     EORNS           ;THEN BACK TO ALS-8
                    4911   4925 ;
fee6  53 50 45 45   4912   4926 LFEE6:  DB      'SPEED?'
feea  44 3f         4912   4927
feec  00            4913   4928         DB      0
                    4914   4929 ;
                    4915   4930 ;
                    4916   4931 ;ROUTINE TO PROCESS BACKSPACE (5FH)
                    4917   4932 ;
feed  3a 96 d1      4918   4933 LFEED:  LDA     NCHAR           ;GET COLUMN
fef0  47            4919   4934         MOV     B,A             ;TO B
fef1  3a 95 d1      4920   4935         LDA     SLINE           ;GET CURRENT LINE NO (0-F)
fef4  cd 46 fe      4921   4936         CALL    LFE46           ;TURN CURSOR OFF
fef7  2b            4922   4937         DCX     H               ;POINT TO PREV CHAR
fef8  36 20         4923   4938         MVI     M,' '           ;REPLACE IT WITH SPACE
fefa  78            4924   4939         MOV     A,B             ;OLD COLUMN ADDR TO A
fefb  b7            4925   4940         ORA     A               ;SET FLAGS
fefc  ca 00 ff      4926   4941         JZ      LFF00           ;DON'T BACK INTO PREV LINE
feff  05            4927   4942         DCR     B               ;DECREMENT COLUMN
ff00  3a 95 d1      4928   4943 LFF00:  LDA     SLINE           ;GET CURRENT LINE NO (0-F)
ff03  c3 1a ff      4929   4944         JMP     LFF1A           ;UPDATE ROW, COL, CUR ON & RET
                    4930   4945 ;
                    4931   4946 ;CURSOR ON-OFF TOGGLE ROUTINES
                    4932   4947 ;
ff06  3a 97 d1      4933   4948 LFF06:  LDA     LD197           ;GET CURSOR ON-OFF FLAG
ff09  ee 01         4934   4949         XRI     01H             ;TOGGLE LOW ORDER BIT
ff0b  32 97 d1      4935   4950         STA     LD197           ;PUT IT BACK
ff0e  e6 01         4936   4951         ANI     01H             ;MASK LOW ORDER BIT
ff10  c2 2a ff      4937   4952         JNZ     LFF2A           ;JUMP IF CURSOR OFF
ff13  3a 96 d1      4938   4953 LFF13:  LDA     NCHAR           ;GET COLUMN
ff16  47            4939   4954 LFF16:  MOV     B,A             ;TO A
ff17  3a 95 d1      4940   4955         LDA     SLINE           ;GET CURRENT LINE NO (0-F)
ff1a  e6 0f         4941   4956 LFF1A:  ANI     0FH             ;KEEP IT TO 0-15
ff1c  32 95 d1      4942   4957         STA     SLINE           ;UPDATE IT
ff1f  cd f4 fd      4943   4958         CALL    VDAD            ;CALCULATE CURSOR ADDRESS
ff22  78            4944   4959         MOV     A,B             ;COLUMN TO A
ff23  32 96 d1      4945   4960         STA     NCHAR           ;UPDATE IT
ff26  7e            4946   4961         MOV     A,M             ;GET CHAR TO A
ff27  c3 4d fc      4947   4962         JMP     LFC4D           ;TURN ON CURSOR & RETURN
ff2a  32 97 d1      4948   4963 LFF2A:  STA     LD197           ;UPDATE CURSOR FLAG
ff2d  21 96 d1      4949   4964 LFF2D:  LXI     H,NCHAR         ;POINT TO COLUMN
ff30  46            4950   4965         MOV     B,M             ;GET IT TO B
ff31  3a 95 d1      4951   4966         LDA     SLINE           ;GET CURRENT LINE NO (0-F)
ff34  cd 46 fe      4952   4967         CALL    LFE46           ;TURN CURSOR OFF
ff37  21 96 d1      4953   4968         LXI     H,NCHAR         ;FOR PROPER EXIT
ff3a  c9            4954   4969         RET                     ;DONE, CURSOR OFF
                    4955   4970 ;
                    4956   4971 ;THIS IS THE ALS-8 (NOT TXT-2) FIND COMMAND
                    4957   4972 ;
ff3b  cd 16 e2      4958   4973 FIND2:  CALL    CRLF            ;DO CR/LF
ff3e  cd 80 ff      4959   4974         CALL    LFF80           ;GET SEARCH STRING
ff41  2a 05 d0      4960   4975         LHLD    BOFP            ;LOAD SEARCH STARTING POINT
ff44  cd c2 ff      4961   4976 LFF44:  CALL    LFFC2           ;SEARCH FOR STRING
ff47  fe 01         4962   4977         CPI     1               ;EOF FOUND ?
ff49  c8            4963   4978         RZ                      ;DONE IF YES
ff4a  2a d2 d0      4964   4979         LHLD    INSP            ;ELSE POINT TO LINE W/STRING
ff4d  23            4965   4980         INX     H               ;POINT PAST LENGTH BYTE
ff4e  cd 80 e3      4966   4981         CALL    SCRN            ;PRINT LINE
ff51  cd 16 e2      4967   4982         CALL    CRLF            ;CAR. RET AT END OF LINE
ff54  23            4968   4983         INX     H               ;INR TO NEXT LINE
ff55  c3 44 ff      4969   4984         JMP     LFF44           ;AND CONTINUE SEARCH
                    4970   4985 ;
                    4971   4986 ;EDITOR STRING SEARCH
                    4972   4987 ;
ff58  cd 4e fd      4973   4988 LFF58:  CALL    LFD4E           ;CLEAR SCREEN
ff5b  cd 80 ff      4974   4989         CALL    LFF80           ;GET SEARCH STRING
ff5e  2a 05 d0      4975   4990         LHLD    BOFP            ;POINT TO BEGINNING OF FILE
ff61  22 9c d1      4976   4991         SHLD    LD19C           ;SAVE AS SEARCH STARTING POINT
                    4977   4992 ;
                    4978   4993 ;CONTINUE SEARCH
                    4979   4994 ;
ff64  31 2f d1      4980   4995 LFF64:  LXI     SP,SMODE        ;RESET STACK POINTER
ff67  2a 9c d1      4981   4996         LHLD    LD19C           ;GET SEARCH STARTING PT.
ff6a  cd c2 ff      4982   4997         CALL    LFFC2           ;SEARCH FROM H,L FOR STRING
ff6d  fe 01         4983   4998         CPI     1               ;END OF FILE FOUND ?
ff6f  ca 0b fa      4984   4999         JZ      TXT2            ;RESTART EDITOR THEN
ff72  cd 4e fd      4985   5000         CALL    LFD4E           ;
ff75  af            4986   5001         XRA     A               ;GET A ZERO
ff76  47            4987   5002         MOV     B,A             ;MAKE IT THE ROW
ff77  cd 1a ff      4988   5003         CALL    LFF1A           ;TURN CURSOR ON
ff7a  2a d2 d0      4989   5004         LHLD    INSP            ;GET POINTER TO LINE W/STRING
ff7d  c3 27 fa      4990   5005         JMP     LFA27           ;PUT TEXT ON SCRN & RET
                    4991   5006 ;
                    4992   5007 ;ROUTINE TO FIND STRING
                    4993   5008 ;
ff80  06 3a         4994   5009 LFF80:  MVI     B,':'           ;GET PROMPT
ff82  cd cf d0      4995   5010         CALL    OUT8            ;PRINT IT
ff85  1e 00         4996   5011         MVI     E,0             ;INITIALIZE STRING LENGTH
ff87  21 35 d2      4997   5012         LXI     H,IBUF+81       ;POINT TO STRING LOCATION
ff8a  cd cc d0      4998   5013 LFF8A:  CALL    IN8             ;GET STRING CHAR
ff8d  fe 7f         4999   5014         CPI     7FH             ;DELETE ?
ff8f  c2 a1 ff      5000   5015         JNZ     LFFA1           ;NO - MUST BE CHAR
ff92  7b            5001   5016         MOV     A,E             ;ELSE MOVE LENGTH TO A
ff93  b7            5002   5017         ORA     A               ;ZERO ?
ff94  ca 8a ff      5003   5018         JZ      LFF8A           ;NO ACTION IF ZERO
ff97  1d            5004   5019         DCR     E               ;ELSE DCR STRING LENGTH
ff98  2b            5005   5020         DCX     H               ;AND STRING POINTER
ff99  06 5f         5006   5021         MVI     B,5FH           ;GET A BACKSPACE CHAR
ff9b  cd cf d0      5007   5022 LFF9B:  CALL    OUT8            ;AND PRINT IT
ff9e  c3 8a ff      5008   5023         JMP     LFF8A           ;THEN GET THE NEXT CHAR
ffa1  fe 0d         5009   5024 LFFA1:  CPI     0DH             ;CARRIAGE RETURN ?
ffa3  c2 b6 ff      5010   5025         JNZ     LFFB6           ;NO - MUST BE CHAR
ffa6  7b            5011   5026         MOV     A,E             ;ELSE GET LENGTH TO A
ffa7  b7            5012   5027         ORA     A               ;SET FLAGS
ffa8  c2 b1 ff      5013   5028         JNZ     LFFB1           ;IF NOT ZERO, DONE
ffab  cd 16 e2      5014   5029         CALL    CRLF            ;ELSE PRINT CRLF
ffae  c3 80 ff      5015   5030         JMP     LFF80           ;AND GET STRING (AGAIN)
ffb1  70            5016   5031 LFFB1:  MOV     M,B             ;MOVE C/R TO STRING BUFFER
ffb2  cd 16 e2      5017   5032         CALL    CRLF            ;PRINT CR/LF
ffb5  c9            5018   5033         RET                     ;AND RETURN W/STRING IN BUFFER
ffb6  fe 20         5019   5034 LFFB6:  CPI     20H             ;IS CHAR A CNTL CHAR ?
ffb8  da 8a ff      5020   5035         JC      LFF8A           ;IGNORE IT THEN
ffbb  1c            5021   5036         INR     E               ;ELSE INR LENGTH
ffbc  70            5022   5037         MOV     M,B             ;PUT CHAR IN STRING
ffbd  23            5023   5038         INX     H               ;INR POINTER
ffbe  c3 9b ff      5024   5039         JMP     LFF9B           ;AND DO NEXT CHAR
                    5025   5040 ;
                    5026   5041 ;ROUTINE TO SEARCH FOR STRING
                    5027   5042 ;
ffc1  23            5028   5043 LFFC1:  INX     H               ;POINT PAST LENGTH BYTE
ffc2  22 d2 d0      5029   5044 LFFC2:  SHLD    INSP            ;AND SAVE AS POINTER
ffc5  0e 00         5030   5045         MVI     C,0             ;INITIALIZE COUNTER
ffc7  11 35 d2      5031   5046 LFFC7:  LXI     D,IBUF+81       ;GET STRING LENGTH
ffca  7e            5032   5047         MOV     A,M             ;GET CHAR FROM LINE
ffcb  fe 01         5033   5048         CPI     1               ;END OF FILE ?
ffcd  c8            5034   5049         RZ                      ;IF SO, RETURN
ffce  23            5035   5050 LFFCE:  INX     H               ;ELSE INCR LINE POINTER
ffcf  0c            5036   5051         INR     C               ;AND COUNT OF CHARS TESTED
ffd0  1a            5037   5052         LDAX    D               ;GET CHAR FROM STRING
ffd1  be            5038   5053         CMP     M               ;STRING & LINE AGREE ?
ffd2  13            5039   5054         INX     D               ;INR STRING POINTER
ffd3  ca e7 ff      5040   5055         JZ      LFFE7           ;AND KEEP TESTING
ffd6  fe 0d         5041   5056         CPI     0DH             ;WAS NON-MATCH DUE TO C/R ?
ffd8  c8            5042   5057         RZ                      ;YES - STRING MATCHED THEN
ffd9  7e            5043   5058         MOV     A,M             ;ELSE MOVE LINE CHAR TO A
ffda  fe 0d         5044   5059         CPI     0DH             ;AND SEE IF END OF LINE
ffdc  ca c1 ff      5045   5060         JZ      LFFC1           ;IT WAS - GO TO NEXT LINE
ffdf  0d            5046   5061 LFFDF:  DCR     C               ;ELSE DCR MATCH COUNT
ffe0  ca c7 ff      5047   5062         JZ      LFFC7           ;BACK TO WHERE WE STARTED ?
ffe3  2b            5048   5063         DCX     H               ;NO - DCR LINE POINTER
ffe4  c3 df ff      5049   5064         JMP     LFFDF           ;AND TEST AGAIN
ffe7  fe 0d         5050   5065 LFFE7:  CPI     0DH             ;MATCH - END OF STRING TOO ?
ffe9  c8            5051   5066         RZ                      ;THAT'S STILL A MATCH
ffea  7e            5052   5067         MOV     A,M             ;ELSE GET LINE CHAR
ffeb  fe 0d         5053   5068         CPI     0DH             ;AND SEE IF END OF LINE
ffed  ca c1 ff      5054   5069         JZ      LFFC1           ;IF SO TEST NEXT LINE
fff0  c3 ce ff      5055   5070         JMP     LFFCE           ;ELSE GO ON WITH TEST
                    5056   5071 ;
                    5057   5072 ;ESET COMMAND TO SET UPPER LIMIT ON EDITOR TEXT BUFFER
                    5058   5073 ;
fff3  2a ef d0      5059   5074 LFFF3:  LHLD    BBUF            ;GET VALUE OF UPPER LIMIT
fff6  22 91 d1      5060   5075         SHLD    LD191           ;SAVE IT
fff9  c3 60 e0      5061   5076         JMP     EORMS           ;AND GO BACK TO ALS-8
                    5062   5077 ;
                    5063   5078 ; **** END OF ALS8TXT MODULE
                    5064   5079 ;
                    5065   5080 ;
                    5066   5081         ORG     DATA            ;START OF SYSTEM GLOBAL
                    5067   5082 ;
                    5068   5083 ;SYSTEM GLOBAL AREA
                    5069   5084 ;
0001  =             5070   5085 UDATA   EQU     1               ;DATA PORT NUMBER
                    5071   5086 ;DAV    EQU     40H             ;DATA AVAILABLE AT BIT 6
0001  =             5072   5087 DAV     EQU     01H             ;*UM*
0080  =             5073   5088 TBE     EQU     80H             ;TRANS. BUFFER EMPTY AT BIT 7
0000  =             5074   5089 USTA    EQU     0               ;UART STATUS PORT
0001  =             5075   5090 UDAI    EQU     1               ;UART DATA
0001  =             5076   5091 UDAO    EQU     1               ;UART DATA
00ff  =             5077   5092 SWCH    EQU     0FFH            ;SENSE SWITCH
                    5078   5093 ;
                    5079   5094 ;FILE AREA PARAMETERS
                    5080   5095 ;
0006  =             5081   5096 MAXFIL  EQU     6               ;MAX # OF FILES
0005  =             5082   5097 NMLEN   EQU     5               ;NAME LENGTH
000d  =             5083   5098 FELEN   EQU     NMLEN+8         ;DIRECTORY ENTRY LENGTH
                    5084   5099 ;
                    5085   5100 ;FILE TABLE
                    5086   5101 ;
                    5087   5102 ;FILE 0 IS THE "CURRENT FILE" ALL OTHER FILES
                    5088   5103 ;ARE STORED IN THE FILE TABLE IN THIS FORMAT
                    5089   5104 ;
d000                5090   5105 FILE0:  DS      NMLEN           ;CURRENT FILE LOCATION
d005                5091   5106 BOFP:   DS      2               ;BEGINNING OF FILE POINTER
d007                5092   5107 EOFP:   DS      2               ;END OF FILE POINTER
d009                5093   5108 MAXL:   DS      4               ;MAXIMUM LINE NUMBER IN FILE
                    5094   5109 ;
d00d                5095   5110 FILTB:  DS      (MAXFIL-1)*FELEN;REST OF FILE TABLE
                    5096   5111 ;
                    5097   5112 ;I/O DRIVER TABLES
                    5098   5113 ;
d04e                5099   5114 IOFLE:  DS      (MAXFIL-1)*FELEN
d08f                5100   5115 SYSIO:  DS      NMLEN
d094                5101   5116 SYSIN:  DS      2
d096                5102   5117 SYSOT:  DS      2               ;OUTPUT DRIVER ADDRESS
                    5103   5118 ;
                    5104   5119 ;THE INPUT DRIVER
                    5105   5120 ;
d098                5106   5121 INDR:   DS      OUTP8-INP8
                    5107   5122 ;
                    5108   5123 ;THE OUTPUT DRIVER
                    5109   5124 ;
d0a9                5110   5125 OUTDR:  DS      CRLF-OUTP8      ;OUTPUT DRIVER
d0cc                5111   5126 IN8:    DS      3               ;DRIVER JUMP POINTS
d0cf                5112   5127 OUT8:   DS      3
d0a4  =             5113   5128 STAT    EQU     INDR+12
d0b8  =             5114   5129 NOCHR   EQU     OUTDR+0FH
                    5115   5130 ;
                    5116   5131 ;SYSTEM PARAMETERS
                    5117   5132 ;
d0d2                5118   5133 INSP:   DS      2               ;INSERT LINE POSITION
d0d2  =             5119   5134 DELP    EQU     INSP            ;DELETE LINE POSITION
000d  =             5120   5135 ASCR    EQU     13
001b  =             5121   5136 ESC     EQU     1BH
002a  =             5122   5137 COMCHR  EQU     '*'             ;ASSEMBLER COMMENT CHARACTER
d0d4                5123   5138 HCON:   DS      3               ;CONVERSION AREA
d0d4  =             5124   5139 ADDS    EQU     HCON            ;FIND ADDRESS
d0d7                5125   5140 FBUF:   DS      NMLEN           ;FILE NAME BUFFER
d0dc                5126   5141 FREAD:  DS      2               ;FREE ADDRESS IN DIRECTORY
d0de                5127   5142 FEF:    DS      1               ;FREE ENTRY FOUND FLAG
d0de  =             5128   5143 FOCNT   EQU     FEF             ;OUTPUT COUNTER
d0df                5129   5144 ABUF:   DS      16              ;ASCII BUFFER AREA
d0ef                5130   5145 BBUF:   DS      4               ;BINARY BUFFER
d0f3                5131   5146 SCNT:   DS      1               ;SYMBOL COUNT
d0f4                5132   5147 DCNT:   DS      1               ;DUMP ROUTINE COUNTER
d0f5                5133   5148 TABA:   DS      2               ;SYMBOL TABLE END ADDRESS
d0f7                5134   5149 ASPC:   DS      2               ;ASSEMBLER PROGRAM COUNTER
d0f9                5135   5150 PASI:   DS      1               ;PASS INDICATOR
d0fa                5136   5151 LFMT:   DS      1               ;FORMAT CONTROL
d0fb                5137   5152 NOLIN:  DS      1
d0fc                5138   5153 IOSWC:  DS      1               ;I/O SWITCH INDICATOR
d0fd                5139   5154 SWCH1:  DS      1
d0fe                5140   5155 SWCH2:  DS      1
d0ff                5141   5156 XOUT:   DS      1               ;SCRN PARAMETER
d100                5142   5157 ASMTY:  DS      1               ;ASSEMBLY TYPE FLAG
d101                5143   5158 PNTR:   DS      2               ;LINE POINTER STORAGE
d103                5144   5159 NOLA:   DS      1               ;NUMBER OF LABELS
d104                5145   5160 SIGN:   DS      1               ;SIGN STORAGE FOR SCAN
d105                5146   5161 OPRD:   DS      2
d107                5147   5162 OPRI:   DS      1
d108                5148   5163 GTLT:   DS      1
d109                5149   5164 TEMP:   DS      1
d0d2  =             5150   5165 APNT    EQU     INSP
d0f4  =             5151   5166 AERR    EQU     DCNT
d10a                5152   5167 ALST:   DS      1
d10b                5153   5168 OIND:   DS      2
0005  =             5154   5169 LLAB    EQU     5
d10d                5155   5170         DS      16
d11d                5156   5171 AREA:   DS      14
d12b                5157   5172 LD12B:  DS      4
d12f                5158   5173 SMODE:  DS      1
d130                5159   5174 SYMSV:  DS      2
d0f3  =             5160   5175 CCNT    EQU     SCNT
d0f4  =             5161   5176 SYMX    EQU     AERR
d132                5162   5177 SYMADD: DS      2
d134                5163   5178 LD134:  DS      1               ;SIM. BREAKPOINT FLAG
d135                5164   5179 LD135:  DS      1               ;SIM. REAL-TIME RUN FLAG
d136                5165   5180 LD136:  DS      1               ;SIM. INPUT PORT ASSIG. FLAG
d137                5166   5181 LD137:  DS      1               ;SIM. OUTPUT PORT ASSIG. FLAG
d138                5167   5182 LD138:  DS      2               ;SIM. BREAKPOINT ADDR.
d13a                5168   5183 LD13A:  DS      2               ;SIM. REAL TIME RUN ADDR
d13c                5169   5184 LD13C:  DS      2               ;SIM. PROGRAM COUNTER
d13e                5170   5185 LD13E:  DS      2               ;ADDR FOR NEXT INST TO EXECUTE
d140                5171   5186 LD140:  DS      2               ;SIM. STACK POINTER
d142                5172   5187 LD142:  DS      2               ;SIM. FLAG REGISTER & ACCUM.
d144                5173   5188 LD144:  DS      1               ;SIM. "L" REGISTER
d145                5174   5189 LD145:  DS      1               ;SIM. "H" REGISTER
d146                5175   5190 LD146:  DS      1               ;SIM. "E" REGISTER
d147                5176   5191 LD147:  DS      1               ;SIM. "D" REGISTER
d148                5177   5192 LD148:  DS      1               ;SIM. "C" REGISTER
d149                5178   5193 LD149:  DS      1               ;SIM. "B" REGISTER
d14a                5179   5194 LD14A:  DS      1               ;SIM. ACCUM (2ND COPY)
d14b                5180   5195 LD14B:  DS      1               ;SIM. MODE
d14c                5181   5196 LD14C:  DS      3               ;STORAGE FOR INST TO BE SIM.
d14f                5182   5197 LD14F:  DS      3               ;STORAGE FOR JMP RETN TO SIM.
d152                5183   5198 LD152:  DS      16              ;SIMULATOR'S INPUT TABLE
d162                5184   5199 LD162:  DS      16              ;SIMULATOR'S OUTPUT TABLE
                    5185   5200         ORG     DATA+18FH
d18f                5186   5201 TERMW:  DS      1
d190                5187   5202 CHRR:   DS      1
d191                5188   5203 LD191:  DS      2               ;ESET UPPER TEXT BUFFER LIMIT
d193                5189   5204 BOTL:   DS      1               ;BEGINNING OF TEXT LINE (0-F)
d194                5190   5205 BOSL:   DS      1               ;BEGINNING OF SCREEN LINE (0-F)
d195                5191   5206 SLINE:  DS      1               ;CURRENT LINE (0-F)
d196                5192   5207 NCHAR:  DS      1               ;CURRENT COLUMN POSITION (0-63)
d197                5193   5208 LD197:  DS      1               ;CURSOR ON-OFF FLAG
d198                5194   5209 LD198:  DS      1               ;INSERT MODE FLAG
d199                5195   5210 LD199:  DS      1
d19a                5196   5211 LD19A:  DS      2
d19c                5197   5212 LD19C:  DS      2
d19e                5198   5213 LD19E:  DS      2
d1a0                5199   5214 SPEED:  DS      1               ;DISPLAY DRIVER SPEED BYTE
d1a1                5200   5215 LD1A1:  DS      2               ;UNDEFINED COMMAND ADDRESS
d1a3                5201   5216 USARE:  DS      38              ;USER AREA
d1c9                5202   5217 OBUF:   DS      22
d1df                5203   5218         DS      5
d1e4                5204   5219 IBUF:   DS      120             ;INPUT BUFFER
fa0e  =             5205   5220 EDIT    EQU     0FA0EH
d1c9  =             5206   5221 SAVL    EQU     OBUF
d25c                5207   5222 CUCOM:  DS      70              ;CUSTOM COMMAND TABLE
                    5208   5223         ORG     DATA+300H
d300                5209   5224 SYSYM:  DS      2               ;START OF SYSTEM SYMBOL TABLE
e000  =             5210   5225 SYMT    EQU     CODE
                    5211   5226 ;
d302                5212   5227         END

Symbol table

ABUF   d0df    ACH1   e37b    ACHK   e369    ACO1   ebe0    ACO2   ec8f*
ADDS   d0d4    ADE1   e00d    ADEC   e00a    ADOUT  e55c    ADR    e96b
AERR   d0f4    AHE1   e2fd    AHEX   e2fa    AHS1   e311    ALAB   f274
ALP1   f140    ALPS   f13e    ALS8   e000    ALST   d10a    AOCT   e333
AOUT   eb2e    APNT   d0d2    AREA   d11d*   ASBL   f15d    ASC1   f1aa*
ASC2   f1ba    ASC3   f1c8*   ASC4   f1d2    ASC5   f1f4    ASC7   f218
ASCN   f160    ASCR   000d*   ASM2   eb22    ASM4   eabf    ASMTY  d100
ASPC   d0f7    ASSM   eaaf    ASTO   ee1d    ASUB   f21e    AUTO   f96a
AVAL   f204    BBUF   d0ef    BID1   e3be    BIN1   e3a3    BIND   e3ad
BINH   e390    BINO   e3c8    BITBKT e12c    BLKO   e361    BOFP   d005
BOSL   d194    BOTL   d193    BSPA   e1b4    C01    e997    C02    e99d
CCNT   d0f3    CHAR   e1bc    CHRR   d190    CLER   e1d1    CODE   e000
COM0   e992    COM1   e994    COMCHR 002a    COMS   e228    COND   eeda
COP1   f034    COPC   f022    CR     e188    CRLF   e216    CTAB   e3e6
CUCOM  d25c    CUST   e4f5    DAT2   eca5    DAT2A  eca8    DATA   d000
DAV    0001    DCNT   d0f4    DEL    e1a7    DEL2   ea5c    DEL3   ea7b
DEL4   ea85    DELP   d0d2    DELT   ea2c    DONE   e2c6    DOUT   e348
DUMO   e56f    DUMP   e524    E01    e964    EDIT   fa0e*   EMES   e7f1
EMES1  e7f7    EMES2  e7fc    EMODE  e2f3    ENT1   e817    ENTR   e20d
ENTS   e80b    EOF    e963*   EOFP   d007    EOR    e0b7    EORMS  e060
EORNS  e0d1    EQU1   ebfb    EQUL   e8e1    EQUS   ec06    ERO1   f348
ERRA   f337    ERRD   f356    ERRL   f351    ERRM   f32f    ERRO   f33c
ERRR   f311    ERRS   f31a    ERRU   f325    ERRV   f32a    ESC    001b
ETRA   e281    EXEC   e277    FAST   e64b    FBUF   d0d7    FCHK   e6d3
FEET   e65a    FEF    d0de    FELEN  000d    FERR   e801    FI1    e94a
FI2    e95c    FIL35  e611    FILE   e5b0    FILE0  d000    FILTB  d00d*
FIND   e941    FIND1  e944*   FIND2  ff3b    FINE   e62b    FMOV   e731
FOCNT  d0de    FOOD   e645    FOOT   e625    FORM   e6cc    FOUL   e627
FOUT   e618    FREAD  d0dc    FSE10  e693    FSE15  e6b6    FSE20  e6c0
FSEA   e68a    GT     e909    GTLT   d108    HCON   d0d4    HOTB   e586*
HOUT   e577    IBUF   d1e4    IN8    d0cc    INCA   e263    INDR   d098
INIT2  e029    INITA  e024*   INP8   e1e2    INSP   d0d2    INSRT  e8d8
IODR   e0de    IOFLE  d04e    IONME  e1d9    IOSWC  d0fc    LCHK   ebb3
LD12B  d12b    LD134  d134    LD135  d135    LD136  d136    LD137  d137
LD138  d138    LD13A  d13a    LD13C  d13c    LD13E  d13e    LD140  d140
LD142  d142    LD144  d144    LD145  d145*   LD146  d146*   LD147  d147*
LD148  d148*   LD149  d149*   LD14A  d14a    LD14B  d14b    LD14C  d14c
LD14F  d14f    LD152  d152    LD162  d162    LD191  d191    LD197  d197
LD198  d198    LD199  d199    LD19A  d19a    LD19C  d19c    LD19E  d19e
LD1A1  d1a1    LE004  e004    LE03B  e03b    LE046  e046    LE072  e072
LE078  e078    LE0A5  e0a5    LE0AC  e0ac    LE0CB  e0cb    LE0DD  e0dd
LE0FE  e0fe    LE119  e119    LE12D  e12d    LE130  e130    LE148  e148
LE14C  e14c    LE151  e151    LE157  e157    LE15A  e15a    LE23E  e23e
LE240  e240    LE2D7  e2d7    LE31E  e31e    LE336  e336    LE34B  e34b
LE35C  e35c    LE48F  e48f    LE497  e497    LE4AB  e4ab    LE4AE  e4ae
LE4B4  e4b4    LE4B7  e4b7    LE4BF  e4bf    LE4C2  e4c2    LE4CE  e4ce
LE4EE  e4ee    LE509  e509    LE50C  e50c    LE52C  e52c    LE541  e541
LE565  e565    LE57A  e57a    LE5AB  e5ab    LE5CC  e5cc    LE5E1  e5e1
LE62A  e62a    LE666  e666    LE68D  e68d    LE6E0  e6e0    LE6F3  e6f3
LE704  e704    LE712  e712    LE718  e718    LE725  e725    LE72B  e72b
LE760  e760    LE765  e765    LE785  e785    LE78B  e78b    LE797  e797
LE7B5  e7b5    LE7C9  e7c9    LE7CC  e7cc    LE7CE  e7ce    LE837  e837
LE83A  e83a    LE84C  e84c    LE86A  e86a    LE87C  e87c    LE889  e889
LE893  e893    LE896  e896    LE92B  e92b    LE947  e947    LE9EF  e9ef
LE9F9  e9f9    LE9FF  e9ff    LEA23  ea23    LEA2F  ea2f    LEA40  ea40
LEA50  ea50    LEA7A  ea7a    LEAD6  ead6    LEAEA  eaea    LEAF6  eaf6
LEB12  eb12    LEB15  eb15    LEB41  eb41    LEBA5  eba5    LEC26  ec26
LEC2E  ec2e    LECC3  ecc3    LECCD  eccd    LECD3  ecd3    LECE2  ece2
LECE5  ece5    LECF9  ecf9    LED01  ed01    LED15  ed15    LED4F  ed4f
LED57  ed57    LEE39  ee39    LEE4C  ee4c    LEE58  ee58    LEE5C  ee5c
LEE64  ee64    LEE7E  ee7e    LEE82  ee82    LEE9D  ee9d    LEEA8  eea8
LEEAA  eeaa    LEEB1  eeb1    LF     e21b*   LF0DB  f0db    LF0E0  f0e0
LF154  f154    LF1A6  f1a6    LF227  f227    LF238  f238    LF23A  f23a
LF242  f242    LF247  f247    LF253  f253    LF255  f255    LF260  f260
LF26C  f26c    LF291  f291    LF2B1  f2b1    LF2B6  f2b6    LF2C2  f2c2
LF2DE  f2de    LF2E3  f2e3    LF361  f361    LF37A  f37a    LF37C  f37c
LF38E  f38e    LF392  f392    LF396  f396    LF397  f397    LF3A4  f3a4
LF3C5  f3c5    LF3D3  f3d3    LF3DF  f3df    LF400  f400    LF41B  f41b
LF422  f422    LF431  f431    LF439  f439    LF444  f444    LF451  f451
LF459  f459    LF461  f461    LF470  f470    LF475  f475    LF49F  f49f
LF4A5  f4a5    LF4B0  f4b0    LF4CA  f4ca    LF4CD  f4cd    LF4D9  f4d9
LF4DA  f4da    LF4DB  f4db    LF4E1  f4e1    LF4EF  f4ef    LF505  f505
LF50B  f50b    LF511  f511    LF51A  f51a    LF521  f521    LF527  f527
LF542  f542    LF551  f551    LF55A  f55a    LF565  f565    LF572  f572
LF577  f577    LF579  f579    LF57F  f57f    LF589  f589    LF58F  f58f
LF5AE  f5ae    LF5D2  f5d2    LF5D9  f5d9    LF5F2  f5f2    LF604  f604
LF618  f618    LF61E  f61e    LF626  f626    LF62C  f62c    LF634  f634
LF652  f652    LF66A  f66a    LF67F  f67f    LF697  f697    LF69D  f69d
LF6AC  f6ac    LF6AF  f6af    LF6B8  f6b8    LF6CA  f6ca    LF6F9  f6f9
LF733  f733    LF73C  f73c    LF742  f742    LF747  f747    LF753  f753
LF756  f756    LF771  f771    LF774  f774    LF796  f796    LF7A4  f7a4
LF7B7  f7b7    LF7D9  f7d9    LF7DE  f7de    LF7F1  f7f1    LF802  f802
LF818  f818    LF81F  f81f    LF854  f854    LF863  f863    LF890  f890
LF897  f897    LF8A1  f8a1    LF8A8  f8a8    LF8AF  f8af    LF8B8  f8b8
LF8BC  f8bc    LF8C7  f8c7    LF8D6  f8d6    LF8E2  f8e2    LF912  f912
LF92C  f92c    LF932  f932    LF949  f949    LF954  f954    LF983  f983
LF989  f989    LF99A  f99a    LF9AE  f9ae    LF9BB  f9bb    LF9C8  f9c8
LF9D8  f9d8    LFA00  fa00    LFA27  fa27    LFA2D  fa2d    LFA33  fa33
LFA39  fa39    LFA50  fa50    LFA5D  fa5d    LFA60  fa60    LFA65  fa65
LFA9C  fa9c    LFAA5  faa5    LFAAE  faae    LFAB9  fab9    LFAC6  fac6
LFACC  facc    LFAD6  fad6    LFAD9  fad9    LFAE4  fae4    LFAF3  faf3
LFAF6  faf6    LFB12  fb12    LFB14  fb14    LFB21  fb21    LFB23  fb23
LFB30  fb30    LFB3B  fb3b    LFB46  fb46    LFB57  fb57    LFB5C  fb5c
LFB62  fb62    LFB6E  fb6e    LFB72  fb72    LFB7B  fb7b    LFB7E  fb7e
LFB8E  fb8e    LFB94  fb94    LFB9D  fb9d    LFBAC  fbac    LFBC8  fbc8
LFBD2  fbd2    LFBEA  fbea    LFC04  fc04    LFC10  fc10    LFC18  fc18
LFC1F  fc1f    LFC2E  fc2e    LFC3C  fc3c    LFC44  fc44    LFC4D  fc4d
LFC51  fc51    LFC5F  fc5f    LFC62  fc62    LFC72  fc72    LFC7A  fc7a
LFC8F  fc8f    LFC90  fc90    LFC95  fc95    LFCA4  fca4    LFCB8  fcb8
LFCD1  fcd1    LFCF0  fcf0    LFCFC  fcfc    LFCFE  fcfe    LFD1A  fd1a
LFD26  fd26    LFD32  fd32    LFD3B  fd3b    LFD42  fd42    LFD4E  fd4e
LFD51  fd51    LFD69  fd69    LFD79  fd79    LFD83  fd83    LFDB1  fdb1
LFDBD  fdbd    LFDCD  fdcd    LFDD9  fdd9    LFDDD  fddd    LFDED  fded
LFE07  fe07    LFE0C  fe0c    LFE13  fe13    LFE1D  fe1d    LFE24  fe24
LFE2A  fe2a    LFE33  fe33    LFE3A  fe3a    LFE46  fe46    LFE4E  fe4e
LFE4F  fe4f    LFE54  fe54    LFE64  fe64    LFE6E  fe6e    LFE77  fe77*
LFE88  fe88    LFE9D  fe9d    LFEA8  fea8    LFEB9  feb9    LFEC1  fec1
LFEC2  fec2    LFEC6  fec6    LFECE  fece    LFEE6  fee6    LFEED  feed
LFF00  ff00    LFF06  ff06    LFF13  ff13    LFF16  ff16    LFF1A  ff1a
LFF2A  ff2a    LFF2D  ff2d    LFF44  ff44    LFF58  ff58    LFF64  ff64
LFF80  ff80    LFF8A  ff8a    LFF9B  ff9b    LFFA1  ffa1    LFFB1  ffb1
LFFB6  ffb6    LFFC1  ffc1    LFFC2  ffc2    LFFC7  ffc7    LFFCE  ffce
LFFDF  ffdf    LFFE7  ffe7    LFFF3  fff3*   LFMT   d0fa    LINE   e857
LIST   e9db    LLAB   0005    LMOV   e970    LODM   e982    LT     e8f6
MAXFIL 0006    MAXL   d009    MESS   e7e0    MLAB   ebaa    MODE   e58c
MOV23  e680    MOVEL  e9b8    MPNT   edf2    NCHAR  d196    NEXT   e17a
NFOR   e6cd    NMLEN  0005    NOCHR  d0b8    NOLA   d103*   NOLIN  d0fb
NOR1   e9ab    NORM   e9a5    NOVR   ea8e    NUM1   f302    NUM2   f307
NUM3   f30c    NUMS   f2eb    NXT1   f16f    NXT2   f179    OBUF   d1c9
OCN1   f0c7    OCN2   f0ca    OCNT   f0b3    OERR   f0d8    OIND   d10b
OOTB   e359*   OOUT   e353    OP1    f053    OP2    f056    OP4    f0ae
OP5    f0b1*   OPAD   f0ad    OPC    eb8e    OPC2   f05b*   OPC3   f077*
OPCD   f037    OPRD   d105    OPRI   d107    ORG1   ebe6    ORG2   ecae
OTAB   eee5    OUT8   d0cf    OUTDR  d0a9    OUTP8  e1f3    PABL   ec56*
PAS1   eb57    PAS2   ec3d    PASI   d0f9    PNTR   d101    PSEU   f0e6
PSU1   ebc2    PSU2   ec71    RDYMG  e0d7    READ   e172    RES2   ec95
RES21  eca1    RESI   ec16    RMOV   e979    RNUM   e769    ROOM   e676
ROOM1  e5e7    RTAB   f12d    SAVL   d1c9    SBL1   eecf    SBL2   eed3
SBLK   eecc    SCNT   d0f3    SCRN   e380    SEAR   e257    SEN1   f2e5
SEND   f2c8    SIGN   d104    SIMU   f75c    SLA1   f123    SLAB   f0f8
SLINE  d195    SMODE  d12f    SPEED  d1a0    SSTR   f1eb    STAB   eaa3
STAT   d0a4    STOM   e98a    SWAP   e5ef    SWAPS  e5ea    SWCH   00ff*
SWCH1  d0fd    SWCH2  d0fe    SYMADD d132    SYML   e47e    SYMSV  d130
SYMT   e000*   SYMX   d0f4    SYSIN  d094    SYSIO  d08f    SYSOT  d096
SYSYM  d300    TABA   d0f5    TBE    0080    TEMP   d109    TERM   f3e4
TERMW  d18f    TEST   e5d2    TEXT   e9dc    TXT2   fa0b    TY31   ed88
TY32   ed8b    TY41   edb4    TY56   ede0    TY6    ee11    TYP2   ed64
TYP3   ed77    TYP4   ed96    TYP5   edcb    TYP6   ee01    TYS5   edd3
TYS6   ee14    UDAI   0001*   UDAO   0001*   UDATA  0001    USARE  d1a3*
USTA   0000    VAL1   e290    VAL2   e2ab    VAL3   e2bb    VAL4   e2bd
VAL5   e2cb    VALC   e515    VCHK   e51c    VDAD   fdf4    VDM1   cc00
WHAT   e7dd    XOUT   d0ff    ZBU1   e270    ZBUF   e26a    ZERO   e919
