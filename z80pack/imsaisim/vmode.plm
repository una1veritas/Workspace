/*
        CP/M UTILITY TO SET VIDEO MODES FOR IMSAI VIO BOARD

        THIS PROGRAM WAS WRITTEN FOR THE INTEL PL/M-80 CROSS COMPILER

        1.0 02/08/2017 UDO MUNK         FIRST RELEASED VERSION
        1.1 02/10/2017 UDO MUNK         ADDED MORE FEATURES
        1.2 06/01/2017 UDO MUNK         CHECK FIRMWARE SIGNATURE
*/

0100H: /* ORIGIN OF THIS PROGRAM FOR CP/M */

DECLARE         /* ASCII CONSTANTS */
    CR          LITERALLY '13',         /* CARRIAGE RETURN */
    LF          LITERALLY '10',         /* LINEFEED */
    ESC         LITERALLY '1BH',        /* ESCAPE */
    CNTLZ       LITERALLY '1AH';        /* SUB */

DECLARE         /* BDOS FUNCTIONS */
    BDOS$JUMP   LITERALLY '05H',        /* JUMP TO BDOS */
    BDOS$EXIT   LITERALLY '0',          /* EXIT PROGRAM */
    BDOS$PRINTS LITERALLY '9';          /* PRINT CONSOLE STRING */

DECLARE         /* DEFAULT FILE CONTROL BLOCK */
    FCB$A       ADDRESS INITIAL(5CH),
    FCB         BASED FCB$A (33) BYTE;

DECLARE         /* IMSAI VIO MEMORY MAPPED COMMAND WORD */
    VIO$A       ADDRESS INITIAL(0F7FFH),
    VIO$CMD     BASED VIO$A BYTE;

DECLARE         /* IMSAI VIO FIRMWARE SIGNATURE */
    VSIG$A      ADDRESS INITIAL(0FFFDH),
    VSIG        BASED VSIG$A BYTE;

DECLARE         /* IMSAI VIO FIRMWARE INITIALISATION */
    VIO$INIT    LITERALLY '0F800H';

DECLARE         /* IMSAI VIO FIRMWARE TERMINAL SEQUENCES */
    C$TOGGLE    DATA (ESC,'C',CNTLZ,'$'), /* TOGGLE 80/40 COLUMNS */
    L$TOGGLE    DATA (ESC,'L',CNTLZ,'$'), /* TOGGLE 24/12 LINES */
    I$TOGGLE    DATA (ESC,'V$'),          /* TOGGLE INVERSE/NORMAL VIDEO */
    U$TOGGLE    DATA (ESC,'U$'),          /* TOGGLE UPPER/LOWER CASE */
    CLS         DATA (CNTLZ,'$');         /* CLEAR SCREEN, HOME CURSOR */

/* CALL VIO FIRMWARE INITIALISATION ROUTINE */
VINIT: PROCEDURE;
    GO TO VIO$INIT;
END VINIT;

/* CALL BDOS FUNCTIONS WITHOUT RETURN CODE */
BDOS1: PROCEDURE(FUNC,PARM);
    DECLARE FUNC BYTE;
    DECLARE PARM ADDRESS;
    GO TO BDOS$JUMP;
END BDOS1;

/* PRINT A STRING TERMINATED WITH $ CHARACTER */
PRINTS: PROCEDURE(S);
    DECLARE S ADDRESS;
    CALL BDOS1(BDOS$PRINTS,S);
END PRINTS;

/* PRINT USAGE FOR THE PROGRAM */
USAGE: PROCEDURE;
    CALL PRINTS(.(LF,'USAGE:',CR,LF,LF,'$'));
    CALL PRINTS(.('  VMODE F(IRMWARE- CALL FIRMWARE INITIALISATION',CR,LF,'$'));
    CALL PRINTS(.('  VMODE S(CREEN  - CLEAR SCREEN',CR,LF,'$'));
    CALL PRINTS(.(LF,'SET HARDWARE:',CR,LF,'$'));
    CALL PRINTS(.('  VMODE R(ESET   - RESET TO 80X24 TEXT MODE',CR,LF,'$'));
    CALL PRINTS(.('  VMODE I(NVERSE - TURN ON INVERSE VIDEO',CR,LF,'$'));
    CALL PRINTS(.('  VMODE N(ORMAL  - TURN OFF INVERSE VIDEO',CR,LF,'$'));
    CALL PRINTS(.(LF,'SET TERMINAL MODE:',CR,LF,'$'));
    CALL PRINTS(.('  VMODE U(PPER   - TOGGLE UPPER/LOWER CASE',CR,LF,'$'));
    CALL PRINTS(.('  VMODE V(IDEO   - TOGGLE INVERSE VIDEO',CR,LF,'$'));
    CALL PRINTS(.('  VMODE C(OLUMNS - TOGGLE 80/40 COLUMNS/LINE',CR,LF,'$'));
    CALL PRINTS(.('  VMODE L(INES   - TOGGLE 24/12 LINES',CR,LF,'$'));
END USAGE;

/* FIRST CHECK VIO FIRMWARE SIGNATURE, DO NOTHING IF NOT THERE */
IF (VSIG(0) <> 'V') OR (VSIG(1) <> 'I') OR (VSIG(2) <> '0') THEN DO;
    CALL PRINTS(.('NO VIO FOUND',CR,LF,'$'));
    GO TO DONE;
END;

IF FCB(1) = 'F' THEN                    /* CALL FIRMWARE INITIALISATION */
    CALL VINIT;
ELSE IF FCB(1) = 'S' THEN               /* CLEAR SCREEN */
    CALL PRINTS(.CLS);
ELSE IF FCB(1) = 'R' THEN               /* RESET VIDEO MODE */
    VIO$CMD = 8;
ELSE IF FCB(1) = 'I' THEN               /* INVERSE VIDEO */
    VIO$CMD = VIO$CMD OR 16;
ELSE IF FCB(1) = 'N' THEN               /* NORMAL VIDEO */
    VIO$CMD = VIO$CMD AND 15;
ELSE IF FCB(1) = 'U' THEN               /* UPPER/LOWER CASE */
    CALL PRINTS(.U$TOGGLE);
ELSE IF FCB(1) = 'V' THEN               /* INVERSE/NORMAL VIDEO */
    CALL PRINTS(.I$TOGGLE);
ELSE IF FCB(1) = 'C' THEN               /* 80/40 COLUMNS */
    CALL PRINTS(.C$TOGGLE);
ELSE IF FCB(1) = 'L' THEN               /* 24/12 LINES */
    CALL PRINTS(.L$TOGGLE);
ELSE                                    /* CRY AND DIE */
    CALL USAGE;

DONE:
CALL BDOS1(BDOS$EXIT,0);                /* TERMINATE PROGRAM */

EOF
