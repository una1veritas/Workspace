Z80/8080-Macro-Assembler  Release 2.1

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                       1      1 ;EDITS:
                       2      2 ;    30-JUN-2008 KJL
                       3      3 ;       - CREATED FROM IMSAI 8K BASIC VERSION 1.4 MANUAL
                       4      4 ;
                       5      5 ;    07-FEB-2014 UM
                       6      6 ;       - FIXED TYPOS, MATCHES MANUAL NOW
                       7      7 ;
                       8      8 ;    19-JUN-2019 UM
                       9      9 ;       - FIXED CHARACTER LITERALS NOT WORKING WITH MACRO-80
                      10     10 ;       - FIXED COMMENTS
                      11     11 ;---------------------------------------------------------
                      12     12 ; BASIC30.ASM   1.4     05/19/77        JRB     8K BASIC
                      13     13 ; BASICS2.ASM   1.401   05/11/77        DK      8K BASIC
                      14     14 ; BASIC19.ASM   1.401   05/11/77        DH
                      15     15 ; BASIC18.ASM   1.401   05/10/77        JRB
                      16     16 ; BASIC16.ASM   1.401   05/09/77        DH
                      17     17 ; BASIC11.ASM   1.401   05/04/77        DH
                      18     18 ; BASIC10.ASM   1.401   05/03/77        DH
                      19     19 ; BASIC8.ASM    1.401   05/02/77        DH
                      20     20 ;
                      21     21 ; IMSAI 8K-9K BASIC
                      22     22 ;
                      23     23 ; COPYRIGHT (C) 1977
                      24     24 ; IMSAI MANUFACTURING CORPORATION
                      25     25 ; 14860 WICKS BLVD, SAN LEANDRO CALIFORNIA  94577
                      26     26 ;
                      27     27 ; CORRECTION HISTORY:
                      28     28 ;
                      29     29 ;   02/25/77 - FIXED BEGPR POINTERS
                      30     30 ;            - FIXED LOG(X) FOR 0.5 < X < 1.0
                      31     31 ;            - FIXED SQR(X) FOR 0.0 < X < 0.5
                      32     32 ;            - FIXED SCI NOTATION INPUT ROUTINE
                      33     33 ;            - FIXED EDIT ROUTINE WHEN PROGRAM ENDS ON
                      34     34 ;              00 BOUNDARY (SYSTEM USED TO GO AWAY)
                      35     35 ;            - ADDED XEQ COMMAND (LIKE RUN BUT KEEPS DATA)
                      36     36 ;            - SOFTWARE MEMORY PROTECT OF 1ST 9K IMPLIMENTED
                      37     37 ;            - FIXED TAB FOR BACKWARDS MOVEMENT
                      38     38 ;            - FIXED OV ERROR FOR SMALL X IN TRIG,LOG & EXP
                      39     39 ;            - ADDED PROGRAM CHAINING CAPABILITY.
                      40     40 ;            - FIXED EXP(X) ROUTINE FOR LARGE X.
                      41     41 ;            - ADDED PEEK(X) COMMAND
                      42     42 ;            - ADDED POKE A,X COMMAND
                      43     43 ;            - ADDED CALL A COMMAND
                      44     44 ;  04/02/77  - ADDED TARBEL CASSETTE SAVE AND LOAD
                      45     45 ;            - ADDED FIX LINE EDITOR
                      46     46 ;            - RENAMED NATURAL LOG TO LN(X)
                      47     47 ;            - ADDED BASE 10 LOG AS LOG(X)
                      48     48 ;            - ALLOWED FOR DAZZLER IN OUTPUT ROUTINE
                      49     49 ;            - ADDED LINE # SEARCH UTILITY (LOCAT EQU $)
                      50     50 ;            - ADDED TABLE SEARCH UTILITY (SEEK EQU $)
                      51     51 ;            - ARRAYS CAN NOW HAVE > 256 ELEMENTS PER DIM
                      52     52 ; 04/09/77   -ADDED CONDITIONAL ASSY PARAMS FOR 8 AND 9K
                      53     53 ;            -FIXED POWER ERROR. (X^B WHEN B=0 GAVE X^2.)
                      54     54 ;            -ADDED CONTROL H AS PHYSICAL RUBOUT OF CHAR
                      55     55 ; 04/27/77   -CHANGE RST'S TO RUN UNDER CP/M
                      56     56 ;            -ADDED EXPRESSION EVALUATER FIX
                      57     57 ;            -LOAD UNDER CP/M
                      58     58 ; 05/02/77   -ADD DDT, BYE COMMANDS, BIOS I/O
                      59     59 ; 05/03/77   -OPTIMIZE FUNCTION ITERATION LOOP (SIN5)
                      60     60 ;            -SO UNDERFLOW CAN BE MADE NON-FATAL
                      61     61 ; 05/04/77   -OPTIMIZE SIN(X) ROUTINE
                      62     62 ;            -ADD NON-FATAL ERRORS
                      63     63 ; 05/09/77   -SQUISH TO INCLUDE PEEK,POKE,CALL IN 8K
                      64     64 ; 05/11/77   -MAKE RND(X) USE X AS RANGE; X^0->1,0^X->0
                      65     65 ;            -TAB(N) GO TO NEXT LINE IF PAST POSITION
                      66     66 ; 5/12/77   - BUG IN NESTED FOR'S AND REENTERED FOR'S FIXED
                      67     67 ;
                      68     68 ; ASSEMBLY PARAMETERS:
0000  =               69     69 LARGE   EQU     0       ;-1=9K ASSEMBLY, 0=8K
0000  =               70     70 CPM     EQU     0       ;-1=RUN UNDER CPM
0000  =               71     71 HUNTER  EQU     0       ;-1= INCLUDE BAUD COMMAND
                      72     72 ;
                      73     73 ; CPM EQUATES
                      74     74 ;
0000  =               75     75 BOOT    EQU     0       ;WARM BOOT
0005  =               76     76 BDOS    EQU     5       ;BDOS ENTRY
0100  =               77     77 TBASE   EQU     0100H   ;PROGRAM LOAD UNDER CPM
0003  =               78     78 CSTAT   EQU     3       ;OFFSET OF CONSOLE STATUS
                      79     79                                 ;...QUERY IN BIOS TABLE
                      80     80 ;
                      81     81 ; ASCII EQUATES, CHARACTER LITERALS NOT WORKING WITH MACRO-80
                      82     82 ;
005e  =               83     83 UPARR   EQU     05EH
005c  =               84     84 BACKSL  EQU     05CH
                      85     85 ;
                      86     86 ; BASIC EQUATES
                      87     87 ;
00f7  =               88     88 FATAL   EQU     0F7H    ;CODE FOR FATAL IS RST 6
                      89     89 ;
0000                  90     90 BASIC:  IF      NOT CPM
                      91     91         ORG     0
0000  21 00 24        92     92         LXI     H,RAM+1024
0003  3e ae           93     93         MVI     A,0AEH  ;START OF INIT SEQUENCE
0005  c3 81 00        94     94         JMP     INIT1   ;FINISH INIT
                      95     95         ENDIF
                      96     96 ;
                      97     97         IF      CPM
                      98     98         ORG     TBASE
                      99     99         JMP     INITC   ;USE TEMPORARY CODE AT END
                     100    100         ENDIF
                     101    101 ;
                     102    102 ;       ORG     8
                     103    103 ;
                     104    104 ; SKIP CHARS POINTED BY H,L UNTIL NON-BLANK,
                     105    105 ; LEAVE IN REG A
                     106    106 ;
0008  7e             107    107 RST1:   MOV     A,M     ;LOAD THE BYTE AT (H,L)
0009  fe 20          108    108         CPI     ' '     ;TEST IF BLANK
000b  c0             109    109         RNZ             ;RETURN IF NOT
000c  23             110    110         INX     H       ;POINT NEXT
000d  c3 08 00       111    111         JMP     RST1    ;LOOP
                     112    112 ;
                     113    113 ;
                     114    114 ;       ORG     16
                     115    115 ;
                     116    116 ; COMPARE STRING AT (H,L) TO STRING AT (D,E)
                     117    117 ; RETURN IF EQUAL (THRU X'00' IN D,E) OR ON FIRST NOT EQUAL
                     118    118 ; ONLY THE FIRST THREE CHARS NEED BE EQUAL
                     119    119 ; IGNORE ALL SPACES
                     120    120 ;
0010  c5             121    121 RST2:   PUSH    B       ;SAVE B,C
0011  06 00          122    122         MVI     B,0     ;INIT COUNT
0013  cf             123    123 COMP1:  RST     1       ;SKIP SPACES
0014  1a             124    124         LDAX    D       ;GET CHAR TO MATCH WITH
0015  c3 79 1a       125    125         JMP     COMP2   ;CONTINUE ELSEWHERE
                     126    126 ;
                     127    127 ;
                     128    128 ;       ORG     24
                     129    129 ;
                     130    130 ; STORE THE FLOATING POINT ACCUMULATOR AT (H,L)
                     131    131 ;
0018  11 58 22       132    132 RST3:   LXI     D,FACC  ;POINT FLOAT ACC
001b  06 04          133    133         MVI     B,4     ;BYTE COUNT
001d  c3 4d 1c       134    134         JMP     COPYD   ;GO MOVE IT
                     135    135 ;
                     136    136 ;
                     137    137 ;       ORG     32
                     138    138 ;
                     139    139 ; INCREMENT H,L BY BYTE AT (SP), RETURN TO (SP)+1
                     140    140 ;
0020  e3             141    141 RST4:   XTHL            ;GET RETURN ADDRESS IN H,L
0021  7e             142    142         MOV     A,M     ;GET THE INCREMENT
0022  23             143    143         INX     H       ;POINT TRUE RETURN
0023  e3             144    144         XTHL            ;PUT BACK TO STACK
0024  d5             145    145         PUSH    D       ;SAVE D,E
0025  c3 3b 00       146    146         JMP     RST4A   ;CONTINUE
                     147    147 ;
                     148    148 ;
                     149    149 ;       ORG     40
                     150    150 ;
                     151    151 ; LOAD THE FLOATING POINT ACCUM WITH THE 4 BYTES AT (H,L)
                     152    152 ;
0028  11 58 22       153    153 RST5:   LXI     D,FACC  ;POINT FLOAT ACC
002b  06 04          154    154         MVI     B,4     ;BYTE COUNT
002d  c3 58 1c       155    155         JMP     COPYH   ;GO MOVE IT
                     156    156 ;
                     157    157 ;
                     158    158 ;       ORG     48
                     159    159 ;
                     160    160 ; PRINT:  'XX ERR & NNN'
                     161    161 ; **** IF ERROR MESSAGE CHANGES TO A DIFFERENT RST,
                     162    162 ; **** ...CHANGE "FATAL" EQUATE
                     163    163 ;
0030  e3             164    164 RST6:   XTHL            ;SAVE HL, GET ERROR CODE PTR
0031  f5             165    165         PUSH    PSW     ;SAVE REGS
0032  d5             166    166         PUSH    D
0033  c5             167    167         PUSH    B
0034  c3 31 1c       168    168         JMP     ERROR   ;CONTINUE
                     169    169 ;
                     170    170         IF NOT CPM
                     171    171         ORG     59      ;LEAVE 3 BYTES FOR DDT
                     172    172         ENDIF
                     173    173 ;
003b  5f             174    174 RST4A:  MOV     E,A     ;PUT IN LOW
003c  b7             175    175         ORA     A       ;TEST SIGN
003d  16 00          176    176         MVI     D,0     ;DEFAULT POSITIVE
003f  f2 44 00       177    177         JP      RST4B   ;BRIF +
0042  16 ff          178    178         MVI     D,0FFH  ;ELSE, NEG
0044  19             179    179 RST4B:  DAD     D       ;BUMP H,L
0045  d1             180    180         POP     D       ;RESTORE D,E
0046  c9             181    181         RET             ;RETURN
                     182    182 ;PAGE
0047  43 4f 50 59    183    183         DB      'COPYRIGHT (C) 1977 '
004b  52 49 47 48    183    184
004f  54 20 28 43    183    185
0053  29 20 31 39    183    186
0057  37 37 20       183    187
005a  49 4d 53 41    184    188         DB      'IMSAI MFG CORP '
005e  49 20 4d 46    184    189
0062  47 20 43 4f    184    190
0066  52 50 20       184    191
0069  53 41 4e 20    185    192         DB      'SAN LEANDRO CA 94577 USA'
006d  4c 45 41 4e    185    193
0071  44 52 4f 20    185    194
0075  43 41 20 39    185    195
0079  34 35 37 37    185    196
007d  20 55 53 41    185    197
                     186    198 ;
                     187    199 ; INITIALIZATION ROUTINE
                     188    200 ; DETERMINE MEMORY SIZE.
                     189    201 ;    (START AT 9K AND TRY 1K INCREMENTS TILL END)
                     190    202 ; SETUP POINTERS FOR STACK, DATA, AND PROGRAM
                     191    203 ; INIT SIO BOARD
                     192    204 ;
0081                 193    205 INIT1:  IF      NOT CPM
0081  d3 03          194    206         OUT     TTY+1   ;INIT TERMINAL
0083  3e 40          195    207         MVI     A,40H
0085  d3 03          196    208         OUT     TTY+1
0087  3e ba          197    209         MVI     A,0BAH
0089  d3 03          198    210         OUT     TTY+1
008b  3e 37          199    211         MVI     A,37H
008d  d3 03          200    212         OUT     TTY+1
008f  01 00 04       201    213         LXI     B,1024  ;1K INCR
0092  7e             202    214 INIT2:  MOV     A,M     ;GET A BYTE FROM MEMORY
0093  2f             203    215         CMA             ;COMPLEMENT
0094  77             204    216         MOV     M,A     ;REPLACE
0095  be             205    217         CMP     M       ;TEST IF RAM/ROM/END
0096  c2 9f 00       206    218         JNZ     INIT3   ;BRIF OUT OF RAM
0099  2f             207    219         CMA             ;RE-COMPLEMENT
009a  77             208    220         MOV     M,A     ;PUT ORIG BACK
009b  09             209    221         DAD     B       ;POINT NEXT BLOCK
009c  d2 92 00       210    222         JNC     INIT2   ;LOOP
                     211    223         ENDIF
                     212    224 ;
009f  f9             213    225 INIT3:  SPHL            ;SET STACK POINTER TO END OF MEMORY
00a0  01 00 ff       214    226         LXI     B,-256  ;ALLOW 256 BYTES FOR STACK
00a3  09             215    227         DAD     B       ;ADD TO ADDRESS
00a4  22 91 22       216    228         SHLD    DATAB   ;SAVE ADDR OF START OF DATA
                     217    229 ;
                     218    230 ; SOFTWARE WRITE PROTECT OF FIRST 9K OF RAM.
                     219    231 ;
                     220    232 ; BUT NO PROTECT UNDER CPM OR FOR 8K (EPROM) VERSION
                     221    233         IF      LARGE AND NOT CPM
                     222    234         MVI     A,2     ;SET PROTECT OF FIRST 1K BLOCK
                     223    235 PROTC:  OUT     0FEH    ;SEND IT
                     224    236         ADI     4       ;ADDRESS NEXT 1K BLOCK
                     225    237         CPI     26H     ;STOP AFTER 9 BLOCKS
                     226    238         JNZ     PROTC   ;CONTINUE TO PROTECT
                     227    239         ENDIF
00a7  af             228    240         XRA     A       ;GET A ZERO IN A
00a8  f5             229    241         PUSH    PSW     ;SET STACK 1 LEVEL DEEP WITHOUT A GOSUB
00a9  21 00 00       230    242         LXI     H,0     ;CLEAR H,L
00ac  39             231    243         DAD     SP      ;SP TO H,L
00ad  22 8b 22       232    244         SHLD    STACK   ;SAVE BEG OF STACK
00b0  cd 51 01       233    245         CALL    IRAM    ;INIT RAM
00b3  11 6b 1d       234    246         LXI     D,NRNDX ;POINT TO RANDOM # SERIES
00b6  06 08          235    247         MVI     B,8     ;LOAD COUNT
00b8  cd 4d 1c       236    248         CALL    COPYD   ;COPY TO TRND<X> IN RAM TABLE
00bb  36 02          237    249         MVI     M,2     ;SET RANDOM SWITCH
                     238    250         IF      CPM
                     239    251         CALL    NEW0    ;AUTOMATIC "NEW"
                     240    252         ENDIF
00bd  21 78 1d       241    253         LXI     H,VERS  ;POINT VERSION MESSAGE
00c0  cd bd 19       242    254 RDYM:   CALL    TERMM   ;WRITE IT
                     243    255 ;
00c3  =              244    256 RDY     EQU     $
                     245    257 ;
                     246    258 ; PRINT 'READY'
                     247    259 ;
00c3  21 26 1e       248    260         LXI     H,READY ;POINT READY MSG
00c6  cd bd 19       249    261         CALL    TERMM   ;GO PRINT IT
                     250    262 ;
00c9  =              251    263 GETCM   EQU     $
                     252    264 ;
                     253    265 ;
                     254    266 ; COMMAND INPUT ROUTINE
                     255    267 ;
                     256    268 ; READ A LINE FROM THE TTY
                     257    269 ; IF STARTS WITH NUMERIC CH, ASSUME IT'S A BASIC STATEMENT
                     258    270 ; IF NOT, IT IS EITHER AN IMMEDIATE STATMENT, OR A COMMAND
                     259    271 ;
00c9  3e 3a          260    272         MVI     A,':'   ;PROMPT & ON SET FOR SW
00cb  32 76 20       261    273         STA     EDSW    ;SET MODE=EDIT
00ce  2a 8b 22       262    274         LHLD    STACK   ;GET STACK ADDRESS
00d1  f9             263    275         SPHL            ;SET REG SP
00d2  cd 04 19       264    276         CALL    TERMI   ;GET A LINE
00d5  cd b5 1a       265    277         CALL    PACK    ;GO PACK THE NUMBER INTO B,C
00d8  78             266    278         MOV     A,B     ;GET HI BYTE OF LINE NUMBER
00d9  b1             267    279         ORA     C       ;PLUS LOW BYTE
00da  ca 64 01       268    280         JZ      EXEC    ;BRIF EXEC STATEMENT
00dd  c5             269    281         PUSH    B       ;SAVE LINE NUMBER
00de  11 7d 20       270    282         LXI     D,IMMED+1       ;POINT SAVE AREA
00e1  eb             271    283         XCHG            ;FLIP/FLOP
00e2  70             272    284         MOV     M,B     ;PUT LO LINE
00e3  23             273    285         INX     H       ;POINT NEXT
00e4  71             274    286         MOV     M,C     ;PUT LO LINE
00e5  23             275    287         INX     H       ;POINT NEXT
00e6  06 03          276    288         MVI     B,3     ;INIT COUNT
00e8  1a             277    289 EDIT1:  LDAX    D       ;GET A BYTE
00e9  77             278    290         MOV     M,A     ;PUT IT DOWN
00ea  04             279    291         INR     B       ;COUNT IT
00eb  23             280    292         INX     H       ;POINT NEXT
00ec  13             281    293         INX     D       ;DITTO
00ed  b7             282    294         ORA     A       ;TEST BYTE JUST MOVED
00ee  c2 e8 00       283    295         JNZ     EDIT1   ;LOOP
00f1  78             284    296         MOV     A,B     ;GET COUNT
00f2  32 7c 20       285    297         STA     IMMED   ;STORE THE COUNT
00f5  c1             286    298         POP     B       ;GET LINE NUM
00f6  cd 5e 1f       287    299         CALL    LOCAT   ;GO FIND REQUESTED LINE NUMBER
00f9  e5             288    300         PUSH    H       ;SAVE H,L
00fa  da 14 01       289    301         JC      EDIT5   ;BRIF IF LINE NOT FOUND
00fd  54             290    302 EDIT2:  MOV     D,H     ;COPY ADDR
00fe  5d             291    303         MOV     E,L     ;TO D,E
00ff  06 00          292    304         MVI     B,0     ;GET A ZERO
0101  4e             293    305         MOV     C,M     ;GET LEN
0102  09             294    306         DAD     B       ;POINT NEXT STMT
0103  7e             295    307 EDIT3:  MOV     A,M     ;GET LEN NEXT STMT
0104  b7             296    308         ORA     A       ;TEST IT
0105  ca 0f 01       297    309         JZ      EDIT8   ;BRIF END
0108  47             298    310         MOV     B,A     ;SET LENGTH
0109  cd 58 1c       299    311         CALL    COPYH   ;ELSE MOVE LINE
010c  c3 03 01       300    312         JMP     EDIT3   ;LOOP
010f  eb             301    313 EDIT8:  XCHG            ;PUT NEW ADDR TO H,L
0110  77             302    314         MOV     M,A     ;MARK END
0111  22 93 22       303    315         SHLD    PROGE   ;AND UPDATE ADDRESS
0114  3a 7c 20       304    316 EDIT5:  LDA     IMMED   ;GET LEN OF INSERT
0117  fe 04          305    317         CPI     4       ;TEST IF DELETE
0119  ca c9 00       306    318         JZ      GETCM   ;BRIF IS
011c  4f             307    319         MOV     C,A     ;SET LO LEN
011d  06 00          308    320         MVI     B,0     ;ZERO HI LEN
011f  2a 93 22       309    321         LHLD    PROGE   ;GET END OF PROG
0122  54             310    322         MOV     D,H     ;COPY TO
0123  5d             311    323         MOV     E,L     ;D,E
0124  09             312    324         DAD     B       ;DISP LEN OF INSERT
0125  22 93 22       313    325         SHLD    PROGE   ;UPDATE END POINT
0128  c1             314    326         POP     B       ;GET ADDR
0129  1a             315    327 EDIT6:  LDAX    D       ;GET A BYTE
012a  77             316    328         MOV     M,A     ;COPY IT
012b  1b             317    329         DCX     D       ;POINT PRIOR
012c  2b             318    330         DCX     H       ;DITTO
012d  7a             319    331         MOV     A,D     ;GET HI ADDR
012e  b8             320    332         CMP     B       ;COMPARE
012f  ca 35 01       321    333         JZ      EDIT7   ;BRIF HI EQUAL
0132  d2 29 01       322    334         JNC     EDIT6   ;BRIF NOT LESS
0135  7b             323    335 EDIT7:  MOV     A,E     ;GET LO ADDR
0136  b9             324    336         CMP     C       ;COMPARE
0137  d2 3d 01       325    337         JNC     ED7A    ;MUST TEST FOR 00 BOUNDARY
013a  c3 46 01       326    338         JMP     ED7B    ;GO AROUND BOUNDARY TEST CODE
013d  2f             327    339 ED7A:   CMA             ;COMPLIMENT LOW LINE NUMBER
013e  b9             328    340         CMP     C       ;AND COMPARE TO START
013f  c2 29 01       329    341         JNZ     EDIT6   ;BRIF NOT =
0142  b7             330    342         ORA     A       ;NOT TEST FOR 00
0143  c2 29 01       331    343         JNZ     EDIT6   ;THIS IS USUAL CASE
0146  13             332    344 ED7B:   INX     D       ;POINT FORWARD
0147  21 7c 20       333    345         LXI     H,IMMED ;POINT INSERT
014a  46             334    346         MOV     B,M     ;GET LENGTH
014b  cd 58 1c       335    347         CALL    COPYH   ;GO MOVE IT
014e  c3 c9 00       336    348         JMP     GETCM   ;GO GET ANOTHER COMMAND
                     337    349 ;
                     338    350 ; IRAM          INITIALIZE RAM
                     339    351 ;       ZEROES RAM FROM BZERO TO EZERO
                     340    352 ;       INITS RANDOM # CONSTANTS
                     341    353 ;       RETURNS H=PTR TO TRND
                     342    354 ;
0151  21 00 20       343    355 IRAM:   LXI     H,BZERO ;CLEAR BZERO->EZERO
0154  06 77          344    356         MVI     B,EZERO-BZERO
0156  cd 5e 1c       345    357         CALL    ZEROM
0159  11 6b 1d       346    358         LXI     D,NRNDX ;MOVE RANDOM # SERIES TO RNDX
015c  21 77 22       347    359         LXI     H,RNDX
015f  06 08          348    360         MVI     B,8     ;COUNT
0161  c3 4d 1c       349    361         JMP     COPYD   ;MOVE IT & RETURN
                     350    362 ;PAGE
0164  =              351    363 EXEC    EQU     $
                     352    364 ;
                     353    365 ;
                     354    366 ; DECODE COMMAND IN IOBUFF
                     355    367 ; EXECUTE IF POSSIBLE
                     356    368 ; THEN GOTO GET NEXT COMMAND
                     357    369 ;
                     358    370 ;
0164  32 74 22       359    371         STA     MULTI   ;RESET MULTI SW
0167  32 88 22       360    372         STA     FNMOD   ;RESET FN TYPE
016a  3c             361    373         INR     A       ;GET A ONE
016b  32 75 20       362    374         STA     RUNSW   ;SET IMMEDIATE MODE
016e  21 cf 20       363    375         LXI     H,IOBUF+1       ;POINT SMT
0171  11 7c 20       364    376         LXI     D,IMMED ;POINT NEW AREA
0174  7e             365    377 EXEC1:  MOV     A,M     ;GET A BYTE
0175  12             366    378         STAX    D       ;PUT TO (D,L)
0176  13             367    379         INX     D       ;POINT NEXT
0177  23             368    380         INX     H       ;DITTO
0178  b7             369    381         ORA     A       ;TEST BYTE
0179  c2 74 01       370    382         JNZ     EXEC1   ;CONTINUE
017c  21 ec 1d       371    383         LXI     H,NULLI ;POINT NO LINE NUM
017f  22 89 22       372    384         SHLD    LINE    ;SAVE ADDR
0182  21 7c 20       373    385         LXI     H,IMMED ;POINT START OF CMMD
0185  c3 37 02       374    386         JMP     RUN3    ;GO INTO RUN PROCESSOR
                     375    387 ;
0188  =              376    388 NEW     EQU     $
                     377    389 ;
                     378    390 ; NEW COMMAND
                     379    391 ; 'NEW'==>CLEAR PROGRAM AND DATA
                     380    392 ; 'NEW*'==>CLEAR PROGRAM ONLY
                     381    393 ;
0188  e5             382    394         PUSH    H       ;SAE PTR
0189  21 c9 00       383    395         LXI     H,GETCM ;MAKE SUBROUTINE
018c  e3             384    396         XTHL            ;RESTORE H
018d  cf             385    397         RST     1       ;GET 1ST NON-BLANK CHAR AFTER 'NEW'
018e  de 2a          386    398         SBI     '*'     ;TEST
0190  ca 98 01       387    399         JZ      NEW1    ;BRIF PROGRAM CLEAR ONLY
0193  af             388    400 NEW0:   XRA     A       ;GET A ZERO
0194  2a 91 22       389    401         LHLD    DATAB   ;POINT DATA AREA
0197  77             390    402         MOV     M,A     ;CLEAR IT
0198  21 96 22       391    403 NEW1:   LXI     H,BEGPR ;POINT START
019b  22 93 22       392    404         SHLD    PROGE   ;RESET PROGRAM END
019e  77             393    405         MOV     M,A     ;CLEAR IT
019f  c9             394    406         RET
                     395    407 ;
01a0  =              396    408 FREE    EQU     $
                     397    409 ;
                     398    410 ; FREE COMMAND
                     399    411 ; COMPUTE AMOUNT OF AVAILABLE STORAGE (EXCLUDING DATA AREA)
                     400    412 ;
01a0  2a 91 22       401    413         LHLD    DATAB   ;GET DATA BEG ADDRESS
01a3  eb             402    414         XCHG            ;PUT IN D,E
01a4  2a 93 22       403    415         LHLD    PROGE   ;GET PROGRAM END ADDRESS
01a7  7b             404    416         MOV     A,E     ;LO ADDR TO REG A
01a8  95             405    417         SUB     L       ;SUBTRACT
01a9  5f             406    418         MOV     E,A     ;SAVE IT
01aa  7a             407    419         MOV     A,D     ;HI ADDR TO REG A
01ab  9c             408    420         SBB     H       ;SUBTRACT
01ac  57             409    421         MOV     D,A     ;SAVE IT
01ad  cd 89 1c       410    422         CALL    BINFL   ;GO FLOAT D,E
01b0  21 ce 20       411    423         LXI     H,IOBUF ;POINT BUFFER
01b3  cd f0 14       412    424         CALL    FOUT    ;GO CONVERT TO OUTPUT
01b6  36 00          413    425         MVI     M,0     ;MARK END
01b8  cd b5 19       414    426         CALL    TERMO   ;GO WRITE IT
01bb  c3 c9 00       415    427         JMP     GETCM   ;CONTINUE
                     416    428 ;
01be  =              417    429 TAPE    EQU     $
                     418    430 ;
                     419    431 ; TAPE COMMAND. DON'T ECHO INPUT. CONTINUE UNTIL KEY
                     420    432 ; COMMAND.
                     421    433 ;
01be  3e 01          422    434         MVI     A,1     ;SET TAPE INPUT SWITCH
01c0  32 71 20       423    435         STA     TAPES   ;STORE IT
01c3  3e 11          424    436         MVI     A,11H   ;GET DC1 (=READER ON)
01c5  cd 4f 19       425    437         CALL    TESTO   ;WRITE IT
01c8  c3 c9 00       426    438         JMP     GETCM   ;GO PROCESS INPUT
                     427    439 ;
01cb  =              428    440 ENDIT   EQU     $
                     429    441 ;
                     430    442 ; END COMMAND. IF TAPE PUNCH SWITCH IS ON, PUNCH 'KEY' THEN
                     431    443 ; CONTINUE
                     432    444 ;
01cb  3a 71 20       433    445         LDA     TAPES   ;GET PAPER TAPE SWITCH
01ce  fe 02          434    446         CPI     2       ;TEST FOR SAVE
01d0  c2 c3 00       435    447         JNZ     RDY     ;BRIF NOT
01d3  21 79 1e       436    448         LXI     H,KEYL  ;POINT 'KEY'
01d6  cd bd 19       437    449         CALL    TERMM   ;WRITE IT
01d9  cd e6 01       438    450         CALL    HDRTL   ;GO PUT TRAILER
                     439    451 ;
                     440    452 ; KEY COMMAND. RESET TAPE SWITCH. TURN READER OFF
                     441    453 ;
01dc  af             442    454 KEY:    XRA     A       ;RESET TAPE SWITCH
01dd  32 71 20       443    455         STA     TAPES
01e0  21 62 1d       444    456         LXI     H,PCHOF ;POINT READER/PUNCH OFF
01e3  c3 c0 00       445    457         JMP     RDYM    ;PRINT POFF+READY MESSAGE
                     446    458 ;
01e6  =              447    459 HDRTL   EQU     $
                     448    460 ;
                     449    461 ; PUNCH HEADER OR TRAILER ON PAPER TAPE.
                     450    462 ;
01e6  06 19          451    463         MVI     B,25    ;LOAD COUNT
01e8  3e ff          452    464 HDR1:   MVI     A,0FFH  ;LOAD RUBOUT
01ea  cd 4f 19       453    465         CALL    TESTO   ;WRITE IT
01ed  05             454    466         DCR     B       ;DECREMENT COUNT
01ee  af             455    467         XRA     A       ;ZERO A
01ef  b8             456    468         CMP     B       ;TEST COUNT
01f0  c8             457    469         RZ              ;RETURN ON ZERO
01f1  c3 e8 01       458    470         JMP     HDR1    ;CONTINUE
                     459    471 ;PAGE
                     460    472 ;
                     461    473 ; RUN PROCESSOR, GET NEXT STATMENT, AND EXECUTE IT
                     462    474 ; IF IN IMMEDIATE MODE, THEN RETURN TO GETCMMD
                     463    475 ;
01f4  af             464    476 RUNCM:  XRA     A       ;PUT A ZERO TO A
01f5  2a 91 22       465    477         LHLD    DATAB   ;GET ADDRESS OF DATA POOL
01f8  77             466    478         MOV     M,A     ;INITIALIZE TO 0
01f9  =              467    479 XEQ     EQU     $       ;START FOR EXECUTION WITH OLD DATA
01f9  cd 51 01       468    480         CALL    IRAM    ;INITALIZE START OF RAM
01fc  21 95 22       469    481         LXI     H,BEGPR-1       ;POINT 1 PRIOR TO BEGIN
01ff  22 8f 22       470    482         SHLD    DATAP   ;RESTORE DATA STMT POINTER
0202  36 00          471    483         MVI     M,0     ;RESET DATA STMT POINTER
0204  23             472    484         INX     H       ;POINT TO START
0205  22 70 22       473    485         SHLD    STMT    ;SAVE IT
0208  c3 25 02       474    486         JMP     RUN2    ;GO PROCESS IT
                     475    487 ;
                     476    488 ; STATEMENTS RETURN HERE TO CONTINUE PROCESSING
020b  21 74 22       477    489 RUN:    LXI     H,MULTI ;POINT MULTIPLE SWITCH
020e  7e             478    490         MOV     A,M     ;GET SW
020f  b7             479    491         ORA     A       ;TEST IT
0210  ca 1b 02       480    492         JZ      RUN1    ;BRIF NOT ON
0213  36 00          481    493         MVI     M,0     ;ELSE, RESET IT
0215  2a 72 22       482    494         LHLD    ENDLI   ;GET ADDRESS
0218  c3 37 02       483    495         JMP     RUN3    ;GO PROCESS REMAIN
021b  2a 70 22       484    496 RUN1:   LHLD    STMT    ;ELSE, GET ADDR OF PREV STMT
021e  5e             485    497         MOV     E,M     ;GET LEN CODE
021f  16 00          486    498         MVI     D,0     ;CLEAR HIGH BYTE OF ADDR
0221  19             487    499         DAD     D       ;INCR STMT POINTER
0222  22 70 22       488    500         SHLD    STMT    ;SAVE IT
0225  3a 75 20       489    501 RUN2:   LDA     RUNSW   ;GET RUN TYPE
0228  b7             490    502         ORA     A       ;TEST IT
0229  c2 c9 00       491    503         JNZ     GETCM   ;BRIF IMMEDIATE MODE
022c  7e             492    504         MOV     A,M     ;GET LEN CODE
022d  b7             493    505         ORA     A       ;TEST IF END
022e  ca cb 01       494    506         JZ      ENDIT   ;BRIF IS
0231  23             495    507         INX     H       ;POINT LINE NUMBER
0232  22 89 22       496    508         SHLD    LINE    ;SAVE ADDR
0235  23             497    509         INX     H       ;POINT 2ND BYTE
0236  23             498    510         INX     H       ;POINT 1ST PGM BYTE
                     499    511 ;
                     500    512 ; ENTER HERE TO DO IMMEDIATE COMMAND
0237  cf             501    513 RUN3:   RST     1       ;SKIP BLANKS
0238  22 52 22       502    514 RUN4:   SHLD    ADDR1   ;SAVE ADDR
023b  cd 3a 1a       503    515         CALL    TSTCC   ;GO SEE IF CONTROL-C OR O
023e  11 4c 1e       504    516         LXI     D,JMPTB ;POINT TO TABLE
0241  cd 86 1f       505    517         CALL    SEEK1   ;GO SEARCH COMMAND TABLE
0244  ca 4f 02       506    518         JZ      RUN7    ;BRIF COMMAND NOT FOUND
0247  e5             507    519         PUSH    H       ;SAVE H,L
0248  1a             508    520         LDAX    D       ;LOAD LOW BYTE
0249  6f             509    521         MOV     L,A     ;LOW BYTE TO L
024a  13             510    522         INX     D       ;POINT NEXT
024b  1a             511    523         LDAX    D       ;LOAD HIGH BYTE
024c  67             512    524         MOV     H,A     ;HIGH BYTE TO H
024d  e3             513    525         XTHL            ;COMMAND ADDRESS TO STACK
024e  c9             514    526         RET             ;JUMP TO ROUTINE
024f  2a 52 22       515    527 RUN7:   LHLD    ADDR1   ;RESTORE H,L POINTER
0252  c3 f1 05       516    528         JMP     LET     ;ASSUME IT'S LET STMT
                     517    529 ;PAGE
                     518    530 ;
                     519    531 ; SAVE COMMAND. TURN THE PUNCH ON THEN LIST PROGRAM
                     520    532 ;
0255  3e 02          521    533 SAVE:   MVI     A,2     ;SET PUNCH MODE
0257  32 71 20       522    534         STA     TAPES
025a  3e 12          523    535         MVI     A,12H   ;GET DC2 (=PUNCH ON)
025c  cd 4f 19       524    536         CALL    TESTO   ;WRITE IT
025f  cd e6 01       525    537         CALL    HDRTL   ;GP PUT HEADER
                     526    538 ;
0262  =              527    539 LIST    EQU     $
                     528    540 ;
                     529    541 ;
                     530    542 ; LIST PROCESSOR
                     531    543 ; DUMP THE SOURCE PROGRAM TO TTY OR PAPER TAPE
                     532    544 ;
                     533    545 ;
0262  cf             534    546         RST     1       ;SKIP TO NON BLANK
0263  11 00 00       535    547         LXI     D,0     ;GET A ZERO IN D
0266  eb             536    548         XCHG            ;FLIP TO H,L
0267  22 4b 22       537    549         SHLD    LINEL   ;SAVE IT
026a  21 99 99       538    550         LXI     H,9999H ;GET HIGH NUMBER IN H,L
026d  22 4d 22       539    551         SHLD    LINEH   ;SAVE IT
0270  eb             540    552         XCHG            ;FLIP BACK
0271  b7             541    553         ORA     A       ;TEST IF EOL
0272  ca 92 02       542    554         JZ      LIST1   ;BRIF IT IS
0275  cd b5 1a       543    555         CALL    PACK    ;GO PACK THE NUMBER, IF ANY
0278  50             544    556         MOV     D,B     ;COPY NUMBER TO D,L
0279  59             545    557         MOV     E,C     ;SAME
027a  eb             546    558         XCHG            ;FLIP TO H,L
027b  22 4b 22       547    559         SHLD    LINEL   ;SAVE IT
027e  22 4d 22       548    560         SHLD    LINEH   ;SAME
0281  eb             549    561         XCHG            ;RESTORE H,L
0282  cf             550    562         RST     1       ;SKIP TO NON BLANK
0283  fe 2c          551    563         CPI     ','     ;TEST IF COMMA
0285  c2 92 02       552    564         JNZ     LIST1   ;BRIF NOT
0288  23             553    565         INX     H       ;POINT NEXT
0289  cf             554    566         RST     1       ;SKIP TO NON-BLANK
028a  cd b5 1a       555    567         CALL    PACK    ;ELSE, GO GET THE NUMBER
028d  60             556    568         MOV     H,B     ;COPY TO
028e  69             557    569         MOV     L,C     ;D,L
028f  22 4d 22       558    570         SHLD    LINEH   ;SAVE IT
0292  21 96 22       559    571 LIST1:  LXI     H,BEGPR ;POINT BEGINNING OF PROGRAM
0295  cd 3a 1a       560    572 LIST2:  CALL    TSTCC   ;GO SEE IF CONTROL-C OR CONTROL-O
0298  7e             561    573         MOV     A,M     ;GET LEN CODE
0299  b7             562    574         ORA     A       ;TEST IF END OF PROGRAM
029a  ca cb 01       563    575         JZ      ENDIT   ;BRIF END OF PGM
029d  d6 03          564    576         SUI     3       ;SUBTRACT THREE
029f  47             565    577         MOV     B,A     ;SAVE LEN
02a0  23             566    578         INX     H       ;POINT HIGH BYTE OF LINE#
02a1  eb             567    579         XCHG            ;FLIP H,L TO D,E
02a2  2a 4b 22       568    580         LHLD    LINEL   ;GET LOW LINE TO TEST
02a5  eb             569    581         XCHG            ;RESTORE H,L
02a6  7e             570    582         MOV     A,M     ;GET LOW BYTE OF LINE NUMBER
02a7  ba             571    583         CMP     D       ;COMP WITH LINEL
02a8  da e5 02       572    584         JC      LIST8   ;BRIF LESS
02ab  c2 b5 02       573    585         JNZ     LIST4   ;BRIF NOT EQUAL
02ae  23             574    586         INX     H       ;POINT NEXT
02af  7e             575    587         MOV     A,M     ;GET NEXT BYTE OF LINE#
02b0  2b             576    588         DCX     H       ;POINT BACK
02b1  bb             577    589         CMP     E       ;COMP LOW BYTES
02b2  da e5 02       578    590         JC      LIST8   ;BRIF LESS
02b5  eb             579    591 LIST4:  XCHG            ;SAVE H,L IN D,E
02b6  2a 4d 22       580    592         LHLD    LINEH   ;GET HIGH LINE FOR TEST
02b9  eb             581    593         XCHG            ;RESTORE H,L
02ba  7e             582    594         MOV     A,M     ;GET LINE BYTE
02bb  ba             583    595         CMP     D       ;COMPARE HIGH BYTES
02bc  ca c5 02       584    596         JZ      LIST5   ;BRIF EQUAL
02bf  d2 cb 01       585    597         JNC     ENDIT   ;BRIF HIGHER
02c2  c3 cf 02       586    598         JMP     LIST6   ;GO AROUND
02c5  23             587    599 LIST5:  INX     H       ;POINT NEXT
02c6  7e             588    600         MOV     A,M     ;GET NEXT BYTE
02c7  2b             589    601         DCX     H       ;POINT BACK
02c8  bb             590    602         CMP     E       ;COMPARE LOW BYTES
02c9  ca cf 02       591    603         JZ      LIST6   ;BRIF EQUAL
02cc  d2 cb 01       592    604         JNC     ENDIT   ;BRIF HIGHER
02cf  11 ce 20       593    605 LIST6:  LXI     D,IOBUF ;POINT BUFFER AREA
02d2  cd 09 1a       594    606         CALL    LINEO   ;CONVERT LINE NUMBER
02d5  7e             595    607 LIST7:  MOV     A,M     ;GET A BYTE
02d6  12             596    608         STAX    D       ;PUT IT TO BUFFER
02d7  13             597    609         INX     D       ;POINT NEXT BUFF
02d8  23             598    610         INX     H       ;POINT NEXT PROG
02d9  05             599    611         DCR     B       ;DECR CTR
02da  c2 d5 02       600    612         JNZ     LIST7   ;LOOP
02dd  e5             601    613         PUSH    H       ;SAVE HL ADDR
02de  cd b5 19       602    614         CALL    TERMO   ;GO TYPE IT
02e1  e1             603    615         POP     H       ;RETRIEVE H ADDR
02e2  c3 95 02       604    616         JMP     LIST2   ;CONTINUE
02e5  58             605    617 LIST8:  MOV     E,B     ;PUT LEN  IN E
02e6  16 00          606    618         MVI     D,0     ;CLEAR D
02e8  19             607    619         DAD     D       ;POINT NEXT STMT
02e9  23             608    620         INX     H       ;POINT NEXT
02ea  23             609    621         INX     H       ;POINT LEN CODE
02eb  c3 95 02       610    622         JMP     LIST2   ;GO LIST IT
                     611    623 ;
                     612    624 ;
02ee  =              613    625 CONTI   EQU     $
                     614    626 ;
                     615    627 ; CONTINUE EXECUTION AT STATEMENT FOLLOWING STOP OR AT
                     616    628 ; STATEMENT THAT WAS INTERRUPTED WHEN CONTROL-C WAS TYPED
                     617    629 ;
                     618    630 ;
02ee  21 77 20       619    631         LXI     H,LINEN ;POINT LINE NUMBER OF LAST STOP/ERROR/
02f1  7e             620    632         MOV     A,M     ;GET 1ST CHAR
02f2  b7             621    633         ORA     A       ;TEST IF IMMED CMMD
02f3  ca f1 05       622    634         JZ      LET     ;BRIF IF IMMED CMMD
                     623    635 ;PAGE
                     624    636 ;
                     625    637 ;
                     626    638 ; STMT:  GOTO NNNN
                     627    639 ;
                     628    640 ;
02f6  af             629    641 GOTO:   XRA     A       ;CLEAR REG A
02f7  32 76 20       630    642         STA     EDSW    ;RESET IMMED MODE (IF IT WAS SET)
02fa  32 75 20       631    643         STA     RUNSW   ;AND RUN TYPE
02fd  cd ad 1a       632    644         CALL    NOTEO   ;ERROR IF END-OF-LINE
0300  cd b5 1a       633    645         CALL    PACK    ;GO GET LINE NUMBER IN B,C
0303  cd 94 1a       634    646         CALL    EOL     ;ERROR IF NOT END-OF-LINE
0306  cd 5e 1f       635    647 GOTO2:  CALL    LOCAT   ;GO SEARCH FOR REQUESTED LINE #
0309  da 03 1c       636    648         JC      ULERR   ;BRIF NOT FOUND
030c  22 70 22       637    649         SHLD    STMT    ;SAVE ADDR
030f  af             638    650         XRA     A       ;GET A ZERO
0310  32 74 22       639    651         STA     MULTI   ;TURN OFF MULTIPLE STMTS
0313  c3 25 02       640    652         JMP     RUN2    ;GO PROCESS THE STATEMENT
                     641    653 ;
                     642    654 ;
                     643    655 ; STMT: RESTORE
                     644    656 ;
0316  cd 94 1a       645    657 RESTO:  CALL    EOL     ;ERROR IF NOT END-OF-LINE
0319  21 95 22       646    658         LXI     H,BEGPR-1       ;POINT 1 BEFORE START OF PROGRAM
031c  22 8f 22       647    659         SHLD    DATAP   ;FORCE NEXT DATA TO BE AT START
031f  c3 0b 02       648    660         JMP     RUN     ;GO NEXT STMT
                     649    661 ;
                     650    662 ;
                     651    663 ; STMT:  RETURN
                     652    664 ;
0322  cd 94 1a       653    665 RETUR:  CALL    EOL     ;ERROR IF NOT END-OF-LINE
0325  f1             654    666         POP     PSW     ;POP THE STACK
0326  fe ff          655    667         CPI     0FFH    ;TEST IF GOSUB IN EFFECT
0328  c2 13 1c       656    668         JNZ     RTERR   ;BRIF ERROR
032b  e1             657    669         POP     H       ;GET RETURNED STATMENT ADDRESS
032c  22 70 22       658    670         SHLD    STMT    ;RESTORE
032f  e1             659    671         POP     H       ;GET ENDLINE VALUE
0330  22 72 22       660    672         SHLD    ENDLI   ;RESTORE
0333  f1             661    673         POP     PSW     ;GET MULTI SW VALUE
0334  32 74 22       662    674         STA     MULTI   ;RESTORE
0337  c3 0b 02       663    675         JMP     RUN     ;CONTINUE (AT STMT FOLLOWING GOSUB)
                     664    676 ;
                     665    677 ;
                     666    678 ; STMT:  GOSUB NNNN
                     667    679 ;
033a  cd ad 1a       668    680 GOSUB:  CALL    NOTEO   ;ERROR IF END-OF-LINE
033d  cd b5 1a       669    681         CALL    PACK    ;GET LINE NUMBER
0340  cd 94 1a       670    682         CALL    EOL     ;ERROR IF NOT END-OF-LINE
0343  3a 74 22       671    683 GOSU1:  LDA     MULTI   ;GET SW SETTING
0346  f5             672    684         PUSH    PSW     ;SAVE ON STACK
0347  2a 72 22       673    685         LHLD    ENDLI   ;GET ADDR OF END OF STMT
034a  e5             674    686         PUSH    H       ;SAVE ONE STACK
034b  2a 70 22       675    687         LHLD    STMT    ;GET STATEMENT ADDRESS
034e  e5             676    688         PUSH    H       ;SAVE RETURN ADDRESS IN STACK
034f  3e ff          677    689         MVI     A,0FFH  ;MARK AS GOSUB
0351  f5             678    690         PUSH    PSW     ;SAVE STATUS
0352  c3 06 03       679    691         JMP     GOTO2   ;GO LOOKUP LINE AND BRANCH
                     680    692 ;PAGE
                     681    693 ;
0355  =              682    694 PRINT   EQU     $
                     683    695 ;
                     684    696 ;
                     685    697 ; STMT: PRINT ....
                     686    698 ;
                     687    699 ;
0355  af             688    700         XRA     A       ;CLEAR REG A
0356  32 8d 22       689    701 PRIN4:  STA     PRSW    ;SET SW TO SAY CRLF AT END OF LINE
0359  11 ce 20       690    702         LXI     D,IOBUF ;POINT BUFFER
035c  cf             691    703         RST     1       ;SKIP TO NEXT FIELD
                     692    704 ;
035d  cd a8 1a       693    705         CALL    TSTEL   ;TEST IF END OF STMT
0360  ca d3 03       694    706         JZ      PRINC   ;BRIF IT IS
0363  fe 2c          695    707         CPI     ','     ;TEST IF COMMA
0365  ca aa 03       696    708         JZ      PRIN8   ;BRIF IT IS
0368  fe 3b          697    709         CPI     ';'     ;TEST IF SEMI-COLON
036a  ca ad 03       698    710         JZ      PRIN9   ;BRIF IT IS
036d  d5             699    711         PUSH    D       ;SAVE D,E
036e  e5             700    712         PUSH    H       ;SAVE H,L
036f  11 89 1d       701    713         LXI     D,TABLI ;POINT LITERAL
0372  d7             702    714         RST     2       ;GO SEE IF TAB(XX)
0373  ca b3 03       703    715         JZ      PRINA   ;BRIF IS
0376  e1             704    716         POP     H       ;ELSE, RESTORE H,L
0377  cd 80 0f       705    717         CALL    EXPR    ;GO EVALUATE EXPRESSION
037a  d1             706    718         POP     D       ;RESTORE D,E
037b  e5             707    719         PUSH    H       ;SAVE H,L
037c  eb             708    720         XCHG            ;FLIP/FLOP
037d  3a 8e 22       709    721         LDA     NS      ;GET TYPE OF RESULT
0380  fe e7          710    722         CPI     0E7H    ;TEST IF STRING
0382  ca 96 03       711    723         JZ      PRIN5   ;BRIF IS
0385  cd f0 14       712    724         CALL    FOUT    ;GO CONVERT OUTPUT
0388  23             713    725         INX     H       ;POINT NEXT
0389  eb             714    726 PRIN7:  XCHG            ;FLIP/FLOP: END ADDR TO DE
038a  e1             715    727         POP     H       ;RESTORE H,L
                     716    728 ;HERE AFTER SETTING UP VALUE TO PRINT IN BUFFER
038b  3e fe          717    729 PRIN2:  MVI A,0FEH      ;SET END CODE=NO CRLF
038d  12             718    730         STAX D          ;PUT TO BUFFER
038e  e5             719    731         PUSH H          ;SAVE H,L
038f  cd b5 19       720    732         CALL TERMO      ;GO PRINT BUFFER
0392  e1             721    733         POP H           ;RESTORE HL
0393  c3 55 03       722    734         JMP PRINT       ;REPEAT FOR NEXT FIELD
                     723    735 ;
0396  11 20 21       724    736 PRIN5:  LXI     D,STRIN ;POINT STRING
0399  1a             725    737         LDAX    D       ;GET LEN
039a  b7             726    738         ORA     A       ;TEST IT
039b  ca 89 03       727    739         JZ      PRIN7   ;BRIF NULL
039e  47             728    740         MOV     B,A     ;SAVE LEN
039f  13             729    741 PRIN6:  INX     D       ;POINT NEXT
03a0  1a             730    742         LDAX    D       ;GET A BYTE
03a1  77             731    743         MOV     M,A     ;STORE IT
03a2  23             732    744         INX     H       ;POINT NEXT
03a3  05             733    745         DCR     B       ;DECR CTR
03a4  c2 9f 03       734    746         JNZ     PRIN6   ;LOOP
03a7  c3 89 03       735    747         JMP PRIN7       ;DIDDLE DE, HL AND CONTINUE
                     736    748 ;
03aa  cd df 19       737    749 PRIN8:  CALL    TABST   ;GO POSITION NEXT TAB
03ad  23             738    750 PRIN9:  INX     H       ;PRINT NEXT
03ae  3e 01          739    751         MVI     A,1     ;GET SETTTING FOR SW
03b0  c3 56 03       740    752         JMP     PRIN4   ;GO STORE A IN PRSW & DO NEXT FIELD
03b3  d1             741    753 PRINA:  POP     D       ;GET RID OF STACK ENTRY
03b4  cd 80 0f       742    754         CALL    EXPR    ;GO EVALUATE
03b7  e5             743    755         PUSH    H       ;SAVE H,L
03b8  cd 66 1c       744    756         CALL    FBIN    ;CONVERT TO BINARY
03bb  f5             745    757         PUSH    PSW     ;SAVE SPECIFIED COLUMN
03bc  21 76 22       746    758         LXI     H,COLUM ;POINT CURRENT POSITION
03bf  96             747    759         SUB     M       ;SUBTRACT (LEAVES NUMBER OF FILLS)
03c0  fc 5a 19       748    760         CM      CRLF    ;NEXT LINE IF ALREADY PAST
03c3  f1             749    761         POP     PSW     ;RESTORE COL
03c4  96             750    762         SUB     M       ;GET NUMBER FILLS
03c5  e1             751    763         POP     H
03c6  d1             752    764         POP     D
03c7  47             753    765         MOV     B,A     ;SAVE COUNT
03c8  3e 20          754    766         MVI     A,' '   ;GET FILL
03ca  ca 8b 03       755    767 PRINB:  JZ      PRIN2   ;BRIF COUNT ZERO
03cd  12             756    768         STAX    D       ;PUT ONE SPACE
03ce  13             757    769         INX     D       ;POINT NEXT
03cf  05             758    770         DCR     B       ;DECR CTR
03d0  c3 ca 03       759    771         JMP     PRINB   ;LOOP
                     760    772 ;
03d3  cd 94 1a       761    773 PRINC:  CALL EOL        ;SAVE EOL POSITION
                     762    774 ;HERE TO PRINT FINAL CR/LF (OR NOT) AND GO TO NEXT STATEMENT
03d6  3a 8d 22       763    775         LDA     PRSW    ;GET SWITCH
03d9  47             764    776         MOV     B,A     ;SAVE ,; SWITCH
03da  3a 73 20       765    777         LDA     OUTSW   ;GET CONTROL-O SWITCH
03dd  b7             766    778         ORA     A       ;TEST IF CONTROL-O IN EFFECT
03de  b0             767    779         ORA     B       ;AND IF STATEMENT ENDED IN , OR ;
03df  cc 5a 19       768    780         CZ      CRLF    ;CRLF IF NEITHER
03e2  c3 0b 02       769    781         JMP     RUN     ;CONTINUE NEXT STATEMENT
                     770    782 ;PAGE
                     771    783 ;
03e5  =              772    784 FOR     EQU     $
                     773    785 ;
                     774    786 ;
                     775    787 ;  STMT:  FOR VAR = EXPR TO EXPR [STEP EXPR]
                     776    788 ;
                     777    789 ;
                     778    790 ;  FIRST EVALUATE ARGUMENTS AND STORE POINTERS AND VALUES,
                     779    791 ;  BUT DO NOT MAKE TABLE ENTRY YET
03e5  cd c9 1b       780    792         CALL    VAR     ;NEXT WORD MUST BE VARIABLE
03e8  eb             781    793         XCHG            ;FLIP/FLOP
03e9  22 23 22       782    794         SHLD    INDX    ;SAVE VARIABLE NAME
03ec  eb             783    795         XCHG            ;FLIP/FLOP AGAIN
03ed  fe 3d          784    796         CPI     '='     ;TEST FOR EQUAL SIGN
03ef  c2 0f 1c       785    797         JNZ     SNERR   ;BRIF NO EQUAL
03f2  23             786    798         INX     H       ;POINT NEXT
03f3  cd 80 0f       787    799         CALL    EXPR    ;GO EVALUATE EXPR, IF ANY
03f6  eb             788    800         XCHG            ;FLIP/FLOP AGAIN
03f7  2a 23 22       789    801         LHLD    INDX    ;GET INDEX NAME
03fa  eb             790    802         XCHG            ;FLIP/FLOP
03fb  e5             791    803         PUSH    H       ;SAVE H,L
03fc  cd 34 1b       792    804         CALL    SEARC   ;GO LOCATE NAME
03ff  eb             793    805         XCHG            ;PUT ADDR IN H,L
0400  22 52 22       794    806         SHLD    ADDR1   ;SAVE ADDR
0403  df             795    807         RST     3       ;GO STORE THE VALUE
0404  e1             796    808         POP     H       ;RESTORE POINTER TO STMT
0405  11 d2 1e       797    809         LXI     D,TOLIT ;GET LIT ADDR
0408  d7             798    810         RST     2       ;GO COMPARE
0409  c2 0f 1c       799    811         JNZ     SNERR   ;BRIF ERROR
040c  cd 80 0f       800    812         CALL    EXPR    ;GO EVALUATE TO-EXPR
040f  e5             801    813         PUSH    H       ;SAVE H,L
0410  21 27 22       802    814         LXI     H,TVAR1 ;POINT 'TO' VALUE
0413  df             803    815         RST     3       ;SAVE IT
0414  21 ea 1d       804    816         LXI     H,ONE   ;POINT CONSTANT: 1
0417  ef             805    817         RST     5       ;LOAD IT
0418  e1             806    818         POP     H       ;GET H,L
0419  7e             807    819         MOV     A,M     ;GET THE CHAR
041a  b7             808    820         ORA     A       ;TEST FOR END OF STATEMENT
041b  ca 2e 04       809    821         JZ      FOR2    ;BRIF NO STEP
041e  e5             810    822         PUSH    H       ;RE-SAVE
041f  11 8d 1d       811    823         LXI     D,STEPL ;TEST FOR LIT 'STEP'
0422  d7             812    824         RST     2       ;GO COMPARE
0423  ca 2a 04       813    825         JZ      FOR1    ;BRIF STEP
0426  e1             814    826         POP     H       ;RESTORE H,L
0427  c3 2e 04       815    827         JMP     FOR2    ;GO NO STEP VALUE
042a  d1             816    828 FOR1:   POP     D       ;POP OFF THE STACK
042b  cd 80 0f       817    829         CALL    EXPR    ;GO EVALUATE EXPRESSION
042e  e5             818    830 FOR2:   PUSH    H       ;SAVE H,L TO END OF STATEMENT
042f  21 2b 22       819    831         LXI     H,TVAR2 ;POINT STEP VALUE
0432  df             820    832         RST     3       ;SAVE IT
0433  e1             821    833         POP     H       ;RESTORE H,L
0434  cd 94 1a       822    834         CALL    EOL     ;ERROR IF NOT END-OF-LINE
                     823    835 ; DETERMINE WHETHER LOOP IS TO BE EXECUTED AT ALL
                     824    836 ; (IF VALUE > "TO" VALUE AND STEP POSITIVE,
                     825    837 ;    JUST SKIP TO NEXT, ETC)
0437  cd ce 18       826    838         CALL    FTEST   ;GET STATUS OF FACC
043a  f5             827    839         PUSH    PSW     ;SAVE A,STATUS
043b  21 27 22       828    840         LXI     H,TVAR1 ;GET END VALUE
043e  ef             829    841         RST     5       ;LOAD IT
043f  f1             830    842         POP     PSW     ;RESTORE STATUS
0440  f2 52 04       831    843         JP      FOR4    ;BRIF FOR IS POSITIVE
0443  2a 52 22       832    844         LHLD    ADDR1   ;GET ADDRESS OF INDEX
0446  cd 0c 17       833    845         CALL    FSUB    ;COMPARE THIS AGAINST END VALUE
0449  ca 5e 04       834    846         JZ      FOR5    ;BRIF START = END
044c  fa 5e 04       835    847         JM      FOR5    ;BRIF START > END
044f  c3 b2 04       836    848         JMP     FOR9    ;GO LOCATE MATCHING NEXT
0452  2a 52 22       837    849 FOR4:   LHLD    ADDR1   ;GET ADDRESS OF INDEX
0455  cd 0c 17       838    850         CALL    FSUB    ;COMPARE
0458  ca 5e 04       839    851         JZ      FOR5    ;BRIF START = END
045b  fa b2 04       840    852         JM      FOR9    ;BRIF START > END: SKIP TO "NEXT"
                     841    853 ; LOOP IS TO BE EXECUTED AT LEAST ONCE:
                     842    854 ; NEED AN ENTRY IN FOR-NEXT TABLE.
                     843    855 ; SEE IF THERE IS ALREADY ENTRY FOR THIS VARIABLE
                     844    856 ; (IE PROGRAM JUMPED OUT OF LOOP EARLIER)
045e  11 00 20       845    857 FOR5:   LXI     D,FORNE ;POINT TABLE
0461  2a 23 22       846    858         LHLD    INDX    ;GET INDEX VARIABLE NAME
0464  eb             847    859         XCHG            ;FLIP/FLOP
0465  7e             848    860         MOV     A,M     ;GET COUNT OF ENTRIES NOW IN TABLE
0466  47             849    861         MOV     B,A     ;STORE IT
0467  0e 01          850    862         MVI     C,1     ;NEW CTR
0469  b7             851    863         ORA     A       ;TEST IF ZERO
046a  23             852    864         INX     H       ;POINT
046b  ca 81 04       853    865         JZ      FOR8    ;BRIF TABLE EMPTY
046e  7e             854    866 FOR6:   MOV     A,M     ;GET 1ST BYTE OF TABLE VARIABLE
046f  ba             855    867         CMP     D       ;TEST IF EQUAL TO THIS FOR'S INDEX
0470  c2 7a 04       856    868         JNZ     FOR7    ;BRIF NOT
0473  23             857    869         INX     H       ;POINT NEXT
0474  7e             858    870         MOV     A,M     ;GET NEXT BYTE
0475  2b             859    871         DCX     H       ;POINT BACK
0476  bb             860    872         CMP     E       ;TEST IF EQUAL
0477  ca 81 04       861    873         JZ      FOR8    ;BRIF EQUAL
047a  e7             862    874 FOR7:   RST     4       ;ADJUST H,L
047b  0e             863    875         DB      14
047c  0c             864    876         INR     C       ;COUNT IT
047d  05             865    877         DCR     B       ;DECR CTR
047e  c2 6e 04       866    878         JNZ     FOR6    ;LOOP
                     867    879 ; ENTER THIS FOR IN TABLE (WHERE HL POINTS)
0481  79             868    880 FOR8:   MOV     A,C     ;GET UDPATE COUNT
0482  fe 09          869    881         CPI     9       ;TEST IF TBL EXCEEDED
0484  d2 1b 1c       870    882         JNC     NXERR   ;ERROR IF MORE THAN 8 OPEN FOR/NEXT
0487  32 00 20       871    883         STA     FORNE   ;PUT IN TABLE
048a  72             872    884         MOV     M,D     ;HI BYTE INDEX VARIABLE NAME
048b  23             873    885         INX     H       ;POINT NEXT
048c  73             874    886         MOV     M,E     ;STORE LO BYTE
048d  23             875    887         INX     H       ;POINT NEXT
048e  e5             876    888         PUSH    H       ;SAVE H,L
048f  21 2b 22       877    889         LXI     H,TVAR2 ;POINT STEP VALUE
0492  ef             878    890         RST     5       ;LOAD IT
0493  e1             879    891         POP     H       ;RESTORE H,L
0494  df             880    892         RST     3       ;STORE IN STACK
0495  e5             881    893         PUSH    H       ;SAVE H,L
0496  21 27 22       882    894         LXI     H,TVAR1 ;POINT 'TO' VALUE
0499  ef             883    895         RST     5       ;LOAD IT
049a  e1             884    896         POP     H       ;RESTORE H,L
049b  df             885    897         RST     3       ;STORE IN STACK
049c  eb             886    898         XCHG            ;FLIP/FLOP
049d  2a 72 22       887    899         LHLD    ENDLI   ;GET END ADDR
04a0  2b             888    900         DCX     H       ;POINT ONE PRIOR
04a1  eb             889    901         XCHG            ;FLIP BACK
04a2  72             890    902         MOV     M,D     ;STORE IT
04a3  23             891    903         INX     H       ;POINT NEXT
04a4  73             892    904         MOV     M,E     ;STORE IT
04a5  23             893    905         INX     H       ;POINT NEXT
04a6  3a 71 22       894    906         LDA     STMT+1  ;GET HIGH STMT ADDR
04a9  77             895    907         MOV     M,A     ;PUT IT
04aa  23             896    908         INX     H       ;POINT NEXT
04ab  3a 70 22       897    909         LDA     STMT    ;GET LOW STMT ADDR
04ae  77             898    910         MOV     M,A     ;PUT IT
04af  c3 0b 02       899    911         JMP     RUN     ;CONTINUE
                     900    912 ;
                     901    913 ; IF HERE, THIS LOOP IS TO BE EXECUTED ZERO TIMES:
                     902    914 ; SCAN THRU PROGRAM TO FIND MATCHING "NEXT".
                     903    915 ; THIS CODE WILL FAIL IF USER'S PROGRAM IS TOO
                     904    916 ; COMPLEX SINCE IT WON'T FOLLOW GOTO'S, IF'S, ETC.
04b2  2a 70 22       905    917 FOR9:   LHLD    STMT    ;GET ADDRESS OF STATMENT
04b5  5e             906    918         MOV     E,M     ;GET LENGTH CODE
04b6  16 00          907    919         MVI     D,0     ;INIT INCREMENT
04b8  19             908    920         DAD     D       ;COMPUTE ADDR OF NEXT STATEMENT
04b9  7e             909    921         MOV     A,M     ;GET NEW LEN CODE
04ba  b7             910    922         ORA     A       ;SEE IF END OF PGM
04bb  ca 1b 1c       911    923         JZ      NXERR   ;BRIF IT IS
04be  22 70 22       912    924         SHLD    STMT    ;SAVE ADDRESS
04c1  e7             913    925         RST     4       ;ADJUST H,L
04c2  03             914    926         DB      3
04c3  cf             915    927         RST     1       ;SKIP SPACES
04c4  11 a8 1e       916    928         LXI     D,NEXTL ;POINT 'NEXT'
04c7  d7             917    929         RST     2       ;SEE IF IT IS A NEXT STMT
04c8  c2 b2 04       918    930         JNZ     FOR9    ;LOOP IF NOT
04cb  cf             919    931         RST     1       ;SKIP SPACES
04cc  3a 24 22       920    932         LDA     INDX+1  ;GET FIRST CHAR
04cf  be             921    933         CMP     M       ;COMPARE
04d0  c2 b2 04       922    934         JNZ     FOR9    ;BRIF NOT MATCH NEXT
04d3  3a 23 22       923    935         LDA     INDX    ;GET 2ND CHAR
04d6  23             924    936         INX     H       ;DITTO
04d7  fe 20          925    937         CPI     ' '     ;SEE IF SINGLE CHAR
04d9  ca e0 04       926    938         JZ      FORA    ;BRIF IT IS
04dc  be             927    939         CMP     M       ;COMPARE THE TWO
04dd  c2 b2 04       928    940         JNZ     FOR9    ;BRIF NOT EQUAL
04e0  cf             929    941 FORA:   RST     1       ;SKIP TO END (HOPEFULLY)
04e1  7e             930    942         MOV     A,M     ;GET THE NON BLANK
04e2  b7             931    943         ORA     A       ;SEE IF END
04e3  c2 b2 04       932    944         JNZ     FOR9    ;BRIF END
04e6  c3 0b 02       933    945         JMP     RUN     ;ELSE, GO NEXT STMT
                     934    946 ;PAGE
                     935    947 ;
04e9  =              936    948 IFSTM   EQU     $
                     937    949 ;
                     938    950 ;
                     939    951 ; STMT: IF EXPR RELATION EXPR THEN STMT#
                     940    952 ;
                     941    953 ;
04e9  cd 80 0f       942    954         CALL    EXPR    ;GO EVALUATE LEFT EXPR
04ec  e5             943    955         PUSH    H       ;SAVE H,L
04ed  3a 8e 22       944    956         LDA     NS      ;GET TYPE CODE
04f0  32 26 22       945    957         STA     IFTYP   ;SAVE IT
04f3  fe e7          946    958         CPI     0E7H    ;TEST IF STRING
04f5  c2 07 05       947    959         JNZ     IF1     ;BRIF NOT
04f8  21 ce 20       948    960         LXI     H,IOBUF ;POINT BUFFER
04fb  11 20 21       949    961         LXI     D,STRIN ;POINT RESULT
04fe  1a             950    962         LDAX    D       ;GET LEN
04ff  3c             951    963         INR     A       ;PLUS ONE
0500  47             952    964         MOV     B,A     ;SAVE IT
0501  cd 4d 1c       953    965         CALL    COPYD   ;GO MOVE IT
0504  c3 0b 05       954    966         JMP     IF2     ;GO AROUND
0507  21 27 22       955    967 IF1:    LXI     H,TVAR1 ;GET ADDR OF TEMP STORAGE
050a  df             956    968         RST     3       ;SAVE IT
050b  e1             957    969 IF2:    POP     H       ;RESTORE H,L
050c  af             958    970         XRA     A       ;CLEAR A
050d  4f             959    971         MOV     C,A     ;SAVE IN REG C
050e  47             960    972         MOV     B,A     ;INIT REG
050f  7e             961    973 IF3:    MOV     A,M     ;GET OPERATOR
0510  04             962    974         INR     B       ;COUNT
0511  fe 3d          963    975         CPI     '='     ;TEST FOR EQUAL
0513  c2 18 05       964    976         JNZ     IF4     ;BRIF IT IS
0516  0c             965    977         INR     C       ;ADD 1 TO C
0517  23             966    978         INX     H       ;POINT NEXT
0518  fe 3e          967    979 IF4:    CPI     '>'     ;TEST FOR GREATER THAN
051a  c2 20 05       968    980         JNZ     IF5     ;BRIF IT IS
051d  0c             969    981         INR     C       ;ADD TWO
051e  0c             970    982         INR     C       ;TO REL CODE
051f  23             971    983         INX     H       ;POINT NEXT
0520  fe 3c          972    984 IF5:    CPI     '<'     ;TEST FOR LESS THAN
0522  c2 2a 05       973    985         JNZ     IF6     ;BRIF IT IS
0525  79             974    986         MOV     A,C     ;GET REL CODE
0526  c6 04          975    987         ADI     4       ;PLUS FOUR
0528  4f             976    988         MOV     C,A     ;PUT BACK
0529  23             977    989         INX     H       ;POINT NEXT
052a  79             978    990 IF6:    MOV     A,C     ;GET REL CODE
052b  b7             979    991         ORA     A       ;TEST IT
052c  c5             980    992         PUSH    B       ;SAVE B,C
052d  ca 0f 1c       981    993         JZ      SNERR   ;BRIF SOME ERROR
0530  c1             982    994         POP     B       ;RESTORE B,C
0531  32 25 22       983    995         STA     REL     ;SAVE CODE
0534  78             984    996         MOV     A,B     ;GET COUNT
0535  fe 02          985    997         CPI     2       ;TEST FOR TWO
0537  c2 0f 05       986    998         JNZ     IF3     ;SEE IF MULTIPLE RELATION
053a  cd 80 0f       987    999         CALL    EXPR    ;GO EVALUATE RIGHT SIDE
053d  22 52 22       988   1000         SHLD    ADDR1   ;SAVE LOCATION OF THEN (IF ANY)
0540  3a 8e 22       989   1001         LDA     NS      ;GET TYPE CODE
0543  21 26 22       990   1002         LXI     H,IFTYP ;POINT LEFT TYPE
0546  be             991   1003         CMP     M       ;COMPARE
0547  c2 0f 1c       992   1004         JNZ     SNERR   ;BRIF MIXED
054a  fe e7          993   1005         CPI     0E7H    ;TEST IF STRING
054c  ca a8 05       994   1006         JZ      IFF     ;BRIF IS
054f  21 27 22       995   1007         LXI     H,TVAR1 ;POINT LEFT
0552  cd 0c 17       996   1008         CALL    FSUB    ;SUBTRACT LEFT FROM RIGHT
0555  3a 25 22       997   1009         LDA     REL     ;GET RELATION
0558  1f             998   1010         RAR             ;TEST BIT D0
0559  d2 62 05       999   1011         JNC     IF8     ;BRIF NO EQUAL TEST
055c  cd ce 18      1000   1012         CALL    FTEST   ;GET STATUS OF FACC
055f  ca 81 05      1001   1013         JZ      TRUE    ;BRIF LEFT=RIGHT
0562  3a 25 22      1002   1014 IF8:    LDA     REL     ;LOAD RELATION
0565  e6 02         1003   1015         ANI     02H     ;MASK IT
0567  ca 70 05      1004   1016         JZ      IF9     ;BRIF NO >
056a  cd ce 18      1005   1017         CALL    FTEST   ;GET STATUS OF FACC
056d  fa 81 05      1006   1018         JM      TRUE    ;BRIF GT
0570  3a 25 22      1007   1019 IF9:    LDA     REL     ;LOAD RELATION
0573  e6 04         1008   1020         ANI     04H     ;MASK IT
0575  ca 0b 02      1009   1021         JZ      FALSE   ;BRIF NO <
0578  cd ce 18      1010   1022         CALL    FTEST   ;GET STATUS OF FACC
057b  fa 0b 02      1011   1023         JM      FALSE   ;BRIF GT
057e  ca 0b 02      1012   1024         JZ      FALSE   ;BRIF ZERO (NOT EQUAL)
0581  2a 52 22      1013   1025 TRUE:   LHLD    ADDR1   ;GET POINTER TO STATEMENT
0584  11 d0 1e      1014   1026         LXI     D,GOTOL ;POINT 'GO TO'
0587  d7            1015   1027         RST     2       ;GO COMPARE
0588  ca f6 02      1016   1028         JZ      GOTO    ;BRIF IF ... GOTO NN
058b  2a 52 22      1017   1029         LHLD    ADDR1   ;GET POINTER TO STATEMENT
058e  11 af 1e      1018   1030         LXI     D,GOSBL ;POINT LITERAL
0591  d7            1019   1031         RST     2       ;GO COMAPRE
0592  ca 3a 03      1020   1032         JZ      GOSUB   ;BRIF IF ... GOSUB NN
0595  2a 52 22      1021   1033         LHLD    ADDR1   ;GET POINTER TO STATEMENT
0598  11 92 1d      1022   1034         LXI     D,THENL ;GET ADDR 'THEN'
059b  d7            1023   1035         RST     2       ;GO COMPARE
059c  c2 0f 1c      1024   1036         JNZ     SNERR   ;BRIF ERROR
059f  cd 2a 1b      1025   1037         CALL    NUMER   ;TEST IF NUMERIC
05a2  ca f6 02      1026   1038         JZ      GOTO    ;BRIF IT IS
05a5  c3 38 02      1027   1039         JMP     RUN4    ;ELSE, MAY BE ANY STMT
020b  =             1028   1040 FALSE   EQU     RUN
05a8  21 ce 20      1029   1041 IFF:    LXI     H,IOBUF ;POINT PRIOR
05ab  46            1030   1042         MOV     B,M     ;GET LEN
05ac  11 20 21      1031   1043         LXI     D,STRIN ;POINT THIS
05af  1a            1032   1044         LDAX    D       ;GET LEN
05b0  4f            1033   1045         MOV     C,A     ;SAVE IT
05b1  13            1034   1046 IFG:    INX     D       ;POINT NEXT
05b2  23            1035   1047         INX     H       ;DITTO
05b3  78            1036   1048         MOV     A,B     ;GET LEFT LEN
05b4  b7            1037   1049         ORA     A       ;TEST IT
05b5  c2 ba 05      1038   1050         JNZ     IFH     ;BRIF NOT ZERO
05b8  36 20         1039   1051         MVI     M,' '   ;EXTEND WITH SPACE
05ba  79            1040   1052 IFH:    MOV     A,C     ;GET RIGHT LEN
05bb  b7            1041   1053         ORA     A       ;TEST IT
05bc  c2 c2 05      1042   1054         JNZ     IFI     ;BRIF NOT ZERO
05bf  3e 20         1043   1055         MVI     A,' '   ;GET SPACE
05c1  12            1044   1056         STAX    D       ;EXTEND
05c2  1a            1045   1057 IFI:    LDAX    D       ;GET RIGHT CHAR
05c3  be            1046   1058         CMP     M       ;TEST WITH LEFT
05c4  da e7 05      1047   1059         JC      IFM     ;BRIF LEFT>RIGHT
05c7  c2 ec 05      1048   1060         JNZ     IFN     ;BRIF LEFT<RIGHT
05ca  78            1049   1061         MOV     A,B     ;GET LEFT COUNT
05cb  3d            1050   1062         DCR     A       ;SUBT ONE
05cc  fa d0 05      1051   1063         JM      IFJ     ;BRIF WAS ZERO
05cf  47            1052   1064         MOV     B,A     ;UPDATE CTR
05d0  79            1053   1065 IFJ:    MOV     A,C     ;GET RIGHT LEN
05d1  3d            1054   1066         DCR     A       ;SUBT ONE
05d2  fa d6 05      1055   1067         JM      IFK     ;BRIF WAS ZERO
05d5  4f            1056   1068         MOV     C,A     ;UPDT CTR
05d6  78            1057   1069 IFK:    MOV     A,B     ;GET LEFT LEN
05d7  b1            1058   1070         ORA     C       ;COMPARE TO RIGHT
05d8  c2 b1 05      1059   1071         JNZ     IFG     ;BRIF BOTH NOT ZERO
05db  06 01         1060   1072         MVI     B,1     ;SET SW= EQUAL
05dd  3a 25 22      1061   1073 IFL:    LDA     REL     ;GET RELATION
05e0  a0            1062   1074         ANA     B       ;AND WITH RESULT
05e1  ca 0b 02      1063   1075         JZ      FALSE   ;BRIF FALSE
05e4  c3 81 05      1064   1076         JMP     TRUE    ;ELSE, TRUE
05e7  06 02         1065   1077 IFM:    MVI     B,2     ;SET CODE
05e9  c3 dd 05      1066   1078         JMP     IFL     ;JUMP
05ec  06 04         1067   1079 IFN:    MVI     B,4     ;SET CODE
05ee  c3 dd 05      1068   1080         JMP     IFL     ;JUMP
                    1069   1081 ;PAGE
                    1070   1082 ;
05f1  =             1071   1083 LET     EQU     $
                    1072   1084 ;
                    1073   1085 ;
                    1074   1086 ; STMT: [LET] VAR = EXPR
                    1075   1087 ;
                    1076   1088 ;
05f1  cd 4f 18      1077   1089         CALL    GETS8   ;GO GET ADDRESS OF VARIABLE
05f4  c5            1078   1090         PUSH    B       ;SAVE NAME
05f5  d5            1079   1091         PUSH    D       ;SAVE ADDRESS
05f6  cf            1080   1092         RST     1       ;GET NEXT CHAR
05f7  fe 3d         1081   1093         CPI     '='     ;TEST FOR EQUAL SIGN
05f9  ca 0c 06      1082   1094         JZ      LET1    ;BRIF IS
05fc  3a 76 20      1083   1095         LDA     EDSW    ;GET MODE SW
05ff  b7            1084   1096         ORA     A       ;TEST IT
0600  ca 0f 1c      1085   1097         JZ      SNERR   ;BRIF LET ERROR
0603  21 73 1d      1086   1098         LXI     H,WHATL ;POINT LITERAL
0606  cd bd 19      1087   1099         CALL    TERMM   ;GO PRINT IT
0609  c3 c9 00      1088   1100         JMP     GETCM   ;GO TO COMMAND
060c  23            1089   1101 LET1:   INX     H       ;POINT NEXT
060d  cd 80 0f      1090   1102         CALL    EXPR    ;GO EVALUATE EXPRESSION
0610  cd 94 1a      1091   1103         CALL    EOL     ;ERROR IF NOT END-OF-LINE
0613  e1            1092   1104         POP     H       ;RESTORE ADDRESSS
0614  d1            1093   1105         POP     D       ;RESTORE NAME
0615  7b            1094   1106         MOV     A,E     ;GET TYPE
0616  b7            1095   1107         ORA     A       ;TEST IT
0617  3a 8e 22      1096   1108         LDA     NS      ;GET RESULT TYPE
061a  fa 26 06      1097   1109         JM      LET2    ;BRIF STRING
061d  fe e3         1098   1110         CPI     0E3H    ;TEST IF NUMERIC
061f  c2 0f 1c      1099   1111         JNZ     SNERR   ;BRIF MIXED MODE
0622  df            1100   1112         RST     3       ;GO STORE VARIABLE
0623  c3 0b 02      1101   1113         JMP     RUN     ;CONTINUE
0626  fe e7         1102   1114 LET2:   CPI     0E7H    ;TEST IF STRING
0628  c2 0f 1c      1103   1115         JNZ     SNERR   ;BRIF MIXED MODE
062b  cd 31 06      1104   1116         CALL    LET2A   ;GO STORE IT
062e  c3 0b 02      1105   1117         JMP     RUN     ;CONTINUE
                    1106   1118 ;
0631  11 20 21      1107   1119 LET2A:  LXI     D,STRIN ;POINT STRING BUFFER
0634  1a            1108   1120         LDAX    D       ;GET NEW LEN
0635  96            1109   1121         SUB     M       ;MINUS OLD LEN
0636  ca 86 06      1110   1122         JZ      LET8    ;BRIF SAME LENGTH
0639  54            1111   1123         MOV     D,H     ;COPY H,L
063a  5d            1112   1124         MOV     E,L     ;TO D,E
063b  7e            1113   1125         MOV     A,M     ;GET LEN
063c  3c            1114   1126         INR     A       ;TRUE LEN
063d  13            1115   1127 LET3:   INX     D       ;POINT NEXT
063e  3d            1116   1128         DCR     A       ;DECR CTR
063f  c2 3d 06      1117   1129         JNZ     LET3    ;LOOP
0642  13            1118   1130         INX     D       ;SKIP
0643  13            1119   1131         INX     D       ;AGAIN
0644  1a            1120   1132         LDAX    D       ;GET LO NAM
0645  4f            1121   1133         MOV     C,A     ;SAVE
0646  13            1122   1134         INX     D       ;GET HI NAME
0647  1a            1123   1135         LDAX    D       ;LOAD IT
0648  47            1124   1136         MOV     B,A     ;SAVE
0649  c5            1125   1137         PUSH    B       ;SAVE NAME
064a  2b            1126   1138         DCX     H       ;POINT NEXT ENTRY
064b  7e            1127   1139 LET4:   MOV     A,M     ;GET NEXT
064c  b7            1128   1140         ORA     A       ;TEST IF END
064d  ca 64 06      1129   1141         JZ      LET6    ;BRIF IS
0650  e5            1130   1142         PUSH    H       ;SAVE H,L
0651  2b            1131   1143         DCX     H       ;SKIP NEXT
0652  2b            1132   1144         DCX     H       ;POINT LEN
0653  46            1133   1145         MOV     B,M     ;GET HI LEN
0654  2b            1134   1146         DCX     H       ;POINT LO
0655  4e            1135   1147         MOV     C,M     ;GET LO LEN
0656  e1            1136   1148         POP     H       ;RESTORE H,L
0657  7e            1137   1149 LET5:   MOV     A,M     ;GET A BYTE
0658  12            1138   1150         STAX    D       ;COPY
0659  2b            1139   1151         DCX     H       ;POINT NEXT
065a  1b            1140   1152         DCX     D       ;DITTO
065b  03            1141   1153         INX     B       ;ADD TO CTR
065c  78            1142   1154         MOV     A,B     ;GET HI
065d  b1            1143   1155         ORA     C       ;TEST IF ZERO
065e  c2 57 06      1144   1156         JNZ     LET5    ;LOOP
0661  c3 4b 06      1145   1157         JMP     LET4    ;CONTINUE
0664  eb            1146   1158 LET6:   XCHG            ;PUT NEW ADDR TO H,L
0665  c1            1147   1159         POP     B       ;GET NAME
0666  70            1148   1160         MOV     M,B     ;STORE HI BYTE
0667  2b            1149   1161         DCX     H       ;POINT NEXT
0668  71            1150   1162         MOV     M,C     ;STORE LO
0669  11 20 21      1151   1163         LXI     D,STRIN ;GET NEW LEN
066c  1a            1152   1164         LDAX    D       ;LOAD IT
066d  06 ff         1153   1165         MVI     B,0FFH  ;INIT HI COMPLEMENT
066f  c6 05         1154   1166         ADI     5       ;COMPUTE ENTRY LENGTH
0671  ca 79 06      1155   1167         JZ      LET7    ;BRIF 256 BYTES
0674  d2 79 06      1156   1168         JNC     LET7    ;BRIF LESS 256
0677  06 fe         1157   1169         MVI     B,0FEH  ;SET BIT OFF
0679  2f            1158   1170 LET7:   CMA             ;1'S COMPLEMENT
067a  3c            1159   1171         INR     A       ;THEN 2'S
067b  4f            1160   1172         MOV     C,A     ;SAVE LO LEN
067c  2b            1161   1173         DCX     H       ;POINT NEXT
067d  70            1162   1174         MOV     M,B     ;STORE HI LEN
067e  2b            1163   1175         DCX     H       ;POINT NEXT
067f  71            1164   1176         MOV     M,C     ;STORE LO LEN
0680  e7            1165   1177         RST     4       ;ADJUST H,L
0681  03            1166   1178         DB      3
0682  09            1167   1179         DAD     B       ;COMPUTE END OF ENTRY
0683  36 00         1168   1180         MVI     M,0     ;MARK NEW END
0685  23            1169   1181         INX     H       ;POINT 1ST BYTE
0686  1a            1170   1182 LET8:   LDAX    D       ;GET LEN
0687  3c            1171   1183         INR     A       ;TRUE LEN
0688  47            1172   1184         MOV     B,A     ;SAVE LEN
0689  1a            1173   1185 LET9:   LDAX    D       ;GET A BYTE
068a  77            1174   1186         MOV     M,A     ;COPY IT
068b  23            1175   1187         INX     H       ;POINT NEXT
068c  13            1176   1188         INX     D       ;DITTO
068d  05            1177   1189         DCR     B       ;SUBT CTR
068e  c2 89 06      1178   1190         JNZ     LET9    ;LOOP
0691  c9            1179   1191         RET             ;RETURN
                    1180   1192 ;PAGE
                    1181   1193 ;
                    1182   1194 ;NEXT   EQQU    $
                    1183   1195 ;
                    1184   1196 ;
                    1185   1197 ; STMT:  NEXT VAR
                    1186   1198 ;
                    1187   1199 ;
0692  cd c9 1b      1188   1200 NEXT:   CALL    VAR     ;GET VARIABLE NAME
0695  cd 94 1a      1189   1201         CALL    EOL     ;ERROR IF NOT END-OF-LNE
0698  eb            1190   1202         XCHG            ;FLIP/FLOP
0699  22 23 22      1191   1203         SHLD    INDX    ;SAVE VAR NAME
069c  e5            1192   1204         PUSH    H       ;SAVE VAR NAME
069d  21 00 20      1193   1205         LXI     H,FORNE ;POINT FOR/NEXT TABLE
06a0  46            1194   1206         MOV     B,M     ;GET SIZE
06a1  78            1195   1207         MOV     A,B     ;LOAD IT
06a2  b7            1196   1208         ORA     A       ;TEST IT
06a3  ca 1b 1c      1197   1209         JZ      NXERR   ;BRIF TABLE EMPTY
06a6  23            1198   1210         INX     H       ;POINT NEXT
06a7  d1            1199   1211         POP     D       ;RESTORE VAR NAME
06a8  7e            1200   1212 NEXT1:  MOV     A,M     ;GET 1ST BYTE
06a9  23            1201   1213         INX     H       ;POINT NEXT
06aa  ba            1202   1214         CMP     D       ;COMPARE
06ab  c2 b3 06      1203   1215         JNZ     NEXT2   ;BRIF NOT EQUAL
06ae  7e            1204   1216         MOV     A,M     ;GET 2ND BYTE
06af  bb            1205   1217         CMP     E       ;COMPARE
06b0  ca bc 06      1206   1218         JZ      NEXT3   ;BRIF EQUAL
06b3  e7            1207   1219 NEXT2:  RST     4       ;ADJUST H,L
06b4  0d            1208   1220         DB      13
06b5  05            1209   1221         DCR     B       ;DECR COUNT
06b6  c2 a8 06      1210   1222         JNZ     NEXT1   ;LOOP
06b9  c3 1b 1c      1211   1223         JMP     NXERR   ;GO PUT ERROR MSG
06bc  3a 00 20      1212   1224 NEXT3:  LDA     FORNE   ;GET ORIG COUNT
06bf  90            1213   1225         SUB     B       ;MINUS REMAIN
06c0  3c            1214   1226         INR     A       ;PLUS ONE
06c1  32 00 20      1215   1227         STA     FORNE   ;STORE NEW COUNT
06c4  23            1216   1228         INX     H       ;POINT ADDR
06c5  e5            1217   1229         PUSH    H       ;SAVE H,L ADDR
06c6  cd 34 1b      1218   1230         CALL    SEARC   ;GO GET ADDR OF INDEX
06c9  eb            1219   1231         XCHG            ;PUT TO H,L
06ca  22 52 22      1220   1232         SHLD    ADDR1   ;SAVR IT
06cd  ef            1221   1233         RST     5       ;LOAD INDEX
06ce  e1            1222   1234         POP     H       ;GET H,L (TBL)
06cf  e5            1223   1235         PUSH    H       ;RE-SAVE
06d0  cd 37 16      1224   1236         CALL    FADD    ;ADD STEP VALUE
06d3  21 27 22      1225   1237         LXI     H,TVAR1 ;POINT TEMP AREA
06d6  df            1226   1238         RST     3       ;SAVE NEW INDEX
06d7  e1            1227   1239         POP     H       ;GET H,L (TBL)
06d8  e5            1228   1240         PUSH    H       ;RE-SAVE
06d9  e7            1229   1241         RST     4       ;GET LEN TO NEXT
06da  04            1230   1242         DB      4
06db  cd 0c 17      1231   1243         CALL    FSUB    ;SUBTRACT TO VALUE
06de  ca fb 06      1232   1244         JZ      NEXT6   ;BRIF ZERO
06e1  e1            1233   1245         POP     H       ;GET H,L (PTR TO STEP)
06e2  e5            1234   1246         PUSH    H       ;RE-SAVE
06e3  7e            1235   1247         MOV     A,M     ;GET SIGN&EXPONENT OF STEP
06e4  b7            1236   1248         ORA     A       ;TEST IT
06e5  3a 58 22      1237   1249         LDA     FACC    ;GET SIGN & EXPON OF DIFF
06e8  fa f7 06      1238   1250         JM      NEXT5   ;BRIF NEGATIVE
06eb  b7            1239   1251         ORA     A       ;TEST SIGN OF DIFF
06ec  fa fb 06      1240   1252         JM      NEXT6   ;BRIF LESS THAN TO-EXPR
06ef  21 00 20      1241   1253 NEXT7:  LXI     H,FORNE ;GET ADDR TABLE
06f2  35            1242   1254         DCR     M       ;SUBTRACT ONE FROM COUNT
06f3  d1            1243   1255         POP     D       ;ADJUST STACK
06f4  c3 0b 02      1244   1256         JMP     RUN     ;GO STMT AFTER NEXT
06f7  b7            1245   1257 NEXT5:  ORA     A       ;TEST SIGN OF DIFFERENCE
06f8  fa ef 06      1246   1258         JM      NEXT7   ;BRIF END OF LOOP
06fb  e1            1247   1259 NEXT6:  POP     H       ;GET PTR TO TBL
06fc  e7            1248   1260         RST     4       ;ADJUST H,L
06fd  08            1249   1261         DB      8
06fe  56            1250   1262         MOV     D,M     ;GET HI BYTE
06ff  23            1251   1263         INX     H       ;POINT NEXT
0700  5e            1252   1264         MOV     E,M     ;GET LOW BYTE
0701  23            1253   1265         INX     H       ;POINT NEXT
0702  7e            1254   1266         MOV     A,M     ;GET HI BYTE
0703  32 71 22      1255   1267         STA     STMT+1  ;SAVE
0706  23            1256   1268         INX     H       ;POINT NEXT
0707  7e            1257   1269         MOV     A,M     ;GET LOW BYTE
0708  32 70 22      1258   1270         STA     STMT    ;SAVE
070b  eb            1259   1271         XCHG            ;H,L = ADDR OF STMT AFTR FOR
070c  cd 94 1a      1260   1272         CALL    EOL     ;SETUP MULTI PTP
070f  2a 70 22      1261   1273         LHLD    STMT    ;GET ADDR OF FOR STMT
0712  23            1262   1274         INX     H       ;POINT LINE NUM
0713  22 89 22      1263   1275         SHLD    LINE    ;SAVE ADDR LINE
0716  21 27 22      1264   1276         LXI     H,TVAR1 ;POINT UPDTED VALUE
0719  ef            1265   1277         RST     5       ;GO LOAD IT
071a  2a 52 22      1266   1278         LHLD    ADDR1   ;GET ADDR OF INDEX
071d  df            1267   1279         RST     3       ;GO STORE IT
071e  c3 0b 02      1268   1280         JMP     RUN     ;CONTINUE WITH STMT AFTER FOR
                    1269   1281 ;PAGE
0721  =             1270   1282 INPUT   EQU     $
                    1271   1283 ;
                    1272   1284 ;
                    1273   1285 ; STMT:  INPUT VAR [, VAR, VAR]
                    1274   1286 ;
                    1275   1287 ;
0721  11 84 1d      1276   1288         LXI     D,LLINE ;POINT 'LINE'
0724  e5            1277   1289         PUSH    H       ;SAVE H,L ADDR
0725  d7            1278   1290         RST     2       ;GO COMPARE
0726  ca a5 07      1279   1291         JZ      INPL    ;BRIF EQUAL
0729  d1            1280   1292         POP     D       ;ELSE, RESTORE H,L ADDR
072a  21 ce 20      1281   1293         LXI     H,IOBUF ;GET ADDR OF BUFFER
072d  22 52 22      1282   1294         SHLD    ADDR1   ;SAVE ADDR
0730  36 00         1283   1295         MVI     M,0     ;MARK BUFFER EMPTY
0732  eb            1284   1296         XCHG            ;FLIP/BACK
0733  cf            1285   1297 INPU1:  RST     1       ;SKIP SPACES
0734  fe 27         1286   1298         CPI     27H     ;TEST IF QUOTE
0736  ca 3e 07      1287   1299         JZ      INPU2   ;BRIF IS
0739  fe 22         1288   1300         CPI     '"'     ;TEST IF INPUT LITERAL
073b  c2 61 07      1289   1301         JNZ     INPU6   ;BRIF NOT
073e  4f            1290   1302 INPU2:  MOV     C,A     ;SAVE DELIM
073f  11 ce 20      1291   1303         LXI     D,IOBUF ;POINT BUFFER
0742  23            1292   1304 INPU3:  INX     H       ;POINT NEXT
0743  7e            1293   1305         MOV     A,M     ;LOAD IT
0744  b9            1294   1306         CMP     C       ;TEST IF END
0745  ca 4d 07      1295   1307         JZ      INPU4   ;BRIF IS
0748  12            1296   1308         STAX    D       ;PUT TO BUFF
0749  13            1297   1309         INX     D       ;POINT NEXT
074a  c3 42 07      1298   1310         JMP     INPU3   ;LOOP
074d  23            1299   1311 INPU4:  INX     H       ;SKIP TRAILING QUOTE
074e  eb            1300   1312         XCHG            ;PUT ADDR TO H,L
074f  36 fe         1301   1313         MVI     M,0FEH  ;MARK END
0751  cd b5 19      1302   1314         CALL    TERMO   ;GO PRINT PROMPT
0754  eb            1303   1315         XCHG            ;GET H,L
0755  cf            1304   1316         RST     1       ;SKIP TO NON BLANK
0756  fe 2c         1305   1317         CPI     ','     ;TEST IF COMMA
0758  ca 60 07      1306   1318         JZ      INPU5   ;BRIF IS
075b  fe 3b         1307   1319         CPI     ';'     ;TEST IF COMMA
075d  c2 61 07      1308   1320         JNZ     INPU6   ;BRIF NOT
0760  23            1309   1321 INPU5:  INX     H       ;SKIP IT
0761  cd 4f 18      1310   1322 INPU6:  CALL    GETS8   ;GO GET VAR ADDR
0764  e5            1311   1323         PUSH    H       ;SAVE H ADDR
0765  d5            1312   1324         PUSH    D       ;SAVE VAR ADDR
0766  2a 52 22      1313   1325         LHLD    ADDR1   ;GET ADDR PREV BUFFER
0769  7e            1314   1326         MOV     A,M     ;LOAD CHAR
076a  fe 2c         1315   1327         CPI     ','     ;TEST IF COMMA
076c  23            1316   1328         INX     H       ;POINT NEXT
076d  ca 75 07      1317   1329         JZ      INPU7   ;BRIF CONTINUE FROM PREV
0770  3e 3f         1318   1330         MVI     A,'?'   ;LOAD PROMPT
0772  cd 04 19      1319   1331         CALL    TERMI   ;GO READ FROM TTY
0775  cf            1320   1332 INPU7:  RST     1       ;SKIP SPACES
0776  79            1321   1333         MOV     A,C     ;GET LO NAME
0777  b7            1322   1334         ORA     A       ;TEST IT
0778  fa 9c 07      1323   1335         JM      INPUA   ;BRIF STRING
077b  cd 2e 14      1324   1336         CALL    FIN     ;GO CONVERT TO FLOATING
077e  cf            1325   1337         RST     1       ;SKIP SPACES
077f  fe 2c         1326   1338         CPI     ','     ;TEST IF COMMA
0781  ca 88 07      1327   1339         JZ      INPU8   ;BRIF IS
0784  b7            1328   1340         ORA     A       ;TEST IF END OF LINE
0785  c2 1f 1c      1329   1341         JNZ     CVERR   ;BRIF ERROR
0788  22 52 22      1330   1342 INPU8:  SHLD    ADDR1   ;SAVE ADDRESS
078b  e1            1331   1343         POP     H       ;GET VAR ADDR
078c  df            1332   1344         RST     3       ;GO STORE THE NUMBER
078d  e1            1333   1345 INPU9:  POP     H       ;RESTORE STMT POINTER
078e  7e            1334   1346         MOV     A,M     ;GET CHAR
078f  fe 2c         1335   1347         CPI     ','     ;TEST FOR COMMA
0791  23            1336   1348         INX     H       ;POINT NEXT
0792  ca 33 07      1337   1349         JZ      INPU1   ;RECDURSIVE IF COMMA
0795  2b            1338   1350         DCX     H       ;POINT BACK
0796  cd 94 1a      1339   1351 INPUB:  CALL    EOL     ;ERROR IF NOT END OF LINE
0799  c3 0b 02      1340   1352         JMP     RUN     ;CONTINUE NEXT STMT
079c  cd 0d 18      1341   1353 INPUA:  CALL    GETST   ;GO GET THE STRING
079f  22 52 22      1342   1354         SHLD    ADDR1   ;SAVE ADDRESS
07a2  c3 8d 07      1343   1355         JMP     INPU9   ;CONTINUE
                    1344   1356 ;
07a5  =             1345   1357 INPL    EQU     $
                    1346   1358 ;
                    1347   1359 ;
                    1348   1360 ; STMT: INPUT LINE A$
                    1349   1361 ;
                    1350   1362 ;
07a5  d1            1351   1363         POP     D       ;DUMMY POP TO ADJUST STACK
07a6  cd c9 1b      1352   1364         CALL    VAR     ;GET STRING NAME
07a9  7b            1353   1365         MOV     A,E     ;LOAD LO BYTE
07aa  b7            1354   1366         ORA     A       ;TEST IT
07ab  f2 0f 1c      1355   1367         JP      SNERR   ;BRIF NOT STRING VARIABLE
07ae  cd 34 1b      1356   1368         CALL    SEARC   ;ELSE, GET ADDRESS
07b1  d5            1357   1369         PUSH    D       ;SAVE ON STACK
07b2  cd 94 1a      1358   1370         CALL    EOL     ;ERROR IF NOT END-OF-LINE
07b5  3e 01         1359   1371         MVI     A,1     ;GET ON SETTING
07b7  32 74 20      1360   1372         STA     ILSW    ;SET INPUT LINE SWITCH
07ba  3e 3f         1361   1373         MVI     A,'?'   ;LOAD PROMPT
07bc  cd 04 19      1362   1374         CALL    TERMI   ;GO READ A LINE
07bf  06 00         1363   1375         MVI     B,0     ;INIT COUNT
07c1  11 21 21      1364   1376         LXI     D,STRIN+1       ;POINT STRING BUFFER
07c4  21 cf 20      1365   1377         LXI     H,IOBUF+1       ;POINT INPUT BUFFER
07c7  7e            1366   1378 INPL1:  MOV     A,M     ;GET NEXT BYTE
07c8  b7            1367   1379         ORA     A       ;TEST IT
07c9  ca d3 07      1368   1380         JZ      INPL2   ;BRIF END
07cc  04            1369   1381         INR     B       ;ADD TO COUNT
07cd  12            1370   1382         STAX    D       ;PUT TO STRING BUFF
07ce  13            1371   1383         INX     D       ;POINT NEXT
07cf  23            1372   1384         INX     H       ;DITTO
07d0  c3 c7 07      1373   1385         JMP     INPL1   ;LOOP
07d3  32 74 20      1374   1386 INPL2:  STA     ILSW    ;RESET SWITCH
07d6  78            1375   1387         MOV     A,B     ;GET COUNT
07d7  32 20 21      1376   1388         STA     STRIN   ;SET STRING LENGTH
07da  e1            1377   1389         POP     H       ;GET ADDRESS OF VARIABLE
07db  cd 31 06      1378   1390         CALL    LET2A   ;GO STORE THE STRING
07de  c3 0b 02      1379   1391         JMP     RUN     ;GO NEXT STMT
                    1380   1392 ;PAGE
                    1381   1393 ;
07e1  =             1382   1394 READ    EQU     $
                    1383   1395 ;
                    1384   1396 ; STMT: READ VAR [,VAR ...]
                    1385   1397 ;
07e1  cf            1386   1398         RST     1       ;SKIP BLANKS
07e2  cd 4f 18      1387   1399         CALL    GETS8   ;GET VAR ADDR
07e5  e5            1388   1400         PUSH    H       ;SAVE H,L
07e6  d5            1389   1401         PUSH    D       ;SAVE D,E
07e7  2a 8f 22      1390   1402         LHLD    DATAP   ;GET DATA STMT POINTER
07ea  7e            1391   1403         MOV     A,M     ;LOAD THE CHAR
07eb  b7            1392   1404         ORA     A       ;TEST IF END OF STMT
07ec  c2 0b 08      1393   1405         JNZ     READ2   ;BRIF NOT END OF STMT
07ef  23            1394   1406         INX     H       ;POINT START NEXT STMT
07f0  7e            1395   1407 READ1:  MOV     A,M     ;LOAD LEN
07f1  22 8f 22      1396   1408         SHLD    DATAP   ;SAVE ADDR
07f4  b7            1397   1409         ORA     A       ;TEST IF END OF PGM
07f5  ca 17 1c      1398   1410         JZ      DAERR   ;BRIF OUT OF DATA
07f8  e7            1399   1411         RST     4       ;ADJUST H,L
07f9  03            1400   1412         DB      3
07fa  11 9b 1e      1401   1413         LXI     D,DATAL ;POINT 'DATA'
07fd  d7            1402   1414         RST     2       ;COMPARE
07fe  ca 0b 08      1403   1415         JZ      READ2   ;BRIF IT IS DATA STMT
0801  2a 8f 22      1404   1416         LHLD    DATAP   ;GET ADDR START
0804  5e            1405   1417         MOV     E,M     ;GET LEN CODE
0805  16 00         1406   1418         MVI     D,0     ;CLEAR D
0807  19            1407   1419         DAD     D       ;POINT NEXT STMT
0808  c3 f0 07      1408   1420         JMP     READ1   ;LOOP NEXT STMT
080b  cf            1409   1421 READ2:  RST     1       ;SKIP SPACES
080c  79            1410   1422         MOV     A,C     ;LOAD LO NAME
080d  b7            1411   1423         ORA     A       ;TEST IT
080e  fa 33 08      1412   1424         JM      READ6   ;BRIF STRING
0811  cd 2e 14      1413   1425         CALL    FIN     ;GO CONVERT VALUE
0814  7e            1414   1426         MOV     A,M     ;GET CHAR WHICH STOPPED US
0815  fe 2c         1415   1427         CPI     ','     ;TEST IF COMMA
0817  c2 2c 08      1416   1428         JNZ     READ5   ;BRIF NOT
081a  23            1417   1429         INX     H       ;POINT NEXT
081b  22 8f 22      1418   1430 READ3:  SHLD    DATAP   ;SAVE ADDRESS
081e  e1            1419   1431         POP     H       ;RESTORE ADDR OF VAR
081f  df            1420   1432         RST     3       ;STORE THE VALUE
0820  e1            1421   1433 READ4:  POP     H       ;RESTORE POINTER TO STM
0821  7e            1422   1434         MOV     A,M     ;GET THE CHAR
0822  fe 2c         1423   1435         CPI     ','     ;TEST IF COMMA
0824  23            1424   1436         INX     H       ;POINT NEXT
0825  ca e1 07      1425   1437         JZ      READ    ;RECURSIVE IF IT IS
0828  2b            1426   1438         DCX     H       ;RESET
0829  c3 96 07      1427   1439         JMP     INPUB   ;CONTINUE
082c  b7            1428   1440 READ5:  ORA     A       ;TEST IF END OF STMT
082d  ca 1b 08      1429   1441         JZ      READ3   ;BRIF OK
0830  c3 1f 1c      1430   1442         JMP     CVERR   ;GO PROCESS ERROR
0833  cd 0d 18      1431   1443 READ6:  CALL    GETST   ;GO GET STRING
0836  7e            1432   1444         MOV     A,M     ;GET CHAR
0837  fe 2c         1433   1445         CPI     ','     ;TEST IF COMMA
0839  ca 43 08      1434   1446         JZ      READ7   ;BRIF IS
083c  b7            1435   1447         ORA     A       ;TEST IF END
083d  c2 2c 08      1436   1448         JNZ     READ5   ;BRIF NOT
0840  c3 44 08      1437   1449         JMP     READ8   ;GO AROUND
0843  23            1438   1450 READ7:  INX     H       ;POINT PAST
0844  22 8f 22      1439   1451 READ8:  SHLD    DATAP   ;SAVE ADDRESS
0847  c3 20 08      1440   1452         JMP     READ4   ;CONTINUE
                    1441   1453 ;
084a  =             1442   1454 OUTP    EQU     $
                    1443   1455 ;
                    1444   1456 ; STMT; OUT ADDR,VALUE
                    1445   1457 ;
                    1446   1458 ;
084a  cd 80 0f      1447   1459         CALL    EXPR    ;GO EVALUATE ADDRESS
084d  7e            1448   1460         MOV     A,M     ;GET DELIM
084e  fe 2c         1449   1461         CPI     ','     ;TEST IF COMMA
0850  c2 0f 1c      1450   1462         JNZ     SNERR   ;BRIF NOT
0853  23            1451   1463         INX     H       ;SKIP OVER COMMA
0854  cd 66 1c      1452   1464         CALL    FBIN    ;CONVERT TO BINARY IN A-REG
0857  11 20 22      1453   1465         LXI     D,OUTA  ;POINT INSTR
085a  eb            1454   1466         XCHG            ;PUT TO H,L
085b  36 d3         1455   1467         MVI     M,0D3H  ;OUT INSTR
085d  23            1456   1468         INX     H       ;POINT NEXT
085e  77            1457   1469         MOV     M,A     ;PUT ADDR
085f  23            1458   1470         INX     H       ;POINT NEXT
0860  36 c9         1459   1471         MVI     M,0C9H  ;RET INSTR
0862  eb            1460   1472         XCHG            ;RESTORE ORIG H,L
0863  cd 80 0f      1461   1473         CALL    EXPR    ;GO EVAL DATA BYTE
0866  cd 94 1a      1462   1474         CALL    EOL     ;ERROR IF NOT END OF STATEMENT
0869  cd 66 1c      1463   1475         CALL    FBIN    ;CONVERT TO BINARY
086c  cd 20 22      1464   1476         CALL    OUTA    ;GO PUT THE BYTE
086f  c3 0b 02      1465   1477         JMP     RUN     ;GO NEXT STMT
                    1466   1478 ;PAGE
                    1467   1479 ;
0872  =             1468   1480 STOP    EQU     $
                    1469   1481 ;
                    1470   1482 ; STMT: STOP
                    1471   1483 ;
                    1472   1484 ;
0872  cd 94 1a      1473   1485         CALL    EOL     ;POINT END OF LINE
0875  21 2d 1e      1474   1486         LXI     H,STOPM ;POINT MESSAGE: "STOP AT LINE "
0878  cd bd 19      1475   1487         CALL    TERMM   ;GO WRITE IT
087b  cd f1 1b      1476   1488         CALL    PRLIN   ;GO PRINT LINE NUMBER
087e  3a 75 20      1477   1489         LDA     RUNSW   ;GET RUN TYPE
0881  b7            1478   1490         ORA     A       ;TEST IT
0882  c2 c3 00      1479   1491         JNZ     RDY     ;BRIF IMMED
0885  32 74 22      1480   1492         STA     MULTI   ;CLEAR MULTI SW
0888  2a 70 22      1481   1493         LHLD    STMT    ;GET ADDR OF PREV STMT
088b  5e            1482   1494         MOV     E,M     ;GET LEN
088c  16 00         1483   1495         MVI     D,0     ;CLEAR HI BYTE
088e  19            1484   1496         DAD     D       ;POINT NEXT
088f  23            1485   1497         INX     H       ;POINT LINE NUMBER
0890  22 89 22      1486   1498         SHLD    LINE    ;SAVE ADDR
0893  11 77 20      1487   1499         LXI     D,LINEN ;POINT AREA
0896  cd 09 1a      1488   1500         CALL    LINEO   ;GO CONVERT LINE NUMBER
0899  eb            1489   1501         XCHG            ;FLIP TO H,L
089a  36 00         1490   1502         MVI     M,0     ;MARK END
089c  c3 c3 00      1491   1503         JMP     RDY     ;GO TO READY MSG
                    1492   1504 ;
089f  =             1493   1505 RANDO   EQU     $
                    1494   1506 ;
                    1495   1507 ;
                    1496   1508 ; STMT: RANDOMIZE
                    1497   1509 ;
                    1498   1510 ;
089f  cd 94 1a      1499   1511         CALL    EOL     ;ERROR IF NOT END-OF-LINE
08a2  3e 01         1500   1512         MVI     A,1     ;LOAD A ONE
08a4  32 87 22      1501   1513         STA     RNDSW   ;SET SWITCH = TRUE RANDOM
08a7  11 7f 22      1502   1514         LXI     D,TRNDX ;POINT 'TRUE' RANDOM NUMBERS
08aa  21 77 22      1503   1515         LXI     H,RNDX  ;POINT RECEIVE
08ad  06 08         1504   1516         MVI     B,8     ;LOOP CTR
08af  cd 4d 1c      1505   1517         CALL    COPYD   ;GO MOVE IT
08b2  c3 0b 02      1506   1518         JMP     RUN     ;CONTINUE
                    1507   1519 ;
08b5  =             1508   1520 ON      EQU     $
                    1509   1521 ;
                    1510   1522 ;
                    1511   1523 ; STMT: ON EXPR GOTO NNN NNNN NNNN
                    1512   1524 ;               GOSUB
                    1513   1525 ;
                    1514   1526 ;
08b5  cd 80 0f      1515   1527         CALL    EXPR    ;GO EVALUATE EXPRESSION
08b8  cd 66 1c      1516   1528         CALL    FBIN    ;GET BINARY NUMBER IN ACC
08bb  b7            1517   1529         ORA     A       ;TEST RESULT
08bc  ca 0f 1c      1518   1530         JZ      SNERR   ;BRIF ZERO (ERROR)
08bf  4f            1519   1531         MOV     C,A     ;SAVE VALUE
08c0  0d            1520   1532         DCR     C       ;LESS ONE
08c1  af            1521   1533         XRA     A       ;GET A ZERO
08c2  32 25 22      1522   1534         STA     REL     ;TURN OFF SWITCH
08c5  11 d0 1e      1523   1535         LXI     D,GOTOL ;POINT LITERAL
08c8  e5            1524   1536         PUSH    H       ;SAVE H,L ADDRESS
08c9  d7            1525   1537         RST     2       ;GO COMPARE
08ca  ca db 08      1526   1538         JZ      ON3     ;BRIF ON...GOTO
08cd  e1            1527   1539         POP     H       ;ELSE, RESTORE H,L
08ce  11 af 1e      1528   1540         LXI     D,GOSBL ;POINT LITERAL
08d1  d7            1529   1541         RST     2       ;GO COMPARE
08d2  c2 0f 1c      1530   1542         JNZ     SNERR   ;BRIF ERROR
08d5  3e 01         1531   1543         MVI     A,1     ;GET ON SETTING
08d7  32 25 22      1532   1544         STA     REL     ;SET SWITCH
08da  e5            1533   1545         PUSH    H       ;DUMMY PUSH
08db  d1            1534   1546 ON3:    POP     D       ;ADJUST STACK
08dc  79            1535   1547 ON3A:   MOV     A,C     ;GET COUNT
08dd  b7            1536   1548         ORA     A       ;TEST IT
08de  ca fd 08      1537   1549         JZ      ON6     ;BRIF VALUE 1
08e1  cf            1538   1550         RST     1       ;ELSE, SKIP BLANKS
08e2  b7            1539   1551         ORA     A       ;TEST IF END OF LINE
08e3  ca 0f 1c      1540   1552         JZ      SNERR   ;BRIF IS
08e6  fe 2c         1541   1553         CPI     ','     ;TEST IS COMMA
08e8  c2 ef 08      1542   1554         JNZ     ON4     ;BRIF NOT
08eb  23            1543   1555         INX     H       ;SKIP COMMA
08ec  c3 dc 08      1544   1556         JMP     ON3A    ;CONTINUE
08ef  cd 2a 1b      1545   1557 ON4:    CALL    NUMER   ;GO TEST IF NUMERIC
08f2  c2 f9 08      1546   1558         JNZ     ON5     ;BRIF NOT
08f5  23            1547   1559         INX     H       ;POINT NEXT
08f6  c3 ef 08      1548   1560         JMP     ON4     ;LOOP
08f9  0d            1549   1561 ON5:    DCR     C       ;SUB ONE FROM COUNT
08fa  c2 dc 08      1550   1562         JNZ     ON3A    ;LOOP TILL JUST BEFORE STMT#
08fd  cd ad 1a      1551   1563 ON6:    CALL    NOTEO   ;ERROR IF NOT END-OF-LINE
0900  fe 2c         1552   1564         CPI     ','     ;TEST IF COMMA
0902  c2 09 09      1553   1565         JNZ     ON7     ;BRIF NOT
0905  23            1554   1566         INX     H       ;POINT NEXT
0906  c3 fd 08      1555   1567         JMP     ON6     ;LOOP
0909  cd 2a 1b      1556   1568 ON7:    CALL    NUMER   ;TEST IF NUMERIC
090c  c2 0f 1c      1557   1569         JNZ     SNERR   ;BRIF NOT
090f  cd b5 1a      1558   1570         CALL    PACK    ;GET THE LINE NUMBER
0912  7e            1559   1571 ON8:    MOV     A,M     ;GET NEXT CHAR
0913  cd a8 1a      1560   1572         CALL    TSTEL   ;TEST IF END STMT
0916  ca 1d 09      1561   1573         JZ      ON9     ;BRIF END
0919  23            1562   1574         INX     H       ;POINT NEXT
091a  c3 12 09      1563   1575         JMP     ON8     ;LOOP
091d  cd 94 1a      1564   1576 ON9:    CALL    EOL     ;SET END OF LINE POINTERS
0920  3a 25 22      1565   1577         LDA     REL     ;GET TYPE (GOTO OR GOSUB)
0923  b7            1566   1578         ORA     A       ;TEST IT
0924  c2 43 03      1567   1579         JNZ     GOSU1   ;BRIF GOSUB
0927  c3 06 03      1568   1580         JMP     GOTO2   ;BR TO GOTO LOOKUP
                    1569   1581 ;PAGE
                    1570   1582 ;
092a  =             1571   1583 CHANG   EQU     $
                    1572   1584 ;
                    1573   1585 ; STATEMENT: CHANGE A$ TO X     - OR -
                    1574   1586 ;
                    1575   1587 ;            CHANGE X TO A$
                    1576   1588 ;
092a  cd c9 1b      1577   1589         CALL    VAR     ;NEXT WORD MUST BE VAR
092d  7b            1578   1590         MOV     A,E     ;TEST TYPE
092e  b7            1579   1591         ORA     A       ;SET FLAGS
092f  f2 68 09      1580   1592         JP      CHA2    ;BRIF NOT-STRING
0932  cd 34 1b      1581   1593         CALL    SEARC   ;GET ADDR
0935  d5            1582   1594         PUSH    D       ;SAVE IT
0936  11 d2 1e      1583   1595         LXI     D,TOLIT ;POINT 'TO'
0939  d7            1584   1596         RST     2       ;COMPARE
093a  c2 0f 1c      1585   1597         JNZ     SNERR   ;BRIF ERROR
093d  cd c9 1b      1586   1598         CALL    VAR     ;GET NEXT VARIABLE
0940  7a            1587   1599         MOV     A,D     ;GET HI NAME
0941  f6 80         1588   1600         ORI     80H     ;SET MASK FOR ARRAY
0943  57            1589   1601         MOV     D,A     ;REPLACE
0944  cd 34 1b      1590   1602         CALL    SEARC   ;GET ADDRESS
0947  e7            1591   1603         RST     4       ;POINT START OF ELEMENT 0,0
0948  f5            1592   1604         DB      -11 AND 0FFH
0949  d1            1593   1605         POP     D       ;GET PTR TO STMT
094a  eb            1594   1606         XCHG            ;FLIP
094b  cd 94 1a      1595   1607         CALL    EOL     ;NEXT MUST BE E-O-L
094e  eb            1596   1608         XCHG            ;FLIP AGAIN
094f  d1            1597   1609         POP     D       ;GET ADDR STRING
0950  1a            1598   1610         LDAX    D       ;GET COUNT
0951  47            1599   1611         MOV     B,A     ;SAVE IT
0952  04            1600   1612         INR     B       ;BUMP
0953  c5            1601   1613 CHA1:   PUSH    B       ;SAVE CTR
0954  d5            1602   1614         PUSH    D       ;SAVE ADDR STRING
0955  e5            1603   1615         PUSH    H       ;SAVE ADDR NUM
0956  cd 1a 0d      1604   1616         CALL    FDEC    ;CONVERT TO F.P.
0959  e1            1605   1617         POP     H       ;GET ADDR
095a  df            1606   1618         RST     3       ;STORE IT
095b  e7            1607   1619         RST     4       ;POINT TO NEXT
095c  f8            1608   1620         DB      -8 AND 0FFH
095d  d1            1609   1621         POP     D       ;RESTORE STRING
095e  c1            1610   1622         POP     B       ;AND CTR
095f  13            1611   1623         INX     D       ;POINT NEXT CHAR
0960  1a            1612   1624         LDAX    D       ;LOAD IT
0961  05            1613   1625         DCR     B       ;DECR CTR
0962  c2 53 09      1614   1626         JNZ     CHA1    ;LOOP
0965  c3 0b 02      1615   1627         JMP     RUN
                    1616   1628 ;
                    1617   1629 ;
0968  7a            1618   1630 CHA2:   MOV     A,D     ;GET HI NAME
0969  f6 80         1619   1631         ORI     80H     ;MAKE ARRAY NAME
096b  57            1620   1632         MOV     D,A     ;SAVE
096c  cd 34 1b      1621   1633         CALL    SEARC   ;GET ADDR
096f  e7            1622   1634         RST     4       ;POINT ELEMENT 0,0
0970  f5            1623   1635         DB      -11 AND 0FFH
0971  e3            1624   1636         XTHL            ;SAVE ON STACK
0972  11 d2 1e      1625   1637         LXI     D,TOLIT ;POINT 'TO'
0975  d7            1626   1638         RST     2       ;COMPARE
0976  c2 0f 1c      1627   1639         JNZ     SNERR   ;BRIF ERROR
0979  cd c9 1b      1628   1640         CALL    VAR     ;GET NAME
097c  7b            1629   1641         MOV     A,E     ;GET TYPE
097d  b7            1630   1642         ORA     A       ;SET FLAGS
097e  f2 0f 1c      1631   1643         JP      SNERR   ;BRIF NOT STRING
0981  cd 94 1a      1632   1644         CALL    EOL     ;BRIF NOT E-O-L
0984  cd 34 1b      1633   1645         CALL    SEARC   ;GET ADDR
0987  e1            1634   1646         POP     H       ;GET ADDR VAR
0988  d5            1635   1647         PUSH    D       ;SAVE D,E
0989  11 20 21      1636   1648         LXI     D,STRIN ;POINT STRING BUFFER
098c  d5            1637   1649         PUSH    D       ;SAVE IT
098d  ef            1638   1650         RST     5       ;LOAD IT
098e  e7            1639   1651         RST     4       ;POINT NEXT
098f  f8            1640   1652         DB      -8 AND 0FFH
0990  e5            1641   1653         PUSH    H       ;SAVE H,L
0991  cd 66 1c      1642   1654         CALL    FBIN    ;CONVERT
0994  e1            1643   1655         POP     H       ;RESTORE
0995  d1            1644   1656         POP     D       ;DITTO
0996  47            1645   1657         MOV     B,A     ;SAVE COUNT
0997  04            1646   1658         INR     B       ;BUMP IT
0998  12            1647   1659 CHA3:   STAX    D       ;PUT TO STRING
0999  13            1648   1660         INX     D       ;POINT NEXT STR LOC.
099a  c5            1649   1661         PUSH    B       ;SAVE CTRS
099b  d5            1650   1662         PUSH    D       ;AND ADDR
099c  ef            1651   1663         RST     5       ;LOAD NEXT
099d  e7            1652   1664         RST     4       ;POINT NEXT
099e  f8            1653   1665         DB      -8 AND 0FFH
099f  e5            1654   1666         PUSH    H       ;AND H ADDR
09a0  cd 66 1c      1655   1667         CALL    FBIN    ;CONVERT
09a3  e1            1656   1668         POP     H       ;RESTORE H,L
09a4  d1            1657   1669         POP     D       ;AND D,E
09a5  c1            1658   1670         POP     B       ;AND CTRS
09a6  05            1659   1671         DCR     B       ;DECR CTR
09a7  c2 98 09      1660   1672         JNZ     CHA3    ;LOOP
09aa  e1            1661   1673         POP     H       ;GET ADDR OF VAR (STRING)
09ab  cd 31 06      1662   1674         CALL    LET2A   ;GO STORE IT
09ae  c3 0b 02      1663   1675         JMP     RUN     ;CONTINUE
                    1664   1676 ;PAGE
                    1665   1677 ;
09b1  =             1666   1678 DIM     EQU     $
                    1667   1679 ;
                    1668   1680 ; STMT: DIM VAR(A,B),...
                    1669   1681 ;
                    1670   1682 ;
09b1  cd c9 1b      1671   1683         CALL    VAR     ;GO GET VAR NAME
09b4  f2 0f 1c      1672   1684         JP      SNERR   ;BRIF NO (
09b7  cd 34 1b      1673   1685         CALL    SEARC   ;GO LOCATE THE VAR
09ba  e3            1674   1686         XTHL            ;PUT ADDR IN STACK, GET PTR TO (
09bb  f5            1675   1687         PUSH    PSW     ;SAVE STATUS
09bc  3e ff         1676   1688         MVI     A,0FFH  ;TURN ON SW
09be  32 72 20      1677   1689         STA     DIMSW   ;SET IT
09c1  cd 80 0f      1678   1690         CALL    EXPR    ;GO EVALUATE
09c4  f1            1679   1691         POP     PSW     ;GET STATUS
09c5  e3            1680   1692         XTHL            ;SWAP PTRS
09c6  d5            1681   1693         PUSH    D       ;SAVE ROW NUMBER
09c7  c5            1682   1694         PUSH    B       ;SAVE COL NUMBER
09c8  03            1683   1695         INX     B       ;INCREMENT COLUMNS
09c9  13            1684   1696         INX     D       ;AND ROWS
09ca  e5            1685   1697         PUSH    H       ;SAVE H,L
09cb  f5            1686   1698         PUSH    PSW     ;RESAVE STATUS
09cc  21 00 00      1687   1699         LXI     H,0     ;GET A ZERO
09cf  19            1688   1700 DIM1:   DAD     D       ;TIMES ONE
09d0  0b            1689   1701         DCX     B       ;DCR COLS
09d1  78            1690   1702         MOV     A,B     ;GET HI
09d2  b1            1691   1703         ORA     C       ;PLUS LO
09d3  c2 cf 09      1692   1704         JNZ     DIM1    ;LOOP
09d6  f1            1693   1705         POP     PSW     ;GET STATUS
09d7  d1            1694   1706         POP     D       ;GET ADDRESS
09d8  29            1695   1707         DAD     H       ;TIMES TWO
09d9  29            1696   1708         DAD     H       ;TIMES FOUR
09da  01 08 00      1697   1709         LXI     B,8     ;PLUS 2 (NAME AND DISP)
09dd  fa 1d 0a      1698   1710         JM      REDIM   ;GO RE-DIMENSION
09e0  e5            1699   1711         PUSH    H       ;SAVE PRODUCT
09e1  09            1700   1712         DAD     B       ;ADD IT
09e2  eb            1701   1713         XCHG            ;FLIP/FLOP
09e3  2b            1702   1714         DCX     H       ;POINT LO NAME
09e4  2b            1703   1715         DCX     H       ;POINT HI DISP
09e5  7b            1704   1716         MOV     A,E     ;GET LO
09e6  2f            1705   1717         CMA             ;COMPLEMENT
09e7  c6 01         1706   1718         ADI     1       ;PLUS ONE
09e9  5f            1707   1719         MOV     E,A     ;RESTORE
09ea  7a            1708   1720         MOV     A,D     ;GET HI
09eb  2f            1709   1721         CMA             ;COMPLEMENT
09ec  ce 00         1710   1722         ACI     0       ;PLUS CARRY
09ee  77            1711   1723         MOV     M,A     ;STORE IT
09ef  2b            1712   1724         DCX     H       ;POINT NEXT
09f0  73            1713   1725         MOV     M,E     ;STORE LO
09f1  eb            1714   1726         XCHG            ;SAVE IN D,E
09f2  e1            1715   1727         POP     H       ;GET PRODUCT
09f3  44            1716   1728         MOV     B,H     ;COPY H,L
09f4  4d            1717   1729         MOV     C,L     ;TO B,C
09f5  eb            1718   1730         XCHG            ;GET LOCAT
09f6  d1            1719   1731         POP     D       ;GET COLUMNS
09f7  2b            1720   1732         DCX     H       ;POINT NEXT
09f8  72            1721   1733         MOV     M,D     ;MOVE LO COL
09f9  2b            1722   1734         DCX     H       ;POINT NEXT
09fa  73            1723   1735         MOV     M,E     ;MOVE HI COL
09fb  d1            1724   1736         POP     D       ;GET ROWS
09fc  2b            1725   1737         DCX     H       ;POINT NEXT
09fd  72            1726   1738         MOV     M,D     ;MOVE HI ROW
09fe  2b            1727   1739         DCX     H       ;POINT NEXT
09ff  73            1728   1740         MOV     M,E     ;MOVE LO ROW
0a00  2b            1729   1741         DCX     H       ;POINT NEXT
0a01  36 00         1730   1742 DIM2:   MVI     M,0     ;CLEAR ONE BYTE
0a03  2b            1731   1743         DCX     H       ;POINT NEXT
0a04  0b            1732   1744         DCX     B       ;DECR CTR
0a05  78            1733   1745         MOV     A,B     ;GET HI
0a06  b1            1734   1746         ORA     C       ;PLUS LO
0a07  c2 01 0a      1735   1747         JNZ     DIM2    ;LOOP
0a0a  36 00         1736   1748         MVI     M,0     ;MARK END
0a0c  e1            1737   1749 DIM3:   POP     H       ;GET PTR TO STMT
0a0d  7e            1738   1750         MOV     A,M     ;LOAD CHAR
0a0e  fe 2c         1739   1751         CPI     ','     ;TEST IF COMMA
0a10  c2 17 0a      1740   1752         JNZ     DIM4    ;BRIF NOT
0a13  23            1741   1753         INX     H       ;SKIP IT
0a14  c3 b1 09      1742   1754         JMP     DIM     ;CONTINUE
0a17  cd 94 1a      1743   1755 DIM4:   CALL    EOL     ;TEST END OF LINE
0a1a  c3 0b 02      1744   1756         JMP     RUN     ;CONTINUE WITH PROGRAM
0a1d  09            1745   1757 REDIM:  DAD     B       ;COMPUTE LEN TO NEXT
0a1e  1b            1746   1758         DCX     D       ;POINT LO NAME
0a1f  1b            1747   1759         DCX     D       ;POINT HI DISP
0a20  1a            1748   1760         LDAX    D       ;GET IT
0a21  47            1749   1761         MOV     B,A     ;SAVE
0a22  1b            1750   1762         DCX     D       ;POINT LO DISP
0a23  1a            1751   1763         LDAX    D       ;GET IT
0a24  4f            1752   1764         MOV     C,A     ;SAVE
0a25  09            1753   1765         DAD     B       ;COMPUTE DIFF OR PRIOR DIM AND THIS
0a26  7c            1754   1766         MOV     A,H     ;GET HI DIFF
0a27  b7            1755   1767         ORA     A       ;TEST IT
0a28  fa 33 0a      1756   1768         JM      REDM1   ;BRIF PREV > NEW
0a2b  c2 0f 1c      1757   1769         JNZ     SNERR   ;BRIF PREV < NEW
0a2e  7d            1758   1770         MOV     A,L     ;GET LO DIFF
0a2f  b7            1759   1771         ORA     A       ;TEST IT
0a30  c2 0f 1c      1760   1772         JNZ     SNERR   ;BRIF PREV < NEW
0a33  eb            1761   1773 REDM1:  XCHG            ;PUT ADDR IN H,L
0a34  2b            1762   1774         DCX     H       ;POINT HI COL
0a35  d1            1763   1775         POP     D       ;GET COL
0a36  72            1764   1776         MOV     M,D     ;MOVE HI
0a37  2b            1765   1777         DCX     H       ;POINT LO COL
0a38  73            1766   1778         MOV     M,E     ;MOVE LO
0a39  d1            1767   1779         POP     D       ;GET ROW
0a3a  2b            1768   1780         DCX     H       ;POINT HI ROW
0a3b  72            1769   1781         MOV     M,D     ;MOVE HI
0a3c  2b            1770   1782         DCX     H       ;POINT LO ROW
0a3d  73            1771   1783         MOV     M,E     ;MOVE LO
0a3e  c3 0c 0a      1772   1784         JMP     DIM3    ;CONTINUE
                    1773   1785 ;PAGE
                    1774   1786 ;
0a41  =             1775   1787 SIN     EQU     $
                    1776   1788 ;
                    1777   1789 ; COMPUTE SINE OF X, (X IN RADIANS)
                    1778   1790 ;
                    1779   1791 ; USES 4TH DEGREE POLYNOMIAL APPROXIMATION
                    1780   1792 ;
                    1781   1793 ;
                    1782   1794 ; FIRST, REDUCE ANGLE TO RANGE: (-PI/2,PI/2)
                    1783   1795 ;
0a41  cd ce 18      1784   1796         CALL    FTEST   ;GET STATUS OF ANGLE
0a44  c8            1785   1797         RZ              ;SIN(0)=0
0a45  f5            1786   1798         PUSH    PSW     ;SAVE SIGN OF ANGLE
0a46  cd c7 0b      1787   1799         CALL    ABS
0a49  f1            1788   1800 SIN1:   POP     PSW     ;COMPLEMENT SIGN FOR EACH PI SUB'D
0a4a  2f            1789   1801         CMA             ;..
0a4b  f5            1790   1802         PUSH    PSW     ;..
0a4c  21 a2 1d      1791   1803         LXI     H,PI    ;REDUCE TO -PI<X<0
0a4f  cd 0c 17      1792   1804         CALL    FSUB
0a52  f2 49 0a      1793   1805         JP      SIN1
0a55  21 d6 1d      1794   1806         LXI     H,HALFP ;NOW ADD PI FOR -PI<X<-PI/2
0a58  e5            1795   1807         PUSH    H
0a59  cd 37 16      1796   1808         CALL    FADD
0a5c  f4 7a 0c      1797   1809         CP      NEG     ;AND JUST NEGATE FOR -PI/2<X<0
0a5f  e1            1798   1810         POP     H
0a60  cd 37 16      1799   1811         CALL    FADD
0a63  f1            1800   1812         POP     PSW     ;RESTORE SIGN
0a64  b7            1801   1813         ORA     A
0a65  f4 7a 0c      1802   1814         CP      NEG
                    1803   1815 ;
                    1804   1816 ; INIT REGISTERS
                    1805   1817 ;
0a68  21 2f 22      1806   1818         LXI     H,TEMP1 ;POINT IT
0a6b  df            1807   1819         RST     3       ;SAVE IT
0a6c  3a 58 22      1808   1820         LDA     FACC    ;GET SIGN&EXPONENT
0a6f  cd dc 18      1809   1821         CALL    FEXP    ;EXPAND EXPON.
0a72  f2 78 0a      1810   1822         JP      SIN3A   ;BRIF POSITIVE
0a75  fe fd         1811   1823         CPI     0FDH    ;TEST EXPONENT
0a77  d8            1812   1824         RC              ;RETURN IF VERY SMALL RADIAN
                    1813   1825 ;
                    1814   1826 ; ABOVE ROUTINE WILL APPROX SIN(X) == X FOR X: (-.06,.06)
                    1815   1827 ;
0a78  21 d6 1d      1816   1828 SIN3A:  LXI     H,HALFP ;POINT PI/2
0a7b  cd 9b 17      1817   1829         CALL    FDIV    ;COMPUTE X/PI/2
0a7e  21 33 22      1818   1830         LXI     H,TEMP2 ;POINT T2
0a81  df            1819   1831         RST     3       ;STORE IT
0a82  21 33 22      1820   1832         LXI     H,TEMP2 ;POINT BACK
0a85  cd 18 17      1821   1833         CALL    FMUL    ;COMPUTE SQUARE
0a88  21 e6 1d      1822   1834         LXI     H,SINCO ;POINT CONSTANTS
                    1823   1835 ;
                    1824   1836 ; EVALUATE POWER SERIES
                    1825   1837 ;
                    1826   1838 ; EVALUATE STARTING FROM HIGH ORDER COEFFICIENT:
                    1827   1839 ;  F(X)=(...(CN*FACC+C(N-1))*FACC+...+C1)*FACC*TEMP2+TEMP1
                    1828   1840 ;
                    1829   1841 ;ON ENTRY:
                    1830   1842 ;       TEMP1=CONSTANT TERM
                    1831   1843 ;       TEMP2=X OR 1
                    1832   1844 ;       FACC=X^2 OR X
                    1833   1845 ;       (HL)=COEFFICIENT OF LAST TERM
                    1834   1846 ;
0a8b  e5            1835   1847 EVPS:   PUSH    H       ;SAVE POINTER TO COEFFICIENTS
0a8c  21 37 22      1836   1848         LXI     H,TEMP3 ;SAVE FACC
0a8f  df            1837   1849         RST     3
0a90  e1            1838   1850         POP     H       ;RESTORE H
0a91  e5            1839   1851         PUSH    H
0a92  c3 9c 0a      1840   1852         JMP     EVPS2
0a95  e5            1841   1853 EVPS1:  PUSH    H       ;SAVE PTR TO NEXT COEFFICIENT
0a96  cd 37 16      1842   1854         CALL    FADD    ;FACC+CN->FACC
0a99  21 37 22      1843   1855         LXI     H,TEMP3 ;POINTER TO X^N
0a9c  cd 18 17      1844   1856 EVPS2:  CALL    FMUL    ;FACC*X^N->FACC
0a9f  e1            1845   1857         POP     H       ;COEFFICENT PTR
0aa0  e7            1846   1858         RST     4       ;MOVE TO NEXT COEFFICIENT
0aa1  fc            1847   1859         DB      -4 AND 0FFH
0aa2  7e            1848   1860         MOV     A,M     ;GET EXPONENT
0aa3  3d            1849   1861         DCR     A       ;TEST FOR 1
0aa4  c2 95 0a      1850   1862         JNZ     EVPS1   ;BRIF NOT 1
0aa7  21 33 22      1851   1863         LXI     H,TEMP2 ;MUL BY TEMP2
0aaa  cd 18 17      1852   1864         CALL    FMUL
0aad  21 2f 22      1853   1865         LXI     H,TEMP1 ;POINT TO CONSTANT TERM
0ab0  c3 37 16      1854   1866         JMP     FADD    ;ADD IT AND RETURN TO CALLER
                    1855   1867 ;
0ab3  =             1856   1868 COS     EQU     $
                    1857   1869 ;
                    1858   1870 ;
                    1859   1871 ; COMPUTE COSINE OF ANGLE, X EXPRESSED IN RADIANS
                    1860   1872 ; USES THE TRANSFORMATION: Y = PI/2 +- X
                    1861   1873 ;     AND THEN COMPUTES SIN(Y).
                    1862   1874 ;
                    1863   1875 ;
0ab3  21 d6 1d      1864   1876         LXI     H,HALFP ;COMPUTE PI/2 + X
0ab6  cd 37 16      1865   1877         CALL    FADD    ;GO ADD
0ab9  c3 41 0a      1866   1878         JMP     SIN     ;GO COMPUTE SINE
                    1867   1879 ;
0abc  =             1868   1880 TAN     EQU     $
                    1869   1881 ;
                    1870   1882 ; COMPUTE TANGENT OF X, IN RADIANS
                    1871   1883 ; USES THE RELATION:
                    1872   1884 ;
                    1873   1885 ;          SIN(X)
                    1874   1886 ; TAN(X) = ------
                    1875   1887 ;          COS(X)
                    1876   1888 ;
0abc  21 3b 22      1877   1889         LXI     H,TEMP4 ;POINT SAVE AREA
0abf  df            1878   1890         RST     3       ;SAVE ANGLE
0ac0  cd b3 0a      1879   1891         CALL    COS     ;COMPUTE COS(X)
0ac3  21 47 22      1880   1892         LXI     H,TEMP7 ;SAVE COS(X)->TEMP7
0ac6  df            1881   1893         RST     3
0ac7  21 3b 22      1882   1894         LXI     H,TEMP4 ;MOVE X->FACC
0aca  ef            1883   1895         RST     5
0acb  cd 41 0a      1884   1896         CALL    SIN     ;COMPUTE SINE
0ace  21 47 22      1885   1897         LXI     H,TEMP7 ;POINT COS
0ad1  c3 9b 17      1886   1898         JMP     FDIV    ;DIVIDE AND RETURN TO CALLER
                    1887   1899 ;
0ad4  =             1888   1900 ATN     EQU     $
                    1889   1901 ;
                    1890   1902 ; COMPUTES THE ARCTANGENT OF X
                    1891   1903 ; USES A SEVENTH DEGREE POLYNOMIAL APPROXIMATION
                    1892   1904 ;
0ad4  cd ce 18      1893   1905         CALL    FTEST   ;CHECK SIGN OF ARGUMENT
0ad7  f2 e3 0a      1894   1906         JP      ATN1    ;BRIF POSITIVE
0ada  cd 7a 0c      1895   1907         CALL    NEG     ;REVERSE SIGN
0add  cd e3 0a      1896   1908         CALL    ATN1    ;GET POSITIVE ATN
0ae0  c3 7a 0c      1897   1909         JMP     NEG     ;MAKE NEG & RETURN
                    1898   1910 ;
0ae3  21 ea 1d      1899   1911 ATN1:   LXI     H,ONE   ;POINT: 1
0ae6  cd 37 16      1900   1912         CALL    FADD    ;GO ADD
0ae9  21 2f 22      1901   1913         LXI     H,TEMP1 ;POINT SAVE
0aec  df            1902   1914         RST     3       ;STORE
0aed  21 9a 1d      1903   1915         LXI     H,TWO   ;POINT: 2
0af0  cd 0c 17      1904   1916         CALL    FSUB    ;GO SUBTRACT
0af3  21 2f 22      1905   1917         LXI     H,TEMP1 ;POINT SAVED
0af6  cd 9b 17      1906   1918         CALL    FDIV    ;DIVIDE
0af9  21 33 22      1907   1919         LXI     H,TEMP2 ;POINT SAVE
0afc  df            1908   1920         RST     3       ;SAVE X'=(X-1)/(X+1)
0afd  21 a6 1d      1909   1921         LXI     H,QTRPI ;X'+PI/4 -> TEMP1
0b00  cd 37 16      1910   1922         CALL    FADD
0b03  21 2f 22      1911   1923         LXI     H,TEMP1
0b06  df            1912   1924         RST     3
0b07  e5            1913   1925         PUSH    H       ;SAVE PTR TO TEMP2
0b08  ef            1914   1926         RST     5       ;LOAD IT
0b09  e1            1915   1927         POP     H
0b0a  cd 18 17      1916   1928         CALL    FMUL    ;FACC=X'*X'
0b0d  21 d2 1d      1917   1929         LXI     H,ATNCO ;POINT LIST COEFFICIENTS
0b10  c3 8b 0a      1918   1930         JMP     EVPS    ;GO COMPUTE & RETURN
                    1919   1931 ;
0b13  =             1920   1932 LN      EQU     $
                    1921   1933 ;
                    1922   1934 ;
                    1923   1935 ; COMPUTES THE NATRUAL LOGRITHM, LN(X)
                    1924   1936 ; USES A 7TH DEGREE POLYNOMIAL APPROXIMATION
                    1925   1937 ;
0b13  cd ce 18      1926   1938         CALL    FTEST   ;TEST THE ARGUMENT
0b16  fa 07 1c      1927   1939         JM      ZMERR   ;LN(-X)=NO NO
0b19  ca 07 1c      1928   1940         JZ      ZMERR   ;LN(0)=NO NO ALSO
0b1c  21 33 22      1929   1941         LXI     H,TEMP2 ;POINT SAVE AREA
0b1f  df            1930   1942         RST     3       ;STORE IT
0b20  3a 58 22      1931   1943         LDA     FACC    ;GET EXPON
0b23  cd dc 18      1932   1944         CALL    FEXP    ;EXPAND TO 8 BITS
0b26  ca 2c 0b      1933   1945         JZ      LN0     ;BRIF 0.5 < X < 1.0
0b29  f2 38 0b      1934   1946         JP      LN1     ;BRIF POSITIVE EXPONENT
0b2c  2f            1935   1947 LN0:    CMA             ;ELSE COMPLIMENT
0b2d  c6 02         1936   1948         ADI     2       ;PLUS TWO
0b2f  cd 1a 0d      1937   1949         CALL    FDEC    ;CONVERT TO FLOAT POINT
0b32  cd 7a 0c      1938   1950         CALL    NEG     ;THEN NEGATE
0b35  c3 3d 0b      1939   1951         JMP     LN2     ;GO AROUND
0b38  de 01         1940   1952 LN1:    SBI     1       ;MINUS ONE
0b3a  cd 1a 0d      1941   1953         CALL    FDEC    ;CONVERT TO FLOATING POINT
0b3d  21 ae 1d      1942   1954 LN2:    LXI     H,LN2C  ;POINT LN(2)
0b40  cd 18 17      1943   1955         CALL    FMUL    ;MULTIPLY
0b43  21 2f 22      1944   1956         LXI     H,TEMP1 ;POINT SAVE AREA
0b46  df            1945   1957         RST     3       ;STORE IT
0b47  ef            1946   1958         RST     5       ;GET ORIG X
0b48  3e 01         1947   1959         MVI     A,1     ;GET EXPONENT: 1
0b4a  32 58 22      1948   1960         STA     FACC    ;ADJUST TO RANGE (1,2)
0b4d  21 ea 1d      1949   1961         LXI     H,ONE   ;POINT 1
0b50  e5            1950   1962         PUSH    H       ;SAVE PTR TO ONE
0b51  cd 0c 17      1951   1963         CALL    FSUB    ;SUBTRACT ONE
0b54  d1            1952   1964         POP     D       ;SET TEMP2=1
0b55  21 33 22      1953   1965         LXI     H,TEMP2
0b58  cd 4b 1c      1954   1966         CALL    CPY4D
0b5b  21 06 1e      1955   1967         LXI     H,LNCO  ;POINT COEFFICIENTS
0b5e  c3 8b 0a      1956   1968         JMP     EVPS    ;APPROXIMATE & RETURN
                    1957   1969 ;
                    1958   1970 ; X=LOG(X) --- THIS IS LOG BASE 10.
                    1959   1971 ;
0b61  =             1960   1972 LOG     EQU     $
0b61  cd 13 0b      1961   1973         CALL    LN      ;COMPUTE NATURAL LOG
0b64  21 22 1e      1962   1974         LXI     H,LNC   ;POINT LOG(E)
0b67  c3 18 17      1963   1975         JMP     FMUL    ;MULTIPLY AND RETURN
                    1964   1976 ;
0b6a  =             1965   1977 EXP     EQU     $
                    1966   1978 ;
                    1967   1979 ;  COMPUTES EXP(X) USING ALGORITHM EXP(X)=(2^I)*(2^FP) WHERE
                    1968   1980 ;  2^I=INT(X*LN BASE 2 OF E) AND,
                    1969   1981 ;  2^FP=5TH DEGREE POLY. APPROXIMATION
                    1970   1982 ;  FP=FRACTIONAL PART OF INT(X*LN2E)
                    1971   1983 ;
0b6a  cd ce 18      1972   1984         CALL    FTEST   ;CHECK SIGN
0b6d  f2 84 0b      1973   1985         JP      EXP1    ;BRIF POSITIVE
0b70  cd 7a 0c      1974   1986         CALL    NEG     ;ELSE, REVERSE SIGN
0b73  cd 84 0b      1975   1987         CALL    EXP1    ;COMPUTE POSITIVE EXP
0b76  21 2f 22      1976   1988         LXI     H,TEMP1 ;POINT SAVE AREA
0b79  df            1977   1989         RST     3       ;STORE IT
0b7a  21 ea 1d      1978   1990         LXI     H,ONE   ;POINT 1
0b7d  ef            1979   1991         RST     5       ;LOAD IT
0b7e  21 2f 22      1980   1992         LXI     H,TEMP1 ;POINT PREV
0b81  c3 9b 17      1981   1993         JMP     FDIV    ;RECIPRICAL AND RETURN
                    1982   1994 ;
0b84  21 0a 1e      1983   1995 EXP1:   LXI     H,LN2E  ;POINT LN BASE 2 OF E
0b87  cd 18 17      1984   1996         CALL    FMUL    ;FACC=X*(LN2E)
0b8a  21 37 22      1985   1997         LXI     H,TEMP3 ;POINT SAVE AREA
0b8d  df            1986   1998         RST     3       ;TEMP3=X*LN2E
0b8e  cd e2 0b      1987   1999         CALL    INT     ;FACC=INT(X*LN2E)
0b91  21 3b 22      1988   2000         LXI     H,TEMP4 ;POINT SAVE AREA
0b94  df            1989   2001         RST     3       ;TEMP4=INT(X*LN2E)
0b95  df            1990   2002         RST     3       ;DITTO FOR TEMP5
0b96  3a 58 22      1991   2003         LDA     FACC    ;GET THE EXPONENT COUNT
0b99  47            1992   2004         MOV     B,A     ;SAVE COUNT IN B
0b9a  3a 59 22      1993   2005         LDA     FACC+1  ;GET MANTISSA
0b9d  07            1994   2006 ELOOP:  RLC             ;ROTATE LEFT
0b9e  05            1995   2007         DCR     B       ;REDUCE COUNT
0b9f  c2 9d 0b      1996   2008         JNZ     ELOOP   ;CONTINUE SHIFTING
0ba2  3c            1997   2009         INR     A       ;ADJUST EXPONENT
0ba3  32 3b 22      1998   2010         STA     TEMP4   ;STORE EXPONENT
0ba6  3e 80         1999   2011         MVI     A,80H   ;LOAD CONSTANT
0ba8  32 3c 22      2000   2012         STA     TEMP4+1 ;STORE AS MANTISSA
0bab  21 ea 1d      2001   2013         LXI     H,ONE   ;1 -> TEMP1, TEMP2
0bae  ef            2002   2014         RST     5
0baf  21 2f 22      2003   2015         LXI     H,TEMP1
0bb2  df            2004   2016         RST     3
0bb3  df            2005   2017         RST     3
0bb4  ef            2006   2018         RST     5       ;LOAD TEMP3=INT(X*LN2E)
0bb5  21 3f 22      2007   2019         LXI     H,TEMP5 ;GET FACC=FP(X*LN2E)
0bb8  cd 0c 17      2008   2020         CALL    FSUB
0bbb  21 1e 1e      2009   2021         LXI     H,EXPCO ;POINT CONSTANTS
0bbe  cd 8b 0a      2010   2022         CALL    EVPS    ;COMPUTE POLYNOMIAL
0bc1  21 3b 22      2011   2023         LXI     H,TEMP4 ;POINT 2^(INT(X*LN2E))
0bc4  c3 18 17      2012   2024         JMP     FMUL    ;MULTIPLY,NORMALIZE AND RETURN
                    2013   2025 ;
                    2014   2026 ;
0bc7  =             2015   2027 ABS     EQU     $
                    2016   2028 ;
                    2017   2029 ;
                    2018   2030 ; RETURN THE ABSOLUTE VALUE OF THE FLOATING ACCUMULATOR
                    2019   2031 ;
                    2020   2032 ;
0bc7  3a 58 22      2021   2033         LDA     FACC    ;GET EXPONENT
0bca  e6 7f         2022   2034         ANI     7FH     ;STRIP NEGATIVE SIGN
0bcc  32 58 22      2023   2035         STA     FACC    ;REPLACE
0bcf  c9            2024   2036         RET             ;RETURN
                    2025   2037 ;
0bd0  =             2026   2038 SGN     EQU     $
                    2027   2039 ;
                    2028   2040 ;
                    2029   2041 ; RETURNS THE SIGN OF THE FLOATING ACCUMULATOR
                    2030   2042 ; THAT IS:
                    2031   2043 ;  1 IF FACC > 0
                    2032   2044 ;  0 IF FACC = 0
                    2033   2045 ; -1 IF FACC < 0
                    2034   2046 ;
0bd0  cd ce 18      2035   2047         CALL    FTEST   ;GET STATUS OF FACC
0bd3  c8            2036   2048         RZ              ;RETURN IF ZERO
0bd4  e6 80         2037   2049         ANI     80H     ;ISOLATE SIGN
0bd6  f6 01         2038   2050 SGN1:   ORI     1       ;CREATE EXPONENT
0bd8  f5            2039   2051         PUSH    PSW     ;SAVE IT
0bd9  21 ea 1d      2040   2052         LXI     H,ONE   ;GET ADDRESS OF CONSTANT 1
0bdc  ef            2041   2053         RST     5       ;GO LOAD IT
0bdd  f1            2042   2054         POP     PSW     ;RESTORE SIGN
0bde  32 58 22      2043   2055         STA     FACC    ;SET THE SIGN
0be1  c9            2044   2056         RET             ;RETURN
                    2045   2057 ;
0be2  =             2046   2058 INT     EQU     $
                    2047   2059 ;
                    2048   2060 ;
                    2049   2061 ; RETURNS THE GREATEST INTEGER NOT LARGER THAN VALUE IN FACC
                    2050   2062 ; E.G.:
                    2051   2063 ;    INT(3.14159) =  3
                    2052   2064 ;    INT(0)       =  0
                    2053   2065 ;    INT(-3.1415) = -4
                    2054   2066 ;
                    2055   2067 ;
0be2  21 58 22      2056   2068         LXI     H,FACC  ;POINT FLOAT ACC
0be5  7e            2057   2069         MOV     A,M     ;GET EXPONENT
0be6  e6 40         2058   2070         ANI     40H     ;GET SIGN OF CHARACTERISTIC
0be8  ca f0 0b      2059   2071         JZ      INT2    ;BRIF GE ZERO
0beb  06 04         2060   2072         MVI     B,4     ;LOOP CTR
0bed  c3 5e 1c      2061   2073         JMP     ZEROM   ;GO ZERO THE FACC
0bf0  7e            2062   2074 INT2:   MOV     A,M     ;GET EXPONENT AGAIN
0bf1  b7            2063   2075         ORA     A       ;TEST SIGN
0bf2  f2 ff 0b      2064   2076         JP      INT3    ;BRIF POSITIVE OR ZERO
0bf5  21 aa 1d      2065   2077         LXI     H,NEGON ;POINT CONSTANT: -.9999999
0bf8  cd 37 16      2066   2078         CALL    FADD    ;ADD TO FACC
0bfb  21 58 22      2067   2079         LXI     H,FACC  ;POINT EXPONTENT AGAIN
0bfe  7e            2068   2080         MOV     A,M     ;LOAD IT
0bff  e6 3f         2069   2081 INT3:   ANI     3FH     ;ISOLATE CHARACTERISTIC
0c01  fe 18         2070   2082         CPI     24      ;TEST IF ANY FRACTION
0c03  f0            2071   2083         RP              ;RETURN IF NOT
0c04  47            2072   2084         MOV     B,A     ;SAVE EXPONENT
0c05  3e 18         2073   2085         MVI     A,24    ;GET CONSTANT
0c07  90            2074   2086         SUB     B       ;MINUS EXPONENT = LOOP CTR
0c08  4f            2075   2087         MOV     C,A     ;SAVE IT
0c09  21 59 22      2076   2088 INT4:   LXI     H,FACC+1        ;POINT MSB
0c0c  af            2077   2089         XRA     A       ;CLEAR CY FLAG
0c0d  06 03         2078   2090         MVI     B,3     ;BYTE COUNT
0c0f  7e            2079   2091 INT5:   MOV     A,M     ;LOAD A BYTE
0c10  1f            2080   2092         RAR             ;SHIFT RIGHT
0c11  77            2081   2093         MOV     M,A     ;REPLACE
0c12  23            2082   2094         INX     H       ;POINT NEXT
0c13  05            2083   2095         DCR     B       ;DECR BYTE CTR
0c14  c2 0f 0c      2084   2096         JNZ     INT5    ;LOOP
0c17  0d            2085   2097         DCR     C       ;DECR BIT CTR
0c18  c2 09 0c      2086   2098         JNZ     INT4    ;LOOP
0c1b  21 58 22      2087   2099         LXI     H,FACC  ;POINT SIGN & EXP
0c1e  7e            2088   2100         MOV     A,M     ;LOAD IT
0c1f  e6 80         2089   2101         ANI     80H     ;ISOLATE SIGN
0c21  c6 18         2090   2102         ADI     24      ;PLUS INTEGER
0c23  77            2091   2103         MOV     M,A     ;REPLACE IT
0c24  c3 dd 16      2092   2104         JMP     FNORM   ;GO NORMALIZE & RETURN
                    2093   2105 ;
0c27  =             2094   2106 SQR     EQU     $
                    2095   2107 ;
                    2096   2108 ; COMPUTE SQAURE ROOT OF ARG IN FACC, PUT RESULT IN FACC
                    2097   2109 ;
                    2098   2110 ; USE HERON'S ITERATIVE PROCESS
                    2099   2111 ;
0c27  cd ce 18      2100   2112         CALL    FTEST   ;TEST THE ARGUMENT
0c2a  c8            2101   2113         RZ              ;RETURN IF ZERO
0c2b  fa 07 1c      2102   2114         JM      ZMERR   ;ERROR IF NEGATIVE
0c2e  32 75 22      2103   2115         STA     DEXP    ;SAVE ORIG EXPONENT
0c31  af            2104   2116         XRA     A       ;GET A ZERO
0c32  32 58 22      2105   2117         STA     FACC    ;PUT ARG IN RANGE [.5, 1]
0c35  21 33 22      2106   2118         LXI     H,TEMP2 ;POINT SAVE AREA
0c38  df            2107   2119         RST     3       ;STORE IT
                    2108   2120 ;
                    2109   2121 ; INITIAL APPROXIMATION 0.41730759 + 0.59016206 * MANTISSA
                    2110   2122 ;
0c39  21 b2 1d      2111   2123         LXI     H,SQC1  ;POINT .59016
0c3c  cd 18 17      2112   2124         CALL    FMUL    ;GO MULTIPLY
0c3f  21 b6 1d      2113   2125         LXI     H,SQC2  ;PINT .4173
0c42  cd 37 16      2114   2126         CALL    FADD    ;GO ADD
0c45  21 2f 22      2115   2127         LXI     H,TEMP1 ;POINT SAVE AREA
0c48  df            2116   2128         RST     3       ;GO STORE IT
                    2117   2129 ;
                    2118   2130 ; NEWTON'S METHOD OF ITERATION TO THE APPROXIMATE
                    2119   2131 ; VALUE OF THE SQR OF MANTISSA
                    2120   2132 ;
0c49  cd 64 0c      2121   2133         CALL    SQR1    ;FIRST ITERATION
0c4c  21 2f 22      2122   2134         LXI     H,TEMP1 ;POINT SAVE AREA
0c4f  df            2123   2135         RST     3       ;STORE IT
0c50  cd 64 0c      2124   2136         CALL    SQR1    ;SECOND ITERATION
                    2125   2137 ;
                    2126   2138 ; RESTORE RANGE TO OBTAIN THE FINAL RESULT
                    2127   2139 ;
0c53  3a 75 22      2128   2140         LDA     DEXP    ;GET SAVE EXPONENT
0c56  cd dc 18      2129   2141         CALL    FEXP    ;EXPAND IT
0c59  1f            2130   2142         RAR             ;DIVIDE BY 2
0c5a  32 58 22      2131   2143         STA     FACC    ;STORE IT
0c5d  d0            2132   2144         RNC             ;RETURN IF EXPON EVEN
0c5e  21 ba 1d      2133   2145         LXI     H,SQC3  ;ELSE, POINT SQR(2)
0c61  c3 18 17      2134   2146         JMP     FMUL    ;GO MULTIPLY AND RETURN
                    2135   2147 ;
                    2136   2148 ; THIS ROUTINE PERFORMS ONE NEWTON ITERATION
                    2137   2149 ; TO THE SQUARE ROOT FUNCTION
                    2138   2150 ;
0c64  21 33 22      2139   2151 SQR1:   LXI     H,TEMP2 ;POINT MANTISSA
0c67  ef            2140   2152         RST     5       ;LOAD IT
0c68  21 2f 22      2141   2153         LXI     H,TEMP1 ;POINT PREV GUESS
0c6b  cd 9b 17      2142   2154         CALL    FDIV    ;FORM MANT/TEMP1
0c6e  21 2f 22      2143   2155         LXI     H,TEMP1 ;POINT PREV
0c71  cd 37 16      2144   2156         CALL    FADD    ;FORM TEMP1 + MANT/TEMP1
0c74  d6 01         2145   2157         SUI     1       ;DIVIDE BY 2
0c76  32 58 22      2146   2158         STA     FACC    ;FORM (TEMP1 + MANT/TEMP1)/2
0c79  c9            2147   2159         RET             ;RETURN
                    2148   2160 ;
0c7a  =             2149   2161 NEG     EQU     $
                    2150   2162 ;
                    2151   2163 ;
                    2152   2164 ; REVERSES THE SIGN OF THE FLOATING ACC
                    2153   2165 ;
                    2154   2166 ;
0c7a  cd ce 18      2155   2167         CALL    FTEST   ;GET STATUS OF FACC
0c7d  c8            2156   2168         RZ              ;RETURN IF ZERO
0c7e  ee 80         2157   2169         XRI     80H     ;REVERSE SIGN
0c80  32 58 22      2158   2170         STA     FACC    ;RESTORE EXPONENT
0c83  c9            2159   2171         RET             ;CONTINUE EVALUATION
                    2160   2172 ;
0c84  =             2161   2173 RND     EQU     $
                    2162   2174 ;
                    2163   2175 ;
                    2164   2176 ; PSEUDO RANDOM NUMBER GENERATOR
                    2165   2177 ;
                    2166   2178 ;
0c84  21 47 22      2167   2179         LXI     H,TEMP7 ;SAVE ARG
0c87  df            2168   2180         RST     3
0c88  06 04         2169   2181         MVI     B,4     ;LOOP CTR
0c8a  21 58 22      2170   2182         LXI     H,FACC  ;POINT FLOAT ACCUM
0c8d  cd 5e 1c      2171   2183         CALL    ZEROM   ;GO ZERO THE FACC
0c90  0e 03         2172   2184         MVI     C,3     ;OUTTER LOP CTR
0c92  21 59 22      2173   2185         LXI     H,FACC+1        ;POINT MSB
0c95  e5            2174   2186         PUSH    H       ;SAVE H,L
0c96  21 7c 22      2175   2187 RND1:   LXI     H,RNDZ+1        ;POINT X,Y,Z
0c99  06 06         2176   2188         MVI     B,6     ;LOOP CTR
0c9b  b7            2177   2189         ORA     A       ;TURN OFF CY
0c9c  7e            2178   2190 RND2:   MOV     A,M     ;GET A BYTE
0c9d  17            2179   2191         RAL             ;SHIFT LEFT (MULT BY 2)
0c9e  77            2180   2192         MOV     M,A     ;REPLACE THE BYTE
0c9f  2b            2181   2193         DCX     H       ;POINT NEXT
0ca0  05            2182   2194         DCR     B       ;DECR CTR
0ca1  c2 9c 0c      2183   2195         JNZ     RND2    ;LOOP
0ca4  23            2184   2196         INX     H       ;POINT MSD X,Y,Z
0ca5  11 65 1d      2185   2197         LXI     D,RNDP  ;POINT TO MODULO
0ca8  06 03         2186   2198         MVI     B,3     ;LOOP CTR
0caa  1a            2187   2199 FND3:   LDAX    D       ;GET BYTE OF P,Q,R
0cab  be            2188   2200         CMP     M       ;COMPARE WITH X,Y,Z
0cac  13            2189   2201         INX     D       ;POINT NEXT
0cad  23            2190   2202         INX     H       ;DITTO
0cae  da b9 0c      2191   2203         JC      RND4    ;BRIF P<X
0cb1  c2 c5 0c      2192   2204         JNZ     RND5    ;BRIF P>X
0cb4  1a            2193   2205         LDAX    D       ;GET LOW BYTE
0cb5  be            2194   2206         CMP     M       ;CMPARE
0cb6  d2 c5 0c      2195   2207         JNC     RND5    ;BRIF P>=X
0cb9  eb            2196   2208 RND4:   XCHG            ;FLIP D,E TO H,L
0cba  1a            2197   2209         LDAX    D       ;GET LOW X BYTE
0cbb  96            2198   2210         SUB     M       ;SUBTRACT LOW P BYTE
0cbc  12            2199   2211         STAX    D       ;STORE IT
0cbd  1b            2200   2212         DCX     D       ;POINT HIGH
0cbe  2b            2201   2213         DCX     H       ;DITTO
0cbf  1a            2202   2214         LDAX    D       ;GET HIGH X BYTE
0cc0  9e            2203   2215         SBB     M       ;SUB HIGH P BYTE
0cc1  12            2204   2216         STAX    D       ;STORE IT
0cc2  13            2205   2217         INX     D       ;POINT LOW
0cc3  23            2206   2218         INX     H       ;DITTO
0cc4  eb            2207   2219         XCHG            ;RESTORE ADDRS
0cc5  13            2208   2220 RND5:   INX     D       ;POINT NEXT
0cc6  23            2209   2221         INX     H       ;DITTO
0cc7  05            2210   2222         DCR     B       ;DECR CTR
0cc8  c2 aa 0c      2211   2223         JNZ     FND3    ;LOOP
0ccb  06 03         2212   2224         MVI     B,3     ;LOOP CTR
0ccd  11 7e 22      2213   2225 RND6:   LXI     D,RNDS+1        ;POINT LOW S
0cd0  1a            2214   2226         LDAX    D       ;GET LOW S
0cd1  86            2215   2227         ADD     M       ;ADD LOW X,Y,Z
0cd2  12            2216   2228         STAX    D       ;PUT S
0cd3  1b            2217   2229         DCX     D       ;POINT HIGH
0cd4  2b            2218   2230         DCX     H       ;DITTO
0cd5  1a            2219   2231         LDAX    D       ;GET HIGH S
0cd6  8e            2220   2232         ADC     M       ;ADD HIGH X,Y,Z
0cd7  e6 3f         2221   2233         ANI     3FH     ;TURN OFF HIGH BITS
0cd9  12            2222   2234         STAX    D       ;STORE IT
0cda  2b            2223   2235         DCX     H       ;POINT NEXT X,Y,Z
0cdb  05            2224   2236         DCR     B       ;DECR CTR
0cdc  c2 cd 0c      2225   2237         JNZ     RND6    ;LOOP
0cdf  3e 08         2226   2238         MVI     A,8     ;CONSTANT
0ce1  91            2227   2239         SUB     C       ;LESS CTR
0ce2  1f            2228   2240         RAR             ;DIVIDE BY TWO
0ce3  e1            2229   2241         POP     H       ;GET H,L ADDR
0ce4  3a 7e 22      2230   2242         LDA     RNDS+1  ;GET LSB OF S
0ce7  77            2231   2243         MOV     M,A     ;STORE IT
0ce8  23            2232   2244         INX     H       ;POINT NEXT
0ce9  e5            2233   2245         PUSH    H       ;SAVE H,L
0cea  0d            2234   2246         DCR     C       ;DECR CTR
0ceb  c2 96 0c      2235   2247         JNZ     RND1    ;LOOP
0cee  e1            2236   2248         POP     H       ;RESTORE SP PTR
0cef  3a 87 22      2237   2249         LDA     RNDSW   ;GET SWITCH
0cf2  b7            2238   2250         ORA     A       ;TEST IT
0cf3  ca 01 0d      2239   2251         JZ      RND7    ;BRIF NO RANDOMIZE
0cf6  11 7f 22      2240   2252         LXI     D,TRNDX ;POINT SAVED VALUES
0cf9  21 77 22      2241   2253         LXI     H,RNDX  ;POINT NEXT VALUES
0cfc  06 08         2242   2254         MVI     B,8     ;LOOP CTR
0cfe  cd 58 1c      2243   2255         CALL    COPYH   ;GO COPY
0d01  cd dd 16      2244   2256 RND7:   CALL    FNORM
0d04  21 47 22      2245   2257         LXI     H,TEMP7 ;MULTIPLY BY RANGE
0d07  c3 18 17      2246   2258         JMP     FMUL
                    2247   2259 ;
0d0a  =             2248   2260 INP     EQU     $
                    2249   2261 ;
                    2250   2262 ;
                    2251   2263 ; INPUT A BYTE FROM THE DEVICE IN FACC
                    2252   2264 ;
                    2253   2265 ; PUT THE RESULT IN THE FACC
                    2254   2266 ;
0d0a  cd 66 1c      2255   2267         CALL    FBIN    ;CONVERT FACC TO BINARY
0d0d  21 20 22      2256   2268         LXI     H,OUTA  ;POINT INSTR BUFFER
0d10  36 db         2257   2269         MVI     M,0DBH  ;IN INSTR
0d12  23            2258   2270         INX     H       ;POINT NEXT
0d13  77            2259   2271         MOV     M,A     ;MOVE ADDR
0d14  23            2260   2272         INX     H       ;POINT NEXT
0d15  36 c9         2261   2273         MVI     M,0C9H  ;RET INSTR
0d17  cd 20 22      2262   2274         CALL    OUTA    ;GO INPUT A BYTE
0d1a  5f            2263   2275 FDEC:   MOV     E,A     ;MOVE BYTE TO LO D,E
0d1b  16 00         2264   2276         MVI     D,0     ;ZERO HI D,E
0d1d  c3 89 1c      2265   2277         JMP     BINFL   ;GO CONVERT TO DEC & RET
                    2266   2278 ;
0d20  =             2267   2279 POS     EQU     $
                    2268   2280 ;
                    2269   2281 ;
                    2270   2282 ; RETURNS THE CURRENT POSITION OF THE TTY CURSOR
                    2271   2283 ;
                    2272   2284 ;
0d20  3a 76 22      2273   2285         LDA     COLUM   ;GET POSITION
0d23  c3 1a 0d      2274   2286         JMP     FDEC    ;CONVERT TO FLOAT AND RETURN
                    2275   2287 ;
0d26  =             2276   2288 CONCA   EQU     $
                    2277   2289 ;
                    2278   2290 ;
                    2279   2291 ; CONCATONATE TWO STRING TOGETHER
                    2280   2292 ; COMBINE LENGTH <= 255
                    2281   2293 ;
0d26  d1            2282   2294         POP     D       ;ADJUST STACK
0d27  11 20 21      2283   2295         LXI     D,STRIN ;POINT STRING BUFFER
0d2a  1a            2284   2296         LDAX    D       ;GET CURRENT LENGTH
0d2b  4f            2285   2297         MOV     C,A     ;STORE IT
0d2c  06 00         2286   2298         MVI     B,0     ;CLEAR HI
0d2e  eb            2287   2299         XCHG            ;FLIP FLOP
0d2f  09            2288   2300         DAD     B       ;COMPUTE NEXT
0d30  eb            2289   2301         XCHG            ;FLIP BACK
0d31  86            2290   2302         ADD     M       ;COMPUTE COMBINE LENGTH
0d32  46            2291   2303         MOV     B,M     ;SAVE LEN2
0d33  d2 3c 0d      2292   2304         JNC     CONC2   ;BRIF NO OVFLW
0d36  3e ff         2293   2305         MVI     A,255   ;MAX LEN
0d38  91            2294   2306         SUB     C       ;MINUS 1ST PART
0d39  47            2295   2307         MOV     B,A     ;SAVE LEN
0d3a  3e ff         2296   2308         MVI     A,255   ;UPDATED LENGTH
0d3c  32 20 21      2297   2309 CONC2:  STA     STRIN   ;STORE IT
0d3f  78            2298   2310         MOV     A,B     ;GET LEN TO MOVE
0d40  b7            2299   2311         ORA     A       ;TEST IT
0d41  ca 4c 0d      2300   2312         JZ      CONC4   ;BRIF NULL
0d44  23            2301   2313 CONC3:  INX     H       ;POINT NEXT
0d45  13            2302   2314         INX     D       ;DITTO
0d46  7e            2303   2315         MOV     A,M     ;GET NEXT CHAR
0d47  12            2304   2316         STAX    D       ;PUT IT
0d48  05            2305   2317         DCR     B       ;DECR COUNT
0d49  c2 44 0d      2306   2318         JNZ     CONC3   ;LOOP
0d4c  e1            2307   2319 CONC4:  POP     H       ;GET H,L
0d4d  2b            2308   2320         DCX     H       ;POINT BACK
0d4e  3a 20 21      2309   2321         LDA     STRIN   ;GET LEN
0d51  1f            2310   2322         RAR             ;DIVIDE BY TWO
0d52  3c            2311   2323         INR     A       ;PLUS ONE
0d53  eb            2312   2324         XCHG            ;SAVE H,L
0d54  2a 69 22      2313   2325         LHLD    SPCTR   ;GET CTR
0d57  4f            2314   2326         MOV     C,A     ;SAVE CTR
0d58  06 00         2315   2327         MVI     B,0     ;ZERO HI BYTE
0d5a  09            2316   2328         DAD     B       ;ADD LEN THIS STRING
0d5b  22 69 22      2317   2329         SHLD    SPCTR   ;SAVE CTR
0d5e  c1            2318   2330         POP     B
0d5f  21 00 00      2319   2331         LXI     H,0     ;GET ADDR ZERO
0d62  e5            2320   2332 CONC5:  PUSH    H       ;2 BYTE WORD
0d63  3d            2321   2333         DCR     A       ;DECR CTR
0d64  c2 62 0d      2322   2334         JNZ     CONC5   ;CONTINUE
0d67  39            2323   2335         DAD     SP      ;GET ADDRESS IN H,L
0d68  eb            2324   2336         XCHG            ;PUT STACK PTR IN D,E
0d69  72            2325   2337         MOV     M,D     ;MOVE HI ADDR
0d6a  23            2326   2338         INX     H       ;POINT NEXT
0d6b  73            2327   2339         MOV     M,E     ;MOVE LO ADDR
0d6c  23            2328   2340         INX     H       ;POINT NEXT
0d6d  36 e7         2329   2341         MVI     M,0E7H  ;TYPE=STRING
0d6f  e5            2330   2342         PUSH    H       ;SAVE H,L
0d70  21 20 21      2331   2343         LXI     H,STRIN ;GET TEMP STR
0d73  7e            2332   2344         MOV     A,M     ;GET LENGTH
0d74  3c            2333   2345         INR     A       ;PLUS ONE
0d75  4f            2334   2346         MOV     C,A     ;SAVE IT
0d76  7e            2335   2347 CONC6:  MOV     A,M     ;GET A BYTE
0d77  12            2336   2348         STAX    D       ;PUT IT DOWN
0d78  13            2337   2349         INX     D       ;POINT NEXT
0d79  23            2338   2350         INX     H       ;DITTO
0d7a  0d            2339   2351         DCR     C       ;SUBT CTR
0d7b  c2 76 0d      2340   2352         JNZ     CONC6   ;LOOP
0d7e  e1            2341   2353         POP     H       ;RESTORE H,L
0d7f  e7            2342   2354         RST     4       ;ADJUST H,L
0d80  f9            2343   2355         DB      -7 AND 0FFH
0d81  3e 04         2344   2356         MVI     A,4     ;DELETE 4 BYTES
0d83  cd e2 1a      2345   2357         CALL    SQUIS   ;GO COMPRESS
0d86  c3 ba 11      2346   2358         JMP     EVAL    ;CONTINUE EVALUATION
                    2347   2359 ;
0d89  =             2348   2360 LENFN   EQU     $
                    2349   2361 ;
                    2350   2362 ; X=LEN(A$)
                    2351   2363 ;
                    2352   2364 ; RETURN THE LENGTH OF THE STRING
                    2353   2365 ;
0d89  3a 20 21      2354   2366         LDA     STRIN   ;GET LEN IN ACC
0d8c  c3 1a 0d      2355   2367         JMP     FDEC    ;GO CONVERT TO DECIMAL & RETURN
                    2356   2368 ;
0d8f  =             2357   2369 CHRFN   EQU     $
                    2358   2370 ;
                    2359   2371 ; A$=CHR$(X)
                    2360   2372 ;
                    2361   2373 ; RETURNS A ONE CHAR STRING HAVING THE ASCII VALUE - X
                    2362   2374 ;
0d8f  cd 66 1c      2363   2375         CALL    FBIN    ;CONVERT FACC TO BINARY
0d92  21 20 21      2364   2376         LXI     H,STRIN ;POINT OUT AREA
0d95  36 01         2365   2377         MVI     M,1     ;LEN=1
0d97  23            2366   2378         INX     H       ;POINT NEXT
0d98  77            2367   2379         MOV     M,A     ;STORE THE CHAR
0d99  c9            2368   2380         RET             ;RETURN
                    2369   2381 ;
0d9a  =             2370   2382 ASCII   EQU     $
                    2371   2383 ;
                    2372   2384 ; X=ASCII(A$)
                    2373   2385 ;
                    2374   2386 ; RETURNS THE ASCII VALUE OF THE FIRST CHAR IN STRING
                    2375   2387 ;
0d9a  21 20 21      2376   2388         LXI     H,STRIN ;POINT STRING
0d9d  7e            2377   2389         MOV     A,M     ;GET LENGTH
0d9e  b7            2378   2390         ORA     A       ;TEST IF > ZERO
0d9f  ca 1a 0d      2379   2391         JZ      FDEC    ;BRIF ZERO & RETURN A ZERO
0da2  23            2380   2392         INX     H       ;POINT 1ST CHAR
0da3  7e            2381   2393         MOV     A,M     ;LOAD IT
0da4  c3 1a 0d      2382   2394         JMP     FDEC    ;GO CONVERT TO DECIMAL & RETURN
                    2383   2395 ;
0da7  =             2384   2396 NUMFN   EQU     $
                    2385   2397 ;
                    2386   2398 ; A$=NUM$(X)
                    2387   2399 ;
                    2388   2400 ; RETURNS A STRING REPRESENTING X AS IT WOULD HAVE
                    2389   2401 ; BEEN PRINTED (INCLUDING TRAILING SPACE)
                    2390   2402 ;
0da7  21 20 21      2391   2403         LXI     H,STRIN ;POINT STRING AREA
0daa  36 00         2392   2404         MVI     M,0     ;INIT COUNT
0dac  23            2393   2405         INX     H       ;SKIP TO 1ST POSITION
0dad  cd f0 14      2394   2406         CALL    FOUT    ;GO CONVERT TO EXTRN DEC
0db0  af            2395   2407         XRA     A       ;GET A ZERO
0db1  47            2396   2408         MOV     B,A     ;INIT CTR
0db2  2b            2397   2409 NUM1:   DCX     H       ;POINT PRIOR
0db3  04            2398   2410         INR     B       ;COUNT IT
0db4  be            2399   2411         CMP     M       ;TEST IF ZERO
0db5  c2 b2 0d      2400   2412         JNZ     NUM1    ;LOOP TILL AT START
0db8  70            2401   2413         MOV     M,B     ;SET LEN CODE
0db9  c9            2402   2414         RET             ;THEN RETURN
                    2403   2415 ;
0dba  =             2404   2416 VAL     EQU     $
                    2405   2417 ;
                    2406   2418 ; X = VAL(A$)
                    2407   2419 ;
                    2408   2420 ; RETURNS THE VALUE OF THE STRING OF NUMERIC CHARACTERS
                    2409   2421 ;
0dba  21 20 21      2410   2422         LXI     H,STRIN ;POINT STRING AREA
0dbd  7e            2411   2423         MOV     A,M     ;GET LEN
0dbe  b7            2412   2424         ORA     A       ;TEST FOR NULL STRING
0dbf  47            2413   2425         MOV     B,A     ;SAVE LEN
0dc0  ca 1a 0d      2414   2426         JZ      FDEC    ;BRIF IS (RETURNS A 0.00)
0dc3  11 20 21      2415   2427         LXI     D,STRIN ;POINT BUFFER
0dc6  23            2416   2428 VAL1:   INX     H       ;POINT NEXT
0dc7  7e            2417   2429         MOV     A,M     ;GET A CHAR
0dc8  fe 20         2418   2430         CPI     ' '     ;TEST IF SPACE
0dca  ca cf 0d      2419   2431         JZ      VAL2    ;BRIF IS
0dcd  12            2420   2432         STAX    D       ;PUT THE CHAR
0dce  13            2421   2433         INX     D       ;INCR ADDR
0dcf  05            2422   2434 VAL2:   DCR     B       ;DECR CTR
0dd0  c2 c6 0d      2423   2435         JNZ     VAL1    ;LOOP
0dd3  af            2424   2436         XRA     A       ;GET A ZERO
0dd4  12            2425   2437         STAX    D       ;PUT IN BUFF
0dd5  21 20 21      2426   2438         LXI     H,STRIN ;POINT START OF BUFFER
0dd8  cd 2e 14      2427   2439         CALL    FIN     ;GO CONVERT
0ddb  7e            2428   2440         MOV     A,M     ;GET NON-NUMERIC
0ddc  b7            2429   2441         ORA     A       ;TEST IT
0ddd  c2 1f 1c      2430   2442         JNZ     CVERR   ;BRIF ERROR
0de0  c9            2431   2443         RET             ;ELSE, RETURN
                    2432   2444 ;
0de1  =             2433   2445 SPACE   EQU     $
                    2434   2446 ;
                    2435   2447 ; A$=SPACE$(X)
                    2436   2448 ;
                    2437   2449 ; CREATES A STRING FO SPACES LENGTH = X
                    2438   2450 ;
0de1  cd 66 1c      2439   2451         CALL    FBIN    ;GET BINARY LENGTH
0de4  21 20 21      2440   2452         LXI     H,STRIN ;POINT TEMP STRING
0de7  77            2441   2453         MOV     M,A     ;PUT LEN
0de8  b7            2442   2454         ORA     A       ;TEST IT
0de9  c8            2443   2455 SPAC1:  RZ              ;RETURN IF ZERO
0dea  23            2444   2456         INX     H       ;ELSE, POINT NEXT
0deb  36 20         2445   2457         MVI     M,' '   ;MOVE 1 SPACE
0ded  3d            2446   2458         DCR     A       ;DECR CTR
0dee  c3 e9 0d      2447   2459         JMP     SPAC1   ;LOOP
                    2448   2460 ;
0df1  =             2449   2461 STRFN   EQU     $
                    2450   2462 ;
                    2451   2463 ; A$=STRING$(X,Y)
                    2452   2464 ;
                    2453   2465 ; CREATES STRING OF LNGTH X CONTAINING REPETITION OF CHR$(Y)
                    2454   2466 ;
0df1  cd 66 1c      2455   2467         CALL    FBIN    ;GET BINARY LENGTH
0df4  32 20 21      2456   2468         STA     STRIN   ;PUT TO STRING
0df7  cd 83 1c      2457   2469         CALL    ARGNU   ;GET NEXT ARGUMENT
0dfa  21 20 21      2458   2470         LXI     H,STRIN ;POINT STRING
0dfd  46            2459   2471         MOV     B,M     ;GET COUNT
0dfe  23            2460   2472 STR11:  INX     H       ;POINT NEXT
0dff  77            2461   2473         MOV     M,A     ;STORE THE CHAR
0e00  05            2462   2474         DCR     B       ;DECR CTR
0e01  c2 fe 0d      2463   2475         JNZ     STR11   ;LOOP
0e04  c9            2464   2476         RET             ;RETURN
                    2465   2477 ;
0e05  =             2466   2478 LEFT    EQU     $
                    2467   2479 ;
                    2468   2480 ; B$=LEFT$(A$,X)
                    2469   2481 ;
                    2470   2482 ; SUBSTRING FROM THE LEFTMOST X CHARACTERS OF A$
                    2471   2483 ;
0e05  cd 83 1c      2472   2484         CALL    ARGNU   ;GET 2ND ARGUMENT
0e08  4f            2473   2485         MOV     C,A     ;SAVE LEN
0e09  06 01         2474   2486         MVI     B,1     ;INIT START
0e0b  c3 21 0e      2475   2487         JMP     MID0    ;CONTINUE
                    2476   2488 ;
0e0e  =             2477   2489 RIGHT   EQU     $
                    2478   2490 ;
                    2479   2491 ; B$=RIGHT$(A$,X)
                    2480   2492 ;
                    2481   2493 ; SUBSTRING STARTING AT POSITION X TO END OF STRING
                    2482   2494 ;
0e0e  cd 83 1c      2483   2495         CALL    ARGNU   ;GET 2ND ARGUMENT
0e11  47            2484   2496         MOV     B,A     ;SAVE START
0e12  0e ff         2485   2497         MVI     C,255   ;MAX LEN
0e14  c3 21 0e      2486   2498         JMP     MID0    ;CONTINUE
                    2487   2499 ;
0e17  =             2488   2500 MIDFN   EQU     $
                    2489   2501 ;
                    2490   2502 ; B$=MID$(A$,X,Y)
                    2491   2503 ;
                    2492   2504 ; SUBSTRING OF THE STRING A$ STARTING WITH CHARACTER @ X
                    2493   2505 ; AND Y CHARACTERS LONG
                    2494   2506 ;
0e17  cd 83 1c      2495   2507         CALL    ARGNU   ;LOAD X
0e1a  47            2496   2508         MOV     B,A     ;SAVE START
0e1b  c5            2497   2509         PUSH    B       ;PUT ON STACK
0e1c  cd 83 1c      2498   2510         CALL    ARGNU   ;GET 3RD ARG
0e1f  c1            2499   2511         POP     B       ;RETREIVE
0e20  4f            2500   2512         MOV     C,A     ;SAVE LEN
0e21  78            2501   2513 MID0:   MOV     A,B     ;LOAD START
0e22  21 20 21      2502   2514         LXI     H,STRIN ;POINT STRING
0e25  be            2503   2515         CMP     M       ;TEST IF X>L
0e26  da 2f 0e      2504   2516         JC      MID1    ;BRIF X>L
0e29  ca 2f 0e      2505   2517         JZ      MID1    ;OR EQUAL
0e2c  36 00         2506   2518         MVI     M,0     ;ELSE, RESULT IS NULL
0e2e  c9            2507   2519         RET             ;RETURN
0e2f  81            2508   2520 MID1:   ADD     C       ;COMPUTE END POSITION
0e30  da 3c 0e      2509   2521         JC      MID2    ;BRIF OVERFLOW
0e33  de 01         2510   2522         SBI     1       ;COMPUTE X+Y-1
0e35  da 3c 0e      2511   2523         JC      MID2    ;BRIF OVERFLOW
0e38  be            2512   2524         CMP     M       ;COMPARE TO EXISTING LEN
0e39  da 40 0e      2513   2525         JC      MID3    ;BRIF X+Y-1<LEN(A$)
0e3c  7e            2514   2526 MID2:   MOV     A,M     ;ELSE GET ORIG LEN
0e3d  90            2515   2527         SUB     B       ;MINUS X
0e3e  3c            2516   2528         INR     A       ;PLUS ONE
0e3f  4f            2517   2529         MOV     C,A     ;SAVE (REPLACE Y)
0e40  71            2518   2530 MID3:   MOV     M,C     ;PUT NEW LEN
0e41  58            2519   2531         MOV     E,B     ;PUT START IN LO
0e42  16 00         2520   2532         MVI     D,0     ;ZERO IN HI
0e44  19            2521   2533         DAD     D       ;COMPUTE START
0e45  11 20 21      2522   2534         LXI     D,STRIN ;GET BEGIN
0e48  7e            2523   2535 MID4:   MOV     A,M     ;GET A CHAR
0e49  13            2524   2536         INX     D       ;POINT NEXT
0e4a  23            2525   2537         INX     H       ;DITTO
0e4b  12            2526   2538         STAX    D       ;PUT DOWN
0e4c  0d            2527   2539         DCR     C       ;DECR CTR
0e4d  c2 48 0e      2528   2540         JNZ     MID4    ;LOOP
0e50  c9            2529   2541         RET             ;THEN RETURN
                    2530   2542 ;
0e51  =             2531   2543 INSTR   EQU     $
                    2532   2544 ;
                    2533   2545 ; X = INSTR(Y,A$,B$)
                    2534   2546 ;
                    2535   2547 ; SEARCH FOR SUBSTRING B$ IN STRING A$ STARTING AT POS Y.
                    2536   2548 ; RETURN 0 IF B$ IS NOT IN A$
                    2537   2549 ; RETURN 1 IF B$ IS NULL
                    2538   2550 ; ELSE RETURN THE CHARACTER POSITION
                    2539   2551 ;
0e51  cd 83 1c      2540   2552         CALL    ARGNU   ;GET A$
0e54  21 20 21      2541   2553         LXI     H,STRIN ;POINT A$
0e57  b7            2542   2554         ORA     A       ;TEST Y
0e58  c2 60 0e      2543   2555         JNZ     INST2   ;BRIF Y NOT ZERO
0e5b  36 00         2544   2556 INST1:  MVI     M,0     ;ELSE A$ IS NULL
0e5d  c3 67 0e      2545   2557         JMP     INST3   ;GO AROUND
0e60  be            2546   2558 INST2:  CMP     M       ;TEST Y TO LEN(A$)
0e61  ca 67 0e      2547   2559         JZ      INST3   ;BRIF EQUAL
0e64  d2 5b 0e      2548   2560         JNC     INST1   ;BRIF Y > LEN(A$)
0e67  4f            2549   2561 INST3:  MOV     C,A     ;SAVE Y
0e68  06 00         2550   2562         MVI     B,0     ;ZERO HI INCR
0e6a  7e            2551   2563         MOV     A,M     ;GET LEN(A$)
0e6b  91            2552   2564         SUB     C       ;MINUS Y
0e6c  3c            2553   2565         INR     A       ;PLUS ONE
0e6d  09            2554   2566         DAD     B       ;COMPUTE START ADDR
0e6e  47            2555   2567         MOV     B,A     ;# CHARS REMAIN IN A$
0e6f  e5            2556   2568         PUSH    H       ;SAVE ADDR
0e70  2a 52 22      2557   2569         LHLD    ADDR1   ;GET ADDR OF ARG
0e73  23            2558   2570         INX     H       ;POINT NEXT
0e74  56            2559   2571         MOV     D,M     ;GET HI ADDR
0e75  23            2560   2572         INX     H       ;POINT NEXT
0e76  5e            2561   2573         MOV     E,M     ;GET LO ADDR
0e77  23            2562   2574         INX     H       ;POINT NEXT
0e78  22 52 22      2563   2575         SHLD    ADDR1   ;UPDATED PTR
0e7b  e1            2564   2576         POP     H       ;RESTORE ADDR
0e7c  1a            2565   2577         LDAX    D       ;GET LEN(B$)
0e7d  b7            2566   2578         ORA     A       ;TEST IF NULL
0e7e  c2 87 0e      2567   2579         JNZ     INST6   ;BRIF NOT
0e81  0e 01         2568   2580         MVI     C,1     ;SET POSIT = 1
0e83  79            2569   2581 INST5:  MOV     A,C     ;GET POSIT
0e84  c3 1a 0d      2570   2582         JMP     FDEC    ;CONVERT TO DECIMAL & RETURN
0e87  eb            2571   2583 INST6:  XCHG            ;FLIP/FLOP
0e88  78            2572   2584         MOV     A,B     ;GET LEN OF A$
0e89  be            2573   2585         CMP     M       ;COMPARE TO LEN B$
0e8a  da ac 0e      2574   2586         JC      INSTA   ;BRIF LEN(B$)< LEN(REM A$)
0e8d  c5            2575   2587         PUSH    B       ;SAVE CTR, POSIT
0e8e  d5            2576   2588         PUSH    D       ;SAVE ADDR A$
0e8f  e5            2577   2589         PUSH    H       ;SAVE ADDR B$
0e90  4e            2578   2590         MOV     C,M     ;GET LEN B$
0e91  eb            2579   2591         XCHG            ;FLIP/FLOP
0e92  13            2580   2592 INST8:  INX     D       ;POINT NEXT B$
0e93  1a            2581   2593         LDAX    D       ;GET B$ CHAR
0e94  be            2582   2594         CMP     M       ;COMPARE A$ CHAR
0e95  c2 a3 0e      2583   2595         JNZ     INST9   ;BRIF NOT EQUAL
0e98  23            2584   2596         INX     H       ;POINT NEXT A$
0e99  0d            2585   2597         DCR     C       ;DECR CTR (LEN(B$))
0e9a  c2 92 0e      2586   2598         JNZ     INST8   ;LOOP
0e9d  e1            2587   2599         POP     H       ;DUMMY POP
0e9e  e1            2588   2600         POP     H       ;GET DUMMY STACK
0e9f  c1            2589   2601         POP     B       ;GET POSITION
0ea0  c3 83 0e      2590   2602         JMP     INST5   ;WE FOUND A MATCH
0ea3  d1            2591   2603 INST9:  POP     D       ;GET PTR B$
0ea4  e1            2592   2604         POP     H       ;GET PTR A$
0ea5  c1            2593   2605         POP     B       ;GET CTRS, POSIT
0ea6  0c            2594   2606         INR     C       ;UP PTR NUM
0ea7  23            2595   2607         INX     H       ;POINT NEXT A$
0ea8  05            2596   2608         DCR     B       ;DECR B
0ea9  c2 87 0e      2597   2609         JNZ     INST6   ;LOOP
0eac  0e 00         2598   2610 INSTA:  MVI     C,0     ;ELSE B$ NOT IN A$
0eae  c3 83 0e      2599   2611         JMP     INST5   ;RETURN
                    2600   2612 ;
0eb1  =             2601   2613 FN      EQU     $
                    2602   2614 ;
                    2603   2615 ; STMT: DEF FNX(A)=EXPR
                    2604   2616 ;
                    2605   2617 ; NOTE: ENTRY FROM EXPR ANALYZER (RECURSIVE)
                    2606   2618 ;
0eb1  c5            2607   2619         PUSH    B       ;SAVE B,C
0eb2  d5            2608   2620         PUSH    D       ;SAVE D,E
0eb3  e5            2609   2621         PUSH    H       ;SAVE H,L
0eb4  eb            2610   2622         XCHG            ;PUT H,L TO D,E
0eb5  2a 56 22      2611   2623         LHLD    ADDR3   ;GET ADDR
0eb8  e5            2612   2624         PUSH    H       ;SAVE IT
0eb9  eb            2613   2625         XCHG            ;PUT D,E BACK TO H,L
0eba  22 56 22      2614   2626         SHLD    ADDR3   ;UPDATE PTR
0ebd  2a 69 22      2615   2627         LHLD    SPCTR   ;GET SP COUNT
0ec0  e5            2616   2628         PUSH    H       ;SAVE IT
0ec1  3a 68 22      2617   2629         LDA     PARCT   ;GET PAREN COUNT
0ec4  47            2618   2630         MOV     B,A     ;PUT TO B
0ec5  3a 88 22      2619   2631         LDA     FNMOD   ;GET FN MODE
0ec8  4f            2620   2632         MOV     C,A     ;PUT TO C
0ec9  c5            2621   2633         PUSH    B       ;SAVE B,C
0eca  3a 72 20      2622   2634         LDA     DIMSW   ;GET DIM SW
0ecd  f5            2623   2635         PUSH    PSW     ;SAVE IT
0ece  af            2624   2636         XRA     A       ;CLEAR A
0ecf  32 72 20      2625   2637         STA     DIMSW   ;RESET DIM SW
0ed2  2a 6c 22      2626   2638         LHLD    FNARG   ;GET OLD ARG NAME
0ed5  e5            2627   2639         PUSH    H       ;SAVE
0ed6  2a 6e 22      2628   2640         LHLD    FNARG+2 ;GET OLD ARG ADDRESS
0ed9  e5            2629   2641         PUSH    H       ;SAVE
0eda  2a 93 22      2630   2642         LHLD    PROGE   ;GET END OF PROGRAM
0edd  e5            2631   2643         PUSH    H       ;SAVE IT
0ede  2a 50 22      2632   2644         LHLD    EXPRS   ;GET END OF EXPR
0ee1  e5            2633   2645         PUSH    H       ;SAVE IT
0ee2  22 93 22      2634   2646         SHLD    PROGE   ;SAVE NEW 'END' OF PROGRAM
0ee5  3e 01         2635   2647         MVI     A,1     ;GET ON SETTING
0ee7  32 88 22      2636   2648         STA     FNMOD   ;SET IN FUNCTION
0eea  2a 56 22      2637   2649         LHLD    ADDR3   ;POINT TO EXPR
0eed  4e            2638   2650         MOV     C,M     ;GET FN CHAR
0eee  2b            2639   2651         DCX     H       ;POINT BACK
0eef  46            2640   2652         MOV     B,M     ;GET HI NAME
0ef0  21 96 22      2641   2653         LXI     H,BEGPR ;POINT START OF PROGRAM
0ef3  7e            2642   2654 FN2:    MOV     A,M     ;LOAD LEN TO NEXT STMT
0ef4  b7            2643   2655         ORA     A       ;TEST IF AT END
0ef5  ca 0f 1c      2644   2656         JZ      SNERR   ;BRIF FN NOT FOUND
0ef8  e5            2645   2657         PUSH    H       ;SAVE PTR
0ef9  e7            2646   2658         RST     4       ;ADJUST H,L
0efa  03            2647   2659         DB      3
0efb  11 1e 1f      2648   2660         LXI     D,DEFLI ;LITERAL
0efe  d7            2649   2661         RST     2       ;GO COMPARE
0eff  c2 11 0f      2650   2662         JNZ     FN3     ;BRIF NOT EQUAL
0f02  c5            2651   2663         PUSH    B       ;SAVE TEST NAME
0f03  cd c9 1b      2652   2664         CALL    VAR     ;GO GET NAME
0f06  c1            2653   2665         POP     B       ;RESTORE NAME
0f07  7a            2654   2666         MOV     A,D     ;GET HI NAME
0f08  b8            2655   2667         CMP     B       ;COMPARE
0f09  c2 11 0f      2656   2668         JNZ     FN3     ;BRIF NOT EQUAL
0f0c  7b            2657   2669         MOV     A,E     ;GET LO
0f0d  b9            2658   2670         CMP     C       ;COMPARE
0f0e  ca 19 0f      2659   2671         JZ      FN4     ;BRIF EQUAL
0f11  e1            2660   2672 FN3:    POP     H       ;GET OLD PTR
0f12  5e            2661   2673         MOV     E,M     ;GET LO LEN
0f13  16 00         2662   2674         MVI     D,0     ;ZERO HI LEN
0f15  19            2663   2675         DAD     D       ;POINT NEXT STMT
0f16  c3 f3 0e      2664   2676         JMP     FN2     ;LOOP
0f19  d1            2665   2677 FN4:    POP     D       ;ADJUST STACK
0f1a  cf            2666   2678         RST     1       ;SKIP BLANKS
0f1b  fe 28         2667   2679         CPI     '('     ;TEST IF OPEN PAREN
0f1d  c2 0f 1c      2668   2680         JNZ     SNERR   ;BRIF NOT
0f20  23            2669   2681         INX     H       ;SKIP IT
0f21  cd c9 1b      2670   2682         CALL    VAR     ;GO GET VAR NAME
0f24  e5            2671   2683         PUSH    H       ;SAVE HL ADDR
0f25  21 6c 22      2672   2684         LXI     H,FNARG ;POINT DUMMY ARG TBL
0f28  72            2673   2685         MOV     M,D     ;STORE LETTER
0f29  23            2674   2686         INX     H       ;POINT NEXT
0f2a  73            2675   2687         MOV     M,E     ;STORE DIGIT
0f2b  23            2676   2688         INX     H       ;POINT NEXT
0f2c  eb            2677   2689         XCHG            ;PUT H,L TO D,E
0f2d  2a 56 22      2678   2690         LHLD    ADDR3   ;POINT TO EXPR STACK
0f30  23            2679   2691         INX     H       ;POINT CODE
0f31  23            2680   2692         INX     H       ;POINT HI ADR
0f32  7e            2681   2693         MOV     A,M     ;GET HI
0f33  12            2682   2694         STAX    D       ;PUT TO TABLE
0f34  13            2683   2695         INX     D       ;POINT NEXT
0f35  23            2684   2696         INX     H       ;DITTO
0f36  7e            2685   2697         MOV     A,M     ;GET LO ADDR
0f37  12            2686   2698         STAX    D       ;PUT TO TABLE
0f38  e1            2687   2699         POP     H       ;RESTORE PTR TO STMT
0f39  cf            2688   2700         RST     1       ;SKIP BLANKS
0f3a  fe 29         2689   2701         CPI     ')'     ;TEST IF CLOSE PAREN
0f3c  c2 0f 1c      2690   2702         JNZ     SNERR   ;BRIF NOT
0f3f  23            2691   2703         INX     H       ;SKIP IT
0f40  cf            2692   2704         RST     1       ;SKIP BLANKS
0f41  fe 3d         2693   2705         CPI     '='     ;TEST IF EQUAL SIGN
0f43  c2 0f 1c      2694   2706         JNZ     SNERR   ;BRIF NOT
0f46  23            2695   2707         INX     H       ;SKIP IT
0f47  cd 80 0f      2696   2708         CALL    EXPR    ;GO EVAL FUNCTION
0f4a  cd 94 1a      2697   2709         CALL    EOL     ;MUST BE END OF LINE
0f4d  e1            2698   2710         POP     H       ;GET H,L
0f4e  22 50 22      2699   2711         SHLD    EXPRS   ;RESTORE START OF EXPR
0f51  e1            2700   2712         POP     H       ;GET H,L
0f52  22 93 22      2701   2713         SHLD    PROGE   ;RESTORE 'END' OF PROGRAM
0f55  e1            2702   2714         POP     H       ;GET H,L
0f56  22 6e 22      2703   2715         SHLD    FNARG+2 ;STORE ADDR
0f59  e1            2704   2716         POP     H       ;GET H,L
0f5a  22 6c 22      2705   2717         SHLD    FNARG   ;STORE DUMMY ARG
0f5d  f1            2706   2718         POP     PSW     ;GET A,STATUS
0f5e  32 72 20      2707   2719         STA     DIMSW   ;RESTORE DIM SW
0f61  c1            2708   2720         POP     B       ;GET B,C
0f62  79            2709   2721         MOV     A,C     ;LOAD C
0f63  32 88 22      2710   2722         STA     FNMOD   ;RESTORE MOE
0f66  78            2711   2723         MOV     A,B     ;LOAD B
0f67  32 68 22      2712   2724         STA     PARCT   ;RESTORE PAREN COUNT
0f6a  e1            2713   2725         POP     H       ;GET H,L
0f6b  22 69 22      2714   2726         SHLD    SPCTR   ;RESTORE SP COUNTER
0f6e  e1            2715   2727         POP     H       ;GET H,L
0f6f  22 56 22      2716   2728         SHLD    ADDR3   ;RESTORE ADDR OF EVAL
0f72  e1            2717   2729         POP     H       ;GET H,L
0f73  d1            2718   2730         POP     D       ;GET D,E
0f74  2b            2719   2731         DCX     H       ;POINT 2ND BYTE FOLLOWING OP
0f75  22 54 22      2720   2732         SHLD    ADDR2   ;SAVE IT
0f78  e7            2721   2733         RST     4       ;POINT TO ARG TYPE
0f79  05            2722   2734         DB      5
0f7a  22 52 22      2723   2735         SHLD    ADDR1   ;SAVE ADDR
0f7d  c3 07 12      2724   2736         JMP     EV3     ;GO WRAPUP
                    2725   2737 ;PAGE
                    2726   2738 ;
0f80  =             2727   2739 EXPR    EQU     $
                    2728   2740 ;
                    2729   2741 ;
                    2730   2742 ; EVALUATE EXPRESSION ROUTINE
                    2731   2743 ; LEAVE RESULT IN FACC
                    2732   2744 ; RETURN WHEN EXPRESSION ENDS (TYPICALLY AT END OF LINE)
                    2733   2745 ;
                    2734   2746 ;
0f80  af            2735   2747         XRA     A       ;CLEAR REG A
0f81  32 68 22      2736   2748         STA     PARCT   ;SET PAREN CTR
0f84  eb            2737   2749         XCHG            ;SAVE H,L
0f85  21 00 00      2738   2750         LXI     H,0     ;GET A ZERO
0f88  22 69 22      2739   2751         SHLD    SPCTR   ;INIT CTR
0f8b  2a 93 22      2740   2752         LHLD    PROGE   ;POINT END OF PROGRAM AREA
0f8e  23            2741   2753         INX     H       ;POINT ONE MORE
0f8f  36 00         2742   2754         MVI     M,0     ;INIT START OF STACK
0f91  22 50 22      2743   2755         SHLD    EXPRS   ;SAVE IT
0f94  eb            2744   2756         XCHG            ;RESTORE H,L
                    2745   2757 ;
0f95  =             2746   2758 LOOKD   EQU     $       ;LOOK FOR CON, VAR, OR FUNCTION
0f95  cf            2747   2759         RST     1       ;SKIP TO NON-BLANK
0f96  cd 2a 1b      2748   2760         CALL    NUMER   ;GO TEST IF NUMERIC
0f99  c2 af 0f      2749   2761         JNZ     LDALP   ;BRIF NOT
0f9c  cd 2e 14      2750   2762 LDNUM:  CALL    FIN     ;GO CONVERT NUMERIC (PUT TO FACC)
0f9f  44            2751   2763 LDF:    MOV     B,H     ;COPY H,L TO B,C
0fa0  4d            2752   2764         MOV     C,L     ;SAME
0fa1  2a 50 22      2753   2765         LHLD    EXPRS   ;GET ADDR OF EXPR AREA
0fa4  cd 00 1b      2754   2766         CALL    GTEMP   ;GO STORE THE FACC IN TEMP AREA
0fa7  22 50 22      2755   2767         SHLD    EXPRS   ;SAVE UPDATED ADDRESS
0faa  60            2756   2768         MOV     H,B     ;RESTORE H
0fab  69            2757   2769         MOV     L,C     ;RESTORE L
0fac  c3 1d 11      2758   2770         JMP     LOOKO   ;GO GET AN OPERATION CODE
0faf  fe 2e         2759   2771 LDALP:  CPI     '.'     ;SEE IF LEADING DECIMAL POINT
0fb1  ca 9c 0f      2760   2772         JZ      LDNUM   ;BRIF IS
0fb4  cd 21 1b      2761   2773         CALL    ALPHA   ;GO SEE IF ALPHA
0fb7  c2 91 10      2762   2774         JNZ     LDDTN   ;BRIF NOT
0fba  46            2763   2775         MOV     B,M     ;SAVE 1ST CHAR
0fbb  23            2764   2776         INX     H       ;POINT NEXT
0fbc  0e 20         2765   2777         MVI     C,' '   ;DEFAULT FOR 1 CHAR VAR
0fbe  cd 2a 1b      2766   2778         CALL    NUMER   ;GO SEE IF 2ND IS NUMERIC
0fc1  c2 f4 0f      2767   2779         JNZ     LDFN    ;BRIF NOT
0fc4  23            2768   2780         INX     H       ;POINT NEXT
0fc5  4f            2769   2781         MOV     C,A     ;SAVE THE CHAR
0fc6  cf            2770   2782 LDV1:   RST     1       ;GET NEXT CHAR
0fc7  fe 24         2771   2783         CPI     '$'     ;TEST IF STRING
0fc9  f5            2772   2784         PUSH    PSW     ;SAVE STATUS
0fca  c2 d3 0f      2773   2785         JNZ     LDV2    ;BRIF NOT
0fcd  79            2774   2786         MOV     A,C     ;GET LOW CHAR
0fce  f6 80         2775   2787         ORI     80H     ;SET STRING
0fd0  4f            2776   2788         MOV     C,A     ;SAVE IT
0fd1  23            2777   2789         INX     H       ;SKIP $
0fd2  cf            2778   2790         RST     1       ;SKIP SPACES
0fd3  fe 28         2779   2791 LDV2:   CPI     '('     ;TEST IF PAREN
0fd5  ca d7 13      2780   2792         JZ      LDV2A   ;BRIF IS
0fd8  e5            2781   2793         PUSH    H       ;SAVE H,L
0fd9  50            2782   2794         MOV     D,B     ;COPY B,C
0fda  59            2783   2795         MOV     E,C     ;TO D,E
0fdb  cd 34 1b      2784   2796         CALL    SEARC   ;GO GET VAR ADDR IN D,E
0fde  2a 50 22      2785   2797 LDV:    LHLD    EXPRS   ;GET EXPR ADDR
0fe1  cd 19 1b      2786   2798         CALL    SADR    ;GO STORE ADDRESS
0fe4  22 50 22      2787   2799         SHLD    EXPRS   ;SAVE ADDRESS
0fe7  eb            2788   2800         XCHG            ;H,L TO D,E
0fe8  e1            2789   2801         POP     H       ;GET OLD H,L
0fe9  f1            2790   2802         POP     PSW     ;GET STATUS
0fea  c2 1d 11      2791   2803         JNZ     LOOKO   ;BRIF NOT STRING
0fed  eb            2792   2804         XCHG            ;GET OLD H,L
0fee  36 e7         2793   2805         MVI     M,0E7H  ;MARK AS STRING ADDRESS
0ff0  eb            2794   2806         XCHG            ;RESTORE H,L
0ff1  c3 1d 11      2795   2807         JMP     LOOKO   ;GO LOOK FOR OPCODE
0ff4  cd 21 1b      2796   2808 LDFN:   CALL    ALPHA   ;GO SEE IF FUNCTION
0ff7  c2 c6 0f      2797   2809         JNZ     LDV1    ;BRIF IT'S NOT
0ffa  2b            2798   2810 LDFN1:  DCX     H       ;POINT BACK TO 1ST
0ffb  7e            2799   2811         MOV     A,M     ;GET THAT CHAR
0ffc  fe 20         2800   2812         CPI     ' '     ;TEST IF SPACE
0ffe  ca fa 0f      2801   2813         JZ      LDFN1   ;LOOP IF TRUE
1001  e5            2802   2814         PUSH    H       ;SAVE H,L
1002  11 b4 1c      2803   2815         LXI     D,RNDLI ;POINT LITERAL
1005  d7            2804   2816         RST     2       ;GO COMPARE
1006  ca 63 10      2805   2817         JZ      LDRND   ;BRIF FND
1009  e1            2806   2818         POP     H       ;GET H,L
100a  e5            2807   2819         PUSH    H       ;RESAVE
100b  11 21 1f      2808   2820         LXI     D,FNLIT ;POINT LITERAL
100e  d7            2809   2821         RST     2       ;GO SEE IF FN X
100f  ca 3e 10      2810   2822         JZ      FNL     ;BRIF IS
1012  e1            2811   2823         POP     H       ;GET H,L
1013  e5            2812   2824         PUSH    H       ;RESAVE
1014  11 97 1d      2813   2825         LXI     D,PILIT ;POINT LIT
1017  d7            2814   2826         RST     2       ;GO COMPARE
1018  ca 75 10      2815   2827         JZ      LDPI    ;BRIF PI
101b  e1            2816   2828 FUNC0:  POP     H       ;GET H,L
101c  11 98 1c      2817   2829         LXI     D,FUNCT ;POINT FUNCTION TABLE
101f  e5            2818   2830         PUSH    H       ;SAVE POINTER
1020  cd 86 1f      2819   2831         CALL    SEEK1   ;GO SEARCH FUNCTION TABLE
1023  ca 36 10      2820   2832         JZ      FUNC4   ;BRIF FUNCTION NOT FOUND
1026  1a            2821   2833         LDAX    D       ;GET A BYTE LOW
1027  4f            2822   2834         MOV     C,A     ;SAVE IT
1028  13            2823   2835         INX     D       ;POINT NEXT
1029  1a            2824   2836         LDAX    D       ;GET HI BYTE
102a  47            2825   2837         MOV     B,A     ;SAVE IT (B,C = ADDR OF FUNC)
102b  cf            2826   2838         RST     1       ;SKIP BLANKS
102c  fe 28         2827   2839         CPI     '('     ;TEST FOR OPEN PAREN
102e  c2 0f 1c      2828   2840         JNZ     SNERR   ;BRIF MISSING PAREN
1031  13            2829   2841         INX     D       ;POINT TYPE CODE
1032  1a            2830   2842         LDAX    D       ;LOAD IT
1033  c3 7f 10      2831   2843         JMP     LDFNC   ;CONTINUE
1036  e1            2832   2844 FUNC4:  POP     H       ;GET H,L
1037  46            2833   2845         MOV     B,M     ;GET 1ST CHAR
1038  0e 20         2834   2846         MVI     C,' '   ;SPACE 2ND CHAR
103a  23            2835   2847         INX     H       ;POINT TO NEXT
103b  c3 c6 0f      2836   2848         JMP     LDV1    ;BRIF VARIABLE
103e  d1            2837   2849 FNL:    POP     D       ;DUMMY RESET STACK POINTER
103f  cd c9 1b      2838   2850         CALL    VAR     ;GO GET FN NAME
1042  42            2839   2851         MOV     B,D     ;COPY TO B,C
1043  4b            2840   2852         MOV     C,E     ;SAME
1044  eb            2841   2853         XCHG            ;SAVE H,L
1045  2a 50 22      2842   2854         LHLD    EXPRS   ;POINT EXPR STACK
1048  23            2843   2855         INX     H       ;POINT NEXT
1049  70            2844   2856         MOV     M,B     ;MOVE THE LETTER
104a  23            2845   2857         INX     H       ;POINT NEXT
104b  71            2846   2858         MOV     M,C     ;MOVE DIGIT ($??)
104c  23            2847   2859         INX     H       ;POINT NEXT
104d  36 af         2848   2860         MVI     M,0AFH  ;MOVE CODE
104f  79            2849   2861         MOV     A,C     ;GET LO NAME
1050  b7            2850   2862         ORA     A       ;TEST IT
1051  f2 56 10      2851   2863         JP      FNL3    ;BRIF NOT STRING
1054  36 cf         2852   2864         MVI     M,0CFH  ;MOVE CODE
1056  22 50 22      2853   2865 FNL3:   SHLD    EXPRS   ;SAVE POINTER
1059  eb            2854   2866         XCHG            ;GET H,L
105a  cf            2855   2867         RST     1       ;GET NEXT CHAR
105b  fe 28         2856   2868         CPI     '('     ;TEST IF OPEN PAREN
105d  c2 0f 1c      2857   2869         JNZ     SNERR   ;BRIF NOT
1060  c3 95 0f      2858   2870         JMP     LOOKD   ;CONTINUE
1063  fe 28         2859   2871 LDRND:  CPI     '('     ;TEST IF RND(X)
1065  ca 1b 10      2860   2872         JZ      FUNC0   ;BRIF IS
1068  e5            2861   2873         PUSH    H       ;ELSE, SAVE H,L
1069  21 ea 1d      2862   2874         LXI     H,ONE   ;USE RANGE (0,1)
106c  ef            2863   2875         RST     5       ;LOAD FACC
106d  cd 84 0c      2864   2876         CALL    RND     ;GO GET RANDOM NUMBER
1070  e1            2865   2877         POP     H       ;RESTORE H,L
1071  d1            2866   2878         POP     D       ;RESTORE STACK POINTER
1072  c3 9f 0f      2867   2879         JMP     LDF     ;ACT AS IF CONSTANT
1075  3c            2868   2880 LDPI:   INR     A       ;SET NON ZERO
1076  d1            2869   2881         POP     D       ;DUMMY STACK POP
1077  f5            2870   2882         PUSH    PSW     ;SAVE STATUS
1078  e5            2871   2883         PUSH    H       ;SAVE H,L
1079  11 a2 1d      2872   2884         LXI     D,PI    ;GET ADDRESS OF 3.1415
107c  c3 de 0f      2873   2885         JMP     LDV     ;GO ACT LIKE VARIABLE
107f  d1            2874   2886 LDFNC:  POP     D       ;POP THE STACK
1080  eb            2875   2887         XCHG            ;FLIP/FLOP
1081  2a 50 22      2876   2888         LHLD    EXPRS   ;GET ADDR
1084  23            2877   2889         INX     H       ;POINT NEXT
1085  70            2878   2890         MOV     M,B     ;HIGH ADDR
1086  23            2879   2891         INX     H       ;POINT NEXT
1087  71            2880   2892         MOV     M,C     ;LOW ADDR
1088  23            2881   2893         INX     H       ;POINT NEXT
1089  77            2882   2894         MOV     M,A     ;CODE
108a  22 50 22      2883   2895         SHLD    EXPRS   ;SAVE ADDR
108d  eb            2884   2896         XCHG            ;RESTORE H,L
108e  c3 95 0f      2885   2897         JMP     LOOKD   ;NEXT MUST BE DATA TOO
1091  fe 2d         2886   2898 LDDTN:  CPI     '-'     ;TEST IF UNARY MINUS
1093  c2 a5 10      2887   2899         JNZ     LDDTP   ;BRIF NOT
1096  eb            2888   2900         XCHG            ;SAVE H,L
1097  2a 50 22      2889   2901         LHLD    EXPRS   ;GET EXPR END
109a  23            2890   2902         INX     H       ;POINT ONE MORE
109b  36 61         2891   2903         MVI     M,61H   ;CODE FOR NEG
109d  22 50 22      2892   2904         SHLD    EXPRS   ;RESTORE PTR
10a0  eb            2893   2905         XCHG            ;RESTORE H,L
10a1  23            2894   2906 SKPP:   INX     H       ;POINT PAST THIS BYTE
10a2  c3 95 0f      2895   2907         JMP     LOOKD   ;NEXT MUST BE DATA
10a5  fe 2b         2896   2908 LDDTP:  CPI     '+'     ;TEST IF UNARY PLUS
10a7  ca a1 10      2897   2909         JZ      SKPP    ;IGNORE IF IS
10aa  fe 28         2898   2910         CPI     '('     ;ELSE, TEST IF OPEN PAREN
10ac  ca 0b 11      2899   2911         JZ      CERCE   ;BRIF IS
10af  fe 27         2900   2912         CPI     27H     ;TEST IF LITERAL (SINGLE QUOTE)
10b1  ca b9 10      2901   2913         JZ      LITST   ;BRIF IS
10b4  fe 22         2902   2914         CPI     '"'     ;TEST IF LITERAL
10b6  c2 0f 1c      2903   2915         JNZ     SNERR   ;BRIF NOT CON, FUNCTION, OR VAR
10b9  4f            2904   2916 LITST:  MOV     C,A     ;SAVE DELIMITER
10ba  11 20 21      2905   2917         LXI     D,STRIN ;POINT BUFFER
10bd  06 ff         2906   2918         MVI     B,0FFH  ;INIT CTR
10bf  23            2907   2919 LIT1:   INX     H       ;POINT NEXT
10c0  7e            2908   2920         MOV     A,M     ;LOAD NEXT
10c1  13            2909   2921         INX     D       ;POINT NEXT
10c2  12            2910   2922         STAX    D       ;STORE IT
10c3  b7            2911   2923         ORA     A       ;TEST IF END
10c4  ca 0f 1c      2912   2924         JZ      SNERR   ;BRIF ERROR
10c7  04            2913   2925         INR     B       ;COUNT IT
10c8  b9            2914   2926         CMP     C       ;TEST IF END OF STRING
10c9  c2 bf 10      2915   2927         JNZ     LIT1    ;BRIF NOT
10cc  23            2916   2928         INX     H       ;POINT NEXT
10cd  11 20 21      2917   2929         LXI     D,STRIN ;POINT BEGIN
10d0  78            2918   2930         MOV     A,B     ;GET COUNT
10d1  12            2919   2931         STAX    D       ;PUT COUNT
10d2  1f            2920   2932         RAR             ;DIVIDE BY TWO
10d3  3c            2921   2933         INR     A       ;PLUS ONE
10d4  4f            2922   2934         MOV     C,A     ;SAVE IT
10d5  06 00         2923   2935         MVI     B,0     ;ZERO HIGH
10d7  e5            2924   2936         PUSH    H       ;SAVE PTR
10d8  2a 69 22      2925   2937         LHLD    SPCTR   ;GET CTR
10db  09            2926   2938         DAD     B       ;PLUS OLD
10dc  22 69 22      2927   2939         SHLD    SPCTR   ;UPDATE IT
10df  d1            2928   2940         POP     D       ;GET OLD H,L
10e0  21 00 00      2929   2941         LXI     H,0     ;GET A ZERO
10e3  e5            2930   2942 LIT2:   PUSH    H       ;GET 2 WORK BYTES
10e4  0d            2931   2943         DCR     C       ;SUB 1 FROM COUNT
10e5  c2 e3 10      2932   2944         JNZ     LIT2    ;CONTINUE
10e8  39            2933   2945         DAD     SP      ;GET ADDR OF STACK
10e9  d5            2934   2946         PUSH    D       ;SAVE PTR TO STMT
10ea  eb            2935   2947         XCHG            ;SAVE H,L IN D,E
10eb  2a 50 22      2936   2948         LHLD    EXPRS   ;GET START OF EXPR
10ee  23            2937   2949         INX     H       ;PLUS ONE
10ef  72            2938   2950         MOV     M,D     ;HI BYTE
10f0  23            2939   2951         INX     H       ;POINT NEXT
10f1  73            2940   2952         MOV     M,E     ;LO BYTE
10f2  23            2941   2953         INX     H       ;POINT NEXT
10f3  36 e7         2942   2954         MVI     M,0E7H  ;TYPE CODE
10f5  22 50 22      2943   2955         SHLD    EXPRS   ;SAVE ADDR
10f8  eb            2944   2956         XCHG            ;D,E BACK TO H,L
10f9  11 20 21      2945   2957         LXI     D,STRIN ;POINT STRING AREA
10fc  1a            2946   2958         LDAX    D       ;GET COUNT
10fd  3c            2947   2959         INR     A       ;ADD ONE TO COUNT
10fe  47            2948   2960         MOV     B,A     ;SAVE CTR
10ff  1a            2949   2961 LIT3:   LDAX    D       ;GET A BYTE
1100  77            2950   2962         MOV     M,A     ;STORE IT
1101  23            2951   2963         INX     H       ;POINT NEXT
1102  13            2952   2964         INX     D       ;DITTO
1103  05            2953   2965         DCR     B       ;DECR CTR
1104  c2 ff 10      2954   2966         JNZ     LIT3    ;LOOP
1107  e1            2955   2967         POP     H       ;RESTORE H,L
1108  c3 1d 11      2956   2968         JMP     LOOKO   ;NEXT IS OP
110b  eb            2957   2969 CERCE:  XCHG            ;SAVE H,L
110c  21 68 22      2958   2970         LXI     H,PARCT ;POINT PAREN COUNT
110f  34            2959   2971         INR     M       ;ADD 1
1110  2a 50 22      2960   2972         LHLD    EXPRS   ;GET ADDR
1113  23            2961   2973         INX     H       ;POINT NEXT
1114  36 05         2962   2974         MVI     M,5     ;PUT CODE
1116  22 50 22      2963   2975         SHLD    EXPRS   ;SAVE ADDR
1119  eb            2964   2976         XCHG            ;RESTORE H,L
111a  c3 a1 10      2965   2977         JMP     SKPP    ;GO SKIP CHAR
111d  cf            2966   2978 LOOKO:  RST     1       ;SKIP BLANKS
111e  fe 2b         2967   2979         CPI     '+'     ;TEST IF PLUS
1120  06 21         2968   2980         MVI     B,21H   ;CODE
1122  ca 58 11      2969   2981         JZ      OP1     ;BRIF IS
1125  fe 2d         2970   2982         CPI     '-'     ;TEST IF MINUS
1127  06 25         2971   2983         MVI     B,25H
1129  ca 58 11      2972   2984         JZ      OP1     ;BRIF IS
112c  fe 2f         2973   2985         CPI     '/'     ;TEST IF DIVIDE
112e  06 45         2974   2986         MVI     B,45H   ;CODE
1130  ca 58 11      2975   2987         JZ      OP1     ;BRIF IS
                    2976   2988 ;       CPI     '^'     ;TEST IF EXPON
1133  fe 5e         2977   2989         CPI     UPARR   ;*UM* FIX FOR MACRO-80
1135  06 81         2978   2990         MVI     B,81H   ;CODE
1137  ca 58 11      2979   2991         JZ      OP1     ;BRIF IS
113a  fe 29         2980   2992         CPI     ')'     ;TEST IF CLOSE PAREN
113c  ca ac 11      2981   2993         JZ      OP3     ;BRIF IS
113f  fe 2c         2982   2994         CPI     ','     ;TEST IF COMMA
1141  ca 97 11      2983   2995         JZ      OP2     ;BRIF IS
1144  fe 2a         2984   2996         CPI     '*'     ;TEST IF MULTIPLY
1146  06 41         2985   2997         MVI     B,41H   ;CODE
1148  ca 58 11      2986   2998         JZ      OP1     ;BRIF IS
                    2987   2999 ; ELSE MUST BE END OF EXPRESSION
114b  3a 68 22      2988   3000 ENDXP:  LDA     PARCT   ;GET OPEN PAREN COUNT
114e  b7            2989   3001         ORA     A       ;TEST IT
114f  c2 0f 1c      2990   3002         JNZ     SNERR   ;BRIF # OF ('S NOT = # OF )'S
1152  22 56 22      2991   3003         SHLD    ADDR3   ;SAVE ADDR OF STMT
1155  c3 ba 11      2992   3004         JMP     EVAL    ;GO EVALUATE
1158  e5            2993   3005 OP1:    PUSH    H       ;SAVE PLACE IN ASCII EXPRESSION
1159  11 05 01      2994   3006         LXI     D,0105H ;D=BYTE COUNT, E=CODE FOR "("
115c  2a 50 22      2995   3007         LHLD    EXPRS   ;POINT TO LAST BYTE
115f  78            2996   3008         MOV     A,B     ;B&E3 -> C
1160  e6 e3         2997   3009         ANI     0E3H
1162  4f            2998   3010         MOV     C,A
                    2999   3011 ; INSERT ( AND EVALUATE IF PRECEDENCE REDUCTION,
                    3000   3012 ;   ELSE INNSERT OP CODE
1163  7e            3001   3013 OPLP1:  MOV     A,M     ;GET TYPE CODE FROM EXPRESSION
1164  f5            3002   3014         PUSH    PSW     ;SAVE
1165  e6 03         3003   3015         ANI     3       ;GET LENGTH
1167  14            3004   3016 OPLP2:  INR     D       ;BUMP BYTE COUNT
1168  2b            3005   3017         DCX     H       ;EXPRESSION POINTER
1169  3d            3006   3018         DCR     A       ;LOOP MOVES TO NEXT ELEMENT
116a  c2 67 11      3007   3019         JNZ     OPLP2
116d  f1            3008   3020         POP     PSW     ;RESTORE TYPE CODE
116e  e6 e3         3009   3021         ANI     0E3H    ;MASK FOR VARIABLE
1170  fe e3         3010   3022         CPI     0E3H    ;WE SKIP OVER VARIABLES
1172  ca 63 11      3011   3023         JZ      OPLP1   ;BR IF TYPE = E3 OR E7
1175  b9            3012   3024         CMP     C       ;PRECEDENCE REDUCTION?
1176  d2 81 11      3013   3025         JNC     INS     ;IF NC, YES, INSERT 05
1179  2a 50 22      3014   3026         LHLD    EXPRS   ;NO, INSERT OPCODE BEFORE VAR AT END
117c  e7            3015   3027         RST     4       ;SKIP OVER VARIABLE
117d  fd            3016   3028         DB      -3 AND 0FFH
117e  16 04         3017   3029         MVI     D,4     ;BYTE COUNT
1180  58            3018   3030         MOV     E,B     ;INSERT THIS OP CODE
1181  43            3019   3031 INS:    MOV     B,E     ;SAVE FOR BRANCH AFTER INSERTION
1182  23            3020   3032 INS1:   INX     H       ;BUMP POINTER
1183  4e            3021   3033         MOV     C,M     ;PICK UP BYTE
1184  70            3022   3034         MOV     M,B     ;PUT DOWN REPLACEMENT
1185  41            3023   3035         MOV     B,C     ;SAVE FOR NEXT LOOP
1186  15            3024   3036         DCR     D       ;DONE?
1187  c2 82 11      3025   3037         JNZ     INS1    ;IF NZ, NO
118a  22 50 22      3026   3038         SHLD    EXPRS   ;STORE POINTER
118d  e1            3027   3039         POP     H       ;RESTORE ASCII EXPRESSION POINTER
118e  7b            3028   3040         MOV     A,E     ;GET FLAG SAVED IN E
118f  fe 05         3029   3041         CPI     5       ;STORED A "("?
1191  c2 a1 10      3030   3042         JNZ     SKPP    ;IF NZ, NO, PROCESS NEXT ELEMENT
1194  c3 b7 11      3031   3043         JMP     OP4     ;YES, GO EVALUATE
1197  3a 68 22      3032   3044 OP2:    LDA     PARCT   ;GET OPEN PAREN COUNT
119a  b7            3033   3045         ORA     A       ;TEST IT
119b  ca 4b 11      3034   3046         JZ      ENDXP   ;BRIF END OF EXPR
119e  eb            3035   3047         XCHG            ;ELSE SAVE H,L
119f  2a 50 22      3036   3048         LHLD    EXPRS   ;GET EXPR BEGIN
11a2  23            3037   3049         INX     H       ;POINT NEXT
11a3  36 01         3038   3050         MVI     M,1     ;MOVE A COMMA
11a5  22 50 22      3039   3051         SHLD    EXPRS   ;UPDATE POINTER
11a8  eb            3040   3052         XCHG            ;FLIP BACK
11a9  c3 a1 10      3041   3053         JMP     SKPP
11ac  3a 68 22      3042   3054 OP3:    LDA     PARCT   ;GET OPEN PAREN COUNT
11af  3d            3043   3055         DCR     A       ;SUBTRACT ONE
11b0  32 68 22      3044   3056         STA     PARCT   ;SAVE IT
11b3  fa 0f 1c      3045   3057         JM      SNERR   ;BRIF TOO MANY )'S
11b6  23            3046   3058         INX     H       ;POINT NEXT SOURCE
11b7  22 56 22      3047   3059 OP4:    SHLD    ADDR3   ;SAVE ADDR
11ba  2a 50 22      3048   3060 EVAL:   LHLD    EXPRS   ;GET END OF EXPR
11bd  01 00 00      3049   3061         LXI     B,0     ;INIT B,C TO ZERO
11c0  04            3050   3062 EV1:    INR     B       ;COUNT EACH BYTE
11c1  7e            3051   3063         MOV     A,M     ;GET CODE IN REG A
11c2  2b            3052   3064         DCX     H       ;POINT NEXT
11c3  fe e3         3053   3065         CPI     0E3H    ;TEST IF DATA
11c5  c2 d0 11      3054   3066         JNZ     EV2     ;BRIF NOT DATA
11c8  2b            3055   3067 EV1A:   DCX     H       ;POINT NEXT
11c9  2b            3056   3068         DCX     H       ;DITTO
11ca  04            3057   3069         INR     B       ;BUMP CTR
11cb  04            3058   3070         INR     B       ;BY TWO
11cc  0c            3059   3071         INR     C       ;COUNT THE TERM
11cd  c3 c0 11      3060   3072         JMP     EV1     ;LOOP
11d0  fe af         3061   3073 EV2:    CPI     0AFH    ;TEST IF NUMERIC USER FN
11d2  ca b1 0e      3062   3074         JZ      FN      ;BRIF IS
11d5  fe cf         3063   3075         CPI     0CFH    ;TEST IF STRING USER FN
11d7  ca b1 0e      3064   3076         JZ      FN      ;BRIF IS
11da  f5            3065   3077         PUSH    PSW     ;ELSE, SAVE STATUS
11db  e6 e3         3066   3078         ANI     0E3H    ;MASK IT
11dd  fe a3         3067   3079         CPI     0A3H    ;TEST IF NUMERIC FUNCTION
11df  ca f0 11      3068   3080         JZ      EV2A    ;BRIF IS
11e2  fe c3         3069   3081         CPI     0C3H    ;TEST IF STRING FUNCTION
11e4  ca f0 11      3070   3082         JZ      EV2A    ;BRIF IS
11e7  f1            3071   3083         POP     PSW     ;RESTORE CODE
11e8  fe e7         3072   3084         CPI     0E7H    ;TEST IF STRING ADDR
11ea  ca c8 11      3073   3085         JZ      EV1A    ;BRIF IS
11ed  c3 78 12      3074   3086         JMP     EV5     ;BR AROUND
11f0  23            3075   3087 EV2A:   INX     H       ;RESET TO TYPE CODE
11f1  22 52 22      3076   3088         SHLD    ADDR1   ;SAVE ADDR
11f4  d1            3077   3089         POP     D       ;DUMMY POP
11f5  c5            3078   3090         PUSH    B       ;SAVE CTRS
11f6  2b            3079   3091         DCX     H       ;POINT TO LOW JMP ADDR
11f7  5e            3080   3092         MOV     E,M     ;LOW BYTE
11f8  2b            3081   3093         DCX     H       ;POINT BACK
11f9  56            3082   3094         MOV     D,M     ;HIGH BACK
11fa  22 54 22      3083   3095         SHLD    ADDR2   ;SAVE LOCATION
11fd  21 07 12      3084   3096         LXI     H,EV3   ;GET RETURN ADDRESS
1200  e5            3085   3097         PUSH    H       ;SAVE ON STACK
1201  d5            3086   3098         PUSH    D       ;SAVE ADDRESS
1202  cd 74 1c      3087   3099         CALL    ARG     ;GO GET 1ST ARG
1205  e1            3088   3100         POP     H       ;GET H,L ADDRESS
1206  e9            3089   3101         PCHL            ;GO EXECUTE THE FUNCTION
1207  =             3090   3102 EV3     EQU     $       ;FUNCTIONS RETURN HERE
1207  2a 54 22      3091   3103         LHLD    ADDR2   ;GET ADDR FUNC
120a  23            3092   3104         INX     H       ;POINT LO
120b  23            3093   3105         INX     H       ;POINT TYPE
120c  7e            3094   3106         MOV     A,M     ;LOAD IT
120d  e6 e0         3095   3107         ANI     0E0H    ;MASK IT
120f  fe c0         3096   3108         CPI     0C0H    ;TEST IF STRING
1211  ca 4c 12      3097   3109         JZ      EV4     ;BRIF IS
1214  c1            3098   3110         POP     B       ;GET CTRS
1215  2a 69 22      3099   3111         LHLD    SPCTR   ;GET COUNTER
1218  23            3100   3112         INX     H       ;PLUS
1219  23            3101   3113         INX     H       ;TWO WORDS
121a  22 69 22      3102   3114         SHLD    SPCTR   ;STORE IT
121d  21 00 00      3103   3115         LXI     H,0     ;LOAD ZERO TO H,L
1220  e5            3104   3116         PUSH    H       ;GET BLOCK OF
1221  e5            3105   3117         PUSH    H       ;BYTES
1222  39            3106   3118         DAD     SP      ;GET STACK ADDR
1223  c5            3107   3119         PUSH    B       ;SAVE CTRS
1224  e5            3108   3120         PUSH    H       ;SAVE ADDR
1225  df            3109   3121         RST     3       ;GO STORE THE VARIABLE
1226  3e e3         3110   3122         MVI     A,0E3H  ;TYPE=NUM
1228  d1            3111   3123 EV3A:   POP     D       ;GET ADDR IN STACK
1229  2a 52 22      3112   3124         LHLD    ADDR1   ;GET ADDR LST ARG
122c  77            3113   3125         MOV     M,A     ;STORE TYPE CODE
122d  2b            3114   3126         DCX     H       ;POINT ONE BACK
122e  73            3115   3127         MOV     M,E     ;STORE LO ADDR
122f  2b            3116   3128         DCX     H       ;POINT BACK
1230  72            3117   3129         MOV     M,D     ;STORE HI ADDR
1231  2a 54 22      3118   3130         LHLD    ADDR2   ;GET LOCATION FUNCTION
1234  23            3119   3131         INX     H       ;POINT LO
1235  23            3120   3132         INX     H       ;POINT TYPE
1236  7e            3121   3133         MOV     A,M     ;LOAD TYPE
1237  46            3122   3134         MOV     B,M     ;GET TYPE
1238  e7            3123   3135         RST     4       ;ADJUST H,L
1239  fd            3124   3136         DB      -3 AND 0FFH
123a  78            3125   3137         MOV     A,B     ;LOAD TYPE
123b  c1            3126   3138         POP     B       ;RESTORE CTRS
123c  e6 18         3127   3139         ANI     18H     ;ISOLATE #ARGS
123e  1f            3128   3140         RAR             ;SHIFT RIGHT
123f  1f            3129   3141         RAR             ;AGAIN
1240  1f            3130   3142         RAR             ;ONCE MORE
1241  57            3131   3143         MOV     D,A     ;SAVE IT
1242  82            3132   3144         ADD     D       ;TIMES 2
1243  82            3133   3145         ADD     D       ;TIMES 3
1244  04            3134   3146         INR     B       ;POINT
1245  04            3135   3147         INR     B       ;LST POSIT IN LOC
1246  cd e2 1a      3136   3148         CALL    SQUIS   ;GO COMPRESS STACK
1249  c3 ba 11      3137   3149         JMP     EVAL    ;START AT BEGINNING
124c  11 20 21      3138   3150 EV4:    LXI     D,STRIN ;POINT STRING BUFFER
124f  1a            3139   3151         LDAX    D       ;LOAD IT
1250  1f            3140   3152         RAR             ;DIVIDE BY TWO
1251  3c            3141   3153         INR     A       ;ADD 1
1252  2a 69 22      3142   3154         LHLD    SPCTR   ;GET SP COUNT
1255  4f            3143   3155         MOV     C,A     ;SAVE LO
1256  06 00         3144   3156         MVI     B,0     ;SET HI
1258  09            3145   3157         DAD     B       ;ADD NUMBER WORDS
1259  22 69 22      3146   3158         SHLD    SPCTR   ;SAVE SP COUNT
125c  21 00 00      3147   3159         LXI     H,0     ;GET SOME ZEROS
125f  c1            3148   3160         POP     B       ;GET CTRS
1260  e5            3149   3161 EV4A:   PUSH    H       ;GET 1 WORD
1261  3d            3150   3162         DCR     A       ;DECR CTR
1262  c2 60 12      3151   3163         JNZ     EV4A    ;LOOP
1265  39            3152   3164         DAD     SP      ;GET ADDRESS IN H,L
1266  c5            3153   3165         PUSH    B       ;RE-SAVE CTRS
1267  e5            3154   3166         PUSH    H       ;SAVE ADDR
1268  1a            3155   3167         LDAX    D       ;GET COUNT
1269  3c            3156   3168         INR     A       ;PLUS ONE
126a  47            3157   3169         MOV     B,A     ;SAVE IT
126b  1a            3158   3170 EV4B:   LDAX    D       ;GET A BYTE
126c  77            3159   3171         MOV     M,A     ;STORE IT
126d  13            3160   3172         INX     D       ;POINT NEXT
126e  23            3161   3173         INX     H       ;DITTO
126f  05            3162   3174         DCR     B       ;DECR CTR
1270  c2 6b 12      3163   3175         JNZ     EV4B    ;LOOP
1273  3e e7         3164   3176         MVI     A,0E7H  ;TYPE CODE
1275  c3 28 12      3165   3177         JMP     EV3A    ;CONTINUE
1278  fe 05         3166   3178 EV5:    CPI     5       ;TEST IF OPEN PAREN
127a  c2 96 12      3167   3179         JNZ     EV6     ;BRIF NOT
127d  3e 01         3168   3180         MVI     A,1     ;DELETE 1 BYTE
127f  cd e2 1a      3169   3181         CALL    SQUIS   ;GO COMPRESS IT
1282  2a 56 22      3170   3182         LHLD    ADDR3   ;RESTORE STMT POINTER
1285  3a 72 20      3171   3183         LDA     DIMSW   ;GET SUBSR SWITCH
1288  b7            3172   3184         ORA     A       ;TEST IT
1289  ca 1d 11      3173   3185         JZ      LOOKO   ;BRIF NOT IN SUBSCRIPT
128c  3a 68 22      3174   3186         LDA     PARCT   ;GET OPEN PAREN COUNT
128f  b7            3175   3187         ORA     A       ;TEST
1290  c2 1d 11      3176   3188         JNZ     LOOKO   ;BRIF NOT ZERO
1293  c3 ba 11      3177   3189         JMP     EVAL    ;ELSE EVALUATE COMPLETE SUBSCR
1296  b7            3178   3190 EV6:    ORA     A       ;TEST IF END OF EXPRESSION
1297  c2 c7 12      3179   3191         JNZ     EV9     ;BRIF NOT
129a  3a 72 20      3180   3192         LDA     DIMSW   ;GET DIM SW
129d  b7            3181   3193         ORA     A       ;TEST IT
129e  c4 9d 13      3182   3194         CNZ     EDM1    ;BRIF NOT OFF
12a1  79            3183   3195         MOV     A,C     ;GET TERM COUNT
12a2  fe 01         3184   3196         CPI     1       ;TEST IF ONE
12a4  c2 0b 1c      3185   3197         JNZ     STERR   ;ERROR IF NOT ONE
12a7  23            3186   3198         INX     H       ;POINT HIGH ADDR
12a8  23            3187   3199         INX     H       ;SAME
12a9  56            3188   3200         MOV     D,M     ;HIGH TO D
12aa  23            3189   3201         INX     H       ;POINT LOW
12ab  5e            3190   3202         MOV     E,M     ;LOW TO E
12ac  cd 83 13      3191   3203         CALL    EVLD    ;GO LOAD VALUE
12af  2a 69 22      3192   3204         LHLD    SPCTR   ;GET STACK CTR
12b2  7d            3193   3205 EV7:    MOV     A,L     ;GET LO BYTE
12b3  b4            3194   3206         ORA     H       ;PLUS HI
12b4  ca bc 12      3195   3207         JZ      DV8     ;BRIF ZERO
12b7  d1            3196   3208         POP     D       ;RETURN 2 BYTES
12b8  2b            3197   3209         DCX     H       ;DECR CTR
12b9  c3 b2 12      3198   3210         JMP     EV7     ;LOOP
12bc  3a 72 20      3199   3211 DV8:    LDA     DIMSW   ;GET DIM SW
12bf  b7            3200   3212         ORA     A       ;TEST IT
12c0  c4 c4 13      3201   3213         CNZ     EDM4    ;BRIF ON
12c3  2a 56 22      3202   3214         LHLD    ADDR3   ;RESTORE STMT PTR
12c6  c9            3203   3215         RET             ;RETURN TO STMT PROCESSOR
12c7  fe 21         3204   3216 EV9:    CPI     21H     ;TEST IF PLUS
12c9  11 1b 13      3205   3217         LXI     D,FADDJ ;ADDR
12cc  ca f9 12      3206   3218         JZ      EV10    ;BRIF IS
12cf  fe 25         3207   3219         CPI     25H     ;TEST IF MINUS
12d1  11 0c 17      3208   3220         LXI     D,FSUB  ;ADDR
12d4  ca f9 12      3209   3221         JZ      EV10    ;BRIF IS
12d7  fe 41         3210   3222         CPI     41H     ;TEST IF MUL
12d9  11 18 17      3211   3223         LXI     D,FMUL  ;ADDR
12dc  ca f9 12      3212   3224         JZ      EV10    ;BRIF IS
12df  fe 45         3213   3225         CPI     45H     ;TEST IF DIV
12e1  11 9b 17      3214   3226         LXI     D,FDIV  ;ADDR
12e4  ca f9 12      3215   3227         JZ      EV10    ;BRIF IS
12e7  fe 01         3216   3228         CPI     1       ;TEST IF COMMA
12e9  ca 77 13      3217   3229         JZ      EVCOM   ;BRIF IS
12ec  fe 61         3218   3230         CPI     61H     ;TEST IF UNARY MINUS
12ee  ca 63 13      3219   3231         JZ      EVNEG   ;BRIF IS
12f1  fe 81         3220   3232         CPI     81H     ;TEST IF EXPONENTIAL
12f3  11 23 13      3221   3233         LXI     D,POWER ;ADDR
12f6  c2 0b 1c      3222   3234         JNZ     STERR   ;ERROR IF NOT
12f9  23            3223   3235 EV10:   INX     H       ;POINT TO
12fa  23            3224   3236         INX     H       ;1ST DATA
12fb  c5            3225   3237         PUSH    B       ;SAVE CTRS
12fc  d5            3226   3238         PUSH    D       ;SAVE ROUTINE ADDR
12fd  56            3227   3239         MOV     D,M     ;HIGH TO D
12fe  23            3228   3240         INX     H       ;POINT NEXT
12ff  5e            3229   3241         MOV     E,M     ;LOW TO E
1300  e5            3230   3242         PUSH    H       ;SAVE POINTER
1301  cd 83 13      3231   3243         CALL    EVLD    ;GO LOAD VALUE
1304  e1            3232   3244         POP     H       ;RESTORE H,L
1305  23            3233   3245         INX     H       ;POINT 2ND DATA
1306  23            3234   3246         INX     H       ;SAME
1307  56            3235   3247         MOV     D,M     ;HIGH TO D
1308  23            3236   3248         INX     H       ;POINT NEXT
1309  5e            3237   3249         MOV     E,M     ;LOW TO E
130a  23            3238   3250         INX     H       ;POINT NEXT
130b  3a 8e 22      3239   3251         LDA     NS      ;GET PREV TYPE
130e  be            3240   3252         CMP     M       ;TEST THIS TYPE
130f  c2 0f 1c      3241   3253         JNZ     SNERR   ;BRIF MIXED MODE
1312  2b            3242   3254         DCX     H       ;POINT BACK
1313  e3            3243   3255         XTHL            ;POP ADDR FROM STACK, PUSH H ONTO
1314  01 52 13      3244   3256         LXI     B,EV11  ;RETURN ADDRESS
1317  c5            3245   3257         PUSH    B       ;SAVE ON STACK
1318  e5            3246   3258         PUSH    H       ;SAVE JUMP ADDR
1319  eb            3247   3259         XCHG            ;PUT VAR ADDR TO H,L
131a  c9            3248   3260         RET             ;FAKE CALL TO ROUTINE
131b  fe e7         3249   3261 FADDJ:  CPI     0E7H    ;TEST IF STRINGS
131d  ca 26 0d      3250   3262         JZ      CONCA   ;BRIF IS
1320  c3 37 16      3251   3263         JMP     FADD    ;ELSE, GO ADD
1323  e5            3252   3264 POWER:  PUSH    H       ;SAVE ADDR OF VAR
1324  21 2f 22      3253   3265         LXI     H,TEMP1 ;POINT SAVE AREA
1327  df            3254   3266         RST     3       ;SAVE X
1328  e1            3255   3267         POP     H       ;RESTORE H,L
1329  ef            3256   3268         RST     5       ;LOAD IT
132a  cd ce 18      3257   3269         CALL    FTEST   ;TEST FOR ZERO
132d  ca d6 0b      3258   3270         JZ      SGN1    ;GIVE RESULT = 1 IF POWER = 0
1330  21 47 22      3259   3271         LXI     H,TEMP7 ;POINT SAVE AREA
1333  df            3260   3272         RST     3       ;SAVE B
1334  21 2f 22      3261   3273         LXI     H,TEMP1 ;POINT X
1337  ef            3262   3274         RST     5       ;GO LOAD IT
1338  cd ce 18      3263   3275         CALL    FTEST   ;TEST FOR ZERO
133b  c8            3264   3276         RZ              ;0^X = 0
133c  cd 13 0b      3265   3277         CALL    LN      ;GET NATURAL LNRITHM
133f  21 47 22      3266   3278         LXI     H,TEMP7 ;POINT B
1342  cd 18 17      3267   3279         CALL    FMUL    ;GO MULTIPLY
1345  c3 6a 0b      3268   3280         JMP     EXP     ;GET EXP FUNC
                    3269   3281 ; X^B = EXP(B*LN(X))
1348  21 2f 22      3270   3282 XSQR:   LXI     H,TEMP1 ;POINT X
134b  ef            3271   3283         RST     5       ;LOAD X
134c  21 2f 22      3272   3284         LXI     H,TEMP1 ;POINT X
134f  c3 18 17      3273   3285         JMP     FMUL    ;TIMES X
1352  e1            3274   3286 EV11:   POP     H       ;GET H,L
1353  c1            3275   3287         POP     B       ;GET CTRS
1354  2b            3276   3288         DCX     H       ;POINT BACK
1355  2b            3277   3289         DCX     H       ;AND AGAIN
1356  cd 00 1b      3278   3290         CALL    GTEMP   ;GO SAVE FACC
1359  e7            3279   3291         RST     4       ;ADJUST H,L
135a  f9            3280   3292         DB      -7 AND 0FFH
135b  3e 04         3281   3293         MVI     A,4     ;DELETE 4 BYTES
135d  cd e2 1a      3282   3294         CALL    SQUIS   ;GO COMPRESS
1360  c3 ba 11      3283   3295         JMP     EVAL    ;CONTINUE
1363  23            3284   3296 EVNEG:  INX     H       ;POINT BACK TO OP
1364  c5            3285   3297         PUSH    B       ;SAVE CTRS
1365  e5            3286   3298         PUSH    H       ;SAVE H,L
1366  23            3287   3299         INX     H       ;DITTO
1367  56            3288   3300         MOV     D,M     ;GET HI BYTE
1368  23            3289   3301         INX     H       ;POINT NEXT
1369  5e            3290   3302         MOV     E,M     ;GET LO BYTE
136a  cd 83 13      3291   3303         CALL    EVLD    ;GO LOAD VAR
136d  cd 7a 0c      3292   3304         CALL    NEG     ;GO NEGATE IT
1370  e1            3293   3305         POP     H       ;GET LOCATINO
1371  c1            3294   3306         POP     B       ;GET CTRS
1372  cd 00 1b      3295   3307         CALL    GTEMP   ;GO STORE FACC IN STACK
1375  e7            3296   3308         RST     4       ;ADJUST H,L
1376  fc            3297   3309         DB      -4 AND 0FFH
1377  3e 01         3298   3310 EVCOM:  MVI     A,1     ;DELETE 1 BYTE
1379  cd e2 1a      3299   3311         CALL    SQUIS   ;COMPRESS
137c  21 6b 22      3300   3312         LXI     H,CMACT ;GET COUNT
137f  34            3301   3313         INR     M       ;INCR
1380  c3 ba 11      3302   3314         JMP     EVAL    ;CONTINUE
1383  23            3303   3315 EVLD:   INX     H       ;POINT TYPE
1384  7e            3304   3316         MOV     A,M     ;LOAD IT
1385  32 8e 22      3305   3317         STA     NS      ;SAVE IT
1388  eb            3306   3318         XCHG            ;SAVE H,L IN D,E
1389  fe e7         3307   3319         CPI     0E7H    ;TEST IF STRING
138b  c2 28 00      3308   3320         JNZ     RST5    ;LOAD FLOATING POINT
138e  11 20 21      3309   3321         LXI     D,STRIN ;POINT BUFFER
1391  7e            3310   3322         MOV     A,M     ;GET COUNT
1392  3c            3311   3323         INR     A       ;ADD ONE
1393  47            3312   3324         MOV     B,A     ;SAVE COUNT
1394  7e            3313   3325 EVLD1:  MOV     A,M     ;GET NEXT
1395  12            3314   3326         STAX    D       ;STORE IT
1396  23            3315   3327         INX     H       ;POINT NEXT
1397  13            3316   3328         INX     D       ;DITTO
1398  05            3317   3329         DCR     B       ;DECR COUNT
1399  c2 94 13      3318   3330         JNZ     EVLD1   ;LOOP
139c  c9            3319   3331         RET             ;RETURN
                    3320   3332 ;
139d  79            3321   3333 EDM1:   MOV     A,C     ;GET ITEM COUNT
139e  e5            3322   3334         PUSH    H       ;SAVE H,L
139f  fe 01         3323   3335         CPI     1       ;TEST IF 1
13a1  c2 b0 13      3324   3336         JNZ     EDM3    ;BRIF NOT
13a4  06 04         3325   3337         MVI     B,4     ;GET COUNT
13a6  21 2f 22      3326   3338         LXI     H,TEMP1 ;POINT AREA
13a9  cd 5e 1c      3327   3339         CALL    ZEROM   ;GO ZERO IT
13ac  e1            3328   3340 EDM2A:  POP     H       ;RESTORE H,L
13ad  0e 01         3329   3341         MVI     C,1     ;SET COUNT
13af  c9            3330   3342         RET             ;RETURN
13b0  fe 02         3331   3343 EDM3:   CPI     2       ;TEST IF 2
13b2  c2 0f 1c      3332   3344         JNZ     SNERR   ;ELSE, ERROR
13b5  e7            3333   3345         RST     4       ;POINT 2ND ARG
13b6  05            3334   3346         DB      5
13b7  56            3335   3347         MOV     D,M     ;GET HI ADDR
13b8  23            3336   3348         INX     H       ;POINT NEXT
13b9  5e            3337   3349         MOV     E,M     ;GET LO ADDR
13ba  cd 83 13      3338   3350         CALL    EVLD    ;LOAD THE ARG
13bd  21 2f 22      3339   3351         LXI     H,TEMP1 ;POINT AREA
13c0  df            3340   3352         RST     3       ;SAVE THE ARG
13c1  c3 ac 13      3341   3353         JMP     EDM2A   ;CONTINUE
13c4  cd 35 1f      3342   3354 EDM4:   CALL    FACDE   ;CONVERT FACC TO D,E
13c7  d5            3343   3355         PUSH    D       ;PUT D,E TO B,C
13c8  c1            3344   3356         POP     B
13c9  c5            3345   3357         PUSH    B       ;SAVE COL
13ca  21 2f 22      3346   3358         LXI     H,TEMP1 ;POINT 2ND ARGUMENT
13cd  ef            3347   3359         RST     5       ;LOAD IT IN FACC
13ce  cd 35 1f      3348   3360         CALL    FACDE   ;CONVERT TO D,E
13d1  c1            3349   3361         POP     B       ;GET COL
13d2  af            3350   3362         XRA     A       ;GET A ZERO
13d3  32 72 20      3351   3363         STA     DIMSW   ;RESET SW
13d6  c9            3352   3364         RET             ;RETURN
13d7  78            3353   3365 LDV2A:  MOV     A,B     ;GET HI NAME
13d8  f6 80         3354   3366         ORI     80H     ;SET BIT
13da  47            3355   3367         MOV     B,A     ;RESTORE
13db  c5            3356   3368         PUSH    B       ;SAVE NAME
13dc  eb            3357   3369         XCHG            ;SAVE H,L IN D,E
13dd  3a 68 22      3358   3370         LDA     PARCT   ;GET PAREN COUNT
13e0  f5            3359   3371         PUSH    PSW     ;SAVE
13e1  af            3360   3372         XRA     A       ;CLEAR REG A
13e2  32 68 22      3361   3373         STA     PARCT   ;RESET COUNT
13e5  2a 69 22      3362   3374         LHLD    SPCTR   ;GET STACK COUNTER
13e8  e5            3363   3375         PUSH    H       ;SAVE IT
13e9  21 00 00      3364   3376         LXI     H,0     ;GET A ZERO
13ec  22 69 22      3365   3377         SHLD    SPCTR   ;RESET CTR
13ef  2a 50 22      3366   3378         LHLD    EXPRS   ;GET EXPRST
13f2  e5            3367   3379         PUSH    H       ;SAVE IT
13f3  23            3368   3380         INX     H       ;POINT NEXT
13f4  36 00         3369   3381         MVI     M,0     ;SET NEW START
13f6  22 50 22      3370   3382         SHLD    EXPRS   ;SAVE IT
13f9  3a 72 20      3371   3383         LDA     DIMSW   ;GET PREV SE
13fc  f5            3372   3384         PUSH    PSW     ;SAVE IT
13fd  eb            3373   3385         XCHG            ;RESTORE H,L
13fe  3e ff         3374   3386         MVI     A,0FFH  ;GET ON VALUE
1400  32 72 20      3375   3387         STA     DIMSW   ;SET SW
1403  cd 95 0f      3376   3388         CALL    LOOKD   ;RECURSIVE CALL
1406  f1            3377   3389         POP     PSW     ;GET DIM SW
1407  32 72 20      3378   3390         STA     DIMSW   ;REPLACE IT
140a  22 56 22      3379   3391         SHLD    ADDR3   ;SAVE H,L
140d  e1            3380   3392         POP     H       ;GET EXPRST
140e  22 50 22      3381   3393         SHLD    EXPRS   ;SAVE IT
1411  e1            3382   3394         POP     H       ;GET STACK COUNTER
1412  22 69 22      3383   3395         SHLD    SPCTR   ;RESTORE IT
1415  f1            3384   3396         POP     PSW     ;GET PAREN COUNT
1416  32 68 22      3385   3397         STA     PARCT   ;RESTORE IT
1419  e1            3386   3398         POP     H       ;GET NAME
141a  d5            3387   3399         PUSH    D       ;SAVE ROW
141b  c5            3388   3400         PUSH    B       ;SAVE COL
141c  eb            3389   3401         XCHG            ;PUT NAME IN D,E
141d  cd 34 1b      3390   3402         CALL    SEARC   ;GO FIND ADDRESS (PUT IN D,E)
1420  d1            3391   3403         POP     D       ;GET ADDR
1421  c1            3392   3404         POP     B       ;RESTORE COL
1422  d1            3393   3405         POP     D       ;RESTORE ROW
1423  cd 85 18      3394   3406         CALL    SUBSC   ;GET SUBSCRIPT (RETURNS ADDR IN H,L)
1426  eb            3395   3407         XCHG            ;SAVE IN D,E
1427  2a 56 22      3396   3408         LHLD    ADDR3   ;GET H,L
142a  e5            3397   3409         PUSH    H       ;SAVE ON STACK
142b  c3 de 0f      3398   3410         JMP     LDV     ;CONTINUE
                    3399   3411 ;       PAGE
                    3400   3412 ;
142e  =             3401   3413 FIN     EQU     $
                    3402   3414 ;
                    3403   3415 ; FLOATING POINT INPUT CONVERSION ROUTINE
                    3404   3416 ;
                    3405   3417 ; THIS SUBROUTINE CONVERTS AN ASCII STRING OF CHARACTERS
                    3406   3418 ; TO THE FLOATING POINT ACCUMULATOR.  THE INPUT FIELD
                    3407   3419 ; MAY CONTAIN ANY VALID NUMBER, INCLUDING SCIENTIFIC
                    3408   3420 ; NOTATION (NNN.NNNNE+NN).
                    3409   3421 ; THE INPUT STRING IS TERMINATED BY ANY NON-NUMERIC CHAR
                    3410   3422 ;
                    3411   3423 ;
142e  eb            3412   3424         XCHG            ;PUT ADDR TO D,E
142f  0e 00         3413   3425         MVI     C,0     ;INITIAL VALUE EXCESS DIGIT COUNT
1431  cd 88 14      3414   3426         CALL    FIN8    ;GET INTEGER PORTION
1434  06 00         3415   3427         MVI     B,0     ;CLEAR DIGIT COUNT
1436  fe 2e         3416   3428         CPI     '.'     ;TEST IF DEC-POINT
1438  c2 3e 14      3417   3429         JNZ     FIN2    ;BRIF NOT
143b  cd a2 14      3418   3430         CALL    FIN9    ;GET FRACTION
143e  f1            3419   3431 FIN2:   POP     PSW     ;GET SIGN
143f  f6 18         3420   3432         ORI     24      ;SET UP FOR FLOAT
1441  32 58 22      3421   3433         STA     FACC
1444  78            3422   3434         MOV     A,B     ;GET # FRACTION DIGITS
1445  81            3423   3435         ADD     C       ;+ EXCESS DIGITS
1446  f5            3424   3436         PUSH    PSW     ;SAVE POWER OF TEN
1447  d5            3425   3437         PUSH    D       ;SAVE PTR
1448  cd dd 16      3426   3438         CALL    FNORM   ;NORMALIZE NUMBER
144b  1a            3427   3439         LDAX    D       ;GET NEXT CHARACTER
144c  fe 45         3428   3440         CPI     'E'     ;TEST IF EXPONENT
144e  c2 6c 14      3429   3441         JNZ     FIN4    ;BRIF NOT
1451  21 5c 22      3430   3442         LXI     H,FTEMP ;POINT SAVE AREA
1454  df            3431   3443         RST     3       ;SAVE ACC
1455  d1            3432   3444         POP     D       ;RESTORE PTR
1456  13            3433   3445         INX     D       ;SKIP 'E'
1457  cd 88 14      3434   3446         CALL    FIN8    ;GET NUMERIC EXP
145a  3a 5b 22      3435   3447         LDA     FACC+3  ;GET EXPONENT
145d  c1            3436   3448         POP     B       ;EXPONENT SIGN
145e  04            3437   3449         INR     B       ;TEST
145f  f2 64 14      3438   3450         JP      FIN3    ;BRIF NOT NEG
1462  2f            3439   3451         CMA             ;NEGATE EXPONENT
1463  3c            3440   3452         INR     A
1464  c1            3441   3453 FIN3:   POP     B       ;POWER OF TEN
1465  80            3442   3454         ADD     B       ;ADD EXPONENT
1466  f5            3443   3455         PUSH    PSW     ;SAVE COUNT
1467  21 5c 22      3444   3456         LXI     H,FTEMP ;RESTORE NUMBER
146a  d5            3445   3457         PUSH    D       ;SAVE PTR
146b  ef            3446   3458         RST     5       ;LOAD IT
146c  e1            3447   3459 FIN4:   POP     H       ;RESTORE PTR
146d  f1            3448   3460         POP     PSW     ;RESTORE COUNT
146e  c8            3449   3461 FIN5:   RZ              ;RETURN IF ZERO
146f  e5            3450   3462         PUSH    H       ;SAVE H,L
1470  21 9e 1d      3451   3463         LXI     H,TEN   ;POINT CONSTANT: 10
1473  fa 80 14      3452   3464         JM      FIN7    ;BRIF DIVIDE NEEDED
1476  3d            3453   3465         DCR     A       ;DECR COUNT
1477  f5            3454   3466         PUSH    PSW     ;SAVE COUNT
1478  cd 18 17      3455   3467         CALL    FMUL    ;GO MULTIPLY BY 10
147b  f1            3456   3468 FIN6:   POP     PSW     ;RESTORE COUNT
147c  e1            3457   3469         POP     H       ;RESTORE H,L
147d  c3 6e 14      3458   3470         JMP     FIN5    ;CONTINUE
1480  3c            3459   3471 FIN7:   INR     A       ;INCR COUNT
1481  f5            3460   3472         PUSH    PSW     ;SAVE COUNT
1482  cd 9b 17      3461   3473         CALL    FDIV    ;GO DIVIDE BY 10
1485  c3 7b 14      3462   3474         JMP     FIN6    ;LOOP
                    3463   3475 ;
                    3464   3476 ; FIN8  CONVERT NUMBER STRING TO FACC
                    3465   3477 ; ON ENTRY, C=INIT VALUE EXCESS DIGIT COUNT
                    3466   3478 ;             DE=INPUT STRING
                    3467   3479 ; ON EXIT, SIGN IS ON STACK
                    3468   3480 ;       B=DIGIT COUNT
                    3469   3481 ;       C=EXCESS DIGIT COUNT
                    3470   3482 ;
1488  21 58 22      3471   3483 FIN8:   LXI     H,FACC  ;CLEAR FACC
148b  06 04         3472   3484         MVI     B,4
148d  cd 5e 1c      3473   3485         CALL    ZEROM
1490  21 00 80      3474   3486         LXI     H,8000H ;ASSUME MINUS
1493  1a            3475   3487         LDAX    D       ;GET CHAR
1494  fe 2d         3476   3488         CPI     '-'
1496  ca a0 14      3477   3489         JZ      FIN8A
1499  65            3478   3490         MOV     H,L     ;NOPE, MUST BE PLUS
                    3479   3491                         ;(B IS CLEARED BY ZEROM)
149a  fe 2b         3480   3492         CPI     '+'
149c  ca a0 14      3481   3493         JZ      FIN8A
149f  1b            3482   3494         DCX     D       ;NEITHER, BACK UP POINTER
14a0  e3            3483   3495 FIN8A:  XTHL            ;GET RETURN, PUSH SIGN
14a1  e5            3484   3496         PUSH    H       ;RESTORE RETURN
14a2  13            3485   3497 FIN9:   INX     D       ;POINT NEXT
14a3  1a            3486   3498         LDAX    D       ;GET CHAR
14a4  fe 30         3487   3499         CPI     '0'     ;TEST IF LESS ZERO
14a6  d8            3488   3500         RC              ;RETURN IF IS
14a7  fe 3a         3489   3501         CPI     '9'+1   ;TEST IF GT NINE
14a9  d0            3490   3502         RNC             ;RETURN IF IS
14aa  05            3491   3503         DCR     B       ;DIGIT COUNT
14ab  d5            3492   3504         PUSH    D       ;SAVE PTR
14ac  c5            3493   3505         PUSH    B       ;SAVE COUNTERS
14ad  cd d5 14      3494   3506         CALL    FMTEN   ;MULTIPLY FACC*TEN
14b0  b7            3495   3507         ORA     A       ;TEST FOR OVERFLOW
14b1  ca be 14      3496   3508         JZ      FINB    ;BRIF NO OVERFLOW
14b4  21 60 22      3497   3509         LXI     H,FTEMP+4
14b7  ef            3498   3510         RST     5       ;RESTORE OLD FACC
14b8  c1            3499   3511         POP     B       ;RESTORE COUNTERS
14b9  0c            3500   3512         INR     C       ;EXCESS DIGIT
14ba  d1            3501   3513         POP     D
14bb  c3 a2 14      3502   3514         JMP     FIN9
14be  c1            3503   3515 FINB:   POP     B       ;RSTORE COUNTERS
14bf  d1            3504   3516         POP     D       ;& PTR
14c0  1a            3505   3517         LDAX    D       ;GET THE DIGIT
14c1  e6 0f         3506   3518         ANI     0FH     ;MASK OFF ZONE
14c3  21 5b 22      3507   3519         LXI     H,FACC+3        ;POINT ACC
14c6  86            3508   3520         ADD     M       ;ADD
14c7  77            3509   3521         MOV     M,A     ;STORE
14c8  2b            3510   3522         DCX     H       ;POINT NEXT
14c9  7e            3511   3523         MOV     A,M     ;LOAD
14ca  ce 00         3512   3524         ACI     0       ;PLUS CARRY
14cc  77            3513   3525         MOV     M,A     ;STORE
14cd  2b            3514   3526         DCX     H       ;POINT NEXT
14ce  7e            3515   3527         MOV     A,M     ;LOAD
14cf  ce 00         3516   3528         ACI     0       ;PLUS CARRY
14d1  77            3517   3529         MOV     M,A     ;STORE
14d2  c3 a2 14      3518   3530         JMP     FIN9    ;LOOP
                    3519   3531 ;
                    3520   3532 ; MULTIPLY FACC BY TEN
                    3521   3533 ;
14d5  21 60 22      3522   3534 FMTEN:  LXI     H,FTEMP+4
14d8  df            3523   3535         RST     3       ;SAVE FACC
14d9  cd e5 14      3524   3536         CALL    FIND    ;*2
14dc  cd e5 14      3525   3537         CALL    FIND    ;*4
14df  21 63 22      3526   3538         LXI     H,FTEMP+7
14e2  cd e8 14      3527   3539         CALL    FIND0   ;*5
14e5  21 5b 22      3528   3540 FIND:   LXI     H,FACC+3        ;DOUBLE FACC
14e8  11 5b 22      3529   3541 FIND0:  LXI     D,FACC+3
14eb  06 04         3530   3542         MVI     B,4     ;BYTE COUNT
14ed  c3 f0 18      3531   3543         JMP     FADDT   ;ADD & RETURN
                    3532   3544 ;PAGE
                    3533   3545 ;
14f0  =             3534   3546 FOUT    EQU     $
                    3535   3547 ;
                    3536   3548 ; FLOATING POINT OUTPUT FORMAT ROUTINE
                    3537   3549 ;
                    3538   3550 ; THIS SUBROUTINE CONVERTS A NUMBER IN FACC TO A
                    3539   3551 ; FORMAT SUITABLE FOR PRINTING.  THAT IS, THE
                    3540   3552 ; NUMBER WILL BE IN SCIENTIFIC NOTATION IF EXPONENT
                    3541   3553 ; IS > 5 OR < -2, OTHERWISE IT WILL BE ZERO SUPRESSED
                    3542   3554 ; ON BOTH SIDES.
                    3543   3555 ;
14f0  11 5b 22      3544   3556         LXI     D,FACC+3        ;POINT LSB
14f3  1a            3545   3557         LDAX    D       ;LOAD IT
14f4  f6 07         3546   3558         ORI     7       ;MASK FOR OUTPUT
14f6  12            3547   3559         STAX    D       ;REPLACE
14f7  cd ce 18      3548   3560         CALL    FTEST   ;GET SIGN OF NUMBER
14fa  36 20         3549   3561         MVI     M,' '   ;DEFAULT SPACE
14fc  f2 01 15      3550   3562         JP      FOUT0   ;BRIF NOT MINUS
14ff  36 2d         3551   3563         MVI     M,'-'   ;MOVE DASH
1501  23            3552   3564 FOUT0:  INX     H       ;POINT NEXT
1502  c2 0b 15      3553   3565         JNZ     FOUT2   ;BRIF NOT ZERO
1505  36 30         3554   3566         MVI     M,'0'   ;MOVE THE ZERO
1507  23            3555   3567         INX     H       ;POINT NEXT
1508  36 20         3556   3568         MVI     M,' '   ;MOVE SPACE FOLLOWING
150a  c9            3557   3569         RET             ;RETURN
150b  3a 58 22      3558   3570 FOUT2:  LDA     FACC    ;GET SIGN & EXP
150e  cd dc 18      3559   3571         CALL    FEXP    ;EXPAND EXPONENT
1511  c2 16 15      3560   3572         JNZ     FOUTV   ;BRIF NOT ZERO
1514  3e 80         3561   3573         MVI     A,80H   ;SET NEG
1516  e6 80         3562   3574 FOUTV:  ANI     80H     ;ISOLATE
1518  32 75 22      3563   3575         STA     DEXP    ;SAVE SIGN
151b  e5            3564   3576         PUSH    H       ;SAVE H,L
151c  3a 58 22      3565   3577 FOUT3:  LDA     FACC    ;GET SIGN & EXP
151f  cd dc 18      3566   3578         CALL    FEXP    ;EXPAND EXP
1522  fe 01         3567   3579         CPI     1       ;TEST RANGE
1524  f2 3d 15      3568   3580         JP      FOUT6   ;BRIF IN RANGE
1527  21 75 22      3569   3581 FOUT4:  LXI     H,DEXP  ;POINT DEC.EXP
152a  34            3570   3582         INR     M       ;INCR IT
152b  21 9e 1d      3571   3583         LXI     H,TEN   ;POINT CONST: 10
152e  f2 37 15      3572   3584         JP      FOUT5   ;BRIF POS.
1531  cd 18 17      3573   3585         CALL    FMUL    ;MULTIPLY
1534  c3 1c 15      3574   3586         JMP     FOUT3   ;LOOP
1537  cd 9b 17      3575   3587 FOUT5:  CALL    FDIV    ;DIVIDE
153a  c3 1c 15      3576   3588         JMP     FOUT3   ;LOOP
153d  fe 05         3577   3589 FOUT6:  CPI     5       ;TEST HIGH RANGE
153f  f2 27 15      3578   3590         JP      FOUT4   ;BRIF 5 OR GREATER
1542  21 5c 22      3579   3591         LXI     H,FTEMP ;POINT SAVE AREA
1545  df            3580   3592         RST     3       ;STORE IT
1546  3a 58 22      3581   3593         LDA     FACC    ;GET EXPONENT
1549  cd dc 18      3582   3594         CALL    FEXP    ;EXPAND
154c  0e 06         3583   3595         MVI     C,6     ;DIGIT COUNT
154e  cd 82 15      3584   3596         CALL    FOUTB   ;SHIFT LEFT
1551  fe 0a         3585   3597         CPI     10      ;TEST IF DECIMAL POINT
1553  fa 5d 15      3586   3598         JM      FOUTU   ;BRIF LT
1556  21 5c 22      3587   3599         LXI     H,FTEMP ;POINT SAVE AREA
1559  ef            3588   3600         RST     5       ;LOAD IT
155a  c3 27 15      3589   3601         JMP     FOUT4   ;ONCE MORE
155d  cd 70 15      3590   3602 FOUTU:  CALL    FOUT9   ;PUT DIGIT
1560  af            3591   3603 FOUT7:  XRA     A       ;CLEAR STATUS
1561  32 58 22      3592   3604         STA     FACC    ;AND OVERFLOW
1564  cd d5 14      3593   3605         CALL    FMTEN   ;MULTIPLY BY TEN
1567  cd 70 15      3594   3606         CALL    FOUT9   ;PUT DIGIT
156a  c2 60 15      3595   3607         JNZ     FOUT7   ;LOOP
156d  c3 99 15      3596   3608         JMP     FOUTH   ;GO AROUND
1570  f6 30         3597   3609 FOUT9:  ORI     30H     ;DEC. ZONE
1572  e1            3598   3610         POP     H       ;GET RETURN ADDR
1573  e3            3599   3611         XTHL            ;EXCH WITH TOP (PTR)
1574  77            3600   3612         MOV     M,A     ;PUT DIGIT
1575  23            3601   3613         INX     H       ;POINT NEXT
1576  79            3602   3614         MOV     A,C     ;GET COUNT
1577  fe 06         3603   3615         CPI     6       ;TEST IF 1ST
1579  c2 7f 15      3604   3616         JNZ     FOUTA   ;BRIF NOT
157c  36 2e         3605   3617         MVI     M,'.'   ;MOVE DEC. PT.
157e  23            3606   3618         INX     H       ;POINT NEXT
157f  e3            3607   3619 FOUTA:  XTHL            ;EXCH WITH RTN
1580  0d            3608   3620         DCR     C       ;DECR COUNT
1581  e9            3609   3621         PCHL            ;RETURN
1582  5f            3610   3622 FOUTB:  MOV     E,A     ;SAVE BIT COUNT
1583  af            3611   3623         XRA     A       ;CLEAR ACC FLAGS
1584  32 58 22      3612   3624         STA     FACC    ;AND OVERFLOW
1587  21 5b 22      3613   3625 FOUTC:  LXI     H,FACC+3        ;POINT LSB
158a  06 04         3614   3626         MVI     B,4     ;BYTE COUNT
158c  7e            3615   3627 FOUTD:  MOV     A,M     ;GET A BYTE
158d  17            3616   3628         RAL             ;SHIFT LEFT
158e  77            3617   3629         MOV     M,A     ;STORE
158f  2b            3618   3630         DCX     H       ;POINT NEXT
1590  05            3619   3631         DCR     B       ;DECR CTR
1591  c2 8c 15      3620   3632         JNZ     FOUTD   ;LOOP
1594  1d            3621   3633         DCR     E       ;DECR BIT CTR
1595  c2 87 15      3622   3634         JNZ     FOUTC   ;LOOP
1598  c9            3623   3635         RET             ;RETURN
1599  e1            3624   3636 FOUTH:  POP     H       ;GET PTR
159a  36 45         3625   3637         MVI     M,'E'   ;EXPONENT
159c  23            3626   3638         INX     H       ;POINT NEXT
159d  3a 75 22      3627   3639         LDA     DEXP    ;GET EXPONENT
15a0  36 2b         3628   3640         MVI     M,'+'   ;DEFAULT
15a2  57            3629   3641         MOV     D,A     ;SAVE NUMBER
15a3  b7            3630   3642         ORA     A       ;TEST IT
15a4  f2 b0 15      3631   3643         JP      FOUTI   ;BRIF POS
15a7  36 2d         3632   3644         MVI     M,'-'   ;ELSE, DASH
15a9  e6 7f         3633   3645         ANI     7FH     ;STRIP DUMB SIGN
15ab  2f            3634   3646         CMA             ;COMPLEMENT
15ac  3c            3635   3647         INR     A       ;PLUS ONE (TWOS COMP)
15ad  57            3636   3648         MOV     D,A     ;SAVE IT
15ae  2f            3637   3649         CMA             ;RE-COMPLEMENT
15af  3c            3638   3650         INR     A       ;PLUS ONE
15b0  23            3639   3651 FOUTI:  INX     H       ;POINT NEXT
15b1  e5            3640   3652         PUSH    H       ;SAVE PTR
15b2  1e ff         3641   3653         MVI     E,-1 AND 0FFH   ;INIT CTR (TENS)
15b4  1c            3642   3654 FOUTJ:  INR     E       ;ADD ONE
15b5  d6 0a         3643   3655         SUI     10      ;LESS 10
15b7  f2 b4 15      3644   3656         JP      FOUTJ   ;LOOP
15ba  c6 0a         3645   3657         ADI     10      ;CORRECT UNITS
15bc  47            3646   3658         MOV     B,A     ;SAVE UNITS
15bd  7b            3647   3659         MOV     A,E     ;GET TENS
15be  cd 70 15      3648   3660         CALL    FOUT9   ;OUTPUT
15c1  78            3649   3661         MOV     A,B     ;GET UNITS
15c2  cd 70 15      3650   3662         CALL    FOUT9   ;OUTPUT
15c5  e1            3651   3663         POP     H       ;GET PTR
15c6  36 20         3652   3664         MVI     M,' '   ;SPACE AFTER
15c8  7a            3653   3665         MOV     A,D     ;GET DEC EXPON
15c9  b7            3654   3666         ORA     A       ;SET FLAGS
15ca  f2 d3 15      3655   3667         JP      FOUTK   ;BRIF POS.
15cd  fe fe         3656   3668         CPI     -2 AND 0FFH     ;TEST FOR MIN
15cf  d8            3657   3669         RC              ;RETURN IF LESS THAN -2
15d0  c3 d6 15      3658   3670         JMP     FOUTL   ;GO AROUND
15d3  fe 06         3659   3671 FOUTK:  CPI     6       ;TEST IF TOO BIG
15d5  d0            3660   3672         RNC             ;RETURN IF 6 OR GREATER
15d6  4f            3661   3673 FOUTL:  MOV     C,A     ;SAVE EXPONENT
15d7  06 05         3662   3674         MVI     B,5     ;CTR
15d9  36 20         3663   3675 FOUTM:  MVI     M,' '   ;SPACE OUT EXPONENT
15db  2b            3664   3676         DCX     H       ;POINT PRIOR
15dc  05            3665   3677         DCR     B       ;DECR CTR
15dd  c2 d9 15      3666   3678         JNZ     FOUTM   ;LOOP
15e0  eb            3667   3679         XCHG            ;FLIP/FLOP
15e1  7b            3668   3680         MOV     A,E     ;GET LOW BYTE
15e2  d6 05         3669   3681         SUI     5       ;POINT TO DOT
15e4  6f            3670   3682         MOV     L,A     ;PUT DOWN
15e5  7a            3671   3683         MOV     A,D     ;GET HIGH
15e6  de 00         3672   3684         SBI     0       ;IN CASE OF BORROW
15e8  67            3673   3685         MOV     H,A     ;PUT DOWN
15e9  79            3674   3686         MOV     A,C     ;GET EXPONENT
15ea  b7            3675   3687         ORA     A       ;TEST SIGN
15eb  ca fc 15      3676   3688         JZ      FOUTO   ;BRIF ZERO
15ee  fa 11 16      3677   3689         JM      FOUTR   ;BRIF NEGATIVE
15f1  46            3678   3690 FOUTN:  MOV     B,M     ;GET HIGH BYTE
15f2  23            3679   3691         INX     H       ;POINT NEXT
15f3  7e            3680   3692         MOV     A,M     ;GET LOW BYTE
15f4  70            3681   3693         MOV     M,B     ;SHIFT DOT TO RIGHT
15f5  2b            3682   3694         DCX     H       ;POINT BACK
15f6  77            3683   3695         MOV     M,A     ;MOVE THE DIGIT LEFT
15f7  23            3684   3696         INX     H       ;POINT NEXT
15f8  0d            3685   3697         DCR     C       ;DECR CTR
15f9  c2 f1 15      3686   3698         JNZ     FOUTN   ;LOOP
15fc  eb            3687   3699 FOUTO:  XCHG            ;POINT END
15fd  7e            3688   3700 FOUTP:  MOV     A,M     ;GET A DIGIT/DOT
15fe  fe 30         3689   3701         CPI     '0'     ;TEST FOR TRAILING ZERO
1600  c2 09 16      3690   3702         JNZ     FOUTQ   ;BRIF NOT
1603  36 20         3691   3703         MVI     M,' '   ;SPACE FILL
1605  2b            3692   3704         DCX     H       ;POINT PRIOR
1606  c3 fd 15      3693   3705         JMP     FOUTP   ;LOOP
1609  fe 2e         3694   3706 FOUTQ:  CPI     '.'     ;TEST FOR TRAILING DOT
160b  23            3695   3707         INX     H       ;JUST IN CASE NOT
160c  c0            3696   3708         RNZ             ;RETURN IF NOT
160d  2b            3697   3709         DCX     H       ;RESET PTR
160e  36 20         3698   3710         MVI     M,' '   ;SPACE IT OUT
1610  c9            3699   3711         RET             ;RETURN
1611  fe ff         3700   3712 FOUTR:  CPI     0FFH    ;TEST IF -1
1613  c2 1f 16      3701   3713         JNZ     FOUTS   ;ELSE -2
1616  2b            3702   3714         DCX     H       ;POINT SIGNIFICANT
1617  7e            3703   3715         MOV     A,M     ;GET THE CHAR
1618  36 2e         3704   3716         MVI     M,'.'   ;MOVE THE DOT
161a  23            3705   3717         INX     H       ;POINT NEXT
161b  77            3706   3718         MOV     M,A     ;SHIFT THE DIGIT
161c  c3 fc 15      3707   3719         JMP     FOUTO   ;GO ZERO SUPPRESS
161f  2b            3708   3720 FOUTS:  DCX     H       ;POINT ONE TO LEFT
1620  7e            3709   3721         MOV     A,M     ;PICK UP DIGIT
1621  36 30         3710   3722         MVI     M,'0'   ;REPLACE
1623  23            3711   3723         INX     H       ;POINT RIGHT
1624  77            3712   3724         MOV     M,A     ;PUT THE DIGIT
1625  62            3713   3725         MOV     H,D     ;GET LOW ADDR
1626  6b            3714   3726         MOV     L,E     ;POINT LAST DIGIT
1627  06 06         3715   3727         MVI     B,6     ;CTR
1629  2b            3716   3728 FOUTT:  DCX     H       ;POINT PRITO
162a  7e            3717   3729         MOV     A,M     ;GET A DIGIT
162b  23            3718   3730         INX     H       ;POINT
162c  77            3719   3731         MOV     M,A     ;PUT IT ONE TO RIGHT
162d  2b            3720   3732         DCX     H       ;POINT
162e  05            3721   3733         DCR     B       ;DECR CTR
162f  c2 29 16      3722   3734         JNZ     FOUTT   ;LOOP
1632  36 2e         3723   3735         MVI     M,'.'   ;MOVE THE DOT
1634  c3 fc 15      3724   3736         JMP     FOUTO   ;CONTINUE
                    3725   3737 ;
1637  =             3726   3738 FADD    EQU     $
                    3727   3739 ;
                    3728   3740 ;
                    3729   3741 ; FLOATING POINT ADD THE NUMBER AT (H,L) TO THE FACC
                    3730   3742 ;
                    3731   3743 ;
1637  23            3732   3744         INX     H       ;POINT FIRST DIGIT
1638  7e            3733   3745         MOV     A,M     ;LOAD IT
1639  b7            3734   3746         ORA     A       ;TEST IT
163a  ca ce 18      3735   3747         JZ      FTEST   ;BRIF ZERO
163d  2b            3736   3748         DCX     H       ;POINT BACK
163e  cd ce 18      3737   3749         CALL    FTEST   ;GO TEST SIGN OF FACC
1641  ca 28 00      3738   3750         JZ      RST5    ;JUST LOAD IF FACC = 0
1644  cd dc 18      3739   3751         CALL    FEXP    ;GO GET EXPONENT
1647  47            3740   3752         MOV     B,A     ;SAVE EXPONENT
1648  7e            3741   3753         MOV     A,M     ;GET EXPONENT OF ADDR
1649  cd dc 18      3742   3754         CALL    FEXP    ;GO GET EXPONENT
164c  4f            3743   3755         MOV     C,A     ;SAVE THE EXPONENT
164d  90            3744   3756         SUB     B       ;GET DIFFERENCE OF TWO EXPONENTS
164e  ca 63 16      3745   3757         JZ      FADD4   ;BRIF THEY'RE EQ
1651  f2 56 16      3746   3758         JP      FADD3   ;BRIF DIFFERENCE IS POSITIVE
1654  2f            3747   3759         CMA             ;COMPLEMENT ACC
1655  3c            3748   3760         INR     A       ;PLUS ONE (TWO'S COMPLEMENT)
1656  fe 18         3749   3761 FADD3:  CPI     24      ;COMPARE DIFFERENCE TO MAX
1658  da 63 16      3750   3762         JC      FADD4   ;BRIF LESS
165b  78            3751   3763         MOV     A,B     ;GET EXPON OF ADDUEND
165c  91            3752   3764         SUB     C       ;GET TRUE DIFFERENCE AGAIN
165d  f2 ce 18      3753   3765         JP      FTEST   ;BRIF FACC > ADDER
1660  c3 28 00      3754   3766         JMP     RST5    ;ELSE, ADDER > FACC
1663  f5            3755   3767 FADD4:  PUSH    PSW     ;SAVE DIFFERENCE
1664  c5            3756   3768         PUSH    B       ;SAVE EXPONENTS
1665  11 5c 22      3757   3769         LXI     D,FTEMP ;GET ADDR OF TEMP ACC
1668  cd 56 1c      3758   3770         CALL    CPY4H
166b  c1            3759   3771         POP     B       ;GET EXPONENTS
166c  f1            3760   3772         POP     PSW     ;GET DIFFERENCE
166d  ca 94 16      3761   3773         JZ      FADD9   ;JUST ADD IF ZERO
1670  21 5d 22      3762   3774         LXI     H,FTEMP+1       ;DEFAULT
1673  f5            3763   3775         PUSH    PSW     ;SAVE DIFFERENCE
1674  78            3764   3776         MOV     A,B     ;GET FACC EXPON
1675  91            3765   3777         SUB     C       ;MINUS FTEMP EXPON
1676  f2 86 16      3766   3778         JP      FADD6   ;BRIF TEMP MUST BE SHIFTED
1679  21 58 22      3767   3779         LXI     H,FACC  ;POINT FLOAT ACC
167c  79            3768   3780         MOV     A,C     ;GET EXPONENT, SIGN
167d  e6 7f         3769   3781         ANI     7FH     ;STRIP EXP SIGN
167f  4f            3770   3782         MOV     C,A     ;PUT BACK
1680  7e            3771   3783         MOV     A,M     ;GET THE EXP
1681  e6 80         3772   3784         ANI     80H     ;STRIP OFF OLD EXPON
1683  b1            3773   3785         ORA     C       ;MOVE ADDR EXPON TO IT
1684  77            3774   3786         MOV     M,A     ;REPLACE
1685  23            3775   3787         INX     H       ;POINT FIRST DATA BYTE
1686  f1            3776   3788 FADD6:  POP     PSW     ;GET DIFFER
1687  4f            3777   3789         MOV     C,A     ;SAVE IT
1688  06 03         3778   3790 FADD7:  MVI     B,3     ;LOOP CTR (INNER)
168a  af            3779   3791         XRA     A       ;INIT CARRY TO Z
168b  e5            3780   3792         PUSH    H       ;SAVE ADDR
168c  cd fb 18      3781   3793         CALL    FSHFT   ;GO SHIFT
168f  e1            3782   3794         POP     H       ;GET ADDR
1690  0d            3783   3795         DCR     C       ;DECR CTR
1691  c2 88 16      3784   3796         JNZ     FADD7   ;LOOP
1694  =             3785   3797 FADD9   EQU     $
1694  21 5c 22      3786   3798         LXI     H,FTEMP
1697  3a 58 22      3787   3799         LDA     FACC    ;GET EXPONENT
169a  ae            3788   3800         XRA     M       ;SEE IF SIGNS THE SAME
169b  11 5b 22      3789   3801         LXI     D,FACC+3        ;POINT LEAST SIGN BYTE
169e  21 5f 22      3790   3802         LXI     H,FTEMP+3
16a1  fa bc 16      3791   3803         JM      FADDA   ;BRIF SIGNS DIFFERENT
16a4  cd ee 18      3792   3804         CALL    FADT3   ;ADD 3 BYTES
16a7  d2 ce 18      3793   3805         JNC     FTEST   ;BRIF NO OVERFLOW
16aa  eb            3794   3806         XCHG            ;POINT HL TO FACC
16ab  cd 89 17      3795   3807         CALL    SVSGN   ;SAVE SIGN, RETURN EXPONENT
16ae  3c            3796   3808         INR     A       ;INCREMENT EXPONENT
16af  cd 91 17      3797   3809         CALL    RSSGN   ;RESTORE SIGN TO EXPONENT
16b2  23            3798   3810         INX     H       ;POINT DATA
16b3  37            3799   3811         STC             ;SET CY
16b4  06 03         3800   3812         MVI     B,3     ;CTR
16b6  cd fb 18      3801   3813         CALL    FSHFT   ;GO SHIFT IT
16b9  c3 ce 18      3802   3814         JMP     FTEST   ;RETURN
16bc  =             3803   3815 FADDA   EQU     $
16bc  06 03         3804   3816         MVI     B,3
16be  cd e3 18      3805   3817         CALL    FSUBT   ;SUBTRACT
16c1  d2 dd 16      3806   3818         JNC     FNORM   ;BRIF NO BORROW
16c4  21 5b 22      3807   3819         LXI     H,FACC+3        ;MUST NEGATE
16c7  06 03         3808   3820         MVI     B,3
16c9  37            3809   3821         STC
16ca  7e            3810   3822 FNEG1:  MOV     A,M     ;GET BYTE
16cb  2f            3811   3823         CMA
16cc  d2 d1 16      3812   3824         JNC     FNEG2
16cf  c6 01         3813   3825         ADI     1       ;INCREMENT + COMPLEMENT=NEGATE
16d1  77            3814   3826 FNEG2:  MOV     M,A
16d2  2b            3815   3827         DCX     H
16d3  05            3816   3828         DCR     B
16d4  c2 ca 16      3817   3829         JNZ     FNEG1
16d7  cd dd 16      3818   3830         CALL    FNORM
16da  c3 7a 0c      3819   3831         JMP     NEG     ;REVERSE SIGN
                    3820   3832 ;PAGE
                    3821   3833 ;
16dd  =             3822   3834 FNORM   EQU     $
                    3823   3835 ;
                    3824   3836 ;
                    3825   3837 ; NORMALIZE THE FLOATING ACCUMULATOR
                    3826   3838 ; THAT IS, THE FIRST BIT MUST BE SIGNIFICANT
                    3827   3839 ;
                    3828   3840 ;
16dd  21 5b 22      3829   3841         LXI     H,FACC+3        ;POINT LSB
16e0  7e            3830   3842         MOV     A,M     ;LOAD IT
16e1  2b            3831   3843         DCX     H       ;POINT PRIOR
16e2  b6            3832   3844         ORA     M       ;MERGE
16e3  2b            3833   3845         DCX     H       ;POINT PRIOR
16e4  b6            3834   3846         ORA     M       ;MERGE
16e5  2b            3835   3847         DCX     H
16e6  46            3836   3848         MOV     B,M     ;SAVE EXPONENT
16e7  77            3837   3849         MOV     M,A     ;CLEAR
16e8  c8            3838   3850         RZ              ;RETURN ON NOTHING TO NORMALIZE
16e9  70            3839   3851         MOV     M,B     ;RESTORE EXP
16ea  c5            3840   3852         PUSH    B       ;SAVE C FOR CALLER
16eb  cd 89 17      3841   3853         CALL    SVSGN   ;SAVE SIGN
16ee  77            3842   3854         MOV     M,A     ;STORE EXPANDED EXPONENT
16ef  23            3843   3855 FNRM1:  INX     H       ;POINT TO MOST SIGN BYTE
16f0  7e            3844   3856         MOV     A,M     ;GET MSB
16f1  b7            3845   3857         ORA     A       ;TEST IT
16f2  fa 05 17      3846   3858         JM      FNRM3   ;BRIF NORMALIZED
16f5  23            3847   3859         INX     H       ;POINT LSB
16f6  23            3848   3860         INX     H
16f7  06 03         3849   3861         MVI     B,3     ;SHIFT COUNT
16f9  7e            3850   3862 FNRM2:  MOV     A,M     ;SHIFT LEFT
16fa  17            3851   3863         RAL
16fb  77            3852   3864         MOV     M,A
16fc  2b            3853   3865         DCX     H
16fd  05            3854   3866         DCR     B
16fe  c2 f9 16      3855   3867         JNZ     FNRM2
1701  35            3856   3868         DCR     M       ;ADJUST EXPONENT
1702  c3 ef 16      3857   3869         JMP     FNRM1   ;LOOP
1705  2b            3858   3870 FNRM3:  DCX     H       ;POINT BACK TO EXPONENT
1706  7e            3859   3871         MOV     A,M
1707  cd 91 17      3860   3872         CALL    RSSGN   ;RESTORE SIGN
170a  c1            3861   3873         POP     B       ;RESTORE C
170b  c9            3862   3874         RET
                    3863   3875 ;
170c  =             3864   3876 FSUB    EQU     $
                    3865   3877 ;
                    3866   3878 ;
                    3867   3879 ; FLOATING POINT SUBTRACT THE NUMBER AT (H,L) FROM THE FACC
                    3868   3880 ;
                    3869   3881 ;
170c  cd 7a 0c      3870   3882         CALL    NEG     ;NEGATE FACC
170f  cd 37 16      3871   3883         CALL    FADD    ;ADD
1712  cd 7a 0c      3872   3884         CALL    NEG     ;NEGATE RESULT
1715  c3 ce 18      3873   3885         JMP     FTEST
                    3874   3886 ;PAGE
                    3875   3887 ;
1718  =             3876   3888 FMUL    EQU     $
                    3877   3889 ;
                    3878   3890 ;
                    3879   3891 ; FLOATING POINT MULTIPLY THE NUMBER AT (H,L) TO THE FACC
                    3880   3892 ;
                    3881   3893 ;
1718  cd ce 18      3882   3894         CALL    FTEST   ;TEST FACC
171b  c8            3883   3895         RZ              ;RETURN IF ZERO
171c  23            3884   3896         INX     H       ;POINT 1ST DIGIT OF MULTIPLIER
171d  7e            3885   3897         MOV     A,M     ;LOAD IT
171e  2b            3886   3898         DCX     H       ;RESTORE
171f  b7            3887   3899         ORA     A       ;TEST IF ZERO
1720  ca 28 00      3888   3900         JZ      RST5    ;GO LOAD TO FACC IF IT IS
1723  e5            3889   3901         PUSH    H       ;SAVE MULTIPLIER ADDRESS
1724  cd 7f 17      3890   3902         CALL    MDSGN   ;GET SIGN PRODUCT, & BOTH EXPONENTS
1727  80            3891   3903         ADD     B       ;ADD EXPONENTS
1728  cd 91 17      3892   3904         CALL    RSSGN   ;RESTORE SIGN
172b  e1            3893   3905         POP     H       ;RESTORE
172c  11 65 22      3894   3906         LXI     D,FTEMP+9       ;POINT TEMP STORAGE
172f  06 03         3895   3907         MVI     B,3     ;BYTE COUNT
1731  23            3896   3908         INX     H       ;POINT MSD
1732  cd 58 1c      3897   3909         CALL    COPYH   ;MOVE MULTIPLIER
1735  21 5c 22      3898   3910         LXI     H,FTEMP ;POINT DIGIT 7 OF RESULT
1738  06 06         3899   3911         MVI     B,6     ;LOOP CTR
173a  cd 5e 1c      3900   3912         CALL    ZEROM   ;GO ZERO EIGHT BYTES
173d  11 59 22      3901   3913         LXI     D,FACC+1        ;POINT 1ST DIGIT OF ACC
1740  06 03         3902   3914         MVI     B,3     ;LOOP CTR
1742  1a            3903   3915 FMUL5:  LDAX    D       ;GET AN ACC DIGIT PAIR
1743  77            3904   3916         MOV     M,A     ;PUT TO TEMP STORAGE
1744  af            3905   3917         XRA     A       ;ZERO A
1745  12            3906   3918         STAX    D       ;CLEAR ACC
1746  13            3907   3919         INX     D       ;POINT NEXT
1747  23            3908   3920         INX     H       ;DITTO
1748  05            3909   3921         DCR     B       ;DECR CTR
1749  c2 42 17      3910   3922         JNZ     FMUL5   ;LOOP
174c  0e 18         3911   3923         MVI     C,24    ;OUTTER LOOP CTR
174e  06 03         3912   3924 FMUL6:  MVI     B,3     ;CTR
1750  21 65 22      3913   3925         LXI     H,FTEMP+9       ;POINT MULTIPLIER
1753  af            3914   3926         XRA     A       ;CLEAR CY
1754  7e            3915   3927 FMUL7:  MOV     A,M     ;GET BYTE
1755  1f            3916   3928         RAR             ;SHIFT RIGHT
1756  77            3917   3929         MOV     M,A     ;PUT DOWN
1757  23            3918   3930         INX     H       ;POINT NEXT
1758  05            3919   3931         DCR     B       ;DECR CTR
1759  c2 54 17      3920   3932         JNZ     FMUL7   ;LOOP
175c  d2 6a 17      3921   3933         JNC     FMUL8   ;BRIF ZERO BIT
175f  11 5e 22      3922   3934         LXI     D,FTEMP+2       ;POINT RESULT
1762  21 64 22      3923   3935         LXI     H,FTEMP+8       ;POINT MULTIPLICAND
1765  06 06         3924   3936         MVI     B,6     ;SIX BYTE ADD
1767  cd f0 18      3925   3937         CALL    FADDT   ;GO ADD
176a  06 06         3926   3938 FMUL8:  MVI     B,6     ;SIZ BYTE SHIFT
176c  21 64 22      3927   3939         LXI     H,FTEMP+8       ;POINT MULTIPLICAND
176f  af            3928   3940         XRA     A       ;CLEAR CY
1770  7e            3929   3941 FMUL9:  MOV     A,M     ;GET BYTE
1771  17            3930   3942         RAL             ;SHIFT LEFT
1772  77            3931   3943         MOV     M,A     ;PUT BACT
1773  2b            3932   3944         DCX     H       ;POINT NEXT BYTE
1774  05            3933   3945         DCR     B       ;DECR CTR
1775  c2 70 17      3934   3946         JNZ     FMUL9   ;LOOP
1778  0d            3935   3947         DCR     C       ;DEC BIT COUNT
1779  c2 4e 17      3936   3948         JNZ     FMUL6   ;CONTINUE
177c  c3 dd 16      3937   3949         JMP     FNORM   ;GO NORMALIZE
                    3938   3950 ;
                    3939   3951 ; MDSGN   GET SIGN PRODUCT AND EXPONENTS FOR MULT & DIV
                    3940   3952 ; ON ENTRY:
                    3941   3953 ;       (HL) = ONE NUMBER
                    3942   3954 ;       (FACC)=THE OTHER
                    3943   3955 ; ON RETURN:
                    3944   3956 ;       A = EXPONENT OF FACC(EXPANDED)
                    3945   3957 ;       B = OTHER EXPONENT
                    3946   3958 ;       C = SIGN PRODUCT
                    3947   3959 ;       HL DESTROYED
                    3948   3960 ;
177f  cd 89 17      3949   3961 MDSGN:  CALL    SVSGN   ;GET SIGN IN C, EXP IN A
1782  47            3950   3962         MOV     B,A     ;SAVE EXPONENT
1783  21 58 22      3951   3963         LXI     H,FACC
1786  79            3952   3964         MOV     A,C     ;GET SIGN
1787  86            3953   3965         ADD     M       ;MULTIPLY SIGNS
1788  77            3954   3966         MOV     M,A     ;PUT DOWN
                    3955   3967 ;
                    3956   3968 ; SVSGN         GET SIGN AND EXP
                    3957   3969 ; ON ENTRY:
                    3958   3970 ;       (HL) = EXPONENT
                    3959   3971 ; ON RETURN:
                    3960   3972 ;       A = EXPANDED EXPONENT
                    3961   3973 ;       C = SIGN IN HI ORDER BIT
                    3962   3974 ;
1789  7e            3963   3975 SVSGN:  MOV     A,M     ;GET EXPONENT
178a  e6 80         3964   3976         ANI     80H     ;ISOLATE SIGN
178c  4f            3965   3977         MOV     C,A
178d  7e            3966   3978         MOV     A,M
178e  c3 dc 18      3967   3979         JMP     FEXP    ;EXPAND EXP AND RETURN
                    3968   3980 ;
                    3969   3981 ; RSSGN         RESTORE SIGN TO EXPONENT
                    3970   3982 ; ON ENTRY:
                    3971   3983 ;       (HL)=EXPONENT
                    3972   3984 ;       A = EXPANDED EXPONENT
                    3973   3985 ;       C = SIGN
                    3974   3986 ; ON RETURN:
                    3975   3987 ;       A = EXPONENT
                    3976   3988 ;       (HL) = EXPONENT WITH SIGN
                    3977   3989 ;       Z,M BITS SET FOR EXPONENT
                    3978   3990 ;
1791  cd 71 18      3979   3991 RSSGN:  CALL    FOVUN   ;CHECK FOR OVER/UNDERFLOW
1794  e6 7f         3980   3992         ANI     7FH     ;REMOVE EXPONENT SIGN
1796  b1            3981   3993         ORA     C       ;ADD SIGN
1797  77            3982   3994         MOV     M,A     ;SET DOWN
1798  c3 ce 18      3983   3995         JMP     FTEST   ;SET Z,M BITS
                    3984   3996 ;PAGE
                    3985   3997 ;
179b  =             3986   3998 FDIV    EQU     $
                    3987   3999 ;
                    3988   4000 ;
                    3989   4001 ; FLOATING POINT DIVIDE THE NUMBER AT (H,L) INTO THE FACC
                    3990   4002 ;
                    3991   4003 ;
179b  cd ce 18      3992   4004         CALL    FTEST   ;TEST IF FACC ZERO
179e  c8            3993   4005         RZ              ;RETURN IF IT IS
179f  23            3994   4006         INX     H       ;POINT 1ST DIGIT OF DIVISOR
17a0  7e            3995   4007         MOV     A,M     ;LOAD IT
17a1  2b            3996   4008         DCX     H       ;POINT BACK
17a2  b7            3997   4009         ORA     A       ;TEST IF ZERO
17a3  ca 07 1c      3998   4010         JZ      ZMERR   ;DIVISION BY ZERO = ERROR
17a6  e5            3999   4011         PUSH    H       ;SAVE DIVISOR PTR
17a7  cd 7f 17      4000   4012         CALL    MDSGN   ;GET SIGN ON STACK, EXPS INTO A,B
17aa  90            4001   4013         SUB     B       ;SUBTRACT EXPONENTS
17ab  3c            4002   4014         INR     A       ;PLUS ONE
17ac  cd 91 17      4003   4015         CALL    RSSGN   ;SET SIGN/EXPONENT IN FACC
17af  11 59 22      4004   4016         LXI     D,FACC+1
17b2  21 5c 22      4005   4017         LXI     H,FTEMP ;POINT TEMPORARY STORAGE
17b5  36 00         4006   4018         MVI     M,0     ;CLEAR MSB
17b7  23            4007   4019         INX     H       ;POINT NEXT
17b8  06 03         4008   4020         MVI     B,3     ;LOOP CTR
17ba  1a            4009   4021 FDIV3:  LDAX    D       ;GET BYTE FROM FACC
17bb  77            4010   4022         MOV     M,A     ;PUT TO FTEMP
17bc  af            4011   4023         XRA     A       ;CLEAR A
17bd  12            4012   4024         STAX    D       ;ZERO FACC
17be  23            4013   4025         INX     H       ;POINT NEXT
17bf  13            4014   4026         INX     D       ;DITTO
17c0  05            4015   4027         DCR     B       ;DECR CTR
17c1  c2 ba 17      4016   4028         JNZ     FDIV3   ;LOOP
17c4  d1            4017   4029         POP     D       ;GET ADDR
17c5  06 03         4018   4030         MVI     B,3     ;LOOP CTR
17c7  13            4019   4031         INX     D       ;POINT MSD OF DIVISOR
17c8  36 00         4020   4032         MVI     M,0     ;CLEAR MSB
17ca  23            4021   4033         INX     H       ;POINT NEXT
17cb  cd 4d 1c      4022   4034         CALL    COPYD   ;GO MOVE IT
17ce  0e 18         4023   4035         MVI     C,24    ;OUTER LOOP CTR
17d0  11 5f 22      4024   4036 FDIV5:  LXI     D,FTEMP+3       ;POINT DIVIDEND
17d3  21 63 22      4025   4037         LXI     H,FTEMP+7       ;AND DIVISOR
17d6  06 04         4026   4038         MVI     B,4     ;CTR
17d8  cd e3 18      4027   4039         CALL    FSUBT   ;GO SUBTRACT
17db  d2 ea 17      4028   4040         JNC     FDIV6   ;BRIF NO GO
17de  11 5f 22      4029   4041         LXI     D,FTEMP+3       ;POINT DIVIDEND
17e1  21 63 22      4030   4042         LXI     H,FTEMP+7       ;AND DIVISOR
17e4  06 04         4031   4043         MVI     B,4     ;CTR
17e6  cd f0 18      4032   4044         CALL    FADDT   ;GO RE-ADD
17e9  37            4033   4045         STC             ;TURN ON CY
17ea  3f            4034   4046 FDIV6:  CMC             ;REVERSE CY
17eb  06 03         4035   4047         MVI     B,3     ;CTR
17ed  21 5b 22      4036   4048         LXI     H,FACC+3        ;POINT LSB
17f0  7e            4037   4049 FDIV7:  MOV     A,M     ;LOAD BYTE
17f1  17            4038   4050         RAL             ;SHIFT LEFT
17f2  77            4039   4051         MOV     M,A     ;REPLACE
17f3  2b            4040   4052         DCX     H       ;POINT NEXT
17f4  05            4041   4053         DCR     B       ;DECR CTR
17f5  c2 f0 17      4042   4054         JNZ     FDIV7   ;LOOP
17f8  af            4043   4055         XRA     A       ;CLEAR FLAGS
17f9  06 04         4044   4056         MVI     B,4     ;CTR
17fb  21 5f 22      4045   4057         LXI     H,FTEMP+3       ;POINT-DIVIDEND
17fe  7e            4046   4058 FDIV8:  MOV     A,M     ;LOAD BYTE
17ff  17            4047   4059         RAL             ;SHIFT LEFT
1800  77            4048   4060         MOV     M,A     ;REPLACE
1801  2b            4049   4061         DCX     H       ;POINT ENXT
1802  05            4050   4062         DCR     B       ;DECR CTR
1803  c2 fe 17      4051   4063         JNZ     FDIV8   ;LOOP
1806  0d            4052   4064         DCR     C       ;DECR OTR CTR
1807  c2 d0 17      4053   4065         JNZ     FDIV5   ;LOOP
180a  c3 dd 16      4054   4066         JMP     FNORM   ;WRAPUP
                    4055   4067 ;
                    4056   4068 ; UTILITY ROUTINE TO GET A VARIABLE'S ADDRESS TO H,L
                    4057   4069 ;
180d  11 20 21      4058   4070 GETST:  LXI     D,STRIN ;POINT BUFFER
1810  06 00         4059   4071         MVI     B,0     ;INIT CTR
1812  7e            4060   4072         MOV     A,M     ;GET THE CHAR
1813  fe 22         4061   4073         CPI     '"'     ;TEST IF LIT TYPE
1815  ca 2e 18      4062   4074         JZ      GETS2   ;BRIF IS
1818  fe 27         4063   4075         CPI     27H     ;TEST IF QUOTED LITERAL
181a  ca 2e 18      4064   4076         JZ      GETS2   ;BRIF IS
181d  fe 2c         4065   4077 GETS1:  CPI     ','     ;TEST IF COMMA
181f  ca 41 18      4066   4078         JZ      GETS5   ;BRIF IS
1822  b7            4067   4079         ORA     A       ;TEST IF END
1823  ca 41 18      4068   4080         JZ      GETS5   ;BRIF IS
1826  04            4069   4081         INR     B       ;COUNT IT
1827  13            4070   4082         INX     D       ;POINT NEXT
1828  12            4071   4083         STAX    D       ;PUT CHAR
1829  23            4072   4084         INX     H       ;POINT NEXT
182a  cf            4073   4085         RST     1       ;SKIP SPACES
182b  c3 1d 18      4074   4086         JMP     GETS1   ;LOOP
182e  4f            4075   4087 GETS2:  MOV     C,A     ;SAVE DELIM
182f  23            4076   4088 GETS3:  INX     H       ;SKIP THE QUOTE
1830  7e            4077   4089         MOV     A,M     ;GET NEXT CHAR
1831  b9            4078   4090         CMP     C       ;TEST IF END OF LITERAL
1832  ca 3f 18      4079   4091         JZ      GETS4   ;BRIF IS
1835  b7            4080   4092         ORA     A       ;TEST IF END OF LINE
1836  ca 1f 1c      4081   4093         JZ      CVERR   ;BRIF IS
1839  04            4082   4094         INR     B       ;COUNT IT
183a  13            4083   4095         INX     D       ;POINT NEXT
183b  12            4084   4096         STAX    D       ;PUT CHAR
183c  c3 2f 18      4085   4097         JMP     GETS3   ;LOOP
183f  23            4086   4098 GETS4:  INX     H       ;SKIP END QUOTE
1840  cf            4087   4099         RST     1       ;SKIP TRAILING SPACES
1841  11 20 21      4088   4100 GETS5:  LXI     D,STRIN ;POINT BEGIN BUFFER
1844  78            4089   4101         MOV     A,B     ;GET COUNT
1845  12            4090   4102         STAX    D       ;PUT COUNT
1846  d1            4091   4103         POP     D       ;GET RETURN ADDR
1847  eb            4092   4104         XCHG            ;FLIP/FLOP
1848  e3            4093   4105         XTHL            ;PUT RET ON STACK, HL OF VAR IN HL
1849  d5            4094   4106         PUSH    D       ;SAVE H,L OF LOC
184a  cd 31 06      4095   4107         CALL    LET2A   ;GO STORE STRING
184d  e1            4096   4108         POP     H       ;RESTORE LOCATION
184e  c9            4097   4109         RET             ;RETURN
184f  cd c9 1b      4098   4110 GETS8:  CALL    VAR     ;GET VAR NAME
1852  d5            4099   4111         PUSH    D       ;SAVE ON STACK
1853  7a            4100   4112         MOV     A,D     ;GET HI BYTE
1854  b7            4101   4113         ORA     A       ;TEST IF ARRAY
1855  f2 6c 18      4102   4114         JP      GETS9   ;BRIF NOT
1858  cd 34 1b      4103   4115         CALL    SEARC   ;GO GET ARRAY PARAMS
185b  3e ff         4104   4116         MVI     A,0FFH  ;TURN ON SW
185d  32 72 20      4105   4117         STA     DIMSW   ;SET IT
1860  e3            4106   4118         XTHL            ;SWAP ADDR ON STACK
1861  cd 80 0f      4107   4119         CALL    EXPR    ;GO GET ROW, COL PTRS
1864  e3            4108   4120         XTHL            ;SWAP ADDR ON STACK
1865  cd 85 18      4109   4121         CALL    SUBSC   ;GO POINT TO ENTRY
1868  eb            4110   4122         XCHG            ;EXCHANGE
1869  e1            4111   4123         POP     H       ;GET ADDRESS OF STMT
186a  c1            4112   4124         POP     B       ;GET NAME
186b  c9            4113   4125         RET             ;RETURN
186c  cd 34 1b      4114   4126 GETS9:  CALL    SEARC   ;FIND ADDR
186f  c1            4115   4127         POP     B       ;RESTORE NAME
1870  c9            4116   4128         RET             ;RETURN
                    4117   4129 ;
1871  =             4118   4130 FOVUN   EQU     $
                    4119   4131 ;
                    4120   4132 ; TEST EXPONENT FOR OVERFLO OR UNDERFLOW
                    4121   4133 ;
1871  b7            4122   4134         ORA     A       ;TEST IT
1872  f2 7d 18      4123   4135         JP      FOV1    ;BRIF POS.
1875  fe c1         4124   4136         CPI     0C1H    ;TEST FOR MAX NEG
1877  d0            4125   4137         RNC             ;RETURN IF NO UNDER.
1878  3e c1         4126   4138         MVI     A,0C1H  ;SET EXPONENT AT MINIMUM
187a  c3 2c 1c      4127   4139         JMP     UNERR
187d  fe 40         4128   4140 FOV1:   CPI     40H     ;TEST MAX POS
187f  d8            4129   4141         RC              ;RETURN IF NO OVER.
1880  3e 3f         4130   4142         MVI     A,3FH   ;SET EXPONENT AT MAXIMUM
1882  c3 27 1c      4131   4143         JMP     OVERR
                    4132   4144 ;
1885  =             4133   4145 SUBSC   EQU     $
                    4134   4146 ;
                    4135   4147 ;
                    4136   4148 ; COMPUTES SUBSCR ADDR
                    4137   4149 ; INPUT: B HAS ROW NUMBER (1ST SUB)
                    4138   4150 ;        D HAS COL NUMBER (2ND SUB)
                    4139   4151 ;        H HAS ADDR NAME
                    4140   4152 ;
1885  d5            4141   4153         PUSH    D       ;SAVE COL
1886  e7            4142   4154         RST     4       ;ADJUST H,L
1887  fc            4143   4155         DB      -4 AND 0FFH     ;BY FOUR
1888  56            4144   4156         MOV     D,M     ;GET HI
1889  2b            4145   4157         DCX     H       ;POINT LO
188a  5e            4146   4158         MOV     E,M     ;GET LO
188b  7a            4147   4159         MOV     A,D     ;GET HI
188c  b8            4148   4160         CMP     B       ;COMPARE
188d  da 0f 1c      4149   4161         JC      SNERR   ;BRIF EXCESS
1890  c2 98 18      4150   4162         JNZ     SUB1    ;BRIF NOT EQUAL
1893  7b            4151   4163         MOV     A,E     ;GET LO
1894  b9            4152   4164         CMP     C       ;COMPARE
1895  da 0f 1c      4153   4165         JC      SNERR   ;BRIF EXCESS
1898  2b            4154   4166 SUB1:   DCX     H       ;POINT HI COLS
1899  56            4155   4167         MOV     D,M     ;LOAD IT
189a  2b            4156   4168         DCX     H       ;POINT LO COLS
189b  5e            4157   4169         MOV     E,M     ;LOAD IT
189c  e3            4158   4170         XTHL            ;SAVE ADDRESS
189d  e5            4159   4171         PUSH    H       ;SAVE SUB COL
189e  d5            4160   4172         PUSH    D       ;SAVE DIM COLS
189f  13            4161   4173         INX     D       ;MAKE COLS=MAX+1 (ACCOUNT FOR 0 B??KE
18a0  21 00 00      4162   4174         LXI     H,0     ;GET A ZERO
18a3  78            4163   4175 SUB2:   MOV     A,B     ;GET HI
18a4  b1            4164   4176         ORA     C       ;PLUS LO
18a5  ca ad 18      4165   4177         JZ      SUB3    ;BRIF ZERO
18a8  19            4166   4178         DAD     D       ;ADD ONCE
18a9  0b            4167   4179         DCX     B       ;SUB ONCE
18aa  c3 a3 18      4168   4180         JMP     SUB2    ;LOOP
18ad  d1            4169   4181 SUB3:   POP     D       ;GET DIM COL
18ae  c1            4170   4182         POP     B       ;GET SUB COL
18af  7a            4171   4183         MOV     A,D     ;GET HI
18b0  b8            4172   4184         CMP     B       ;COMPARE
18b1  da 0f 1c      4173   4185         JC      SNERR   ;BRIF GT
18b4  c2 bc 18      4174   4186         JNZ     SUB4    ;BRIF NOT ZERO
18b7  7b            4175   4187         MOV     A,E     ;GET LO
18b8  b9            4176   4188         CMP     C       ;COMPARE
18b9  da 0f 1c      4177   4189         JC      SNERR   ;BRIF GT
18bc  09            4178   4190 SUB4:   DAD     B       ;ADD TO PROD
18bd  29            4179   4191         DAD     H       ;TIMES TWO
18be  29            4180   4192         DAD     H       ;TIMES FOUR
18bf  7d            4181   4193         MOV     A,L     ;GET LOW
18c0  2f            4182   4194         CMA             ;COMPLEMENT
18c1  c6 01         4183   4195         ADI     1       ;PLUS ONE
18c3  5f            4184   4196         MOV     E,A     ;SAVE IT
18c4  7c            4185   4197         MOV     A,H     ;GET HI
18c5  2f            4186   4198         CMA             ;COMPLEMENT
18c6  ce 00         4187   4199         ACI     0       ;PLUS CARRY
18c8  57            4188   4200         MOV     D,A     ;SAVE
18c9  e1            4189   4201         POP     H       ;GET ADDR (0,0)
18ca  19            4190   4202         DAD     D       ;COMPUTE (I,J) RIGHT SIDE
18cb  e7            4191   4203         RST     4       ;ADJUST H,L
18cc  fc            4192   4204         DB      -4 AND 0FFH
18cd  c9            4193   4205         RET             ;RETURN
18ce  =             4194   4206 FTEST   EQU     $
                    4195   4207 ;
                    4196   4208 ; TEST THE SIGN OF THE NUMBER IN THE FACC
                    4197   4209 ; RETURN WITH S & Z SET TO SIGN
                    4198   4210 ;
18ce  3a 59 22      4199   4211         LDA     FACC+1  ;GET MSD
18d1  b7            4200   4212         ORA     A       ;TEST IT
18d2  c8            4201   4213         RZ              ;RETURN IF ZERO
18d3  3a 58 22      4202   4214         LDA     FACC    ;GET SIGN&EXPON BYTE
18d6  f6 7f         4203   4215         ORI     7FH     ;TEST SIGN BIT ONLY
18d8  3a 58 22      4204   4216         LDA     FACC    ;RE-LOAD EXPON BYTE
18db  c9            4205   4217         RET             ;THEN RETURN
18dc  =             4206   4218 FEXP    EQU     $
                    4207   4219 ;
                    4208   4220 ; EXPAND EXPONENT INTO 8 BINARY BITS
                    4209   4221 ;
18dc  e6 7f         4210   4222         ANI     7FH     ;MASK MANTISA SIGN
18de  c6 40         4211   4223         ADI     40H     ;PROPAGATE CHAR SIGN TO LEFTMOST BIT
18e0  ee 40         4212   4224         XRI     40H     ;RESTORE ORIGINAL SIGN BIT
18e2  c9            4213   4225         RET             ;RETURN
                    4214   4226 ;
18e3  =             4215   4227 FSUBT   EQU     $
                    4216   4228 ;
                    4217   4229 ; SUBTRACT THE TWO MULTIPRECISION NUMBERS (D,E) & (H,L)
                    4218   4230 ;
18e3  af            4219   4231         XRA     A       ;TURN OF CY
18e4  1a            4220   4232 FSB1:   LDAX    D       ;GET A BYTE
18e5  9e            4221   4233         SBB     M       ;SUB OTHER BYTE
18e6  12            4222   4234         STAX    D       ;PUT DOWN
18e7  1b            4223   4235         DCX     D       ;POINT NEXT
18e8  2b            4224   4236         DCX     H       ;DITTO
18e9  05            4225   4237         DCR     B       ;DECR CTR
18ea  c2 e4 18      4226   4238         JNZ     FSB1    ;LOOP
18ed  c9            4227   4239         RET             ;RETURN
                    4228   4240 ;
                    4229   4241 ; ADD TWO MULTI-PRECISION NUMBERS (D,E) & (H,L)
                    4230   4242 ;
18ee  06 03         4231   4243 FADT3:  MVI     B,3
18f0  af            4232   4244 FADDT:  XRA     A       ;CLEAR STATUS
18f1  1a            4233   4245 FAD1:   LDAX    D       ;GET BYTE
18f2  8e            4234   4246         ADC     M       ;ADD OTHER BYTE
18f3  12            4235   4247         STAX    D       ;PUT DOWN
18f4  1b            4236   4248         DCX     D       ;POINT NEXT
18f5  2b            4237   4249         DCX     H       ;DITTO
18f6  05            4238   4250         DCR     B       ;DECR LOOP CTR
18f7  c2 f1 18      4239   4251         JNZ     FAD1    ;LOOP
18fa  c9            4240   4252         RET             ;RETURN
                    4241   4253 ;
18fb  =             4242   4254 FSHFT   EQU     $
                    4243   4255 ;
                    4244   4256 ; INCREMENTING SHIFT RIGHT
                    4245   4257 ;
18fb  7e            4246   4258         MOV     A,M     ;GET A BYTE
18fc  1f            4247   4259         RAR             ;SHIFT RIGHT
18fd  77            4248   4260         MOV     M,A     ;PUT DOWN
18fe  23            4249   4261         INX     H       ;POINT NEXT
18ff  05            4250   4262         DCR     B       ;DECR CTR
1900  c2 fb 18      4251   4263         JNZ     FSHFT   ;LOOP
1903  c9            4252   4264         RET             ;RETURN
                    4253   4265 ;PAGE
                    4254   4266 ;
1904  =             4255   4267 TERMI   EQU     $
                    4256   4268 ;
                    4257   4269 ; READ A LINE FROM THE TTY
                    4258   4270 ; FIRST PROMPT WITH THE CHAR IN THE A REG
                    4259   4271 ; TERMINATE THE LINE WITH A X'00'
                    4260   4272 ; IGNORE EMPTY LINES
                    4261   4273 ; CONTROL C WILL CANCLE THE LINE
                    4262   4274 ; CONTROL O WILL TOGGLE THE OUTPUT SWITCH
                    4263   4275 ; RUBOUT WILL DELETE THE LAST CHAR INPUT
                    4264   4276 ;
                    4265   4277 ;
1904  32 4f 22      4266   4278         STA     PROMP   ;SAVE THE PROMPT CHAR
1907  21 ce 20      4267   4279 REIN:   LXI     H,IOBUF ;POINT TO INPUT BUFFER
190a  36 00         4268   4280         MVI     M,0     ;MARK BEGIN
190c  23            4269   4281         INX     H       ;POINT START
190d  3a 4f 22      4270   4282         LDA     PROMP   ;GET THE PROMPT AGAIN
1910  cd 4f 19      4271   4283         CALL    TESTO   ;WRITE TO TERMINAL
1913  fe 3f         4272   4284         CPI     '?'     ;TEST IF Q.M.
1915  c2 1d 19      4273   4285         JNZ     TREAD   ;BRIF NOT
1918  3e 20         4274   4286         MVI     A,' '   ;GET SPACE
191a  cd 4f 19      4275   4287         CALL    TESTO   ;WRITE TO TERMINAL
191d  =             4276   4288 TREAD   EQU     $
                    4277   4289         IF      NOT CPM
191d  db 03         4278   4290         IN      TTY+1   ;GET TTY STATUS
191f  e6 02         4279   4291         ANI     2       ;TEST IF RXRDY
1921  ca 1d 19      4280   4292         JZ      TREAD   ;LOOP TIL CHAR
                    4281   4293         ENDIF
1924  cd 3f 1a      4282   4294         CALL    GETCH   ;GO READ THE CHAR
1927  77            4283   4295         MOV     M,A     ;PUT IN BUFFER
1928  fe 0a         4284   4296         CPI     0AH     ;TEST IF LINE FEED
192a  ca 1d 19      4285   4297         JZ      TREAD   ;IGNORE IF IT IS
192d  fe 0d         4286   4298         CPI     0DH     ;TEST IF CR
192f  c2 75 19      4287   4299         JNZ     NOTCR   ;BRIF NOT
1932  3a 71 20      4288   4300         LDA     TAPES   ;GET PAPER TAPE SWITCH
1935  1f            4289   4301         RAR             ;TEST IF LOAD
1936  d4 5a 19      4290   4302         CNC     CRLF    ;CR/LF IF NOT
1939  36 00         4291   4303 CR1:    MVI     M,0     ;MARK END
193b  3a 74 20      4292   4304         LDA     ILSW    ;GET INPUT LINE SW
193e  b7            4293   4305         ORA     A       ;TEST IT
193f  c0            4294   4306         RNZ             ;RETURN IF ON
1940  2b            4295   4307         DCX     H       ;POINT PRIOR
1941  7e            4296   4308         MOV     A,M     ;LOAD IT
1942  fe 20         4297   4309         CPI     20H     ;TEST IF SPACE
1944  ca 39 19      4298   4310         JZ      CR1     ;BRIF SPACE
1947  b7            4299   4311         ORA     A       ;TEST IF AT BEGINNING
1948  ca 07 19      4300   4312         JZ      REIN    ;BRIF IS (NULL LINE)
194b  21 cf 20      4301   4313         LXI     H,IOBUF+1       ;POINT BEGIN
194e  c9            4302   4314         RET             ;ELSE, RETURN
194f  =             4303   4315 TESTO   EQU     $
                    4304   4316         IF      NOT CPM
194f  f5            4305   4317         PUSH    PSW     ;SAVE CHAR
1950  db 03         4306   4318 TEST1:  IN      TTY+1   ;GET STATUS
1952  1f            4307   4319         RAR             ;TEST IF TXRDY
1953  d2 50 19      4308   4320         JNC     TEST1   ;LOOP TILL READY
1956  f1            4309   4321         POP     PSW     ;GET CHAR
1957  d3 02         4310   4322         OUT     TTY     ;WRITE IT
                    4311   4323         ENDIF
                    4312   4324         IF      CPM
                    4313   4325         PUSH    B       ;BIOS CALLS DESTROYS C,DE
                    4314   4326         PUSH    D
                    4315   4327         PUSH H
                    4316   4328         MOV     C,A     ;OUTPUT BYTE
                    4317   4329         CALL    BTOUT   ;CALL BIOS
                    4318   4330         POP H
                    4319   4331         POP     D       ;RESTORE
                    4320   4332         POP     B
                    4321   4333         ENDIF
                    4322   4334         IF      LARGE   ;SAVE ROOM ONLY IN 8+K VERSIONS
                    4323   4335         DB      0,0,0   ;SAVE ROOM FOR CALL TO USER ROUTINE
                    4324   4336         ENDIF
1959  c9            4325   4337         RET             ;RETURN
195a  3e 0d         4326   4338 CRLF:   MVI     A,0DH   ;LOAD A CR
195c  cd 4f 19      4327   4339         CALL    TESTO   ;WRITE IT
195f  3e 0a         4328   4340         MVI     A,0AH   ;LF
1961  cd 4f 19      4329   4341         CALL    TESTO   ;WRITE IT
1964  3e ff         4330   4342         MVI     A,255   ;GET RUBOUT CHAR
1966  06 fa         4331   4343         MVI     B,0FAH  ;LOAD 255-RUBOUT COUNT
1968  cd 4f 19      4332   4344 PAUZ:   CALL    TESTO   ;SEND RUBOUT
196b  04            4333   4345         INR     B       ;INCREMENT COUNT
196c  b8            4334   4346         CMP     B       ;COMPARE TO 255
196d  c2 68 19      4335   4347         JNZ     PAUZ    ;SET ANOTHER RUBOUT
1970  af            4336   4348         XRA     A       ;GET A ZERO
1971  32 76 22      4337   4349         STA     COLUM   ;RESET COLUMN POINTER
1974  c9            4338   4350         RET             ;RETURN
1975  fe 15         4339   4351 NOTCR:  CPI     15H     ;TEST IF CONTROL-U
1977  c2 83 19      4340   4352         JNZ     NOTCO   ;BRIF NOT
197a  cd 6d 1a      4341   4353         CALL    PRCNT   ;GO PRINT CONTROL-U
197d  cd 5a 19      4342   4354         CALL    CRLF    ;GET CR/LF
1980  c3 07 19      4343   4355         JMP     REIN    ;GO RE-ENTER
1983  fe 7f         4344   4356 NOTCO:  CPI     7FH     ;TEST IF RUBOUT
1985  c2 a6 19      4345   4357         JNZ     NOTBS   ;BRIF NOT
1988  3a 71 20      4346   4358         LDA     TAPES   ;GET PAPER TAPE SW
198b  1f            4347   4359         RAR             ;TEST IF LOAD
198c  da 1d 19      4348   4360         JC      TREAD   ;IGNORE IF LOAD
198f  2b            4349   4361         DCX     H       ;POINT PRIOR
1990  7e            4350   4362         MOV     A,M     ;LOAD PREV CHAR
1991  b7            4351   4363         ORA     A       ;TEST IF BEGIN
1992  ca b1 19      4352   4364         JZ      ECHO    ;BRIF IS
                    4353   4365 ;       MVI     A,'\'   ;BACK SLASH
1995  3e 5c         4354   4366         MVI     A,BACKSL;*UM* FIX FOR MACRO-80
1997  cd 4f 19      4355   4367         CALL    TESTO   ;WRITE IT
199a  7e            4356   4368         MOV     A,M     ;FETCH CHARACTER TO BE DISCARDED
199b  cd 4f 19      4357   4369         CALL    TESTO   ;WRITE IT
                    4358   4370 ;       MVI     A,'\'   ;BACK SLASH
199e  3e 5c         4359   4371         MVI     A,BACKSL;*UM* FIX FOR MACRO-80
19a0  cd 4f 19      4360   4372         CALL    TESTO   ;WRITE IT
19a3  c3 1d 19      4361   4373         JMP     TREAD   ;GET REPLACEMENT CHARACTER
19a6  =             4362   4374 NOTBS   EQU     $
                    4363   4375         IF      LARGE   ;CONTROL H WORKS ONLY ON 9K VERSION
                    4364   4376         CPI     8       ;TEST FOR ASCII BACKSPACE
                    4365   4377         JNZ     NOTCH   ;BRIF NOT CONTROL H
                    4366   4378         DCX     H       ;POINT PRIOR
                    4367   4379         MOV     A,M     ;FETCH CHARACTER
                    4368   4380         ORA     A       ;TEST FOR BEGINNING
                    4369   4381         JZ      ECHO    ;BRIF IT IS
                    4370   4382         PUSH    H       ;SAVE POSITION
                    4371   4383         LXI     H,RBOUT ;POINT RUBOUT SEQUENCE
                    4372   4384         CALL    TERMM   ;WRITE IT
                    4373   4385         POP     H       ;RESTORE H,L
                    4374   4386         JMP     TREAD   ;GET REPLACEMENT CHARACTER
                    4375   4387         ENDIF
19a6  3a 71 20      4376   4388 NOTCH:  LDA     TAPES   ;GET PAPER TAPE SWITCH
19a9  1f            4377   4389         RAR             ;FLAG TO CARRY
19aa  da b1 19      4378   4390         JC      ECHO    ;NO ECHO IF TAPE
19ad  7e            4379   4391         MOV     A,M     ;ELSE, LOAD THE CHAR
19ae  cd 4f 19      4380   4392         CALL    TESTO   ;ECHO THE CHARCTER
19b1  23            4381   4393 ECHO:   INX     H       ;POINT NEXT POSIT
19b2  c3 1d 19      4382   4394         JMP     TREAD   ;LOOP FOR NEXT
                    4383   4395 ;
19b5  =             4384   4396 TERMO   EQU     $
                    4385   4397 ;
                    4386   4398 ; TTY PRINT ROUTINE
                    4387   4399 ;
                    4388   4400 ; OUTPUT STRING OF CHARS
                    4389   4401 ; STARTING AT IOBUF +0 THRU END (FF OR FE OR 00)
                    4390   4402 ; FOLLOWING IMBEDDED CHARACTERS ARE INTERPRETED AS CONTROLS:
                    4391   4403 ; X'00' END OF BUFFER, TYPE CR/LF AND RETURN
                    4392   4404 ; X'FE' END OF BUFFER, RETURN (NO CR/LF)
                    4393   4405 ; X'FD' TYPE CR/LF, CONTINUE
                    4394   4406 ;
                    4395   4407 ; RETURN WITHOUT OUTPUT IF OUTPUT SW IS OFF
                    4396   4408 ;
19b5  3a 73 20      4397   4409         LDA     OUTSW   ;GET OUTPUT SW
19b8  b7            4398   4410         ORA     A       ;TEST IT
19b9  c0            4399   4411         RNZ             ;RETURN IF NO PRINT
19ba  21 ce 20      4400   4412         LXI     H,IOBUF ;POINT I/O BUFFER
19bd  7e            4401   4413 OT1:    MOV     A,M     ;LOAD A BYTE
19be  fe fe         4402   4414         CPI     0FEH    ;SEE IF END OF LINE (NO CR/LF)
19c0  c8            4403   4415         RZ              ;RETURN IF EQUAL
19c1  fe fd         4404   4416         CPI     0FDH    ;SEE IF IMBEDDED CR/LF
19c3  c2 cc 19      4405   4417         JNZ     OT2     ;BRIF NOT
19c6  cd 5a 19      4406   4418         CALL    CRLF    ;LINE FEED
19c9  c3 db 19      4407   4419         JMP     OT4     ;CONTINUE
19cc  b7            4408   4420 OT2:    ORA     A       ;TEST IF END OF OUTPUT
19cd  ca 5a 19      4409   4421         JZ      CRLF    ;BRIF IS
19d0  7e            4410   4422         MOV     A,M     ;LOAD THE BYTE
19d1  cd 4f 19      4411   4423         CALL    TESTO   ;TYPE IT
19d4  3a 76 22      4412   4424         LDA     COLUM   ;GET COLUMN POINTER
19d7  3c            4413   4425         INR     A       ;ADD ONE
19d8  32 76 22      4414   4426         STA     COLUM   ;RESTORE IT
19db  23            4415   4427 OT4:    INX     H       ;POINT NEXT
19dc  c3 bd 19      4416   4428         JMP     OT1     ;LOOP
19bd  =             4417   4429 TERMM   EQU     OT1
                    4418   4430 ;
19df  =             4419   4431 TABST   EQU     $
                    4420   4432 ;
                    4421   4433 ;
                    4422   4434 ; POSITION TTY AT NEXT TAB STOP
                    4423   4435 ;
                    4424   4436 ;
19df  3a 73 20      4425   4437         LDA     OUTSW   ;GET OUTPUT SWITCH
19e2  b7            4426   4438         ORA     A       ;TEST IT
19e3  c0            4427   4439         RNZ             ;RETURN IF SUPPRESSED
19e4  3a 76 22      4428   4440         LDA     COLUM   ;GET COLUMN POINTER
19e7  fe 38         4429   4441         CPI     56      ;COMPARE TO 56
19e9  d2 5a 19      4430   4442         JNC     CRLF    ;BRIF NO ROOM LEFT
19ec  47            4431   4443         MOV     B,A     ;SAVE IT
19ed  af            4432   4444         XRA     A       ;INIT POSITION
19ee  b8            4433   4445 TBLP:   CMP     B       ;COMPARE
19ef  ca f5 19      4434   4446         JZ      TBLP2
19f2  d2 fa 19      4435   4447         JNC     TBON    ;BRIF SHY OF TAB
19f5  c6 0e         4436   4448 TBLP2:  ADI     14      ;POINT NEXT STOP
19f7  c3 ee 19      4437   4449         JMP     TBLP    ;LOOP
19fa  32 76 22      4438   4450 TBON:   STA     COLUM   ;UPDATE CTR
19fd  90            4439   4451         SUB     B       ;COMPUTE NUMBER OF SPACES
19fe  47            4440   4452         MOV     B,A     ;SAVE IT
19ff  3e 20         4441   4453 TBSPA:  MVI     A,' '   ;SPACE TO REG A
1a01  cd 4f 19      4442   4454         CALL    TESTO   ;OUTPUT IT
1a04  05            4443   4455         DCR     B       ;SUB 1 FROM CTR
1a05  c8            4444   4456         RZ              ;RETURN IF ZERO
1a06  c3 ff 19      4445   4457         JMP     TBSPA   ;ELSE, LOOP
                    4446   4458 ;
1a09  =             4447   4459 LINEO   EQU     $
                    4448   4460 ;
                    4449   4461 ; UNPACK LINE NUMBER FROM (H,L) TO (D,E)
                    4450   4462 ; ZERO SUPPRESS LEADING ZEROS
                    4451   4463 ;
                    4452   4464 ;
1a09  c5            4453   4465         PUSH    B       ;PUSH B,C
1a0a  06 01         4454   4466         MVI     B,1     ;SET SWITCH
1a0c  cd 14 1a      4455   4467         CALL    LOUT    ;GO FORMAT 2 BYTES
1a0f  cd 14 1a      4456   4468         CALL    LOUT    ;THEN THE NEXT 2
1a12  c1            4457   4469         POP     B       ;RESTORE B,C
1a13  c9            4458   4470         RET             ;RETURN
                    4459   4471 ;
1a14  =             4460   4472 LOUT    EQU     $
1a14  7e            4461   4473         MOV     A,M     ;GET BYTE
1a15  e6 f0         4462   4474         ANI     0F0H    ;ISOLATE LEFT HALF
1a17  1f            4463   4475         RAR             ;SHIFT RIGHT 1 BIT
1a18  1f            4464   4476         RAR             ;AGAIN
1a19  1f            4465   4477         RAR             ;AGAIN
1a1a  1f            4466   4478         RAR             ;LAST TIME
1a1b  c2 22 1a      4467   4479         JNZ     NOTZ1   ;BRIF NOT ZERO
1a1e  b0            4468   4480         ORA     B       ;MERGE IN B
1a1f  c2 28 1a      4469   4481         JNZ     Z1      ;BRIF ZERO
1a22  06 00         4470   4482 NOTZ1:  MVI     B,0     ;RESET SWITCH
1a24  f6 30         4471   4483         ORI     30H     ;ZONE
1a26  12            4472   4484         STAX    D       ;PUT TO BUFFER
1a27  13            4473   4485         INX     D       ;POINT NEXT
1a28  7e            4474   4486 Z1:     MOV     A,M     ;LOAD BYTE
1a29  e6 0f         4475   4487         ANI     0FH     ;MASK
1a2b  c2 32 1a      4476   4488         JNZ     NOTZ2   ;BRIF NOT ZERO
1a2e  b0            4477   4489         ORA     B       ;MERGE SWITCH
1a2f  c2 38 1a      4478   4490         JNZ     Z2      ;BRIF ZERO
1a32  06 00         4479   4491 NOTZ2:  MVI     B,0     ;SET SWITCH OFF
1a34  f6 30         4480   4492         ORI     30H     ;ZONE
1a36  12            4481   4493         STAX    D       ;PUT TO BUFFER
1a37  13            4482   4494         INX     D       ;POINT TO NEXT
1a38  23            4483   4495 Z2:     INX     H       ;AND NEXT LINE BYTE
1a39  c9            4484   4496         RET             ;RETURN
                    4485   4497 ;
1a3a  =             4486   4498 TSTCC   EQU     $
                    4487   4499 ;
                    4488   4500 ; TEST IF KEY WAS PRESSED DURING EXECUTION
                    4489   4501 ; CANCEL IF CONTROL-C
                    4490   4502 ; TOGGLE OUTPUT SUPPRESS SW IF CONTROL-O
                    4491   4503 ;
                    4492   4504         IF      NOT CPM
1a3a  db 03         4493   4505         IN      TTY+1   ;GET TTY STATUS
1a3c  e6 02         4494   4506         ANI     2       ;MASK FOR RXRDY
1a3e  c8            4495   4507         RZ              ;RETURN IF NO CHAR
1a3f  db 02         4496   4508 GETCH:  IN      TTY     ;READ THE CHAR
1a41  e6 7f         4497   4509         ANI     7FH     ;TURN OFF PARITY
                    4498   4510         ENDIF
                    4499   4511         IF      CPM
                    4500   4512         ;NOTE: FOLLOWING CLOBBERS REGISTERS,
                    4501   4513         ; PUSH AND POP IF FOUND TO CREATE BUGS.
                    4502   4514         CALL    BTSTAT  ;CALL BIOS
                    4503   4515         RZ              ;RETURN ON NO CHAR
                    4504   4516 GETCH:  PUSH    B       ;SAVE REGS - CPM CAN CLOBBER
                    4505   4517         PUSH    D
                    4506   4518         PUSH    H
                    4507   4519         CALL    BTIN    ;CALL BIOS TO INPUT
                    4508   4520         POP     H
                    4509   4521         POP     D
                    4510   4522         POP     B
                    4511   4523         ENDIF
1a43  fe 03         4512   4524         CPI     3       ;TEST IF CONTROL C
1a45  c2 5e 1a      4513   4525         JNZ     TSTC1   ;BRIF NOT
1a48  cd 6d 1a      4514   4526         CALL    PRCNT   ;GO PRINT CONTROL-C
1a4b  3a 76 20      4515   4527         LDA     EDSW    ;GET MODE SW
1a4e  b7            4516   4528         ORA     A       ;TEST IT
1a4f  c2 dc 01      4517   4529         JNZ     KEY     ;**;BRIF COMMAND MODE
1a52  21 2d 1e      4518   4530         LXI     H,STOPM ;POINT MSG
1a55  cd bd 19      4519   4531         CALL    TERMM   ;GO PRINT IT
1a58  cd f1 1b      4520   4532         CALL    PRLIN   ;GO PRINT LINE
1a5b  c3 dc 01      4521   4533         JMP     KEY     ;GOTO READY
1a5e  fe 0f         4522   4534 TSTC1:  CPI     0FH     ;TEST IF CONTROL O
1a60  c0            4523   4535         RNZ             ;RETURN IF NOT
1a61  cd 6d 1a      4524   4536         CALL    PRCNT   ;GO PRINT CONTROL-O
1a64  3a 73 20      4525   4537         LDA     OUTSW   ;GET OUTPUT SWTICH
1a67  ee 01         4526   4538         XRI     1       ;TOGGLE
1a69  32 73 20      4527   4539         STA     OUTSW   ;PUT SW
1a6c  c9            4528   4540         RET             ;RETURN
                    4529   4541 ;
1a6d  =             4530   4542 PRCNT   EQU     $
                    4531   4543 ;
                    4532   4544 ;
                    4533   4545 ; PRINTS ^ AND CHAR
                    4534   4546 ;
1a6d  f5            4535   4547         PUSH    PSW     ;SAVE CHAR
                    4536   4548 ;       MVI     A,'^'   ;GET UP ARROW
1a6e  3e 5e         4537   4549         MVI     A,UPARR ;*UM* FIX FOR MACRO-80
1a70  cd 4f 19      4538   4550         CALL    TESTO   ;WRITE IT
1a73  f1            4539   4551         POP     PSW     ;GET CHAR
1a74  c6 40         4540   4552         ADI     64      ;TRNSLATE
1a76  c3 4f 19      4541   4553         JMP     TESTO   ;WRITE IT
                    4542   4554 ;PAGE
                    4543   4555 ;
1a79  =             4544   4556 COMP2   EQU     $
                    4545   4557 ;
                    4546   4558 ; CONTINUATION OF COMPARE (RST 2) ROUTINE
                    4547   4559 ;
1a79  b7            4548   4560         ORA     A       ;TEST IT
1a7a  c2 81 1a      4549   4561         JNZ     COMP5   ;BRIF NOT END
1a7d  af            4550   4562 COMP3:  XRA     A       ;SET EQUAL STATUS
1a7e  7e            4551   4563 COMP4:  MOV     A,M     ;GET LAST CHAR
1a7f  c1            4552   4564         POP     B       ;RESTORE B,C
1a80  c9            4553   4565         RET             ;RETURN
1a81  be            4554   4566 COMP5:  CMP     M       ;COMPARE THE TWO CHARS
1a82  ca 8e 1a      4555   4567         JZ      COMP6   ;BRIF EQUAL
1a85  78            4556   4568         MOV     A,B     ;GET COUNT
1a86  fe 03         4557   4569         CPI     3       ;GET IF >= 3
1a88  d2 7d 1a      4558   4570         JNC     COMP3   ;BRIF NOT LESS THAN 3
1a8b  c3 7e 1a      4559   4571         JMP     COMP4   ;BRIF LESS THAN 3 AND NOT EQUAL
1a8e  04            4560   4572 COMP6:  INR     B       ;COUNT IT
1a8f  13            4561   4573         INX     D       ;POINT NEXT LIT
1a90  23            4562   4574         INX     H       ;POINT NEXT VAR
1a91  c3 13 00      4563   4575         JMP     COMP1   ;CONTINUE
                    4564   4576 ;
1a94  =             4565   4577 EOL     EQU     $
                    4566   4578 ;
                    4567   4579 ; TESTS IF (H,L) IS END OF LINE
                    4568   4580 ; ERROR-DL IF NOT
                    4569   4581 ;
1a94  cf            4570   4582         RST     1       ;SKIP TO NON-BLANK
1a95  cd a8 1a      4571   4583         CALL    TSTEL   ;TEST IF END LINE
1a98  c2 0f 1c      4572   4584         JNZ     SNERR   ;ERROR IF NOT
1a9b  fe 3a         4573   4585         CPI     ':'     ;TEST FOR MULTIPLE STATEMENT
1a9d  c2 a3 1a      4574   4586         JNZ     EOL1    ;BRIF NOT
1aa0  32 74 22      4575   4587         STA     MULTI   ;SET SWITCH
1aa3  23            4576   4588 EOL1:   INX     H       ;POINT NEXT
1aa4  22 72 22      4577   4589         SHLD    ENDLI   ;SAVE POINTER
1aa7  c9            4578   4590         RET             ;RETURN
                    4579   4591 ;
1aa8  =             4580   4592 TSTEL   EQU     $
                    4581   4593 ;
                    4582   4594 ; TEST (H,L) FOR END OF STATEMENT (00H OR ':')
                    4583   4595 ; RETURN WITH Z SET IF IT IS
                    4584   4596 ;
1aa8  b7            4585   4597         ORA     A       ;TEST FOR ZERO
1aa9  c8            4586   4598         RZ              ;RETURN IF IS
1aaa  fe 3a         4587   4599         CPI     ':'     ;TEST FOR MULTIPLE STATEMENT
1aac  c9            4588   4600         RET             ;RETURN
                    4589   4601 ;
1aad  =             4590   4602 NOTEO   EQU     $
                    4591   4603 ;
                    4592   4604 ;
                    4593   4605 ; TEST IF (H,L) IS END OF LINE
                    4594   4606 ; RETURN IF NOT, ERROR-DL IF IS
                    4595   4607 ;
1aad  cf            4596   4608         RST     1       ;SKIP TO NON-BLANK
1aae  cd a8 1a      4597   4609         CALL    TSTEL   ;TEST IF END OF LINE
1ab1  ca 0f 1c      4598   4610         JZ      SNERR   ;ERROR IF IS
1ab4  c9            4599   4611         RET             ;ELSE, RETURN
                    4600   4612 ;
1ab5  =             4601   4613 PACK    EQU     $
                    4602   4614 ;
                    4603   4615 ; PACK LINE NUMBER FROM (H,L) TO B,C
                    4604   4616 ;
                    4605   4617 ;
1ab5  01 00 00      4606   4618         LXI     B,0     ;CLEAR B AND C
1ab8  3e 04         4607   4619         MVI     A,4     ;INIT DIGIT COUNTER
1aba  32 8d 22      4608   4620         STA     PRSW    ;SAVE A
1abd  7e            4609   4621 PK1:    MOV     A,M     ;GET CHAR
1abe  cd 2a 1b      4610   4622         CALL    NUMER   ;TEST FOR NUMERIC
1ac1  c0            4611   4623         RNZ             ;RETURN IF NOT NUMERIC
1ac2  e6 0f         4612   4624         ANI     0FH     ;STRIP OFF ZONE
1ac4  57            4613   4625         MOV     D,A     ;SAVE IT
1ac5  3a 8d 22      4614   4626         LDA     PRSW    ;GET COUNT
1ac8  3d            4615   4627         DCR     A       ;SUBTRACT ONE
1ac9  fa 0f 1c      4616   4628         JM      SNERR   ;BRIF ERROR
1acc  32 8d 22      4617   4629         STA     PRSW    ;SAVE CTR
1acf  1e 04         4618   4630         MVI     E,4     ;4 BIT SHIFT LOOP
1ad1  79            4619   4631 PK3:    MOV     A,C     ;GET LOW BYTE
1ad2  17            4620   4632         RAL             ;ROTATE LEFT 1 BIT
1ad3  4f            4621   4633         MOV     C,A     ;REPLACE
1ad4  78            4622   4634         MOV     A,B     ;GET HIGH BYTE
1ad5  17            4623   4635         RAL             ;ROTATE LEFT 1 BIT
1ad6  47            4624   4636         MOV     B,A     ;REPLACE
1ad7  1d            4625   4637         DCR     E       ;DECR CTR
1ad8  c2 d1 1a      4626   4638         JNZ     PK3     ;LOOP
1adb  79            4627   4639         MOV     A,C     ;GET LOW
1adc  b2            4628   4640         ORA     D       ;PUT DIGIT IN RIGHT HALF OF BYTE
1add  4f            4629   4641         MOV     C,A     ;REPLACE
1ade  23            4630   4642         INX     H       ;POINT NEXT BYTE
1adf  c3 bd 1a      4631   4643         JMP     PK1     ;LOOP
                    4632   4644 ;
1ae2  =             4633   4645 SQUIS   EQU     $
                    4634   4646 ;
                    4635   4647 ; COMPRESS THE EXPR STACK
                    4636   4648 ; REG A CONTAINS # OF BYTES TO REMOVE STARTING AT (H,L+1)
                    4637   4649 ; CONTAINS TOTAL NUMBER OF CHARACTERS IN STACK THUS FAR
                    4638   4650 ;
1ae2  e5            4639   4651         PUSH    H       ;SAVE H,L
1ae3  5f            4640   4652         MOV     E,A     ;COUNT TO E
1ae4  16 00         4641   4653         MVI     D,0     ;ZERO HI BYTE
1ae6  19            4642   4654         DAD     D       ;COMPUTE START
1ae7  eb            4643   4655         XCHG            ;PUT TO D,E
1ae8  e1            4644   4656         POP     H       ;GET H,L
1ae9  2f            4645   4657         CMA             ;COMPLEMENT COUNT
1aea  3c            4646   4658         INR     A       ;THEN 2'S COMPLEMENT
1aeb  80            4647   4659         ADD     B       ;COMPUTE B-A
1aec  47            4648   4660         MOV     B,A     ;PUT TO B
1aed  13            4649   4661 SQUI2:  INX     D       ;POINT NEXT SEND
1aee  23            4650   4662         INX     H       ;POINT NEXT RECEIVE
1aef  1a            4651   4663         LDAX    D       ;GET A CHAR
1af0  77            4652   4664         MOV     M,A     ;PUT IT DOWN
1af1  05            4653   4665         DCR     B       ;DECR CTR
1af2  c2 ed 1a      4654   4666         JNZ     SQUI2   ;LOOP
1af5  22 50 22      4655   4667         SHLD    EXPRS   ;UPDATE NEW START OF EXPR
1af8  c9            4656   4668         RET             ;RETURN
                    4657   4669 ;
1af9  =             4658   4670 SKP2Z   EQU     $
                    4659   4671 ;
                    4660   4672 ; FIND END OF LITERAL IN (D,E)
                    4661   4673 ;
1af9  1a            4662   4674         LDAX    D       ;GET BYTE OF LIT
1afa  b7            4663   4675         ORA     A       ;TEST IT
1afb  c8            4664   4676         RZ              ;RETURN IF ZERO (END)
1afc  13            4665   4677         INX     D       ;ELSE, POINT NEXT
1afd  c3 f9 1a      4666   4678         JMP     SKP2Z   ;LOOP
                    4667   4679 ;
1b00  =             4668   4680 GTEMP   EQU     $
                    4669   4681 ;
                    4670   4682 ; GETS FOUR BYTE TEMPORARY STORAGE AREA,
                    4671   4683 ; STORES THE FACC THERE,
                    4672   4684 ; PUTS ADDR OF AREA IN EXPR STACK (H,L)
                    4673   4685 ;
1b00  eb            4674   4686         XCHG            ;SAVE H,L IN D,E
1b01  e3            4675   4687         XTHL            ;EXCHANGE 0 AND RET ADDR
1b02  e5            4676   4688         PUSH    H       ;PUT NEW RET ADDR
1b03  e5            4677   4689         PUSH    H       ;DOIT IT AGAIN
1b04  21 00 00      4678   4690         LXI     H,0     ;ZERO H,L
1b07  39            4679   4691         DAD     SP      ;GET SP ADDR IN H,L
1b08  23            4680   4692         INX     H       ;PLUS ONE
1b09  23            4681   4693         INX     H       ;PLUS ONE MORE (POINT TO NEW AREA)
1b0a  c5            4682   4694         PUSH    B       ;SAVE CTRS
1b0b  d5            4683   4695         PUSH    D       ;SAVE EXPR ADDR
1b0c  e5            4684   4696         PUSH    H       ;SAVE TEMP ADDR
1b0d  df            4685   4697         RST     3       ;GO STORE FACC
1b0e  d1            4686   4698         POP     D       ;RESTORE TEMP ADDR
1b0f  2a 69 22      4687   4699         LHLD    SPCTR   ;GET COUNT
1b12  23            4688   4700         INX     H       ;PLUS ONE
1b13  23            4689   4701         INX     H       ;ONE MORE
1b14  22 69 22      4690   4702         SHLD    SPCTR   ;PUT BACK
1b17  e1            4691   4703         POP     H       ;RESTORE EXPR ADDR
1b18  c1            4692   4704         POP     B       ;RESTORE CTRS
1b19  23            4693   4705 SADR:   INX     H       ;POINT NEXT BYTE
1b1a  72            4694   4706         MOV     M,D     ;HIGH BYTE TO EXPRSTK
1b1b  23            4695   4707         INX     H       ;POINT NEXT
1b1c  73            4696   4708         MOV     M,E     ;LOW BYTE TO EXPR STK
1b1d  23            4697   4709         INX     H       ;POINT NEXT
1b1e  36 e3         4698   4710         MVI     M,0E3H  ;CODE = NUMERIC DATA
1b20  c9            4699   4711         RET             ;RETURN
                    4700   4712 ;
1b21  =             4701   4713 ALPHA   EQU     $
                    4702   4714 ;
                    4703   4715 ; TESTS THE CHAR AT (H,L)
                    4704   4716 ; RETURNS WITH Z SET IF CHAR IS ALPHA (A-Z)
                    4705   4717 ; RETURNS WITH Z OFF IF NOT ALPHA
                    4706   4718 ; CHAR IS LEFT IN REG A
                    4707   4719 ;
1b21  7e            4708   4720         MOV     A,M     ;PUT CHAR TO REG A
1b22  fe 41         4709   4721         CPI     'A'     ;TEST IF A OR HIGHER
1b24  d8            4710   4722         RC              ;RETURN IF NOT ALPHA (Z IS OFF)
1b25  fe 5a         4711   4723         CPI     'Z'     ;TEST IF Z OR LESS
1b27  c3 30 1b      4712   4724         JMP     NUMEN   ;GO WRAPUP
                    4713   4725 ;
1b2a  =             4714   4726 NUMER   EQU     $
                    4715   4727 ;
                    4716   4728 ; TESTS THE CHAR AT (H,L)
                    4717   4729 ; RETURNS WITH Z SET IF NUMERIC (0-9)
                    4718   4730 ; ELSE Z IS OFF
                    4719   4731 ; CHAR IS LEFT IN THE A REG
                    4720   4732 ;
1b2a  7e            4721   4733         MOV     A,M     ;GET CHAR TO REG A
1b2b  fe 30         4722   4734         CPI     '0'     ;TEST IF ZERO OR GREATER
1b2d  d8            4723   4735         RC              ;RETURN IF LESS THAN ZERO
1b2e  fe 39         4724   4736         CPI     '9'     ;TEST IF 9 OR LESS
1b30  c8            4725   4737 NUMEN:  RZ              ;RETURN IF 9
1b31  d0            4726   4738         RNC             ;RETURN IF NOT NUMERIC
1b32  bf            4727   4739         CMP     A       ;SET Z
1b33  c9            4728   4740         RET             ;RETURN
                    4729   4741 ;
1b34  =             4730   4742 SEARC   EQU     $
                    4731   4743 ;
                    4732   4744 ; SEARCHES FOR THE VARIABLE IN D,E
                    4733   4745 ; RETURNS WITH ADDR OF DATA AREA FOR VARIABLE
                    4734   4746 ;
1b34  e5            4735   4747         PUSH    H       ;SAVE H,L
1b35  3a 88 22      4736   4748         LDA     FNMOD   ;GET FUNCTION MODE
1b38  b7            4737   4749         ORA     A       ;TEST IT
1b39  c2 8f 1b      4738   4750         JNZ     SCH6    ;BRIF IN A FUNCTION
1b3c  2a 91 22      4739   4751 SCH0:   LHLD    DATAB   ;GET ADDR OF DATA POOL
1b3f  7e            4740   4752 SCH1:   MOV     A,M     ;GET THE BYTE
1b40  b7            4741   4753         ORA     A       ;TEST IF END
1b41  ca 65 1b      4742   4754         JZ      SCH3    ;BRIF END
1b44  2b            4743   4755         DCX     H       ;POINT NEXT
1b45  2b            4744   4756         DCX     H       ;DITTO
1b46  46            4745   4757         MOV     B,M     ;GET HI LEN
1b47  2b            4746   4758         DCX     H       ;POINT NEXT
1b48  4e            4747   4759         MOV     C,M     ;GET LO LEN
1b49  e7            4748   4760         RST     4       ;ADJUST H,L
1b4a  03            4749   4761         DB      3
1b4b  7e            4750   4762         MOV     A,M     ;LOAD 1ST CHAR
1b4c  ba            4751   4763         CMP     D       ;COMPARE 1ST CHAR
1b4d  c2 61 1b      4752   4764         JNZ     SCH2    ;BRIF NOT EQUAL
1b50  2b            4753   4765         DCX     H       ;POINT NEXT
1b51  7e            4754   4766         MOV     A,M     ;LOAD 2ND DIGIT
1b52  23            4755   4767         INX     H       ;POINT BACK
1b53  bb            4756   4768         CMP     E       ;COMPARE 2ND CHAR
1b54  c2 61 1b      4757   4769         JNZ     SCH2    ;BRIF NOT EQUAL
1b57  7a            4758   4770         MOV     A,D     ;GET HI NAME
1b58  b7            4759   4771         ORA     A       ;TEST IT
1b59  fa c4 1b      4760   4772         JM      SCH9    ;RETURN IF MATRIX
1b5c  09            4761   4773         DAD     B       ;POINT NEXT ENTRY
1b5d  23            4762   4774         INX     H       ;PLUS ONE
1b5e  eb            4763   4775         XCHG            ;FLIP/FLOP
1b5f  e1            4764   4776         POP     H       ;RESTORE H
1b60  c9            4765   4777         RET             ;RETURN
1b61  09            4766   4778 SCH2:   DAD     B       ;MINUS LEN
1b62  c3 3f 1b      4767   4779         JMP     SCH1    ;LOOP
1b65  72            4768   4780 SCH3:   MOV     M,D     ;PUT 1ST CHAR
1b66  2b            4769   4781         DCX     H       ;POINT NEXT
1b67  73            4770   4782         MOV     M,E     ;PUT 2ND CHAR
1b68  2b            4771   4783         DCX     H       ;POINT NEXT
1b69  7a            4772   4784         MOV     A,D     ;GET HI NAME
1b6a  b7            4773   4785         ORA     A       ;TEST IT
1b6b  fa a3 1b      4774   4786         JM      SCH7    ;BRIF ARRAY
1b6e  36 ff         4775   4787         MVI     M,0FFH  ;HI LEN
1b70  2b            4776   4788         DCX     H       ;POINT NEXT
1b71  7b            4777   4789         MOV     A,E     ;GET LO NAME
1b72  b7            4778   4790         ORA     A       ;TEST TYPE
1b73  fa 7d 1b      4779   4791         JM      SCH4    ;BRIF CHAR
1b76  36 f8         4780   4792         MVI     M,0F8H  ;LO LEN
1b78  06 04         4781   4793         MVI     B,4     ;LOOP CTR
1b7a  c3 81 1b      4782   4794         JMP     SCH5    ;BRARND
1b7d  36 fb         4783   4795 SCH4:   MVI     M,0FBH  ;LO LEN
1b7f  06 01         4784   4796         MVI     B,1     ;LOOP CTR
1b81  2b            4785   4797 SCH5:   DCX     H       ;POINT NEXT
1b82  36 00         4786   4798         MVI     M,0     ;ZERO THE VALUE
1b84  05            4787   4799         DCR     B       ;DECR CTR
1b85  c2 81 1b      4788   4800         JNZ     SCH5    ;LOOP
1b88  2b            4789   4801         DCX     H       ;POINT NEXT
1b89  36 00         4790   4802         MVI     M,0     ;MARK NEW END
1b8b  23            4791   4803         INX     H       ;POINT ADDR OF VARIABLE
1b8c  eb            4792   4804         XCHG            ;PUT LOCATION TO D,E
1b8d  e1            4793   4805         POP     H       ;RESTORE H,L
1b8e  c9            4794   4806         RET             ;RETURN
1b8f  21 6c 22      4795   4807 SCH6:   LXI     H,FNARG ;POINT DUMMY ARG
1b92  7e            4796   4808         MOV     A,M     ;LOAD 1ST CHAR
1b93  ba            4797   4809         CMP     D       ;COMPARE
1b94  c2 3c 1b      4798   4810         JNZ     SCH0    ;BRIF NOT EQUAL
1b97  23            4799   4811         INX     H       ;POINT NEXT
1b98  7e            4800   4812         MOV     A,M     ;LOAD 2ND CHAR
1b99  bb            4801   4813         CMP     E       ;COMPARE
1b9a  c2 3c 1b      4802   4814         JNZ     SCH0    ;BRIF NOT EQUAL
1b9d  23            4803   4815         INX     H       ;POINT NEXT
1b9e  56            4804   4816         MOV     D,M     ;GET HI ADDR
1b9f  23            4805   4817         INX     H       ;POINT NEXT
1ba0  5e            4806   4818         MOV     E,M     ;GET LO ADDR
1ba1  e1            4807   4819         POP     H       ;RESTORE H,L
1ba2  c9            4808   4820         RET             ;RETURN
1ba3  e5            4809   4821 SCH7:   PUSH    H       ;SAVE ADDRESS
1ba4  36 fe         4810   4822         MVI     M,0FEH  ;MOVE HI DISP
1ba6  2b            4811   4823         DCX     H       ;POINT NEXT
1ba7  36 14         4812   4824         MVI     M,14H   ;MOVE LO DISP
1ba9  2b            4813   4825         DCX     H
1baa  36 00         4814   4826         MVI     M,0     ;MOVE A ZERO
1bac  2b            4815   4827         DCX     H       ;POINT NEXT
1bad  36 0a         4816   4828         MVI     M,10    ;MOVE 10
1baf  2b            4817   4829         DCX     H       ;POINT NEXT
1bb0  36 00         4818   4830         MVI     M,0     ;MOVE A ZERO
1bb2  2b            4819   4831         DCX     H       ;POINT NEXT
1bb3  36 0a         4820   4832         MVI     M,10    ;MOVE A 10 (DEFAULT IS 10 X 10)
1bb5  01 e5 01      4821   4833         LXI     B,485   ;TOTAL # OF BYTES TAKEN BY ARRAY
1bb8  2b            4822   4834 SCH8:   DCX     H       ;POINT NEXT
1bb9  36 00         4823   4835         MVI     M,0     ;CLEAR ONE BYTE
1bbb  0b            4824   4836         DCX     B       ;DCR CTR
1bbc  78            4825   4837         MOV     A,B     ;GET HI
1bbd  b1            4826   4838         ORA     C       ;PLUS LO
1bbe  c2 b8 1b      4827   4839         JNZ     SCH8    ;LOOP
1bc1  e1            4828   4840         POP     H       ;RESTORE PTR TO START
1bc2  23            4829   4841         INX     H       ;POINT LO NAME
1bc3  23            4830   4842         INX     H       ;POINT HI NAME
1bc4  c1            4831   4843 SCH9:   POP     B       ;NEED TO XCHANGE LAST 2 STACK ENTRIES
1bc5  d1            4832   4844         POP     D       ;SO DOIT
1bc6  c5            4833   4845         PUSH    B
1bc7  d5            4834   4846         PUSH    D
1bc8  c9            4835   4847         RET             ;RETURN
                    4836   4848 ;
1bc9  =             4837   4849 VAR     EQU     $
                    4838   4850 ;
                    4839   4851 ;
                    4840   4852 ; TEST (H,L) FOR A VARIABLE NAME
                    4841   4853 ; PUTS THE NAME IN D,E IF FOUND
                    4842   4854 ; ERROR SN IF NONE FOUND
                    4843   4855 ;
1bc9  cf            4844   4856         RST     1       ;SKIP TO NON-BLANK
1bca  cd 21 1b      4845   4857         CALL    ALPHA   ;TEST IF ALPHA
1bcd  c2 0f 1c      4846   4858         JNZ     SNERR   ;BRIF NOT ALPHA
1bd0  57            4847   4859         MOV     D,A     ;FIRST CHAR
1bd1  1e 20         4848   4860         MVI     E,' '   ;DEFAULT
1bd3  23            4849   4861         INX     H       ;POINT NEXT
1bd4  cf            4850   4862         RST     1       ;GET 2ND CHAR
1bd5  cd 2a 1b      4851   4863         CALL    NUMER   ;TEST IF NUMERIC
1bd8  c2 de 1b      4852   4864         JNZ     VAR2    ;BRIF NOT NUMERIC
1bdb  5f            4853   4865         MOV     E,A     ;SAVE 2ND CHAR
1bdc  23            4854   4866         INX     H       ;POINT NEXT
1bdd  cf            4855   4867         RST     1       ;GET NON-BLANK FOLLOWING
1bde  fe 24         4856   4868 VAR2:   CPI     '$'     ;TEST IF STRING
1be0  c2 e9 1b      4857   4869         JNZ     VAR3    ;BRIF NOT
1be3  7b            4858   4870         MOV     A,E     ;GET 2ND CHAR
1be4  f6 80         4859   4871         ORI     80H     ;SET TYPE
1be6  5f            4860   4872         MOV     E,A     ;SAVE IT
1be7  23            4861   4873         INX     H       ;SKIP $
1be8  c9            4862   4874         RET             ;THEN RETURN
1be9  fe 28         4863   4875 VAR3:   CPI     '('     ;TEST IF ARRAY
1beb  c0            4864   4876         RNZ             ;RETURN IF NOT
1bec  7a            4865   4877         MOV     A,D     ;GET HI NAME
1bed  f6 80         4866   4878         ORI     80H     ;TURN ON D7
1bef  57            4867   4879         MOV     D,A     ;RESTORE
1bf0  c9            4868   4880         RET             ;RETURN
                    4869   4881 ;
1bf1  =             4870   4882 PRLIN   EQU     $
                    4871   4883 ;
                    4872   4884 ; PRINTS LINE NUMBER FOLLOWED BY CR/LF
                    4873   4885 ;
1bf1  11 77 20      4874   4886         LXI     D,LINEN ;POINT AREA
1bf4  2a 89 22      4875   4887         LHLD    LINE    ;GET ADDR OF LINE NUMBER
1bf7  cd 09 1a      4876   4888         CALL    LINEO   ;GO UNPACK
1bfa  eb            4877   4889         XCHG            ;PUT TO H,L
1bfb  36 00         4878   4890         MVI     M,0     ;END OF MSG
1bfd  21 77 20      4879   4891         LXI     H,LINEN ;POINT AREA
1c00  c3 bd 19      4880   4892         JMP     TERMM   ;GO PRINT IT
                    4881   4893 ;PAGE
                    4882   4894 ;
                    4883   4895 ; ERROR MESSAGE ROUTINES
                    4884   4896 ; FATAL ERROR MUST BE FIRST
                    4885   4897 ;
00fe  =             4886   4898 EM      EQU     0FEH
                    4887   4899 ;
1c03  f7            4888   4900 ULERR:  RST     6
1c04  55 4c fe f7   4889   4901         DB      'UL',EM,FATAL   ;NOTE FATAL = CODE FOR RST 6
1c07  =             4890   4902 ZMERR   EQU     $-1             ;LOG(X<=0),SQR(-X),0 DIVIDE
1c08  4f 46 fe f7   4891   4903         DB      'OF',EM,FATAL
1c0b  =             4892   4904 STERR   EQU     $-1             ;ERROR IN EXPRESSION STACK
1c0c  53 54 fe f7   4893   4905         DB      'ST',EM,FATAL
1c0f  =             4894   4906 SNERR   EQU     $-1             ;DELIMITER ERROR
1c10  53 4e fe f7   4895   4907         DB      'SN',EM,FATAL
1c13  =             4896   4908 RTERR   EQU     $-1             ;RETURN & NO GOSUB
1c14  52 54 fe f7   4897   4909         DB      'RT',EM,FATAL
1c17  =             4898   4910 DAERR   EQU     $-1             ;OUT OF DATA
1c18  44 41 fe f7   4899   4911         DB      'DA',EM,FATAL
1c1b  =             4900   4912 NXERR   EQU     $-1             ;NEXT & NO FOR / >8 FOR'S
1c1c  4e 58 fe f7   4901   4913         DB      'NX',EM,FATAL
1c1f  =             4902   4914 CVERR   EQU     $-1             ;CONVERSION ERROR
1c20  43 56 fe f7   4903   4915         DB      'CV',EM,FATAL
1c23  =             4904   4916 CKERR   EQU     $-1             ;CHECKSUM ERROR
1c24  43 4b fe f7   4905   4917         DB      'CK',EM,FATAL
                    4906   4918 ;
                    4907   4919 ; NON-FATAL ERRORS
                    4908   4920 ;
1c27  =             4909   4921 OVERR   EQU     $-1             ;OVERFLOW ERROR
1c28  4f 56 fe      4910   4922         DB      'OV',EM
1c2b  c9            4911   4923         RET                     ;RETURN TO ROUTINE
1c2c  f7            4912   4924 UNERR:  RST     6               ;CALL   ERROR ROUTINE
1c2d  55 4e fe      4913   4925         DB      'UN',EM
1c30  c9            4914   4926         RET
                    4915   4927 ;
                    4916   4928 ; CONTINUATION OF ERROR MESSAGE ROUTINE (RST 6)
                    4917   4929 ;
1c31  cd bd 19      4918   4930 ERROR:  CALL    TERMM   ;PRINT 'XX'
1c34  e5            4919   4931         PUSH    H       ;SAVE RETURN
1c35  21 3c 1e      4920   4932         LXI     H,ERRMS ;PRINT 'ERROR IN LINE'
1c38  cd bd 19      4921   4933         CALL    TERMM
1c3b  cd f1 1b      4922   4934         CALL    PRLIN   ;PRINT LINE #
1c3e  e1            4923   4935         POP     H
1c3f  23            4924   4936         INX     H       ;RETURN ADDRESS
1c40  7e            4925   4937         MOV     A,M     ;GET INSTRUCTION
1c41  fe f7         4926   4938         CPI     FATAL   ;IS IT AN RST 6?
1c43  ca dc 01      4927   4939         JZ      KEY     ;IF ZERO, YES, ABORT
1c46  c1            4928   4940         POP     B       ;RESTORE REGISTERS
1c47  d1            4929   4941         POP     D
1c48  f1            4930   4942         POP     PSW
1c49  e3            4931   4943         XTHL
1c4a  c9            4932   4944         RET
                    4933   4945         ;PAGE
                    4934   4946 ;
                    4935   4947 ;
                    4936   4948 ; MOVE THE STRING FROM (D,E) TO (H,L) COUNT IN B
                    4937   4949 ;
                    4938   4950 ;
1c4b  06 04         4939   4951 CPY4D:  MVI     B,4
1c4d  1a            4940   4952 COPYD:  LDAX    D       ;GET A BYTE
1c4e  77            4941   4953         MOV     M,A     ;MOVE IT
1c4f  23            4942   4954         INX     H       ;POINT NEXT
1c50  13            4943   4955         INX     D       ;DITTO
1c51  05            4944   4956         DCR     B       ;DECR CTR
1c52  c2 4d 1c      4945   4957         JNZ     COPYD   ;LOOP
1c55  c9            4946   4958         RET             ;THEN RETURN
                    4947   4959 ;
                    4948   4960 ;
                    4949   4961 ; MOVE THE STRING FROM (H,L) TO (D,E) COUNT IN B
                    4950   4962 ;
                    4951   4963 ;
1c56  06 04         4952   4964 CPY4H:  MVI     B,4
1c58  eb            4953   4965 COPYH:  XCHG            ;FLIP/FLOP
1c59  cd 4d 1c      4954   4966         CALL    COPYD   ;GO COPY
1c5c  eb            4955   4967         XCHG            ;FLIP/FLOP BACK
1c5d  c9            4956   4968         RET             ;RETURN
                    4957   4969 ;
1c5e  =             4958   4970 ZEROM   EQU     $
                    4959   4971 ;
                    4960   4972 ; MOVES A STRING OF BINARY ZEROS, COUNT IN B
                    4961   4973 ;
1c5e  36 00         4962   4974         MVI     M,0     ;MOVE A ZERO
1c60  23            4963   4975         INX     H       ;POINT NEXT
1c61  05            4964   4976         DCR     B       ;DECR CTR
1c62  c2 5e 1c      4965   4977         JNZ     ZEROM   ;LOOP
1c65  c9            4966   4978         RET             ;RETURN
                    4967   4979 ;
1c66  =             4968   4980 FBIN    EQU     $
                    4969   4981 ;
                    4970   4982 ;
                    4971   4983 ; CONVERT FLOAT ACC TO UNSIGNED BINARY NUMBER IN A REG
                    4972   4984 ; RETURNS 0 IN A REG IF FACC<0 OR FACC>255
                    4973   4985 ;
                    4974   4986 ;
1c66  e5            4975   4987         PUSH    H       ;SAVE H,L
1c67  d5            4976   4988         PUSH    D       ;SAVE D,E
1c68  cd 35 1f      4977   4989         CALL    FACDE   ;CONVERT FACC TO D,E
1c6b  af            4978   4990         XRA     A       ;ZERO A
1c6c  b2            4979   4991         ORA     D       ;TEST HIGH VALUE
1c6d  c2 71 1c      4980   4992         JNZ     FBIN1   ;BRIF NOT ZERO
1c70  7b            4981   4993         MOV     A,E     ;VALUE TO A
1c71  d1            4982   4994 FBIN1:  POP     D       ;RESTORE D,E
1c72  e1            4983   4995         POP     H       ;RESTORE H,L
1c73  c9            4984   4996         RET             ;RETURN
                    4985   4997 ;
1c74  =             4986   4998 ARG     EQU     $
                    4987   4999 ;
                    4988   5000 ; GET NEXT ARGUMENT FROM POLISH STACK
                    4989   5001 ;
1c74  2a 52 22      4990   5002         LHLD    ADDR1   ;GET ADDRESS
1c77  23            4991   5003         INX     H       ;POINT NEXT
1c78  56            4992   5004         MOV     D,M     ;GET HI ADDRESS
1c79  23            4993   5005         INX     H       ;POINT NEXT
1c7a  5e            4994   5006         MOV     E,M     ;GET LO ADDRESS
1c7b  23            4995   5007         INX     H       ;POINT TYPE
1c7c  22 52 22      4996   5008         SHLD    ADDR1   ;GET ADDRESS
1c7f  2b            4997   5009         DCX     H       ;POINT BACK
1c80  c3 83 13      4998   5010         JMP     EVLD    ;CALL EVLOAD AND RETURN
                    4999   5011 ;
                    5000   5012 ;
1c83  =             5001   5013 ARGNU   EQU     $
                    5002   5014 ;
1c83  cd 74 1c      5003   5015         CALL    ARG     ;GET ARGUMENT
1c86  c3 66 1c      5004   5016         JMP     FBIN    ;THEN CONVERT FACC TO BIN
                    5005   5017 ;
1c89  =             5006   5018 BINFL   EQU     $
                    5007   5019 ;
                    5008   5020 ; CONVERT D,E TO FLOATING POINT NUMBER IN FAC
                    5009   5021 ;
                    5010   5022 ;
1c89  21 58 22      5011   5023         LXI     H,FACC  ;POINT ACC
1c8c  36 18         5012   5024         MVI     M,24    ;MAX BITS
1c8e  23            5013   5025         INX     H       ;POINT NEXT
1c8f  36 00         5014   5026         MVI     M,0     ;CLEAR MSB
1c91  23            5015   5027         INX     H       ;POINT NEXT
1c92  72            5016   5028         MOV     M,D     ;MOVE MID
1c93  23            5017   5029         INX     H       ;POINT NEXT
1c94  73            5018   5030         MOV     M,E     ;MOVE LSB
1c95  c3 dd 16      5019   5031         JMP     FNORM   ;GO NORMALIZE & RETURN
                    5020   5032 ;PAGE
                    5021   5033 ;
                    5022   5034 ; FUNCTION TABLE. FORMAT IS:
                    5023   5035 ;     DB <LITERAL>,0
                    5024   5036 ;     DW <ADDRESS>
                    5025   5037 ;     DB <FUNCTION TYPE>
                    5026   5038 ;
                    5027   5039 ; TABLE IS TERMINATED WITH A '00'
                    5028   5040 ;
1c98  =             5029   5041 FUNCT   EQU     $
1c98  41 42 53 00   5030   5042         DB      'ABS',0
1c9c  c7 0b         5031   5043         DW      ABS
1c9e  ab            5032   5044         DB      0ABH
1c9f  53 51 52 00   5033   5045         DB      'SQR',0
1ca3  27 0c         5034   5046         DW      SQR
1ca5  ab            5035   5047         DB      0ABH
1ca6  49 4e 54 00   5036   5048         DB      'INT',0
1caa  e2 0b         5037   5049         DW      INT
1cac  ab            5038   5050         DB      0ABH
1cad  53 47 4e 00   5039   5051         DB      'SGN',0
1cb1  d0 0b         5040   5052         DW      SGN
1cb3  ab            5041   5053         DB      0ABH
1cb4  52 4e 44 00   5042   5054 RNDLI:  DB      'RND',0
1cb8  84 0c         5043   5055         DW      RND
1cba  ab            5044   5056         DB      0ABH
1cbb  53 49 4e 00   5045   5057         DB      'SIN',0
1cbf  41 0a         5046   5058         DW      SIN
1cc1  ab            5047   5059         DB      0ABH
1cc2  43 4f 53 00   5048   5060         DB      'COS',0
1cc6  b3 0a         5049   5061         DW      COS
1cc8  ab            5050   5062         DB      0ABH
1cc9  54 41 4e 00   5051   5063         DB      'TAN',0
1ccd  bc 0a         5052   5064         DW      TAN
1ccf  ab            5053   5065         DB      0ABH
1cd0  41 54 4e 00   5054   5066         DB      'ATN',0
1cd4  d4 0a         5055   5067         DW      ATN
1cd6  ab            5056   5068         DB      0ABH
1cd7  49 4e 50 00   5057   5069         DB      'INP',0
1cdb  0a 0d         5058   5070         DW      INP
1cdd  ab            5059   5071         DB      0ABH
1cde  4c 4e 00      5060   5072         DB      'LN',0
1ce1  13 0b         5061   5073         DW      LN
1ce3  ab            5062   5074         DB      0ABH
1ce4  4c 4f 47 00   5063   5075         DB      'LOG',0
1ce8  61 0b         5064   5076         DW      LOG
1cea  ab            5065   5077         DB      0ABH
1ceb  45 58 50 00   5066   5078         DB      'EXP',0
1cef  6a 0b         5067   5079         DW      EXP
1cf1  ab            5068   5080         DB      0ABH
1cf2  50 4f 53 00   5069   5081         DB      'POS',0
1cf6  20 0d         5070   5082         DW      POS
1cf8  ab            5071   5083         DB      0ABH
1cf9  4c 45 4e 00   5072   5084         DB      'LEN',0
1cfd  89 0d         5073   5085         DW      LENFN
1cff  ab            5074   5086         DB      0ABH
1d00  43 48 52 24   5075   5087         DB      'CHR$',0
1d04  00            5075   5088
1d05  8f 0d         5076   5089         DW      CHRFN
1d07  cb            5077   5090         DB      0CBH
1d08  41 53 43 49   5078   5091         DB      'ASCII',0
1d0c  49 00         5078   5092
1d0e  9a 0d         5079   5093         DW      ASCII
1d10  ab            5080   5094         DB      0ABH
1d11  4e 55 4d 24   5081   5095         DB      'NUM$',0
1d15  00            5081   5096
1d16  a7 0d         5082   5097         DW      NUMFN
1d18  cb            5083   5098         DB      0CBH
1d19  56 41 4c 00   5084   5099         DB      'VAL',0
1d1d  ba 0d         5085   5100         DW      VAL
1d1f  ab            5086   5101         DB      0ABH
1d20  53 50 41 43   5087   5102         DB      'SPACE$',0
1d24  45 24 00      5087   5103
1d27  e1 0d         5088   5104         DW      SPACE
1d29  cb            5089   5105         DB      0CBH
1d2a  53 54 52 49   5090   5106         DB      'STRING$',0
1d2e  4e 47 24 00   5090   5107
1d32  f1 0d         5091   5108         DW      STRFN
1d34  d3            5092   5109         DB      0D3H
1d35  4c 45 46 54   5093   5110         DB      'LEFT$',0
1d39  24 00         5093   5111
1d3b  05 0e         5094   5112         DW      LEFT
1d3d  d3            5095   5113         DB      0D3H
1d3e  52 49 47 48   5096   5114         DB      'RIGHT$',0
1d42  54 24 00      5096   5115
1d45  0e 0e         5097   5116         DW      RIGHT
1d47  d3            5098   5117         DB      0D3H
1d48  4d 49 44 24   5099   5118         DB      'MID$',0
1d4c  00            5099   5119
1d4d  17 0e         5100   5120         DW      MIDFN
1d4f  db            5101   5121         DB      0DBH
1d50  49 4e 53 54   5102   5122         DB      'INSTR',0
1d54  52 00         5102   5123
1d56  51 0e         5103   5124         DW      INSTR
1d58  bb            5104   5125         DB      0BBH
1d59  50 45 45 4b   5105   5126         DB      'PEEK',0
1d5d  00            5105   5127
1d5e  ab 1f         5106   5128         DW      PEEK
1d60  ab            5107   5129         DB      0ABH
                    5108   5130         IF      LARGE
                    5109   5131         DB      0,0,0,0 ;ROOM FOR ONE MORE FUNCTION
                    5110   5132         DB      0,0,0,0
                    5111   5133         ENDIF
1d61  00            5112   5134         DB      0       ;END OF FUNCTION TABLE
                    5113   5135 ;PAGE
                    5114   5136 ;
                    5115   5137 ; PROGRAM CONSTANTS
                    5116   5138 ;
1d62  13 14 00      5117   5139 PCHOF:  DB      19,20,0
1d65  3f fd         5118   5140 RNDP:   DB      3FH,0FDH        ;16381
1d67  3f eb         5119   5141         DB      3FH,0EBH        ;16363
1d69  3f dd         5120   5142         DB      3FH,0DDH        ;16349
1d6b  1b ec         5121   5143 NRNDX:  DB      1BH,0ECH
1d6d  33 d3         5122   5144         DB      33H,0D3H
1d6f  1a 85         5123   5145         DB      1AH,85H
1d71  2b 1e         5124   5146         DB      2BH,1EH
1d73  57 48 41 54   5125   5147 WHATL:  DB      'WHAT',0
1d77  00            5125   5148
1d78  =             5126   5149 VERS    EQU     $       ;VERSION MESSAGE
                    5127   5150         IF      LARGE
                    5128   5151         DB      '9K VERS 1.4',0
                    5129   5152 RBOUT:  DB      08H,20H,08H,0FEH ;RUBOUT SEQUENCE (9K ONLY)
                    5130   5153         ENDIF
                    5131   5154         IF      NOT LARGE
1d78  38 4b 20 56   5132   5155         DB      '8K VERS 1.4',0
1d7c  45 52 53 20   5132   5156
1d80  31 2e 34 00   5132   5157
                    5133   5158         ENDIF
1d84  4c 49 4e 45   5134   5159 LLINE:  DB      'LINE',0
1d88  00            5134   5160
1d89  54 41 42 00   5135   5161 TABLI:  DB      'TAB',0
1d8d  53 54 45 50   5136   5162 STEPL:  DB      'STEP',0
1d91  00            5136   5163
1d92  54 48 45 4e   5137   5164 THENL:  DB      'THEN',0
1d96  00            5137   5165
1d97  50 49 00      5138   5166 PILIT:  DB      'PI',0
1d9a  02 80 00 00   5139   5167 TWO:    DB      02H,80H,00H,00H    ;CONSTANT:  2
1d9e  04 a0 00 00   5140   5168 TEN:    DB      04H,0A0H,00H,00H   ;CONSTANT:  10
1da2  02 c9 0f d7   5141   5169 PI:     DB      02H,0C9H,0FH,0D7H  ;CONSTANT:  3.141593
1da6  00 c9 0f d7   5142   5170 QTRPI:  DB      00H,0C9H,0FH,0D7H  ;CONSTANT:  0.7853892
1daa  80 ff ff ff   5143   5171 NEGON:  DB      80H,0FFH,0FFH,0FFH ;CONSTANT: -0.9999999
1dae  00 b1 72 16   5144   5172 LN2C:   DB      00H,0B1H,72H,16H   ;CONSTANT:  0.6931472
1db2  00 97 14 eb   5145   5173 SQC1:   DB      00H,97H,14H,0EBH   ;CONSTANT:  0.59016206
1db6  7f d5 a9 56   5146   5174 SQC2:   DB      7FH,0D5H,0A9H,56H  ;CONSTANT:  0.41730759
                    5147   5175 ;PAGE
                    5148   5176 ;
                    5149   5177 ; THE FOLLOWING CONSTANTS MUST BE IN THIS ORDER ***********
                    5150   5178 ;
                    5151   5179 ;       CONSTANT WITH EXPONENT OF 1
                    5152   5180 ;       COEFFICIENT OF FIRST TERM
                    5153   5181 ;       ...
                    5154   5182 ;       COEEFICIENT OF NTH TERM
                    5155   5183 ;
                    5156   5184 ; SINCE ALL COEFFICIENTS ARE LESS THAN 1,
                    5157   5185 ; THE ITERATION LOOP USES THE
                    5158   5186 ; CONSTANT WITH EXPONENT 1 TO TERMINATE THE EVALUATION.
                    5159   5187 ;
1dba  01 b5 04 f3   5160   5188 SQC3:   DB      01H,0B5H,04H,0F3H    ;CONSTANT:  1.41421356
1dbe  ff aa 95 bc   5161   5189         DB      0FFH,0AAH,95H,0BCH   ;CONSTANT: -0.3331738
1dc2  7e ca d5 20   5162   5190         DB      7EH,0CAH,0D5H,20H    ;CONSTANT:  0.1980787
1dc6  fe 87 82 d6   5163   5191         DB      0FEH,87H,82H,0D6H    ;CONSTANT: -0.1323351
1dca  7d a3 13 1c   5164   5192         DB      7DH,0A3H,13H,1CH     ;CONSTANT:  0.07962632
1dce  fc 89 a6 b8   5165   5193         DB      0FCH,89H,0A6H,0B8H   ;CONSTANT: -0.03360627
1dd2  79 df 3a 9e   5166   5194 ATNCO:  DB      79H,0DFH,3AH,9EH     ;CONSTANT:  0.006812411
                    5167   5195 ;
1dd6  01 c9 0f d7   5168   5196 HALFP:  DB      01H,0C9H,0FH,0D7H    ;CONSTANT:  1.570796
1dda  80 a5 5d de   5169   5197         DB      80H,0A5H,5DH,0DEH    ;CONSTANT: -0.64596371
1dde  7d a3 34 55   5170   5198         DB      7DH,0A3H,34H,55H     ;CONSTANT:  0.076589679
1de2  f9 99 38 60   5171   5199         DB      0F9H,99H,38H,60H     ;CONSTANT: -0.0046737656
1de6  74 9e d7 b6   5172   5200 SINCO:  DB      74H,9EH,0D7H,0B6H    ;CONSTANT:  0.00015148419
                    5173   5201 ;
1dea  01 80         5174   5202 ONE:    DB      001H,080H
1dec  00 00         5175   5203 NULLI:  DB      00H,00H              ;CONSTANT:  1.0
1dee  00 ff fe c1   5176   5204         DB      00H,0FFH,0FEH,0C1H   ;CONSTANT:  0.99998103
1df2  ff ff ba b0   5177   5205         DB      0FFH,0FFH,0BAH,0B0H  ;CONSTANT: -0.4994712
1df6  7f a8 0e 2b   5178   5206         DB      7FH,0A8H,0EH,2BH     ;CONSTANT:  0.3282331
1dfa  fe e7 4b 55   5179   5207         DB      0FEH,0E7H,4BH,55H    ;CONSTANT: -0.2258733
1dfe  7e 89 de e3   5180   5208         DB      7EH,89H,0DEH,0E3H    ;CONSTANT:  0.134693
1e02  fc e1 c5 78   5181   5209         DB      0FCH,0E1H,0C5H,078H  ;CONSTANT: -0.05511996
1e06  7a b0 3f ae   5182   5210 LNCO:   DB      7AH,0B0H,3FH,0AEH    ;CONSTANT:  0.01075737
                    5183   5211 ;
1e0a  01 b8 aa 3b   5184   5212 LN2E:   DB      001H,0B8H,0AAH,03BH  ;CONSTANT:  1.44269504
1e0e  00 b1 6f e6   5185   5213         DB      000H,0B1H,06FH,0E6H  ;C=.69311397
1e12  7e f6 2f 70   5186   5214         DB      07EH,0F6H,02FH,070H  ;C=.24041548
1e16  7c e1 c2 ae   5187   5215         DB      07CH,0E1H,0C2H,0AEH  ;C=.05511732
1e1a  7a a0 bb 7e   5188   5216         DB      07AH,0A0H,0BBH,07EH  ;C=.00981033
1e1e  77 ca 09 cb   5189   5217 EXPCO:  DB      077H,0CAH,009H,0CBH  ;C=.00154143
                    5190   5218 ;
1e22  7f de 5b d0   5191   5219 LNC:    DB      07FH,0DEH,05BH,0D0H     ;C=LOG BASE 10 OF E
1e26  =             5192   5220 READY   EQU     $
1e26  fd            5193   5221         DB      0FDH
1e27  52 45 41 44   5194   5222         DB      'READY',0
1e2b  59 00         5194   5223
1e2d  =             5195   5224 STOPM   EQU     $
1e2d  fd            5196   5225         DB      0FDH
1e2e  53 54 4f 50   5197   5226         DB      'STOP AT LINE ',254
1e32  20 41 54 20   5197   5227
1e36  4c 49 4e 45   5197   5228
1e3a  20 fe         5197   5229
1e3c  20 45 52 52   5198   5230 ERRMS:  DB      ' ERROR IN LINE ',0FEH
1e40  4f 52 20 49   5198   5231
1e44  4e 20 4c 49   5198   5232
1e48  4e 45 20 fe   5198   5233
0002  =             5199   5234 TTY     EQU     2
                    5200   5235 ;PAGE
                    5201   5236 ;
                    5202   5237 ; VERB (STATEMENT/COMMAND) TABLE
                    5203   5238 ; FORMAT IS: DB 'VERB',0
                    5204   5239 ;            DW ADDR
                    5205   5240 ;            DB 'NEXT VERB',0
                    5206   5241 ;            ETC
                    5207   5242 ;  END OF TABLE IS MARKED BY DB 0
                    5208   5243 ;
1e4c  =             5209   5244 JMPTB   EQU     $
1e4c  4c 49 53 54   5210   5245         DB      'LIST',0
1e50  00            5210   5246
1e51  62 02         5211   5247         DW      LIST
1e53  52 55 4e 00   5212   5248         DB      'RUN',0
1e57  f4 01         5213   5249         DW      RUNCM
1e59  58 45 51 00   5214   5250         DB      'XEQ',0
1e5d  f9 01         5215   5251         DW      XEQ
1e5f  4e 45 57 00   5216   5252         DB      'NEW',0
1e63  88 01         5217   5253         DW      NEW
1e65  43 4f 4e 00   5218   5254         DB      'CON',0
1e69  ee 02         5219   5255         DW      CONTI
1e6b  54 41 50 45   5220   5256         DB      'TAPE',0
1e6f  00            5220   5257
1e70  be 01         5221   5258         DW      TAPE
1e72  53 41 56 45   5222   5259         DB      'SAVE',0
1e76  00            5222   5260
1e77  55 02         5223   5261         DW      SAVE
1e79  4b 45 59 00   5224   5262 KEYL:   DB      'KEY',0
1e7d  dc 01         5225   5263         DW      KEY
1e7f  46 52 45 00   5226   5264         DB      'FRE',0
1e83  a0 01         5227   5265         DW      FREE
1e85  49 46 00      5228   5266         DB      'IF',0
1e88  e9 04         5229   5267         DW      IFSTM
1e8a  52 45 41 44   5230   5268         DB      'READ',0
1e8e  00            5230   5269
1e8f  e1 07         5231   5270         DW      READ
1e91  52 45 53 54   5232   5271         DB      'RESTORE',0
1e95  4f 52 45 00   5232   5272
1e99  16 03         5233   5273         DW      RESTO
1e9b  44 41 54 41   5234   5274 DATAL:  DB      'DATA',0
1e9f  00            5234   5275
1ea0  0b 02         5235   5276         DW      RUN
1ea2  46 4f 52 00   5236   5277         DB      'FOR',0
1ea6  e5 03         5237   5278         DW      FOR
1ea8  4e 45 58 54   5238   5279 NEXTL:  DB      'NEXT',0
1eac  00            5238   5280
1ead  92 06         5239   5281         DW      NEXT
1eaf  47 4f 53 55   5240   5282 GOSBL:  DB      'GOSUB',0
1eb3  42 00         5240   5283
1eb5  3a 03         5241   5284         DW      GOSUB
1eb7  52 45 54 55   5242   5285         DB      'RETURN',0
1ebb  52 4e 00      5242   5286
1ebe  22 03         5243   5287         DW      RETUR
1ec0  49 4e 50 55   5244   5288         DB      'INPUT',0
1ec4  54 00         5244   5289
1ec6  21 07         5245   5290         DW      INPUT
1ec8  50 52 49 4e   5246   5291         DB      'PRINT',0
1ecc  54 00         5246   5292
1ece  55 03         5247   5293         DW      PRINT
1ed0  47 4f         5248   5294 GOTOL:  DB      'GO'
1ed2  54 4f 00      5249   5295 TOLIT:  DB      'TO',0
1ed5  f6 02         5250   5296         DW      GOTO
1ed7  4c 45 54 00   5251   5297         DB      'LET',0
1edb  f1 05         5252   5298         DW      LET
1edd  53 54 4f 50   5253   5299         DB      'STOP',0
1ee1  00            5253   5300
1ee2  72 08         5254   5301         DW      STOP
1ee4  45 4e 44 00   5255   5302         DB      'END',0
1ee8  cb 01         5256   5303         DW      ENDIT
1eea  52 45 4d 00   5257   5304         DB      'REM',0
1eee  0b 02         5258   5305         DW      RUN
1ef0  21 00         5259   5306         DB      '!',0
1ef2  0b 02         5260   5307         DW      RUN
1ef4  3f 00         5261   5308         DB      '?',0
1ef6  55 03         5262   5309         DW      PRINT
1ef8  52 41 4e 44   5263   5310         DB      'RANDOMIZE',0
1efc  4f 4d 49 5a   5263   5311
1f00  45 00         5263   5312
1f02  9f 08         5264   5313         DW      RANDO
1f04  4f 4e 00      5265   5314         DB      'ON',0
1f07  b5 08         5266   5315         DW      ON
1f09  4f 55 54 00   5267   5316         DB      'OUT',0
1f0d  4a 08         5268   5317         DW      OUTP
1f0f  44 49 4d 00   5269   5318         DB      'DIM',0
1f13  b1 09         5270   5319         DW      DIM
1f15  43 48 41 4e   5271   5320         DB      'CHANGE',0
1f19  47 45 00      5271   5321
1f1c  2a 09         5272   5322         DW      CHANG
1f1e  44 45 46      5273   5323 DEFLI:  DB      'DEF'
1f21  46 4e 00      5274   5324 FNLIT:  DB      'FN',0
1f24  0b 02         5275   5325         DW      RUN
                    5276   5326         IF      CPM
                    5277   5327         DB      'DDT',0
                    5278   5328         DW      DDT
                    5279   5329         DB      'BYE',0
                    5280   5330         DW      BOOT
                    5281   5331         ENDIF
1f26  50 4f 4b 45   5282   5332         DB      'POKE',0
1f2a  00            5282   5333
1f2b  b6 1f         5283   5334         DW      POKE
1f2d  43 41 4c 4c   5284   5335         DB      'CALL',0
1f31  00            5284   5336
1f32  d4 1f         5285   5337         DW      JUMP
                    5286   5338         IF      LARGE   ;INCLUDE ONLY IN 8K+ VERSION
                    5287   5339         DB      'EDIT',0
                    5288   5340         DW      FIX
                    5289   5341         DB      'CLOAD',0
                    5290   5342         DW      CLOAD
                    5291   5343         DB      'CSAVE',0
                    5292   5344         DW      CSAVE
                    5293   5345         ENDIF
                    5294   5346         IF      HUNTER
                    5295   5347         DB      'BAUD',0
                    5296   5348         DW      BAUD
                    5297   5349         ENDIF
1f34  00            5298   5350         DB      0       ;END OF TABLE
                    5299   5351 ;
                    5300   5352 ; DDT COMMAND, CPM ONLY
                    5301   5353 ;
                    5302   5354         IF      CPM
                    5303   5355 DDT:    RST     7
                    5304   5356         JMP     RDY
                    5305   5357         ENDIF
                    5306   5358 ;PAGE
                    5307   5359 ;
1f35  =             5308   5360 FACDE   EQU     $
                    5309   5361 ;
                    5310   5362 ; THIS ROUTINE CONVERTS THE FACC TO AN ADDRESS IN D,E
                    5311   5363 ;
1f35  cd e2 0b      5312   5364         CALL    INT     ;INTEGERIZE THE FACC
1f38  3a 58 22      5313   5365         LDA     FACC    ;GET THE EXPONENT
1f3b  b7            5314   5366         ORA     A       ;TEST IT
1f3c  fa 27 1c      5315   5367         JM      OVERR   ;BRIF NEGATIVE ADDRESS
1f3f  d6 10         5316   5368         SUI     16      ;SUBTRACT MAX EXPONENT
1f41  ca 57 1f      5317   5369         JZ      FDE2    ;BRIF EQUAL MAX
1f44  f2 27 1c      5318   5370         JP      OVERR   ;BRIF GREATER THAN 64K
1f47  2f            5319   5371         CMA             ;2'S COMPLIMENT OF A YIELDS..
1f48  3c            5320   5372         INR     A       ;16-A
1f49  4f            5321   5373         MOV     C,A     ;SAVE SHIFT COUNT
1f4a  af            5322   5374 FDE1:   XRA     A       ;CLEAR CARRY
1f4b  21 59 22      5323   5375         LXI     H,FACC+1        ;POINT MANTISSA
1f4e  06 02         5324   5376         MVI     B,2     ;WORDS TO SHIFT
1f50  cd fb 18      5325   5377         CALL    FSHFT   ;GO SHIFT FACC+1 AND FACC+2
1f53  0d            5326   5378         DCR     C       ;REDUCE COUNT
1f54  c2 4a 1f      5327   5379         JNZ     FDE1    ;LOOP TILL COMPLETE
1f57  21 59 22      5328   5380 FDE2:   LXI     H,FACC+1        ;POINT HIGH BYTE
1f5a  56            5329   5381         MOV     D,M     ;LOAD D
1f5b  23            5330   5382         INX     H       ;POINT LOW BYTE
1f5c  5e            5331   5383         MOV     E,M     ;LOADE E
1f5d  c9            5332   5384         RET             ;RETURN
                    5333   5385 ;
                    5334   5386 ;
1f5e  =             5335   5387 LOCAT   EQU     $
                    5336   5388 ;
                    5337   5389 ; THIS ROUTINE SEARCHES FOR A LINE IN THE PROGRAM FILE.
                    5338   5390 ; Z SET, C RESET==>LINE FOUND. ADDRESS IS IN H,L
                    5339   5391 ; C SET, Z RESET==>NOT FOUND. H,L POINT TO NEXT LINE
                    5340   5392 ; C SET, Z SET==>NOT FOUND. H,L POINT AT END OF PROGRAM
                    5341   5393 ;
1f5e  21 96 22      5342   5394         LXI     H,BEGPR ;POINT START
1f61  7e            5343   5395 FIND1:  MOV     A,M     ;FETCH LENGTH OF LINE
1f62  e5            5344   5396         PUSH    H       ;SAVE POINTER
1f63  b7            5345   5397         ORA     A       ;TEST
1f64  ca 83 1f      5346   5398         JZ      FIND3   ;BRIF END
1f67  23            5347   5399         INX     H       ;POINT LINE #
1f68  7e            5348   5400         MOV     A,M     ;FETCH HI #
1f69  b8            5349   5401         CMP     B       ;COMPARE TO REQUESTED
1f6a  da 7b 1f      5350   5402         JC      FIND2   ;BRIF LOW
1f6d  c2 83 1f      5351   5403         JNZ     FIND3   ;BRIF PAST AND NOT FOUND
1f70  23            5352   5404         INX     H       ;POINT LO #
1f71  7e            5353   5405         MOV     A,M     ;FETCH IT
1f72  b9            5354   5406         CMP     C       ;COMPARE TO REQUESTED
1f73  da 7b 1f      5355   5407         JC      FIND2   ;BRIF LOW
1f76  c2 83 1f      5356   5408         JNZ     FIND3   ;BRIF PAST AND NOT FOUND
1f79  e1            5357   5409         POP     H       ;POINT BEGIN IF MATCH
1f7a  c9            5358   5410         RET             ;RETURN
                    5359   5411 ;
                    5360   5412 ; BUMP H,L TO NEXT LINE
                    5361   5413 ;
1f7b  e1            5362   5414 FIND2:  POP     H       ;POINT START OF LINE
1f7c  5e            5363   5415         MOV     E,M     ;LENGHT TO E
1f7d  16 00         5364   5416         MVI     D,0     ;CLEAR D
1f7f  19            5365   5417         DAD     D       ;BUMP H,L
1f80  c3 61 1f      5366   5418         JMP     FIND1   ;CONTINUE
                    5367   5419 ;
                    5368   5420 ; LINE NOT FOUND
                    5369   5421 ;
1f83  37            5370   5422 FIND3:  STC             ;SET CARRY
1f84  e1            5371   5423         POP     H       ;POINT LINE JUST PAST REQUESTED
1f85  c9            5372   5424         RET             ;RETURN
                    5373   5425 ;
                    5374   5426 ;
1f86  =             5375   5427 SEEK    EQU     $
                    5376   5428 ;
                    5377   5429 ;  THIS CODE FINDS AN ENTRY IN THE TABLE POINTED TO BY D,E.
                    5378   5430 ;  THE SOUGHT ENTRY IS POINTED TO BY H,L.
                    5379   5431 ;
1f86  e5            5380   5432 SEEK1:  PUSH    H       ;SAVE ADDRESS OF STRING
1f87  1a            5381   5433         LDAX    D       ;GET BYTE FROM TABLE
1f88  b7            5382   5434         ORA     A       ;TEST IT
1f89  ca a9 1f      5383   5435         JZ      SEEK3   ;BRIF END OF TABLE
1f8c  d7            5384   5436         RST     2       ;COMPARE
1f8d  c2 99 1f      5385   5437         JNZ     SEEK2   ;BRIF NOT FOUND
1f90  e3            5386   5438         XTHL            ;PUT CURRENT H,L ON STACK
1f91  cd f9 1a      5387   5439         CALL    SKP2Z   ;FIND END TO LITERAL IN TABLE
1f94  13            5388   5440         INX     D       ;POINT LOW BYTE
1f95  e1            5389   5441         POP     H       ;RESTORE LINE POINTER
1f96  3c            5390   5442         INR     A       ;PUT 1 IN A
1f97  b7            5391   5443         ORA     A       ;RESET Z BIT
1f98  c9            5392   5444         RET             ;RETURN
1f99  cd f9 1a      5393   5445 SEEK2:  CALL    SKP2Z   ;FIND END OF TABLE LITERAL
1f9c  13            5394   5446         INX     D       ;
1f9d  13            5395   5447         INX     D       ;POINT NEXT LIT IN TABLE
1f9e  13            5396   5448         INX     D       ;
1f9f  e1            5397   5449         POP     H       ;GET ORIGINAL STRING
1fa0  1a            5398   5450         LDAX    D       ;GET BYTE
1fa1  17            5399   5451         RAL             ;HIGH BIT TO CARRY
1fa2  d2 86 1f      5400   5452         JNC     SEEK1   ;NOT A FUNCTION SEARCH
1fa5  13            5401   5453         INX     D       ;POINT NEXT BYTE IN FUNCTION TABLE
1fa6  c3 86 1f      5402   5454         JMP     SEEK1   ;CONTINUE SEARCH
1fa9  e1            5403   5455 SEEK3:  POP     H       ;RESTORE ORIGINAL STRING
1faa  c9            5404   5456         RET             ;RETURN
                    5405   5457         IF      LARGE   ;ASSEMBLE THE REMAINDAR ONLY FOR 8+K
                    5406   5458 ;
                    5407   5459 ;
                    5408   5460 ; EDIT COMMAND
                    5409   5461 ; EDIT <LINE #><DELIMITER><OLD TEXT><DELIMITER><NEW TEXT>
                    5410   5462 ;
                    5411   5463 FIX:    EQU     $
                    5412   5464         RST     1       ;SKIP BLANKS
                    5413   5465         CALL    PACK    ;GET LINE # IN B,C
                    5414   5466         RST     1       ;SKIP BLANKS
                    5415   5467         SHLD    ADDR2   ;SAVE COMMAND POINTER
                    5416   5468         CALL    LOCAT   ;SEARCH FOR LINE # IN PROGRAM
                    5417   5469         JC      ULERR   ;BRIF NOT FOUND
                    5418   5470         PUSH    H       ;SAVE ADDR OF EXISTING LINE <SOURCE>
                    5419   5471         PUSH    B       ;SAVE LINE #
                    5420   5472         MOV     B,M     ;GET LENGTH OF <SOURCE>
                    5421   5473         XCHG            ;D,E POINT <SOURCE>
                    5422   5474         LXI     H,STRIN ;POINT STRING BUFFER
                    5423   5475         CALL    COPYD   ;<SOURCE> TO STRING BUFFER
                    5424   5476         LDA     STRIN   ;LENGTH OF <SOURCE> TO A
                    5425   5477         SUI     2       ;ADJUST
                    5426   5478         STA     STRIN   ;STORE
                    5427   5479         LXI     D,IOBUF+1       ;POINT BUFFER
                    5428   5480         LHLD    ADDR2   ;FETCH COMMAND POINTER
                    5429   5481         MOV     B,M     ;FETCH <DELIMITER>
                    5430   5482 ;
                    5431   5483 ; FIND LENGTH OF <OLD TEXT>. STORE IT IN IOBUF.
                    5432   5484 ;
                    5433   5485         MVI     C,0     ;INITIAL LENGTH
                    5434   5486 FIX1:   INX     H       ;POINT NEXT CHARACTER
                    5435   5487         MOV     A,M     ;FETCH
                    5436   5488         ORA     A       ;TEST
                    5437   5489         JZ      SNERR   ;MISSING 2ND <DELIMITER>.
                    5438   5490         CMP     B       ;TEST
                    5439   5491         JZ      FIX2    ;BRIF 2ND <DELIMITER> FOUND
                    5440   5492         INR     C       ;ELSE, BUMP C
                    5441   5493         STAX    D       ;STORE CHARACTER IN IOBUF
                    5442   5494         INX     D       ;BUMP IOBUF POINTER
                    5443   5495         JMP     FIX1    ;CONTINUE
                    5444   5496 ;
                    5445   5497 ; GET READY TO SEARCH <SOURCE> FOR <OLD TEXT>
                    5446   5498 ;
                    5447   5499 FIX2:   MOV     A,C     ;LENGTH OF <OT> TO A
                    5448   5500         STA     IOBUF   ;STORE
                    5449   5501         SHLD    ADDR2   ;SAVE COMMAND POINTER
                    5450   5502         MVI     A,3     ;SEARCH WILL START IN POS 3.
                    5451   5503         LHLD    PROGE   ;POINT END OF PROGRAM
                    5452   5504         INX     H       ;BUMP TWICE
                    5453   5505         INX     H
                    5454   5506         SHLD    ADDR1   ;SAVE EXPR. STACK POINTER
                    5455   5507         INX     H       ;POINT NEXT
                    5456   5508         LXI     D,IOBUF ;POINT BUFFER AREA
                    5457   5509         MOV     M,D     ;STORE ADDRESS
                    5458   5510         INX     H
                    5459   5511         MOV     M,E
                    5460   5512         LXI     H,STRIN ; POINT <SOURCE>
                    5461   5513 ;
                    5462   5514 ; USE THE INSTR ROUTINE TO SEARCH
                    5463   5515 ;
                    5464   5516         CALL    INST2   ;GO SEARCH
                    5465   5517         MOV     A,E     ;RESULT TO A
                    5466   5518         ORA     A       ;TEST
                    5467   5519         JZ      DAERR   ;BR IF NOT FOUND
                    5468   5520         MOV     C,A     ;SAVE POSITION IN C
                    5469   5521         DCR     A       ;ADJUST
                    5470   5522         MOV     B,A     ;COPY TO B
                    5471   5523         LXI     H,STRIN+1       ;POINT <OLD SOURCE>
                    5472   5524         LXI     D,IOBUF+1       ;PIONT <NEW LINE AREA>
                    5473   5525         CALL    COPYH   ;COPY <OLD SOURCE> UP TO <OLD TEXT>
                    5474   5526         PUSH    D       ;SAVE DEST POINTER
                    5475   5527 ;
                    5476   5528 ; SKIP OVER <OLD TEXT> IN <SOURCE>
                    5477   5529 ;
                    5478   5530         MVI     D,0     ;CLEAR D
                    5479   5531         LDA     IOBUF   ;GET LENGTH OF <OT>
                    5480   5532         MOV     E,A     ;LENGTH TO E
                    5481   5533         DAD     D       ;BUMP H,L PAST <OT>
                    5482   5534         POP     D       ;RESTORE <DEST> POINTER
                    5483   5535         PUSH    H       ;SAVE <REMAINING SOURCE> POINTER
                    5484   5536 ;
                    5485   5537 ; APPEND <NEW TEXT> TO <DEST>
                    5486   5538 ;
                    5487   5539         LHLD    ADDR2   ;FETCH COMMAND POINTER
                    5488   5540 FIX3:   INX     H       ;POINT NEXT
                    5489   5541         MOV     A,M     ;FETCH CHARACTER
                    5490   5542         ORA     A       ;TEST IT
                    5491   5543         JZ      FIX4    ;BRIF NO MORE <NEW TEXT>
                    5492   5544         INR     C       ;BUMP LENGTH COUNT
                    5493   5545         STAX    D       ;STORE CHARACTER
                    5494   5546         INX     D       ;BUMP <DEST> POINTER
                    5495   5547         JMP     FIX3    ;CONTINUE
                    5496   5548 ;
                    5497   5549 ; APPEND <REMAINING SOURCE> TO <DEST>
                    5498   5550 ;
                    5499   5551 FIX4:   POP     H       ;GET REMAINING SOURCE POINTER
                    5500   5552 FIX4A:  MOV     A,M     ;FETCH CHARACTER
                    5501   5553         ORA     A       ;TEST
                    5502   5554         JZ      FIX5    ;BRIF DONE
                    5503   5555         STAX    D       ;STORE CHARACTER
                    5504   5556         INR     C       ;BUMP CHAR COUNT
                    5505   5557         INX     D       ;BUMP DEST POINTER
                    5506   5558         INX     H       ;BUMP <SOURCE> POINTER
                    5507   5559         JMP     FIX4A   ;CONTINUE
                    5508   5560 ;
                    5509   5561 ; PREPARE <DEST> FOR SUBMISSION AS NEW LINE
                    5510   5562 ;
                    5511   5563 FIX5:   STAX    D       ;BUFFER TERMINATOR
                    5512   5564         INR     C       ;BUMP LENGTH COUNT
                    5513   5565         MOV     A,C     ;FETCH COUNT
                    5514   5566         STA     IOBUF   ;STORE IT
                    5515   5567         MOV     B,A     ;COPY COUNT TO B
                    5516   5568         LXI     H,IMMED ;POINT NEW LINE AREA
                    5517   5569         LXI     D,IOBUF ;POINT WHERE IT IS NOW
                    5518   5570         CALL    COPYD   ;COPY IT
                    5519   5571         POP     B       ;RESTORE LINE #
                    5520   5572         POP     H       ;RESTORE PROGRAM POINTER
                    5521   5573         PUSH    H       ;SAVE IT
                    5522   5574         JMP     EDIT2   ;PROCESS AS NEW LINE
                    5523   5575 ;PAGE
                    5524   5576 ;
                    5525   5577 ; TAPE CASSETTE COMMANDS
                    5526   5578 ;
                    5527   5579 ;
                    5528   5580 ;       TAPE CASSETTE EQUATES
                    5529   5581 ;
                    5530   5582 SWCH    EQU     0FFH    ;SWITCH PORT
                    5531   5583 CASC    EQU     3       ;STATUS PORT FOR TARBELL
                    5532   5584 CASD    EQU     0       ;DATA PORT
                    5533   5585 CFLAG   EQU     4       ;DATA FLAG FOR TARBELL ON MIO
                    5534   5586 ;
                    5535   5587 ; CASSETTE FILE FORMAT
                    5536   5588 ;
                    5537   5589 ;    EACH RECORD:
                    5538   5590 ;       TYPE BYTE: 4 FOR BASIC PROGRAM,
                    5539   5591 ;                  PLUS BIT 7 ON IF DATA NOT HEADER RECORD
                    5540   5592 ;       LENGTH BYTE: # DATA BYTES (1-128)
                    5541   5593 ;       2 BYTES OF CHECKSUM
                    5542   5594 ;
                    5543   5595 ;    EACH FILE BEGINS WITH A HEADER RECORD
                    5544   5596 ;       TYPE 4
                    5545   5597 ;       LENGTH: 7
                    5546   5598 ;           5 CHARS FILENAME, BLANK-FILLED
                    5547   5599 ;           2 BYTES TOTAL LENGTH OF DATA IN FILE
                    5548   5600 ;       2 BYTES OF CHECKSUM
                    5549   5601 ;
                    5550   5602 ;    AND HAS N DATA RECORDS
                    5551   5603 ;       TYPE: 84
                    5552   5604 ;       LENGTH: 128 EXCEPT LAST RECORD MAY BE LESS
                    5553   5605 ;       DATA: NEXT (LENGTH) BYTES OF IMAGE OF PROGRAM AREA
                    5554   5606 ;       CHECKSUM: 2 BYTES, 2'S COMPLEMENT OF SUM OF BYTES
                    5555   5607 ;
                    5556   5608 ;    FILES OF TYPE OTHER THAN 4 ARE IGNORED BY BASIC
                    5557   5609 ;
                    5558   5610 ; HARDWARE USED:
                    5559   5611 ;       IMSAI MIO BOARD, CASSETTE DATA ON PORT 0,
                    5560   5612 ;       STATUS ON PORT 3,
                    5561   5613 ;       CASSETTE READY JUMPERED TO BIT 2 OF PORT 3.
                    5562   5614 ;
                    5563   5615 ;
                    5564   5616 ;       TAPE UTILITY ROUTINE
                    5565   5617 ;
                    5566   5618 ; WATCH         WAIT FOR TARBELL READY OR CONTROL-C
                    5567   5619 ;
                    5568   5620 WATCH:  PUSH B          ;SAVE REGS - CPM STATUS CALL CAN CLOBBER
                    5569   5621         PUSH D
                    5570   5622         PUSH H
                    5571   5623         CALL    TSTCC   ;TEST FOR CNTRL-C
                    5572   5624         POP H           ;RESTORE REGS IN CPM DEBUGGING MODE
                    5573   5625         POP D
                    5574   5626         POP B
                    5575   5627         IN      CASC    ;READ STATUS PORT
                    5576   5628         ANI     CFLAG   ;TEST
                    5577   5629         JZ      WATCH   ;LOOP TILL READY
                    5578   5630         RET
                    5579   5631 ;
                    5580   5632 ;
                    5581   5633 ; CASI          CASSETTE INPUT TO A-REGISTER
                    5582   5634 ;
                    5583   5635 CASI:   CALL    WATCH   ;WAIT TIL READY
                    5584   5636         IN      CASD    ;READ FROM DATA PORT
                    5585   5637         RET
                    5586   5638 ;
                    5587   5639 ;
                    5588   5640 ; RECO          WRITE A RECORD TO THE TARBELL.
                    5589   5641 ;               D,E==>TYPE, LENGTH BYTES
                    5590   5642 ;               H,L==>START OF SOURCE
                    5591   5643 ;               RETURNS UPDATED SOURCE POINTER IN DE
                    5592   5644 ;
                    5593   5645 RECO:   MOV     A,D     ;TYPE BYTE
                    5594   5646         CALL    CASO    ;WRITE IT
                    5595   5647         MOV     A,E     ;COUNT
                    5596   5648         CALL    CASO    ;WRITE IT
                    5597   5649         MOV     B,E     ;COUNT
                    5598   5650         XCHG            ;SOURCE NOW IN DE
                    5599   5651         LXI     H,0     ;INITIAL CHECKSUM
                    5600   5652 NCHAR:  LDAX    D       ;FETCH NEXT CHAR
                    5601   5653         CALL    CASO    ;WRITE IT
                    5602   5654         INX     D       ;PNT NEXT CHAR
                    5603   5655         CALL    CKSUM   ;ADD TO CKSUM, PUT ADD IN LIGHTS
                    5604   5656         DCR     B       ;REDUCE COUNT
                    5605   5657         JNZ     NCHAR   ;LOOP ON COUNT
                    5606   5658         DCX     H       ;ADJUST HL FOR COMPLIMENT
                    5607   5659         MOV     A,H     ;WRITE CHECKSUM
                    5608   5660         CMA
                    5609   5661         CALL    CASO
                    5610   5662         MOV     A,L
                    5611   5663         CMA
                    5612   5664         ;WRITE LAST BYTE & RETURN
                    5613   5665 ;
                    5614   5666 ;
                    5615   5667 ; CASO          CASSETTE OUTPUT BYTE FROM A-REGISTER
                    5616   5668 ;
                    5617   5669 CASO:   PUSH PSW
                    5618   5670         CALL WATCH      ;WAIT TILL READY
                    5619   5671         POP PSW
                    5620   5672         OUT CASD        ;WRITE TO DATA PORT
                    5621   5673         RET
                    5622   5674 ;
                    5623   5675 ;
                    5624   5676 ; CKSUM         CALCULATE THE CHECKSUM:
                    5625   5677 ;               ADD A TO HL
                    5626   5678 ;       ALSO OUTPUS HI ADDR TO SENSE LIGHTS
                    5627   5679 ;
                    5628   5680 CKSUM:  ADD     L       ;ADD PREVIOUS LO
                    5629   5681         MOV     L,A     ;SAVE NEW LO
                    5630   5682         RNC
                    5631   5683         INR     H       ;PROPAGATE CARRY
                    5632   5684 ;
                    5633   5685 ;
                    5634   5686 ; SENSE         OUTPUT HI ADDR FROM D TO LIGHTS
                    5635   5687 ;
                    5636   5688 SENSE:  MOV     A,D
                    5637   5689         CMA
                    5638   5690         OUT     SWCH
                    5639   5691         RET
                    5640   5692 ;
                    5641   5693 ;
                    5642   5694 ; RECI          INPUT A RECORD FROM THE TARBELL
                    5643   5695 ;       TAKES A BUFFER POINTER IN HL
                    5644   5696 ;       RETURNS UPDATED POINTER IN DE,
                    5645   5697 ;               RECORD TYPE IN A, RECORD LENGTH IN C
                    5646   5698 ;               CLOBBERS B,H,L
                    5647   5699 ;
                    5648   5700 RECI:   CALL    CASI    ;GET TYPE
                    5649   5701         PUSH    PSW     ;SAVE TYPE TO RETURN TO CALLER
                    5650   5702         CALL    CASI    ;GET LENGTH
                    5651   5703         MOV     C,A     ;STORE LEN
                    5652   5704         MOV     B,A     ;IN B ALSO
                    5653   5705         XCHG            ;PUT DESTINATION PTR IN DE
                    5654   5706         LXI     H,0     ;INITIAL CHECKSUM
                    5655   5707 RECI1:  CALL    CASI    ;INPUT BYTE
                    5656   5708         STAX    D       ;STORE IT
                    5657   5709         INX     D
                    5658   5710         CALL    CKSUM   ;UPDATE CKSUM, PUT ADDR IN LIGHTS
                    5659   5711         DCR     B       ;LOOP ON COUNT
                    5660   5712         JNZ     RECI1
                    5661   5713         PUSH    D       ;SAVE DESTINATION PTR
                    5662   5714         CALL    CASI    ;INPUT CHECKSUM
                    5663   5715         MOV     D,A
                    5664   5716         CALL    CASI
                    5665   5717         MOV     E,A
                    5666   5718         DAD     D       ;COMPARE
                    5667   5719         MOV     A,H
                    5668   5720         ORA     L
                    5669   5721         JNZ     CKERR   ;BRIF CHECKSUM ERROR
                    5670   5722         POP     D       ;RESTORE DEST PTR
                    5671   5723         POP     PSW     ;RESTORE RECORD TYPE BYTE
                    5672   5724         RET
                    5673   5725 ;
                    5674   5726 ;
                    5675   5727 ; CSAVE COMMAND
                    5676   5728 ;
                    5677   5729 CSAVE:  RST     1       ;SKIP ANY SPACES
                    5678   5730         MVI     A,10H   ;ENABLE WRITE
                    5679   5731         OUT     CASC
                    5680   5732         PUSH    H       ;SAVE PTR
                    5681   5733         MVI     B,255   ;WRITE INITIAL 255 NULLS
                    5682   5734         XRA     A
                    5683   5735 NULS:   CALL    CASO
                    5684   5736         DCR     B
                    5685   5737         JNZ     NULS
                    5686   5738         MVI     A,3CH   ;START BYTE
                    5687   5739         CALL    CASO
                    5688   5740         MVI     B,32    ;32 SYNC BYTES
                    5689   5741         MVI     A,0E6H  ;SYNC BYTE VALUE
                    5690   5742 SYNCS:  CALL    CASO
                    5691   5743         DCR     B
                    5692   5744         JNZ     SYNCS
                    5693   5745         LXI     H,IOBUF ;POINT BUFFER
                    5694   5746         MVI     B,5     ;FILE NAME LENGTH
                    5695   5747         POP     D       ;RESTORE CMD PTR
                    5696   5748 FNAME:  MVI     M,20H   ;DEFAULT BLANK
                    5697   5749         LDAX    D       ;FETCH FILE NAME
                    5698   5750         ORA     A       ;TEST
                    5699   5751         JZ      BLANK
                    5700   5752         MOV     M,A     ;STORE CHAR
                    5701   5753         INX     D       ;NAME PTR
                    5702   5754 BLANK:  INX     H       ;BUFFER PTR
                    5703   5755         DCR     B       ;COUNT
                    5704   5756         JNZ     FNAME
                    5705   5757 ;
                    5706   5758 ; CALCULATE LGTH OF PROGRAM FILE&WRITE IT ON THE HEADER
                    5707   5759 ;
                    5708   5760         LXI     D,BEGPR ;BEGINNING OF PROGRAM
                    5709   5761         LHLD    PROGE   ;END
                    5710   5762         MOV     A,L
                    5711   5763         SUB     E
                    5712   5764         MOV     L,A
                    5713   5765         MOV     A,H
                    5714   5766         SBB     D
                    5715   5767         MOV     H,A
                    5716   5768         INX     H       ;PLUS 1 TO GET # OF BYTES INCLUSIVE
                    5717   5769         PUSH    H       ;SAVE FOR LATER
                    5718   5770         SHLD    IOBUF+5 ;STUFF LENGTH
                    5719   5771         LXI     D,407H  ;TYPE AND LEN OF HEADER RECORD
                    5720   5772                         ;TYPE 4: BASIC PROG FILE, HEADER RCD
                    5721   5773         LXI     H,IOBUF
                    5722   5774         CALL    RECO    ;WRITE RECORD
                    5723   5775 ;
                    5724   5776 ; WRITE PROGRAM FILE
                    5725   5777 ;
                    5726   5778         LXI     H,BEGPR ;POINT START OF PROGRAM
                    5727   5779 NXTRC:  XTHL            ;GET REMAINING LENGTH
                    5728   5780         MOV     A,H     ;GET HI REMAINING
                    5729   5781         ORA     L       ;TEST FOR DONE
                    5730   5782         JZ      ERITE   ;BRIF DONE
                    5731   5783         LXI     D,0FF80H;-128
                    5732   5784         DAD     D       ;SUBTRACT RECORD LENGTH
                    5733   5785         JC      RITE    ;IF CARRY, NOT AT END
                    5734   5786         MOV     A,L     ;GET LOW
                    5735   5787         ANI     7FH     ;NUMBER BYTES LEFT
                    5736   5788         MOV     E,A     ;COUNT
                    5737   5789         LXI     H,0     ;REMAINING BYTES
                    5738   5790 RITE:   XTHL            ;RESTORE H
                    5739   5791         MVI     D,084H  ;TYPE BYTE: 80=DATA RECORD (NOT
                    5740   5792                         ;FILE HDR), 4=BASIC PROGRAM FILE.
                    5741   5793         CALL    RECO    ;WRITE
                    5742   5794         XCHG            ;SAVE SOURCE PTR
                    5743   5795         JMP     NXTRC
                    5744   5796 ERITE:  POP     H       ;CLEAN STACK
                    5745   5797 ;
                    5746   5798 ;
                    5747   5799 ; BELL          RING USER'S CHIMES
                    5748   5800 ;
                    5749   5801 BELL:   MVI     A,7     ;CODE FOR BELL
                    5750   5802         CALL    TESTO
                    5751   5803         JMP     RDY
                    5752   5804         ;PAGE
                    5753   5805 ; CLOAD         LOAD A PROGRAM FROM THE TARBELL
                    5754   5806 ;
                    5755   5807 CLOAD:
                    5756   5808 NULL1:  MVI     A,60H   ;MIO CONTROL TO READ BY BITS
                    5757   5809         OUT     CASC    ;WRITE TO STATUS PORT
                    5758   5810 NULLS:  CALL    CASI    ;READ LEADING NULLS
                    5759   5811         OUT     SWCH    ;PUT IN LIGHTS
                    5760   5812         CPI     0E6H    ;WAIT FOR FIRST SYNC BYTE
                    5761   5813         JNZ     NULLS
                    5762   5814         MVI     A,20H   ;MIO CONTROL TO READ BY BYTES
                    5763   5815         OUT     CASC    ;WRITE TO STATUS PORT
                    5764   5816         MVI     B,31    ;NUMBER REMAINING SYNC BYTES
                    5765   5817 SYNC:   CALL    CASI    ;READ PAST SYNC
                    5766   5818         OUT     SWCH
                    5767   5819         CPI     0E6H
                    5768   5820         JNZ     NULL1   ;TRY FOR MORE NULLS
                    5769   5821         DCR     B
                    5770   5822         JNZ     SYNC
                    5771   5823         LXI     H,IOBUF ;POINT BUFFER
                    5772   5824         CALL    RECI    ;READ A RECORD
                    5773   5825         CPI     4       ;TEST TYPE BYTE: IS IT BASIC PROGRAM
                    5774   5826                         ;..FILE HEADER RECORD?
                    5775   5827         JNZ     NULL1   ;NO, START OVER, KEEP LOOKING
                    5776   5828         LHLD    IOBUF+5 ;LOAD LENGTH OF PROGRAM FILE
                    5777   5829         PUSH    H       ;SAVE
                    5778   5830         LXI     H,BEGPR
                    5779   5831 NXTR:   CALL    RECI    ;READ RECORD
                    5780   5832         CPI     84H     ;IS IT BASIC PROGRAM FILE DATA RECORD
                    5781   5833         JNZ     CKERR   ;NO, SOMETHING'S WRONG.
                    5782   5834         POP     H       ;LENGTH
                    5783   5835         ;SUBTRACT 0,C  FROM HL
                    5784   5836         MOV     A,L
                    5785   5837         SUB     C
                    5786   5838         MOV     L,A
                    5787   5839         MOV     A,H
                    5788   5840         MVI     C,0
                    5789   5841         SBB     C
                    5790   5842         MOV     H,A
                    5791   5843         ORA     L       ;TEST RESULT FOR 0
                    5792   5844         XCHG            ;BUFFER ADDR TO HL
                    5793   5845         PUSH    D       ;SAVE REMAINING LENGTH
                    5794   5846         JNZ     NXTR    ;JIF NOT DONE READING DATA
                    5795   5847         POP     D       ;CLEAR STACK
                    5796   5848 ;LOADING DONE. SET POINTER TO END OF PROGRAM.
                    5797   5849         XRA     A
                    5798   5850         MOV     M,A     ;EXTRA 0 FOR PARANOISA
                    5799   5851         DCX     H       ;POINT LAST RECORD BYTE (SHOULD BE 0)
                    5800   5852         SHLD    PROGE   ;SAVE END OF PROG FOR EDIT, LIST, &C
                    5801   5853         STA     IOBUF+5 ;MARK END OF FILE NAME FOR TYPEOUT
                    5802   5854 ;TYPE FILE NAME
                    5803   5855         LDA     IOBUF
                    5804   5856         CPI     20H     ;TEST FOR NO NAME
                    5805   5857         CNZ     TERMO   ;PRINT NAME IF THERE
                    5806   5858         JMP     BELL
                    5807   5859         ENDIF
                    5808   5860 ;
1fab  =             5809   5861 PEEK    EQU     $
                    5810   5862 ;
                    5811   5863 ; STMT: A=PEEK(X). RETURNS DECIMAL VALUE OF MEMORY ADDRESS X.
                    5812   5864 ;
1fab  cd 35 1f      5813   5865         CALL    FACDE   ;GET ADDRESS IN D,E
1fae  eb            5814   5866         XCHG            ;ADDRESS TO H,L
1faf  11 00 00      5815   5867         LXI     D,0     ;CLEAR D,E
1fb2  5e            5816   5868         MOV     E,M     ;PUT MEMORY BYTE IN E
1fb3  c3 89 1c      5817   5869         JMP     BINFL   ;CONVERT D,E TO BINARY AND RETURN
                    5818   5870 ;
1fb6  =             5819   5871 POKE    EQU     $
                    5820   5872 ;
                    5821   5873 ; STMT: POKE <ADDRESS>,<VALUE>.  PUTS IN MEMORY ADDRESS.
                    5822   5874 ;
1fb6  cd 80 0f      5823   5875         CALL    EXPR    ;EVALUATE ADDRESS EXPRESSION
1fb9  7e            5824   5876         MOV     A,M     ;LOAD NEXT CHARACTER
1fba  fe 2c         5825   5877         CPI     ','     ;TEST
1fbc  c2 0f 1c      5826   5878         JNZ     SNERR   ;BRIF ERROR
1fbf  23            5827   5879         INX     H       ;POINT NEXT
1fc0  e5            5828   5880         PUSH    H       ;SAVE H,L
1fc1  cd 35 1f      5829   5881         CALL    FACDE   ;PUT ADDRESS IN D,E
1fc4  e1            5830   5882         POP     H       ;RESTORE H,L
1fc5  d5            5831   5883         PUSH    D       ;SAVE ADDRESS
1fc6  cd 80 0f      5832   5884         CALL    EXPR    ;EVALUATE VALUE EXPRESSION
1fc9  cd 94 1a      5833   5885         CALL    EOL     ;TEST FOR END OF LINE
1fcc  cd 66 1c      5834   5886         CALL    FBIN    ;CONVERT FACC TO A REGISTER VALUE
1fcf  e1            5835   5887         POP     H       ;GET D,E ADDRESS IN H,L
1fd0  77            5836   5888         MOV     M,A     ;MOVE BYTE
1fd1  c3 0b 02      5837   5889         JMP     RUN     ;CONTINUE
                    5838   5890 ;
                    5839   5891 ;
1fd4  =             5840   5892 JUMP    EQU     $
                    5841   5893 ;
                    5842   5894 ; STMT: CALL <ADDRESS>. EXECUTES CODE AT MEMORY ADDRESS.
                    5843   5895 ;
1fd4  cd 80 0f      5844   5896         CALL    EXPR    ;EVALUATE ADDRESS EXPRESSION
1fd7  cd 94 1a      5845   5897         CALL    EOL     ;TEST FOR END OF LINE
1fda  cd 35 1f      5846   5898         CALL    FACDE   ;CONVERT FACC TO ADDRESS IN D,E
1fdd  21 0b 02      5847   5899         LXI     H,RUN   ;MAKE INTO SUBROUTINE
1fe0  e5            5848   5900         PUSH    H
1fe1  eb            5849   5901         XCHG            ;MOVE ADDRESS TO HL
1fe2  e9            5850   5902         PCHL            ;EXECUTE USER'S ROUTINE
                    5851   5903 ;PAGE
                    5852   5904         IF      HUNTER
                    5853   5905 ;
                    5854   5906 ;
                    5855   5907 BAUD    EQU     $
                    5856   5908 ;
                    5857   5909 ; SOFTWARE BAUD SELECTION ON SIO BOARDS MODIFIED BY
                    5858   5910 ; W. HARTER, COYOTE COMPUTERS, DAVIS, CALIF.
                    5859   5911 ;
                    5860   5912 ; COMMAND 'BAUD <RATE>' WHERE <RATE>=110,300,1200,2400,9600
                    5861   5913 ;
                    5862   5914         RST     1       ;SKIP BLANKS
                    5863   5915         LXI     D,BAUDS+6       ;POINT BAUD TABLE
                    5864   5916         CALL    SEEK    ;GO SEARCH BAUD TABLE
                    5865   5917         JZ      CVERR   ;BRIF RATE NOT FOUND
                    5866   5918         DCX     H       ;ADJUST POINTER
                    5867   5919 BAUD1:  INX     H       ;LOOK AT CHARACTER
                    5868   5920         CALL    NUMER   ;TEST FOR DIGIT
                    5869   5921         JZ      BAUD1   ;LOOP PAST RATE
                    5870   5922         CALL    EOL     ;TEST FOR END OF LINE
                    5871   5923         XCHG            ;POINT ADDRESS OF CONTROL BYTES
                    5872   5924         MOV     E,M     ;LOW BYTE TO E
                    5873   5925         INX     H       ;POINT NEXT
                    5874   5926         MOV     D,M     ;HIGH BYTE TO D
                    5875   5927         LDA     EDSW    ;GET MODE SWITCH
                    5876   5928         ORA     A       ;TEST IT
                    5877   5929         JNZ     SETIT   ;BRIF IMMEDIATE MODE
                    5878   5930         LXI     H,BAUDS ;POINT 'BAUD'
                    5879   5931         CALL    TERMM   ;WRITE IT
                    5880   5932         PUSH    D       ;SAVE ADDRESS OF CONTROL BYTES
                    5881   5933         LXI     H,IOBUF ;POINT BUFFER
                    5882   5934         MVI     B,4     ;LOAD COUNT
                    5883   5935         CALL    COPYD   ;COPY RATE TO IOBUF
                    5884   5936         MVI     M,0     ;TERMINATE MESSAGE
                    5885   5937         CALL    TERMO   ;WRITE IT
                    5886   5938         POP     D       ;RESTORE CONTROL BYTES
                    5887   5939 SETIT:  LXI     H,4     ;LOAD OFFSET
                    5888   5940         DAD     D       ;PIONT 1ST CONTROL BYTE
                    5889   5941         MVI     A,40H   ;LOAD RESET
                    5890   5942         OUT     TTY+1   ;WRITE IT
                    5891   5943         MVI     A,M     ;MODE BYTE
                    5892   5944         OUT     TTY+1   ;WRITE IT
                    5893   5945         MVI     A,17H   ;ENABLE BYTE
                    5894   5946         OUT     TTY+1   ;WRITE IT
                    5895   5947         INX     H       ;POINT SPEED BYTE
                    5896   5948         MOV     A,M     ;LOAD IT
                    5897   5949         OUT     8       ;WRITE IT
                    5898   5950 BAUD2:  IN      TTY+1   ;READ STATUS
                    5899   5951         ANI     2       ;TEST
                    5900   5952         JZ      BAUD2   ;WAIT FOR ACKNOWLEDGMENT
                    5901   5953         IN      TTY     ;READ AND DISCARD
                    5902   5954         LDA     EDSW    ;GET MODE SWITCH
                    5903   5955         ORA     A       ;TEST IT
                    5904   5956         JZ      RUN     ;BRIF RUN MODE
                    5905   5957         JMP     GETCM   ;BRIF IMMEDIATE MODE
                    5906   5958 BAUDS:  DB      'BAUD',0FEH     ;BAUD MESSAGE
                    5907   5959 ;
                    5908   5960 ; BAUD TABLE.
                    5909   5961 ;
                    5910   5962 B110:   DB      '110 ',0FAH,2,0
                    5911   5963         DW      B110
                    5912   5964 B300:   DB      '300 ',0FBH,0
                    5913   5965         DW      B300
                    5914   5966 B1200:  DB      '1200',0FAH,0
                    5915   5967         DW      B1200
                    5916   5968 B2400:  DB      '2400',0FAH,32,0
                    5917   5969         DW      B2400
                    5918   5970 B9600:  DB      '9600',0FAH,34,0
                    5919   5971         DW      B9600
                    5920   5972         DB      0       ;END OF BAUD TABLE
                    5921   5973 ;
                    5922   5974         ENDIF
                    5923   5975 ;
                    5924   5976         IF      CPM     ;CPM INITIALIZATION STORES
                    5925   5977                         ;...BIOS JUMP TABLE HERE
                    5926   5978 BTSTAT: DS      3       ;JMP TO BIOS CONSOLE STATUS
                    5927   5979 BTIN:   DS      3       ;JMP TO BIOS CONSOLE INPUT
                    5928   5980 BTOUT:  DS      3       ;JMP TO BIOS CONSOLE OUTPUT
                    5929   5981         ENDIF
                    5930   5982 ;PAGE
1fe2  =             5931   5983 ROMEN   EQU     $-1
                    5932   5984 ;
                    5933   5985         ORG     8192    ;RAM STARTS OF 8K BOUNDARY
                    5934   5986         IF      LARGE OR CPM    ;ADJUST START OF RAM IF 8+K
                    5935   5987         ORG     2400H   ;RAM STARTS ON 9K BOUNDARY
                    5936   5988         ENDIF
                    5937   5989 ;
                    5938   5990 ; ALL CODE ABOVE THIS POINT IS READ ONLY AND CAN BE PROM'ED
                    5939   5991 ;
                    5940   5992 ;
2000  =             5941   5993 RAM     EQU     $
                    5942   5994 ;
2000  =             5943   5995 BZERO   EQU     $
2000                5944   5996 FORNE:  DS      1       ;# ENTRYS IN TABLE (MUST BE HERE)
2001                5945   5997         DS      112     ;ROOM FOR 8 NESTS (MUST BE HERE)
2071                5946   5998 TAPES:  DS      1       ;TAPE SWITCH (MUST BE HERE)
2072                5947   5999 DIMSW:  DS      1       ;DIM SWITCH (MUST BE HERE)
2073                5948   6000 OUTSW:  DS      1       ;OUTPUT SWITCH (MUST BE HERE)
2074                5949   6001 ILSW:   DS      1       ;INPUT LINE SWITCH (MUST BE HERE)
2075                5950   6002 RUNSW:  DS      1       ;RUN SWITCH(MUST BE HERE)
2076                5951   6003 EDSW:   DS      1       ;MODE SWITCH(MUST BE HERE)
2077  =             5952   6004 EZERO   EQU     $
                    5953   6005 ;
2077                5954   6006 LINEN:  DS      5
207c                5955   6007 IMMED:  DS      82      ;IMMEDIATE COMMAND STORAGE AREA
20ce                5956   6008 IOBUF:  DS      82      ;INPUT/OUTPUT BUFFER
2120                5957   6009 STRIN:  DS      256     ;STRING BUFFER AREA
2220                5958   6010 OUTA:   DS      3       ;*** FILLED IN AT RUN TIME
2223                5959   6011 INDX:   DS      2       ;HOLDS VARIABLE NAME OF FOR/NEXT
2225                5960   6012 REL:    DS      1       ;HOLDS THE RELATION IN AN IF STMT
2226                5961   6013 IFTYP:  DS      1       ;HOLDS TYPE CODE OF LEFT SIDE
2227                5962   6014 TVAR1:  DS      4       ;TEMP STORAGE
222b                5963   6015 TVAR2:  DS      4       ;DITTO
222f                5964   6016 TEMP1:  DS      4       ;TEMP STORAGE FOR FUNCTIONS
2233                5965   6017 TEMP2:  DS      4
2237                5966   6018 TEMP3:  DS      4
223b                5967   6019 TEMP4:  DS      4
223f                5968   6020 TEMP5:  DS      4
2243                5969   6021 TEMP6:  DS      4
2247                5970   6022 TEMP7:  DS      4
224b                5971   6023 LINEL:  DS      2       ;HOLDS MIN LINE NUMBER IN LIST
224d                5972   6024 LINEH:  DS      2       ;HOLDS MAX LINE NUMBER IN LIST
224f                5973   6025 PROMP:  DS      1       ;HOLDS PROMPT CHAR
2250                5974   6026 EXPRS:  DS      2       ;HOLDS ADDR OF EXPRESSION
2252                5975   6027 ADDR1:  DS      2       ;HOLDS TEMP ADDRESS
2254                5976   6028 ADDR2:  DS      2       ;HOLDS TEMP ADDRESS
2256                5977   6029 ADDR3:  DS      2       ;HOLDS STMT ADD DURING EXPR EVAL
2258                5978   6030 FACC:   DS      4
225c                5979   6031 FTEMP:  DS      12
2268                5980   6032 PARCT:  DS      1
2269                5981   6033 SPCTR:  DS      2
226b                5982   6034 CMACT:  DS      1       ;COUNT OF COMMAS
226c                5983   6035 FNARG:  DS      4       ;SYMBOLIC ARG & ADDRESS
2270                5984   6036 STMT:   DS      2       ;HOLDS ADDR OF CURRENT STATEMENT
2272                5985   6037 ENDLI:  DS      2       ;HOLDS ADDR OF MULTI STMT PTR
2274                5986   6038 MULTI:  DS      1       ;SWITCH 0=NO, 1=MULTI STMT LINE
2275                5987   6039 DEXP:   DS      1
2276                5988   6040 COLUM:  DS      1       ;CURRENT TTY COLUMN
2277                5989   6041 RNDX:   DS      2       ;RANDOM VARIABLE STORAGE
2279                5990   6042 RNDY:   DS      2       ;THE RND<X>,TRND<X>,AND RNDSW
227b                5991   6043 RNDZ:   DS      2       ;MUST BE KEPT IN ORDER
227d                5992   6044 RNDS:   DS      2
227f                5993   6045 TRNDX:  DS      2
2281                5994   6046 TRNDY:  DS      2
2283                5995   6047 TRNDZ:  DS      2
2285                5996   6048 TRNDS:  DS      2
2287                5997   6049 RNDSW:  DS      1
2288                5998   6050 FNMOD:  DS      1       ;SWITCH, 0=NOT, <>0 = IN DEF FN
2289                5999   6051 LINE:   DS      2       ;HOLD ADD OF PREV LINE NUM
228b                6000   6052 STACK:  DS      2       ;HOLDS ADDR OF START OF RETURN STACK
228d                6001   6053 PRSW:   DS      1       ;ON=PRINT ENDED WITH , OR ;
228e                6002   6054 NS:     DS      1       ;HOLDS LAST TYPE (NUMERIC/STRING)
228f                6003   6055 DATAP:  DS      2       ;ADDRESS OF CURRENT DATA STMT
2291                6004   6056 DATAB:  DS      2       ;ADDRESS OF DATA POOL
2293                6005   6057 PROGE:  DS      2       ;ADDRESS OF PROGRAM END
                    6006   6058 ;
                    6007   6059         IF      CPM
                    6008   6060 ;TEMPORARY CODE FOR INITIALIZATION HERE
                    6009   6061 ;
                    6010   6062 INITC:  LHLD    BOOT+1  ;PTR TO BIOS TABLE
                    6011   6063         LXI     D,CSTAT ;OFFSET OF CONSOLE QUERY ENTRY
                    6012   6064         DAD     D       ;POINT INTO BIO JUMP TABLE
                    6013   6065         LXI     D,BTSTAT;POINT INTO BASIC JMP TABLE
                    6014   6066         MVI     B,9     ;COUNT
                    6015   6067         CALL    COPYH   ;MOE BIOS TABLE INTO BASIC
                    6016   6068         MVI     A,0C3H  ;JMP OP CODE
                    6017   6069         LXI     H,RST1! STA 8H! SHLD 9H
                    6018   6070         LXI     H,RST2! STA 10H! SHLD 11H
                    6019   6071         LXI     H,RST3! STA 18H! SHLD 19H
                    6020   6072         LXI     H,RST4! STA 20H! SHLD 21H
                    6021   6073         LXI     H,RST5! STA 28H! SHLD 29H
                    6022   6074         LXI     H,RST6! STA 30H! SHLD 31H
                    6023   6075         LHLD    BDOS+1  ;LOCATE TOP OF RAM
                    6024   6076         JMP     INIT1   ;CONTINUE AS IN NON-CPM VERSION
                    6025   6077         ENDIF
                    6026   6078 ;
                    6027   6079 ;
2295                6028   6080         DS      1       ;DATA STATEMENT FLAG (MUST BE HERE)
2296                6029   6081 BEGPR:
                    6030   6082 ;
2296                6031   6083         END

Symbol table

ABS    0bc7    ADDR1  2252    ADDR2  2254    ADDR3  2256    ALPHA  1b21
ARG    1c74    ARGNU  1c83    ASCII  0d9a    ATN    0ad4    ATN1   0ae3
ATNCO  1dd2    BACKSL 005c    BASIC  0000*   BDOS   0005*   BEGPR  2296
BINFL  1c89    BOOT   0000*   BZERO  2000    CERCE  110b    CHA1   0953
CHA2   0968    CHA3   0998    CHANG  092a    CHRFN  0d8f    CKERR  1c23*
CMACT  226b    COLUM  2276    COMP1  0013    COMP2  1a79    COMP3  1a7d
COMP4  1a7e    COMP5  1a81    COMP6  1a8e    CONC2  0d3c    CONC3  0d44
CONC4  0d4c    CONC5  0d62    CONC6  0d76    CONCA  0d26    CONTI  02ee
COPYD  1c4d    COPYH  1c58    COS    0ab3    CPM    0000    CPY4D  1c4b
CPY4H  1c56    CR1    1939    CRLF   195a    CSTAT  0003*   CVERR  1c1f
DAERR  1c17    DATAB  2291    DATAL  1e9b    DATAP  228f    DEFLI  1f1e
DEXP   2275    DIM    09b1    DIM1   09cf    DIM2   0a01    DIM3   0a0c
DIM4   0a17    DIMSW  2072    DV8    12bc    ECHO   19b1    ED7A   013d
ED7B   0146    EDIT1  00e8    EDIT2  00fd*   EDIT3  0103    EDIT5  0114
EDIT6  0129    EDIT7  0135    EDIT8  010f    EDM1   139d    EDM2A  13ac
EDM3   13b0    EDM4   13c4    EDSW   2076    ELOOP  0b9d    EM     00fe
ENDIT  01cb    ENDLI  2272    ENDXP  114b    EOL    1a94    EOL1   1aa3
ERRMS  1e3c    ERROR  1c31    EV1    11c0    EV10   12f9    EV11   1352
EV1A   11c8    EV2    11d0    EV2A   11f0    EV3    1207    EV3A   1228
EV4    124c    EV4A   1260    EV4B   126b    EV5    1278    EV6    1296
EV7    12b2    EV9    12c7    EVAL   11ba    EVCOM  1377    EVLD   1383
EVLD1  1394    EVNEG  1363    EVPS   0a8b    EVPS1  0a95    EVPS2  0a9c
EXEC   0164    EXEC1  0174    EXP    0b6a    EXP1   0b84    EXPCO  1e1e
EXPR   0f80    EXPRS  2250    EZERO  2077    FACC   2258    FACDE  1f35
FAD1   18f1    FADD   1637    FADD3  1656    FADD4  1663    FADD6  1686
FADD7  1688    FADD9  1694    FADDA  16bc    FADDJ  131b    FADDT  18f0
FADT3  18ee    FALSE  020b    FATAL  00f7    FBIN   1c66    FBIN1  1c71
FDE1   1f4a    FDE2   1f57    FDEC   0d1a    FDIV   179b    FDIV3  17ba
FDIV5  17d0    FDIV6  17ea    FDIV7  17f0    FDIV8  17fe    FEXP   18dc
FIN    142e    FIN2   143e    FIN3   1464    FIN4   146c    FIN5   146e
FIN6   147b    FIN7   1480    FIN8   1488    FIN8A  14a0    FIN9   14a2
FINB   14be    FIND   14e5    FIND0  14e8    FIND1  1f61    FIND2  1f7b
FIND3  1f83    FMTEN  14d5    FMUL   1718    FMUL5  1742    FMUL6  174e
FMUL7  1754    FMUL8  176a    FMUL9  1770    FN     0eb1    FN2    0ef3
FN3    0f11    FN4    0f19    FNARG  226c    FND3   0caa    FNEG1  16ca
FNEG2  16d1    FNL    103e    FNL3   1056    FNLIT  1f21    FNMOD  2288
FNORM  16dd    FNRM1  16ef    FNRM2  16f9    FNRM3  1705    FOR    03e5
FOR1   042a    FOR2   042e    FOR4   0452    FOR5   045e    FOR6   046e
FOR7   047a    FOR8   0481    FOR9   04b2    FORA   04e0    FORNE  2000
FOUT   14f0    FOUT0  1501    FOUT2  150b    FOUT3  151c    FOUT4  1527
FOUT5  1537    FOUT6  153d    FOUT7  1560    FOUT9  1570    FOUTA  157f
FOUTB  1582    FOUTC  1587    FOUTD  158c    FOUTH  1599    FOUTI  15b0
FOUTJ  15b4    FOUTK  15d3    FOUTL  15d6    FOUTM  15d9    FOUTN  15f1
FOUTO  15fc    FOUTP  15fd    FOUTQ  1609    FOUTR  1611    FOUTS  161f
FOUTT  1629    FOUTU  155d    FOUTV  1516    FOV1   187d    FOVUN  1871
FREE   01a0    FSB1   18e4    FSHFT  18fb    FSUB   170c    FSUBT  18e3
FTEMP  225c    FTEST  18ce    FUNC0  101b    FUNC4  1036    FUNCT  1c98
GETCH  1a3f    GETCM  00c9    GETS1  181d    GETS2  182e    GETS3  182f
GETS4  183f    GETS5  1841    GETS8  184f    GETS9  186c    GETST  180d
GOSBL  1eaf    GOSU1  0343    GOSUB  033a    GOTO   02f6    GOTO2  0306
GOTOL  1ed0    GTEMP  1b00    HALFP  1dd6    HDR1   01e8    HDRTL  01e6
HUNTER 0000    IF1    0507    IF2    050b    IF3    050f    IF4    0518
IF5    0520    IF6    052a    IF8    0562    IF9    0570    IFF    05a8
IFG    05b1    IFH    05ba    IFI    05c2    IFJ    05d0    IFK    05d6
IFL    05dd    IFM    05e7    IFN    05ec    IFSTM  04e9    IFTYP  2226
ILSW   2074    IMMED  207c    INDX   2223    INIT1  0081    INIT2  0092
INIT3  009f    INP    0d0a    INPL   07a5    INPL1  07c7    INPL2  07d3
INPU1  0733    INPU2  073e    INPU3  0742    INPU4  074d    INPU5  0760
INPU6  0761    INPU7  0775    INPU8  0788    INPU9  078d    INPUA  079c
INPUB  0796    INPUT  0721    INS    1181    INS1   1182    INST1  0e5b
INST2  0e60    INST3  0e67    INST5  0e83    INST6  0e87    INST8  0e92
INST9  0ea3    INSTA  0eac    INSTR  0e51    INT    0be2    INT2   0bf0
INT3   0bff    INT4   0c09    INT5   0c0f    IOBUF  20ce    IRAM   0151
JMPTB  1e4c    JUMP   1fd4    KEY    01dc    KEYL   1e79    LARGE  0000
LDALP  0faf    LDDTN  1091    LDDTP  10a5    LDF    0f9f    LDFN   0ff4
LDFN1  0ffa    LDFNC  107f    LDNUM  0f9c    LDPI   1075    LDRND  1063
LDV    0fde    LDV1   0fc6    LDV2   0fd3    LDV2A  13d7    LEFT   0e05
LENFN  0d89    LET    05f1    LET1   060c    LET2   0626    LET2A  0631
LET3   063d    LET4   064b    LET5   0657    LET6   0664    LET7   0679
LET8   0686    LET9   0689    LINE   2289    LINEH  224d    LINEL  224b
LINEN  2077    LINEO  1a09    LIST   0262    LIST1  0292    LIST2  0295
LIST4  02b5    LIST5  02c5    LIST6  02cf    LIST7  02d5    LIST8  02e5
LIT1   10bf    LIT2   10e3    LIT3   10ff    LITST  10b9    LLINE  1d84
LN     0b13    LN0    0b2c    LN1    0b38    LN2    0b3d    LN2C   1dae
LN2E   1e0a    LNC    1e22    LNCO   1e06    LOCAT  1f5e    LOG    0b61
LOOKD  0f95    LOOKO  111d    LOUT   1a14    MDSGN  177f    MID0   0e21
MID1   0e2f    MID2   0e3c    MID3   0e40    MID4   0e48    MIDFN  0e17
MULTI  2274    NEG    0c7a    NEGON  1daa    NEW    0188    NEW0   0193*
NEW1   0198    NEXT   0692    NEXT1  06a8    NEXT2  06b3    NEXT3  06bc
NEXT5  06f7    NEXT6  06fb    NEXT7  06ef    NEXTL  1ea8    NOTBS  19a6
NOTCH  19a6*   NOTCO  1983    NOTCR  1975    NOTEO  1aad    NOTZ1  1a22
NOTZ2  1a32    NRNDX  1d6b    NS     228e    NULLI  1dec    NUM1   0db2
NUMEN  1b30    NUMER  1b2a    NUMFN  0da7    NXERR  1c1b    ON     08b5
ON3    08db    ON3A   08dc    ON4    08ef    ON5    08f9    ON6    08fd
ON7    0909    ON8    0912    ON9    091d    ONE    1dea    OP1    1158
OP2    1197    OP3    11ac    OP4    11b7    OPLP1  1163    OPLP2  1167
OT1    19bd    OT2    19cc    OT4    19db    OUTA   2220    OUTP   084a
OUTSW  2073    OVERR  1c27    PACK   1ab5    PARCT  2268    PAUZ   1968
PCHOF  1d62    PEEK   1fab    PI     1da2    PILIT  1d97    PK1    1abd
PK3    1ad1    POKE   1fb6    POS    0d20    POWER  1323    PRCNT  1a6d
PRIN2  038b    PRIN4  0356    PRIN5  0396    PRIN6  039f    PRIN7  0389
PRIN8  03aa    PRIN9  03ad    PRINA  03b3    PRINB  03ca    PRINC  03d3
PRINT  0355    PRLIN  1bf1    PROGE  2293    PROMP  224f    PRSW   228d
QTRPI  1da6    RAM    2000    RANDO  089f    RDY    00c3    RDYM   00c0
READ   07e1    READ1  07f0    READ2  080b    READ3  081b    READ4  0820
READ5  082c    READ6  0833    READ7  0843    READ8  0844    READY  1e26
REDIM  0a1d    REDM1  0a33    REIN   1907    REL    2225    RESTO  0316
RETUR  0322    RIGHT  0e0e    RND    0c84    RND1   0c96    RND2   0c9c
RND4   0cb9    RND5   0cc5    RND6   0ccd    RND7   0d01    RNDLI  1cb4
RNDP   1d65    RNDS   227d    RNDSW  2287    RNDX   2277    RNDY   2279*
RNDZ   227b    ROMEN  1fe2*   RSSGN  1791    RST1   0008    RST2   0010*
RST3   0018*   RST4   0020*   RST4A  003b    RST4B  0044    RST5   0028
RST6   0030*   RTERR  1c13    RUN    020b    RUN1   021b    RUN2   0225
RUN3   0237    RUN4   0238    RUN7   024f    RUNCM  01f4    RUNSW  2075
SADR   1b19    SAVE   0255    SCH0   1b3c    SCH1   1b3f    SCH2   1b61
SCH3   1b65    SCH4   1b7d    SCH5   1b81    SCH6   1b8f    SCH7   1ba3
SCH8   1bb8    SCH9   1bc4    SEARC  1b34    SEEK   1f86*   SEEK1  1f86
SEEK2  1f99    SEEK3  1fa9    SGN    0bd0    SGN1   0bd6    SIN    0a41
SIN1   0a49    SIN3A  0a78    SINCO  1de6    SKP2Z  1af9    SKPP   10a1
SNERR  1c0f    SPAC1  0de9    SPACE  0de1    SPCTR  2269    SQC1   1db2
SQC2   1db6    SQC3   1dba    SQR    0c27    SQR1   0c64    SQUI2  1aed
SQUIS  1ae2    STACK  228b    STEPL  1d8d    STERR  1c0b    STMT   2270
STOP   0872    STOPM  1e2d    STR11  0dfe    STRFN  0df1    STRIN  2120
SUB1   1898    SUB2   18a3    SUB3   18ad    SUB4   18bc    SUBSC  1885
SVSGN  1789    TABLI  1d89    TABST  19df    TAN    0abc    TAPE   01be
TAPES  2071    TBASE  0100*   TBLP   19ee    TBLP2  19f5    TBON   19fa
TBSPA  19ff    TEMP1  222f    TEMP2  2233    TEMP3  2237    TEMP4  223b
TEMP5  223f    TEMP6  2243*   TEMP7  2247    TEN    1d9e    TERMI  1904
TERMM  19bd    TERMO  19b5    TEST1  1950    TESTO  194f    THENL  1d92
TOLIT  1ed2    TREAD  191d    TRNDS  2285*   TRNDX  227f    TRNDY  2281*
TRNDZ  2283*   TRUE   0581    TSTC1  1a5e    TSTCC  1a3a    TSTEL  1aa8
TTY    0002    TVAR1  2227    TVAR2  222b    TWO    1d9a    ULERR  1c03
UNERR  1c2c    UPARR  005e    VAL    0dba    VAL1   0dc6    VAL2   0dcf
VAR    1bc9    VAR2   1bde    VAR3   1be9    VERS   1d78    WHATL  1d73
XEQ    01f9    XSQR   1348*   Z1     1a28    Z2     1a38    ZEROM  1c5e
ZMERR  1c07
