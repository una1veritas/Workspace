Z80/8080-Macro-Assembler  Release 2.1

LOC   OBJECT CODE   LINE   STMT SOURCE CODE
                       1      1 ;*************************************************************
                       2      2 ; 
                       3      3 ;                 TINY BASIC FOR INTEL 8080
                       4      4 ;                       VERSION 2.0
                       5      5 ;                     BY LI-CHEN WANG
                       6      6 ;                  MODIFIED AND TRANSLATED
                       7      7 ;                    TO INTEL MNEMONICS
                       8      8 ;                     BY ROGER RAUSKOLB
                       9      9 ;                      10 OCTOBER,1976
                      10     10 ;                        @COPYLEFT
                      11     11 ;                   ALL WRONGS RESERVED
                      12     12 ; 
                      13     13 ;                 ADDED FIX FOR BUGGY CHGSGN
                      14     14 ;                 UDO MUNK, 10 DECEMBER 2019
                      15     15 ;
                      16     16 ;               THIS VERSION HAS I/O MODIFIED
                      17     17 ;                    FOR Z80PACK MACHINES
                      18     18 ;               ALSO MODIFIED TO HALT ON CTL-C
                      19     19 ;                    UDO MUNK, 8 MAY 2024
                      20     20 ;
                      21     21 ;*************************************************************
                      22     22 ; 
                      23     23 ; *** ZERO PAGE SUBROUTINES ***
                      24     24 ; 
                      25     25 ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
                      26     26 ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
                      27     27 ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
                      28     28 ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
                      29     29 ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
                      30     30 ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
                      31     31 ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
                      32     32 ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
                      33     33 ; 
                      34     34 DWA     MACRO WHERE
                      35     35         DB   (WHERE SHR 8) + 128
                      36     36         DB   WHERE AND 0FFH
                      37     37         ENDM
                      38     38 ;
                      39     39         ORG  0H
0000  31 00 20        40     40 START:  LXI  SP,STACK                   ;*** COLD START ***
0003  3e ff           41     41         MVI  A,0FFH
0005  c3 45 06        42     42         JMP  INIT
                      43     43 ;
0008  e3              44     44         XTHL                            ;*** TSTC OR RST 1 ***
0009  ef              45     45         RST  5                          ;IGNORE BLANKS AND
000a  be              46     46         CMP  M                          ;TEST CHARACTER
000b  c3 68 00        47     47         JMP  TC1                        ;REST OF THIS IS AT TC1
                      48     48 ;
000e  3e 0d           49     49 CRLF:   MVI  A,CR                       ;*** CRLF ***
                      50     50 ;
0010  f5              51     51         PUSH PSW                        ;*** OUTC OR RST 2 ***
0011  3a 00 08        52     52         LDA  OCSW                       ;PRINT CHARACTER ONLY
0014  b7              53     53         ORA  A                          ;IF OCSW SWITCH IS ON
0015  c3 67 06        54     54         JMP  OC2                        ;REST OF THIS IS AT OC2
                      55     55 ;
0018  cd 71 03        56     56         CALL EXPR2                      ;*** EXPR OR RST 3 ***
001b  e5              57     57         PUSH H                          ;EVALUATE AN EXPRESSION
001c  c3 2d 03        58     58         JMP  EXPR1                      ;REST OF IT AT EXPR1
001f  57              59     59         DB   'W'
                      60     60 ;
0020  7c              61     61         MOV  A,H                        ;*** COMP OR RST 4 ***
0021  ba              62     62         CMP  D                          ;COMPARE HL WITH DE
0022  c0              63     63         RNZ                             ;RETURN CORRECT C AND
0023  7d              64     64         MOV  A,L                        ;Z FLAGS
0024  bb              65     65         CMP  E                          ;BUT OLD A IS LOST
0025  c9              66     66         RET
0026  41 4e           67     67         DB   'AN'
                      68     68 ;
0028  1a              69     69 SS1:    LDAX D                          ;*** IGNBLK/RST 5 ***
0029  fe 20           70     70         CPI  20H                        ;IGNORE BLANKS
002b  c0              71     71         RNZ                             ;IN TEXT (WHERE DE->)
002c  13              72     72         INX  D                          ;AND RETURN THE FIRST
002d  c3 28 00        73     73         JMP  SS1                        ;NON-BLANK CHAR. IN A
                      74     74 ;
0030  f1              75     75         POP  PSW                        ;*** FINISH/RST 6 ***
0031  cd b6 04        76     76         CALL FIN                        ;CHECK END OF COMMAND
0034  c3 c9 04        77     77         JMP  QWHAT                      ;PRINT "WHAT?" IF WRONG
0037  47              78     78         DB   'G'
                      79     79 ;
0038  ef              80     80         RST  5                          ;*** TSTV OR RST 7 ***
0039  d6 40           81     81         SUI  40H                        ;TEST VARIABLES
003b  d8              82     82         RC                              ;C:NOT A VARIABLE
003c  c2 58 00        83     83         JNZ  TV1                        ;NOT "@" ARRAY
003f  13              84     84         INX  D                          ;IT IS THE "@" ARRAY
0040  cd 1a 04        85     85         CALL PARN                       ;@ SHOULD BE FOLLOWED
0043  29              86     86         DAD  H                          ;BY (EXPR) AS ITS INDEX
0044  da 9f 00        87     87         JC   QHOW                       ;IS INDEX TOO BIG?
0047  d5              88     88         PUSH D                          ;WILL IT OVERWRITE
0048  eb              89     89         XCHG                            ;TEXT?
0049  cd 59 04        90     90         CALL SIZE                       ;FIND SIZE OF FREE
004c  e7              91     91         RST  4                          ;AND CHECK THAT
004d  da f7 04        92     92         JC   ASORRY                     ;IF SO, SAY "SORRY"
0050  21 00 1f        93     93         LXI  H,VARBGN                   ;IF NOT GET ADDRESS
0053  cd 7c 04        94     94         CALL SUBDE                      ;OF @(EXPR) AND PUT IT
0056  d1              95     95         POP  D                          ;IN HL
0057  c9              96     96         RET                             ;C FLAG IS CLEARED
0058  fe 1b           97     97 TV1:    CPI  1BH                        ;NOT @, IS IT A TO Z?
005a  3f              98     98         CMC                             ;IF NOT RETURN C FLAG
005b  d8              99     99         RC
005c  13             100    100         INX  D                          ;IF A THROUGH Z
005d  21 00 1f       101    101         LXI  H,VARBGN                   ;COMPUTE ADDRESS OF
0060  07             102    102         RLC                             ;THAT VARIABLE
0061  85             103    103         ADD  L                          ;AND RETURN IT IN HL
0062  6f             104    104         MOV  L,A                        ;WITH C FLAG CLEARED
0063  3e 00          105    105         MVI  A,0
0065  8c             106    106         ADC  H
0066  67             107    107         MOV  H,A
0067  c9             108    108         RET
                     109    109 ;
                     110    110 ;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
                     111    111 ;       RST  5                          ;THIS IS AT LOC. 8
                     112    112 ;       CMP  M                          ;AND THEN JUMP HERE
0068  23             113    113 TC1:    INX  H                          ;COMPARE THE BYTE THAT
0069  ca 73 00       114    114         JZ   TC2                        ;FOLLOWS THE RST INST.
006c  c5             115    115         PUSH B                          ;WITH THE TEXT (DE->)
006d  4e             116    116         MOV  C,M                        ;IF NOT =, ADD THE 2ND
006e  06 00          117    117         MVI  B,0                        ;BYTE THAT FOLLOWS THE
0070  09             118    118         DAD  B                          ;RST TO THE OLD PC
0071  c1             119    119         POP  B                          ;I.E., DO A RELATIVE
0072  1b             120    120         DCX  D                          ;JUMP IF NOT =
0073  13             121    121 TC2:    INX  D                          ;IF =, SKIP THOSE BYTES
0074  23             122    122         INX  H                          ;AND CONTINUE
0075  e3             123    123         XTHL
0076  c9             124    124         RET
                     125    125 ;
0077  21 00 00       126    126 TSTNUM: LXI  H,0                        ;*** TSTNUM ***
007a  44             127    127         MOV  B,H                        ;TEST IF THE TEXT IS
007b  ef             128    128         RST  5                          ;A NUMBER
007c  fe 30          129    129 TN1:    CPI  30H                        ;IF NOT, RETURN 0 IN
007e  d8             130    130         RC                              ;B AND HL
007f  fe 3a          131    131         CPI  3AH                        ;IF NUMBERS, CONVERT
0081  d0             132    132         RNC                             ;TO BINARY IN HL AND
0082  3e f0          133    133         MVI  A,0F0H                     ;SET B TO # OF DIGITS
0084  a4             134    134         ANA  H                          ;IF H>255, THERE IS NO
0085  c2 9f 00       135    135         JNZ  QHOW                       ;ROOM FOR NEXT DIGIT
0088  04             136    136         INR  B                          ;B COUNTS # OF DIGITS
0089  c5             137    137         PUSH B
008a  44             138    138         MOV  B,H                        ;HL=10*HL+(NEW DIGIT)
008b  4d             139    139         MOV  C,L
008c  29             140    140         DAD  H                          ;WHERE 10* IS DONE BY
008d  29             141    141         DAD  H                          ;SHIFT AND ADD
008e  09             142    142         DAD  B
008f  29             143    143         DAD  H
0090  1a             144    144         LDAX D                          ;AND (DIGIT) IS FROM
0091  13             145    145         INX  D                          ;STRIPPING THE ASCII
0092  e6 0f          146    146         ANI  0FH                        ;CODE
0094  85             147    147         ADD  L
0095  6f             148    148         MOV  L,A
0096  3e 00          149    149         MVI  A,0
0098  8c             150    150         ADC  H
0099  67             151    151         MOV  H,A
009a  c1             152    152         POP  B
009b  1a             153    153         LDAX D                          ;DO THIS DIGIT AFTER
009c  f2 7c 00       154    154         JP   TN1                        ;DIGIT. S SAYS OVERFLOW
009f  d5             155    155 QHOW:   PUSH D                          ;*** ERROR "HOW?" ***
00a0  11 a6 00       156    156 AHOW:   LXI  D,HOW
00a3  c3 cd 04       157    157         JMP  ERROR
00a6  48 4f 57 3f    158    158 HOW:    DB   'HOW?'
00aa  0d             159    159         DB   CR
00ab  4f 4b          160    160 OK:     DB   'OK'
00ad  0d             161    161         DB   CR
00ae  57 48 41 54    162    162 WHAT:   DB   'WHAT?'
00b2  3f             162    163
00b3  0d             163    164         DB   CR
00b4  53 4f 52 52    164    165 SORRY:  DB   'SORRY'
00b8  59             164    166
00b9  0d             165    167         DB   CR
                     166    168 ;
                     167    169 ;*************************************************************
                     168    170 ;
                     169    171 ; *** MAIN ***
                     170    172 ;
                     171    173 ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
                     172    174 ; AND STORES IT IN THE MEMORY.
                     173    175 ;
                     174    176 ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
                     175    177 ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
                     176    178 ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
                     177    179 ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
                     178    180 ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
                     179    181 ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
                     180    182 ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
                     181    183 ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
                     182    184 ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
                     183    185 ;
                     184    186 ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
                     185    187 ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
                     186    188 ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
                     187    189 ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
                     188    190 ;
                     189    191 ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
                     190    192 ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
                     191    193 ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
                     192    194 ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
                     193    195 ;
                     194    196 ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
                     195    197 ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
                     196    198 ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
                     197    199 ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
                     198    200 ;
00ba  31 00 20       199    201 RSTART: LXI  SP,STACK
00bd  cd 0e 00       200    202 ST1:    CALL CRLF                       ;AND JUMP TO HERE
00c0  11 ab 00       201    203         LXI  D,OK                       ;DE->STRING
00c3  97             202    204         SUB  A                          ;A=0
00c4  cd 63 05       203    205         CALL PRTSTG                     ;PRINT STRING UNTIL CR
00c7  21 ce 00       204    206         LXI  H,ST2+1                    ;LITERAL 0
00ca  22 01 08       205    207         SHLD CURRNT                     ;CURRENT->LINE # = 0
00cd  21 00 00       206    208 ST2:    LXI  H,0
00d0  22 09 08       207    209         SHLD LOPVAR
00d3  22 03 08       208    210         SHLD STKGOS
00d6  3e 3e          209    211 ST3:    MVI  A,3EH                      ;PROMPT '>' AND
00d8  cd fd 04       210    212         CALL GETLN                      ;READ A LINE
00db  d5             211    213         PUSH D                          ;DE->END OF LINE
00dc  11 37 1f       212    214         LXI  D,BUFFER                   ;DE->BEGINNING OF LINE
00df  cd 77 00       213    215         CALL TSTNUM                     ;TEST IF IT IS A NUMBER
00e2  ef             214    216         RST  5
00e3  7c             215    217         MOV  A,H                        ;HL=VALUE OF THE # OR
00e4  b5             216    218         ORA  L                          ;0 IF NO # WAS FOUND
00e5  c1             217    219         POP  B                          ;BC->END OF LINE
00e6  ca 30 07       218    220         JZ   DIRECT
00e9  1b             219    221         DCX  D                          ;BACKUP DE AND SAVE
00ea  7c             220    222         MOV  A,H                        ;VALUE OF LINE # THERE
00eb  12             221    223         STAX D
00ec  1b             222    224         DCX  D
00ed  7d             223    225         MOV  A,L
00ee  12             224    226         STAX D
00ef  c5             225    227         PUSH B                          ;BC,DE->BEGIN, END
00f0  d5             226    228         PUSH D
00f1  79             227    229         MOV  A,C
00f2  93             228    230         SUB  E
00f3  f5             229    231         PUSH PSW                        ;A=# OF BYTES IN LINE
00f4  cd 3b 05       230    232         CALL FNDLN                      ;FIND THIS LINE IN SAVE
00f7  d5             231    233         PUSH D                          ;AREA, DE->SAVE AREA
00f8  c2 0b 01       232    234         JNZ  ST4                        ;NZ:NOT FOUND, INSERT
00fb  d5             233    235         PUSH D                          ;Z:FOUND, DELETE IT
00fc  cd 57 05       234    236         CALL FNDNXT                     ;FIND NEXT LINE
                     235    237                                         ;DE->NEXT LINE
00ff  c1             236    238         POP  B                          ;BC->LINE TO BE DELETED
0100  2a 15 08       237    239         LHLD TXTUNF                     ;HL->UNFILLED SAVE AREA
0103  cd e8 05       238    240         CALL MVUP                       ;MOVE UP TO DELETE
0106  60             239    241         MOV  H,B                        ;TXTUNF->UNFILLED AREA
0107  69             240    242         MOV  L,C
0108  22 15 08       241    243         SHLD TXTUNF                     ;UPDATE
010b  c1             242    244 ST4:    POP  B                          ;GET READY TO INSERT
010c  2a 15 08       243    245         LHLD TXTUNF                     ;BUT FIRST CHECK IF
010f  f1             244    246         POP  PSW                        ;THE LENGTH OF NEW LINE
0110  e5             245    247         PUSH H                          ;IS 3 (LINE # AND CR)
0111  fe 03          246    248         CPI  3                          ;THEN DO NOT INSERT
0113  ca ba 00       247    249         JZ   RSTART                     ;MUST CLEAR THE STACK
0116  85             248    250         ADD  L                          ;COMPUTE NEW TXTUNF
0117  6f             249    251         MOV  L,A
0118  3e 00          250    252         MVI  A,0
011a  8c             251    253         ADC  H
011b  67             252    254         MOV  H,A                        ;HL->NEW UNFILLED AREA
011c  11 00 1f       253    255         LXI  D,TXTEND                   ;CHECK TO SEE IF THERE
011f  e7             254    256         RST  4                          ;IS ENOUGH SPACE
0120  d2 f6 04       255    257         JNC  QSORRY                     ;SORRY, NO ROOM FOR IT
0123  22 15 08       256    258         SHLD TXTUNF                     ;OK, UPDATE TXTUNF
0126  d1             257    259         POP  D                          ;DE->OLD UNFILLED AREA
0127  cd f1 05       258    260         CALL MVDOWN
012a  d1             259    261         POP  D                          ;DE->BEGIN, HL->END
012b  e1             260    262         POP  H
012c  cd e8 05       261    263         CALL MVUP                       ;MOVE NEW LINE TO SAVE
012f  c3 d6 00       262    264         JMP  ST3                        ;AREA
                     263    265 ;
                     264    266 ;*************************************************************
                     265    267 ;
                     266    268 ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
                     267    269 ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
                     268    270 ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
                     269    271 ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
                     270    272 ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
                     271    273 ;
                     272    274 ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
                     273    275 ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
                     274    276 ; GO BACK TO 'RSTART'.
                     275    277 ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
                     276    278 ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
                     277    279 ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
                     278    280 ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
                     279    281 ;*************************************************************
                     280    282 ;
                     281    283 ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
                     282    284 ;
                     283    285 ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
                     284    286 ;
                     285    287 ; 'STOP(CR)' GOES BACK TO 'RSTART'
                     286    288 ;
                     287    289 ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
                     288    290 ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
                     289    291 ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
                     290    292 ;
                     291    293 ; THERE ARE 3 MORE ENTRIES IN 'RUN':
                     292    294 ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
                     293    295 ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
                     294    296 ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
                     295    297 ;
                     296    298 ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
                     297    299 ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
                     298    300 ;
0132  cd c5 04       299    301 NEW:    CALL ENDCHK                     ;*** NEW(CR) ***
0135  21 17 08       300    302         LXI  H,TXTBGN
0138  22 15 08       301    303         SHLD TXTUNF
                     302    304 ;
013b  cd c5 04       303    305 STOP:   CALL ENDCHK                     ;*** STOP(CR) ***
013e  c3 ba 00       304    306         JMP  RSTART
                     305    307 ;
0141  cd c5 04       306    308 RUN:    CALL ENDCHK                     ;*** RUN(CR) ***
0144  11 17 08       307    309         LXI  D,TXTBGN                   ;FIRST SAVED LINE
                     308    310 ;
0147  21 00 00       309    311 RUNNXL: LXI  H,0                        ;*** RUNNXL ***
014a  cd 43 05       310    312         CALL FNDLP                      ;FIND WHATEVER LINE #
014d  da ba 00       311    313         JC   RSTART                     ;C:PASSED TXTUNF, QUIT
                     312    314 ;
0150  eb             313    315 RUNTSL: XCHG                            ;*** RUNTSL ***
0151  22 01 08       314    316         SHLD CURRNT                     ;SET 'CURRENT'->LINE #
0154  eb             315    317         XCHG
0155  13             316    318         INX  D                          ;BUMP PASS LINE #
0156  13             317    319         INX  D
                     318    320 ;
0157  cd 7e 06       319    321 RUNSML: CALL CHKIO                      ;*** RUNSML ***
015a  21 b5 06       320    322         LXI  H,TAB2-1                   ;FIND COMMAND IN TAB2
015d  c3 33 07       321    323         JMP  EXEC                       ;AND EXECUTE IT
                     322    324 ;
0160  df             323    325 GOTO:   RST  3                          ;*** GOTO EXPR ***
0161  d5             324    326         PUSH D                          ;SAVE FOR ERROR ROUTINE
0162  cd c5 04       325    327         CALL ENDCHK                     ;MUST FIND A CR
0165  cd 3b 05       326    328         CALL FNDLN                      ;FIND THE TARGET LINE
0168  c2 a0 00       327    329         JNZ  AHOW                       ;NO SUCH LINE #
016b  f1             328    330         POP  PSW                        ;CLEAR THE PUSH DE
016c  c3 50 01       329    331         JMP  RUNTSL                     ;GO DO IT
                     330    332 ;
                     331    333 ;*************************************************************
                     332    334 ;
                     333    335 ; *** LIST *** & PRINT ***
                     334    336 ;
                     335    337 ; LIST HAS TWO FORMS:
                     336    338 ; 'LIST(CR)' LISTS ALL SAVED LINES
                     337    339 ; 'LIST #(CR)' START LIST AT THIS LINE #
                     338    340 ; YOU CAN STOP THE LISTING BY CONTROL C KEY
                     339    341 ;
                     340    342 ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
                     341    343 ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
                     342    344 ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
                     343    345 ;
                     344    346 ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
                     345    347 ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
                     346    348 ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
                     347    349 ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
                     348    350 ; SPECIFIED, 6 POSITIONS WILL BE USED.
                     349    351 ;
                     350    352 ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
                     351    353 ; DOUBLE QUOTES.
                     352    354 ;
                     353    355 ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
                     354    356 ;
                     355    357 ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
                     356    358 ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
                     357    359 ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
                     358    360 ;
016f  cd 77 00       359    361 LIST:   CALL TSTNUM                     ;TEST IF THERE IS A #
0172  cd c5 04       360    362         CALL ENDCHK                     ;IF NO # WE GET A 0
0175  cd 3b 05       361    363         CALL FNDLN                      ;FIND THIS OR NEXT LINE
0178  da ba 00       362    364 LS1:    JC   RSTART                     ;C:PASSED TXTUNF
017b  cd d5 05       363    365         CALL PRTLN                      ;PRINT THE LINE
017e  cd 7e 06       364    366         CALL CHKIO                      ;STOP IF HIT CONTROL-C
0181  cd 43 05       365    367         CALL FNDLP                      ;FIND NEXT LINE
0184  c3 78 01       366    368         JMP  LS1                        ;AND LOOP BACK
                     367    369 ;
0187  0e 06          368    370 PRINT:  MVI  C,6                        ;C = # OF SPACES
0189  cf             369    371         RST  1                          ;IF NULL LIST & ";"
018a  3b             370    372         DB   3BH
018b  06             371    373         DB   PR2-$-1
018c  cd 0e 00       372    374         CALL CRLF                       ;GIVE CR-LF AND
018f  c3 57 01       373    375         JMP  RUNSML                     ;CONTINUE SAME LINE
0192  cf             374    376 PR2:    RST  1                          ;IF NULL LIST (CR)
0193  0d             375    377         DB   CR
0194  06             376    378         DB   PR0-$-1
0195  cd 0e 00       377    379         CALL CRLF                       ;ALSO GIVE CR-LF AND
0198  c3 47 01       378    380         JMP  RUNNXL                     ;GO TO NEXT LINE
019b  cf             379    381 PR0:    RST  1                          ;ELSE IS IT FORMAT?
019c  23             380    382         DB   '#'
019d  05             381    383         DB   PR1-$-1
019e  df             382    384         RST  3                          ;YES, EVALUATE EXPR.
019f  4d             383    385         MOV  C,L                        ;AND SAVE IT IN C
01a0  c3 a9 01       384    386         JMP  PR3                        ;LOOK FOR MORE TO PRINT
01a3  cd 6f 05       385    387 PR1:    CALL QTSTG                      ;OR IS IT A STRING?
01a6  c3 b6 01       386    388         JMP  PR8                        ;IF NOT, MUST BE EXPR.
01a9  cf             387    389 PR3:    RST  1                          ;IF ",", GO FIND NEXT
01aa  2c             388    390         DB   ','
01ab  06             389    391         DB   PR6-$-1
01ac  cd b6 04       390    392         CALL FIN                        ;IN THE LIST.
01af  c3 9b 01       391    393         JMP  PR0                        ;LIST CONTINUES
01b2  cd 0e 00       392    394 PR6:    CALL CRLF                       ;LIST ENDS
01b5  f7             393    395         RST  6
01b6  df             394    396 PR8:    RST  3                          ;EVALUATE THE EXPR
01b7  c5             395    397         PUSH B
01b8  cd 95 05       396    398         CALL PRTNUM                     ;PRINT THE VALUE
01bb  c1             397    399         POP  B
01bc  c3 a9 01       398    400         JMP  PR3                        ;MORE TO PRINT?
                     399    401 ;
                     400    402 ;*************************************************************
                     401    403 ;
                     402    404 ; *** GOSUB *** & RETURN ***
                     403    405 ;
                     404    406 ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
                     405    407 ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
                     406    408 ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
                     407    409 ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
                     408    410 ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
                     409    411 ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
                     410    412 ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
                     411    413 ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
                     412    414 ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
                     413    415 ;
                     414    416 ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
                     415    417 ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
                     416    418 ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
                     417    419 ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
                     418    420 ;
01bf  cd 1c 06       419    421 GOSUB:  CALL PUSHA                      ;SAVE THE CURRENT "FOR"
01c2  df             420    422         RST  3                          ;PARAMETERS
01c3  d5             421    423         PUSH D                          ;AND TEXT POINTER
01c4  cd 3b 05       422    424         CALL FNDLN                      ;FIND THE TARGET LINE
01c7  c2 a0 00       423    425         JNZ  AHOW                       ;NOT THERE. SAY "HOW?"
01ca  2a 01 08       424    426         LHLD CURRNT                     ;FOUND IT, SAVE OLD
01cd  e5             425    427         PUSH H                          ;'CURRNT' OLD 'STKGOS'
01ce  2a 03 08       426    428         LHLD STKGOS
01d1  e5             427    429         PUSH H
01d2  21 00 00       428    430         LXI  H,0                        ;AND LOAD NEW ONES
01d5  22 09 08       429    431         SHLD LOPVAR
01d8  39             430    432         DAD  SP
01d9  22 03 08       431    433         SHLD STKGOS
01dc  c3 50 01       432    434         JMP  RUNTSL                     ;THEN RUN THAT LINE
01df  cd c5 04       433    435 RETURN: CALL ENDCHK                     ;THERE MUST BE A CR
01e2  2a 03 08       434    436         LHLD STKGOS                     ;OLD STACK POINTER
01e5  7c             435    437         MOV  A,H                        ;0 MEANS NOT EXIST
01e6  b5             436    438         ORA  L
01e7  ca c9 04       437    439         JZ   QWHAT                      ;SO, WE SAY: "WHAT?"
01ea  f9             438    440         SPHL                            ;ELSE, RESTORE IT
01eb  e1             439    441         POP  H
01ec  22 03 08       440    442         SHLD STKGOS                     ;AND THE OLD 'STKGOS'
01ef  e1             441    443         POP  H
01f0  22 01 08       442    444         SHLD CURRNT                     ;AND THE OLD 'CURRNT'
01f3  d1             443    445         POP  D                          ;OLD TEXT POINTER
01f4  cd 00 06       444    446         CALL POPA                       ;OLD "FOR" PARAMETERS
01f7  f7             445    447         RST  6                          ;AND WE ARE BACK HOME
                     446    448 ;
                     447    449 ;*************************************************************
                     448    450 ;
                     449    451 ; *** FOR *** & NEXT ***
                     450    452 ;
                     451    453 ; 'FOR' HAS TWO FORMS:
                     452    454 ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
                     453    455 ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
                     454    456 ; EXP3=1.  (I.E., WITH A STEP OF +1.)
                     455    457 ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
                     456    458 ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
                     457    459 ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
                     458    460 ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
                     459    461 ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
                     460    462 ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
                     461    463 ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
                     462    464 ; BEFORE THE NEW ONE OVERWRITES IT.
                     463    465 ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
                     464    466 ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
                     465    467 ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
                     466    468 ; (PURGED FROM THE STACK..)
                     467    469 ;
                     468    470 ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
                     469    471 ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
                     470    472 ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
                     471    473 ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
                     472    474 ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
                     473    475 ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
                     474    476 ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
                     475    477 ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
                     476    478 ; IS PURGED AND EXECUTION CONTINUES.
                     477    479 ;
01f8  cd 1c 06       478    480 FOR:    CALL PUSHA                      ;SAVE THE OLD SAVE AREA
01fb  cd a3 04       479    481         CALL SETVAL                     ;SET THE CONTROL VAR.
01fe  2b             480    482         DCX  H                          ;HL IS ITS ADDRESS
01ff  22 09 08       481    483         SHLD LOPVAR                     ;SAVE THAT
0202  21 0b 07       482    484         LXI  H,TAB5-1                   ;USE 'EXEC' TO LOOK
0205  c3 33 07       483    485         JMP  EXEC                       ;FOR THE WORD 'TO'
0208  df             484    486 FR1:    RST  3                          ;EVALUATE THE LIMIT
0209  22 0d 08       485    487         SHLD LOPLMT                     ;SAVE THAT
020c  21 11 07       486    488         LXI  H,TAB6-1                   ;USE 'EXEC' TO LOOK
020f  c3 33 07       487    489         JMP EXEC                        ;FOR THE WORD 'STEP'
0212  df             488    490 FR2:    RST  3                          ;FOUND IT, GET STEP
0213  c3 19 02       489    491         JMP  FR4
0216  21 01 00       490    492 FR3:    LXI  H,1H                       ;NOT FOUND, SET TO 1
0219  22 0b 08       491    493 FR4:    SHLD LOPINC                     ;SAVE THAT TOO
021c  2a 01 08       492    494 FR5:    LHLD CURRNT                     ;SAVE CURRENT LINE #
021f  22 0f 08       493    495         SHLD LOPLN
0222  eb             494    496         XCHG                            ;AND TEXT POINTER
0223  22 11 08       495    497         SHLD LOPPT
0226  01 0a 00       496    498         LXI  B,0AH                      ;DIG INTO STACK TO
0229  2a 09 08       497    499         LHLD LOPVAR                     ;FIND 'LOPVAR'
022c  eb             498    500         XCHG
022d  60             499    501         MOV  H,B
022e  68             500    502         MOV  L,B                        ;HL=0 NOW
022f  39             501    503         DAD  SP                         ;HERE IS THE STACK
0230  3e             502    504         DB   3EH
0231  09             503    505 FR7:    DAD  B                          ;EACH LEVEL IS 10 DEEP
0232  7e             504    506         MOV  A,M                        ;GET THAT OLD 'LOPVAR'
0233  23             505    507         INX  H
0234  b6             506    508         ORA  M
0235  ca 52 02       507    509         JZ   FR8                        ;0 SAYS NO MORE IN IT
0238  7e             508    510         MOV  A,M
0239  2b             509    511         DCX  H
023a  ba             510    512         CMP  D                          ;SAME AS THIS ONE?
023b  c2 31 02       511    513         JNZ  FR7
023e  7e             512    514         MOV  A,M                        ;THE OTHER HALF?
023f  bb             513    515         CMP  E
0240  c2 31 02       514    516         JNZ  FR7
0243  eb             515    517         XCHG                            ;YES, FOUND ONE
0244  21 00 00       516    518         LXI  H,0H
0247  39             517    519         DAD  SP                         ;TRY TO MOVE SP
0248  44             518    520         MOV  B,H
0249  4d             519    521         MOV  C,L
024a  21 0a 00       520    522         LXI  H,0AH
024d  19             521    523         DAD  D
024e  cd f1 05       522    524         CALL MVDOWN                     ;AND PURGE 10 WORDS
0251  f9             523    525         SPHL                            ;IN THE STACK
0252  2a 11 08       524    526 FR8:    LHLD LOPPT                      ;JOB DONE, RESTORE DE
0255  eb             525    527         XCHG
0256  f7             526    528         RST  6                          ;AND CONTINUE
                     527    529 ;
0257  ff             528    530 NEXT:   RST  7                          ;GET ADDRESS OF VAR.
0258  da c9 04       529    531         JC   QWHAT                      ;NO VARIABLE, "WHAT?"
025b  22 05 08       530    532         SHLD VARNXT                     ;YES, SAVE IT
025e  d5             531    533 NX0:    PUSH D                          ;SAVE TEXT POINTER
025f  eb             532    534         XCHG
0260  2a 09 08       533    535         LHLD LOPVAR                     ;GET VAR. IN 'FOR'
0263  7c             534    536         MOV  A,H
0264  b5             535    537         ORA  L                          ;0 SAYS NEVER HAD ONE
0265  ca ca 04       536    538         JZ   AWHAT                      ;SO WE ASK: "WHAT?"
0268  e7             537    539         RST  4                          ;ELSE WE CHECK THEM
0269  ca 76 02       538    540         JZ   NX3                        ;OK, THEY AGREE
026c  d1             539    541         POP  D                          ;NO, LET'S SEE
026d  cd 00 06       540    542         CALL POPA                       ;PURGE CURRENT LOOP
0270  2a 05 08       541    543         LHLD VARNXT                     ;AND POP ONE LEVEL
0273  c3 5e 02       542    544         JMP  NX0                        ;GO CHECK AGAIN
0276  5e             543    545 NX3:    MOV  E,M                        ;COME HERE WHEN AGREED
0277  23             544    546         INX  H
0278  56             545    547         MOV  D,M                        ;DE=VALUE OF VAR.
0279  2a 0b 08       546    548         LHLD LOPINC
027c  e5             547    549         PUSH H
027d  7c             548    550         MOV  A,H
027e  aa             549    551         XRA  D
027f  7a             550    552         MOV  A,D
0280  19             551    553         DAD  D                          ;ADD ONE STEP
0281  fa 88 02       552    554         JM   NX4
0284  ac             553    555         XRA  H
0285  fa aa 02       554    556         JM   NX5
0288  eb             555    557 NX4:    XCHG
0289  2a 09 08       556    558         LHLD LOPVAR                     ;PUT IT BACK
028c  73             557    559         MOV  M,E
028d  23             558    560         INX  H
028e  72             559    561         MOV  M,D
028f  2a 0d 08       560    562         LHLD LOPLMT                     ;HL->LIMIT
0292  f1             561    563         POP  PSW                        ;OLD HL
0293  b7             562    564         ORA  A
0294  f2 98 02       563    565         JP   NX1                        ;STEP > 0
0297  eb             564    566         XCHG                            ;STEP < 0
0298  cd 9b 04       565    567 NX1:    CALL CKHLDE                     ;COMPARE WITH LIMIT
029b  d1             566    568         POP  D                          ;RESTORE TEXT POINTER
029c  da ac 02       567    569         JC   NX2                        ;OUTSIDE LIMIT
029f  2a 0f 08       568    570         LHLD LOPLN                      ;WITHIN LIMIT, GO
02a2  22 01 08       569    571         SHLD CURRNT                     ;BACK TO THE SAVED
02a5  2a 11 08       570    572         LHLD LOPPT                      ;'CURRNT' AND TEXT
02a8  eb             571    573         XCHG                            ;POINTER
02a9  f7             572    574         RST  6
02aa  e1             573    575 NX5:    POP  H
02ab  d1             574    576         POP  D
02ac  cd 00 06       575    577 NX2:    CALL POPA                       ;PURGE THIS LOOP
02af  f7             576    578         RST  6
                     577    579 ;
                     578    580 ;*************************************************************
                     579    581 ;
                     580    582 ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
                     581    583 ;
                     582    584 ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
                     583    585 ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
                     584    586 ;
                     585    587 ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
                     586    588 ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
                     587    589 ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
                     588    590 ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
                     589    591 ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
                     590    592 ; EXECUTION CONTINUES AT THE NEXT LINE.
                     591    593 ;
                     592    594 ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
                     593    595 ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
                     594    596 ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
                     595    597 ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
                     596    598 ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
                     597    599 ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
                     598    600 ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
                     599    601 ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
                     600    602 ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
                     601    603 ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
                     602    604 ;
                     603    605 ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
                     604    606 ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
                     605    607 ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
                     606    608 ; THIS IS HANDLED IN 'INPERR'.
                     607    609 ;
                     608    610 ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
                     609    611 ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
                     610    612 ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
                     611    613 ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
                     612    614 ; THIS IS DONE BY 'DEFLT'.
                     613    615 ;
02b0  21 00 00       614    616 REM:    LXI  H,0H                       ;*** REM ***
02b3  3e             615    617         DB   3EH                        ;THIS IS LIKE 'IF 0'
                     616    618 ;
02b4  df             617    619 IFF:    RST  3                          ;*** IF ***
02b5  7c             618    620         MOV  A,H                        ;IS THE EXPR.=0?
02b6  b5             619    621         ORA  L
02b7  c2 57 01       620    622         JNZ  RUNSML                     ;NO, CONTINUE
02ba  cd 59 05       621    623         CALL FNDSKP                     ;YES, SKIP REST OF LINE
02bd  d2 50 01       622    624         JNC  RUNTSL                     ;AND RUN THE NEXT LINE
02c0  c3 ba 00       623    625         JMP  RSTART                     ;IF NO NEXT, RE-START
                     624    626 ;
02c3  2a 07 08       625    627 INPERR: LHLD STKINP                     ;*** INPERR ***
02c6  f9             626    628         SPHL                            ;RESTORE OLD SP
02c7  e1             627    629         POP  H                          ;AND OLD 'CURRNT'
02c8  22 01 08       628    630         SHLD CURRNT
02cb  d1             629    631         POP  D                          ;AND OLD TEXT POINTER
02cc  d1             630    632         POP  D                          ;REDO INPUT
                     631    633 ;
02cd                 632    634 INPUT:                                  ;*** INPUT ***
02cd  d5             633    635 IP1:    PUSH D                          ;SAVE IN CASE OF ERROR
02ce  cd 6f 05       634    636         CALL QTSTG                      ;IS NEXT ITEM A STRING?
02d1  c3 db 02       635    637         JMP  IP2                        ;NO
02d4  ff             636    638         RST  7                          ;YES, BUT FOLLOWED BY A
02d5  da 15 03       637    639         JC   IP4                        ;VARIABLE?   NO.
02d8  c3 eb 02       638    640         JMP  IP3                        ;YES.  INPUT VARIABLE
02db  d5             639    641 IP2:    PUSH D                          ;SAVE FOR 'PRTSTG'
02dc  ff             640    642         RST  7                          ;MUST BE VARIABLE NOW
02dd  da c9 04       641    643         JC   QWHAT                      ;"WHAT?" IT IS NOT?
02e0  1a             642    644         LDAX D                          ;GET READY FOR 'PRTSTR'
02e1  4f             643    645         MOV  C,A
02e2  97             644    646         SUB  A
02e3  12             645    647         STAX D
02e4  d1             646    648         POP  D
02e5  cd 63 05       647    649         CALL PRTSTG                     ;PRINT STRING AS PROMPT
02e8  79             648    650         MOV  A,C                        ;RESTORE TEXT
02e9  1b             649    651         DCX  D
02ea  12             650    652         STAX D
02eb  d5             651    653 IP3:    PUSH D                          ;SAVE TEXT POINTER
02ec  eb             652    654         XCHG
02ed  2a 01 08       653    655         LHLD CURRNT                     ;ALSO SAVE 'CURRNT'
02f0  e5             654    656         PUSH H
02f1  21 cd 02       655    657         LXI  H,IP1                      ;A NEGATIVE NUMBER
02f4  22 01 08       656    658         SHLD CURRNT                     ;AS A FLAG
02f7  21 00 00       657    659         LXI  H,0H                       ;SAVE SP TOO
02fa  39             658    660         DAD  SP
02fb  22 07 08       659    661         SHLD STKINP
02fe  d5             660    662         PUSH D                          ;OLD HL
02ff  3e 3a          661    663         MVI  A,3AH                      ;PRINT THIS TOO
0301  cd fd 04       662    664         CALL GETLN                      ;AND GET A LINE
0304  11 37 1f       663    665         LXI  D,BUFFER                   ;POINTS TO BUFFER
0307  df             664    666         RST  3                          ;EVALUATE INPUT
0308  00             665    667         NOP                             ;CAN BE 'CALL ENDCHK'
0309  00             666    668         NOP
030a  00             667    669         NOP
030b  d1             668    670         POP  D                          ;OK, GET OLD HL
030c  eb             669    671         XCHG
030d  73             670    672         MOV  M,E                        ;SAVE VALUE IN VAR.
030e  23             671    673         INX  H
030f  72             672    674         MOV  M,D
0310  e1             673    675         POP  H                          ;GET OLD 'CURRNT'
0311  22 01 08       674    676         SHLD CURRNT
0314  d1             675    677         POP  D                          ;AND OLD TEXT POINTER
0315  f1             676    678 IP4:    POP  PSW                        ;PURGE JUNK IN STACK
0316  cf             677    679         RST  1                          ;IS NEXT CH. ','?
0317  2c             678    680         DB   ','
0318  03             679    681         DB   IP5-$-1
0319  c3 cd 02       680    682         JMP  IP1                        ;YES, MORE ITEMS.
031c  f7             681    683 IP5:    RST  6
                     682    684 ;
031d  1a             683    685 DEFLT:  LDAX D                          ;***  DEFLT ***
031e  fe 0d          684    686         CPI  CR                         ;EMPTY LINE IS OK
0320  ca 2c 03       685    687         JZ   LT1                        ;ELSE IT IS 'LET'
                     686    688 ;
0323  cd a3 04       687    689 LET:    CALL SETVAL                     ;*** LET ***
0326  cf             688    690         RST  1                          ;SET VALUE TO VAR.
0327  2c             689    691         DB   ','
0328  03             690    692         DB   LT1-$-1
0329  c3 23 03       691    693         JMP  LET                        ;ITEM BY ITEM
032c  f7             692    694 LT1:    RST  6                          ;UNTIL FINISH
                     693    695 ;
                     694    696 ;*************************************************************
                     695    697 ;
                     696    698 ; *** EXPR ***
                     697    699 ;
                     698    700 ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
                     699    701 ; <EXPR>::<EXPR2>
                     700    702 ;         <EXPR2><REL.OP.><EXPR2>
                     701    703 ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
                     702    704 ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
                     703    705 ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
                     704    706 ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
                     705    707 ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
                     706    708 ; <EXPR4>::=<VARIABLE>
                     707    709 ;           <FUNCTION>
                     708    710 ;           (<EXPR>)
                     709    711 ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
                     710    712 ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
                     711    713 ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
                     712    714 ;
                     713    715 ;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
                     714    716 ;       PUSH H                          ;SAVE <EXPR2> VALUE
032d  21 19 07       715    717 EXPR1:  LXI  H,TAB8-1                   ;LOOKUP REL.OP.
0330  c3 33 07       716    718         JMP  EXEC                       ;GO DO IT
0333  cd 5c 03       717    719 XP11:   CALL XP18                       ;REL.OP.">="
0336  d8             718    720         RC                              ;NO, RETURN HL=0
0337  6f             719    721         MOV  L,A                        ;YES, RETURN HL=1
0338  c9             720    722         RET
0339  cd 5c 03       721    723 XP12:   CALL XP18                       ;REL.OP."#"
033c  c8             722    724         RZ                              ;FALSE, RETURN HL=0
033d  6f             723    725         MOV  L,A                        ;TRUE, RETURN HL=1
033e  c9             724    726         RET
033f  cd 5c 03       725    727 XP13:   CALL XP18                       ;REL.OP.">"
0342  c8             726    728         RZ                              ;FALSE
0343  d8             727    729         RC                              ;ALSO FALSE, HL=0
0344  6f             728    730         MOV  L,A                        ;TRUE, HL=1
0345  c9             729    731         RET
0346  cd 5c 03       730    732 XP14:   CALL XP18                       ;REL.OP."<="
0349  6f             731    733         MOV  L,A                        ;SET HL=1
034a  c8             732    734         RZ                              ;REL. TRUE, RETURN
034b  d8             733    735         RC
034c  6c             734    736         MOV  L,H                        ;ELSE SET HL=0
034d  c9             735    737         RET
034e  cd 5c 03       736    738 XP15:   CALL XP18                       ;REL.OP."="
0351  c0             737    739         RNZ                             ;FALSE, RETURN HL=0
0352  6f             738    740         MOV  L,A                        ;ELSE SET HL=1
0353  c9             739    741         RET
0354  cd 5c 03       740    742 XP16:   CALL XP18                       ;REL.OP."<"
0357  d0             741    743         RNC                             ;FALSE, RETURN HL=0
0358  6f             742    744         MOV  L,A                        ;ELSE SET HL=1
0359  c9             743    745         RET
035a  e1             744    746 XP17:   POP  H                          ;NOT .REL.OP
035b  c9             745    747         RET                             ;RETURN HL=<EXPR2>
035c  79             746    748 XP18:   MOV  A,C                        ;SUBROUTINE FOR ALL
035d  e1             747    749         POP  H                          ;REL.OP.'S
035e  c1             748    750         POP  B
035f  e5             749    751         PUSH H                          ;REVERSE TOP OF STACK
0360  c5             750    752         PUSH B
0361  4f             751    753         MOV  C,A
0362  cd 71 03       752    754         CALL EXPR2                      ;GET 2ND <EXPR2>
0365  eb             753    755         XCHG                            ;VALUE IN DE NOW
0366  e3             754    756         XTHL                            ;1ST <EXPR2> IN HL
0367  cd 9b 04       755    757         CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
036a  d1             756    758         POP  D                          ;RESTORE TEXT POINTER
036b  21 00 00       757    759         LXI  H,0H                       ;SET HL=0, A=1
036e  3e 01          758    760         MVI  A,1
0370  c9             759    761         RET
                     760    762 ;
0371  cf             761    763 EXPR2:  RST  1                          ;NEGATIVE SIGN?
0372  2d             762    764         DB   '-'
0373  06             763    765         DB   XP21-$-1
0374  21 00 00       764    766         LXI  H,0H                       ;YES, FAKE '0-'
0377  c3 9b 03       765    767         JMP  XP26                       ;TREAT LIKE SUBTRACT
037a  cf             766    768 XP21:   RST  1                          ;POSITIVE SIGN? IGNORE
037b  2b             767    769         DB   '+'
037c  00             768    770         DB   XP22-$-1
037d  cd a5 03       769    771 XP22:   CALL EXPR3                      ;1ST <EXPR3>
0380  cf             770    772 XP23:   RST  1                          ;ADD?
0381  2b             771    773         DB   '+'
0382  15             772    774         DB   XP25-$-1
0383  e5             773    775         PUSH H                          ;YES, SAVE VALUE
0384  cd a5 03       774    776         CALL EXPR3                      ;GET 2ND <EXPR3>
0387  eb             775    777 XP24:   XCHG                            ;2ND IN DE
0388  e3             776    778         XTHL                            ;1ST IN HL
0389  7c             777    779         MOV  A,H                        ;COMPARE SIGN
038a  aa             778    780         XRA  D
038b  7a             779    781         MOV  A,D
038c  19             780    782         DAD  D
038d  d1             781    783         POP  D                          ;RESTORE TEXT POINTER
038e  fa 80 03       782    784         JM   XP23                       ;1ST AND 2ND SIGN DIFFER
0391  ac             783    785         XRA  H                          ;1ST AND 2ND SIGN EQUAL
0392  f2 80 03       784    786         JP   XP23                       ;SO IS RESULT
0395  c3 9f 00       785    787         JMP  QHOW                       ;ELSE WE HAVE OVERFLOW
0398  cf             786    788 XP25:   RST  1                          ;SUBTRACT?
0399  2d             787    789         DB   '-'
039a  86             788    790         DB   XP42-$-1
039b  e5             789    791 XP26:   PUSH H                          ;YES, SAVE 1ST <EXPR3>
039c  cd a5 03       790    792         CALL EXPR3                      ;GET 2ND <EXPR3>
039f  cd 86 04       791    793         CALL CHGSGN                     ;NEGATE
03a2  c3 87 03       792    794         JMP  XP24                       ;AND ADD THEM
                     793    795 ;
03a5  cd 05 04       794    796 EXPR3:  CALL EXPR4                      ;GET 1ST <EXPR4>
03a8  cf             795    797 XP31:   RST  1                          ;MULTIPLY?
03a9  2a             796    798         DB   '*'
03aa  2d             797    799         DB   XP34-$-1
03ab  e5             798    800         PUSH H                          ;YES, SAVE 1ST
03ac  cd 05 04       799    801         CALL EXPR4                      ;AND GET 2ND <EXPR4>
03af  06 00          800    802         MVI  B,0H                       ;CLEAR B FOR SIGN
03b1  cd 83 04       801    803         CALL CHKSGN                     ;CHECK SIGN
03b4  e3             802    804         XTHL                            ;1ST IN HL
03b5  cd 83 04       803    805         CALL CHKSGN                     ;CHECK SIGN OF 1ST
03b8  eb             804    806         XCHG
03b9  e3             805    807         XTHL
03ba  7c             806    808         MOV  A,H                        ;IS HL > 255 ?
03bb  b7             807    809         ORA  A
03bc  ca c5 03       808    810         JZ   XP32                       ;NO
03bf  7a             809    811         MOV  A,D                        ;YES, HOW ABOUT DE
03c0  b2             810    812         ORA  D
03c1  eb             811    813         XCHG                            ;PUT SMALLER IN HL
03c2  c2 a0 00       812    814         JNZ  AHOW                       ;ALSO >, WILL OVERFLOW
03c5  7d             813    815 XP32:   MOV  A,L                        ;THIS IS DUMB
03c6  21 00 00       814    816         LXI  H,0H                       ;CLEAR RESULT
03c9  b7             815    817         ORA  A                          ;ADD AND COUNT
03ca  ca f7 03       816    818         JZ   XP35
03cd  19             817    819 XP33:   DAD  D
03ce  da a0 00       818    820         JC   AHOW                       ;OVERFLOW
03d1  3d             819    821         DCR  A
03d2  c2 cd 03       820    822         JNZ  XP33
03d5  c3 f7 03       821    823         JMP  XP35                       ;FINISHED
03d8  cf             822    824 XP34:   RST  1                          ;DIVIDE?
03d9  2f             823    825         DB   '/'
03da  46             824    826         DB   XP42-$-1
03db  e5             825    827         PUSH H                          ;YES, SAVE 1ST <EXPR4>
03dc  cd 05 04       826    828         CALL EXPR4                      ;AND GET THE SECOND ONE
03df  06 00          827    829         MVI  B,0H                       ;CLEAR B FOR SIGN
03e1  cd 83 04       828    830         CALL CHKSGN                     ;CHECK SIGN OF 2ND
03e4  e3             829    831         XTHL                            ;GET 1ST IN HL
03e5  cd 83 04       830    832         CALL CHKSGN                     ;CHECK SIGN OF 1ST
03e8  eb             831    833         XCHG
03e9  e3             832    834         XTHL
03ea  eb             833    835         XCHG
03eb  7a             834    836         MOV  A,D                        ;DIVIDE BY 0?
03ec  b3             835    837         ORA  E
03ed  ca a0 00       836    838         JZ   AHOW                       ;SAY "HOW?"
03f0  c5             837    839         PUSH B                          ;ELSE SAVE SIGN
03f1  cd 66 04       838    840         CALL DIVIDE                     ;USE SUBROUTINE
03f4  60             839    841         MOV  H,B                        ;RESULT IN HL NOW
03f5  69             840    842         MOV  L,C
03f6  c1             841    843         POP  B                          ;GET SIGN BACK
03f7  d1             842    844 XP35:   POP  D                          ;AND TEXT POINTER
03f8  7c             843    845         MOV  A,H                        ;HL MUST BE +
03f9  b7             844    846         ORA  A
03fa  fa 9f 00       845    847         JM   QHOW                       ;ELSE IT IS OVERFLOW
03fd  78             846    848         MOV  A,B
03fe  b7             847    849         ORA  A
03ff  fc 86 04       848    850         CM   CHGSGN                     ;CHANGE SIGN IF NEEDED
0402  c3 a8 03       849    851         JMP  XP31                       ;LOOK FOR MORE TERMS
                     850    852 ;
0405  21 f9 06       851    853 EXPR4:  LXI  H,TAB4-1                   ;FIND FUNCTION IN TAB4
0408  c3 33 07       852    854         JMP  EXEC                       ;AND GO DO IT
040b  ff             853    855 XP40:   RST  7                          ;NO, NOT A FUNCTION
040c  da 14 04       854    856         JC   XP41                       ;NOR A VARIABLE
040f  7e             855    857         MOV  A,M                        ;VARIABLE
0410  23             856    858         INX  H
0411  66             857    859         MOV  H,M                        ;VALUE IN HL
0412  6f             858    860         MOV  L,A
0413  c9             859    861         RET
0414  cd 77 00       860    862 XP41:   CALL TSTNUM                     ;OR IS IT A NUMBER
0417  78             861    863         MOV  A,B                        ;# OF DIGIT
0418  b7             862    864         ORA  A
0419  c0             863    865         RNZ                             ;OK
041a  cf             864    866 PARN:   RST  1
041b  28             865    867         DB   '('
041c  05             866    868         DB   XP43-$-1
041d  df             867    869         RST  3                          ;"(EXPR)"
041e  cf             868    870         RST  1
041f  29             869    871         DB   ')'
0420  01             870    872         DB   XP43-$-1
0421  c9             871    873 XP42:   RET
0422  c3 c9 04       872    874 XP43:   JMP  QWHAT                      ;ELSE SAY: "WHAT?"
                     873    875 ;
0425  cd 1a 04       874    876 RND:    CALL PARN                       ;*** RND(EXPR) ***
0428  7c             875    877         MOV  A,H                        ;EXPR MUST BE +
0429  b7             876    878         ORA  A
042a  fa 9f 00       877    879         JM   QHOW
042d  b5             878    880         ORA  L                          ;AND NON-ZERO
042e  ca 9f 00       879    881         JZ   QHOW
0431  d5             880    882         PUSH D                          ;SAVE BOTH
0432  e5             881    883         PUSH H
0433  2a 13 08       882    884         LHLD RANPNT                     ;GET MEMORY AS RANDOM
0436  11 61 07       883    885         LXI  D,LSTROM                   ;NUMBER
0439  e7             884    886         RST  4
043a  da 40 04       885    887         JC   RA1                        ;WRAP AROUND IF LAST
043d  21 00 00       886    888         LXI  H,START
0440  5e             887    889 RA1:    MOV  E,M
0441  23             888    890         INX  H
0442  56             889    891         MOV  D,M
0443  22 13 08       890    892         SHLD RANPNT
0446  e1             891    893         POP  H
0447  eb             892    894         XCHG
0448  c5             893    895         PUSH B
0449  cd 66 04       894    896         CALL DIVIDE                     ;RND(N)=MOD(M,N)+1
044c  c1             895    897         POP  B
044d  d1             896    898         POP  D
044e  23             897    899         INX  H
044f  c9             898    900         RET
                     899    901 ;
0450  cd 1a 04       900    902 ABS:    CALL PARN                       ;*** ABS(EXPR) ***
0453  1b             901    903         DCX  D
0454  cd 83 04       902    904         CALL CHKSGN                     ;CHECK SIGN
0457  13             903    905         INX  D
0458  c9             904    906         RET
                     905    907 ;
0459  2a 15 08       906    908 SIZE:   LHLD TXTUNF                     ;*** SIZE ***
045c  d5             907    909         PUSH D                          ;GET THE NUMBER OF FREE
045d  eb             908    910         XCHG                            ;BYTES BETWEEN 'TXTUNF'
045e  21 00 1f       909    911         LXI  H,VARBGN                   ;AND 'VARBGN'
0461  cd 7c 04       910    912         CALL SUBDE
0464  d1             911    913         POP  D
0465  c9             912    914         RET
                     913    915 ;
                     914    916 ;*************************************************************
                     915    917 ;
                     916    918 ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
                     917    919 ;
                     918    920 ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
                     919    921 ;
                     920    922 ; 'SUBDE' SUBSTRACTS DE FROM HL
                     921    923 ;
                     922    924 ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
                     923    925 ; SIGN AND FLIP SIGN OF B.
                     924    926 ;
                     925    927 ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
                     926    928 ;
                     927    929 ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
                     928    930 ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
                     929    931 ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
                     930    932 ;
0466  e5             931    933 DIVIDE: PUSH H                          ;*** DIVIDE ***
0467  6c             932    934         MOV  L,H                        ;DIVIDE H BY DE
0468  26 00          933    935         MVI  H,0
046a  cd 71 04       934    936         CALL DV1
046d  41             935    937         MOV  B,C                        ;SAVE RESULT IN B
046e  7d             936    938         MOV  A,L                        ;(REMINDER+L)/DE
046f  e1             937    939         POP  H
0470  67             938    940         MOV  H,A
0471  0e ff          939    941 DV1:    MVI  C,0FFH                     ;RESULT IN C
0473  0c             940    942 DV2:    INR  C                          ;DUMB ROUTINE
0474  cd 7c 04       941    943         CALL SUBDE                      ;DIVIDE BY SUBTRACT
0477  d2 73 04       942    944         JNC  DV2                        ;AND COUNT
047a  19             943    945         DAD  D
047b  c9             944    946         RET
                     945    947 ;
047c  7d             946    948 SUBDE:  MOV  A,L                        ;*** SUBDE ***
047d  93             947    949         SUB  E                          ;SUBSTRACT DE FROM
047e  6f             948    950         MOV  L,A                        ;HL
047f  7c             949    951         MOV  A,H
0480  9a             950    952         SBB  D
0481  67             951    953         MOV  H,A
0482  c9             952    954         RET
                     953    955 ;
0483  7c             954    956 CHKSGN: MOV  A,H                        ;*** CHKSGN ***
0484  b7             955    957         ORA  A                          ;CHECK SIGN OF HL
0485  f0             956    958         RP                              ;IF -, CHANGE SIGN
                     957    959 ;
0486  7c             958    960 CHGSGN: MOV  A,H                        ;*** CHGSGN ***
0487  b5             959    961         ORA  L                          ;*UM*
0488  c8             960    962         RZ                              ;*UM* NOT ON ZERO VALUE
0489  7c             961    963         MOV  A,H                        ;*UM*
048a  f5             962    964         PUSH PSW
048b  2f             963    965         CMA                             ;CHANGE SIGN OF HL
048c  67             964    966         MOV  H,A
048d  7d             965    967         MOV  A,L
048e  2f             966    968         CMA
048f  6f             967    969         MOV  L,A
0490  23             968    970         INX  H
0491  f1             969    971         POP  PSW
0492  ac             970    972         XRA  H
0493  f2 9f 00       971    973         JP   QHOW
0496  78             972    974         MOV  A,B                        ;AND ALSO FLIP B
0497  ee 80          973    975         XRI  80H
0499  47             974    976         MOV  B,A
049a  c9             975    977         RET
                     976    978 ;
049b  7c             977    979 CKHLDE: MOV  A,H
049c  aa             978    980         XRA  D                          ;SAME SIGN?
049d  f2 a1 04       979    981         JP   CK1                        ;YES, COMPARE
04a0  eb             980    982         XCHG                            ;NO, XCH AND COMP
04a1  e7             981    983 CK1:    RST  4
04a2  c9             982    984         RET
                     983    985 ;
                     984    986 ;*************************************************************
                     985    987 ;
                     986    988 ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
                     987    989 ;
                     988    990 ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
                     989    991 ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
                     990    992 ; TO THAT VALUE.
                     991    993 ;
                     992    994 ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
                     993    995 ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
                     994    996 ; NEXT LINE AND CONTINUE FROM THERE.
                     995    997 ;
                     996    998 ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
                     997    999 ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
                     998   1000 ;
                     999   1001 ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
                    1000   1002 ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
                    1001   1003 ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
                    1002   1004 ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
                    1003   1005 ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
                    1004   1006 ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
                    1005   1007 ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
                    1006   1008 ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
                    1007   1009 ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
                    1008   1010 ;
                    1009   1011 ; RELATED TO 'ERROR' ARE THE FOLLOWING:
                    1010   1012 ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
                    1011   1013 ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
                    1012   1014 ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
                    1013   1015 ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
                    1014   1016 ;
04a3  ff            1015   1017 SETVAL: RST  7                          ;*** SETVAL ***
04a4  da c9 04      1016   1018         JC   QWHAT                      ;"WHAT?" NO VARIABLE
04a7  e5            1017   1019         PUSH H                          ;SAVE ADDRESS OF VAR.
04a8  cf            1018   1020         RST  1                          ;PASS "=" SIGN
04a9  3d            1019   1021         DB   '='
04aa  08            1020   1022         DB   SV1-$-1
04ab  df            1021   1023         RST  3                          ;EVALUATE EXPR.
04ac  44            1022   1024         MOV  B,H                        ;VALUE IS IN BC NOW
04ad  4d            1023   1025         MOV  C,L
04ae  e1            1024   1026         POP  H                          ;GET ADDRESS
04af  71            1025   1027         MOV  M,C                        ;SAVE VALUE
04b0  23            1026   1028         INX  H
04b1  70            1027   1029         MOV  M,B
04b2  c9            1028   1030         RET
04b3  c3 c9 04      1029   1031 SV1:    JMP  QWHAT                      ;NO "=" SIGN
                    1030   1032 ;
04b6  cf            1031   1033 FIN:    RST  1                          ;*** FIN ***
04b7  3b            1032   1034         DB   3BH
04b8  04            1033   1035         DB   FI1-$-1
04b9  f1            1034   1036         POP  PSW                        ;";", PURGE RET. ADDR.
04ba  c3 57 01      1035   1037         JMP  RUNSML                     ;CONTINUE SAME LINE
04bd  cf            1036   1038 FI1:    RST  1                          ;NOT ";", IS IT CR?
04be  0d            1037   1039         DB   CR
04bf  04            1038   1040         DB   FI2-$-1
04c0  f1            1039   1041         POP  PSW                        ;YES, PURGE RET. ADDR.
04c1  c3 47 01      1040   1042         JMP  RUNNXL                     ;RUN NEXT LINE
04c4  c9            1041   1043 FI2:    RET                             ;ELSE RETURN TO CALLER
                    1042   1044 ;
04c5  ef            1043   1045 ENDCHK: RST  5                          ;*** ENDCHK ***
04c6  fe 0d         1044   1046         CPI  CR                         ;END WITH CR?
04c8  c8            1045   1047         RZ                              ;OK, ELSE SAY: "WHAT?"
                    1046   1048 ;
04c9  d5            1047   1049 QWHAT:  PUSH D                          ;*** QWHAT ***
04ca  11 ae 00      1048   1050 AWHAT:  LXI  D,WHAT                     ;*** AWHAT ***
04cd  97            1049   1051 ERROR:  SUB  A                          ;*** ERROR ***
04ce  cd 63 05      1050   1052         CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
04d1  d1            1051   1053         POP  D                          ;OR 'SORRY'
04d2  1a            1052   1054         LDAX D                          ;SAVE THE CHARACTER
04d3  f5            1053   1055         PUSH PSW                        ;AT WHERE OLD DE ->
04d4  97            1054   1056         SUB  A                          ;AND PUT A 0 THERE
04d5  12            1055   1057         STAX D
04d6  2a 01 08      1056   1058         LHLD CURRNT                     ;GET CURRENT LINE #
04d9  e5            1057   1059         PUSH H
04da  7e            1058   1060         MOV  A,M                        ;CHECK THE VALUE
04db  23            1059   1061         INX  H
04dc  b6            1060   1062         ORA  M
04dd  d1            1061   1063         POP  D
04de  ca ba 00      1062   1064         JZ   RSTART                     ;IF ZERO, JUST RESTART
04e1  7e            1063   1065         MOV  A,M                        ;IF NEGATIVE,
04e2  b7            1064   1066         ORA  A
04e3  fa c3 02      1065   1067         JM   INPERR                     ;REDO INPUT
04e6  cd d5 05      1066   1068         CALL PRTLN                      ;ELSE PRINT THE LINE
04e9  1b            1067   1069         DCX  D                          ;UPTO WHERE THE 0 IS
04ea  f1            1068   1070         POP  PSW                        ;RESTORE THE CHARACTER
04eb  12            1069   1071         STAX D
04ec  3e 3f         1070   1072         MVI  A,3FH                      ;PRINT A "?"
04ee  d7            1071   1073         RST  2
04ef  97            1072   1074         SUB  A                          ;AND THE REST OF THE
04f0  cd 63 05      1073   1075         CALL PRTSTG                     ;LINE
04f3  c3 ba 00      1074   1076         JMP  RSTART                     ;THEN RESTART
                    1075   1077 ;
04f6  d5            1076   1078 QSORRY: PUSH D                          ;*** QSORRY ***
04f7  11 b4 00      1077   1079 ASORRY: LXI  D,SORRY                    ;*** ASORRY ***
04fa  c3 cd 04      1078   1080         JMP  ERROR
                    1079   1081 ;
                    1080   1082 ;*************************************************************
                    1081   1083 ;
                    1082   1084 ; *** GETLN *** FNDLN (& FRIENDS) ***
                    1083   1085 ;
                    1084   1086 ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
                    1085   1087 ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
                    1086   1088 ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
                    1087   1089 ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
                    1088   1090 ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
                    1089   1091 ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
                    1090   1092 ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
                    1091   1093 ;
                    1092   1094 ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
                    1093   1095 ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
                    1094   1096 ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
                    1095   1097 ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
                    1096   1098 ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
                    1097   1099 ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
                    1098   1100 ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
                    1099   1101 ; LINE, FLAGS ARE C & NZ.
                    1100   1102 ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
                    1101   1103 ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
                    1102   1104 ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
                    1103   1105 ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
                    1104   1106 ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
                    1105   1107 ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
                    1106   1108 ;
04fd  d7            1107   1109 GETLN:  RST  2                          ;*** GETLN ***
04fe  11 37 1f      1108   1110         LXI  D,BUFFER                   ;PROMPT AND INIT.
0501  cd 7e 06      1109   1111 GL1:    CALL CHKIO                      ;CHECK KEYBOARD
0504  ca 01 05      1110   1112         JZ   GL1                        ;NO INPUT, WAIT
0507  fe 7f         1111   1113         CPI  7FH                        ;DELETE LAST CHARACTER?
0509  ca 26 05      1112   1114         JZ   GL3                        ;YES
050c  d7            1113   1115         RST  2                          ;INPUT, ECHO BACK
050d  fe 0a         1114   1116         CPI  0AH                        ;IGNORE LF
050f  ca 01 05      1115   1117         JZ   GL1
0512  b7            1116   1118         ORA  A                          ;IGNORE NULL
0513  ca 01 05      1117   1119         JZ   GL1
0516  fe 7d         1118   1120         CPI  7DH                        ;DELETE THE WHOLE LINE?
0518  ca 33 05      1119   1121         JZ   GL4                        ;YES
051b  12            1120   1122         STAX D                          ;ELSE SAVE INPUT
051c  13            1121   1123         INX  D                          ;AND BUMP POINTER
051d  fe 0d         1122   1124         CPI  0DH                        ;WAS IT CR?
051f  c8            1123   1125         RZ                              ;YES, END OF LINE
0520  7b            1124   1126         MOV  A,E                        ;ELSE MORE FREE ROOM?
0521  fe 77         1125   1127         CPI  BUFEND AND 0FFH
0523  c2 01 05      1126   1128         JNZ  GL1                        ;YES, GET NEXT INPUT
0526  7b            1127   1129 GL3:    MOV  A,E                        ;DELETE LAST CHARACTER
0527  fe 37         1128   1130         CPI  BUFFER AND 0FFH            ;BUT DO WE HAVE ANY?
0529  ca 33 05      1129   1131         JZ   GL4                        ;NO, REDO WHOLE LINE
052c  1b            1130   1132         DCX  D                          ;YES, BACKUP POINTER
052d  3e 5c         1131   1133         MVI  A,5CH                      ;AND ECHO A BACK-SLASH
052f  d7            1132   1134         RST  2
0530  c3 01 05      1133   1135         JMP  GL1                        ;GO GET NEXT INPUT
0533  cd 0e 00      1134   1136 GL4:    CALL CRLF                       ;REDO ENTIRE LINE
0536  3e 5e         1135   1137         MVI  A,05EH                     ;CR, LF AND UP-ARROW
0538  c3 fd 04      1136   1138         JMP  GETLN
                    1137   1139 ;
053b  7c            1138   1140 FNDLN:  MOV  A,H                        ;*** FNDLN ***
053c  b7            1139   1141         ORA  A                          ;CHECK SIGN OF HL
053d  fa 9f 00      1140   1142         JM   QHOW                       ;IT CANNOT BE -
0540  11 17 08      1141   1143         LXI  D,TXTBGN                   ;INIT TEXT POINTER
                    1142   1144 ;
0543                1143   1145 FNDLP:                                  ;*** FDLNP ***
0543  e5            1144   1146 FL1:    PUSH H                          ;SAVE LINE #
0544  2a 15 08      1145   1147         LHLD TXTUNF                     ;CHECK IF WE PASSED END
0547  2b            1146   1148         DCX  H
0548  e7            1147   1149         RST  4
0549  e1            1148   1150         POP  H                          ;GET LINE # BACK
054a  d8            1149   1151         RC                              ;C,NZ PASSED END
054b  1a            1150   1152         LDAX D                          ;WE DID NOT, GET BYTE 1
054c  95            1151   1153         SUB  L                          ;IS THIS THE LINE?
054d  47            1152   1154         MOV  B,A                        ;COMPARE LOW ORDER
054e  13            1153   1155         INX  D
054f  1a            1154   1156         LDAX D                          ;GET BYTE 2
0550  9c            1155   1157         SBB  H                          ;COMPARE HIGH ORDER
0551  da 58 05      1156   1158         JC   FL2                        ;NO, NOT THERE YET
0554  1b            1157   1159         DCX  D                          ;ELSE WE EITHER FOUND
0555  b0            1158   1160         ORA  B                          ;IT, OR IT IS NOT THERE
0556  c9            1159   1161         RET                             ;NC,Z:FOUND, NC,NZ:NO
                    1160   1162 ;
0557                1161   1163 FNDNXT:                                 ;*** FNDNXT ***
0557  13            1162   1164         INX  D                          ;FIND NEXT LINE
0558  13            1163   1165 FL2:    INX  D                          ;JUST PASSED BYTE 1 & 2
                    1164   1166 ;
0559  1a            1165   1167 FNDSKP: LDAX D                          ;*** FNDSKP ***
055a  fe 0d         1166   1168         CPI  CR                         ;TRY TO FIND CR
055c  c2 58 05      1167   1169         JNZ  FL2                        ;KEEP LOOKING
055f  13            1168   1170         INX  D                          ;FOUND CR, SKIP OVER
0560  c3 43 05      1169   1171         JMP  FL1                        ;CHECK IF END OF TEXT
                    1170   1172 ;
                    1171   1173 ;*************************************************************
                    1172   1174 ;
                    1173   1175 ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
                    1174   1176 ;
                    1175   1177 ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
                    1176   1178 ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
                    1177   1179 ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
                    1178   1180 ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
                    1179   1181 ;
                    1180   1182 ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
                    1181   1183 ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
                    1182   1184 ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
                    1183   1185 ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
                    1184   1186 ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
                    1185   1187 ; OVER (USUALLY A JUMP INSTRUCTION.
                    1186   1188 ;
                    1187   1189 ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
                    1188   1190 ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
                    1189   1191 ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
                    1190   1192 ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
                    1191   1193 ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
                    1192   1194 ;
                    1193   1195 ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
                    1194   1196 ;
0563  47            1195   1197 PRTSTG: MOV  B,A                        ;*** PRTSTG ***
0564  1a            1196   1198 PS1:    LDAX D                          ;GET A CHARACTER
0565  13            1197   1199         INX  D                          ;BUMP POINTER
0566  b8            1198   1200         CMP  B                          ;SAME AS OLD A?
0567  c8            1199   1201         RZ                              ;YES, RETURN
0568  d7            1200   1202         RST  2                          ;ELSE PRINT IT
0569  fe 0d         1201   1203         CPI  CR                         ;WAS IT A CR?
056b  c2 64 05      1202   1204         JNZ  PS1                        ;NO, NEXT
056e  c9            1203   1205         RET                             ;YES, RETURN
                    1204   1206 ;
056f  cf            1205   1207 QTSTG:  RST  1                          ;*** QTSTG ***
0570  22            1206   1208         DB   '"'
0571  0f            1207   1209         DB   QT3-$-1
0572  3e 22         1208   1210         MVI  A,22H                      ;IT IS A "
0574  cd 63 05      1209   1211 QT1:    CALL PRTSTG                     ;PRINT UNTIL ANOTHER
0577  fe 0d         1210   1212         CPI  CR                         ;WAS LAST ONE A CR?
0579  e1            1211   1213         POP  H                          ;RETURN ADDRESS
057a  ca 47 01      1212   1214         JZ   RUNNXL                     ;WAS CR, RUN NEXT LINE
057d  23            1213   1215 QT2:    INX  H                          ;SKIP 3 BYTES ON RETURN
057e  23            1214   1216         INX  H
057f  23            1215   1217         INX  H
0580  e9            1216   1218         PCHL                            ;RETURN
0581  cf            1217   1219 QT3:    RST  1                          ;IS IT A '?
0582  27            1218   1220         DB   27H
0583  05            1219   1221         DB   QT4-$-1
0584  3e 27         1220   1222         MVI  A,27H                      ;YES, DO THE SAME
0586  c3 74 05      1221   1223         JMP  QT1                        ;AS IN "
0589  cf            1222   1224 QT4:    RST  1                          ;IS IT BACK-ARROW?
058a  5f            1223   1225         DB   5FH
058b  08            1224   1226         DB   QT5-$-1
058c  3e 8d         1225   1227         MVI  A,08DH                     ;YES, CR WITHOUT LF
058e  d7            1226   1228         RST  2                          ;DO IT TWICE TO GIVE
058f  d7            1227   1229         RST  2                          ;TTY ENOUGH TIME
0590  e1            1228   1230         POP  H                          ;RETURN ADDRESS
0591  c3 7d 05      1229   1231         JMP  QT2
0594  c9            1230   1232 QT5:    RET                             ;NONE OF ABOVE
                    1231   1233 ;
0595  06 00         1232   1234 PRTNUM: MVI  B,0                        ;*** PRTNUM ***
0597  cd 83 04      1233   1235         CALL CHKSGN                     ;CHECK SIGN
059a  f2 a0 05      1234   1236         JP   PN1                        ;NO SIGN
059d  06 2d         1235   1237         MVI  B,'-'                      ;B=SIGN
059f  0d            1236   1238         DCR  C                          ;'-' TAKES SPACE
05a0  d5            1237   1239 PN1:    PUSH D                          ;SAVE
05a1  11 0a 00      1238   1240         LXI  D,0AH                      ;DECIMAL
05a4  d5            1239   1241         PUSH D                          ;SAVE AS A FLAG
05a5  0d            1240   1242         DCR  C                          ;C=SPACES
05a6  c5            1241   1243         PUSH B                          ;SAVE SIGN & SPACE
05a7  cd 66 04      1242   1244 PN2:    CALL DIVIDE                     ;DIVIDE HL BY 10
05aa  78            1243   1245         MOV  A,B                        ;RESULT 0?
05ab  b1            1244   1246         ORA  C
05ac  ca b7 05      1245   1247         JZ   PN3                        ;YES, WE GOT ALL
05af  e3            1246   1248         XTHL                            ;NO, SAVE REMAINDER
05b0  2d            1247   1249         DCR  L                          ;AND COUNT SPACE
05b1  e5            1248   1250         PUSH H                          ;HL IS OLD BC
05b2  60            1249   1251         MOV  H,B                        ;MOVE RESULT TO BC
05b3  69            1250   1252         MOV  L,C
05b4  c3 a7 05      1251   1253         JMP  PN2                        ;AND DIVIDE BY 10
05b7  c1            1252   1254 PN3:    POP  B                          ;WE GOT ALL DIGITS IN
05b8  0d            1253   1255 PN4:    DCR  C                          ;THE STACK
05b9  79            1254   1256         MOV  A,C                        ;LOOK AT SPACE COUNT
05ba  b7            1255   1257         ORA  A
05bb  fa c4 05      1256   1258         JM   PN5                        ;NO LEADING BLANKS
05be  3e 20         1257   1259         MVI  A,20H                      ;LEADING BLANKS
05c0  d7            1258   1260         RST  2
05c1  c3 b8 05      1259   1261         JMP  PN4                        ;MORE?
05c4  78            1260   1262 PN5:    MOV  A,B                        ;PRINT SIGN
05c5  b7            1261   1263         ORA  A
05c6  c4 10 00      1262   1264         CNZ  10H
05c9  5d            1263   1265         MOV  E,L                        ;LAST REMAINDER IN E
05ca  7b            1264   1266 PN6:    MOV  A,E                        ;CHECK DIGIT IN E
05cb  fe 0a         1265   1267         CPI  0AH                        ;10 IS FLAG FOR NO MORE
05cd  d1            1266   1268         POP  D
05ce  c8            1267   1269         RZ                              ;IF SO, RETURN
05cf  c6 30         1268   1270         ADI  30H                        ;ELSE CONVERT TO ASCII
05d1  d7            1269   1271         RST  2                          ;AND PRINT THE DIGIT
05d2  c3 ca 05      1270   1272         JMP  PN6                        ;GO BACK FOR MORE
                    1271   1273 ;
05d5  1a            1272   1274 PRTLN:  LDAX D                          ;*** PRTLN ***
05d6  6f            1273   1275         MOV  L,A                        ;LOW ORDER LINE #
05d7  13            1274   1276         INX  D
05d8  1a            1275   1277         LDAX D                          ;HIGH ORDER
05d9  67            1276   1278         MOV  H,A
05da  13            1277   1279         INX  D
05db  0e 04         1278   1280         MVI  C,4H                       ;PRINT 4 DIGIT LINE #
05dd  cd 95 05      1279   1281         CALL PRTNUM
05e0  3e 20         1280   1282         MVI  A,20H                      ;FOLLOWED BY A BLANK
05e2  d7            1281   1283         RST  2
05e3  97            1282   1284         SUB  A                          ;AND THEN THE NEXT
05e4  cd 63 05      1283   1285         CALL PRTSTG
05e7  c9            1284   1286         RET
                    1285   1287 ;
                    1286   1288 ;*************************************************************
                    1287   1289 ;
                    1288   1290 ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
                    1289   1291 ;
                    1290   1292 ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
                    1291   1293 ; DE = HL
                    1292   1294 ;
                    1293   1295 ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
                    1294   1296 ; UNTIL DE = BC
                    1295   1297 ;
                    1296   1298 ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
                    1297   1299 ; STACK
                    1298   1300 ;
                    1299   1301 ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
                    1300   1302 ; STACK
                    1301   1303 ;
05e8  e7            1302   1304 MVUP:   RST  4                          ;*** MVUP ***
05e9  c8            1303   1305         RZ                              ;DE = HL, RETURN
05ea  1a            1304   1306         LDAX D                          ;GET ONE BYTE
05eb  02            1305   1307         STAX B                          ;MOVE IT
05ec  13            1306   1308         INX  D                          ;INCREASE BOTH POINTERS
05ed  03            1307   1309         INX  B
05ee  c3 e8 05      1308   1310         JMP  MVUP                       ;UNTIL DONE
                    1309   1311 ;
05f1  78            1310   1312 MVDOWN: MOV  A,B                        ;*** MVDOWN ***
05f2  92            1311   1313         SUB  D                          ;TEST IF DE = BC
05f3  c2 f9 05      1312   1314         JNZ  MD1                        ;NO, GO MOVE
05f6  79            1313   1315         MOV  A,C                        ;MAYBE, OTHER BYTE?
05f7  93            1314   1316         SUB  E
05f8  c8            1315   1317         RZ                              ;YES, RETURN
05f9  1b            1316   1318 MD1:    DCX  D                          ;ELSE MOVE A BYTE
05fa  2b            1317   1319         DCX  H                          ;BUT FIRST DECREASE
05fb  1a            1318   1320         LDAX D                          ;BOTH POINTERS AND
05fc  77            1319   1321         MOV  M,A                        ;THEN DO IT
05fd  c3 f1 05      1320   1322         JMP  MVDOWN                     ;LOOP BACK
                    1321   1323 ;
0600  c1            1322   1324 POPA:   POP  B                          ;BC = RETURN ADDR.
0601  e1            1323   1325         POP  H                          ;RESTORE LOPVAR, BUT
0602  22 09 08      1324   1326         SHLD LOPVAR                     ;=0 MEANS NO MORE
0605  7c            1325   1327         MOV  A,H
0606  b5            1326   1328         ORA  L
0607  ca 1a 06      1327   1329         JZ   PP1                        ;YEP, GO RETURN
060a  e1            1328   1330         POP  H                          ;NOP, RESTORE OTHERS
060b  22 0b 08      1329   1331         SHLD LOPINC
060e  e1            1330   1332         POP  H
060f  22 0d 08      1331   1333         SHLD LOPLMT
0612  e1            1332   1334         POP  H
0613  22 0f 08      1333   1335         SHLD LOPLN
0616  e1            1334   1336         POP  H
0617  22 11 08      1335   1337         SHLD LOPPT
061a  c5            1336   1338 PP1:    PUSH B                          ;BC = RETURN ADDR.
061b  c9            1337   1339         RET
                    1338   1340 ;
061c  21 78 1f      1339   1341 PUSHA:  LXI  H,STKLMT                   ;*** PUSHA ***
061f  cd 86 04      1340   1342         CALL CHGSGN
0622  c1            1341   1343         POP  B                          ;BC=RETURN ADDRESS
0623  39            1342   1344         DAD  SP                         ;IS STACK NEAR THE TOP?
0624  d2 f6 04      1343   1345         JNC  QSORRY                     ;YES, SORRY FOR THAT
0627  2a 09 08      1344   1346         LHLD LOPVAR                     ;ELSE SAVE LOOP VAR'S
062a  7c            1345   1347         MOV  A,H                        ;BUT IF LOPVAR IS 0
062b  b5            1346   1348         ORA  L                          ;THAT WILL BE ALL
062c  ca 42 06      1347   1349         JZ   PU1
062f  2a 11 08      1348   1350         LHLD LOPPT                      ;ELSE, MORE TO SAVE
0632  e5            1349   1351         PUSH H
0633  2a 0f 08      1350   1352         LHLD LOPLN
0636  e5            1351   1353         PUSH H
0637  2a 0d 08      1352   1354         LHLD LOPLMT
063a  e5            1353   1355         PUSH H
063b  2a 0b 08      1354   1356         LHLD LOPINC
063e  e5            1355   1357         PUSH H
063f  2a 09 08      1356   1358         LHLD LOPVAR
0642  e5            1357   1359 PU1:    PUSH H
0643  c5            1358   1360         PUSH B                          ;BC = RETURN ADDR.
0644  c9            1359   1361         RET
                    1360   1362 ;
                    1361   1363 ;*************************************************************
                    1362   1364 ;
                    1363   1365 ; *** OUTC *** & CHKIO ***
                    1364   1366 ;
                    1365   1367 ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
                    1366   1368 ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
                    1367   1369 ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
                    1368   1370 ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
                    1369   1371 ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
                    1370   1372 ; ARE RESTORED.
                    1371   1373 ;
                    1372   1374 ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
                    1373   1375 ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
                    1374   1376 ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
                    1375   1377 ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
                    1376   1378 ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
                    1377   1379 ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
                    1378   1380 ;
                    1379   1381 ;OUTC:  PUSH PSW                        ;THIS IS AT LOC. 10
                    1380   1382 ;       LDA  OCSW                       ;CHECK SOFTWARE SWITCH
                    1381   1383 ;       ORA  A
0645  32 00 08      1382   1384 INIT:   STA  OCSW
                    1383   1385 ;       MVI  D,19H
0648  16 02         1384   1386         MVI  D,2
064a                1385   1387 PATLOP:
064a  cd 0e 00      1386   1388         CALL CRLF
064d  15            1387   1389         DCR  D
064e  c2 4a 06      1388   1390         JNZ  PATLOP
0651  97            1389   1391         SUB  A
0652  11 9b 06      1390   1392         LXI  D,MSG1
0655  cd 63 05      1391   1393         CALL PRTSTG
0658  21 00 00      1392   1394         LXI  H,START
065b  22 13 08      1393   1395         SHLD RANPNT
065e  21 17 08      1394   1396         LXI  H,TXTBGN
0661  22 15 08      1395   1397         SHLD TXTUNF
0664  c3 ba 00      1396   1398         JMP  RSTART
0667  c2 6c 06      1397   1399 OC2:    JNZ  OC3                        ;IT IS ON
066a  f1            1398   1400         POP  PSW                        ;IT IS OFF
066b  c9            1399   1401         RET                             ;RESTORE AF AND RETURN
066c  db 00         1400   1402 OC3:    IN   0                          ;COME HERE TO DO OUTPUT
066e  07            1401   1403         RLC                             ;STATUS BIT
066f  da 6c 06      1402   1404         JC   OC3                        ;NOT READY, WAIT
0672  f1            1403   1405         POP  PSW                        ;READY, GET OLD A BACK
0673  d3 01         1404   1406         OUT  1                          ;AND SEND IT OUT
0675  fe 0d         1405   1407         CPI  CR                         ;WAS IT CR?
0677  c0            1406   1408         RNZ                             ;NO, FINISHED
0678  3e 0a         1407   1409         MVI  A,LF                       ;YES, WE SEND LF TOO
067a  d7            1408   1410         RST  2                          ;THIS IS RECURSIVE
067b  3e 0d         1409   1411         MVI  A,CR                       ;GET CR BACK IN A
067d  c9            1410   1412         RET
                    1411   1413 ;
067e  db 00         1412   1414 CHKIO:  IN   0                          ;*** CHKIO ***
0680  2f            1413   1415         CMA                             ;STATUS BIT FLIPPED
0681  e6 01         1414   1416         ANI  1H                         ;MASK STATUS BIT
0683  c8            1415   1417         RZ                              ;NOT READY, RETURN "Z"
0684  db 01         1416   1418         IN   1                          ;READY, READ DATA
0686  e6 7f         1417   1419         ANI  7FH                        ;MASK BIT 7 OFF
0688  fe 0f         1418   1420         CPI  0FH                        ;IS IT CONTROL-O?
068a  c2 97 06      1419   1421         JNZ  CI1                        ;NO, MORE CHECKING
068d  3a 00 08      1420   1422         LDA  OCSW                       ;CONTROL-O FLIPS OCSW
0690  2f            1421   1423         CMA                             ;ON TO OFF, OFF TO ON
0691  32 00 08      1422   1424         STA  OCSW
0694  c3 7e 06      1423   1425         JMP  CHKIO                      ;GET ANOTHER INPUT
0697  fe 03         1424   1426 CI1:    CPI  3H                         ;IS IT CONTROL-C?
0699  c0            1425   1427         RNZ                             ;NO, RETURN "NZ"
                    1426   1428 ;       JMP  RSTART                     ;YES, RESTART TBI
069a  76            1427   1429 	HLT
                    1428   1430 ;
069b  54 49 4e 59   1429   1431 MSG1:   DB   'TINY '
069f  20            1429   1432
06a0  42 41 53 49   1430   1433         DB   'BASIC'
06a4  43            1430   1434
06a5  0d            1431   1435         DB   CR
                    1432   1436 ;
                    1433   1437 ;*************************************************************
                    1434   1438 ;
                    1435   1439 ; *** TABLES *** DIRECT *** & EXEC ***
                    1436   1440 ;
                    1437   1441 ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
                    1438   1442 ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
                    1439   1443 ; OF CODE ACCORDING TO THE TABLE.
                    1440   1444 ;
                    1441   1445 ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
                    1442   1446 ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
                    1443   1447 ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
                    1444   1448 ; ALL DIRECT AND STATEMENT COMMANDS.
                    1445   1449 ;
                    1446   1450 ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
                    1447   1451 ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
                    1448   1452 ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
                    1449   1453 ;
                    1450   1454 ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
                    1451   1455 ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
                    1452   1456 ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
                    1453   1457 ; BYTE SET TO 1.
                    1454   1458 ;
                    1455   1459 ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
                    1456   1460 ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
                    1457   1461 ; MATCH THIS NULL ITEM AS DEFAULT.
                    1458   1462 ;
06a6                1459   1463 TAB1:                                   ;DIRECT COMMANDS
06a6  4c 49 53 54   1460   1464         DB   'LIST'
06aa                1461   1465         DWA  LIST
06aa  81          + 1461   1466         DB   (LIST SHR 8) + 128
06ab  6f          + 1461   1467         DB   LIST AND 0FFH
06ac  52 55 4e      1462   1468         DB   'RUN'
06af                1463   1469         DWA  RUN
06af  81          + 1463   1470         DB   (RUN SHR 8) + 128
06b0  41          + 1463   1471         DB   RUN AND 0FFH
06b1  4e 45 57      1464   1472         DB   'NEW'
06b4                1465   1473         DWA  NEW
06b4  81          + 1465   1474         DB   (NEW SHR 8) + 128
06b5  32          + 1465   1475         DB   NEW AND 0FFH
                    1466   1476 ;
06b6                1467   1477 TAB2:                                   ;DIRECT/STATEMENT
06b6  4e 45 58 54   1468   1478         DB   'NEXT'
06ba                1469   1479         DWA  NEXT
06ba  82          + 1469   1480         DB   (NEXT SHR 8) + 128
06bb  57          + 1469   1481         DB   NEXT AND 0FFH
06bc  4c 45 54      1470   1482         DB   'LET'
06bf                1471   1483         DWA  LET
06bf  83          + 1471   1484         DB   (LET SHR 8) + 128
06c0  23          + 1471   1485         DB   LET AND 0FFH
06c1  49 46         1472   1486         DB   'IF'
06c3                1473   1487         DWA  IFF
06c3  82          + 1473   1488         DB   (IFF SHR 8) + 128
06c4  b4          + 1473   1489         DB   IFF AND 0FFH
06c5  47 4f 54 4f   1474   1490         DB   'GOTO'
06c9                1475   1491         DWA  GOTO
06c9  81          + 1475   1492         DB   (GOTO SHR 8) + 128
06ca  60          + 1475   1493         DB   GOTO AND 0FFH
06cb  47 4f 53 55   1476   1494         DB   'GOSUB'
06cf  42            1476   1495
06d0                1477   1496         DWA  GOSUB
06d0  81          + 1477   1497         DB   (GOSUB SHR 8) + 128
06d1  bf          + 1477   1498         DB   GOSUB AND 0FFH
06d2  52 45 54 55   1478   1499         DB   'RETURN'
06d6  52 4e         1478   1500
06d8                1479   1501         DWA  RETURN
06d8  81          + 1479   1502         DB   (RETURN SHR 8) + 128
06d9  df          + 1479   1503         DB   RETURN AND 0FFH
06da  52 45 4d      1480   1504         DB   'REM'
06dd                1481   1505         DWA  REM
06dd  82          + 1481   1506         DB   (REM SHR 8) + 128
06de  b0          + 1481   1507         DB   REM AND 0FFH
06df  46 4f 52      1482   1508         DB   'FOR'
06e2                1483   1509         DWA  FOR
06e2  81          + 1483   1510         DB   (FOR SHR 8) + 128
06e3  f8          + 1483   1511         DB   FOR AND 0FFH
06e4  49 4e 50 55   1484   1512         DB   'INPUT'
06e8  54            1484   1513
06e9                1485   1514         DWA  INPUT
06e9  82          + 1485   1515         DB   (INPUT SHR 8) + 128
06ea  cd          + 1485   1516         DB   INPUT AND 0FFH
06eb  50 52 49 4e   1486   1517         DB   'PRINT'
06ef  54            1486   1518
06f0                1487   1519         DWA  PRINT
06f0  81          + 1487   1520         DB   (PRINT SHR 8) + 128
06f1  87          + 1487   1521         DB   PRINT AND 0FFH
06f2  53 54 4f 50   1488   1522         DB   'STOP'
06f6                1489   1523         DWA  STOP
06f6  81          + 1489   1524         DB   (STOP SHR 8) + 128
06f7  3b          + 1489   1525         DB   STOP AND 0FFH
06f8                1490   1526         DWA  DEFLT
06f8  83          + 1490   1527         DB   (DEFLT SHR 8) + 128
06f9  1d          + 1490   1528         DB   DEFLT AND 0FFH
                    1491   1529 ;
06fa                1492   1530 TAB4:                                   ;FUNCTIONS
06fa  52 4e 44      1493   1531         DB   'RND'
06fd                1494   1532         DWA  RND
06fd  84          + 1494   1533         DB   (RND SHR 8) + 128
06fe  25          + 1494   1534         DB   RND AND 0FFH
06ff  41 42 53      1495   1535         DB   'ABS'
0702                1496   1536         DWA  ABS
0702  84          + 1496   1537         DB   (ABS SHR 8) + 128
0703  50          + 1496   1538         DB   ABS AND 0FFH
0704  53 49 5a 45   1497   1539         DB   'SIZE'
0708                1498   1540         DWA  SIZE
0708  84          + 1498   1541         DB   (SIZE SHR 8) + 128
0709  59          + 1498   1542         DB   SIZE AND 0FFH
070a                1499   1543         DWA  XP40
070a  84          + 1499   1544         DB   (XP40 SHR 8) + 128
070b  0b          + 1499   1545         DB   XP40 AND 0FFH
                    1500   1546 ;
070c                1501   1547 TAB5:                                   ;"TO" IN "FOR"
070c  54 4f         1502   1548         DB   'TO'
070e                1503   1549         DWA  FR1
070e  82          + 1503   1550         DB   (FR1 SHR 8) + 128
070f  08          + 1503   1551         DB   FR1 AND 0FFH
0710                1504   1552         DWA  QWHAT
0710  84          + 1504   1553         DB   (QWHAT SHR 8) + 128
0711  c9          + 1504   1554         DB   QWHAT AND 0FFH
                    1505   1555 ;
0712                1506   1556 TAB6:                                   ;"STEP" IN "FOR"
0712  53 54 45 50   1507   1557         DB   'STEP'
0716                1508   1558         DWA  FR2
0716  82          + 1508   1559         DB   (FR2 SHR 8) + 128
0717  12          + 1508   1560         DB   FR2 AND 0FFH
0718                1509   1561         DWA  FR3
0718  82          + 1509   1562         DB   (FR3 SHR 8) + 128
0719  16          + 1509   1563         DB   FR3 AND 0FFH
                    1510   1564 ;
071a                1511   1565 TAB8:                                   ;RELATION OPERATORS
071a  3e 3d         1512   1566         DB   '>='
071c                1513   1567         DWA  XP11
071c  83          + 1513   1568         DB   (XP11 SHR 8) + 128
071d  33          + 1513   1569         DB   XP11 AND 0FFH
071e  23            1514   1570         DB   '#'
071f                1515   1571         DWA  XP12
071f  83          + 1515   1572         DB   (XP12 SHR 8) + 128
0720  39          + 1515   1573         DB   XP12 AND 0FFH
0721  3e            1516   1574         DB   '>'
0722                1517   1575         DWA  XP13
0722  83          + 1517   1576         DB   (XP13 SHR 8) + 128
0723  3f          + 1517   1577         DB   XP13 AND 0FFH
0724  3d            1518   1578         DB   '='
0725                1519   1579         DWA  XP15
0725  83          + 1519   1580         DB   (XP15 SHR 8) + 128
0726  4e          + 1519   1581         DB   XP15 AND 0FFH
0727  3c 3d         1520   1582         DB   '<='
0729                1521   1583         DWA  XP14
0729  83          + 1521   1584         DB   (XP14 SHR 8) + 128
072a  46          + 1521   1585         DB   XP14 AND 0FFH
072b  3c            1522   1586         DB   '<'
072c                1523   1587         DWA  XP16
072c  83          + 1523   1588         DB   (XP16 SHR 8) + 128
072d  54          + 1523   1589         DB   XP16 AND 0FFH
072e                1524   1590         DWA  XP17
072e  83          + 1524   1591         DB   (XP17 SHR 8) + 128
072f  5a          + 1524   1592         DB   XP17 AND 0FFH
                    1525   1593 ;
0730  21 a5 06      1526   1594 DIRECT: LXI  H,TAB1-1                   ;*** DIRECT ***
                    1527   1595 ;
0733                1528   1596 EXEC:                                   ;*** EXEC ***
0733  ef            1529   1597 EX0:    RST  5                          ;IGNORE LEADING BLANKS
0734  d5            1530   1598         PUSH D                          ;SAVE POINTER
0735  1a            1531   1599 EX1:    LDAX D                          ;IF FOUND '.' IN STRING
0736  13            1532   1600         INX  D                          ;BEFORE ANY MISMATCH
0737  fe 2e         1533   1601         CPI  2EH                        ;WE DECLARE A MATCH
0739  ca 52 07      1534   1602         JZ   EX3
073c  23            1535   1603         INX  H                          ;HL->TABLE
073d  be            1536   1604         CMP  M                          ;IF MATCH, TEST NEXT
073e  ca 35 07      1537   1605         JZ   EX1
0741  3e 7f         1538   1606         MVI  A,07FH                     ;ELSE SEE IF BIT 7
0743  1b            1539   1607         DCX  D                          ;OF TABLE IS SET, WHICH
0744  be            1540   1608         CMP  M                          ;IS THE JUMP ADDR. (HI)
0745  da 59 07      1541   1609         JC   EX5                        ;C:YES, MATCHED
0748  23            1542   1610 EX2:    INX  H                          ;NC:NO, FIND JUMP ADDR.
0749  be            1543   1611         CMP  M
074a  d2 48 07      1544   1612         JNC  EX2
074d  23            1545   1613         INX  H                          ;BUMP TO NEXT TAB. ITEM
074e  d1            1546   1614         POP  D                          ;RESTORE STRING POINTER
074f  c3 33 07      1547   1615         JMP  EX0                        ;TEST AGAINST NEXT ITEM
0752  3e 7f         1548   1616 EX3:    MVI  A,07FH                     ;PARTIAL MATCH, FIND
0754  23            1549   1617 EX4:    INX  H                          ;JUMP ADDR., WHICH IS
0755  be            1550   1618         CMP  M                          ;FLAGGED BY BIT 7
0756  d2 54 07      1551   1619         JNC  EX4
0759  7e            1552   1620 EX5:    MOV  A,M                        ;LOAD HL WITH THE JUMP
075a  23            1553   1621         INX  H                          ;ADDRESS FROM THE TABLE
075b  6e            1554   1622         MOV  L,M
075c  e6 7f         1555   1623         ANI  7FH                        ;MASK OFF BIT 7
075e  67            1556   1624         MOV  H,A
075f  f1            1557   1625         POP  PSW                        ;CLEAN UP THE GABAGE
0760  e9            1558   1626         PCHL                            ;AND WE GO DO IT
                    1559   1627 ;
0761                1560   1628 LSTROM:                                 ;ALL ABOVE CAN BE ROM
                    1561   1629 ;       ORG  1000H                      ;HERE DOWN MUST BE RAM
                    1562   1630         ORG  0800H
0800                1563   1631 OCSW:   DS   1                          ;SWITCH FOR OUTPUT
0801                1564   1632 CURRNT: DS   2                          ;POINTS TO CURRENT LINE
0803                1565   1633 STKGOS: DS   2                          ;SAVES SP IN 'GOSUB'
0805                1566   1634 VARNXT: DS   2                          ;TEMP STORAGE
0807                1567   1635 STKINP: DS   2                          ;SAVES SP IN 'INPUT'
0809                1568   1636 LOPVAR: DS   2                          ;'FOR' LOOP SAVE AREA
080b                1569   1637 LOPINC: DS   2                          ;INCREMENT
080d                1570   1638 LOPLMT: DS   2                          ;LIMIT
080f                1571   1639 LOPLN:  DS   2                          ;LINE NUMBER
0811                1572   1640 LOPPT:  DS   2                          ;TEXT POINTER
0813                1573   1641 RANPNT: DS   2                          ;RANDOM NUMBER POINTER
0815                1574   1642 TXTUNF: DS   2                          ;->UNFILLED TEXT AREA
0817                1575   1643 TXTBGN: DS   2                          ;TEXT SAVE AREA BEGINS
                    1576   1644 ;       ORG  1366H
                    1577   1645         ORG  1F00H
1f00                1578   1646 TXTEND: DS   0                          ;TEXT SAVE AREA ENDS
1f00                1579   1647 VARBGN: DS   55                         ;VARIABLE @(0)
1f37                1580   1648 BUFFER: DS   64                         ;INPUT BUFFER
1f77                1581   1649 BUFEND: DS   1                          ;BUFFER ENDS
1f78                1582   1650 STKLMT: DS   1                          ;TOP LIMIT FOR STACK
                    1583   1651 ;       ORG  1400H
                    1584   1652         ORG  2000H
2000                1585   1653 STACK:  DS   0                          ;STACK STARTS HERE
                    1586   1654 ;
000d  =             1587   1655 CR      EQU  0DH
000a  =             1588   1656 LF      EQU  0AH
                    1589   1657
2000                1590   1658         END

Macro table

DWA

Symbol table

ABS    0450    AHOW   00a0    ASORRY 04f7    AWHAT  04ca    BUFEND 1f77
BUFFER 1f37    CHGSGN 0486    CHKIO  067e    CHKSGN 0483    CI1    0697
CK1    04a1    CKHLDE 049b    CR     000d    CRLF   000e    CURRNT 0801
DEFLT  031d    DIRECT 0730    DIVIDE 0466    DV1    0471    DV2    0473
ENDCHK 04c5    ERROR  04cd    EX0    0733    EX1    0735    EX2    0748
EX3    0752    EX4    0754    EX5    0759    EXEC   0733    EXPR1  032d
EXPR2  0371    EXPR3  03a5    EXPR4  0405    FI1    04bd    FI2    04c4
FIN    04b6    FL1    0543    FL2    0558    FNDLN  053b    FNDLP  0543
FNDNXT 0557    FNDSKP 0559    FOR    01f8    FR1    0208    FR2    0212
FR3    0216    FR4    0219    FR5    021c*   FR7    0231    FR8    0252
GETLN  04fd    GL1    0501    GL3    0526    GL4    0533    GOSUB  01bf
GOTO   0160    HOW    00a6    IFF    02b4    INIT   0645    INPERR 02c3
INPUT  02cd    IP1    02cd    IP2    02db    IP3    02eb    IP4    0315
IP5    031c    LET    0323    LF     000a    LIST   016f    LOPINC 080b
LOPLMT 080d    LOPLN  080f    LOPPT  0811    LOPVAR 0809    LS1    0178
LSTROM 0761    LT1    032c    MD1    05f9    MSG1   069b    MVDOWN 05f1
MVUP   05e8    NEW    0132    NEXT   0257    NX0    025e    NX1    0298
NX2    02ac    NX3    0276    NX4    0288    NX5    02aa    OC2    0667
OC3    066c    OCSW   0800    OK     00ab    PARN   041a    PATLOP 064a
PN1    05a0    PN2    05a7    PN3    05b7    PN4    05b8    PN5    05c4
PN6    05ca    POPA   0600    PP1    061a    PR0    019b    PR1    01a3
PR2    0192    PR3    01a9    PR6    01b2    PR8    01b6    PRINT  0187
PRTLN  05d5    PRTNUM 0595    PRTSTG 0563    PS1    0564    PU1    0642
PUSHA  061c    QHOW   009f    QSORRY 04f6    QT1    0574    QT2    057d
QT3    0581    QT4    0589    QT5    0594    QTSTG  056f    QWHAT  04c9
RA1    0440    RANPNT 0813    REM    02b0    RETURN 01df    RND    0425
RSTART 00ba    RUN    0141    RUNNXL 0147    RUNSML 0157    RUNTSL 0150
SETVAL 04a3    SIZE   0459    SORRY  00b4    SS1    0028    ST1    00bd*
ST2    00cd    ST3    00d6    ST4    010b    STACK  2000    START  0000
STKGOS 0803    STKINP 0807    STKLMT 1f78    STOP   013b    SUBDE  047c
SV1    04b3    TAB1   06a6    TAB2   06b6    TAB4   06fa    TAB5   070c
TAB6   0712    TAB8   071a    TC1    0068    TC2    0073    TN1    007c
TSTNUM 0077    TV1    0058    TXTBGN 0817    TXTEND 1f00    TXTUNF 0815
VARBGN 1f00    VARNXT 0805    WHAT   00ae    XP11   0333    XP12   0339
XP13   033f    XP14   0346    XP15   034e    XP16   0354    XP17   035a
XP18   035c    XP21   037a    XP22   037d    XP23   0380    XP24   0387
XP25   0398    XP26   039b    XP31   03a8    XP32   03c5    XP33   03cd
XP34   03d8    XP35   03f7    XP40   040b    XP41   0414    XP42   0421
XP43   0422
