;
;	MP/M 2 XIOS for z80pack machines using SD-FDC
;
;	Copyright (C) 1989-2024 by Udo Munk
;	Copyright (C) 2025 by Thomas Eberhardt
;
; History:
; 12-MAR-2025 first public release based on cpmsim/srcmpm and RP2xxx/srccpm3
;
NMBCNS	EQU	2		;number of consoles
TICKPS	EQU	60		;number of ticks per second
;
;	i/o ports
;
CON0STA	EQU	0		;console 0 status port
CON0DAT	EQU	1		;console 0 data port
CON1STA	EQU	2		;console 1 status port
CON1DAT	EQU	3		;console 1 data port
PRTSTA	EQU	5		;printer status port
PRTDAT	EQU	6		;printer data port
FDC	EQU	4		;FDC
MMUSEL	EQU	64		;bank select mmu
CLKCMD	EQU	65		;clock command
CLKDAT	EQU	66		;clock data
TIMER	EQU	67		;interrupt timer
LEDS	EQU	255		;frontpanel led's
;
;	clock commands
;
GETSEC	EQU	0		;get seconds
;
;	XDOS functions
;
POLL	EQU	131		;xdos poll function
PLCO0	EQU	0		;poll console out #0
PLCI0	EQU	1		;poll console in #0
PLCO1	EQU	2		;poll console out #1
PLCI1	EQU	3		;poll console in #1
FLAGSET	EQU	133		;xdos flag set function
;
	.Z80
	CSEG
;
;	jump vector for individual subroutines
;
	JP	COMMONBASE	;commonbase
	JP	WARMSTART	;warm start
	JP	CONST		;console status
	JP	CONIN		;console character in
	JP	CONOUT		;console character out
	JP	LIST		;list character out
	JP	PUNCH		;not used by MP/M 2
	JP	READER		;not used by MP/M 2
	JP	HOME		;move head to home
	JP	SELDSK		;select disk
	JP	SETTRK		;set track numer
	JP	SETSEC		;set sector number
	JP	SETDMA		;set dma address
	JP	READ		;read disk
	JP	WRITE		;write disk
	JP	LISTST		;not used by MP/M 2
	JP	SECTRAN		;sector translate
	JP	SELMEMORY	;select memory
	JP	POLLDEVICE	;poll device
	JP	STARTCLOCK	;start clock
	JP	STOPCLOCK	;stop clock
	JP	EXITREGION	;exit region
	JP	MAXCONSOLE	;maximum console number
	JP	SYSTEMINIT	;system initialization
	JP	IDLE		;idle prozedure
;
;	keep disk allocation and check vectors in banked memory
;
ALL00:	DEFS	31		;allocation vector 0
ALL01:	DEFS	31		;allocation vector 1
ALL02:	DEFS	31		;allocation vector 2
ALL03:	DEFS	31		;allocation vector 3
CHK00:	DEFS	16		;check vector 0
CHK01:	DEFS	16		;check vector 1
CHK02:	DEFS	16		;check vector 2
CHK03:	DEFS	16		;check vector 3
;
;	COMMONBASE start
;
COMMONBASE:
	JP	COLDSTART
SWTUSER:
	JP	$-$
SWTSYS:	JP	$-$
PDISP:	JP	$-$
XDOS:	JP	$-$
SYSDAT:	DEFW	$-$
;
COLDSTART:
WARMSTART:
	LD	C,0
	JP	XDOS		;system reset, terminate prozess
;
;	MP/M II V2.0 Console Bios
;
CONST:
	CALL	PTBLJMP		;compute and jump to handler
	DW	PTSTI0
	DW	PTSTI1
;
CONIN:
	CALL	PTBLJMP		;compute and jump to handle
	DW	PTIN0
	DW	PTIN1
;
CONOUT:
	CALL	PTBLJMP		;compute and jump to handler
	DW	PTOUT0
	DW	PTOUT1
;
PTBLJMP:			;compute and jump to handler
	LD	A,D
	ADD	A,A		;double table index for address offset
	POP	HL		;return address of jump table
	LD	E,A
	LD	D,0
	ADD	HL,DE		;table index * 2 + table base
	LD	E,(HL)		;get handler address
	INC	HL
	LD	D,(HL)
	EX	DE,HL
	JP	(HL)		;jump to computed handler
;
PTSTI0:	IN	A,(CON0STA)	;console 0 input status
	AND	01H		;input ready?
	JP	NZ,DEVNRY	;if device not ready
;	return with device ready
DEVRDY:	LD	A,0FFH
	RET
;
PTSTO0:	IN	A,(CON0STA)	;console 0 output status
	AND	80H		;output ready?
	JP	Z,DEVRDY	;if device ready
;	return with device not ready
DEVNRY:	XOR	A
	RET
;
PTIN0:	LD	C,POLL		;poll console 0 status in
	LD	E,PLCI0
	CALL	XDOS		;poll console 0
	IN	A,(CON0DAT)	;read character
	RET
;
PTOUT0:	IN	A,(CON0STA)	;console 0 output status
	AND	80H		;ready?
	JP	Z,TXRDY0	;yes, output
	PUSH	BC
	LD	C,POLL		;poll console 0 status out
	LD	E,PLCO0
	CALL	XDOS
	POP	BC
TXRDY0:	LD	A,C		;console 0 output
	OUT	(CON0DAT),A
	RET
;
PTSTI1:	IN	A,(CON1STA)	;console 1 input status
	AND	01H		;input ready?
	JP	NZ,DEVNRY
	JP	DEVRDY
;
PTSTO1:	IN	A,(CON1STA)	;console 1 output status
	AND	80H		;output ready?
	JP	NZ,DEVNRY
	JP	DEVRDY
;
PTIN1:	LD	C,POLL		;poll console 1 status in
	LD	E,PLCI1
	CALL	XDOS		;poll console 1
	IN	A,(CON1DAT)	;read character
	RET
;
PTOUT1:	IN	A,(CON1STA)	;console 1 output status
	AND	2		;ready?
	JP	NZ,TXRDY1	;yes, output
	PUSH	BC
	LD	C,POLL		;poll console 1 status out
	LD	E,PLCO1
	CALL	XDOS
	POP	BC
TXRDY1:	LD	A,C		;console 1 output
	OUT	(CON1DAT),A
	RET
;
LIST:
	LD	A,C
	OUT	(PRTDAT),A
	RET
;
;	not used by MP/M 2
PUNCH:
READER:
LISTST:
	RET
;
;	MP/M II V2.0 Xios
;
;	select/protect memory
;		BC = address of memory descriptor
SELMEMORY:
	LD	HL,3		;offset memory bank in memory descriptor
	ADD	HL,BC
	LD	A,(HL)		;get bank
	OUT	(MMUSEL),A	;and select it
	RET
;
;	poll character devices
;
POLLDEVICE:
	LD	A,C
	CP	NMBDEV		;device to poll in range?
	JP	C,DEVOK		;ok, poll it
	LD	A,NMBDEV	;no, set to max dev
DEVOK:	CALL	TBLJMP		;and jump to device poll code
DEVTBL:	DW	PTSTO0		;poll console 0 status out
	DW	PTSTI0		;poll console 0 status in
	DW	PTSTO1		;poll console 1 status out
	DW	PTSTI1		;poll console 1 status in
NMBDEV	EQU	($-DEVTBL)/2	;number of devices to poll
	DW	RTNEMPTY	;bad device handler
;
TBLJMP:				;compute and jump to handler, a = table index
	ADD	A,A		;double table index
	POP	HL		;get address of table
	LD	E,A		;compute table offeset
	LD	D,0
	ADD	HL,DE
	LD	E,(HL)		;get handler address
	INC	HL
	LD	D,(HL)
	EX	DE,HL
	JP	(HL)		;jump to handler
;
RTNEMPTY:			;bad device, never ready
	XOR	A
	RET
;
;	start clock
;
STARTCLOCK:
	LD	A,0FFH
	LD	(TICKN),A
	RET
;
;	stop clock
;
STOPCLOCK:
	XOR	A
	LD	(TICKN),A
	RET
;
;	exit region:
;	enable interrupt if not preempted or in dispatcher
;
EXITREGION:
	LD	A,(PREEMP)
	OR	A
	RET	NZ
	EI
	RET
;
;	maximum console number
;
MAXCONSOLE:
	LD	A,NMBCNS
	RET
;
;	system initialization
;		C	MP/M debugger restart #
;		DE	MP/M entry point for debugger
;		HL	BIOS jump table address
;
SYSTEMINIT:
;
	IN	A,(MMUSEL)	;get number of memory banks
	RRA
	RRA
	RRA
	RRA
	AND	0FH
	INC	A
	LD	B,A
;
SYS1:	DEC	B
	LD	A,B
	OUT	(MMUSEL),A	;select every bank and initialize
	LD	A,0C3H		;jp instruction
	LD	(0),A
	LD	(38H),A
	PUSH	HL
	LD	L,C		;rst # > HL
	LD	H,0
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL		;rst address in HL
	LD	(HL),A		;debugger entry for configured rst
	INC	HL
	LD	(HL),E
	INC	HL
	LD	(HL),D
	POP	HL
	LD	(1),HL
	PUSH	HL
	LD	HL,INTHND	;interrupt routine at rst 38
	LD	(39H),HL
	POP	HL
	JP	NZ,SYS1
;
	LD	HL,SIGNON	;print message
SYS2:	LD	A,(HL)
	OR	A
	JP	Z,SYS3
	OUT	(CON0DAT),A
	INC	HL
	JP	SYS2
;
SYS3:	LD	A,10H		;setup FDC command
	OUT	(FDC),A
	LD	HL,CMD
	LD	A,L
	OUT	(FDC),A
	LD	A,H
	OUT	(FDC),A
	IM	1
	LD	A,1		;enable 60 Hz interrupt timer
	OUT	(TIMER),A
	EI
	RET
;
;	idle
;
IDLE:	EI
	HALT
	RET
;
;	interrupt handler
;
INTHND:	LD	(SVDHL),HL	;save registers
	POP	HL
	LD	(SVDRET),HL
	PUSH	AF
	LD	HL,0
	ADD	HL,SP
	LD	(SVDSP),HL
	LD	SP,INTSTK
	PUSH	DE
	PUSH	BC
	LD	A,0FFH		;set preempted flag
	LD	(PREEMP),A
	LD	A,(TICKN)
	OR	A		;test tick, indicates delayed process
	JP	Z,INTHND1
	LD	C,FLAGSET	;set flag #1 each tick
	LD	E,1
	CALL	XDOS
INTHND1:
	LD	A,GETSEC	;get seconds from hardware clock
	OUT	(CLKCMD),A
	IN	A,(CLKDAT)
	OR	A		;full minute?
	JP	NZ,INTHND2
	LD	C,FLAGSET	;set flag #4 each full minute
	LD	E,4
	CALL	XDOS
INTHND2:
	LD	HL,CNTSEC	;decrement tick counter
	DEC	(HL)
	JP	NZ,INTDONE
	LD	(HL),TICKPS	;set flag #2 each second
	LD	C,FLAGSET
	LD	E,2
	CALL	XDOS
INTDONE:
	XOR	A		;clear preempted flag
	LD	(PREEMP),A
	POP	BC		;restore registers
	POP	DE
	LD	HL,(SVDSP)
	LD	SP,HL
	POP	AF
	LD	HL,(SVDRET)
	PUSH	HL
	LD	HL,(PDISP+1)	;dispatch processes
	PUSH	HL
	LD	HL,(SVDHL)
	RETI
;
;	i/o drivers for disks
;
;	move to the track 00 position of current drive
;	translate this call into a settrk call with parameter 00
;
HOME:	LD	C,0		;select track 0
	JP	SETTRK		;we will move to 00 on first read/write
;
;	select disk given by register C
;
SELDSK: LD	HL,0000H	;error return code
	LD	A,C
	CP	4		;FD drive 0-3?
	JP	C,SELFD		;go
	RET			;no, error
;	disk number is in the proper range
;	compute proper disk parameter header address
SELFD:	LD	(SDISK),A	;store disk drive
	LD	L,A		;L=disk number 0,1,2,3
	ADD	HL,HL		;*2
	ADD	HL,HL		;*4
	ADD	HL,HL		;*8
	ADD	HL,HL		;*16 (size of each header)
	LD	DE,DPBASE
	ADD	HL,DE		;HL=.dpbase(diskno*16)
	RET
;
;	set track given by register c
;
SETTRK: LD	A,C
	LD	(DDTRK),A
	RET
;
;	set sector given by register bc
;
SETSEC: LD	A,C
	LD	(DDSEC),A
	RET
;
;	translate the sector given by BC using the
;	translate table given by DE
;
SECTRAN:
	LD	A,D		;do we have a translation table?
	OR	E
	JP	NZ,SECT1	;yes, translate
	LD	L,C		;no, return untranslated
	LD	H,B		;in HL
	INC	L		;sector no. start with 1
	RET	NZ
	INC	H
	RET
SECT1:	EX	DE,HL		;HL=.trans
	ADD	HL,BC		;HL=.trans(sector)
	LD	L,(HL)		;L = trans(sector)
	LD	H,0		;HL= trans(sector)
	RET			;with value in HL
;
;	set dma address given by registers b and c
;
SETDMA: LD	A,C		;low order address
	LD	(DDLDMA),A	;set in FDC command bytes
	LD	A,B		;high order address
	LD	(DDHDMA),A	;set in FDC command bytes
	RET
;
;	perform read operation
;
READ:	CALL	SWTUSER		;switch to user page
	LD	A,(SDISK)	;get disk
	OR	20H		;mask in read command
	JP	WAITIO		;to perform the actual i/o
;
;	perform a write operation
;
WRITE:	CALL	SWTUSER		;switch to user page
	LD	A,(SDISK)	;get disk
	OR	40H		;mask in write command
;
;	enter here from read and write to perform the actual i/o
;	operation.  return a 00h in register a if the operation completes
;	properly, and 01h if an error occurs during the read or write
;
WAITIO: OUT	(FDC),A		;ask FDC to execute the command
	CALL	SWTSYS		;switch back to system page
	IN	A,(FDC)		;get FDC status
	OR	A		;is it zero ?
	RET	Z		;return if OK
	CPL			;complement for LED's
	OUT	(LEDS),A	;display the error code
	LD	A,1		;nonrecoverable error
	RET			;return with error
;
;	XIOS data segment
;
SIGNON:	DEFB	13,10
	DEFM	'MP/M 2 XIOS V1.9, '
	DEFM	'Copyright 1989-2024 by Udo Munk'
	DEFM	' & 2025 by Thomas Eberhardt'
	DEFB	13,10,0
;
TICKN:	DEFB	0		;flag for tick
PREEMP:	DEFB	0		;preempted flag
SVDHL:	DEFS	2		;save hl during interrupt
SVDRET:	DEFS	2		;save return address during interrupt
SVDSP:	DEFS	2		;save sp during interrupt
CNTSEC:	DEFB	TICKPS		;ticks per second counter
SDISK:	DEFB	0		;selected disk
;
				;interrupt stack
	DEFW	0C7C7H,0C7C7H,0C7C7H,0C7C7H
	DEFW	0C7C7H,0C7C7H,0C7C7H,0C7C7H
	DEFW	0C7C7H,0C7C7H,0C7C7H,0C7C7H
	DEFW	0C7C7H,0C7C7H,0C7C7H,0C7C7H
INTSTK:
;
;	fixed data tables for four-drive standard
;	IBM-compatible 8" SD disks
;
;	disk parameter header for disk 00
DPBASE:	DEFW	TRANS,0000H
	DEFW	0000H,0000H
	DEFW	DIRBF,DPBLK
	DEFW	CHK00,ALL00
;	disk parameter header for disk 01
	DEFW	TRANS,0000H
	DEFW	0000H,0000H
	DEFW	DIRBF,DPBLK
	DEFW	CHK01,ALL01
;	disk parameter header for disk 02
	DEFW	TRANS,0000H
	DEFW	0000H,0000H
	DEFW	DIRBF,DPBLK
	DEFW	CHK02,ALL02
;	disk parameter header for disk 03
	DEFW	TRANS,0000H
	DEFW	0000H,0000H
	DEFW	DIRBF,DPBLK
	DEFW	CHK03,ALL03
;
;	sector translate vector for the IBM 8" SD disks
;
TRANS:	DEFB	1,7,13,19	;sectors 1,2,3,4
	DEFB	25,5,11,17	;sectors 5,6,7,8
	DEFB	23,3,9,15	;sectors 9,10,11,12
	DEFB	21,2,8,14	;sectors 13,14,15,16
	DEFB	20,26,6,12	;sectors 17,18,19,20
	DEFB	18,24,4,10	;sectors 21,22,23,24
	DEFB	16,22		;sectors 25,26
;
;	disk parameter block, common to all IBM 8" SD disks
;
DPBLK:  DEFW	26		;sectors per track
	DEFB	3		;block shift factor
	DEFB	7		;block mask
	DEFB	0		;extent mask
	DEFW	242		;disk size-1
	DEFW	63		;directory max
	DEFB	192		;alloc 0
	DEFB	0		;alloc 1
	DEFW	16		;check size
	DEFW	2		;track offset
;
DIRBF:	DEFS	128		;scratch directory area
;
;	FDC command bytes
;
CMD:	DEFS	4
DDTRK	EQU	CMD+0		;track
DDSEC	EQU	CMD+1		;sector
DDLDMA	EQU	CMD+2		;dma address low
DDHDMA	EQU	CMD+3		;dma address high
;
	END
